{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<K, V> IndexMapCore<K, V> {\n    const MAX_ENTRIES_CAPACITY: usize = (isize::MAX as usize)\n        / mem::size_of::<Bucket<K, V>>();\n    #[inline]\n    pub(crate) const fn new() -> Self {\n        IndexMapCore {\n            indices: Indices::new(),\n            entries: Vec::new(),\n        }\n    }\n    #[inline]\n    fn borrow_mut(&mut self) -> RefMut<'_, K, V> {}\n    #[inline]\n    pub(crate) fn with_capacity(n: usize) -> Self {\n        IndexMapCore {\n            indices: Indices::with_capacity(n),\n            entries: Vec::with_capacity(n),\n        }\n    }\n    #[inline]\n    pub(crate) fn len(&self) -> usize {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {}\n    pub(crate) fn clear(&mut self) {}\n    pub(crate) fn truncate(&mut self, len: usize) {}\n    #[track_caller]\n    pub(crate) fn drain<R>(&mut self, range: R) -> vec::Drain<'_, Bucket<K, V>>\n    where\n        R: RangeBounds<usize>,\n    {}\n    #[cfg(feature = \"rayon\")]\n    pub(crate) fn par_drain<R>(\n        &mut self,\n        range: R,\n    ) -> rayon::vec::Drain<'_, Bucket<K, V>>\n    where\n        K: Send,\n        V: Send,\n        R: RangeBounds<usize>,\n    {}\n    #[track_caller]\n    pub(crate) fn split_off(&mut self, at: usize) -> Self {\n        let len = self.entries.len();\n        assert!(\n            at <= len,\n            \"index out of bounds: the len is {len} but the index is {at}. Expected index <= len\"\n        );\n        self.erase_indices(at, self.entries.len());\n        let entries = self.entries.split_off(at);\n        let mut indices = Indices::with_capacity(entries.len());\n        insert_bulk_no_grow(&mut indices, &entries);\n        Self { indices, entries }\n    }\n    #[track_caller]\n    pub(crate) fn split_splice<R>(\n        &mut self,\n        range: R,\n    ) -> (Self, vec::IntoIter<Bucket<K, V>>)\n    where\n        R: RangeBounds<usize>,\n    {\n        let range = simplify_range(range, self.len());\n        self.erase_indices(range.start, self.entries.len());\n        let entries = self.entries.split_off(range.end);\n        let drained = self.entries.split_off(range.start);\n        let mut indices = Indices::with_capacity(entries.len());\n        insert_bulk_no_grow(&mut indices, &entries);\n        (Self { indices, entries }, drained.into_iter())\n    }\n    pub(crate) fn append_unchecked(&mut self, other: &mut Self) {}\n    pub(crate) fn reserve(&mut self, additional: usize) {}\n    pub(crate) fn reserve_exact(&mut self, additional: usize) {}\n    pub(crate) fn try_reserve(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    fn try_reserve_entries(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    pub(crate) fn try_reserve_exact(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    pub(crate) fn shrink_to(&mut self, min_capacity: usize) {}\n    pub(crate) fn pop(&mut self) -> Option<(K, V)> {}\n    pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    fn push_entry(&mut self, hash: HashValue, key: K, value: V) {}\n    pub(crate) fn insert_full(\n        &mut self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> (usize, Option<V>)\n    where\n        K: Eq,\n    {}\n    pub(crate) fn replace_full(\n        &mut self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> (usize, Option<(K, V)>)\n    where\n        K: Eq,\n    {}\n    pub(crate) fn shift_remove_full<Q>(\n        &mut self,\n        hash: HashValue,\n        key: &Q,\n    ) -> Option<(usize, K, V)>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    #[inline]\n    pub(crate) fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    #[inline]\n    #[track_caller]\n    pub(super) fn move_index(&mut self, from: usize, to: usize) {}\n    #[inline]\n    #[track_caller]\n    pub(crate) fn swap_indices(&mut self, a: usize, b: usize) {}\n    pub(crate) fn swap_remove_full<Q>(\n        &mut self,\n        hash: HashValue,\n        key: &Q,\n    ) -> Option<(usize, K, V)>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    #[inline]\n    pub(crate) fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn erase_indices(&mut self, start: usize, end: usize) {}\n    pub(crate) fn retain_in_order<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&mut K, &mut V) -> bool,\n    {}\n    fn rebuild_hash_table(&mut self) {}\n    pub(crate) fn reverse(&mut self) {\n        self.entries.reverse();\n        let len = self.entries.len();\n        for i in &mut self.indices {\n            *i = len - *i - 1;\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n513 pub(crate) fn reverse(&mut self) {\n514     self.entries.reverse();\n515 \n516     // No need to save hash indices, can easily calculate what they should\n517     // be, given that this is an in-place reversal.\n518     let len = self.entries.len();\n519     for i in &mut self.indices {\n520         *i = len - *i - 1;\n521     }\n522 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}