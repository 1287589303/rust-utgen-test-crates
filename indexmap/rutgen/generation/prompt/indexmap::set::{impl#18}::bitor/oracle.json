{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is indexmap\ntype Bucket<T> = super::Bucket<T, ()>;\npub use self::iter::{\n    Difference, Drain, Intersection, IntoIter, Iter, Splice, SymmetricDifference, Union,\n};\npub use self::mutable::MutableValues;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::set as rayon;\nuse crate::TryReserveError;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse crate::util::try_simplify_range;\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::ops::{BitAnd, BitOr, BitXor, Index, RangeBounds, Sub};\nuse super::{Entries, Equivalent, IndexMap};\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\npub struct Union<'a, T, S> {\n    iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,\n}\nimpl<T, S1, S2> BitOr<&IndexSet<T, S2>> for &IndexSet<T, S1>\nwhere\n    T: Eq + Hash + Clone,\n    S1: BuildHasher + Default,\n    S2: BuildHasher,\n{\n    type Output = IndexSet<T, S1>;\n    fn bitor(self, other: &IndexSet<T, S2>) -> Self::Output {\n        self.union(other).cloned().collect()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the set union, cloned into a new set.\n///\n/// Values from `self` are collected in their original order, followed by\n/// values that are unique to `other` in their original order.\n1265 fn bitor(self, other: &IndexSet<T, S2>) -> Self::Output {\n1266     self.union(other).cloned().collect()\n1267 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}