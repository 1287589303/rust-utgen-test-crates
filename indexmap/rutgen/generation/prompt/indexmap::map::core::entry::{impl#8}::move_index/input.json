{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\npub struct IndexedEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    index: usize,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\nimpl<'a, K, V> IndexedEntry<'a, K, V> {\n    pub(crate) fn new(map: &'a mut IndexMapCore<K, V>, index: usize) -> Self {\n        Self {\n            map: map.borrow_mut(),\n            index,\n        }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn insert(&mut self, value: V) -> V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub fn swap_remove_entry(mut self) -> (K, V) {}\n    pub fn shift_remove_entry(mut self) -> (K, V) {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[track_caller]\n    pub fn move_index(mut self, to: usize) {\n        self.map.move_index(self.index, to);\n    }\n    pub fn swap_indices(mut self, other: usize) {}\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {\n        let from_hash = self.entries[from].hash;\n        let _ = self.entries[to];\n        if from != to {\n            update_index(self.indices, from_hash, from, usize::MAX);\n            if from < to {\n                self.decrement_indices(from + 1, to + 1);\n                self.entries[from..=to].rotate_left(1);\n            } else if to < from {\n                self.increment_indices(to, from);\n                self.entries[to..=from].rotate_right(1);\n            }\n            update_index(self.indices, from_hash, usize::MAX, to);\n        }\n    }\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Moves the position of the entry to a new index\n/// by shifting all other entries in-between.\n///\n/// This is equivalent to [`IndexMap::move_index`][`crate::IndexMap::move_index`]\n/// coming `from` the current [`.index()`][Self::index].\n///\n/// * If `self.index() < to`, the other pairs will shift down while the targeted pair moves up.\n/// * If `self.index() > to`, the other pairs will shift up while the targeted pair moves down.\n///\n/// ***Panics*** if `to` is out of bounds.\n///\n/// Computes in **O(n)** time (average).\n537 pub fn move_index(mut self, to: usize) {\n538     self.map.move_index(self.index, to);\n539 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}