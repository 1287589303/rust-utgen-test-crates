{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/iter.rs\n// crate name is indexmap\nuse super::core::IndexMapCore;\nuse super::{Bucket, Entries, IndexMap, Slice};\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::ops::{Index, RangeBounds};\nuse core::slice;\npub struct Splice<'a, I, K, V, S>\nwhere\n    I: Iterator<Item = (K, V)>,\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    map: &'a mut IndexMap<K, V, S>,\n    tail: IndexMapCore<K, V>,\n    drain: vec::IntoIter<Bucket<K, V>>,\n    replace_with: I,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Clone)]\npub struct IntoIter<K, V> {\n    iter: vec::IntoIter<Bucket<K, V>>,\n}\n#[derive(Clone)]\npub struct IntoIter<T> {\n    iter: vec::IntoIter<Bucket<T>>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\nimpl<I, K, V, S> Iterator for Splice<'_, I, K, V, S>\nwhere\n    I: Iterator<Item = (K, V)>,\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    type Item = (K, V);\n    fn next(&mut self) -> Option<Self::Item> {\n        self.drain.next().map(Bucket::key_value)\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n723 fn next(&mut self) -> Option<Self::Item> {\n724     self.drain.next().map(Bucket::key_value)\n725 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}