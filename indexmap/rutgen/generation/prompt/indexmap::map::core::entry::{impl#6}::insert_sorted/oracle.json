{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\npub struct VacantEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    hash: HashValue,\n    key: K,\n}\n#[repr(transparent)]\npub struct Slice<K, V> {\n    pub(crate) entries: [Bucket<K, V>],\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\nimpl<'a, K, V> VacantEntry<'a, K, V> {\n    pub fn index(&self) -> usize {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn into_key(self) -> K {}\n    pub fn insert(self, value: V) -> &'a mut V {}\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {}\n    pub fn insert_sorted(self, value: V) -> (usize, &'a mut V)\n    where\n        K: Ord,\n    {\n        let slice = crate::map::Slice::from_slice(self.map.entries);\n        let i = slice.binary_search_keys(&self.key).unwrap_err();\n        (i, self.shift_insert(i, value))\n    }\n    pub fn shift_insert(mut self, index: usize, value: V) -> &'a mut V {\n        self.map.shift_insert_unique(index, self.hash, self.key, value);\n        &mut self.map.entries[index].value\n    }\n}\nimpl<K, V> Slice<K, V> {\n    pub(crate) fn into_entries(self: Box<Self>) -> Vec<Bucket<K, V>> {}\n    pub const fn new<'a>() -> &'a Self {\n        Self::from_slice(&[])\n    }\n    pub fn new_mut<'a>() -> &'a mut Self {\n        Self::from_mut_slice(&mut [])\n    }\n    #[inline]\n    pub const fn len(&self) -> usize {}\n    #[inline]\n    pub const fn is_empty(&self) -> bool {}\n    pub fn get_index(&self, index: usize) -> Option<(&K, &V)> {}\n    pub fn get_index_mut(&mut self, index: usize) -> Option<(&K, &mut V)> {}\n    pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Self> {\n        let range = try_simplify_range(range, self.entries.len())?;\n        self.entries.get(range).map(Slice::from_slice)\n    }\n    pub fn get_range_mut<R: RangeBounds<usize>>(\n        &mut self,\n        range: R,\n    ) -> Option<&mut Self> {\n        let range = try_simplify_range(range, self.entries.len())?;\n        self.entries.get_mut(range).map(Slice::from_mut_slice)\n    }\n    pub fn first(&self) -> Option<(&K, &V)> {}\n    pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {}\n    pub fn last(&self) -> Option<(&K, &V)> {}\n    pub fn last_mut(&mut self) -> Option<(&K, &mut V)> {}\n    pub fn split_at(&self, index: usize) -> (&Self, &Self) {\n        let (first, second) = self.entries.split_at(index);\n        (Self::from_slice(first), Self::from_slice(second))\n    }\n    pub fn split_at_mut(&mut self, index: usize) -> (&mut Self, &mut Self) {\n        let (first, second) = self.entries.split_at_mut(index);\n        (Self::from_mut_slice(first), Self::from_mut_slice(second))\n    }\n    pub fn split_first(&self) -> Option<((&K, &V), &Self)> {\n        if let [first, rest @ ..] = &self.entries {\n            Some((first.refs(), Self::from_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_first_mut(&mut self) -> Option<((&K, &mut V), &mut Self)> {\n        if let [first, rest @ ..] = &mut self.entries {\n            Some((first.ref_mut(), Self::from_mut_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_last(&self) -> Option<((&K, &V), &Self)> {\n        if let [rest @ .., last] = &self.entries {\n            Some((last.refs(), Self::from_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_last_mut(&mut self) -> Option<((&K, &mut V), &mut Self)> {\n        if let [rest @ .., last] = &mut self.entries {\n            Some((last.ref_mut(), Self::from_mut_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    pub fn into_keys(self: Box<Self>) -> IntoKeys<K, V> {}\n    pub fn values(&self) -> Values<'_, K, V> {}\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    pub fn into_values(self: Box<Self>) -> IntoValues<K, V> {}\n    pub fn binary_search_keys(&self, x: &K) -> Result<usize, usize>\n    where\n        K: Ord,\n    {\n        self.binary_search_by(|p, _| p.cmp(x))\n    }\n    #[inline]\n    pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a K, &'a V) -> Ordering,\n    {}\n    #[inline]\n    pub fn binary_search_by_key<'a, B, F>(\n        &'a self,\n        b: &B,\n        mut f: F,\n    ) -> Result<usize, usize>\n    where\n        F: FnMut(&'a K, &'a V) -> B,\n        B: Ord,\n    {}\n    #[must_use]\n    pub fn partition_point<P>(&self, mut pred: P) -> usize\n    where\n        P: FnMut(&K, &V) -> bool,\n    {}\n}\n#[allow(unsafe_code)]\nimpl<K, V> Slice<K, V> {\n    pub(super) const fn from_slice(entries: &[Bucket<K, V>]) -> &Self {\n        unsafe { &*(entries as *const [Bucket<K, V>] as *const Self) }\n    }\n    pub(super) fn from_mut_slice(entries: &mut [Bucket<K, V>]) -> &mut Self {\n        unsafe { &mut *(entries as *mut [Bucket<K, V>] as *mut Self) }\n    }\n    pub(super) fn from_boxed(entries: Box<[Bucket<K, V>]>) -> Box<Self> {\n        unsafe { Box::from_raw(Box::into_raw(entries) as *mut Self) }\n    }\n    fn into_boxed(self: Box<Self>) -> Box<[Bucket<K, V>]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts the entry's key and the given value into the map at its ordered\n/// position among sorted keys, and returns the new index and a mutable\n/// reference to the value.\n///\n/// If the existing keys are **not** already sorted, then the insertion\n/// index is unspecified (like [`slice::binary_search`]), but the key-value\n/// pair is inserted at that position regardless.\n///\n/// Computes in **O(n)** time (average).\n395 pub fn insert_sorted(self, value: V) -> (usize, &'a mut V)\n396 where\n397     K: Ord,\n398 {\n399     let slice = crate::map::Slice::from_slice(self.map.entries);\n400     let i = slice.binary_search_keys(&self.key).unwrap_err();\n401     (i, self.shift_insert(i, value))\n402 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}