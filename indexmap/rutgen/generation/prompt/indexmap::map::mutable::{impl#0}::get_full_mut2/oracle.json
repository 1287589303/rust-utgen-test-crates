{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/mutable.rs\n// crate name is indexmap\nuse core::hash::{BuildHasher, Hash};\nuse super::{\n    Bucket, Entries, Entry, Equivalent, IndexMap, IndexedEntry, IterMut2, OccupiedEntry,\n    VacantEntry,\n};\npub trait MutableKeys: private::Sealed {\n    type Key;\n    type Value;\n    fn get_full_mut2<Q>(\n        &mut self,\n        key: &Q,\n    ) -> Option<(usize, &mut Self::Key, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Key>;\n    fn get_index_mut2(\n        &mut self,\n        index: usize,\n    ) -> Option<(&mut Self::Key, &mut Self::Value)>;\n    fn iter_mut2(&mut self) -> IterMut2<'_, Self::Key, Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Key, &mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait RawEntryApiV1<K, V, S>: private::Sealed {\n    fn raw_entry_v1(&self) -> RawEntryBuilder<'_, K, V, S>;\n    fn raw_entry_mut_v1(&mut self) -> RawEntryBuilderMut<'_, K, V, S>;\n}\npub trait Sealed {}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\nimpl<K, V, S> MutableKeys for IndexMap<K, V, S>\nwhere\n    S: BuildHasher,\n{\n    type Key = K;\n    type Value = V;\n    fn get_full_mut2<Q>(&mut self, key: &Q) -> Option<(usize, &mut K, &mut V)>\n    where\n        Q: ?Sized + Hash + Equivalent<K>,\n    {\n        if let Some(i) = self.get_index_of(key) {\n            let entry = &mut self.as_entries_mut()[i];\n            Some((i, &mut entry.key, &mut entry.value))\n        } else {\n            None\n        }\n    }\n    fn get_index_mut2(&mut self, index: usize) -> Option<(&mut K, &mut V)> {}\n    fn iter_mut2(&mut self) -> IterMut2<'_, Self::Key, Self::Value> {\n        IterMut2::new(self.as_entries_mut())\n    }\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut K, &mut V) -> bool,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n65 fn get_full_mut2<Q>(&mut self, key: &Q) -> Option<(usize, &mut K, &mut V)>\n66 where\n67     Q: ?Sized + Hash + Equivalent<K>,\n68 {\n69     if let Some(i) = self.get_index_of(key) {\n70         let entry = &mut self.as_entries_mut()[i];\n71         Some((i, &mut entry.key, &mut entry.value))\n72     } else {\n73         None\n74     }\n75 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}