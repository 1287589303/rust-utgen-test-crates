{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is indexmap\ntype Bucket<T> = super::Bucket<T, ()>;\npub use self::iter::{\n    Difference, Drain, Intersection, IntoIter, Iter, Splice, SymmetricDifference, Union,\n};\npub use self::mutable::MutableValues;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::set as rayon;\nuse crate::TryReserveError;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse crate::util::try_simplify_range;\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::ops::{BitAnd, BitOr, BitXor, Index, RangeBounds, Sub};\nuse super::{Entries, Equivalent, IndexMap};\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\npub struct Drain<'a, T> {\n    iter: vec::Drain<'a, Bucket<T>>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<T, S> IndexSet<T, S> {\n    pub fn with_capacity_and_hasher(n: usize, hash_builder: S) -> Self {\n        IndexSet {\n            map: IndexMap::with_capacity_and_hasher(n, hash_builder),\n        }\n    }\n    pub const fn with_hasher(hash_builder: S) -> Self {\n        IndexSet {\n            map: IndexMap::with_hasher(hash_builder),\n        }\n    }\n    pub fn capacity(&self) -> usize {}\n    pub fn hasher(&self) -> &S {}\n    pub fn len(&self) -> usize {}\n    pub fn is_empty(&self) -> bool {}\n    pub fn iter(&self) -> Iter<'_, T> {}\n    pub fn clear(&mut self) {}\n    pub fn truncate(&mut self, len: usize) {}\n    #[track_caller]\n    pub fn drain<R>(&mut self, range: R) -> Drain<'_, T>\n    where\n        R: RangeBounds<usize>,\n    {\n        Drain::new(self.map.core.drain(range))\n    }\n    #[track_caller]\n    pub fn split_off(&mut self, at: usize) -> Self\n    where\n        S: Clone,\n    {\n        Self {\n            map: self.map.split_off(at),\n        }\n    }\n    pub fn reserve(&mut self, additional: usize) {}\n    pub fn reserve_exact(&mut self, additional: usize) {}\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    pub fn try_reserve_exact(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    pub fn shrink_to_fit(&mut self) {}\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n}\nimpl<'a, T> Drain<'a, T> {\n    pub(super) fn new(iter: vec::Drain<'a, Bucket<T>>) -> Self {\n        Self { iter }\n    }\n    pub fn as_slice(&self) -> &Slice<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Clears the `IndexSet` in the given index range, returning those values\n/// as a drain iterator.\n///\n/// The range may be any type that implements [`RangeBounds<usize>`],\n/// including all of the `std::ops::Range*` types, or even a tuple pair of\n/// `Bound` start and end values. To drain the set entirely, use `RangeFull`\n/// like `set.drain(..)`.\n///\n/// This shifts down all entries following the drained range to fill the\n/// gap, and keeps the allocated memory for reuse.\n///\n/// ***Panics*** if the starting point is greater than the end point or if\n/// the end point is greater than the length of the set.\n254 pub fn drain<R>(&mut self, range: R) -> Drain<'_, T>\n255 where\n256     R: RangeBounds<usize>,\n257 {\n258     Drain::new(self.map.core.drain(range))\n259 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}