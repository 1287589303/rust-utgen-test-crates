{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is indexmap\nuse alloc::vec::{self, Vec};\npub use crate::map::IndexMap;\npub use crate::set::IndexSet;\npub use equivalent::Equivalent;\n#[derive(Clone, PartialEq, Eq, Debug)]\npub struct TryReserveError {\n    kind: TryReserveErrorKind,\n}\n#[derive(Clone, PartialEq, Eq, Debug)]\nenum TryReserveErrorKind {\n    Std(alloc::collections::TryReserveError),\n    CapacityOverflow,\n    AllocError { layout: alloc::alloc::Layout },\n}\nimpl core::fmt::Display for TryReserveError {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        let reason = match &self.kind {\n            TryReserveErrorKind::Std(e) => return core::fmt::Display::fmt(e, f),\n            TryReserveErrorKind::CapacityOverflow => {\n                \" because the computed capacity exceeded the collection's maximum\"\n            }\n            TryReserveErrorKind::AllocError { .. } => {\n                \" because the memory allocator returned an error\"\n            }\n        };\n        f.write_str(\"memory allocation failed\")?;\n        f.write_str(reason)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n254 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n255     let reason = match &self.kind {\n256         TryReserveErrorKind::Std(e) => return core::fmt::Display::fmt(e, f),\n257         TryReserveErrorKind::CapacityOverflow => {\n258             \" because the computed capacity exceeded the collection's maximum\"\n259         }\n260         TryReserveErrorKind::AllocError { .. } => {\n261             \" because the memory allocator returned an error\"\n262         }\n263     };\n264     f.write_str(\"memory allocation failed\")?;\n265     f.write_str(reason)\n266 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}