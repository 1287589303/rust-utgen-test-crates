{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is indexmap\npub use self::core::raw_entry_v1::{self, RawEntryApiV1};\npub use self::core::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\npub use self::iter::{\n    Drain, IntoIter, IntoKeys, IntoValues, Iter, IterMut, IterMut2, Keys, Splice, Values,\n    ValuesMut,\n};\npub use self::mutable::MutableEntryKey;\npub use self::mutable::MutableKeys;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::map as rayon;\nuse ::core::cmp::Ordering;\nuse ::core::fmt;\nuse ::core::hash::{BuildHasher, Hash, Hasher};\nuse ::core::mem;\nuse ::core::ops::{Index, IndexMut, RangeBounds};\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse self::core::IndexMapCore;\nuse crate::util::{third, try_simplify_range};\nuse crate::{Bucket, Entries, Equivalent, HashValue, TryReserveError};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait RawEntryApiV1<K, V, S>: private::Sealed {\n    fn raw_entry_v1(&self) -> RawEntryBuilder<'_, K, V, S>;\n    fn raw_entry_mut_v1(&mut self) -> RawEntryBuilderMut<'_, K, V, S>;\n}\npub trait MutableKeys: private::Sealed {\n    type Key;\n    type Value;\n    fn get_full_mut2<Q>(\n        &mut self,\n        key: &Q,\n    ) -> Option<(usize, &mut Self::Key, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Key>;\n    fn get_index_mut2(\n        &mut self,\n        index: usize,\n    ) -> Option<(&mut Self::Key, &mut Self::Value)>;\n    fn iter_mut2(&mut self) -> IterMut2<'_, Self::Key, Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Key, &mut Self::Value) -> bool;\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\nimpl<'a, K, V, S> Extend<(&'a K, &'a V)> for IndexMap<K, V, S>\nwhere\n    K: Hash + Eq + Copy,\n    V: Copy,\n    S: BuildHasher,\n{\n    fn extend<I: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iterable: I) {\n        self.extend(iterable.into_iter().map(|(&key, &value)| (key, value)));\n    }\n}\nimpl<K, V, S> IndexMap<K, V, S> {\n    #[inline]\n    pub fn with_capacity_and_hasher(n: usize, hash_builder: S) -> Self {\n        if n == 0 {\n            Self::with_hasher(hash_builder)\n        } else {\n            IndexMap {\n                core: IndexMapCore::with_capacity(n),\n                hash_builder,\n            }\n        }\n    }\n    pub const fn with_hasher(hash_builder: S) -> Self {\n        IndexMap {\n            core: IndexMapCore::new(),\n            hash_builder,\n        }\n    }\n    pub fn capacity(&self) -> usize {}\n    pub fn hasher(&self) -> &S {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        self.len() == 0\n    }\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    pub fn into_keys(self) -> IntoKeys<K, V> {}\n    pub fn values(&self) -> Values<'_, K, V> {}\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    pub fn into_values(self) -> IntoValues<K, V> {}\n    pub fn clear(&mut self) {}\n    pub fn truncate(&mut self, len: usize) {}\n    #[track_caller]\n    pub fn drain<R>(&mut self, range: R) -> Drain<'_, K, V>\n    where\n        R: RangeBounds<usize>,\n    {}\n    #[track_caller]\n    pub fn split_off(&mut self, at: usize) -> Self\n    where\n        S: Clone,\n    {\n        Self {\n            core: self.core.split_off(at),\n            hash_builder: self.hash_builder.clone(),\n        }\n    }\n    pub fn reserve(&mut self, additional: usize) {\n        self.core.reserve(additional);\n    }\n    pub fn reserve_exact(&mut self, additional: usize) {}\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    pub fn try_reserve_exact(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    pub fn shrink_to_fit(&mut self) {}\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Extend the map with all key-value pairs in the iterable.\n///\n/// This is equivalent to calling [`insert`][IndexMap::insert] for each of\n/// them in order, which means that for keys that already existed\n/// in the map, their value is updated but it keeps the existing order.\n///\n/// New keys are inserted in the order they appear in the sequence. If\n/// equivalents of a key occur more than once, the last corresponding value\n/// prevails.\n1542 fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iterable: I) {\n1543     // (Note: this is a copy of `std`/`hashbrown`'s reservation logic.)\n1544     // Keys may be already present or show multiple times in the iterator.\n1545     // Reserve the entire hint lower bound if the map is empty.\n1546     // Otherwise reserve half the hint (rounded up), so the map\n1547     // will only resize twice in the worst case.\n1548     let iter = iterable.into_iter();\n1549     let reserve = if self.is_empty() {\n1550         iter.size_hint().0\n1551     } else {\n1552         (iter.size_hint().0 + 1) / 2\n1553     };\n1554     self.reserve(reserve);\n1555     iter.for_each(move |(k, v)| {\n1556         self.insert(k, v);\n1557     });\n1558 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}