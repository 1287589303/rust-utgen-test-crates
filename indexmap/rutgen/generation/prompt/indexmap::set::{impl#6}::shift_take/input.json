{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is indexmap\ntype Bucket<T> = super::Bucket<T, ()>;\npub use self::iter::{\n    Difference, Drain, Intersection, IntoIter, Iter, Splice, SymmetricDifference, Union,\n};\npub use self::mutable::MutableValues;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::set as rayon;\nuse crate::TryReserveError;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse crate::util::try_simplify_range;\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::ops::{BitAnd, BitOr, BitXor, Index, RangeBounds, Sub};\nuse super::{Entries, Equivalent, IndexMap};\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\nimpl<T, S> IndexSet<T, S>\nwhere\n    S: BuildHasher,\n{\n    pub fn contains<Q>(&self, value: &Q) -> bool\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn get<Q>(&self, value: &Q) -> Option<&T>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn get_full<Q>(&self, value: &Q) -> Option<(usize, &T)>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn get_index_of<Q>(&self, value: &Q) -> Option<usize>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    #[deprecated(\n        note = \"`remove` disrupts the set order -- \\\n        use `swap_remove` or `shift_remove` for explicit behavior.\"\n    )]\n    pub fn remove<Q>(&mut self, value: &Q) -> bool\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn swap_remove<Q>(&mut self, value: &Q) -> bool\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn shift_remove<Q>(&mut self, value: &Q) -> bool\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    #[deprecated(\n        note = \"`take` disrupts the set order -- \\\n        use `swap_take` or `shift_take` for explicit behavior.\"\n    )]\n    pub fn take<Q>(&mut self, value: &Q) -> Option<T>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn swap_take<Q>(&mut self, value: &Q) -> Option<T>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn shift_take<Q>(&mut self, value: &Q) -> Option<T>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {\n        self.map.shift_remove_entry(value).map(|(x, ())| x)\n    }\n    pub fn swap_remove_full<Q>(&mut self, value: &Q) -> Option<(usize, T)>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    pub fn shift_remove_full<Q>(&mut self, value: &Q) -> Option<(usize, T)>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Removes and returns the value in the set, if any, that is equal to the\n/// given one.\n///\n/// Like [`Vec::remove`], the value is removed by shifting all of the\n/// elements that follow it, preserving their relative order.\n/// **This perturbs the index of all of those elements!**\n///\n/// Return `None` if `value` was not in the set.\n///\n/// Computes in **O(n)** time (average).\n764 pub fn shift_take<Q>(&mut self, value: &Q) -> Option<T>\n765 where\n766     Q: ?Sized + Hash + Equivalent<T>,\n767 {\n768     self.map.shift_remove_entry(value).map(|(x, ())| x)\n769 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}