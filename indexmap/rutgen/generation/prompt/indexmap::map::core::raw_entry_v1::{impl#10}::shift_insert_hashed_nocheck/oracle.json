{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\nimpl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n    pub fn index(&self) -> usize {}\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {}\n    pub fn shift_insert(self, index: usize, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn shift_insert_hashed_nocheck(\n        mut self,\n        index: usize,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {\n        let hash = HashValue(hash as usize);\n        self.map.shift_insert_unique(index, hash, key, value);\n        self.map.entries[index].muts()\n    }\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {\n        let end = self.indices.len();\n        assert!(index <= end);\n        self.increment_indices(index, end);\n        let entries = &*self.entries;\n        self.indices\n            .insert_unique(\n                hash.get(),\n                index,\n                move |&i| {\n                    debug_assert_ne!(i, index);\n                    let i = if i < index { i } else { i - 1 };\n                    entries[i].hash.get()\n                },\n            );\n        if self.entries.len() == self.entries.capacity() {\n            self.reserve_entries(1);\n        }\n        self.entries.insert(index, Bucket { hash, key, value });\n    }\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\nimpl<K, V> Bucket<K, V> {\n    fn key_ref(&self) -> &K {}\n    fn value_ref(&self) -> &V {}\n    fn value_mut(&mut self) -> &mut V {}\n    fn key(self) -> K {}\n    fn value(self) -> V {}\n    fn key_value(self) -> (K, V) {}\n    fn refs(&self) -> (&K, &V) {}\n    fn ref_mut(&mut self) -> (&K, &mut V) {}\n    fn muts(&mut self) -> (&mut K, &mut V) {\n        (&mut self.key, &mut self.value)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts the given key and value into the map with the provided hash\n/// at the given index, and returns mutable references to them.\n///\n/// ***Panics*** if `index` is out of bounds.\n///\n/// Computes in **O(n)** time (average).\n648 pub fn shift_insert_hashed_nocheck(\n649     mut self,\n650     index: usize,\n651     hash: u64,\n652     key: K,\n653     value: V,\n654 ) -> (&'a mut K, &'a mut V) {\n655     let hash = HashValue(hash as usize);\n656     self.map.shift_insert_unique(index, hash, key, value);\n657     self.map.entries[index].muts()\n658 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}