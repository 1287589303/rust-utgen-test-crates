{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub struct OccupiedEntry<'a, K, V> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\npub struct IndexedEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    index: usize,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<'a, K, V> From<IndexedEntry<'a, K, V>> for OccupiedEntry<'a, K, V> {\n    fn from(other: IndexedEntry<'a, K, V>) -> Self {\n        let IndexedEntry { map: RefMut { indices, entries }, index } = other;\n        let hash = entries[index].hash;\n        Self {\n            entries,\n            index: indices\n                .find_entry(hash.get(), move |&i| i == index)\n                .expect(\"index not found\"),\n        }\n    }\n}\nimpl HashValue {\n    #[inline(always)]\n    fn get(self) -> u64 {\n        self.0 as u64\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n327 fn from(other: IndexedEntry<'a, K, V>) -> Self {\n328     let IndexedEntry {\n329         map: RefMut { indices, entries },\n330         index,\n331     } = other;\n332     let hash = entries[index].hash;\n333     Self {\n334         entries,\n335         index: indices\n336             .find_entry(hash.get(), move |&i| i == index)\n337             .expect(\"index not found\"),\n338     }\n339 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}