{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\npub struct OccupiedEntry<'a, K, V> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\nimpl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n    pub fn index(&self) -> usize {}\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {\n        let hash = HashValue(hash as usize);\n        self.map.insert_unique(hash, key, value).into_muts()\n    }\n    pub fn shift_insert(self, index: usize, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn shift_insert_hashed_nocheck(\n        mut self,\n        index: usize,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {}\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {\n        let i = self.indices.len();\n        debug_assert_eq!(i, self.entries.len());\n        let entry = self.indices.insert_unique(hash.get(), i, get_hash(self.entries));\n        if self.entries.len() == self.entries.capacity() {\n            reserve_entries(self.entries, 1, 2 * self.entries.capacity());\n        }\n        self.entries.push(Bucket { hash, key, value });\n        OccupiedEntry::new(self.entries, entry)\n    }\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\nimpl<'a, K, V> OccupiedEntry<'a, K, V> {\n    pub(crate) fn new(\n        entries: &'a mut Entries<K, V>,\n        index: hash_table::OccupiedEntry<'a, usize>,\n    ) -> Self {\n        Self { entries, index }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {}\n    #[inline]\n    fn into_ref_mut(self) -> RefMut<'a, K, V> {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub(super) fn into_muts(self) -> (&'a mut K, &'a mut V) {\n        let index = self.index();\n        self.entries[index].muts()\n    }\n    pub fn insert(&mut self, value: V) -> V {}\n    #[deprecated(\n        note = \"`remove` disrupts the map order -- \\\n        use `swap_remove` or `shift_remove` for explicit behavior.\"\n    )]\n    pub fn remove(self) -> V {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[deprecated(\n        note = \"`remove_entry` disrupts the map order -- \\\n        use `swap_remove_entry` or `shift_remove_entry` for explicit behavior.\"\n    )]\n    pub fn remove_entry(self) -> (K, V) {}\n    pub fn swap_remove_entry(self) -> (K, V) {}\n    pub fn shift_remove_entry(self) -> (K, V) {}\n    #[track_caller]\n    pub fn move_index(self, to: usize) {}\n    pub fn swap_indices(self, other: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts the given key and value into the map with the provided hash,\n/// and returns mutable references to them.\n621 pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V) {\n622     let hash = HashValue(hash as usize);\n623     self.map.insert_unique(hash, key, value).into_muts()\n624 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}