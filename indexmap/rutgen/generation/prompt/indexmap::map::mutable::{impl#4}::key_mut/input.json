{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/mutable.rs\n// crate name is indexmap\nuse core::hash::{BuildHasher, Hash};\nuse super::{\n    Bucket, Entries, Entry, Equivalent, IndexMap, IndexedEntry, IterMut2, OccupiedEntry,\n    VacantEntry,\n};\npub trait MutableEntryKey: private::Sealed {\n    type Key;\n    fn key_mut(&mut self) -> &mut Self::Key;\n}\npub trait Sealed {}\npub struct IndexedEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    index: usize,\n}\nimpl<K, V> MutableEntryKey for IndexedEntry<'_, K, V> {\n    type Key = K;\n    fn key_mut(&mut self) -> &mut Self::Key {\n        self.key_mut()\n    }\n}\nimpl<'a, K, V> IndexedEntry<'a, K, V> {\n    pub(crate) fn new(map: &'a mut IndexMapCore<K, V>, index: usize) -> Self {\n        Self {\n            map: map.borrow_mut(),\n            index,\n        }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {\n        &mut self.map.entries[self.index].key\n    }\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn insert(&mut self, value: V) -> V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub fn swap_remove_entry(mut self) -> (K, V) {}\n    pub fn shift_remove_entry(mut self) -> (K, V) {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[track_caller]\n    pub fn move_index(mut self, to: usize) {}\n    pub fn swap_indices(mut self, other: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n153 fn key_mut(&mut self) -> &mut Self::Key {\n154     self.key_mut()\n155 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}