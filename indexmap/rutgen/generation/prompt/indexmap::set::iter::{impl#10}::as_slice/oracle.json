{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set/iter.rs\n// crate name is indexmap\nuse super::{Bucket, Entries, IndexSet, Slice};\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::RangeBounds;\nuse core::slice::Iter as SliceIter;\n#[derive(Clone)]\npub struct IntoIter<T> {\n    iter: vec::IntoIter<Bucket<T>>,\n}\n#[repr(transparent)]\npub struct Slice<T> {\n    pub(crate) entries: [Bucket<T>],\n}\n#[derive(Clone)]\npub struct IntoIter<K, V> {\n    iter: vec::IntoIter<Bucket<K, V>>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<T> IntoIter<T> {\n    pub(super) fn new(entries: Vec<Bucket<T>>) -> Self {\n        Self { iter: entries.into_iter() }\n    }\n    pub fn as_slice(&self) -> &Slice<T> {\n        Slice::from_slice(self.iter.as_slice())\n    }\n}\n#[allow(unsafe_code)]\nimpl<T> Slice<T> {\n    pub(super) const fn from_slice(entries: &[Bucket<T>]) -> &Self {\n        unsafe { &*(entries as *const [Bucket<T>] as *const Self) }\n    }\n    pub(super) fn from_boxed(entries: Box<[Bucket<T>]>) -> Box<Self> {\n        unsafe { Box::from_raw(Box::into_raw(entries) as *mut Self) }\n    }\n    fn into_boxed(self: Box<Self>) -> Box<[Bucket<T>]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a slice of the remaining entries in the iterator.\n104 pub fn as_slice(&self) -> &Slice<T> {\n105     Slice::from_slice(self.iter.as_slice())\n106 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}