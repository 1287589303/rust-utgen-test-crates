{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\npub struct RawOccupiedEntryMut<'a, K, V, S> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n    hash_builder: PhantomData<&'a S>,\n}\npub enum RawEntryMut<'a, K, V, S> {\n    /// Existing slot with equivalent key.\n    Occupied(RawOccupiedEntryMut<'a, K, V, S>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(RawVacantEntryMut<'a, K, V, S>),\n}\nimpl<K: fmt::Debug, V: fmt::Debug, S> fmt::Debug for RawEntryMut<'_, K, V, S> {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let mut tuple = f.debug_tuple(\"RawEntryMut\");\n        match self {\n            Self::Vacant(v) => tuple.field(v),\n            Self::Occupied(o) => tuple.field(o),\n        };\n        tuple.finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n316 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n317     let mut tuple = f.debug_tuple(\"RawEntryMut\");\n318     match self {\n319         Self::Vacant(v) => tuple.field(v),\n320         Self::Occupied(o) => tuple.field(o),\n321     };\n322     tuple.finish()\n323 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}