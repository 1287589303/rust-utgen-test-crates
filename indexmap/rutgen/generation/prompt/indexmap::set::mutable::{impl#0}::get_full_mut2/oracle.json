{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set/mutable.rs\n// crate name is indexmap\nuse core::hash::{BuildHasher, Hash};\nuse super::{Equivalent, IndexSet};\nuse crate::map::MutableKeys;\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait Sealed {}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\nimpl<T, S> MutableValues for IndexSet<T, S>\nwhere\n    S: BuildHasher,\n{\n    type Value = T;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut T)>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {\n        match self.map.get_full_mut2(value) {\n            Some((index, value, ())) => Some((index, value)),\n            None => None,\n        }\n    }\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut T> {}\n    fn retain2<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&mut T) -> bool,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n57 fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut T)>\n58 where\n59     Q: ?Sized + Hash + Equivalent<T>,\n60 {\n61     match self.map.get_full_mut2(value) {\n62         Some((index, value, ())) => Some((index, value)),\n63         None => None,\n64     }\n65 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}