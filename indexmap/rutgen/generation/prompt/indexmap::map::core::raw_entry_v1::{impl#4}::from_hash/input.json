{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawEntryBuilderMut<'a, K, V, S> {\n    map: &'a mut IndexMap<K, V, S>,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\npub struct RawOccupiedEntryMut<'a, K, V, S> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n    hash_builder: PhantomData<&'a S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\npub enum RawEntryMut<'a, K, V, S> {\n    /// Existing slot with equivalent key.\n    Occupied(RawOccupiedEntryMut<'a, K, V, S>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(RawVacantEntryMut<'a, K, V, S>),\n}\nimpl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S> {\n    pub fn from_key<Q>(self, key: &Q) -> RawEntryMut<'a, K, V, S>\n    where\n        S: BuildHasher,\n        Q: ?Sized + Hash + Equivalent<K>,\n    {}\n    pub fn from_key_hashed_nocheck<Q>(\n        self,\n        hash: u64,\n        key: &Q,\n    ) -> RawEntryMut<'a, K, V, S>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    pub fn from_hash<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S>\n    where\n        F: FnMut(&K) -> bool,\n    {\n        let ref_entries = &*self.map.core.entries;\n        let eq = move |&i: &usize| is_match(&ref_entries[i].key);\n        match self.map.core.indices.find_entry(hash, eq) {\n            Ok(index) => {\n                RawEntryMut::Occupied(RawOccupiedEntryMut {\n                    entries: &mut self.map.core.entries,\n                    index,\n                    hash_builder: PhantomData,\n                })\n            }\n            Err(absent) => {\n                RawEntryMut::Vacant(RawVacantEntryMut {\n                    map: RefMut::new(absent.into_table(), &mut self.map.core.entries),\n                    hash_builder: &self.map.hash_builder,\n                })\n            }\n        }\n    }\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Access an entry by hash.\n286 pub fn from_hash<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S>\n287 where\n288     F: FnMut(&K) -> bool,\n289 {\n290     let ref_entries = &*self.map.core.entries;\n291     let eq = move |&i: &usize| is_match(&ref_entries[i].key);\n292     match self.map.core.indices.find_entry(hash, eq) {\n293         Ok(index) => RawEntryMut::Occupied(RawOccupiedEntryMut {\n294             entries: &mut self.map.core.entries,\n295             index,\n296             hash_builder: PhantomData,\n297         }),\n298         Err(absent) => RawEntryMut::Vacant(RawVacantEntryMut {\n299             map: RefMut::new(absent.into_table(), &mut self.map.core.entries),\n300             hash_builder: &self.map.hash_builder,\n301         }),\n302     }\n303 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}