{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/iter.rs\n// crate name is indexmap\nuse super::core::IndexMapCore;\nuse super::{Bucket, Entries, IndexMap, Slice};\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::ops::{Index, RangeBounds};\nuse core::slice;\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait RawEntryApiV1<K, V, S>: private::Sealed {\n    fn raw_entry_v1(&self) -> RawEntryBuilder<'_, K, V, S>;\n    fn raw_entry_mut_v1(&mut self) -> RawEntryBuilderMut<'_, K, V, S>;\n}\npub trait MutableKeys: private::Sealed {\n    type Key;\n    type Value;\n    fn get_full_mut2<Q>(\n        &mut self,\n        key: &Q,\n    ) -> Option<(usize, &mut Self::Key, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Key>;\n    fn get_index_mut2(\n        &mut self,\n        index: usize,\n    ) -> Option<(&mut Self::Key, &mut Self::Value)>;\n    fn iter_mut2(&mut self) -> IterMut2<'_, Self::Key, Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Key, &mut Self::Value) -> bool;\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Clone)]\npub struct IntoIter<K, V> {\n    iter: vec::IntoIter<Bucket<K, V>>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Clone)]\npub struct IntoIter<T> {\n    iter: vec::IntoIter<Bucket<T>>,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\nimpl<K, V, S> IntoIterator for IndexMap<K, V, S> {\n    type Item = (K, V);\n    type IntoIter = IntoIter<K, V>;\n    fn into_iter(self) -> Self::IntoIter {\n        IntoIter::new(self.into_entries())\n    }\n}\nimpl<K, V> IntoIter<K, V> {\n    pub(super) fn new(entries: Vec<Bucket<K, V>>) -> Self {\n        Self { iter: entries.into_iter() }\n    }\n    pub fn as_slice(&self) -> &Slice<K, V> {}\n    pub fn as_mut_slice(&mut self) -> &mut Slice<K, V> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n33 fn into_iter(self) -> Self::IntoIter {\n34     IntoIter::new(self.into_entries())\n35 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}