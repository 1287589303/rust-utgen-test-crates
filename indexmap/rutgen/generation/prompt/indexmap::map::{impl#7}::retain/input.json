{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is indexmap\npub use self::core::raw_entry_v1::{self, RawEntryApiV1};\npub use self::core::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\npub use self::iter::{\n    Drain, IntoIter, IntoKeys, IntoValues, Iter, IterMut, IterMut2, Keys, Splice, Values,\n    ValuesMut,\n};\npub use self::mutable::MutableEntryKey;\npub use self::mutable::MutableKeys;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::map as rayon;\nuse ::core::cmp::Ordering;\nuse ::core::fmt;\nuse ::core::hash::{BuildHasher, Hash, Hasher};\nuse ::core::mem;\nuse ::core::ops::{Index, IndexMut, RangeBounds};\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse self::core::IndexMapCore;\nuse crate::util::{third, try_simplify_range};\nuse crate::{Bucket, Entries, Equivalent, HashValue, TryReserveError};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait RawEntryApiV1<K, V, S>: private::Sealed {\n    fn raw_entry_v1(&self) -> RawEntryBuilder<'_, K, V, S>;\n    fn raw_entry_mut_v1(&mut self) -> RawEntryBuilderMut<'_, K, V, S>;\n}\npub trait MutableKeys: private::Sealed {\n    type Key;\n    type Value;\n    fn get_full_mut2<Q>(\n        &mut self,\n        key: &Q,\n    ) -> Option<(usize, &mut Self::Key, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Key>;\n    fn get_index_mut2(\n        &mut self,\n        index: usize,\n    ) -> Option<(&mut Self::Key, &mut Self::Value)>;\n    fn iter_mut2(&mut self) -> IterMut2<'_, Self::Key, Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Key, &mut Self::Value) -> bool;\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\nimpl<K, V, S> IndexMap<K, V, S> {\n    pub fn pop(&mut self) -> Option<(K, V)> {}\n    pub fn retain<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {\n        self.core.retain_in_order(move |k, v| keep(k, v));\n    }\n    pub fn sort_keys(&mut self)\n    where\n        K: Ord,\n    {}\n    pub fn sort_by<F>(&mut self, mut cmp: F)\n    where\n        F: FnMut(&K, &V, &K, &V) -> Ordering,\n    {}\n    pub fn sorted_by<F>(self, mut cmp: F) -> IntoIter<K, V>\n    where\n        F: FnMut(&K, &V, &K, &V) -> Ordering,\n    {}\n    pub fn sort_unstable_keys(&mut self)\n    where\n        K: Ord,\n    {}\n    pub fn sort_unstable_by<F>(&mut self, mut cmp: F)\n    where\n        F: FnMut(&K, &V, &K, &V) -> Ordering,\n    {}\n    #[inline]\n    pub fn sorted_unstable_by<F>(self, mut cmp: F) -> IntoIter<K, V>\n    where\n        F: FnMut(&K, &V, &K, &V) -> Ordering,\n    {}\n    pub fn sort_by_cached_key<T, F>(&mut self, mut sort_key: F)\n    where\n        T: Ord,\n        F: FnMut(&K, &V) -> T,\n    {}\n    pub fn binary_search_keys(&self, x: &K) -> Result<usize, usize>\n    where\n        K: Ord,\n    {}\n    #[inline]\n    pub fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a K, &'a V) -> Ordering,\n    {}\n    #[inline]\n    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a K, &'a V) -> B,\n        B: Ord,\n    {}\n    #[must_use]\n    pub fn partition_point<P>(&self, pred: P) -> usize\n    where\n        P: FnMut(&K, &V) -> bool,\n    {}\n    pub fn reverse(&mut self) {}\n    pub fn as_slice(&self) -> &Slice<K, V> {}\n    pub fn as_mut_slice(&mut self) -> &mut Slice<K, V> {}\n    pub fn into_boxed_slice(self) -> Box<Slice<K, V>> {}\n    pub fn get_index(&self, index: usize) -> Option<(&K, &V)> {}\n    pub fn get_index_mut(&mut self, index: usize) -> Option<(&K, &mut V)> {}\n    pub fn get_index_entry(&mut self, index: usize) -> Option<IndexedEntry<'_, K, V>> {}\n    pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Slice<K, V>> {}\n    pub fn get_range_mut<R: RangeBounds<usize>>(\n        &mut self,\n        range: R,\n    ) -> Option<&mut Slice<K, V>> {}\n    pub fn first(&self) -> Option<(&K, &V)> {}\n    pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {}\n    pub fn first_entry(&mut self) -> Option<IndexedEntry<'_, K, V>> {}\n    pub fn last(&self) -> Option<(&K, &V)> {}\n    pub fn last_mut(&mut self) -> Option<(&K, &mut V)> {}\n    pub fn last_entry(&mut self) -> Option<IndexedEntry<'_, K, V>> {}\n    pub fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    pub fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    #[track_caller]\n    pub fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    pub fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Scan through each key-value pair in the map and keep those where the\n/// closure `keep` returns `true`.\n///\n/// The elements are visited in order, and remaining elements keep their\n/// order.\n///\n/// Computes in **O(n)** time (average).\n969 pub fn retain<F>(&mut self, mut keep: F)\n970 where\n971     F: FnMut(&K, &mut V) -> bool,\n972 {\n973     self.core.retain_in_order(move |k, v| keep(k, v));\n974 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}