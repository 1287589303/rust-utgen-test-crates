{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set/slice.rs\n// crate name is indexmap\nuse super::{Bucket, Entries, IndexSet, IntoIter, Iter};\nuse crate::util::{slice_eq, try_simplify_range};\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{Hash, Hasher};\nuse core::ops::{self, Bound, Index, RangeBounds};\n#[repr(transparent)]\npub struct Slice<T> {\n    pub(crate) entries: [Bucket<T>],\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<T> Slice<T> {\n    pub(crate) fn into_entries(self: Box<Self>) -> Vec<Bucket<T>> {}\n    pub const fn new<'a>() -> &'a Self {\n        Self::from_slice(&[])\n    }\n    pub const fn len(&self) -> usize {}\n    pub const fn is_empty(&self) -> bool {}\n    pub fn get_index(&self, index: usize) -> Option<&T> {}\n    pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Self> {\n        let range = try_simplify_range(range, self.entries.len())?;\n        self.entries.get(range).map(Self::from_slice)\n    }\n    pub fn first(&self) -> Option<&T> {}\n    pub fn last(&self) -> Option<&T> {}\n    pub fn split_at(&self, index: usize) -> (&Self, &Self) {\n        let (first, second) = self.entries.split_at(index);\n        (Self::from_slice(first), Self::from_slice(second))\n    }\n    pub fn split_first(&self) -> Option<(&T, &Self)> {\n        if let [first, rest @ ..] = &self.entries {\n            Some((&first.key, Self::from_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_last(&self) -> Option<(&T, &Self)> {\n        if let [rest @ .., last] = &self.entries {\n            Some((&last.key, Self::from_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn iter(&self) -> Iter<'_, T> {}\n    pub fn binary_search(&self, x: &T) -> Result<usize, usize>\n    where\n        T: Ord,\n    {\n        self.binary_search_by(|p| p.cmp(x))\n    }\n    #[inline]\n    pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> Ordering,\n    {}\n    #[inline]\n    pub fn binary_search_by_key<'a, B, F>(\n        &'a self,\n        b: &B,\n        mut f: F,\n    ) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> B,\n        B: Ord,\n    {}\n    #[must_use]\n    pub fn partition_point<P>(&self, mut pred: P) -> usize\n    where\n        P: FnMut(&T) -> bool,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Search over a sorted set for a value.\n///\n/// Returns the position where that value is present, or the position where it can be inserted\n/// to maintain the sort. See [`slice::binary_search`] for more details.\n///\n/// Computes in **O(log(n))** time, which is notably less scalable than looking the value up in\n/// the set this is a slice from using [`IndexSet::get_index_of`], but this can also position\n/// missing values.\n126 pub fn binary_search(&self, x: &T) -> Result<usize, usize>\n127 where\n128     T: Ord,\n129 {\n130     self.binary_search_by(|p| p.cmp(x))\n131 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}