{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<K, V> IndexMapCore<K, V> {\n    const MAX_ENTRIES_CAPACITY: usize = (isize::MAX as usize)\n        / mem::size_of::<Bucket<K, V>>();\n    #[inline]\n    pub(crate) const fn new() -> Self {\n        IndexMapCore {\n            indices: Indices::new(),\n            entries: Vec::new(),\n        }\n    }\n    #[inline]\n    fn borrow_mut(&mut self) -> RefMut<'_, K, V> {}\n    #[inline]\n    pub(crate) fn with_capacity(n: usize) -> Self {\n        IndexMapCore {\n            indices: Indices::with_capacity(n),\n            entries: Vec::with_capacity(n),\n        }\n    }\n    #[inline]\n    pub(crate) fn len(&self) -> usize {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {}\n    pub(crate) fn clear(&mut self) {}\n    pub(crate) fn truncate(&mut self, len: usize) {}\n    #[track_caller]\n    pub(crate) fn drain<R>(&mut self, range: R) -> vec::Drain<'_, Bucket<K, V>>\n    where\n        R: RangeBounds<usize>,\n    {\n        let range = simplify_range(range, self.entries.len());\n        self.erase_indices(range.start, range.end);\n        self.entries.drain(range)\n    }\n    #[cfg(feature = \"rayon\")]\n    pub(crate) fn par_drain<R>(\n        &mut self,\n        range: R,\n    ) -> rayon::vec::Drain<'_, Bucket<K, V>>\n    where\n        K: Send,\n        V: Send,\n        R: RangeBounds<usize>,\n    {}\n    #[track_caller]\n    pub(crate) fn split_off(&mut self, at: usize) -> Self {\n        let len = self.entries.len();\n        assert!(\n            at <= len,\n            \"index out of bounds: the len is {len} but the index is {at}. Expected index <= len\"\n        );\n        self.erase_indices(at, self.entries.len());\n        let entries = self.entries.split_off(at);\n        let mut indices = Indices::with_capacity(entries.len());\n        insert_bulk_no_grow(&mut indices, &entries);\n        Self { indices, entries }\n    }\n    #[track_caller]\n    pub(crate) fn split_splice<R>(\n        &mut self,\n        range: R,\n    ) -> (Self, vec::IntoIter<Bucket<K, V>>)\n    where\n        R: RangeBounds<usize>,\n    {\n        let range = simplify_range(range, self.len());\n        self.erase_indices(range.start, self.entries.len());\n        let entries = self.entries.split_off(range.end);\n        let drained = self.entries.split_off(range.start);\n        let mut indices = Indices::with_capacity(entries.len());\n        insert_bulk_no_grow(&mut indices, &entries);\n        (Self { indices, entries }, drained.into_iter())\n    }\n    pub(crate) fn append_unchecked(&mut self, other: &mut Self) {}\n    pub(crate) fn reserve(&mut self, additional: usize) {}\n    pub(crate) fn reserve_exact(&mut self, additional: usize) {}\n    pub(crate) fn try_reserve(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    fn try_reserve_entries(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    pub(crate) fn try_reserve_exact(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    pub(crate) fn shrink_to(&mut self, min_capacity: usize) {}\n    pub(crate) fn pop(&mut self) -> Option<(K, V)> {}\n    pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    fn push_entry(&mut self, hash: HashValue, key: K, value: V) {}\n    pub(crate) fn insert_full(\n        &mut self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> (usize, Option<V>)\n    where\n        K: Eq,\n    {}\n    pub(crate) fn replace_full(\n        &mut self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> (usize, Option<(K, V)>)\n    where\n        K: Eq,\n    {}\n    pub(crate) fn shift_remove_full<Q>(\n        &mut self,\n        hash: HashValue,\n        key: &Q,\n    ) -> Option<(usize, K, V)>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    #[inline]\n    pub(crate) fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    #[inline]\n    #[track_caller]\n    pub(super) fn move_index(&mut self, from: usize, to: usize) {}\n    #[inline]\n    #[track_caller]\n    pub(crate) fn swap_indices(&mut self, a: usize, b: usize) {}\n    pub(crate) fn swap_remove_full<Q>(\n        &mut self,\n        hash: HashValue,\n        key: &Q,\n    ) -> Option<(usize, K, V)>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {}\n    #[inline]\n    pub(crate) fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn erase_indices(&mut self, start: usize, end: usize) {\n        let (init, shifted_entries) = self.entries.split_at(end);\n        let (start_entries, erased_entries) = init.split_at(start);\n        let erased = erased_entries.len();\n        let shifted = shifted_entries.len();\n        let half_capacity = self.indices.capacity() / 2;\n        if erased == 0 {} else if start + shifted < half_capacity && start < erased {\n            self.indices.clear();\n            insert_bulk_no_grow(&mut self.indices, start_entries);\n            insert_bulk_no_grow(&mut self.indices, shifted_entries);\n        } else if erased + shifted < half_capacity {\n            for (i, entry) in (start..).zip(erased_entries) {\n                erase_index(&mut self.indices, entry.hash, i);\n            }\n            for ((new, old), entry) in (start..).zip(end..).zip(shifted_entries) {\n                update_index(&mut self.indices, entry.hash, old, new);\n            }\n        } else {\n            let offset = end - start;\n            self.indices\n                .retain(move |i| {\n                    if *i >= end {\n                        *i -= offset;\n                        true\n                    } else {\n                        *i < start\n                    }\n                });\n        }\n        debug_assert_eq!(self.indices.len(), start + shifted);\n    }\n    pub(crate) fn retain_in_order<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&mut K, &mut V) -> bool,\n    {}\n    fn rebuild_hash_table(&mut self) {}\n    pub(crate) fn reverse(&mut self) {}\n}\n#[track_caller]\npub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\nwhere\n    R: RangeBounds<usize>,\n{\n    let start = match range.start_bound() {\n        Bound::Unbounded => 0,\n        Bound::Included(&i) if i <= len => i,\n        Bound::Excluded(&i) if i < len => i + 1,\n        Bound::Included(i) | Bound::Excluded(i) => {\n            panic!(\"range start index {i} out of range for slice of length {len}\")\n        }\n    };\n    let end = match range.end_bound() {\n        Bound::Unbounded => len,\n        Bound::Excluded(&i) if i <= len => i,\n        Bound::Included(&i) if i < len => i + 1,\n        Bound::Included(i) | Bound::Excluded(i) => {\n            panic!(\"range end index {i} out of range for slice of length {len}\")\n        }\n    };\n    if start > end {\n        panic!(\n            \"range start index {:?} should be <= range end index {:?}\", range\n            .start_bound(), range.end_bound()\n        );\n    }\n    start..end\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n187 pub(crate) fn drain<R>(&mut self, range: R) -> vec::Drain<'_, Bucket<K, V>>\n188 where\n189     R: RangeBounds<usize>,\n190 {\n191     let range = simplify_range(range, self.entries.len());\n192     self.erase_indices(range.start, range.end);\n193     self.entries.drain(range)\n194 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}