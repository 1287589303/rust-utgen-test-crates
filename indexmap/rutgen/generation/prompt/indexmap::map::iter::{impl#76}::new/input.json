{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/iter.rs\n// crate name is indexmap\nuse super::core::IndexMapCore;\nuse super::{Bucket, Entries, IndexMap, Slice};\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::ops::{Index, RangeBounds};\nuse core::slice;\npub struct Splice<'a, I, K, V, S>\nwhere\n    I: Iterator<Item = (K, V)>,\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    map: &'a mut IndexMap<K, V, S>,\n    tail: IndexMapCore<K, V>,\n    drain: vec::IntoIter<Bucket<K, V>>,\n    replace_with: I,\n}\n#[derive(Clone)]\npub struct IntoIter<K, V> {\n    iter: vec::IntoIter<Bucket<K, V>>,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Clone)]\npub struct IntoIter<T> {\n    iter: vec::IntoIter<Bucket<T>>,\n}\nimpl<'a, I, K, V, S> Splice<'a, I, K, V, S>\nwhere\n    I: Iterator<Item = (K, V)>,\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    #[track_caller]\n    pub(super) fn new<R>(\n        map: &'a mut IndexMap<K, V, S>,\n        range: R,\n        replace_with: I,\n    ) -> Self\n    where\n        R: RangeBounds<usize>,\n    {\n        let (tail, drain) = map.core.split_splice(range);\n        Self {\n            map,\n            tail,\n            drain,\n            replace_with,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n671 pub(super) fn new<R>(map: &'a mut IndexMap<K, V, S>, range: R, replace_with: I) -> Self\n672 where\n673     R: RangeBounds<usize>,\n674 {\n675     let (tail, drain) = map.core.split_splice(range);\n676     Self {\n677         map,\n678         tail,\n679         drain,\n680         replace_with,\n681     }\n682 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}