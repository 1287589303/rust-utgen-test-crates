{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {\n        if a == b && a < self.entries.len() {\n            return;\n        }\n        match self\n            .indices\n            .get_many_mut(\n                [self.entries[a].hash.get(), self.entries[b].hash.get()],\n                move |i, &x| if i == 0 { x == a } else { x == b },\n            )\n        {\n            [Some(ref_a), Some(ref_b)] => {\n                mem::swap(ref_a, ref_b);\n                self.entries.swap(a, b);\n            }\n            _ => panic!(\"indices not found\"),\n        }\n    }\n}\nimpl HashValue {\n    #[inline(always)]\n    fn get(self) -> u64 {\n        self.0 as u64\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n710 fn swap_indices(&mut self, a: usize, b: usize) {\n711     // If they're equal and in-bounds, there's nothing to do.\n712     if a == b && a < self.entries.len() {\n713         return;\n714     }\n715 \n716     // We'll get a \"nice\" bounds-check from indexing `entries`,\n717     // and then we expect to find it in the table as well.\n718     match self.indices.get_many_mut(\n719         [self.entries[a].hash.get(), self.entries[b].hash.get()],\n720         move |i, &x| if i == 0 { x == a } else { x == b },\n721     ) {\n722         [Some(ref_a), Some(ref_b)] => {\n723             mem::swap(ref_a, ref_b);\n724             self.entries.swap(a, b);\n725         }\n726         _ => panic!(\"indices not found\"),\n727     }\n728 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}