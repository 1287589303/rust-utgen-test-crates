{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\npub struct IndexedEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    index: usize,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\nimpl<'a, K, V> IndexedEntry<'a, K, V> {\n    pub(crate) fn new(map: &'a mut IndexMapCore<K, V>, index: usize) -> Self {\n        Self {\n            map: map.borrow_mut(),\n            index,\n        }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn insert(&mut self, value: V) -> V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub fn swap_remove_entry(mut self) -> (K, V) {}\n    pub fn shift_remove_entry(mut self) -> (K, V) {\n        self.map.shift_remove_index(self.index).unwrap()\n    }\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[track_caller]\n    pub fn move_index(mut self, to: usize) {}\n    pub fn swap_indices(mut self, other: usize) {}\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {\n        match self.entries.get(index) {\n            Some(entry) => {\n                erase_index(self.indices, entry.hash, index);\n                Some(self.shift_remove_finish(index))\n            }\n            None => None,\n        }\n    }\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Remove and return the key, value pair stored in the map for this entry\n///\n/// Like [`Vec::remove`][crate::Vec::remove], the pair is removed by shifting all of the\n/// elements that follow it, preserving their relative order.\n/// **This perturbs the index of all of those elements!**\n///\n/// Computes in **O(n)** time (average).\n498 pub fn shift_remove_entry(mut self) -> (K, V) {\n499     self.map.shift_remove_index(self.index).unwrap()\n500 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}