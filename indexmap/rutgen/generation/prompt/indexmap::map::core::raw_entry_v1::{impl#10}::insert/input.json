{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\nimpl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n    pub fn index(&self) -> usize {}\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        let mut h = self.hash_builder.build_hasher();\n        key.hash(&mut h);\n        self.insert_hashed_nocheck(h.finish(), key, value)\n    }\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {\n        let hash = HashValue(hash as usize);\n        self.map.insert_unique(hash, key, value).into_muts()\n    }\n    pub fn shift_insert(self, index: usize, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn shift_insert_hashed_nocheck(\n        mut self,\n        index: usize,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts the given key and value into the map,\n/// and returns mutable references to them.\n609 pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n610 where\n611     K: Hash,\n612     S: BuildHasher,\n613 {\n614     let mut h = self.hash_builder.build_hasher();\n615     key.hash(&mut h);\n616     self.insert_hashed_nocheck(h.finish(), key, value)\n617 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}