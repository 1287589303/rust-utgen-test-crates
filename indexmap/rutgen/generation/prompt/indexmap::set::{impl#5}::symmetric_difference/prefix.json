{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is indexmap\ntype Bucket<T> = super::Bucket<T, ()>;\npub use self::iter::{\n    Difference, Drain, Intersection, IntoIter, Iter, Splice, SymmetricDifference, Union,\n};\npub use self::mutable::MutableValues;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::set as rayon;\nuse crate::TryReserveError;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse crate::util::try_simplify_range;\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::ops::{BitAnd, BitOr, BitXor, Index, RangeBounds, Sub};\nuse super::{Entries, Equivalent, IndexMap};\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\npub struct SymmetricDifference<'a, T, S1, S2> {\n    iter: Chain<Difference<'a, T, S2>, Difference<'a, T, S1>>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\nimpl<T, S> IndexSet<T, S>\nwhere\n    T: Hash + Eq,\n    S: BuildHasher,\n{\n    pub fn insert(&mut self, value: T) -> bool {}\n    pub fn insert_full(&mut self, value: T) -> (usize, bool) {}\n    pub fn insert_sorted(&mut self, value: T) -> (usize, bool)\n    where\n        T: Ord,\n    {}\n    #[track_caller]\n    pub fn insert_before(&mut self, index: usize, value: T) -> (usize, bool) {}\n    #[track_caller]\n    pub fn shift_insert(&mut self, index: usize, value: T) -> bool {}\n    pub fn replace(&mut self, value: T) -> Option<T> {}\n    pub fn replace_full(&mut self, value: T) -> (usize, Option<T>) {}\n    pub fn difference<'a, S2>(\n        &'a self,\n        other: &'a IndexSet<T, S2>,\n    ) -> Difference<'a, T, S2>\n    where\n        S2: BuildHasher,\n    {}\n    pub fn symmetric_difference<'a, S2>(\n        &'a self,\n        other: &'a IndexSet<T, S2>,\n    ) -> SymmetricDifference<'a, T, S, S2>\n    where\n        S2: BuildHasher,\n    {\n        SymmetricDifference::new(self, other)\n    }\n    pub fn intersection<'a, S2>(\n        &'a self,\n        other: &'a IndexSet<T, S2>,\n    ) -> Intersection<'a, T, S2>\n    where\n        S2: BuildHasher,\n    {}\n    pub fn union<'a, S2>(&'a self, other: &'a IndexSet<T, S2>) -> Union<'a, T, S>\n    where\n        S2: BuildHasher,\n    {}\n    #[track_caller]\n    pub fn splice<R, I>(\n        &mut self,\n        range: R,\n        replace_with: I,\n    ) -> Splice<'_, I::IntoIter, T, S>\n    where\n        R: RangeBounds<usize>,\n        I: IntoIterator<Item = T>,\n    {}\n    pub fn append<S2>(&mut self, other: &mut IndexSet<T, S2>) {}\n}\nimpl<'a, T, S1, S2> SymmetricDifference<'a, T, S1, S2>\nwhere\n    T: Eq + Hash,\n    S1: BuildHasher,\n    S2: BuildHasher,\n{\n    pub(super) fn new(set1: &'a IndexSet<T, S1>, set2: &'a IndexSet<T, S2>) -> Self {\n        let diff1 = set1.difference(set2);\n        let diff2 = set2.difference(set1);\n        Self { iter: diff1.chain(diff2) }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return an iterator over the values that are in `self` or `other`,\n/// but not in both.\n///\n/// Values from `self` are produced in their original order, followed by\n/// values from `other` in their original order.\n531 pub fn symmetric_difference<'a, S2>(\n532     &'a self,\n533     other: &'a IndexSet<T, S2>,\n534 ) -> SymmetricDifference<'a, T, S, S2>\n535 where\n536     S2: BuildHasher,\n537 {\n538     SymmetricDifference::new(self, other)\n539 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}