{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set/iter.rs\n// crate name is indexmap\nuse super::{Bucket, Entries, IndexSet, Slice};\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::RangeBounds;\nuse core::slice::Iter as SliceIter;\npub struct Intersection<'a, T, S> {\n    iter: Iter<'a, T>,\n    other: &'a IndexSet<T, S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\npub struct Iter<'a, K, V> {\n    iter: slice::Iter<'a, Bucket<K, V>>,\n}\npub struct Iter<'a, T> {\n    iter: SliceIter<'a, Bucket<T>>,\n}\nimpl<T, S> DoubleEndedIterator for Intersection<'_, T, S>\nwhere\n    T: Eq + Hash,\n    S: BuildHasher,\n{\n    fn next_back(&mut self) -> Option<Self::Item> {\n        while let Some(item) = self.iter.next_back() {\n            if self.other.contains(item) {\n                return Some(item);\n            }\n        }\n        None\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n310 fn next_back(&mut self) -> Option<Self::Item> {\n311     while let Some(item) = self.iter.next_back() {\n312         if self.other.contains(item) {\n313             return Some(item);\n314         }\n315     }\n316     None\n317 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}