{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawOccupiedEntryMut<'a, K, V, S> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n    hash_builder: PhantomData<&'a S>,\n}\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\npub enum RawEntryMut<'a, K, V, S> {\n    /// Existing slot with equivalent key.\n    Occupied(RawOccupiedEntryMut<'a, K, V, S>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(RawVacantEntryMut<'a, K, V, S>),\n}\nimpl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n    #[inline]\n    pub fn index(&self) -> usize {}\n    pub fn or_insert(self, default_key: K, default_value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn or_insert_with<F>(self, call: F) -> (&'a mut K, &'a mut V)\n    where\n        F: FnOnce() -> (K, V),\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn and_modify<F>(mut self, f: F) -> Self\n    where\n        F: FnOnce(&mut K, &mut V),\n    {\n        if let Self::Occupied(entry) = &mut self {\n            let (k, v) = entry.get_key_value_mut();\n            f(k, v);\n        }\n        self\n    }\n}\nimpl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n    #[inline]\n    pub fn index(&self) -> usize {}\n    #[inline]\n    fn into_ref_mut(self) -> RefMut<'a, K, V> {}\n    pub fn key(&self) -> &K {}\n    pub fn key_mut(&mut self) -> &mut K {}\n    pub fn into_key(self) -> &'a mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub fn get_key_value(&self) -> (&K, &V) {}\n    pub fn get_key_value_mut(&mut self) -> (&mut K, &mut V) {\n        let index = self.index();\n        self.entries[index].muts()\n    }\n    pub fn into_key_value_mut(self) -> (&'a mut K, &'a mut V) {}\n    pub fn insert(&mut self, value: V) -> V {}\n    pub fn insert_key(&mut self, key: K) -> K {}\n    #[deprecated(\n        note = \"`remove` disrupts the map order -- \\\n        use `swap_remove` or `shift_remove` for explicit behavior.\"\n    )]\n    pub fn remove(self) -> V {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[deprecated(\n        note = \"`remove_entry` disrupts the map order -- \\\n        use `swap_remove_entry` or `shift_remove_entry` for explicit behavior.\"\n    )]\n    pub fn remove_entry(self) -> (K, V) {}\n    pub fn swap_remove_entry(self) -> (K, V) {}\n    pub fn shift_remove_entry(self) -> (K, V) {}\n    pub fn move_index(self, to: usize) {}\n    pub fn swap_indices(self, other: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Modifies the entry if it is occupied.\n367 pub fn and_modify<F>(mut self, f: F) -> Self\n368 where\n369     F: FnOnce(&mut K, &mut V),\n370 {\n371     if let Self::Occupied(entry) = &mut self {\n372         let (k, v) = entry.get_key_value_mut();\n373         f(k, v);\n374     }\n375     self\n376 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}