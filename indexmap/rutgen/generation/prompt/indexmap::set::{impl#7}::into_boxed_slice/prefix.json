{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is indexmap\ntype Bucket<T> = super::Bucket<T, ()>;\npub use self::iter::{\n    Difference, Drain, Intersection, IntoIter, Iter, Splice, SymmetricDifference, Union,\n};\npub use self::mutable::MutableValues;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::set as rayon;\nuse crate::TryReserveError;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse crate::util::try_simplify_range;\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::ops::{BitAnd, BitOr, BitXor, Index, RangeBounds, Sub};\nuse super::{Entries, Equivalent, IndexMap};\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\n#[repr(transparent)]\npub struct Slice<T> {\n    pub(crate) entries: [Bucket<T>],\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<T, S> IndexSet<T, S> {\n    pub fn pop(&mut self) -> Option<T> {}\n    pub fn retain<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    pub fn sort(&mut self)\n    where\n        T: Ord,\n    {}\n    pub fn sort_by<F>(&mut self, mut cmp: F)\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sorted_by<F>(self, mut cmp: F) -> IntoIter<T>\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sort_unstable(&mut self)\n    where\n        T: Ord,\n    {}\n    pub fn sort_unstable_by<F>(&mut self, mut cmp: F)\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sorted_unstable_by<F>(self, mut cmp: F) -> IntoIter<T>\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sort_by_cached_key<K, F>(&mut self, mut sort_key: F)\n    where\n        K: Ord,\n        F: FnMut(&T) -> K,\n    {}\n    pub fn binary_search(&self, x: &T) -> Result<usize, usize>\n    where\n        T: Ord,\n    {}\n    #[inline]\n    pub fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> Ordering,\n    {}\n    #[inline]\n    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> B,\n        B: Ord,\n    {}\n    #[must_use]\n    pub fn partition_point<P>(&self, pred: P) -> usize\n    where\n        P: FnMut(&T) -> bool,\n    {}\n    pub fn reverse(&mut self) {}\n    pub fn as_slice(&self) -> &Slice<T> {}\n    pub fn into_boxed_slice(self) -> Box<Slice<T>> {\n        Slice::from_boxed(self.into_entries().into_boxed_slice())\n    }\n    pub fn get_index(&self, index: usize) -> Option<&T> {}\n    pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Slice<T>> {}\n    pub fn first(&self) -> Option<&T> {}\n    pub fn last(&self) -> Option<&T> {}\n    pub fn swap_remove_index(&mut self, index: usize) -> Option<T> {}\n    pub fn shift_remove_index(&mut self, index: usize) -> Option<T> {}\n    #[track_caller]\n    pub fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    pub fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n#[allow(unsafe_code)]\nimpl<T> Slice<T> {\n    pub(super) const fn from_slice(entries: &[Bucket<T>]) -> &Self {\n        unsafe { &*(entries as *const [Bucket<T>] as *const Self) }\n    }\n    pub(super) fn from_boxed(entries: Box<[Bucket<T>]>) -> Box<Self> {\n        unsafe { Box::from_raw(Box::into_raw(entries) as *mut Self) }\n    }\n    fn into_boxed(self: Box<Self>) -> Box<[Bucket<T>]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Converts into a boxed slice of all the values in the set.\n///\n/// Note that this will drop the inner hash table and any excess capacity.\n985 pub fn into_boxed_slice(self) -> Box<Slice<T>> {\n986     Slice::from_boxed(self.into_entries().into_boxed_slice())\n987 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}