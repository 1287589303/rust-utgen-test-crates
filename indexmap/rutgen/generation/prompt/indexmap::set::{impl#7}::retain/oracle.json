{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is indexmap\ntype Bucket<T> = super::Bucket<T, ()>;\npub use self::iter::{\n    Difference, Drain, Intersection, IntoIter, Iter, Splice, SymmetricDifference, Union,\n};\npub use self::mutable::MutableValues;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::set as rayon;\nuse crate::TryReserveError;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse crate::util::try_simplify_range;\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::ops::{BitAnd, BitOr, BitXor, Index, RangeBounds, Sub};\nuse super::{Entries, Equivalent, IndexMap};\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\nimpl<T, S> IndexSet<T, S> {\n    pub fn pop(&mut self) -> Option<T> {}\n    pub fn retain<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&T) -> bool,\n    {\n        self.map.retain(move |x, &mut ()| keep(x))\n    }\n    pub fn sort(&mut self)\n    where\n        T: Ord,\n    {}\n    pub fn sort_by<F>(&mut self, mut cmp: F)\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sorted_by<F>(self, mut cmp: F) -> IntoIter<T>\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sort_unstable(&mut self)\n    where\n        T: Ord,\n    {}\n    pub fn sort_unstable_by<F>(&mut self, mut cmp: F)\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sorted_unstable_by<F>(self, mut cmp: F) -> IntoIter<T>\n    where\n        F: FnMut(&T, &T) -> Ordering,\n    {}\n    pub fn sort_by_cached_key<K, F>(&mut self, mut sort_key: F)\n    where\n        K: Ord,\n        F: FnMut(&T) -> K,\n    {}\n    pub fn binary_search(&self, x: &T) -> Result<usize, usize>\n    where\n        T: Ord,\n    {}\n    #[inline]\n    pub fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> Ordering,\n    {}\n    #[inline]\n    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a T) -> B,\n        B: Ord,\n    {}\n    #[must_use]\n    pub fn partition_point<P>(&self, pred: P) -> usize\n    where\n        P: FnMut(&T) -> bool,\n    {}\n    pub fn reverse(&mut self) {}\n    pub fn as_slice(&self) -> &Slice<T> {}\n    pub fn into_boxed_slice(self) -> Box<Slice<T>> {}\n    pub fn get_index(&self, index: usize) -> Option<&T> {}\n    pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Slice<T>> {}\n    pub fn first(&self) -> Option<&T> {}\n    pub fn last(&self) -> Option<&T> {}\n    pub fn swap_remove_index(&mut self, index: usize) -> Option<T> {}\n    pub fn shift_remove_index(&mut self, index: usize) -> Option<T> {}\n    #[track_caller]\n    pub fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    pub fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Scan through each value in the set and keep those where the\n/// closure `keep` returns `true`.\n///\n/// The elements are visited in order, and remaining elements keep their\n/// order.\n///\n/// Computes in **O(n)** time (average).\n818 pub fn retain<F>(&mut self, mut keep: F)\n819 where\n820     F: FnMut(&T) -> bool,\n821 {\n822     self.map.retain(move |x, &mut ()| keep(x))\n823 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}