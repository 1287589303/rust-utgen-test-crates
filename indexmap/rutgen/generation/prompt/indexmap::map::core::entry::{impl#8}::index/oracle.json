{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\npub struct IndexedEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    index: usize,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\nimpl<'a, K, V> IndexedEntry<'a, K, V> {\n    pub(crate) fn new(map: &'a mut IndexMapCore<K, V>, index: usize) -> Self {\n        Self {\n            map: map.borrow_mut(),\n            index,\n        }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {\n        self.index\n    }\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn insert(&mut self, value: V) -> V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub fn swap_remove_entry(mut self) -> (K, V) {}\n    pub fn shift_remove_entry(mut self) -> (K, V) {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[track_caller]\n    pub fn move_index(mut self, to: usize) {}\n    pub fn swap_indices(mut self, other: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the index of the key-value pair\n443 pub fn index(&self) -> usize {\n444     self.index\n445 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}