{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\nimpl HashValue {\n    #[inline(always)]\n    fn get(self) -> u64 {\n        self.0 as u64\n    }\n}\n#[inline]\nfn erase_index(table: &mut Indices, hash: HashValue, index: usize) {\n    if let Ok(entry) = table.find_entry(hash.get(), move |&i| i == index) {\n        entry.remove();\n    } else if cfg!(debug_assertions) {\n        panic!(\"index not found\");\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n63 fn erase_index(table: &mut Indices, hash: HashValue, index: usize) {\n64     if let Ok(entry) = table.find_entry(hash.get(), move |&i| i == index) {\n65         entry.remove();\n66     } else if cfg!(debug_assertions) {\n67         panic!(\"index not found\");\n68     }\n69 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}