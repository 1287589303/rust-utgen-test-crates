{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl HashValue {\n    #[inline(always)]\n    fn get(self) -> u64 {\n        self.0 as u64\n    }\n}\nfn insert_bulk_no_grow<K, V>(indices: &mut Indices, entries: &[Bucket<K, V>]) {\n    assert!(indices.capacity() - indices.len() >= entries.len());\n    for entry in entries {\n        indices.insert_unique(entry.hash.get(), indices.len(), |_| unreachable!());\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts many entries into the indices table without reallocating,\n/// and without regard for duplication.\n///\n/// ***Panics*** if there is not sufficient capacity already.\n83 fn insert_bulk_no_grow<K, V>(indices: &mut Indices, entries: &[Bucket<K, V>]) {\n84     assert!(indices.capacity() - indices.len() >= entries.len());\n85     for entry in entries {\n86         indices.insert_unique(entry.hash.get(), indices.len(), |_| unreachable!());\n87     }\n88 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}