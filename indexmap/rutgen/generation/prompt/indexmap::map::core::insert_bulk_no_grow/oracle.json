{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl HashValue {\n    #[inline(always)]\n    fn get(self) -> u64 {\n        self.0 as u64\n    }\n}\nfn insert_bulk_no_grow<K, V>(indices: &mut Indices, entries: &[Bucket<K, V>]) {\n    assert!(indices.capacity() - indices.len() >= entries.len());\n    for entry in entries {\n        indices.insert_unique(entry.hash.get(), indices.len(), |_| unreachable!());\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts many entries into the indices table without reallocating,\n/// and without regard for duplication.\n///\n/// ***Panics*** if there is not sufficient capacity already.\n83 fn insert_bulk_no_grow<K, V>(indices: &mut Indices, entries: &[Bucket<K, V>]) {\n84     assert!(indices.capacity() - indices.len() >= entries.len());\n85     for entry in entries {\n86         indices.insert_unique(entry.hash.get(), indices.len(), |_| unreachable!());\n87     }\n88 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}