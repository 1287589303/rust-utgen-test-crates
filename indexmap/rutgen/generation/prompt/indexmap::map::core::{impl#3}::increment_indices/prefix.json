{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {\n        let shifted_entries = &self.entries[start..end];\n        if shifted_entries.len() > self.indices.capacity() / 2 {\n            for i in &mut *self.indices {\n                if start <= *i && *i < end {\n                    *i += 1;\n                }\n            }\n        } else {\n            for (i, entry) in (start..end).zip(shifted_entries).rev() {\n                update_index(self.indices, entry.hash, i, i + 1);\n            }\n        }\n    }\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n#[inline]\nfn update_index(table: &mut Indices, hash: HashValue, old: usize, new: usize) {\n    let index = table.find_mut(hash.get(), move |&i| i == old).expect(\"index not found\");\n    *index = new;\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Increment all indices in the range `start..end`.\n///\n/// The index `end` should not exist in `self.indices`.\n/// All entries should still be in their original positions.\n668 fn increment_indices(&mut self, start: usize, end: usize) {\n669     // Use a heuristic between a full sweep vs. a `find()` for every shifted item.\n670     let shifted_entries = &self.entries[start..end];\n671     if shifted_entries.len() > self.indices.capacity() / 2 {\n672         // Shift all indices in range.\n673         for i in &mut *self.indices {\n674             if start <= *i && *i < end {\n675                 *i += 1;\n676             }\n677         }\n678     } else {\n679         // Find each entry in range to shift its index, updated in reverse so\n680         // we never have duplicated indices that might have a hash collision.\n681         for (i, entry) in (start..end).zip(shifted_entries).rev() {\n682             update_index(self.indices, entry.hash, i, i + 1);\n683         }\n684     }\n685 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}