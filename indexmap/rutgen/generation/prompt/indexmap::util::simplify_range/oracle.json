{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/util.rs\n// crate name is indexmap\nuse core::ops::{Bound, Range, RangeBounds};\n#[track_caller]\npub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\nwhere\n    R: RangeBounds<usize>,\n{\n    let start = match range.start_bound() {\n        Bound::Unbounded => 0,\n        Bound::Included(&i) if i <= len => i,\n        Bound::Excluded(&i) if i < len => i + 1,\n        Bound::Included(i) | Bound::Excluded(i) => {\n            panic!(\"range start index {i} out of range for slice of length {len}\")\n        }\n    };\n    let end = match range.end_bound() {\n        Bound::Unbounded => len,\n        Bound::Excluded(&i) if i <= len => i,\n        Bound::Included(&i) if i < len => i + 1,\n        Bound::Included(i) | Bound::Excluded(i) => {\n            panic!(\"range end index {i} out of range for slice of length {len}\")\n        }\n    };\n    if start > end {\n        panic!(\n            \"range start index {:?} should be <= range end index {:?}\", range\n            .start_bound(), range.end_bound()\n        );\n    }\n    start..end\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 8 pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n 9 where\n10     R: RangeBounds<usize>,\n11 {\n12     let start = match range.start_bound() {\n13         Bound::Unbounded => 0,\n14         Bound::Included(&i) if i <= len => i,\n15         Bound::Excluded(&i) if i < len => i + 1,\n16         Bound::Included(i) | Bound::Excluded(i) => {\n17             panic!(\"range start index {i} out of range for slice of length {len}\")\n18         }\n19     };\n20     let end = match range.end_bound() {\n21         Bound::Unbounded => len,\n22         Bound::Excluded(&i) if i <= len => i,\n23         Bound::Included(&i) if i < len => i + 1,\n24         Bound::Included(i) | Bound::Excluded(i) => {\n25             panic!(\"range end index {i} out of range for slice of length {len}\")\n26         }\n27     };\n28     if start > end {\n29         panic!(\n30             \"range start index {:?} should be <= range end index {:?}\",\n31             range.start_bound(),\n32             range.end_bound()\n33         );\n34     }\n35     start..end\n36 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}