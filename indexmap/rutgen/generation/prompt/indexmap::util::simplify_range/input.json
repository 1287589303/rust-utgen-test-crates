{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/util.rs\n// crate name is indexmap\nuse core::ops::{Bound, Range, RangeBounds};\n#[track_caller]\npub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\nwhere\n    R: RangeBounds<usize>,\n{\n    let start = match range.start_bound() {\n        Bound::Unbounded => 0,\n        Bound::Included(&i) if i <= len => i,\n        Bound::Excluded(&i) if i < len => i + 1,\n        Bound::Included(i) | Bound::Excluded(i) => {\n            panic!(\"range start index {i} out of range for slice of length {len}\")\n        }\n    };\n    let end = match range.end_bound() {\n        Bound::Unbounded => len,\n        Bound::Excluded(&i) if i <= len => i,\n        Bound::Included(&i) if i < len => i + 1,\n        Bound::Included(i) | Bound::Excluded(i) => {\n            panic!(\"range end index {i} out of range for slice of length {len}\")\n        }\n    };\n    if start > end {\n        panic!(\n            \"range start index {:?} should be <= range end index {:?}\", range\n            .start_bound(), range.end_bound()\n        );\n    }\n    start..end\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 8 pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n 9 where\n10     R: RangeBounds<usize>,\n11 {\n12     let start = match range.start_bound() {\n13         Bound::Unbounded => 0,\n14         Bound::Included(&i) if i <= len => i,\n15         Bound::Excluded(&i) if i < len => i + 1,\n16         Bound::Included(i) | Bound::Excluded(i) => {\n17             panic!(\"range start index {i} out of range for slice of length {len}\")\n18         }\n19     };\n20     let end = match range.end_bound() {\n21         Bound::Unbounded => len,\n22         Bound::Excluded(&i) if i <= len => i,\n23         Bound::Included(&i) if i < len => i + 1,\n24         Bound::Included(i) | Bound::Excluded(i) => {\n25             panic!(\"range end index {i} out of range for slice of length {len}\")\n26         }\n27     };\n28     if start > end {\n29         panic!(\n30             \"range start index {:?} should be <= range end index {:?}\",\n31             range.start_bound(),\n32             range.end_bound()\n33         );\n34     }\n35     start..end\n36 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}