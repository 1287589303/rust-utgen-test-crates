{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\npub struct VacantEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    hash: HashValue,\n    key: K,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<'a, K, V> VacantEntry<'a, K, V> {\n    pub fn index(&self) -> usize {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn into_key(self) -> K {}\n    pub fn insert(self, value: V) -> &'a mut V {}\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {}\n    pub fn insert_sorted(self, value: V) -> (usize, &'a mut V)\n    where\n        K: Ord,\n    {}\n    pub fn shift_insert(mut self, index: usize, value: V) -> &'a mut V {\n        self.map.shift_insert_unique(index, self.hash, self.key, value);\n        &mut self.map.entries[index].value\n    }\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {\n        let end = self.indices.len();\n        assert!(index <= end);\n        self.increment_indices(index, end);\n        let entries = &*self.entries;\n        self.indices\n            .insert_unique(\n                hash.get(),\n                index,\n                move |&i| {\n                    debug_assert_ne!(i, index);\n                    let i = if i < index { i } else { i - 1 };\n                    entries[i].hash.get()\n                },\n            );\n        if self.entries.len() == self.entries.capacity() {\n            self.reserve_entries(1);\n        }\n        self.entries.insert(index, Bucket { hash, key, value });\n    }\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts the entry's key and the given value into the map at the given index,\n/// shifting others to the right, and returns a mutable reference to the value.\n///\n/// ***Panics*** if `index` is out of bounds.\n///\n/// Computes in **O(n)** time (average).\n410 pub fn shift_insert(mut self, index: usize, value: V) -> &'a mut V {\n411     self.map\n412         .shift_insert_unique(index, self.hash, self.key, value);\n413     &mut self.map.entries[index].value\n414 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}