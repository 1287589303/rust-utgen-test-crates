[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(0..0);",
          "}"
        ],
        "oracle": [
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(0..0);",
          "    assert_eq!(set.len(), 0);",
          "    set.reserve(5);",
          "    set.drain(0..5);",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(..);",
          "    assert_eq!(set.len(), 0);",
          "    let result = std::panic::catch_unwind(|| { set.drain(1..0); });",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| { set.drain(0..1); });",
          "    assert!(result.is_err());",
          "    set.drain(..0);",
          "    set.drain(0..1);",
          "    set.drain(0..set.len());"
        ],
        "code": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(0..0);",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(0..0);",
          "    assert_eq!(set.len(), 0);",
          "    set.reserve(5);",
          "    set.drain(0..5);",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(..);",
          "    assert_eq!(set.len(), 0);",
          "    let result = std::panic::catch_unwind(|| { set.drain(1..0); });",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| { set.drain(0..1); });",
          "    assert!(result.is_err());",
          "    set.drain(..0);",
          "    set.drain(0..1);",
          "    set.drain(0..set.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(..set.len());",
          "}"
        ],
        "oracle": [
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(..set.len());",
          "    assert!(set.is_empty());",
          "    let drained = set.drain(0..5);",
          "    assert_eq!(drained.as_slice().len(), 0);",
          "    set.drain(..set.len());",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(0..0);",
          "    assert_eq!(set.len(), 0);",
          "    let result = std::panic::catch_unwind(|| set.drain(5..10));",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| set.drain(0..set.len() + 1));",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| set.drain(10..5));",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(..set.len());",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(..set.len());",
          "    assert!(set.is_empty());",
          "    let drained = set.drain(0..5);",
          "    assert_eq!(drained.as_slice().len(), 0);",
          "    set.drain(..set.len());",
          "    assert_eq!(set.len(), 0);",
          "    set.drain(0..0);",
          "    assert_eq!(set.len(), 0);",
          "    let result = std::panic::catch_unwind(|| set.drain(5..10));",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| set.drain(0..set.len() + 1));",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| set.drain(10..5));",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(1..0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(std::panic::catch_unwind(|| set.drain(1..0)).is_err());",
          "    assert!(std::panic::catch_unwind(|| set.drain(..10)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| set.drain(0..set.len())).is_ok());"
        ],
        "code": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(1..0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(std::panic::catch_unwind(|| set.drain(1..0)).is_err());",
          "    assert!(std::panic::catch_unwind(|| set.drain(..10)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| set.drain(0..set.len())).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(0..set.len() + 1);",
          "}"
        ],
        "oracle": [
          "    set.len() + 1; // Expect panic due to end point being greater than length of the set."
        ],
        "code": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(0..set.len() + 1);",
          "    set.len() + 1; // Expect panic due to end point being greater than length of the set.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(0..1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    let drain_iter = set.drain(0..1);",
          "    assert!(drain_iter.as_slice().is_empty());",
          "    assert!(std::panic::catch_unwind(|| set.drain(2..1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| set.drain(0..11)).is_err());",
          "    assert!(std::panic::catch_unwind(|| set.drain(5..5)).is_err());",
          "    assert_eq!(set.capacity(), 10);"
        ],
        "code": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(0..1);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    let drain_iter = set.drain(0..1);",
          "    assert!(drain_iter.as_slice().is_empty());",
          "    assert!(std::panic::catch_unwind(|| set.drain(2..1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| set.drain(0..11)).is_err());",
          "    assert!(std::panic::catch_unwind(|| set.drain(5..5)).is_err());",
          "    assert_eq!(set.capacity(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(2..5);",
          "}"
        ],
        "oracle": [
          "    set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    assert_eq!(set.len(), 10);",
          "    assert!(set.is_empty() == false);",
          "    let drain_iter = set.drain(2..5);",
          "    assert!(drain_iter.as_slice().len() == 3);",
          "    set.clear();",
          "    assert!(set.is_empty() == true);",
          "    let result = std::panic::catch_unwind(|| { set.drain(5..2); });",
          "    assert!(result.is_err());",
          "    let overflow_result = std::panic::catch_unwind(|| { set.drain(0..15); });",
          "    assert!(overflow_result.is_err());"
        ],
        "code": [
          "{",
          "    let mut set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.drain(2..5);",
          "    set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    assert_eq!(set.len(), 10);",
          "    assert!(set.is_empty() == false);",
          "    let drain_iter = set.drain(2..5);",
          "    assert!(drain_iter.as_slice().len() == 3);",
          "    set.clear();",
          "    assert!(set.is_empty() == true);",
          "    let result = std::panic::catch_unwind(|| { set.drain(5..2); });",
          "    assert!(result.is_err());",
          "    let overflow_result = std::panic::catch_unwind(|| { set.drain(0..15); });",
          "    assert!(overflow_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]