[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let other_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    self_map.clone_from(&other_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_map.len(), 0);",
          "    assert_eq!(other_map.len(), 0);",
          "    assert_eq!(self_map.capacity(), other_map.len());",
          "    assert_eq!(self_map.indices.capacity(), other_map.indices.capacity());",
          "    assert_eq!(self_map.entries.capacity(), other_map.entries.capacity());",
          "    assert!(self_map.entries.is_empty());",
          "    assert!(self_map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut self_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let other_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    self_map.clone_from(&other_map);",
          "    assert_eq!(self_map.len(), 0);",
          "    assert_eq!(other_map.len(), 0);",
          "    assert_eq!(self_map.capacity(), other_map.len());",
          "    assert_eq!(self_map.indices.capacity(), other_map.indices.capacity());",
          "    assert_eq!(self_map.entries.capacity(), other_map.entries.capacity());",
          "    assert!(self_map.entries.is_empty());",
          "    assert!(self_map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_map = IndexMapCore::with_capacity(5);",
          "    let other_map = IndexMapCore::with_capacity(5);",
          "    self_map.clone_from(&other_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_map.entries.capacity(), other_map.entries.len());",
          "    assert!(self_map.indices == other_map.indices);",
          "    assert!(self_map.entries.is_empty());"
        ],
        "code": [
          "{",
          "    let mut self_map = IndexMapCore::with_capacity(5);",
          "    let other_map = IndexMapCore::with_capacity(5);",
          "    self_map.clone_from(&other_map);",
          "    assert_eq!(self_map.entries.capacity(), other_map.entries.len());",
          "    assert!(self_map.indices == other_map.indices);",
          "    assert!(self_map.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_map = IndexMapCore::with_capacity(5);",
          "    self_map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    self_map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    ",
          "    let mut other_map = IndexMapCore::with_capacity(5);",
          "    other_map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    other_map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "",
          "    self_map.clone_from(&other_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_map.entries.len(), other_map.entries.len());",
          "    assert_eq!(self_map.indices.capacity(), other_map.indices.capacity());",
          "    assert_eq!(self_map.entries[0].key, other_map.entries[0].key);",
          "    assert_eq!(self_map.entries[0].value, other_map.entries[0].value);",
          "    assert_eq!(self_map.entries[1].key, other_map.entries[1].key);",
          "    assert_eq!(self_map.entries[1].value, other_map.entries[1].value);"
        ],
        "code": [
          "{",
          "    let mut self_map = IndexMapCore::with_capacity(5);",
          "    self_map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    self_map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    ",
          "    let mut other_map = IndexMapCore::with_capacity(5);",
          "    other_map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    other_map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "",
          "    self_map.clone_from(&other_map);",
          "    assert_eq!(self_map.entries.len(), other_map.entries.len());",
          "    assert_eq!(self_map.indices.capacity(), other_map.indices.capacity());",
          "    assert_eq!(self_map.entries[0].key, other_map.entries[0].key);",
          "    assert_eq!(self_map.entries[0].value, other_map.entries[0].value);",
          "    assert_eq!(self_map.entries[1].key, other_map.entries[1].key);",
          "    assert_eq!(self_map.entries[1].value, other_map.entries[1].value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_map = IndexMapCore::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
          "        self_map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i });",
          "    }",
          "",
          "    let mut other_map = IndexMapCore::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
          "        other_map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i });",
          "    }",
          "",
          "    self_map.clone_from(&other_map);",
          "}"
        ],
        "oracle": [
          "    let self_capacity = self_map.entries.capacity();",
          "    let other_length = other_map.entries.len();",
          "    assert_eq!(self_capacity, other_length, \"Capacity of self_map should equal length of other_map after clone_from\");",
          "    assert_eq!(self_map.entries.len(), other_map.entries.len(), \"Entries length should match after clone_from\");",
          "    assert!(self_map.indices.len() == other_map.indices.len(), \"Indices length should match after clone_from\");",
          "    for (i, bucket) in other_map.entries.iter().enumerate() {",
          "    assert_eq!(self_map.entries[i], *bucket, \"Entries should be equal after clone_from at index {}\", i);",
          "    }"
        ],
        "code": [
          "{",
          "    let mut self_map = IndexMapCore::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
          "        self_map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i });",
          "    }",
          "",
          "    let mut other_map = IndexMapCore::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
          "        other_map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i });",
          "    }",
          "",
          "    self_map.clone_from(&other_map);",
          "    let self_capacity = self_map.entries.capacity();",
          "    let other_length = other_map.entries.len();",
          "    assert_eq!(self_capacity, other_length, \"Capacity of self_map should equal length of other_map after clone_from\");",
          "    assert_eq!(self_map.entries.len(), other_map.entries.len(), \"Entries length should match after clone_from\");",
          "    assert!(self_map.indices.len() == other_map.indices.len(), \"Indices length should match after clone_from\");",
          "    for (i, bucket) in other_map.entries.iter().enumerate() {",
          "    assert_eq!(self_map.entries[i], *bucket, \"Entries should be equal after clone_from at index {}\", i);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]