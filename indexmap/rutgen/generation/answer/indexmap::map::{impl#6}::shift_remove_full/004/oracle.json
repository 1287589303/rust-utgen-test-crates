[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
          "    let key = TestKey;",
          "",
          "    let result = map.shift_remove_full(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
          "    let key = TestKey;",
          "",
          "    let result = map.shift_remove_full(&key);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
          "    let non_matching_key = TestKey;",
          "    let key = TestKey;",
          "    map.insert(key, TestValue);",
          "",
          "    let result = map.shift_remove_full(&non_matching_key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
          "    let non_matching_key = TestKey;",
          "    let key = TestKey;",
          "    map.insert(key, TestValue);",
          "",
          "    let result = map.shift_remove_full(&non_matching_key);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]