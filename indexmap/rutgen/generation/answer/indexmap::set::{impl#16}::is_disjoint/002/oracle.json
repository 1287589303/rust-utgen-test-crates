[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(3, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    self_set.insert(3);",
          "    ",
          "    other_set.insert(2); // Overlapping element",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, false);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(3, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    self_set.insert(3);",
          "    ",
          "    other_set.insert(2); // Overlapping element",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "    assert_eq!(_result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(3, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    self_set.insert(3);",
          "    ",
          "    other_set.insert(4);",
          "    other_set.insert(5);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, true);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(3, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    self_set.insert(3);",
          "    ",
          "    other_set.insert(4);",
          "    other_set.insert(5);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "    assert_eq!(_result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    ",
          "    other_set.insert(2); // Overlapping element",
          "    other_set.insert(3);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, false);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    ",
          "    other_set.insert(2); // Overlapping element",
          "    other_set.insert(3);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "    assert_eq!(_result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(0, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    other_set.insert(1);",
          "    other_set.insert(2);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_set.len(), 0);",
          "    assert_eq!(other_set.len(), 2);",
          "    assert!(self_set.is_disjoint(&other_set));",
          "    assert!(self_set.is_empty());",
          "    assert!(!other_set.is_empty());",
          "    assert!(self_set.iter().count() == 0);",
          "    assert!(other_set.iter().count() == 2);",
          "    assert!(self_set.contains(&1) == false);",
          "    assert!(self_set.contains(&2) == false);",
          "    assert!(other_set.contains(&1) == true);",
          "    assert!(other_set.contains(&2) == true);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(0, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    ",
          "    other_set.insert(1);",
          "    other_set.insert(2);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "    assert_eq!(self_set.len(), 0);",
          "    assert_eq!(other_set.len(), 2);",
          "    assert!(self_set.is_disjoint(&other_set));",
          "    assert!(self_set.is_empty());",
          "    assert!(!other_set.is_empty());",
          "    assert!(self_set.iter().count() == 0);",
          "    assert!(other_set.iter().count() == 2);",
          "    assert!(self_set.contains(&1) == false);",
          "    assert!(self_set.contains(&2) == false);",
          "    assert!(other_set.contains(&1) == true);",
          "    assert!(other_set.contains(&2) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(0, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, true);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(2, TestHasher);",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(0, TestHasher);",
          "    ",
          "    self_set.insert(1);",
          "    self_set.insert(2);",
          "    ",
          "    let _result = self_set.is_disjoint(&other_set);",
          "    assert_eq!(_result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]