[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: [Bucket<TestKey, TestValue>; 3] = [",
          "        Bucket { hash: 0, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 1, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 2, key: TestKey {}, value: TestValue {} },",
          "    ];",
          "    ",
          "    let mut slice = Slice { entries };",
          "    ",
          "    let result = slice.split_last_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (last_pair, rest_slice) = result.unwrap();",
          "    assert_eq!(rest_slice.len(), 2);",
          "    let (last_key, last_value) = last_pair;",
          "    assert_eq!(last_value.value_mut(), &mut slice.entries[2].value);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: [Bucket<TestKey, TestValue>; 3] = [",
          "        Bucket { hash: 0, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 1, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 2, key: TestKey {}, value: TestValue {} },",
          "    ];",
          "    ",
          "    let mut slice = Slice { entries };",
          "    ",
          "    let result = slice.split_last_mut();",
          "    assert!(result.is_some());",
          "    let (last_pair, rest_slice) = result.unwrap();",
          "    assert_eq!(rest_slice.len(), 2);",
          "    let (last_key, last_value) = last_pair;",
          "    assert_eq!(last_value.value_mut(), &mut slice.entries[2].value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: [Bucket<TestKey, TestValue>; 1] = [",
          "        Bucket { hash: 0, key: TestKey {}, value: TestValue {} },",
          "    ];",
          "    ",
          "    let mut slice = Slice { entries };",
          "    ",
          "    let result = slice.split_last_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    if let Some((last_ref_mut, rest_mut_slice)) = result {",
          "    assert_eq!(rest_mut_slice.len(), 0);",
          "    assert!(std::ptr::eq(last_ref_mut.0, &slice.entries[0].key));",
          "    assert!(std::ptr::eq(last_ref_mut.1, &mut slice.entries[0].value));",
          "    }"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: [Bucket<TestKey, TestValue>; 1] = [",
          "        Bucket { hash: 0, key: TestKey {}, value: TestValue {} },",
          "    ];",
          "    ",
          "    let mut slice = Slice { entries };",
          "    ",
          "    let result = slice.split_last_mut();",
          "    assert!(result.is_some());",
          "    if let Some((last_ref_mut, rest_mut_slice)) = result {",
          "    assert_eq!(rest_mut_slice.len(), 0);",
          "    assert!(std::ptr::eq(last_ref_mut.0, &slice.entries[0].key));",
          "    assert!(std::ptr::eq(last_ref_mut.1, &mut slice.entries[0].value));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: [Bucket<TestKey, TestValue>; 5] = [",
          "        Bucket { hash: 0, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 1, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 2, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 3, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 4, key: TestKey {}, value: TestValue {} },",
          "    ];",
          "    ",
          "    let mut slice = Slice { entries };",
          "    ",
          "    let result = slice.split_last_mut();",
          "}"
        ],
        "oracle": [
          "    let expected_result = Some((&mut slice.entries[4].key, &mut slice.entries[4].value, Slice::from_mut_slice(&mut slice.entries[0..4])));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: [Bucket<TestKey, TestValue>; 5] = [",
          "        Bucket { hash: 0, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 1, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 2, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 3, key: TestKey {}, value: TestValue {} },",
          "        Bucket { hash: 4, key: TestKey {}, value: TestValue {} },",
          "    ];",
          "    ",
          "    let mut slice = Slice { entries };",
          "    ",
          "    let result = slice.split_last_mut();",
          "    let expected_result = Some((&mut slice.entries[4].key, &mut slice.entries[4].value, Slice::from_mut_slice(&mut slice.entries[0..4])));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]