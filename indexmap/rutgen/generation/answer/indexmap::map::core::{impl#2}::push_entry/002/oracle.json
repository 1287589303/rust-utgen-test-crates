[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::new();",
          "    let hash = HashValue(1);",
          "    let key = 42;",
          "    let value = String::from(\"value1\");",
          "    map.push_entry(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries[0].key, key);",
          "    assert_eq!(map.entries[0].value, value);",
          "    assert_eq!(map.entries[0].hash, hash);",
          "    assert!(map.capacity() > 0);",
          "    assert!(map.indices.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::new();",
          "    let hash = HashValue(1);",
          "    let key = 42;",
          "    let value = String::from(\"value1\");",
          "    map.push_entry(hash, key, value);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries[0].key, key);",
          "    assert_eq!(map.entries[0].value, value);",
          "    assert_eq!(map.entries[0].hash, hash);",
          "    assert!(map.capacity() > 0);",
          "    assert!(map.indices.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::with_capacity(2);",
          "    let hash = HashValue(2);",
          "    let key1 = 1;",
          "    let value1 = String::from(\"value1\");",
          "    let key2 = 2;",
          "    let value2 = String::from(\"value2\");",
          "    map.push_entry(hash, key1, value1);",
          "    map.push_entry(hash, key2, value2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries[0].key, key1);",
          "    assert_eq!(map.entries[0].value, value1);",
          "    assert_eq!(map.entries[1].key, key2);",
          "    assert_eq!(map.entries[1].value, value2);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.get_index_of(hash, &key1).is_some());",
          "    assert!(map.get_index_of(hash, &key2).is_some());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::with_capacity(2);",
          "    let hash = HashValue(2);",
          "    let key1 = 1;",
          "    let value1 = String::from(\"value1\");",
          "    let key2 = 2;",
          "    let value2 = String::from(\"value2\");",
          "    map.push_entry(hash, key1, value1);",
          "    map.push_entry(hash, key2, value2);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries[0].key, key1);",
          "    assert_eq!(map.entries[0].value, value1);",
          "    assert_eq!(map.entries[1].key, key2);",
          "    assert_eq!(map.entries[1].value, value2);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.get_index_of(hash, &key1).is_some());",
          "    assert!(map.get_index_of(hash, &key2).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::new();",
          "    let hash1 = HashValue(3);",
          "    let key1 = 10;",
          "    let value1 = String::from(\"value1\");",
          "    map.push_entry(hash1, key1, value1);",
          "",
          "    let hash2 = HashValue(4);",
          "    let key2 = 20;",
          "    let value2 = String::from(\"value2\");",
          "    map.push_entry(hash2, key2, value2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.entries[0].key, 10);",
          "    assert_eq!(map.entries[0].value, \"value1\");",
          "    assert_eq!(map.entries[1].key, 20);",
          "    assert_eq!(map.entries[1].value, \"value2\");"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::new();",
          "    let hash1 = HashValue(3);",
          "    let key1 = 10;",
          "    let value1 = String::from(\"value1\");",
          "    map.push_entry(hash1, key1, value1);",
          "",
          "    let hash2 = HashValue(4);",
          "    let key2 = 20;",
          "    let value2 = String::from(\"value2\");",
          "    map.push_entry(hash2, key2, value2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.entries[0].key, 10);",
          "    assert_eq!(map.entries[0].value, \"value1\");",
          "    assert_eq!(map.entries[1].key, 20);",
          "    assert_eq!(map.entries[1].value, \"value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::with_capacity(1);",
          "    let hash = HashValue(std::usize::MAX);",
          "    let key = std::u32::MAX;",
          "    let value = String::from(\"boundary_value\");",
          "    map.push_entry(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries.capacity(), 1);",
          "    assert_eq!(map.entries[0].hash, hash);",
          "    assert_eq!(map.entries[0].key, key);",
          "    assert_eq!(map.entries[0].value, \"boundary_value\");"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<u32, String> = IndexMapCore::with_capacity(1);",
          "    let hash = HashValue(std::usize::MAX);",
          "    let key = std::u32::MAX;",
          "    let value = String::from(\"boundary_value\");",
          "    map.push_entry(hash, key, value);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries.capacity(), 1);",
          "    assert_eq!(map.entries[0].hash, hash);",
          "    assert_eq!(map.entries[0].key, key);",
          "    assert_eq!(map.entries[0].value, \"boundary_value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]