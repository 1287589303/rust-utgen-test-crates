[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, String> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let hash_value = HashValue(1);",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.push_entry(HashValue(i as usize), i, format!(\"value{}\", i));",
          "    }",
          "    let key = IndexMapCore::MAX_ENTRIES_CAPACITY;",
          "    let value = \"new_value\".to_string();",
          "    index_map.push_entry(hash_value, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.entries.len(), IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    let last_entry = index_map.entries.last().unwrap();",
          "    assert_eq!(last_entry.key, IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(last_entry.value, \"new_value\");",
          "    assert_eq!(last_entry.hash, HashValue(1));"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, String> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let hash_value = HashValue(1);",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.push_entry(HashValue(i as usize), i, format!(\"value{}\", i));",
          "    }",
          "    let key = IndexMapCore::MAX_ENTRIES_CAPACITY;",
          "    let value = \"new_value\".to_string();",
          "    index_map.push_entry(hash_value, key, value);",
          "    assert_eq!(index_map.entries.len(), IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    let last_entry = index_map.entries.last().unwrap();",
          "    assert_eq!(last_entry.key, IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(last_entry.value, \"new_value\");",
          "    assert_eq!(last_entry.hash, HashValue(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, String> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let hash_value = HashValue(1);",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.push_entry(HashValue(i as usize), i, format!(\"value{}\", i));",
          "    }",
          "    let key = IndexMapCore::MAX_ENTRIES_CAPACITY + 1;",
          "    let value = \"another_value\".to_string();",
          "    index_map.push_entry(hash_value, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert_eq!(index_map.entries.last().unwrap().key, IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert_eq!(index_map.entries.last().unwrap().value, \"another_value\".to_string());",
          "    assert_eq!(index_map.indices.len(), IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert!(index_map.indices.contains_key(&hash_value));"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, String> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let hash_value = HashValue(1);",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.push_entry(HashValue(i as usize), i, format!(\"value{}\", i));",
          "    }",
          "    let key = IndexMapCore::MAX_ENTRIES_CAPACITY + 1;",
          "    let value = \"another_value\".to_string();",
          "    index_map.push_entry(hash_value, key, value);",
          "    assert_eq!(index_map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert_eq!(index_map.entries.last().unwrap().key, IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert_eq!(index_map.entries.last().unwrap().value, \"another_value\".to_string());",
          "    assert_eq!(index_map.indices.len(), IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert!(index_map.indices.contains_key(&hash_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]