[
  {
    "uses": [
      "use std::collections::HashMap;",
      "use std::hash::BuildHasherDefault;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![1];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "}"
        ],
        "oracle": [
          "    splice.size_hint() == (1, Some(1))",
          "    splice.iter.size_hint() == (1, Some(1))",
          "    splice.size_hint() != (0, None)",
          "    splice.size_hint() != (2, Some(2))",
          "    splice.size_hint() == (0, None) after exhaustively calling next() on splice"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![1];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "    splice.size_hint() == (1, Some(1))",
          "    splice.iter.size_hint() == (1, Some(1))",
          "    splice.size_hint() != (0, None)",
          "    splice.size_hint() != (2, Some(2))",
          "    splice.size_hint() == (0, None) after exhaustively calling next() on splice",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![1, 2, 3];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.size_hint(), (3, Some(3)));",
          "    elements.push(4);",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (4, Some(4)));",
          "    elements.clear();",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "    let iter = vec![].into_iter();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![1, 2, 3];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "    assert_eq!(splice.size_hint(), (3, Some(3)));",
          "    elements.push(4);",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (4, Some(4)));",
          "    elements.clear();",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "    let iter = vec![].into_iter();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements: Vec<i32> = vec![];",
          "    let iter = elements.into_iter();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements: Vec<i32> = vec![];",
          "    let iter = elements.into_iter();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = (1..=100).collect::<Vec<_>>();",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "    let mut map = HashMap::new();",
          "    map.insert(1, \"one\");",
          "    let elements = (1..=100).collect::<Vec<_>>();",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (100, Some(100)));",
          "    let mut map = HashMap::new();",
          "    let elements = Vec::new();",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = (1..=100).collect::<Vec<_>>();",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "    let mut map = HashMap::new();",
          "    map.insert(1, \"one\");",
          "    let elements = (1..=100).collect::<Vec<_>>();",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (100, Some(100)));",
          "    let mut map = HashMap::new();",
          "    let elements = Vec::new();",
          "    let iter = elements.iter().cloned();",
          "    let splice = Splice {",
          "    iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    assert_eq!(splice.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![5, 10, 15, 20];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.size_hint(), (0, Some(4));",
          "    assert_eq!(splice.iter.size_hint(), (0, Some(4)));",
          "    let elements_empty: Vec<i32> = vec![];",
          "    let iter_empty = elements_empty.iter().cloned();",
          "    let splice_empty = Splice { iter: crate::map::Splice::new(&mut map, iter_empty) };",
          "    assert_eq!(splice_empty.size_hint(), (0, Some(0)));",
          "    let elements_single: Vec<i32> = vec![42];",
          "    let iter_single = elements_single.iter().cloned();",
          "    let splice_single = Splice { iter: crate::map::Splice::new(&mut map, iter_single) };",
          "    assert_eq!(splice_single.size_hint(), (0, Some(1)));",
          "    let elements_multiple: Vec<i32> = vec![1, 2, 3, 4, 5];",
          "    let iter_multiple = elements_multiple.iter().cloned();",
          "    let splice_multiple = Splice { iter: crate::map::Splice::new(&mut map, iter_multiple) };",
          "    assert_eq!(splice_multiple.size_hint(), (0, Some(5)));"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![5, 10, 15, 20];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "    assert_eq!(splice.size_hint(), (0, Some(4));",
          "    assert_eq!(splice.iter.size_hint(), (0, Some(4)));",
          "    let elements_empty: Vec<i32> = vec![];",
          "    let iter_empty = elements_empty.iter().cloned();",
          "    let splice_empty = Splice { iter: crate::map::Splice::new(&mut map, iter_empty) };",
          "    assert_eq!(splice_empty.size_hint(), (0, Some(0)));",
          "    let elements_single: Vec<i32> = vec![42];",
          "    let iter_single = elements_single.iter().cloned();",
          "    let splice_single = Splice { iter: crate::map::Splice::new(&mut map, iter_single) };",
          "    assert_eq!(splice_single.size_hint(), (0, Some(1)));",
          "    let elements_multiple: Vec<i32> = vec![1, 2, 3, 4, 5];",
          "    let iter_multiple = elements_multiple.iter().cloned();",
          "    let splice_multiple = Splice { iter: crate::map::Splice::new(&mut map, iter_multiple) };",
          "    assert_eq!(splice_multiple.size_hint(), (0, Some(5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![3, 1, 4, 5, 2];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.size_hint(), (5, Some(5)));"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "    use std::hash::BuildHasherDefault;",
          "    ",
          "    struct DummyHasher(BuildHasherDefault<core::hash::Hasher>);",
          "    ",
          "    let elements = vec![3, 1, 4, 5, 2];",
          "    let iter = elements.iter().cloned();",
          "    ",
          "    let mut map = HashMap::new();",
          "    let splice = Splice {",
          "        iter: crate::map::Splice::new(&mut map, iter),",
          "    };",
          "    splice.size_hint();",
          "    assert_eq!(splice.size_hint(), (5, Some(5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]