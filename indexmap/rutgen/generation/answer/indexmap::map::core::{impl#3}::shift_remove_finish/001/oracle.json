[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "        Bucket { hash: HashValue::new(2), key: 1, value: \"one\" }",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let result = ref_mut.shift_remove_finish(0);",
          "}"
        ],
        "oracle": [
          "    let expected_key = 0;",
          "    let expected_value = \"zero\";",
          "    assert_eq!(result.0, expected_key);",
          "    assert_eq!(result.1, expected_value);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, \"one\");"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "        Bucket { hash: HashValue::new(2), key: 1, value: \"one\" }",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let result = ref_mut.shift_remove_finish(0);",
          "    let expected_key = 0;",
          "    let expected_value = \"zero\";",
          "    assert_eq!(result.0, expected_key);",
          "    assert_eq!(result.1, expected_value);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, \"one\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "        Bucket { hash: HashValue::new(2), key: 1, value: \"one\" }",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let result = ref_mut.shift_remove_finish(1);",
          "}"
        ],
        "oracle": [
          "    let expected_key = 1;",
          "    let expected_value = \"one\";",
          "    assert_eq!(result.0, expected_key);",
          "    assert_eq!(result.1, expected_value);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 0);",
          "    assert_eq!(entries[0].value, \"zero\");",
          "    assert!(indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "        Bucket { hash: HashValue::new(2), key: 1, value: \"one\" }",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let result = ref_mut.shift_remove_finish(1);",
          "    let expected_key = 1;",
          "    let expected_value = \"one\";",
          "    assert_eq!(result.0, expected_key);",
          "    assert_eq!(result.1, expected_value);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 0);",
          "    assert_eq!(entries[0].value, \"zero\");",
          "    assert!(indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let result = ref_mut.shift_remove_finish(2);",
          "}"
        ],
        "oracle": [
          "    let indices = hash_table::HashTable::new();",
          "    let entries = vec![",
          "    Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "    ];",
          "    let ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    assert_eq!(ref_mut.shift_remove_finish(0), (0, \"zero\"));",
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(indices.capacity(), initial_capacity);",
          "    let result = ref_mut.shift_remove_finish(1);",
          "    assert_eq!(result, None);",
          "    let result = ref_mut.shift_remove_finish(0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), (0, \"zero\"));"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let result = ref_mut.shift_remove_finish(2);",
          "    let indices = hash_table::HashTable::new();",
          "    let entries = vec![",
          "    Bucket { hash: HashValue::new(1), key: 0, value: \"zero\" },",
          "    ];",
          "    let ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    assert_eq!(ref_mut.shift_remove_finish(0), (0, \"zero\"));",
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(indices.capacity(), initial_capacity);",
          "    let result = ref_mut.shift_remove_finish(1);",
          "    assert_eq!(result, None);",
          "    let result = ref_mut.shift_remove_finish(0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), (0, \"zero\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]