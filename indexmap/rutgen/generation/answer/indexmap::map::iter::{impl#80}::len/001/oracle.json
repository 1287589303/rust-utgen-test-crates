[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = vec![].into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = vec![].into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "    assert_eq!(splice.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = vec![Bucket { hash: 0, key: 1, value: 1 }].into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "}"
        ],
        "oracle": [
          "    let index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = vec![Bucket { hash: 0, key: 1, value: 1 }].into_iter();",
          "    let splice = Splice {",
          "    map: &mut index_map,",
          "    tail: IndexMapCore {",
          "    indices: Indices::new(),",
          "    entries: Entries::new(),",
          "    },",
          "    drain,",
          "    replace_with: std::iter::empty(),",
          "    };",
          "    assert_eq!(splice.len(), 1);",
          "    let empty_drain = vec![].into_iter();",
          "    let splice_empty = Splice {",
          "    map: &mut index_map,",
          "    tail: IndexMapCore {",
          "    indices: Indices::new(),",
          "    entries: Entries::new(),",
          "    },",
          "    drain: empty_drain,",
          "    replace_with: std::iter::empty(),",
          "    };",
          "    assert_eq!(splice_empty.len(), 0);",
          "    let drain_multiple = vec![Bucket { hash: 1, key: 2, value: 2 }, Bucket { hash: 2, key: 3, value: 3 }].into_iter();",
          "    let splice_multiple = Splice {",
          "    map: &mut index_map,",
          "    tail: IndexMapCore {",
          "    indices: Indices::new(),",
          "    entries: Entries::new(),",
          "    },",
          "    drain: drain_multiple,",
          "    replace_with: std::iter::empty(),",
          "    };",
          "    assert_eq!(splice_multiple.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = vec![Bucket { hash: 0, key: 1, value: 1 }].into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "    let index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = vec![Bucket { hash: 0, key: 1, value: 1 }].into_iter();",
          "    let splice = Splice {",
          "    map: &mut index_map,",
          "    tail: IndexMapCore {",
          "    indices: Indices::new(),",
          "    entries: Entries::new(),",
          "    },",
          "    drain,",
          "    replace_with: std::iter::empty(),",
          "    };",
          "    assert_eq!(splice.len(), 1);",
          "    let empty_drain = vec![].into_iter();",
          "    let splice_empty = Splice {",
          "    map: &mut index_map,",
          "    tail: IndexMapCore {",
          "    indices: Indices::new(),",
          "    entries: Entries::new(),",
          "    },",
          "    drain: empty_drain,",
          "    replace_with: std::iter::empty(),",
          "    };",
          "    assert_eq!(splice_empty.len(), 0);",
          "    let drain_multiple = vec![Bucket { hash: 1, key: 2, value: 2 }, Bucket { hash: 2, key: 3, value: 3 }].into_iter();",
          "    let splice_multiple = Splice {",
          "    map: &mut index_map,",
          "    tail: IndexMapCore {",
          "    indices: Indices::new(),",
          "    entries: Entries::new(),",
          "    },",
          "    drain: drain_multiple,",
          "    replace_with: std::iter::empty(),",
          "    };",
          "    assert_eq!(splice_multiple.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = (0..10).map(|i| Bucket { hash: i, key: i, value: i }).collect::<Vec<_>>().into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.len(), 10);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let drain = (0..10).map(|i| Bucket { hash: i, key: i, value: i }).collect::<Vec<_>>().into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "    assert_eq!(splice.len(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let max_length = 1000; ",
          "    let drain = (0..max_length).map(|i| Bucket { hash: i, key: i, value: i }).collect::<Vec<_>>().into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(splice.len(), max_length);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::<i32, i32, _>::new();",
          "    let max_length = 1000; ",
          "    let drain = (0..max_length).map(|i| Bucket { hash: i, key: i, value: i }).collect::<Vec<_>>().into_iter();",
          "    let splice = Splice {",
          "        map: &mut index_map,",
          "        tail: IndexMapCore {",
          "            indices: Indices::new(),",
          "            entries: Entries::new(),",
          "        },",
          "        drain,",
          "        replace_with: std::iter::empty(),",
          "    };",
          "    let _ = splice.len();",
          "    assert_eq!(splice.len(), max_length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]