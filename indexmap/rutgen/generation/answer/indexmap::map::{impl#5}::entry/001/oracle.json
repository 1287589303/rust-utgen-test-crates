[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(42, \"value\".to_string());",
          "",
          "    let entry = map.entry(42);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), &42);",
          "    assert_eq!(entry.get(), \"value\");",
          "    assert_eq!(entry.insert(\"new_value\".to_string()), Some(\"value\".to_string()));",
          "    assert_eq!(entry.get(), \"new_value\");",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.entry(43).is_vacant());"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(42, \"value\".to_string());",
          "",
          "    let entry = map.entry(42);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), &42);",
          "    assert_eq!(entry.get(), \"value\");",
          "    assert_eq!(entry.insert(\"new_value\".to_string()), Some(\"value\".to_string()));",
          "    assert_eq!(entry.get(), \"new_value\");",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.entry(43).is_vacant());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    ",
          "    let entry = map.entry(100); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Vacant);",
          "    map.insert(100, \"test\".to_string());",
          "    let entry = map.entry(100);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.occupied().key(), &100);",
          "    assert_eq!(entry.occupied().get(), Some(&\"test\".to_string()));",
          "    map.entry(200);",
          "    assert_eq!(map.core.entries.len(), 2);",
          "    assert!(map.core.entries.get(0).is_some());",
          "    assert!(map.core.entries.get(1).is_some());"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    ",
          "    let entry = map.entry(100); ",
          "    assert_eq!(entry, Entry::Vacant);",
          "    map.insert(100, \"test\".to_string());",
          "    let entry = map.entry(100);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.occupied().key(), &100);",
          "    assert_eq!(entry.occupied().get(), Some(&\"test\".to_string()));",
          "    map.entry(200);",
          "    assert_eq!(map.core.entries.len(), 2);",
          "    assert!(map.core.entries.get(0).is_some());",
          "    assert!(map.core.entries.get(1).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(-10, \"negative\".to_string());",
          "",
          "    let entry = map.entry(-10);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(-10, \"negative\".to_string());",
          "    let entry = map.entry(-10);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), -10);",
          "    assert_eq!(entry.get(), &\"negative\".to_string());",
          "    let entry_vacant = map.entry(10);",
          "    assert!(matches!(entry_vacant, Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(-10, \"negative\".to_string());",
          "",
          "    let entry = map.entry(-10);",
          "    let map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(-10, \"negative\".to_string());",
          "    let entry = map.entry(-10);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), -10);",
          "    assert_eq!(entry.get(), &\"negative\".to_string());",
          "    let entry_vacant = map.entry(10);",
          "    assert!(matches!(entry_vacant, Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(i32::MAX, \"max_value\".to_string());",
          "",
          "    let entry = map.entry(i32::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry::new(i32::MAX, \"max_value\".to_string())));",
          "    assert!(map.core.entries.as_entries().len() == 1);",
          "    assert!(map.core.entries.as_entries()[0].0 == i32::MAX);",
          "    assert!(map.core.entries.as_entries()[0].1 == \"max_value\".to_string());",
          "    let entry2 = map.entry(i32::MIN);",
          "    assert!(matches!(entry2, Entry::Vacant(_)));",
          "    let entry3 = map.entry(i32::MAX);",
          "    assert!(matches!(entry3, Entry::Occupied(_)));",
          "    map.insert(i32::MAX, \"updated_value\".to_string());",
          "    assert_eq!(map.entry(i32::MAX), Entry::Occupied(OccupiedEntry::new(i32::MAX, \"updated_value\".to_string())));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(i32::MAX, \"max_value\".to_string());",
          "",
          "    let entry = map.entry(i32::MAX);",
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry::new(i32::MAX, \"max_value\".to_string())));",
          "    assert!(map.core.entries.as_entries().len() == 1);",
          "    assert!(map.core.entries.as_entries()[0].0 == i32::MAX);",
          "    assert!(map.core.entries.as_entries()[0].1 == \"max_value\".to_string());",
          "    let entry2 = map.entry(i32::MIN);",
          "    assert!(matches!(entry2, Entry::Vacant(_)));",
          "    let entry3 = map.entry(i32::MAX);",
          "    assert!(matches!(entry3, Entry::Occupied(_)));",
          "    map.insert(i32::MAX, \"updated_value\".to_string());",
          "    assert_eq!(map.entry(i32::MAX), Entry::Occupied(OccupiedEntry::new(i32::MAX, \"updated_value\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(i32::MIN, \"min_value\".to_string());",
          "",
          "    let entry = map.entry(i32::MIN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry { key: &i32::MIN, value: \"min_value\".to_string() }));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), &i32::MIN);",
          "    assert_eq!(entry.get(), \"min_value\");",
          "    assert_eq!(map.entry(i32::MAX), Entry::Vacant(VacantEntry { key: &i32::MAX }));",
          "    assert!(matches!(map.entry(i32::MAX), Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::FxHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::rustc_hash::FxHasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_capacity(10);",
          "    map.insert(i32::MIN, \"min_value\".to_string());",
          "",
          "    let entry = map.entry(i32::MIN);",
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry { key: &i32::MIN, value: \"min_value\".to_string() }));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), &i32::MIN);",
          "    assert_eq!(entry.get(), \"min_value\");",
          "    assert_eq!(map.entry(i32::MAX), Entry::Vacant(VacantEntry { key: &i32::MAX }));",
          "    assert!(matches!(map.entry(i32::MAX), Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]