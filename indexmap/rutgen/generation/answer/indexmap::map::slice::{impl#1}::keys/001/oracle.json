[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let keys = slice.keys();",
          "}"
        ],
        "oracle": [
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let keys = slice.keys();",
          "    assert_eq!(keys.iter.len(), 0);",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
          "    let keys = slice.keys();",
          "    assert_eq!(keys.iter.next(), Some(&1));",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }] });",
          "    let keys = slice.keys();",
          "    let keys_vec: Vec<_> = keys.iter.collect();",
          "    assert_eq!(keys_vec, vec![1, 2]);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let keys = slice.keys();",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let keys = slice.keys();",
          "    assert_eq!(keys.iter.len(), 0);",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
          "    let keys = slice.keys();",
          "    assert_eq!(keys.iter.next(), Some(&1));",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }] });",
          "    let keys = slice.keys();",
          "    let keys_vec: Vec<_> = keys.iter.collect();",
          "    assert_eq!(keys_vec, vec![1, 2]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
          "    let keys = slice.keys();",
          "}"
        ],
        "oracle": [
          "    keys().len() == 1",
          "    keys().next() == Some(&1)"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
          "    let keys = slice.keys();",
          "    keys().len() == 1",
          "    keys().next() == Some(&1)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [",
          "        Bucket { hash: 0, key: 1, value: 10 },",
          "        Bucket { hash: 0, key: 2, value: 20 },",
          "        Bucket { hash: 0, key: 3, value: 30 },",
          "    ]});",
          "    let keys = slice.keys();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(keys.iter.len(), 3);",
          "    assert_eq!(keys.iter.next(), Some(&1));",
          "    assert_eq!(keys.iter.next(), Some(&2));",
          "    assert_eq!(keys.iter.next(), Some(&3));",
          "    assert_eq!(keys.iter.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [",
          "        Bucket { hash: 0, key: 1, value: 10 },",
          "        Bucket { hash: 0, key: 2, value: 20 },",
          "        Bucket { hash: 0, key: 3, value: 30 },",
          "    ]});",
          "    let keys = slice.keys();",
          "    assert_eq!(keys.iter.len(), 3);",
          "    assert_eq!(keys.iter.next(), Some(&1));",
          "    assert_eq!(keys.iter.next(), Some(&2));",
          "    assert_eq!(keys.iter.next(), Some(&3));",
          "    assert_eq!(keys.iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries = (0..1024).map(|i| Bucket { hash: i as u64, key: i, value: i * 10 }).collect::<Vec<Bucket<i32, i32>>>();",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: entries.try_into().unwrap() });",
          "    let keys = slice.keys();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(keys.iter.len(), 1024);",
          "    assert_eq!(keys.iter().next(), Some(&0));",
          "    assert_eq!(keys.iter().last(), Some(&1023));",
          "    assert_eq!(keys.iter().collect::<Vec<_>>(), (0..1024).collect::<Vec<_>>());",
          "    assert_eq!(slice.len(), 1024);",
          "    assert!(!slice.is_empty());"
        ],
        "code": [
          "{",
          "    let entries = (0..1024).map(|i| Bucket { hash: i as u64, key: i, value: i * 10 }).collect::<Vec<Bucket<i32, i32>>>();",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: entries.try_into().unwrap() });",
          "    let keys = slice.keys();",
          "    assert_eq!(keys.iter.len(), 1024);",
          "    assert_eq!(keys.iter().next(), Some(&0));",
          "    assert_eq!(keys.iter().last(), Some(&1023));",
          "    assert_eq!(keys.iter().collect::<Vec<_>>(), (0..1024).collect::<Vec<_>>());",
          "    assert_eq!(slice.len(), 1024);",
          "    assert!(!slice.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]