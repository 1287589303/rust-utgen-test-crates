[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    let additional = 0;",
          "    let _ = map.try_reserve_entries(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert!(matches!(map.try_reserve_entries(additional), Err(TryReserveError { .. })));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    let additional = 0;",
          "    let _ = map.try_reserve_entries(additional);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert!(matches!(map.try_reserve_entries(additional), Err(TryReserveError { .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    let additional = 1;",
          "    let _ = map.try_reserve_entries(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert!(map.entries.try_reserve_exact(1).is_err());",
          "    assert!(map.indices.capacity() >= map.entries.len());",
          "    assert!(map.indices.capacity() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    let additional = 1;",
          "    let _ = map.try_reserve_entries(additional);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert!(map.entries.try_reserve_exact(1).is_err());",
          "    assert!(map.indices.capacity() >= map.entries.len());",
          "    assert!(map.indices.capacity() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(3);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "",
          "    let additional = 2; // triggers capacity constraints",
          "    let _ = map.try_reserve_entries(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.indices.capacity() > additional);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.entries.try_reserve_exact(additional).is_err());",
          "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.entries.try_reserve_exact(map.indices.capacity() - map.entries.len()).is_ok());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(3);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "",
          "    let additional = 2; // triggers capacity constraints",
          "    let _ = map.try_reserve_entries(additional);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.indices.capacity() > additional);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.entries.try_reserve_exact(additional).is_err());",
          "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.entries.try_reserve_exact(map.indices.capacity() - map.entries.len()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]