[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let additional = 0;",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "}"
        ],
        "oracle": [
          "    index_map.try_reserve_entries(0).unwrap();",
          "    assert_eq!(index_map.entries.len(), 0);",
          "    assert_eq!(index_map.indices.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    index_map.try_reserve_entries(1).unwrap();",
          "    assert!(index_map.entries.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).is_ok());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let additional = 0;",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "    index_map.try_reserve_entries(0).unwrap();",
          "    assert_eq!(index_map.entries.len(), 0);",
          "    assert_eq!(index_map.indices.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    index_map.try_reserve_entries(1).unwrap();",
          "    assert!(index_map.entries.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 0);",
          "    assert_eq!(index_map.capacity(), 10);",
          "    assert!(index_map.entries.try_reserve_exact(10).is_ok());",
          "    assert!(index_map.try_reserve_entries(9).is_ok());",
          "    assert_eq!(index_map.try_reserve_entries(9).unwrap(), Ok(()));"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert_eq!(index_map.capacity(), 10);",
          "    assert!(index_map.entries.try_reserve_exact(10).is_ok());",
          "    assert!(index_map.try_reserve_entries(9).is_ok());",
          "    assert_eq!(index_map.try_reserve_entries(9).unwrap(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 4; // new_capacity will be at least 10, so try_add = 10",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 4;",
          "    let result = index_map.try_reserve_entries(additional);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 4; // new_capacity will be at least 10, so try_add = 10",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 4;",
          "    let result = index_map.try_reserve_entries(additional);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.indices.capacity() >= 10);",
          "    assert!(index_map.entries.capacity() >= 10);",
          "    assert!(index_map.try_reserve_entries(additional).is_ok());",
          "    assert!(matches!(index_map.try_reserve_entries(additional), Ok(())));"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
          "    index_map.try_reserve_entries(additional).unwrap();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.indices.capacity() >= 10);",
          "    assert!(index_map.entries.capacity() >= 10);",
          "    assert!(index_map.try_reserve_entries(additional).is_ok());",
          "    assert!(matches!(index_map.try_reserve_entries(additional), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]