[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(0);",
          "    let additional = 0;",
          "    map.try_reserve_entries(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.try_reserve_entries(additional).is_ok());",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(map.entries.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(0);",
          "    let additional = 0;",
          "    map.try_reserve_entries(additional);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.try_reserve_entries(additional).is_ok());",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(map.entries.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
          "    let additional = 1;",
          "    map.try_reserve_entries(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.try_reserve_entries(additional).is_ok());",
          "    assert_eq!(map.capacity(), 1);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.entries.try_reserve_exact(additional).is_err());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert!(map.try_reserve_entries(2).is_ok());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
          "    let additional = 1;",
          "    map.try_reserve_entries(additional);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.try_reserve_entries(additional).is_ok());",
          "    assert_eq!(map.capacity(), 1);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.entries.try_reserve_exact(additional).is_err());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.try_reserve_entries(additional).is_err());",
          "    assert!(map.try_reserve_entries(2).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
          "    map.try_reserve_entries(additional);",
          "}"
        ],
        "oracle": [
          "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
          "    let try_add = map.indices.capacity() - map.entries.len();",
          "    assert!(try_add == additional);",
          "    let result = map.try_reserve_entries(additional);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(TryReserveError { .. })));",
          "    assert_eq!(map.entries.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
          "    map.try_reserve_entries(additional);",
          "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
          "    let try_add = map.indices.capacity() - map.entries.len();",
          "    assert!(try_add == additional);",
          "    let result = map.try_reserve_entries(additional);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(TryReserveError { .. })));",
          "    assert_eq!(map.entries.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]