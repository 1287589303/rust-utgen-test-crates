[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set: super::IndexSet<() ,()> = super::IndexSet::new();",
          "}"
        ],
        "oracle": [
          "    let index_set: super::IndexSet<(), ()> = super::IndexSet::new();",
          "    assert_eq!(index_set.map, super::IndexMap::new());",
          "    assert!(index_set.map.core.is_empty());",
          "    assert_eq!(index_set.map.hash_builder, Default::default());",
          "    assert!(index_set.map.len() == 0);"
        ],
        "code": [
          "{",
          "    let index_set: super::IndexSet<() ,()> = super::IndexSet::new();",
          "    let index_set: super::IndexSet<(), ()> = super::IndexSet::new();",
          "    assert_eq!(index_set.map, super::IndexMap::new());",
          "    assert!(index_set.map.core.is_empty());",
          "    assert_eq!(index_set.map.hash_builder, Default::default());",
          "    assert!(index_set.map.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set_with_capacity: super::IndexSet<() ,()> = super::IndexSet::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set_with_capacity.map.core.len(), 0);",
          "    assert!(index_set_with_capacity.map.core.is_empty());",
          "    assert!(index_set_with_capacity.map.hash_builder == ());",
          "    assert!(index_set_with_capacity.map.capacity() >= 0);",
          "    assert!(std::mem::size_of_val(&index_set_with_capacity) > 0);",
          "    assert_eq!(index_set_with_capacity.map.core.entries().len(), 0);",
          "    assert!(index_set_with_capacity.map.is_empty());"
        ],
        "code": [
          "{",
          "    let index_set_with_capacity: super::IndexSet<() ,()> = super::IndexSet::with_capacity(0);",
          "    assert_eq!(index_set_with_capacity.map.core.len(), 0);",
          "    assert!(index_set_with_capacity.map.core.is_empty());",
          "    assert!(index_set_with_capacity.map.hash_builder == ());",
          "    assert!(index_set_with_capacity.map.capacity() >= 0);",
          "    assert!(std::mem::size_of_val(&index_set_with_capacity) > 0);",
          "    assert_eq!(index_set_with_capacity.map.core.entries().len(), 0);",
          "    assert!(index_set_with_capacity.map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set_with_capacity: super::IndexSet<() ,()> = super::IndexSet::with_capacity(10);",
          "}"
        ],
        "oracle": [
          "    let result = super::IndexSet::new();",
          "    assert_eq!(result.map.core, super::IndexMap::new().core);",
          "    assert_eq!(result.map.hash_builder, ());",
          "    assert!(result.map.core.is_empty());",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<super::IndexSet<(), ()>>());"
        ],
        "code": [
          "{",
          "    let index_set_with_capacity: super::IndexSet<() ,()> = super::IndexSet::with_capacity(10);",
          "    let result = super::IndexSet::new();",
          "    assert_eq!(result.map.core, super::IndexMap::new().core);",
          "    assert_eq!(result.map.hash_builder, ());",
          "    assert!(result.map.core.is_empty());",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<super::IndexSet<(), ()>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]