[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    let _cap = index_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    let _cap = index_set.capacity();",
          "    assert_eq!(index_set.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
          "    let _cap = index_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 1);",
          "    let index_set_empty: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "    super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(index_set_empty.capacity(), 0);",
          "    let index_set_large: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "    super::IndexSet::with_capacity_and_hasher(100, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(index_set_large.capacity(), 100);",
          "    let index_set_default: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "    super::IndexSet::with_hasher(std::collections::hash_map::RandomState::new());",
          "    assert!(index_set_default.capacity() >= 0);"
        ],
        "code": [
          "{",
          "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
          "    let _cap = index_set.capacity();",
          "    assert_eq!(index_set.capacity(), 1);",
          "    let index_set_empty: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "    super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(index_set_empty.capacity(), 0);",
          "    let index_set_large: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "    super::IndexSet::with_capacity_and_hasher(100, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(index_set_large.capacity(), 100);",
          "    let index_set_default: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "    super::IndexSet::with_hasher(std::collections::hash_map::RandomState::new());",
          "    assert!(index_set_default.capacity() >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());",
          "    let _cap = index_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 1000);"
        ],
        "code": [
          "{",
          "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());",
          "    let _cap = index_set.capacity();",
          "    assert_eq!(index_set.capacity(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve(5);",
          "    let _cap = index_set.capacity();",
          "}"
        ],
        "oracle": [
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve(5);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve(0);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.shrink_to_fit();",
          "    assert!(index_set.capacity() >= index_set.len());"
        ],
        "code": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve(5);",
          "    let _cap = index_set.capacity();",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve(5);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve(0);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.shrink_to_fit();",
          "    assert!(index_set.capacity() >= index_set.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]