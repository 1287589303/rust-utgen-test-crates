[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_hasher(Default::default());",
          "    let _iter = index_map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.is_empty());",
          "    assert_eq!(_iter.len(), 0);",
          "    assert!(_iter.next().is_none());",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert_eq!(index_map.hasher(), &Default::default());",
          "    assert_eq!(_iter, index_map.iter_mut());"
        ],
        "code": [
          "{",
          "    let index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_hasher(Default::default());",
          "    let _iter = index_map.into_iter();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.is_empty());",
          "    assert_eq!(_iter.len(), 0);",
          "    assert!(_iter.next().is_none());",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert_eq!(index_map.hasher(), &Default::default());",
          "    assert_eq!(_iter, index_map.iter_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_capacity_and_hasher(1, Default::default());",
          "    index_map.insert(1, 100);",
          "    let _iter = index_map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 1);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(_iter.next(), Some((&1, &100)));",
          "    assert_eq!(index_map.len(), 1);",
          "    assert_eq!(index_map.capacity(), 1);",
          "    assert_eq!(index_map.keys().collect::<Vec<_>>(), vec![&1]);",
          "    assert_eq!(index_map.values().collect::<Vec<_>>(), vec![&100]);",
          "    assert_eq!(index_map.iter().count(), 1);"
        ],
        "code": [
          "{",
          "    let mut index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_capacity_and_hasher(1, Default::default());",
          "    index_map.insert(1, 100);",
          "    let _iter = index_map.into_iter();",
          "    assert_eq!(index_map.len(), 1);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(_iter.next(), Some((&1, &100)));",
          "    assert_eq!(index_map.len(), 1);",
          "    assert_eq!(index_map.capacity(), 1);",
          "    assert_eq!(index_map.keys().collect::<Vec<_>>(), vec![&1]);",
          "    assert_eq!(index_map.values().collect::<Vec<_>>(), vec![&100]);",
          "    assert_eq!(index_map.iter().count(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_capacity_and_hasher(5, Default::default());",
          "    index_map.insert(1, 100);",
          "    index_map.insert(2, 200);",
          "    let _iter = index_map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 2);",
          "    assert!(index_map.is_empty() == false);",
          "    assert_eq!(index_map.capacity(), 5);",
          "    assert_eq!(index_map.keys().collect::<Vec<_>>(), vec![1, 2]);",
          "    assert_eq!(index_map.values().collect::<Vec<_>>(), vec![100, 200]);",
          "    assert_eq!(index_map.iter().collect::<Vec<_>>(), vec![(&1, &100), (&2, &200)]);"
        ],
        "code": [
          "{",
          "    let mut index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_capacity_and_hasher(5, Default::default());",
          "    index_map.insert(1, 100);",
          "    index_map.insert(2, 200);",
          "    let _iter = index_map.into_iter();",
          "    assert_eq!(index_map.len(), 2);",
          "    assert!(index_map.is_empty() == false);",
          "    assert_eq!(index_map.capacity(), 5);",
          "    assert_eq!(index_map.keys().collect::<Vec<_>>(), vec![1, 2]);",
          "    assert_eq!(index_map.values().collect::<Vec<_>>(), vec![100, 200]);",
          "    assert_eq!(index_map.iter().collect::<Vec<_>>(), vec![(&1, &100), (&2, &200)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_capacity_and_hasher(1000, Default::default());",
          "    for i in 0..100 {",
          "        index_map.insert(i, i * 10);",
          "    }",
          "    let _iter = index_map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 100);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.capacity(), 1000);",
          "    assert_eq!(index_map.keys().count(), 100);",
          "    assert_eq!(index_map.values().count(), 100);"
        ],
        "code": [
          "{",
          "    let mut index_map: super::IndexMap<i32, i32, _> = super::IndexMap::with_capacity_and_hasher(1000, Default::default());",
          "    for i in 0..100 {",
          "        index_map.insert(i, i * 10);",
          "    }",
          "    let _iter = index_map.into_iter();",
          "    assert_eq!(index_map.len(), 100);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.capacity(), 1000);",
          "    assert_eq!(index_map.keys().count(), 100);",
          "    assert_eq!(index_map.values().count(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]