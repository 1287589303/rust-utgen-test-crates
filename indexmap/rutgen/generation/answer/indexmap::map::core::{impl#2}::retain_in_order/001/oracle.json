[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.indices.push(0); // Simulating that indices length > entries length",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    ",
          "    map.retain_in_order(|_key, value| {",
          "        *value > 5",
          "    });",
          "}"
        ],
        "oracle": [
          "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.indices.push(0);",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert!(map.indices.len() > map.entries.len());",
          "    map.retain_in_order(|_key, value| { *value > 5 });",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].value, 10);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.indices.push(0); // Simulating that indices length > entries length",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    ",
          "    map.retain_in_order(|_key, value| {",
          "        *value > 5",
          "    });",
          "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.indices.push(0);",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert!(map.indices.len() > map.entries.len());",
          "    map.retain_in_order(|_key, value| { *value > 5 });",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    map.indices.push(0); // Simulating that indices length > entries length",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 5 });",
          "",
          "    map.retain_in_order(|_key, value| {",
          "        *value > 6",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert!(map.indices.len() > map.entries.len());",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].hash, HashValue(1));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    map.indices.push(0); // Simulating that indices length > entries length",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 5 });",
          "",
          "    map.retain_in_order(|_key, value| {",
          "        *value > 6",
          "    });",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert!(map.indices.len() > map.entries.len());",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].hash, HashValue(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    map.indices.push(0); // Simulating that indices length > entries length",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 3 });",
          "",
          "    map.retain_in_order(|_key, _value| false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 2);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[1].value, 3);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    map.indices.push(0); // Simulating that indices length > entries length",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 3 });",
          "",
          "    map.retain_in_order(|_key, _value| false);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 2);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[1].value, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(max_capacity);",
          "    for i in 0..max_capacity {",
          "        map.indices.push(i); // Simulating that indices length > entries length",
          "        map.entries.push(Bucket { hash: HashValue(i as u64), key: i, value: i as usize });",
          "    }",
          "",
          "    map.retain_in_order(|_key, value| {",
          "        *value % 2 == 0",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), max_capacity);",
          "    assert!(map.entries.iter().all(|entry| entry.value % 2 == 0));",
          "    assert!(map.entries.len() < map.indices.len());",
          "    assert!(map.indices.iter().all(|&index| index < max_capacity));",
          "    assert_eq!(map.entries.len(), map.indices.len() / 2);",
          "    assert_eq!(map.entries.iter().map(|entry| entry.value).count(), map.entries.len());",
          "    assert!(map.indices.iter().all(|index| {",
          "    let entry_value = map.entries.get(*index);",
          "    entry_value.is_some() && entry_value.unwrap().value % 2 == 0",
          "    }));"
        ],
        "code": [
          "{",
          "    let max_capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(max_capacity);",
          "    for i in 0..max_capacity {",
          "        map.indices.push(i); // Simulating that indices length > entries length",
          "        map.entries.push(Bucket { hash: HashValue(i as u64), key: i, value: i as usize });",
          "    }",
          "",
          "    map.retain_in_order(|_key, value| {",
          "        *value % 2 == 0",
          "    });",
          "    assert_eq!(map.len(), max_capacity);",
          "    assert!(map.entries.iter().all(|entry| entry.value % 2 == 0));",
          "    assert!(map.entries.len() < map.indices.len());",
          "    assert!(map.indices.iter().all(|&index| index < max_capacity));",
          "    assert_eq!(map.entries.len(), map.indices.len() / 2);",
          "    assert_eq!(map.entries.iter().map(|entry| entry.value).count(), map.entries.len());",
          "    assert!(map.indices.iter().all(|index| {",
          "    let entry_value = map.entries.get(*index);",
          "    entry_value.is_some() && entry_value.unwrap().value % 2 == 0",
          "    }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]