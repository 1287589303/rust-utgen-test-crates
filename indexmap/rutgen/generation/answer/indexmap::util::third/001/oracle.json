[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (1, 2, 3);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 3);",
          "    assert!(std::any::type_name::<C>() == \"i32\");",
          "    let input = (\"a\", \"b\", \"c\");",
          "    let result = third(input);",
          "    assert_eq!(result, \"c\");",
          "    assert!(std::any::type_name::<C>() == \"&str\");",
          "    let input = (true, false, true);",
          "    let result = third(input);",
          "    assert_eq!(result, true);",
          "    assert!(std::any::type_name::<C>() == \"bool\");",
          "    let input = (1.0, 2.0, 3.0);",
          "    let result = third(input);",
          "    assert_eq!(result, 3.0);",
          "    assert!(std::any::type_name::<C>() == \"f64\");"
        ],
        "code": [
          "{",
          "    let input = (1, 2, 3);",
          "    let result = third(input);",
          "    assert_eq!(result, 3);",
          "    assert!(std::any::type_name::<C>() == \"i32\");",
          "    let input = (\"a\", \"b\", \"c\");",
          "    let result = third(input);",
          "    assert_eq!(result, \"c\");",
          "    assert!(std::any::type_name::<C>() == \"&str\");",
          "    let input = (true, false, true);",
          "    let result = third(input);",
          "    assert_eq!(result, true);",
          "    assert!(std::any::type_name::<C>() == \"bool\");",
          "    let input = (1.0, 2.0, 3.0);",
          "    let result = third(input);",
          "    assert_eq!(result, 3.0);",
          "    assert!(std::any::type_name::<C>() == \"f64\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (0, 0, 0);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert_eq!(std::any::TypeId::of_val(&result), std::any::TypeId::of::<i32>());",
          "    assert_eq!(third((\"a\", \"b\", \"c\")), \"c\");",
          "    assert_eq!(third((1.0, 2.0, 3.0)), 3.0);",
          "    assert_eq!(third((true, false, true)), true);",
          "    assert_eq!(third((1, 2, 3.5)), 3.5);"
        ],
        "code": [
          "{",
          "    let input = (0, 0, 0);",
          "    let result = third(input);",
          "    assert_eq!(result, 0);",
          "    assert_eq!(std::any::TypeId::of_val(&result), std::any::TypeId::of::<i32>());",
          "    assert_eq!(third((\"a\", \"b\", \"c\")), \"c\");",
          "    assert_eq!(third((1.0, 2.0, 3.0)), 3.0);",
          "    assert_eq!(third((true, false, true)), true);",
          "    assert_eq!(third((1, 2, 3.5)), 3.5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (1.0, 2.0, 3.0);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 3.0);"
        ],
        "code": [
          "{",
          "    let input = (1.0, 2.0, 3.0);",
          "    let result = third(input);",
          "    assert_eq!(result, 3.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (Some(1), Some(2), Some(3));",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    let input = (Some(1), Some(2), Some(3));",
          "    let expected_output = Some(3);",
          "    assert_eq!(result, expected_output);"
        ],
        "code": [
          "{",
          "    let input = (Some(1), Some(2), Some(3));",
          "    let result = third(input);",
          "    let input = (Some(1), Some(2), Some(3));",
          "    let expected_output = Some(3);",
          "    assert_eq!(result, expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (None, None, None);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let input = (None, None, None);",
          "    let result = third(input);",
          "    assert_eq!(result, None);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (1, \"two\", 3.0);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 3.0);"
        ],
        "code": [
          "{",
          "    let input = (1, \"two\", 3.0);",
          "    let result = third(input);",
          "    assert_eq!(result, 3.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (i32::MAX, i32::MAX - 1, i32::MAX - 2);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, i32::MAX - 2);"
        ],
        "code": [
          "{",
          "    let input = (i32::MAX, i32::MAX - 1, i32::MAX - 2);",
          "    let result = third(input);",
          "    assert_eq!(result, i32::MAX - 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = (f64::MAX, f64::MIN, f64::EPSILON);",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, f64::EPSILON);"
        ],
        "code": [
          "{",
          "    let input = (f64::MAX, f64::MIN, f64::EPSILON);",
          "    let result = third(input);",
          "    assert_eq!(result, f64::EPSILON);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ('a', 'b', 'c');",
          "    let result = third(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'c');",
          "    assert!(std::any::type_name::<C>() == \"char\");",
          "    assert_eq!(third((1, 2, 3)), 3);",
          "    assert_eq!(third((true, false, true)), true);",
          "    assert_eq!(third((1.0, 2.0, 3.0)), 3.0);",
          "    assert_eq!(third((\"first\", \"second\", \"third\")), \"third\");"
        ],
        "code": [
          "{",
          "    let input = ('a', 'b', 'c');",
          "    let result = third(input);",
          "    assert_eq!(result, 'c');",
          "    assert!(std::any::type_name::<C>() == \"char\");",
          "    assert_eq!(third((1, 2, 3)), 3);",
          "    assert_eq!(third((true, false, true)), true);",
          "    assert_eq!(third((1.0, 2.0, 3.0)), 3.0);",
          "    assert_eq!(third((\"first\", \"second\", \"third\")), \"third\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]