[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice = Box::new(Slice {",
          "        entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" }],",
          "    });",
          "    slice.split_at_mut(0);",
          "}"
        ],
        "oracle": [
          "    let mut slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" }] });",
          "    let (first, second) = slice.split_at_mut(0);",
          "    assert_eq!(first.len(), 1);",
          "    assert_eq!(second.len(), 0);",
          "    assert!(first.is_empty() == false);",
          "    assert!(second.is_empty() == true);",
          "    let (first_keys, first_values) = first.iter().next().unwrap();",
          "    assert_eq!(first_keys, &\"key1\");",
          "    assert_eq!(first_values, &\"value1\");",
          "    slice.split_at_mut(1);",
          "    let (first2, second2) = slice.split_at_mut(1);",
          "    assert_eq!(first2.len(), 1);",
          "    assert_eq!(second2.len(), 0);",
          "    let (first_keys2, first_values2) = first2.iter().next().unwrap();",
          "    assert_eq!(first_keys2, &\"key1\");",
          "    assert_eq!(first_values2, &\"value1\");",
          "    slice.split_at_mut(2); // should panic since index > len"
        ],
        "code": [
          "{",
          "    let mut slice = Box::new(Slice {",
          "        entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" }],",
          "    });",
          "    slice.split_at_mut(0);",
          "    let mut slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" }] });",
          "    let (first, second) = slice.split_at_mut(0);",
          "    assert_eq!(first.len(), 1);",
          "    assert_eq!(second.len(), 0);",
          "    assert!(first.is_empty() == false);",
          "    assert!(second.is_empty() == true);",
          "    let (first_keys, first_values) = first.iter().next().unwrap();",
          "    assert_eq!(first_keys, &\"key1\");",
          "    assert_eq!(first_values, &\"value1\");",
          "    slice.split_at_mut(1);",
          "    let (first2, second2) = slice.split_at_mut(1);",
          "    assert_eq!(first2.len(), 1);",
          "    assert_eq!(second2.len(), 0);",
          "    let (first_keys2, first_values2) = first2.iter().next().unwrap();",
          "    assert_eq!(first_keys2, &\"key1\");",
          "    assert_eq!(first_values2, &\"value1\");",
          "    slice.split_at_mut(2); // should panic since index > len",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice = Box::new(Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" },",
          "            Bucket { hash: HashValue::default(), key: \"key2\", value: \"value2\" },",
          "        ],",
          "    });",
          "    slice.split_at_mut(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.split_at_mut(0).0.len(), 0);",
          "    assert_eq!(slice.split_at_mut(0).1.len(), 2);",
          "    assert_eq!(slice.split_at_mut(1).0.len(), 1);",
          "    assert_eq!(slice.split_at_mut(1).1.len(), 1);",
          "    assert_eq!(slice.split_at_mut(2).0.len(), 2);",
          "    assert_eq!(slice.split_at_mut(2).1.len(), 0);",
          "    assert!(std::panic::catch_unwind(|| slice.split_at_mut(3)).is_err());"
        ],
        "code": [
          "{",
          "    let mut slice = Box::new(Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" },",
          "            Bucket { hash: HashValue::default(), key: \"key2\", value: \"value2\" },",
          "        ],",
          "    });",
          "    slice.split_at_mut(2);",
          "    assert_eq!(slice.split_at_mut(0).0.len(), 0);",
          "    assert_eq!(slice.split_at_mut(0).1.len(), 2);",
          "    assert_eq!(slice.split_at_mut(1).0.len(), 1);",
          "    assert_eq!(slice.split_at_mut(1).1.len(), 1);",
          "    assert_eq!(slice.split_at_mut(2).0.len(), 2);",
          "    assert_eq!(slice.split_at_mut(2).1.len(), 0);",
          "    assert!(std::panic::catch_unwind(|| slice.split_at_mut(3)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut slice = Box::new(Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" },",
          "            Bucket { hash: HashValue::default(), key: \"key2\", value: \"value2\" },",
          "        ],",
          "    });",
          "    slice.split_at_mut(3);",
          "}"
        ],
        "oracle": [
          "    let mut slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" }, Bucket { hash: HashValue::default(), key: \"key2\", value: \"value2\" }] });",
          "    assert!(std::panic::catch_unwind(|| slice.split_at_mut(3)).is_err());"
        ],
        "code": [
          "{",
          "    let mut slice = Box::new(Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" },",
          "            Bucket { hash: HashValue::default(), key: \"key2\", value: \"value2\" },",
          "        ],",
          "    });",
          "    slice.split_at_mut(3);",
          "    let mut slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: \"value1\" }, Bucket { hash: HashValue::default(), key: \"key2\", value: \"value2\" }] });",
          "    assert!(std::panic::catch_unwind(|| slice.split_at_mut(3)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]