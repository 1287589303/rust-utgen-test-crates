[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left = [1, 2, 3];",
          "    let right = [1, 2, 3];",
          "    let eq = |a: &i32, b: &i32| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let left = [1, 2, 3];",
          "    let right = [1, 2, 3];",
          "    let eq = |a: &i32, b: &i32| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left = [0, 1, 2];",
          "    let right = [0, 1, 2];",
          "    let eq = |a: &i32, b: &i32| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(result);",
          "    assert!(slice_eq(&[], &[], eq));",
          "    assert!(slice_eq(&[1], &[1], eq));",
          "    assert!(slice_eq(&[1, 2], &[1, 2], eq));",
          "    assert!(slice_eq(&[1, 2, 3], &[1, 2, 3], eq));",
          "    assert!(!slice_eq(&[1, 2, 3], &[1, 2], eq));",
          "    assert!(!slice_eq(&[1, 2, 3], &[3, 2, 1], eq));",
          "    assert!(!slice_eq(&[1, 2, 3], &[1, 2, 4], eq));"
        ],
        "code": [
          "{",
          "    let left = [0, 1, 2];",
          "    let right = [0, 1, 2];",
          "    let eq = |a: &i32, b: &i32| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "    assert_eq!(result, true);",
          "    assert!(result);",
          "    assert!(slice_eq(&[], &[], eq));",
          "    assert!(slice_eq(&[1], &[1], eq));",
          "    assert!(slice_eq(&[1, 2], &[1, 2], eq));",
          "    assert!(slice_eq(&[1, 2, 3], &[1, 2, 3], eq));",
          "    assert!(!slice_eq(&[1, 2, 3], &[1, 2], eq));",
          "    assert!(!slice_eq(&[1, 2, 3], &[3, 2, 1], eq));",
          "    assert!(!slice_eq(&[1, 2, 3], &[1, 2, 4], eq));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left = [\"hello\", \"world\"];",
          "    let right = [\"hello\", \"world\"];",
          "    let eq = |a: &str, b: &str| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let left = [\"hello\", \"world\"];",
          "    let right = [\"hello\", \"world\"];",
          "    let eq = |a: &str, b: &str| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left = [1.0, 2.0, 3.0];",
          "    let right = [1.0, 2.0, 3.0];",
          "    let eq = |a: &f64, b: &f64| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let left = [1.0, 2.0, 3.0];",
          "    let right = [1.0, 2.0, 3.0];",
          "    let eq = |a: &f64, b: &f64| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = 42;",
          "    let left = [&a, &a];",
          "    let right = [&a, &a];",
          "    let eq = |a: &&i32, b: &&i32| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let a = 42;",
          "    let left = [&a, &a];",
          "    let right = [&a, &a];",
          "    let eq = |a: &&i32, b: &&i32| a == b;",
          "    let result = slice_eq(&left, &right, eq);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]