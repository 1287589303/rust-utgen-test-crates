[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert_eq!(map.core.len(), 0);",
          "    assert_eq!(map.core.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert_eq!(map.core.len(), 0);",
          "    assert_eq!(map.core.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert!(map.core.entries.is_empty());",
          "    assert_eq!(map.core.indices.len(), 0);"
        ],
        "code": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert!(map.core.entries.is_empty());",
          "    assert_eq!(map.core.indices.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(usize::MAX, hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), usize::MAX);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert_eq!(map.core.len(), 0);",
          "    assert_eq!(map.core.capacity(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(usize::MAX, hash_builder);",
          "    assert_eq!(map.capacity(), usize::MAX);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert_eq!(map.core.len(), 0);",
          "    assert_eq!(map.core.capacity(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(0, hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert_eq!(map.core.len(), 0);",
          "    assert_eq!(map.core.capacity(), IndexMapCore::<usize, String>::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(map.core.entries.len(), 0);",
          "    assert_eq!(map.core.indices.len(), 0);",
          "    assert!(map.core.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(0, hash_builder);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "    assert_eq!(map.core.len(), 0);",
          "    assert_eq!(map.core.capacity(), IndexMapCore::<usize, String>::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(map.core.entries.len(), 0);",
          "    assert_eq!(map.core.indices.len(), 0);",
          "    assert!(map.core.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]