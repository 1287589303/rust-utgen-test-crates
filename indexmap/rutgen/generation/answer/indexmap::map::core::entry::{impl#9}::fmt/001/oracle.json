[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = format!(\"{:?}\", entry);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.index(), 0);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"IndexedEntry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"index: 0\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"key: \\\"key1\\\"\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"value: \\\"value1\\\"\"), true);"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = format!(\"{:?}\", entry);",
          "    assert_eq!(entry.index(), 0);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"IndexedEntry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"index: 0\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"key: \\\"key1\\\"\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"value: \\\"value1\\\"\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry1 = IndexedEntry::new(&mut map, 0);",
          "    let entry2 = IndexedEntry::new(&mut map, 1);",
          "    let _ = format!(\"{:?}\", entry1);",
          "    let _ = format!(\"{:?}\", entry2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"IndexedEntry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"index\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"key1\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"value1\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"IndexedEntry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"index\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"key2\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"value2\"), true);"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry1 = IndexedEntry::new(&mut map, 0);",
          "    let entry2 = IndexedEntry::new(&mut map, 1);",
          "    let _ = format!(\"{:?}\", entry1);",
          "    let _ = format!(\"{:?}\", entry2);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"IndexedEntry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"index\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"key1\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry1).contains(\"value1\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"IndexedEntry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"index\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"key2\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry2).contains(\"value2\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = format!(\"{:?}\", entry);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
          "    assert_eq!(entry.index(), 0);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert!(format!(\"{:?}\", entry).contains(\"IndexedEntry\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"index: 0\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"key: \\\"key1\\\"\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"value: \\\"value1\\\"\"));"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = format!(\"{:?}\", entry);",
          "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
          "    assert_eq!(entry.index(), 0);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert!(format!(\"{:?}\", entry).contains(\"IndexedEntry\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"index: 0\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"key: \\\"key1\\\"\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"value: \\\"value1\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let _ = IndexedEntry::new(&mut map, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(fmt(&self, f: &mut fmt::Formatter<'_>), fmt::Result::Err);",
          "    let map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    assert!(entry.index() > 0);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert!(std::panic::catch_unwind(|| { IndexedEntry::new(&mut map, 1); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.key_mut()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.get_mut()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.insert(\"value2\")).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.into_mut()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.swap_remove_entry()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.shift_remove_entry()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.swap_remove()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.shift_remove()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.move_index(2)).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.swap_indices(1)).is_err());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let _ = IndexedEntry::new(&mut map, 1);",
          "    assert_eq!(fmt(&self, f: &mut fmt::Formatter<'_>), fmt::Result::Err);",
          "    let map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    assert!(entry.index() > 0);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert!(std::panic::catch_unwind(|| { IndexedEntry::new(&mut map, 1); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.key_mut()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.get_mut()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.insert(\"value2\")).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.into_mut()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.swap_remove_entry()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.shift_remove_entry()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.swap_remove()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.shift_remove()).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.move_index(2)).is_err());",
          "    assert!(std::panic::catch_unwind(|| entry.swap_indices(1)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]