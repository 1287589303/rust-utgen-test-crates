[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec: Vec<Bucket<i32, i32>> = Vec::new();",
          "    let drain = vec.drain(..);",
          "    let len = drain.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);"
        ],
        "code": [
          "{",
          "    let vec: Vec<Bucket<i32, i32>> = Vec::new();",
          "    let drain = vec.drain(..);",
          "    let len = drain.len();",
          "    assert_eq!(len, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<Bucket<i32, i32>> = Vec::with_capacity(5);",
          "    vec.push(Bucket { hash: 0, key: 1, value: 10 });",
          "    vec.push(Bucket { hash: 1, key: 2, value: 20 });",
          "    let drain = vec.drain(..);",
          "    let len = drain.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 2);",
          "    assert!(drain.len() <= 5);",
          "    let mut vec_empty: Vec<Bucket<i32, i32>> = Vec::with_capacity(5);",
          "    let drain_empty = vec_empty.drain(..);",
          "    assert_eq!(drain_empty.len(), 0);",
          "    vec_empty.push(Bucket { hash: 2, key: 3, value: 30 });",
          "    let drain_single = vec_empty.drain(..);",
          "    assert_eq!(drain_single.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<Bucket<i32, i32>> = Vec::with_capacity(5);",
          "    vec.push(Bucket { hash: 0, key: 1, value: 10 });",
          "    vec.push(Bucket { hash: 1, key: 2, value: 20 });",
          "    let drain = vec.drain(..);",
          "    let len = drain.len();",
          "    assert_eq!(len, 2);",
          "    assert!(drain.len() <= 5);",
          "    let mut vec_empty: Vec<Bucket<i32, i32>> = Vec::with_capacity(5);",
          "    let drain_empty = vec_empty.drain(..);",
          "    assert_eq!(drain_empty.len(), 0);",
          "    vec_empty.push(Bucket { hash: 2, key: 3, value: 30 });",
          "    let drain_single = vec_empty.drain(..);",
          "    assert_eq!(drain_single.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<Bucket<i32, i32>> = Vec::with_capacity(10);",
          "    for i in 0..10 {",
          "        vec.push(Bucket { hash: i, key: i, value: i * 10 });",
          "    }",
          "    let drain = vec.drain(..);",
          "    let len = drain.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 10);"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<Bucket<i32, i32>> = Vec::with_capacity(10);",
          "    for i in 0..10 {",
          "        vec.push(Bucket { hash: i, key: i, value: i * 10 });",
          "    }",
          "    let drain = vec.drain(..);",
          "    let len = drain.len();",
          "    assert_eq!(len, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<Bucket<i32, i32>> = Vec::new();",
          "    vec.push(Bucket { hash: 0, key: 1, value: 10 });",
          "    vec.push(Bucket { hash: 1, key: 2, value: 20 });",
          "    let mut drain = vec.drain(..);",
          "    drain.next(); // Drain one item",
          "    let len = drain.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 1);",
          "    assert_eq!(drain.len(), 1);",
          "    assert_eq!(vec.len(), 1);",
          "    assert!(drain.iter.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<Bucket<i32, i32>> = Vec::new();",
          "    vec.push(Bucket { hash: 0, key: 1, value: 10 });",
          "    vec.push(Bucket { hash: 1, key: 2, value: 20 });",
          "    let mut drain = vec.drain(..);",
          "    drain.next(); // Drain one item",
          "    let len = drain.len();",
          "    assert_eq!(len, 1);",
          "    assert_eq!(drain.len(), 1);",
          "    assert_eq!(vec.len(), 1);",
          "    assert!(drain.iter.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]