[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| true);",
          "}"
        ],
        "oracle": [
          "    index_set.map.core.len() == initial_length",
          "    index_set.map.core.iter().all(|&value| value != removed_value)",
          "    index_set.map.core.len() == expected_length_after_retain",
          "    index_set.map.core.iter().any(|&value| value == retained_value)",
          "    index_set.map.core.iter().all(|&value| !keep(value))",
          "    index_set.map.core.is_empty() == (expected_length_after_retain == 0)"
        ],
        "code": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| true);",
          "    index_set.map.core.len() == initial_length",
          "    index_set.map.core.iter().all(|&value| value != removed_value)",
          "    index_set.map.core.len() == expected_length_after_retain",
          "    index_set.map.core.iter().any(|&value| value == retained_value)",
          "    index_set.map.core.iter().all(|&value| !keep(value))",
          "    index_set.map.core.is_empty() == (expected_length_after_retain == 0)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    assert!(index_set.map.core.contains_key(&1));",
          "    index_set.retain2(|value| *value != 1);",
          "    assert_eq!(index_set.map.core.len(), 0);",
          "    index_set.map.core.insert(2, ());",
          "    index_set.retain2(|value| *value < 2);",
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    index_set.retain2(|value| *value > 2);",
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    index_set.retain2(|value| false);",
          "    assert_eq!(index_set.map.core.len(), 0);",
          "    index_set.retain2(|value| true);",
          "    assert_eq!(index_set.map.core.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| true);",
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    assert!(index_set.map.core.contains_key(&1));",
          "    index_set.retain2(|value| *value != 1);",
          "    assert_eq!(index_set.map.core.len(), 0);",
          "    index_set.map.core.insert(2, ());",
          "    index_set.retain2(|value| *value < 2);",
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    index_set.retain2(|value| *value > 2);",
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    index_set.retain2(|value| false);",
          "    assert_eq!(index_set.map.core.len(), 0);",
          "    index_set.retain2(|value| true);",
          "    assert_eq!(index_set.map.core.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.map.core.len(), 1);  // Check the length of the core remains unchanged after retain2",
          "    assert!(index_set.map.core.contains_key(&1));  // Ensure key 1 is still present in core",
          "    index_set.retain2(|value| *value > 0);",
          "    assert_eq!(index_set.map.core.len(), 0);  // Check if retain2 removed all elements",
          "    index_set.retain2(|value| *value < 5);",
          "    assert_eq!(index_set.map.core.len(), 1);  // Ensure core retains elements less than 5",
          "    assert!(index_set.map.core.contains_key(&1));  // Check the specific value still present",
          "    index_set.retain2(|value| true);",
          "    assert_eq!(index_set.map.core.len(), 1);  // Retain all elements, check length remains the same",
          "    index_set.retain2(|value| value % 2 == 0);",
          "    assert_eq!(index_set.map.core.len(), 0);  // Check if retain2 function correctly filters out based on condition"
        ],
        "code": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| false);",
          "    assert_eq!(index_set.map.core.len(), 1);  // Check the length of the core remains unchanged after retain2",
          "    assert!(index_set.map.core.contains_key(&1));  // Ensure key 1 is still present in core",
          "    index_set.retain2(|value| *value > 0);",
          "    assert_eq!(index_set.map.core.len(), 0);  // Check if retain2 removed all elements",
          "    index_set.retain2(|value| *value < 5);",
          "    assert_eq!(index_set.map.core.len(), 1);  // Ensure core retains elements less than 5",
          "    assert!(index_set.map.core.contains_key(&1));  // Check the specific value still present",
          "    index_set.retain2(|value| true);",
          "    assert_eq!(index_set.map.core.len(), 1);  // Retain all elements, check length remains the same",
          "    index_set.retain2(|value| value % 2 == 0);",
          "    assert_eq!(index_set.map.core.len(), 0);  // Check if retain2 function correctly filters out based on condition",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ()), (2, ()), (3,())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|value| *value % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    assert!(index_set.get_full_mut2(&2).is_some());",
          "    assert!(index_set.get_full_mut2(&1).is_none());",
          "    assert!(index_set.get_full_mut2(&3).is_none());",
          "    assert_eq!(*index_set.get_index_mut2(0).unwrap(), 2);",
          "    assert!(index_set.get_index_mut2(1).is_none());"
        ],
        "code": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ()), (2, ()), (3,())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|value| *value % 2 == 0);",
          "    assert_eq!(index_set.map.core.len(), 1);",
          "    assert!(index_set.get_full_mut2(&2).is_some());",
          "    assert!(index_set.get_full_mut2(&1).is_none());",
          "    assert!(index_set.get_full_mut2(&3).is_none());",
          "    assert_eq!(*index_set.get_index_mut2(0).unwrap(), 2);",
          "    assert!(index_set.get_index_mut2(1).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ()), (2, ()), (3,())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.map.core.len(), 3);",
          "    assert_eq!(index_set.map.core.get(&1), Some(&()));",
          "    assert_eq!(index_set.map.core.get(&2), Some(&()));",
          "    assert_eq!(index_set.map.core.get(&3), Some(&()));",
          "    assert!(index_set.map.core.get(&4).is_none());"
        ],
        "code": [
          "{",
          "    let mut index_set: IndexSet<i32, std::collections::hash_map::RandomState> = IndexSet { map: IndexMap { core: IndexMapCore::from([(1, ()), (2, ()), (3,())]), hash_builder: std::collections::hash_map::RandomState::new() } };",
          "    index_set.retain2(|_value| false);",
          "    assert_eq!(index_set.map.core.len(), 3);",
          "    assert_eq!(index_set.map.core.get(&1), Some(&()));",
          "    assert_eq!(index_set.map.core.get(&2), Some(&()));",
          "    assert_eq!(index_set.map.core.get(&3), Some(&()));",
          "    assert!(index_set.map.core.get(&4).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]