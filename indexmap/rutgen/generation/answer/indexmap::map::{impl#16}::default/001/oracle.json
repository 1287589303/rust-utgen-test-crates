[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DefaultHasher;",
          "",
          "    impl Default for DefaultHasher {",
          "        fn default() -> Self {",
          "            DefaultHasher",
          "        }",
          "    }",
          "",
          "    let map: crate::IndexMap<i32, i32, DefaultHasher> = crate::IndexMap::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.capacity() >= 0);",
          "    assert_eq!(map.hasher().default(), DefaultHasher);"
        ],
        "code": [
          "{",
          "    struct DefaultHasher;",
          "",
          "    impl Default for DefaultHasher {",
          "        fn default() -> Self {",
          "            DefaultHasher",
          "        }",
          "    }",
          "",
          "    let map: crate::IndexMap<i32, i32, DefaultHasher> = crate::IndexMap::default();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.capacity() >= 0);",
          "    assert_eq!(map.hasher().default(), DefaultHasher);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"std\")]",
          "    let map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"std\")]",
          "    let map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]