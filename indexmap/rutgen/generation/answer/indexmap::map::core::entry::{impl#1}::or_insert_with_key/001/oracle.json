[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let key = TestKey;",
          "    let default_value = TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let ref_mut_map = RefMut::new(&mut entries);",
          "    ",
          "    let vacant_entry = VacantEntry {",
          "        map: ref_mut_map,",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let result = entry.or_insert_with_key(|_key: &TestKey| default_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut default_value);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), &key);",
          "    assert_eq!(entry.index(), 0);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let key = TestKey;",
          "    let default_value = TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let ref_mut_map = RefMut::new(&mut entries);",
          "    ",
          "    let vacant_entry = VacantEntry {",
          "        map: ref_mut_map,",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let result = entry.or_insert_with_key(|_key: &TestKey| default_value);",
          "    assert_eq!(result, &mut default_value);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.key(), &key);",
          "    assert_eq!(entry.index(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyKey;",
          "    struct TestValue;",
          "",
          "    let key = EmptyKey;",
          "    let default_value = TestValue;",
          "",
          "    let mut entries = Entries::<EmptyKey, TestValue>::new();",
          "    let ref_mut_map = RefMut::new(&mut entries);",
          "    ",
          "    let vacant_entry = VacantEntry {",
          "        map: ref_mut_map,",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let result = entry.or_insert_with_key(|_key: &EmptyKey| default_value);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, &mut TestValue));",
          "    assert_eq!(entries.len(), 1);",
          "    assert!(entries.contains_key(&key));",
          "    assert_eq!(entries.get(&key), Some(&default_value));",
          "    assert_eq!(result, entries.get_mut(&key).unwrap());"
        ],
        "code": [
          "{",
          "    struct EmptyKey;",
          "    struct TestValue;",
          "",
          "    let key = EmptyKey;",
          "    let default_value = TestValue;",
          "",
          "    let mut entries = Entries::<EmptyKey, TestValue>::new();",
          "    let ref_mut_map = RefMut::new(&mut entries);",
          "    ",
          "    let vacant_entry = VacantEntry {",
          "        map: ref_mut_map,",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let result = entry.or_insert_with_key(|_key: &EmptyKey| default_value);",
          "    assert!(matches!(result, &mut TestValue));",
          "    assert_eq!(entries.len(), 1);",
          "    assert!(entries.contains_key(&key));",
          "    assert_eq!(entries.get(&key), Some(&default_value));",
          "    assert_eq!(result, entries.get_mut(&key).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]