[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice::new());",
          "    let iter = (*slice).into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.is_empty());",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(slice.is_empty());"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice::new());",
          "    let iter = (*slice).into_iter();",
          "    assert!(iter.is_empty());",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(slice.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket::new(1)] });",
          "    let iter = (*slice).into_iter();",
          "}"
        ],
        "oracle": [
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket::new(1)] });",
          "    let iter = (*slice).into_iter();",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.len(), 1);",
          "    assert!(iter.clone().count() == 1);",
          "    assert!(slice.is_empty() == false);",
          "    assert!(slice.len() == 1);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket::new(1)] });",
          "    let iter = (*slice).into_iter();",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket::new(1)] });",
          "    let iter = (*slice).into_iter();",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.len(), 1);",
          "    assert!(iter.clone().count() == 1);",
          "    assert!(slice.is_empty() == false);",
          "    assert!(slice.len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket::new(1), Bucket::new(2), Bucket::new(3)] });",
          "    let iter = (*slice).into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 3);",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&2));",
          "    assert_eq!(iter.next(), Some(&3));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket::new(1), Bucket::new(2), Bucket::new(3)] });",
          "    let iter = (*slice).into_iter();",
          "    assert_eq!(iter.len(), 3);",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&2));",
          "    assert_eq!(iter.next(), Some(&3));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]