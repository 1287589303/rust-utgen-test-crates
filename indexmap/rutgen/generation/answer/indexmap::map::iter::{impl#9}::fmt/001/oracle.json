[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets: Vec<Bucket<i32, String>> = Vec::new();",
          "    let iter = Iter { iter: buckets.iter() };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = iter.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", iter), \"[]\");",
          "    assert!(formatter.write_str.called());",
          "    assert!(formatter.write_str.args.contains(&\"[]\"));"
        ],
        "code": [
          "{",
          "    let buckets: Vec<Bucket<i32, String>> = Vec::new();",
          "    let iter = Iter { iter: buckets.iter() };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = iter.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{:?}\", iter), \"[]\");",
          "    assert!(formatter.write_str.called());",
          "    assert!(formatter.write_str.args.contains(&\"[]\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![Bucket { hash: 0, key: 1, value: \"one\".to_string() }];",
          "    let iter = Iter { iter: buckets.iter() };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = iter.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"[1: one]\");",
          "    assert!(formatter.is_ok());",
          "    assert!(iteration_debug_str.contains(\"[1: one]\"));",
          "    assert!(iteration_debug_str.len() > 0);",
          "    assert!(formatter.lines().count() > 0);",
          "    assert_eq!(formatter.size_hint(), (1, Some(1)));"
        ],
        "code": [
          "{",
          "    let buckets = vec![Bucket { hash: 0, key: 1, value: \"one\".to_string() }];",
          "    let iter = Iter { iter: buckets.iter() };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = iter.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"[1: one]\");",
          "    assert!(formatter.is_ok());",
          "    assert!(iteration_debug_str.contains(\"[1: one]\"));",
          "    assert!(iteration_debug_str.len() > 0);",
          "    assert!(formatter.lines().count() > 0);",
          "    assert_eq!(formatter.size_hint(), (1, Some(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: 1, key: 1, value: \"one\".to_string() },",
          "        Bucket { hash: 2, key: 2, value: \"two\".to_string() },",
          "        Bucket { hash: 3, key: 3, value: \"three\".to_string() },",
          "    ];",
          "    let iter = Iter { iter: buckets.iter() };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = iter.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(formatter.buffer().contains(\"one\"));",
          "    assert!(formatter.buffer().contains(\"two\"));",
          "    assert!(formatter.buffer().contains(\"three\"));",
          "    assert!(formatter.buffer().contains(\"1\"));",
          "    assert!(formatter.buffer().contains(\"2\"));",
          "    assert!(formatter.buffer().contains(\"3\"));",
          "    assert!(formatter.buffer().contains(\"1: one\"));",
          "    assert!(formatter.buffer().contains(\"2: two\"));",
          "    assert!(formatter.buffer().contains(\"3: three\"));"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: 1, key: 1, value: \"one\".to_string() },",
          "        Bucket { hash: 2, key: 2, value: \"two\".to_string() },",
          "        Bucket { hash: 3, key: 3, value: \"three\".to_string() },",
          "    ];",
          "    let iter = Iter { iter: buckets.iter() };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = iter.fmt(&mut formatter);",
          "    assert!(formatter.buffer().contains(\"one\"));",
          "    assert!(formatter.buffer().contains(\"two\"));",
          "    assert!(formatter.buffer().contains(\"three\"));",
          "    assert!(formatter.buffer().contains(\"1\"));",
          "    assert!(formatter.buffer().contains(\"2\"));",
          "    assert!(formatter.buffer().contains(\"3\"));",
          "    assert!(formatter.buffer().contains(\"1: one\"));",
          "    assert!(formatter.buffer().contains(\"2: two\"));",
          "    assert!(formatter.buffer().contains(\"3: three\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]