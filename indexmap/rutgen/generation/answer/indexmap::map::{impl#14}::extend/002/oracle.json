[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.extend(vec![(1, 100)]);",
          "}"
        ],
        "oracle": [
          "    map.len() == 1;",
          "    map.keys().collect::<Vec<_>>() == vec![&1];",
          "    map.values().collect::<Vec<_>>() == vec![&100];",
          "    map.capacity() >= 10;",
          "    map.is_empty() == false;"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.extend(vec![(1, 100)]);",
          "    map.len() == 1;",
          "    map.keys().collect::<Vec<_>>() == vec![&1];",
          "    map.values().collect::<Vec<_>>() == vec![&100];",
          "    map.capacity() >= 10;",
          "    map.is_empty() == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.extend(vec![(1, 100), (2, 200), (3, 300)]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.capacity(), 10);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![&1, &2, &3]);",
          "    assert_eq!(map.values().collect::<Vec<_>>(), vec![&100, &200, &300]);",
          "    assert_eq!(map.iter().count(), 3);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.extend(vec![(1, 100), (2, 200), (3, 300)]);",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.capacity(), 10);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![&1, &2, &3]);",
          "    assert_eq!(map.values().collect::<Vec<_>>(), vec![&100, &200, &300]);",
          "    assert_eq!(map.iter().count(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.extend(vec![(1, 100), (2, 200), (1, 150), (3, 300)]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get(&1), Some(&150));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.contains_key(&4));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.extend(vec![(1, 100), (2, 200), (1, 150), (3, 300)]);",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get(&1), Some(&150));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.contains_key(&4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    let items: Vec<(i32, i32)> = (1..=1000).map(|i| (i, i * 10)).collect();",
          "    map.extend(items);",
          "}"
        ],
        "oracle": [
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.len(), 1000);",
          "    assert_eq!(map.get(&1), Some(&10));",
          "    assert_eq!(map.get(&500), Some(&5000));",
          "    assert_eq!(map.get(&1000), Some(&10000));",
          "    assert_eq!(map.keys().count(), 1000);",
          "    assert_eq!(map.values().count(), 1000);",
          "    // Ensure values are in the expected order",
          "    assert_eq!(map.values().collect::<Vec<_>>(), (1..=1000).map(|i| i * 10).collect::<Vec<_>>());",
          "    assert_eq!(map.iter().count(), 1000);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    let items: Vec<(i32, i32)> = (1..=1000).map(|i| (i, i * 10)).collect();",
          "    map.extend(items);",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.len(), 1000);",
          "    assert_eq!(map.get(&1), Some(&10));",
          "    assert_eq!(map.get(&500), Some(&5000));",
          "    assert_eq!(map.get(&1000), Some(&10000));",
          "    assert_eq!(map.keys().count(), 1000);",
          "    assert_eq!(map.values().count(), 1000);",
          "    // Ensure values are in the expected order",
          "    assert_eq!(map.values().collect::<Vec<_>>(), (1..=1000).map(|i| i * 10).collect::<Vec<_>>());",
          "    assert_eq!(map.iter().count(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]