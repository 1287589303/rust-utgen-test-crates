[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(1, \"one\".to_string());",
          "    ",
          "    let key: &i32 = &1;",
          "    let result = map.get_full_mut(key);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 0);",
          "    assert_eq!(key_ref, &1);",
          "    assert_eq!(value_ref, &mut \"one\".to_string());"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(1, \"one\".to_string());",
          "    ",
          "    let key: &i32 = &1;",
          "    let result = map.get_full_mut(key);",
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 0);",
          "    assert_eq!(key_ref, &1);",
          "    assert_eq!(value_ref, &mut \"one\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<String, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(\"two\".to_string(), 2);",
          "    ",
          "    let key: &String = &\"two\".to_string();",
          "    let result = map.get_full_mut(key);",
          "}"
        ],
        "oracle": [
          "    let expected_index = map.get_index_of(key).unwrap();",
          "    let expected_key = key;",
          "    let expected_value = map.get_mut(key).unwrap();",
          "    assert_eq!(result, Some((expected_index, expected_key, expected_value)));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<String, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(\"two\".to_string(), 2);",
          "    ",
          "    let key: &String = &\"two\".to_string();",
          "    let result = map.get_full_mut(key);",
          "    let expected_index = map.get_index_of(key).unwrap();",
          "    let expected_key = key;",
          "    let expected_value = map.get_mut(key).unwrap();",
          "    assert_eq!(result, Some((expected_index, expected_key, expected_value)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(3, 100);",
          "    map.insert(4, 200);",
          "    ",
          "    let key: &i32 = &3;",
          "    let result = map.get_full_mut(key);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 0);",
          "    assert_eq!(*key_ref, 3);",
          "    assert_eq!(*value_ref, 100);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(3, 100);",
          "    map.insert(4, 200);",
          "    ",
          "    let key: &i32 = &3;",
          "    let result = map.get_full_mut(key);",
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 0);",
          "    assert_eq!(*key_ref, 3);",
          "    assert_eq!(*value_ref, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]