[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "",
          "    impl Default for TestValue {",
          "        fn default() -> Self {",
          "            TestValue { data: 0 }",
          "        }",
          "    }",
          "",
          "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
          "    let key = TestKey;",
          "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(0));",
          "    let entry = Entry::Occupied(occupied_entry);",
          "    ",
          "    let value_ref = entry.or_default();",
          "}"
        ],
        "oracle": [
          "    let entry = Entry::Occupied(occupied_entry);",
          "    let value_ref = entry.or_default();",
          "    assert_eq!(value_ref.data, 0);  // Ensure default value is returned from Empty Entry",
          "    let value_ref_occupied = entry.or_default();",
          "    assert_eq!(value_ref_occupied.data, 0);  // Verify existing value is returned from Occupied Entry",
          "    value_ref_occupied.data = 42;  // Modify the value through mutable reference",
          "    assert_eq!(value_ref_occupied.data, 42);  // Check that change is reflected in the entry",
          "    assert_eq!(entry.or_default().data, 42);  // Ensure or_default returns updated value"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "",
          "    impl Default for TestValue {",
          "        fn default() -> Self {",
          "            TestValue { data: 0 }",
          "        }",
          "    }",
          "",
          "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
          "    let key = TestKey;",
          "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(0));",
          "    let entry = Entry::Occupied(occupied_entry);",
          "    ",
          "    let value_ref = entry.or_default();",
          "    let entry = Entry::Occupied(occupied_entry);",
          "    let value_ref = entry.or_default();",
          "    assert_eq!(value_ref.data, 0);  // Ensure default value is returned from Empty Entry",
          "    let value_ref_occupied = entry.or_default();",
          "    assert_eq!(value_ref_occupied.data, 0);  // Verify existing value is returned from Occupied Entry",
          "    value_ref_occupied.data = 42;  // Modify the value through mutable reference",
          "    assert_eq!(value_ref_occupied.data, 42);  // Check that change is reflected in the entry",
          "    assert_eq!(entry.or_default().data, 42);  // Ensure or_default returns updated value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "",
          "    impl Default for TestValue {",
          "        fn default() -> Self {",
          "            TestValue { data: 0 }",
          "        }",
          "    }",
          "",
          "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
          "    let key = TestKey;",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "    let entry = Entry::Vacant(vacant_entry);",
          "",
          "    let value_ref = entry.or_default();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(value_ref.data, 0);",
          "    assert_eq!(entries.len(), 1);",
          "    assert!(entries.contains_key(&key));",
          "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected Entry::Occupied\") };",
          "    assert_eq!(occupied_entry.get().data, 0);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "",
          "    impl Default for TestValue {",
          "        fn default() -> Self {",
          "            TestValue { data: 0 }",
          "        }",
          "    }",
          "",
          "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
          "    let key = TestKey;",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "    let entry = Entry::Vacant(vacant_entry);",
          "",
          "    let value_ref = entry.or_default();",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(value_ref.data, 0);",
          "    assert_eq!(entries.len(), 1);",
          "    assert!(entries.contains_key(&key));",
          "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected Entry::Occupied\") };",
          "    assert_eq!(occupied_entry.get().data, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]