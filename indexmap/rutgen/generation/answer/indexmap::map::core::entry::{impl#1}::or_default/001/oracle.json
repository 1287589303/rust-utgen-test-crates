[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Default for TestValue {",
          "        fn default() -> Self {",
          "            TestValue { data: 0 }",
          "        }",
          "    }",
          "",
          "    let mut entries = hashbrown::HashMap::new();",
          "    let key = TestKey;",
          "    let hash_value = HashValue::default(); // Assuming HashValue has a default implementation",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: hash_value,",
          "        key,",
          "    };",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    let _value_ref: &mut TestValue = entry.or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_value_ref.data, 0);",
          "    assert!(entries.contains_key(&key));",
          "    assert_eq!(entries.get(&key).unwrap().data, 0);",
          "    assert_eq!(entry.index(), entries.len() - 1);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Default for TestValue {",
          "        fn default() -> Self {",
          "            TestValue { data: 0 }",
          "        }",
          "    }",
          "",
          "    let mut entries = hashbrown::HashMap::new();",
          "    let key = TestKey;",
          "    let hash_value = HashValue::default(); // Assuming HashValue has a default implementation",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: hash_value,",
          "        key,",
          "    };",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    let _value_ref: &mut TestValue = entry.or_default();",
          "    assert_eq!(_value_ref.data, 0);",
          "    assert!(entries.contains_key(&key));",
          "    assert_eq!(entries.get(&key).unwrap().data, 0);",
          "    assert_eq!(entry.index(), entries.len() - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]