[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    let result = map.last_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    map.insert(1, 1.1);",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (&1, &mut 1.1));",
          "    ",
          "    map.insert(2, 2.2);",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (&2, &mut 2.2));",
          "    ",
          "    let (_, value) = result.unwrap();",
          "    *value = 3.3;",
          "    assert_eq!(map.get(&2), Some(&3.3));",
          "    ",
          "    map.pop();",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (&1, &mut 1.1));",
          "    ",
          "    map.pop();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, None);",
          "    ",
          "    map.insert(1, 1.1);",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (&1, &mut 1.1));",
          "    ",
          "    map.insert(2, 2.2);",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (&2, &mut 2.2));",
          "    ",
          "    let (_, value) = result.unwrap();",
          "    *value = 3.3;",
          "    assert_eq!(map.get(&2), Some(&3.3));",
          "    ",
          "    map.pop();",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), (&1, &mut 1.1));",
          "    ",
          "    map.pop();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    map.insert(1, 1.0);",
          "    let result = map.last_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&1, &mut 1.0)));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    map.insert(1, 1.0);",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&1, &mut 1.0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    map.insert(1, 1.0);",
          "    map.insert(2, 2.0);",
          "    let result = map.last_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&2, &mut 2.0)));",
          "    map.last_mut();",
          "    assert_eq!(result, Some((&2, &mut 2.0)));",
          "    map.insert(3, 3.0);",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&3, &mut 3.0)));",
          "    map.pop();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&2, &mut 2.0)));",
          "    map.shift_remove_index(1);",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&1, &mut 1.0)));",
          "    map.clear();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    map.insert(1, 1.0);",
          "    map.insert(2, 2.0);",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&2, &mut 2.0)));",
          "    map.last_mut();",
          "    assert_eq!(result, Some((&2, &mut 2.0)));",
          "    map.insert(3, 3.0);",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&3, &mut 3.0)));",
          "    map.pop();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&2, &mut 2.0)));",
          "    map.shift_remove_index(1);",
          "    let result = map.last_mut();",
          "    assert_eq!(result, Some((&1, &mut 1.0)));",
          "    map.clear();",
          "    let result = map.last_mut();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    map.insert(1, 1.0);",
          "    map.insert(2, 2.0);",
          "    let first_access = map.last_mut();",
          "    let second_access = map.last_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first_access, Some((&2, &mut 2.0)));",
          "    assert_eq!(second_access, Some((&2, &mut 2.0)));",
          "    first_access.unwrap().1 += 1.0;",
          "    assert_eq!(map.get(&2), Some(&3.0));",
          "    assert_eq!(map.last_mut(), Some((&2, &mut 3.0)));",
          "    map.pop();",
          "    assert_eq!(map.last_mut(), Some((&1, &mut 1.0)));",
          "    map.clear();",
          "    assert_eq!(map.last_mut(), None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    map.insert(1, 1.0);",
          "    map.insert(2, 2.0);",
          "    let first_access = map.last_mut();",
          "    let second_access = map.last_mut();",
          "    assert_eq!(first_access, Some((&2, &mut 2.0)));",
          "    assert_eq!(second_access, Some((&2, &mut 2.0)));",
          "    first_access.unwrap().1 += 1.0;",
          "    assert_eq!(map.get(&2), Some(&3.0));",
          "    assert_eq!(map.last_mut(), Some((&2, &mut 3.0)));",
          "    map.pop();",
          "    assert_eq!(map.last_mut(), Some((&1, &mut 1.0)));",
          "    map.clear();",
          "    assert_eq!(map.last_mut(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    for i in 0..10000 {",
          "        map.insert(i, (i as f32) * 1.0);",
          "    }",
          "    let result = map.last_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 9999);",
          "    assert_eq!(*value, 9999.0);",
          "    assert!(map.last_mut().is_some());",
          "    assert_eq!(map.last_mut().unwrap().0, &9999);",
          "    *value += 1.0;",
          "    assert_eq!(*value, 10000.0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, f32, RandomState> = IndexMap::new();",
          "    for i in 0..10000 {",
          "        map.insert(i, (i as f32) * 1.0);",
          "    }",
          "    let result = map.last_mut();",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 9999);",
          "    assert_eq!(*value, 9999.0);",
          "    assert!(map.last_mut().is_some());",
          "    assert_eq!(map.last_mut().unwrap().0, &9999);",
          "    *value += 1.0;",
          "    assert_eq!(*value, 10000.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValueStruct {",
          "        val: f64,",
          "    }",
          "    let mut map: IndexMap<String, ValueStruct, RandomState> = IndexMap::new();",
          "    map.insert(\"key1\".to_string(), ValueStruct { val: 1.0 });",
          "    map.insert(\"key2\".to_string(), ValueStruct { val: 2.0 });",
          "    let result = map.last_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().0, &\"key2\".to_string());",
          "    assert_eq!(result.unwrap().1.val, 2.0);",
          "    let (_, value) = result.unwrap();",
          "    value.val = 3.0;",
          "    assert_eq!(map.last_mut().unwrap().1.val, 3.0);",
          "    assert_eq!(map.last().unwrap().1.val, 3.0);"
        ],
        "code": [
          "{",
          "    struct ValueStruct {",
          "        val: f64,",
          "    }",
          "    let mut map: IndexMap<String, ValueStruct, RandomState> = IndexMap::new();",
          "    map.insert(\"key1\".to_string(), ValueStruct { val: 1.0 });",
          "    map.insert(\"key2\".to_string(), ValueStruct { val: 2.0 });",
          "    let result = map.last_mut();",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().0, &\"key2\".to_string());",
          "    assert_eq!(result.unwrap().1.val, 2.0);",
          "    let (_, value) = result.unwrap();",
          "    value.val = 3.0;",
          "    assert_eq!(map.last_mut().unwrap().1.val, 3.0);",
          "    assert_eq!(map.last().unwrap().1.val, 3.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]