[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut empty_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    empty_set.reverse();",
          "}"
        ],
        "oracle": [
          "    assert!(empty_set.as_slice().is_empty());",
          "    ",
          "    let mut single_element_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    single_element_set.insert(42);",
          "    single_element_set.reverse();",
          "    assert_eq!(single_element_set.first(), Some(&42));",
          "    assert_eq!(single_element_set.last(), Some(&42));",
          "    ",
          "    let mut multiple_elements_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    multiple_elements_set.insert(1);",
          "    multiple_elements_set.insert(2);",
          "    multiple_elements_set.insert(3);",
          "    multiple_elements_set.reverse();",
          "    assert_eq!(multiple_elements_set.as_slice(), &[3, 2, 1]);",
          "    ",
          "    let mut ordered_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    ordered_set.insert(5);",
          "    ordered_set.insert(10);",
          "    ordered_set.insert(15);",
          "    ordered_set.reverse();",
          "    assert_eq!(ordered_set.last(), Some(&5));",
          "    assert_eq!(ordered_set.first(), Some(&15));"
        ],
        "code": [
          "{",
          "    let mut empty_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    empty_set.reverse();",
          "    assert!(empty_set.as_slice().is_empty());",
          "    ",
          "    let mut single_element_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    single_element_set.insert(42);",
          "    single_element_set.reverse();",
          "    assert_eq!(single_element_set.first(), Some(&42));",
          "    assert_eq!(single_element_set.last(), Some(&42));",
          "    ",
          "    let mut multiple_elements_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    multiple_elements_set.insert(1);",
          "    multiple_elements_set.insert(2);",
          "    multiple_elements_set.insert(3);",
          "    multiple_elements_set.reverse();",
          "    assert_eq!(multiple_elements_set.as_slice(), &[3, 2, 1]);",
          "    ",
          "    let mut ordered_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    ordered_set.insert(5);",
          "    ordered_set.insert(10);",
          "    ordered_set.insert(15);",
          "    ordered_set.reverse();",
          "    assert_eq!(ordered_set.last(), Some(&5));",
          "    assert_eq!(ordered_set.first(), Some(&15));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut single_element_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    // Assuming a method to add elements exists, e.g., insert",
          "    single_element_set.insert(1);",
          "    single_element_set.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(single_element_set.first(), Some(&1));",
          "    assert_eq!(single_element_set.last(), Some(&1));",
          "    assert_eq!(single_element_set.len(), 1);",
          "    assert_eq!(single_element_set.get_index(0), Some(&1));",
          "    assert_eq!(single_element_set.as_slice().len(), 1);",
          "    assert!(single_element_set.get_range(0..1).is_some());",
          "    assert!(single_element_set.get_range(1..2).is_none());",
          "    assert!(single_element_set.pop().is_some());",
          "    assert!(single_element_set.first().is_none());"
        ],
        "code": [
          "{",
          "    let mut single_element_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    // Assuming a method to add elements exists, e.g., insert",
          "    single_element_set.insert(1);",
          "    single_element_set.reverse();",
          "    assert_eq!(single_element_set.first(), Some(&1));",
          "    assert_eq!(single_element_set.last(), Some(&1));",
          "    assert_eq!(single_element_set.len(), 1);",
          "    assert_eq!(single_element_set.get_index(0), Some(&1));",
          "    assert_eq!(single_element_set.as_slice().len(), 1);",
          "    assert!(single_element_set.get_range(0..1).is_some());",
          "    assert!(single_element_set.get_range(1..2).is_none());",
          "    assert!(single_element_set.pop().is_some());",
          "    assert!(single_element_set.first().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut multiple_elements_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    // Assuming a method to add elements exists, e.g., insert",
          "    multiple_elements_set.insert(1);",
          "    multiple_elements_set.insert(2);",
          "    multiple_elements_set.insert(3);",
          "    multiple_elements_set.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(multiple_elements_set.first(), Some(&3));",
          "    assert_eq!(multiple_elements_set.last(), Some(&1));",
          "    assert_eq!(multiple_elements_set.get_index(0), Some(&3));",
          "    assert_eq!(multiple_elements_set.get_index(1), Some(&2));",
          "    assert_eq!(multiple_elements_set.get_index(2), Some(&1));",
          "    assert!(multiple_elements_set.map.is_reversed());"
        ],
        "code": [
          "{",
          "    let mut multiple_elements_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    // Assuming a method to add elements exists, e.g., insert",
          "    multiple_elements_set.insert(1);",
          "    multiple_elements_set.insert(2);",
          "    multiple_elements_set.insert(3);",
          "    multiple_elements_set.reverse();",
          "    assert_eq!(multiple_elements_set.first(), Some(&3));",
          "    assert_eq!(multiple_elements_set.last(), Some(&1));",
          "    assert_eq!(multiple_elements_set.get_index(0), Some(&3));",
          "    assert_eq!(multiple_elements_set.get_index(1), Some(&2));",
          "    assert_eq!(multiple_elements_set.get_index(2), Some(&1));",
          "    assert!(multiple_elements_set.map.is_reversed());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut large_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    for i in 0..1000 {",
          "        large_set.insert(i);",
          "    }",
          "    large_set.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(large_set.first(), Some(&999));",
          "    assert_eq!(large_set.last(), Some(&0));",
          "    assert_eq!(large_set.get_index(0), Some(&999));",
          "    assert_eq!(large_set.get_index(999), Some(&0));",
          "    for i in 0..1000 {",
          "    assert_eq!(large_set.get_index(i), Some(&(999 - i)));",
          "    }",
          "    assert_eq!(large_set.as_slice().len(), 1000);"
        ],
        "code": [
          "{",
          "    let mut large_set: super::IndexSet<i32, ()> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: () } };",
          "    for i in 0..1000 {",
          "        large_set.insert(i);",
          "    }",
          "    large_set.reverse();",
          "    assert_eq!(large_set.first(), Some(&999));",
          "    assert_eq!(large_set.last(), Some(&0));",
          "    assert_eq!(large_set.get_index(0), Some(&999));",
          "    assert_eq!(large_set.get_index(999), Some(&0));",
          "    for i in 0..1000 {",
          "    assert_eq!(large_set.get_index(i), Some(&(999 - i)));",
          "    }",
          "    assert_eq!(large_set.as_slice().len(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]