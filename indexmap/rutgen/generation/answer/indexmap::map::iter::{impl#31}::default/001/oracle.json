[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let default_iter: IntoIter<i32, i32> = IntoIter::default();",
          "    let _ = default_iter.iter.as_slice();",
          "}"
        ],
        "oracle": [
          "    let default_iter: IntoIter<i32, i32> = IntoIter::default();",
          "    assert_eq!(default_iter.iter.len(), 0);",
          "    assert!(default_iter.iter.is_empty());",
          "    let iter_slice: &[Bucket<i32, i32>] = default_iter.iter.as_slice();",
          "    assert_eq!(iter_slice.len(), 0);"
        ],
        "code": [
          "{",
          "    let default_iter: IntoIter<i32, i32> = IntoIter::default();",
          "    let _ = default_iter.iter.as_slice();",
          "    let default_iter: IntoIter<i32, i32> = IntoIter::default();",
          "    assert_eq!(default_iter.iter.len(), 0);",
          "    assert!(default_iter.iter.is_empty());",
          "    let iter_slice: &[Bucket<i32, i32>] = default_iter.iter.as_slice();",
          "    assert_eq!(iter_slice.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let default_iter: IntoIter<String, String> = IntoIter::default();",
          "    let _ = default_iter.iter.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(default_iter.iter.len(), 0);",
          "    assert!(default_iter.iter.is_fused());",
          "    assert_eq!(default_iter.iter.as_slice(), &[]);",
          "    assert!(default_iter.iter.next().is_none());",
          "    assert!(default_iter.iter.as_slice().is_empty());",
          "    assert_eq!(default_iter.iter.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let default_iter: IntoIter<String, String> = IntoIter::default();",
          "    let _ = default_iter.iter.as_slice();",
          "    assert_eq!(default_iter.iter.len(), 0);",
          "    assert!(default_iter.iter.is_fused());",
          "    assert_eq!(default_iter.iter.as_slice(), &[]);",
          "    assert!(default_iter.iter.next().is_none());",
          "    assert!(default_iter.iter.as_slice().is_empty());",
          "    assert_eq!(default_iter.iter.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]