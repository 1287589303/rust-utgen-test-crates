[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_array: Box<[Bucket<i32, i32>]> = Box::from([]);",
          "    let slice = Slice::from_boxed(empty_array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.entries.len(), 0);",
          "    assert!(slice.entries.is_empty());",
          "    assert_eq!(slice.entries as *const _, std::ptr::null());",
          "    assert!(Box::from(slice).is_empty());"
        ],
        "code": [
          "{",
          "    let empty_array: Box<[Bucket<i32, i32>]> = Box::from([]);",
          "    let slice = Slice::from_boxed(empty_array);",
          "    assert_eq!(slice.entries.len(), 0);",
          "    assert!(slice.entries.is_empty());",
          "    assert_eq!(slice.entries as *const _, std::ptr::null());",
          "    assert!(Box::from(slice).is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let single_bucket: Box<[Bucket<i32, i32>]> = Box::from([Bucket { hash: 0, key: 1, value: 2 }]);",
          "    let slice = Slice::from_boxed(single_bucket);",
          "}"
        ],
        "oracle": [
          "    assert!(slice.entries.len() == 1);",
          "    assert_eq!(slice.entries[0].hash, 0);",
          "    assert_eq!(slice.entries[0].key, 1);",
          "    assert_eq!(slice.entries[0].value, 2);"
        ],
        "code": [
          "{",
          "    let single_bucket: Box<[Bucket<i32, i32>]> = Box::from([Bucket { hash: 0, key: 1, value: 2 }]);",
          "    let slice = Slice::from_boxed(single_bucket);",
          "    assert!(slice.entries.len() == 1);",
          "    assert_eq!(slice.entries[0].hash, 0);",
          "    assert_eq!(slice.entries[0].key, 1);",
          "    assert_eq!(slice.entries[0].value, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let multiple_buckets: Box<[Bucket<i32, i32>]> = Box::from([",
          "        Bucket { hash: 0, key: 1, value: 2 },",
          "        Bucket { hash: 1, key: 3, value: 4 },",
          "        Bucket { hash: 2, key: 5, value: 6 },",
          "    ]);",
          "    let slice = Slice::from_boxed(multiple_buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(slice.entries.len() == 3);",
          "    assert_eq!(slice.entries[0].hash, 0);",
          "    assert_eq!(slice.entries[0].key, 1);",
          "    assert_eq!(slice.entries[0].value, 2);",
          "    assert_eq!(slice.entries[1].hash, 1);",
          "    assert_eq!(slice.entries[1].key, 3);",
          "    assert_eq!(slice.entries[1].value, 4);",
          "    assert_eq!(slice.entries[2].hash, 2);",
          "    assert_eq!(slice.entries[2].key, 5);",
          "    assert_eq!(slice.entries[2].value, 6);"
        ],
        "code": [
          "{",
          "    let multiple_buckets: Box<[Bucket<i32, i32>]> = Box::from([",
          "        Bucket { hash: 0, key: 1, value: 2 },",
          "        Bucket { hash: 1, key: 3, value: 4 },",
          "        Bucket { hash: 2, key: 5, value: 6 },",
          "    ]);",
          "    let slice = Slice::from_boxed(multiple_buckets);",
          "    assert!(slice.entries.len() == 3);",
          "    assert_eq!(slice.entries[0].hash, 0);",
          "    assert_eq!(slice.entries[0].key, 1);",
          "    assert_eq!(slice.entries[0].value, 2);",
          "    assert_eq!(slice.entries[1].hash, 1);",
          "    assert_eq!(slice.entries[1].key, 3);",
          "    assert_eq!(slice.entries[1].value, 4);",
          "    assert_eq!(slice.entries[2].hash, 2);",
          "    assert_eq!(slice.entries[2].key, 5);",
          "    assert_eq!(slice.entries[2].value, 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]