[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set: IndexSet<(), ()> = IndexSet::default();",
          "}"
        ],
        "oracle": [
          "    let expected_index_set = IndexSet { map: IndexMap::default() };",
          "    assert_eq!(index_set, expected_index_set);"
        ],
        "code": [
          "{",
          "    let index_set: IndexSet<(), ()> = IndexSet::default();",
          "    let expected_index_set = IndexSet { map: IndexMap::default() };",
          "    assert_eq!(index_set, expected_index_set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index_set: IndexSet<(), ()> = IndexSet::default();",
          "    let map = index_set.map; // This should be an empty IndexMap",
          "}"
        ],
        "oracle": [
          "    let index_set: IndexSet<(), ()> = IndexSet::default();",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map, IndexMap::default());",
          "    assert_eq!(index_set.map.hash_builder, Default::default());"
        ],
        "code": [
          "{",
          "    let index_set: IndexSet<(), ()> = IndexSet::default();",
          "    let map = index_set.map; // This should be an empty IndexMap",
          "    let index_set: IndexSet<(), ()> = IndexSet::default();",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map, IndexMap::default());",
          "    assert_eq!(index_set.map.hash_builder, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]