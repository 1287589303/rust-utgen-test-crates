[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(..);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.get(&1).is_some());",
          "    assert!(map.get(&2).is_some());",
          "    assert!(map.get(&3).is_some());",
          "    ",
          "    let _drain = map.drain(..);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    ",
          "    let drained_vec: Vec<(i32, i32)> = _drain.collect();",
          "    assert_eq!(drained_vec, vec![(1, 10), (2, 20), (3, 30)]);",
          "    ",
          "    let result = std::panic::catch_unwind(|| { map.drain(5..) });",
          "    assert!(result.is_err());",
          "    ",
          "    let result = std::panic::catch_unwind(|| { map.drain(2..1) });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(..);",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.get(&1).is_some());",
          "    assert!(map.get(&2).is_some());",
          "    assert!(map.get(&3).is_some());",
          "    ",
          "    let _drain = map.drain(..);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    ",
          "    let drained_vec: Vec<(i32, i32)> = _drain.collect();",
          "    assert_eq!(drained_vec, vec![(1, 10), (2, 20), (3, 30)]);",
          "    ",
          "    let result = std::panic::catch_unwind(|| { map.drain(5..) });",
          "    assert!(result.is_err());",
          "    ",
          "    let result = std::panic::catch_unwind(|| { map.drain(2..1) });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(0, RandomState::new());",
          "    ",
          "    let _drain = map.drain(..);",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(0, RandomState::new());",
          "    let _drain_empty = map.drain(..);",
          "    assert!(map.is_empty());",
          "    assert_eq!(_drain_empty.as_slice().len(), 0);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    let _drain_non_empty = map.drain(..);",
          "    assert_eq!(_drain_non_empty.as_slice(), [(1, 10), (2, 20)].as_slice());",
          "    assert!(map.is_empty());",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    let _drain_partial = map.drain(0..1);",
          "    assert_eq!(_drain_partial.as_slice(), [(1, 10)].as_slice());",
          "    assert_eq!(map.len(), 1);",
          "    let _drain_out_of_bounds = std::panic::catch_unwind(|| { map.drain(5..10); });",
          "    assert!(_drain_out_of_bounds.is_err());",
          "    let _drain_invalid_range = std::panic::catch_unwind(|| { map.drain(1..0); });",
          "    assert!(_drain_invalid_range.is_err());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(0, RandomState::new());",
          "    ",
          "    let _drain = map.drain(..);",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(0, RandomState::new());",
          "    let _drain_empty = map.drain(..);",
          "    assert!(map.is_empty());",
          "    assert_eq!(_drain_empty.as_slice().len(), 0);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    let _drain_non_empty = map.drain(..);",
          "    assert_eq!(_drain_non_empty.as_slice(), [(1, 10), (2, 20)].as_slice());",
          "    assert!(map.is_empty());",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    let _drain_partial = map.drain(0..1);",
          "    assert_eq!(_drain_partial.as_slice(), [(1, 10)].as_slice());",
          "    assert_eq!(map.len(), 1);",
          "    let _drain_out_of_bounds = std::panic::catch_unwind(|| { map.drain(5..10); });",
          "    assert!(_drain_out_of_bounds.is_err());",
          "    let _drain_invalid_range = std::panic::catch_unwind(|| { map.drain(1..0); });",
          "    assert!(_drain_invalid_range.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(1, RandomState::new());",
          "    map.insert(1, 10);",
          "    ",
          "    let _drain = map.drain(0..0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(&1), Some(&10));",
          "    assert_eq!(_drain.as_slice().len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.capacity() >= 1);",
          "    assert_eq!(_drain.iter.len(), 0);",
          "    assert!(map.keys().len() == 1);",
          "    assert!(map.values().len() == 1);",
          "    assert!(map.drain(..).is_err());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(1, RandomState::new());",
          "    map.insert(1, 10);",
          "    ",
          "    let _drain = map.drain(0..0);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(&1), Some(&10));",
          "    assert_eq!(_drain.as_slice().len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.capacity() >= 1);",
          "    assert_eq!(_drain.iter.len(), 0);",
          "    assert!(map.keys().len() == 1);",
          "    assert!(map.values().len() == 1);",
          "    assert!(map.drain(..).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(1, RandomState::new());",
          "    map.insert(1, 10);",
          "    ",
          "    let _drain = map.drain(0..1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.keys().collect::<Vec<_>>().contains(&&1));",
          "    assert!(map.values().collect::<Vec<_>>().contains(&&10));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.drain(0..1).as_slice().len() == 1);",
          "    assert!(map.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(1, RandomState::new());",
          "    map.insert(1, 10);",
          "    ",
          "    let _drain = map.drain(0..1);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert!(map.keys().collect::<Vec<_>>().contains(&&1));",
          "    assert!(map.values().collect::<Vec<_>>().contains(&&10));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.drain(0..1).as_slice().len() == 1);",
          "    assert!(map.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(0..3);",
          "}"
        ],
        "oracle": [
          "    map.len() == 3",
          "    map.is_empty() == false",
          "    map.drain(0..3).as_slice().len() == 3",
          "    map.drain(0..3).as_slice()[0] == (1, 10)",
          "    map.drain(0..3).as_slice()[1] == (2, 20)",
          "    map.drain(0..3).as_slice()[2] == (3, 30)",
          "    map.len() == 0",
          "    map.is_empty() == true",
          "    map.drain(0..3).as_slice() == []",
          "    map.drain(..).as_slice() == []",
          "    panic_on_invalid_range(start > end)",
          "    panic_on_invalid_range(end > map.len())"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(0..3);",
          "    map.len() == 3",
          "    map.is_empty() == false",
          "    map.drain(0..3).as_slice().len() == 3",
          "    map.drain(0..3).as_slice()[0] == (1, 10)",
          "    map.drain(0..3).as_slice()[1] == (2, 20)",
          "    map.drain(0..3).as_slice()[2] == (3, 30)",
          "    map.len() == 0",
          "    map.is_empty() == true",
          "    map.drain(0..3).as_slice() == []",
          "    map.drain(..).as_slice() == []",
          "    panic_on_invalid_range(start > end)",
          "    panic_on_invalid_range(end > map.len())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(2..1);",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    assert!(map.len() == 3);",
          "    let result = std::panic::catch_unwind(|| { map.drain(2..1); });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(2..1);",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    assert!(map.len() == 3);",
          "    let result = std::panic::catch_unwind(|| { map.drain(2..1); });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(0..4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert_eq!(map.values().collect::<Vec<_>>(), vec![10, 20, 30]);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() >= 3);",
          "    assert!(map.try_reserve(1).is_ok());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(0..4);",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert_eq!(map.values().collect::<Vec<_>>(), vec![10, 20, 30]);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() >= 3);",
          "    assert!(map.try_reserve(1).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(3..3);",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    let _drain = map.drain(3..3); // should panic due to invalid range (start == end)",
          "    let _drain = map.drain(4..5); // should panic due to end out of bounds",
          "    let _drain = map.drain(1..4); // valid range, should not panic",
          "    let _drain = map.drain(..); // valid range to drain all elements, should not panic",
          "    let _drain = map.drain(..0); // valid range, draining empty range, should not panic",
          "    let _drain = map.drain(..=3); // should panic due to end out of bounds",
          "    let _drain = map.drain(0..=2); // valid range, should not panic"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    let _drain = map.drain(3..3);",
          "    let mut map = IndexMap::<i32, i32, RandomState>::with_capacity_and_hasher(3, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    let _drain = map.drain(3..3); // should panic due to invalid range (start == end)",
          "    let _drain = map.drain(4..5); // should panic due to end out of bounds",
          "    let _drain = map.drain(1..4); // valid range, should not panic",
          "    let _drain = map.drain(..); // valid range to drain all elements, should not panic",
          "    let _drain = map.drain(..0); // valid range, draining empty range, should not panic",
          "    let _drain = map.drain(..=3); // should panic due to end out of bounds",
          "    let _drain = map.drain(0..=2); // valid range, should not panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]