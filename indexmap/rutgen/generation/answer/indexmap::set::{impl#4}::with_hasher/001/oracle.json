[
  {
    "uses": [
      "use std::collections::hash_map::RandomState;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 0);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.is_empty());",
          "    assert_eq!(index_set.hasher(), &hash_builder);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "    assert_eq!(index_set.capacity(), 0);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.is_empty());",
          "    assert_eq!(index_set.hasher(), &hash_builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 0);",
          "    assert!(index_set.is_empty());",
          "    assert_eq!(index_set.hasher(), &hash_builder);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.iter().count() == 0);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "    assert_eq!(index_set.capacity(), 0);",
          "    assert!(index_set.is_empty());",
          "    assert_eq!(index_set.hasher(), &hash_builder);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.iter().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.map.hash_builder, hash_builder);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "    assert_eq!(index_set.map.hash_builder, hash_builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "}"
        ],
        "oracle": [
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "    assert_eq!(index_set.map.hash_builder, hash_builder);",
          "    assert!(index_set.is_empty());",
          "    assert_eq!(index_set.len(), 0);",
          "    assert_eq!(index_set.capacity(), 0);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "    let hash_builder = RandomState::new();",
          "    let index_set: IndexSet<(), RandomState> = IndexSet::with_hasher(hash_builder);",
          "    assert_eq!(index_set.map.hash_builder, hash_builder);",
          "    assert!(index_set.is_empty());",
          "    assert_eq!(index_set.len(), 0);",
          "    assert_eq!(index_set.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]