[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    map.entries.push(Bucket { key: 1, value: \"one\".to_string() });",
          "    map.entries.push(Bucket { key: 2, value: \"two\".to_string() });",
          "    map.indices.insert(0, 0);",
          "    map.indices.insert(1, 1);",
          "    map.indices.insert(2, 2);",
          "    ",
          "    let result = map.shift_remove_index(1);",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    map.entries.push(Bucket { key: 1, value: \"one\".to_string() });",
          "    map.entries.push(Bucket { key: 2, value: \"two\".to_string() });",
          "    map.indices.insert(0, 0);",
          "    map.indices.insert(1, 1);",
          "    map.indices.insert(2, 2);",
          "    let result = map.shift_remove_index(1);",
          "    assert_eq!(result, Some((1, \"one\".to_string())));",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries.get(1).unwrap().key, 2);",
          "    assert_eq!(map.entries.get(0).unwrap().key, 0);",
          "    assert!(map.indices.get(&1).is_none());",
          "    assert_eq!(map.indices.get(&0), Some(&0));",
          "    assert_eq!(map.indices.get(&2), Some(&1));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    map.entries.push(Bucket { key: 1, value: \"one\".to_string() });",
          "    map.entries.push(Bucket { key: 2, value: \"two\".to_string() });",
          "    map.indices.insert(0, 0);",
          "    map.indices.insert(1, 1);",
          "    map.indices.insert(2, 2);",
          "    ",
          "    let result = map.shift_remove_index(1);",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    map.entries.push(Bucket { key: 1, value: \"one\".to_string() });",
          "    map.entries.push(Bucket { key: 2, value: \"two\".to_string() });",
          "    map.indices.insert(0, 0);",
          "    map.indices.insert(1, 1);",
          "    map.indices.insert(2, 2);",
          "    let result = map.shift_remove_index(1);",
          "    assert_eq!(result, Some((1, \"one\".to_string())));",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries.get(1).unwrap().key, 2);",
          "    assert_eq!(map.entries.get(0).unwrap().key, 0);",
          "    assert!(map.indices.get(&1).is_none());",
          "    assert_eq!(map.indices.get(&0), Some(&0));",
          "    assert_eq!(map.indices.get(&2), Some(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    map.entries.push(Bucket { key: 1, value: \"one\".to_string() });",
          "    ",
          "    let result = map.shift_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, \"zero\".to_string())));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, \"one\".to_string());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get_index_of(0, &0).is_none());",
          "    assert_eq!(map.get_index_of(1, &1), Some(0));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    map.entries.push(Bucket { key: 1, value: \"one\".to_string() });",
          "    ",
          "    let result = map.shift_remove_index(0);",
          "    assert_eq!(result, Some((0, \"zero\".to_string())));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, \"one\".to_string());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get_index_of(0, &0).is_none());",
          "    assert_eq!(map.get_index_of(1, &1), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    ",
          "    let result = map.shift_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, \"zero\".to_string())));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(map.indices.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    ",
          "    let result = map.shift_remove_index(0);",
          "    assert_eq!(result, Some((0, \"zero\".to_string())));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(map.indices.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    ",
          "    let result = map.shift_remove_index(1);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    let result = map.shift_remove_index(1);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    ",
          "    let result = map.shift_remove_index(1);",
          "    let map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    map.entries.push(Bucket { key: 0, value: \"zero\".to_string() });",
          "    let result = map.shift_remove_index(1);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]