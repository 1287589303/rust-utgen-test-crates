[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    entries.push(Bucket { hash: HashValue::from(2), key: 30, value: 40 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0; // Valid index within range",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "}"
        ],
        "oracle": [
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    entries.push(Bucket { hash: HashValue::from(2), key: 30, value: 40 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0;",
          "    ",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "    assert_eq!(*key_mut, 10);"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    entries.push(Bucket { hash: HashValue::from(2), key: 30, value: 40 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0; // Valid index within range",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    entries.push(Bucket { hash: HashValue::from(2), key: 30, value: 40 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0;",
          "    ",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "    assert_eq!(*key_mut, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 1; // Invalid index out of range",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "}"
        ],
        "oracle": [
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 1; // Invalid index out of range",
          "    let indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 1; // Invalid index out of range",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 1; // Invalid index out of range",
          "    let indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    entries.push(Bucket { hash: HashValue::from(2), key: 30, value: 40 });",
          "    entries.push(Bucket { hash: HashValue::from(3), key: 50, value: 60 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 2; // Valid index",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*key_mut, 50);",
          "    assert_eq!(indexed_entry.index(), index);",
          "    assert_eq!(map.entries[index].key, 50);",
          "    *key_mut = 100;",
          "    assert_eq!(map.entries[index].key, 100);"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    entries.push(Bucket { hash: HashValue::from(1), key: 10, value: 20 });",
          "    entries.push(Bucket { hash: HashValue::from(2), key: 30, value: 40 });",
          "    entries.push(Bucket { hash: HashValue::from(3), key: 50, value: 60 });",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 2; // Valid index",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "    assert_eq!(*key_mut, 50);",
          "    assert_eq!(indexed_entry.index(), index);",
          "    assert_eq!(map.entries[index].key, 50);",
          "    *key_mut = 100;",
          "    assert_eq!(map.entries[index].key, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0; // Index is invalid because entries are empty",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "}"
        ],
        "oracle": [
          "    let mut entries = Entries::<i32, i32>::new();",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0; // Index is invalid because entries are empty",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    assert_eq!(indexed_entry.key_mut(), &mut indexed_entry.map.entries[index].key);"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0; // Index is invalid because entries are empty",
          "",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    let key_mut = indexed_entry.key_mut();",
          "    let mut entries = Entries::<i32, i32>::new();",
          "    let mut indices = Indices::new();",
          "    let mut map = IndexMapCore { entries, indices };",
          "    let index = 0; // Index is invalid because entries are empty",
          "    let mut indexed_entry = IndexedEntry::new(&mut map, index);",
          "    assert_eq!(indexed_entry.key_mut(), &mut indexed_entry.map.entries[index].key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]