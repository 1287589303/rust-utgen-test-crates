[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    let key = 10;",
          "    let value = String::from(\"Ten\");",
          "    map.insert_sorted(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get_index(0).unwrap().0, &10);",
          "    assert_eq!(map.get_index(0).unwrap().1, \"Ten\");",
          "    assert_eq!(map.insert_sorted(10, String::from(\"Ten Updated\")), (0, Some(String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(0).unwrap().1, \"Ten Updated\");"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    let key = 10;",
          "    let value = String::from(\"Ten\");",
          "    map.insert_sorted(key, value);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get_index(0).unwrap().0, &10);",
          "    assert_eq!(map.get_index(0).unwrap().1, \"Ten\");",
          "    assert_eq!(map.insert_sorted(10, String::from(\"Ten Updated\")), (0, Some(String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(0).unwrap().1, \"Ten Updated\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(30, String::from(\"Thirty\"));",
          "    map.insert(20, String::from(\"Twenty\"));",
          "    let key = 15;",
          "    let value = String::from(\"Fifteen\");",
          "    map.insert_sorted(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get_index(0), Some((&15, &String::from(\"Fifteen\"))));",
          "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
          "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
          "    assert_eq!(map.insert_sorted(15, String::from(\"Fifteen\")), (0, None));",
          "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty Updated\")), (1, Some(String::from(\"Twenty\"))));",
          "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty Updated\"))));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(30, String::from(\"Thirty\"));",
          "    map.insert(20, String::from(\"Twenty\"));",
          "    let key = 15;",
          "    let value = String::from(\"Fifteen\");",
          "    map.insert_sorted(key, value);",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get_index(0), Some((&15, &String::from(\"Fifteen\"))));",
          "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
          "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
          "    assert_eq!(map.insert_sorted(15, String::from(\"Fifteen\")), (0, None));",
          "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty Updated\")), (1, Some(String::from(\"Twenty\"))));",
          "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty Updated\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(5, String::from(\"Five\"));",
          "    map.insert(15, String::from(\"Fifteen\"));",
          "    map.insert(25, String::from(\"Twenty Five\"));",
          "    let key = 10;",
          "    let value = String::from(\"Ten\");",
          "    map.insert_sorted(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index(0), Some((&5, &String::from(\"Five\"))));",
          "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(2), Some((&15, &String::from(\"Fifteen\"))));",
          "    assert_eq!(map.get_index(3), Some((&25, &String::from(\"Twenty Five\"))));",
          "    assert_eq!(map.insert_sorted(10, String::from(\"Ten\")), (1, None));",
          "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty\")), (3, None));",
          "    assert_eq!(map.insert_sorted(5, String::from(\"Five Updated\")), (0, Some(String::from(\"Five\"))));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(5, String::from(\"Five\"));",
          "    map.insert(15, String::from(\"Fifteen\"));",
          "    map.insert(25, String::from(\"Twenty Five\"));",
          "    let key = 10;",
          "    let value = String::from(\"Ten\");",
          "    map.insert_sorted(key, value);",
          "    assert_eq!(map.get_index(0), Some((&5, &String::from(\"Five\"))));",
          "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(2), Some((&15, &String::from(\"Fifteen\"))));",
          "    assert_eq!(map.get_index(3), Some((&25, &String::from(\"Twenty Five\"))));",
          "    assert_eq!(map.insert_sorted(10, String::from(\"Ten\")), (1, None));",
          "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty\")), (3, None));",
          "    assert_eq!(map.insert_sorted(5, String::from(\"Five Updated\")), (0, Some(String::from(\"Five\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(20, String::from(\"Twenty\"));",
          "    map.insert(30, String::from(\"Thirty\"));",
          "    map.insert(40, String::from(\"Forty\"));",
          "    let key = 10;",
          "    let value = String::from(\"Ten\");",
          "    map.insert_sorted(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 4);",
          "    assert_eq!(map.get_index(0), Some((&10, &String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
          "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
          "    assert_eq!(map.get_index(3), Some((&40, &String::from(\"Forty\"))));",
          "    assert_eq!(map.binary_search_keys(&key), Err(0));",
          "    assert_eq!(map.insert_sorted(key, value), (0, None));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(20, String::from(\"Twenty\"));",
          "    map.insert(30, String::from(\"Thirty\"));",
          "    map.insert(40, String::from(\"Forty\"));",
          "    let key = 10;",
          "    let value = String::from(\"Ten\");",
          "    map.insert_sorted(key, value);",
          "    assert_eq!(map.len(), 4);",
          "    assert_eq!(map.get_index(0), Some((&10, &String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
          "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
          "    assert_eq!(map.get_index(3), Some((&40, &String::from(\"Forty\"))));",
          "    assert_eq!(map.binary_search_keys(&key), Err(0));",
          "    assert_eq!(map.insert_sorted(key, value), (0, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(10, String::from(\"Ten\"));",
          "    map.insert(1, String::from(\"One\"));",
          "    let key = 20;",
          "    let value = String::from(\"Twenty\");",
          "    map.insert_sorted(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index(0), Some((&1, &String::from(\"One\"))));",
          "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(2), Some((&20, &String::from(\"Twenty\"))));",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.binary_search_keys(&20), Err(2));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
          "    map.insert(10, String::from(\"Ten\"));",
          "    map.insert(1, String::from(\"One\"));",
          "    let key = 20;",
          "    let value = String::from(\"Twenty\");",
          "    map.insert_sorted(key, value);",
          "    assert_eq!(map.get_index(0), Some((&1, &String::from(\"One\"))));",
          "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
          "    assert_eq!(map.get_index(2), Some((&20, &String::from(\"Twenty\"))));",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.binary_search_keys(&20), Err(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]