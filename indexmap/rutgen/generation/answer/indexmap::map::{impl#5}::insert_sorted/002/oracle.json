[
  {
    "uses": [
      "use std::hash::Hash;",
      "use std::hash::Hasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    impl Hasher for TestHasher {",
          "        fn finish(&self) -> u64 {",
          "            0",
          "        }",
          "        fn write(&mut self, _: &[u8]) {}",
          "    }",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = Self;",
          "        fn build_hasher(&self) -> Self {",
          "            TestHasher",
          "        }",
          "    }",
          "",
          "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    map.insert(3, \"three\".to_string());",
          "",
          "    let result = map.insert_sorted(2, \"updated two\".to_string());",
          "}"
        ],
        "oracle": [
          "    let result = map.insert_sorted(2, \"updated two\".to_string());",
          "    assert_eq!(result.0, 1);",
          "    assert_eq!(result.1, Some(\"two\".to_string()));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    impl Hasher for TestHasher {",
          "        fn finish(&self) -> u64 {",
          "            0",
          "        }",
          "        fn write(&mut self, _: &[u8]) {}",
          "    }",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = Self;",
          "        fn build_hasher(&self) -> Self {",
          "            TestHasher",
          "        }",
          "    }",
          "",
          "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    map.insert(3, \"three\".to_string());",
          "",
          "    let result = map.insert_sorted(2, \"updated two\".to_string());",
          "    let result = map.insert_sorted(2, \"updated two\".to_string());",
          "    assert_eq!(result.0, 1);",
          "    assert_eq!(result.1, Some(\"two\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    impl Hasher for TestHasher {",
          "        fn finish(&self) -> u64 {",
          "            0",
          "        }",
          "        fn write(&mut self, _: &[u8]) {}",
          "    }",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = Self;",
          "        fn build_hasher(&self) -> Self {",
          "            TestHasher",
          "        }",
          "    }",
          "",
          "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    map.insert(3, \"three\".to_string());",
          "",
          "    let result = map.insert_sorted(4, \"four\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (3, None));",
          "    assert_eq!(map.get_index(3), Some((&4, &\"four\".to_string())));",
          "    assert_eq!(map.get_index(0), Some((&1, &\"one\".to_string())));",
          "    assert_eq!(map.get_index(1), Some((&2, &\"two\".to_string())));",
          "    assert_eq!(map.get_index(2), Some((&3, &\"three\".to_string())));",
          "    assert_eq!(map.len(), 4);",
          "    assert!(map.into_boxed_slice().len() == 4);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    impl Hasher for TestHasher {",
          "        fn finish(&self) -> u64 {",
          "            0",
          "        }",
          "        fn write(&mut self, _: &[u8]) {}",
          "    }",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = Self;",
          "        fn build_hasher(&self) -> Self {",
          "            TestHasher",
          "        }",
          "    }",
          "",
          "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    map.insert(3, \"three\".to_string());",
          "",
          "    let result = map.insert_sorted(4, \"four\".to_string());",
          "    assert_eq!(result, (3, None));",
          "    assert_eq!(map.get_index(3), Some((&4, &\"four\".to_string())));",
          "    assert_eq!(map.get_index(0), Some((&1, &\"one\".to_string())));",
          "    assert_eq!(map.get_index(1), Some((&2, &\"two\".to_string())));",
          "    assert_eq!(map.get_index(2), Some((&3, &\"three\".to_string())));",
          "    assert_eq!(map.len(), 4);",
          "    assert!(map.into_boxed_slice().len() == 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    impl Hasher for TestHasher {",
          "        fn finish(&self) -> u64 {",
          "            0",
          "        }",
          "        fn write(&mut self, _: &[u8]) {}",
          "    }",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = Self;",
          "        fn build_hasher(&self) -> Self {",
          "            TestHasher",
          "        }",
          "    }",
          "",
          "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "",
          "    let result = map.insert_sorted(1, \"updated one\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (0, Some(\"one\".to_string())));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    impl Hasher for TestHasher {",
          "        fn finish(&self) -> u64 {",
          "            0",
          "        }",
          "        fn write(&mut self, _: &[u8]) {}",
          "    }",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = Self;",
          "        fn build_hasher(&self) -> Self {",
          "            TestHasher",
          "        }",
          "    }",
          "",
          "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "",
          "    let result = map.insert_sorted(1, \"updated one\".to_string());",
          "    assert_eq!(result, (0, Some(\"one\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]