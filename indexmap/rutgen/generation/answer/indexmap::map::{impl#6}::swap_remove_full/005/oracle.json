[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap {",
          "        map: crate::IndexMap<i32, String>,",
          "    }",
          "",
          "    impl TestMap {",
          "        fn new() -> Self {",
          "            TestMap {",
          "                map: crate::IndexMap::new(),",
          "            }",
          "        }",
          "",
          "        fn insert(&mut self, key: i32, value: String) {",
          "            self.map.insert(key, value);",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMap::new();",
          "    test_map.insert(1, String::from(\"value1\"));",
          "    test_map.insert(2, String::from(\"value2\"));",
          "",
          "    let (index, value) = test_map.map.swap_remove_full(&1).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_map.map.len(), 1);",
          "    assert!(test_map.map.get(&1).is_none());",
          "    assert_eq!(test_map.map.get(&2), Some(&String::from(\"value2\")));",
          "    assert_eq!(index, 0);",
          "    assert_eq!(value, String::from(\"value1\"));",
          "    test_map.insert(3, String::from(\"value3\"));",
          "    let (index2, value2) = test_map.map.swap_remove_full(&3).unwrap();",
          "    assert_eq!(index2, 0);",
          "    assert_eq!(value2, String::from(\"value3\"));",
          "    assert!(test_map.map.get(&3).is_none());",
          "    assert_eq!(test_map.map.len(), 0);"
        ],
        "code": [
          "{",
          "    struct TestMap {",
          "        map: crate::IndexMap<i32, String>,",
          "    }",
          "",
          "    impl TestMap {",
          "        fn new() -> Self {",
          "            TestMap {",
          "                map: crate::IndexMap::new(),",
          "            }",
          "        }",
          "",
          "        fn insert(&mut self, key: i32, value: String) {",
          "            self.map.insert(key, value);",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMap::new();",
          "    test_map.insert(1, String::from(\"value1\"));",
          "    test_map.insert(2, String::from(\"value2\"));",
          "",
          "    let (index, value) = test_map.map.swap_remove_full(&1).unwrap();",
          "    assert_eq!(test_map.map.len(), 1);",
          "    assert!(test_map.map.get(&1).is_none());",
          "    assert_eq!(test_map.map.get(&2), Some(&String::from(\"value2\")));",
          "    assert_eq!(index, 0);",
          "    assert_eq!(value, String::from(\"value1\"));",
          "    test_map.insert(3, String::from(\"value3\"));",
          "    let (index2, value2) = test_map.map.swap_remove_full(&3).unwrap();",
          "    assert_eq!(index2, 0);",
          "    assert_eq!(value2, String::from(\"value3\"));",
          "    assert!(test_map.map.get(&3).is_none());",
          "    assert_eq!(test_map.map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap {",
          "        map: crate::IndexMap<i32, String>,",
          "    }",
          "",
          "    impl TestMap {",
          "        fn new() -> Self {",
          "            TestMap {",
          "                map: crate::IndexMap::new(),",
          "            }",
          "        }",
          "",
          "        fn insert(&mut self, key: i32, value: String) {",
          "            self.map.insert(key, value);",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMap::new();",
          "    test_map.insert(3, String::from(\"value3\"));",
          "    test_map.insert(4, String::from(\"value4\"));",
          "",
          "    let (index, value) = test_map.map.swap_remove_full(&3).unwrap();",
          "}"
        ],
        "oracle": [
          "    test_map.map.swap_remove_full(&5).is_none();",
          "    test_map.map.swap_remove_full(&4).unwrap().1 == \"value4\";",
          "    test_map.map.swap_remove_full(&3).unwrap().1 == \"value3\";",
          "    test_map.map.len() == 1;",
          "    test_map.map.swap_remove_full(&3).is_none();"
        ],
        "code": [
          "{",
          "    struct TestMap {",
          "        map: crate::IndexMap<i32, String>,",
          "    }",
          "",
          "    impl TestMap {",
          "        fn new() -> Self {",
          "            TestMap {",
          "                map: crate::IndexMap::new(),",
          "            }",
          "        }",
          "",
          "        fn insert(&mut self, key: i32, value: String) {",
          "            self.map.insert(key, value);",
          "        }",
          "    }",
          "",
          "    let mut test_map = TestMap::new();",
          "    test_map.insert(3, String::from(\"value3\"));",
          "    test_map.insert(4, String::from(\"value4\"));",
          "",
          "    let (index, value) = test_map.map.swap_remove_full(&3).unwrap();",
          "    test_map.map.swap_remove_full(&5).is_none();",
          "    test_map.map.swap_remove_full(&4).unwrap().1 == \"value4\";",
          "    test_map.map.swap_remove_full(&3).unwrap().1 == \"value3\";",
          "    test_map.map.len() == 1;",
          "    test_map.map.swap_remove_full(&3).is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]