[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct Key(u32);",
          "    ",
          "    #[derive(Debug)]",
          "    struct Value(u32);",
          "    ",
          "    let mut map: IndexMap<Key, Value, RandomState> = IndexMap::new();",
          "    map.insert(Key(1), Value(42));",
          "    ",
          "    let result = map.swap_remove_full(&Key(1));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, Key(1), Value(42)));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&Key(1)).is_none());",
          "    assert!(map.as_entries().is_empty());"
        ],
        "code": [
          "{",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct Key(u32);",
          "    ",
          "    #[derive(Debug)]",
          "    struct Value(u32);",
          "    ",
          "    let mut map: IndexMap<Key, Value, RandomState> = IndexMap::new();",
          "    map.insert(Key(1), Value(42));",
          "    ",
          "    let result = map.swap_remove_full(&Key(1));",
          "    assert_eq!(result, Some((0, Key(1), Value(42)));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&Key(1)).is_none());",
          "    assert!(map.as_entries().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct Key(u32);",
          "    ",
          "    #[derive(Debug)]",
          "    struct Value(u32);",
          "    ",
          "    let mut map: IndexMap<Key, Value, RandomState> = IndexMap::new();",
          "    map.insert(Key(10), Value(99));",
          "    ",
          "    let result = map.swap_remove_full(&Key(10));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, Key(10), Value(99))));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&Key(10)).is_none());",
          "    assert_eq!(map.swap_remove_full(&Key(10)), None);"
        ],
        "code": [
          "{",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct Key(u32);",
          "    ",
          "    #[derive(Debug)]",
          "    struct Value(u32);",
          "    ",
          "    let mut map: IndexMap<Key, Value, RandomState> = IndexMap::new();",
          "    map.insert(Key(10), Value(99));",
          "    ",
          "    let result = map.swap_remove_full(&Key(10));",
          "    assert_eq!(result, Some((0, Key(10), Value(99))));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&Key(10)).is_none());",
          "    assert_eq!(map.swap_remove_full(&Key(10)), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]