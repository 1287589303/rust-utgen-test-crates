[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    impl Hash for TestKey {",
          "        fn hash<H: Hasher>(&self, _state: &mut H) {}",
          "    }",
          "",
          "    impl Equivalent<TestKey> for TestKey {",
          "        fn equivalent(&self, _: &TestKey) -> bool {",
          "            true",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::with_capacity(1);",
          "    let test_key = TestKey;",
          "    let test_value = TestValue;",
          "",
          "    let hash_value = map.hash(&test_key);",
          "    map.core.push_entry(hash_value, test_key, test_value);",
          "",
          "    let result = map.swap_remove_full(&test_key);",
          "}"
        ],
        "oracle": [
          "    let map = IndexMap::<TestKey, TestValue, RandomState>::with_capacity(1);",
          "    let test_key = TestKey;",
          "    let test_value = TestValue;",
          "    map.core.push_entry(map.hash(&test_key), test_key.clone(), test_value.clone());",
          "    let result = map.swap_remove_full(&test_key);",
          "    assert_eq!(result, Some((0, test_key, test_value)));"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    impl Hash for TestKey {",
          "        fn hash<H: Hasher>(&self, _state: &mut H) {}",
          "    }",
          "",
          "    impl Equivalent<TestKey> for TestKey {",
          "        fn equivalent(&self, _: &TestKey) -> bool {",
          "            true",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::with_capacity(1);",
          "    let test_key = TestKey;",
          "    let test_value = TestValue;",
          "",
          "    let hash_value = map.hash(&test_key);",
          "    map.core.push_entry(hash_value, test_key, test_value);",
          "",
          "    let result = map.swap_remove_full(&test_key);",
          "    let map = IndexMap::<TestKey, TestValue, RandomState>::with_capacity(1);",
          "    let test_key = TestKey;",
          "    let test_value = TestValue;",
          "    map.core.push_entry(map.hash(&test_key), test_key.clone(), test_value.clone());",
          "    let result = map.swap_remove_full(&test_key);",
          "    assert_eq!(result, Some((0, test_key, test_value)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]