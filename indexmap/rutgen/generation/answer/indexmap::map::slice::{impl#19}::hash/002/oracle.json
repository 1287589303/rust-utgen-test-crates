[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    slice.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 0);",
          "    assert_eq!(hasher.finish(), 0);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    slice.hash(&mut hasher);",
          "    assert_eq!(slice.len(), 0);",
          "    assert_eq!(hasher.finish(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<Option<i32>, Option<i32>>> = Box::new(Slice { entries: [] });",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    slice.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 0);",
          "    assert!(hasher.finish() == 0);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<Option<i32>, Option<i32>>> = Box::new(Slice { entries: [] });",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    slice.hash(&mut hasher);",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(hasher.finish() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonHashable;",
          "    let slice: Box<Slice<NonHashable, NonHashable>> = Box::new(Slice { entries: [] });",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    slice.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 0);",
          "    assert!(hasher.finish() == 0);"
        ],
        "code": [
          "{",
          "    struct NonHashable;",
          "    let slice: Box<Slice<NonHashable, NonHashable>> = Box::new(Slice { entries: [] });",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    slice.hash(&mut hasher);",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(hasher.finish() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]