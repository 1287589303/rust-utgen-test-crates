[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.entries.push(Bucket { hash: 2, key: 1, value: 200 });",
          "    index_map.entries.push(Bucket { hash: 3, key: 2, value: 300 });",
          "    index_map.entries.push(Bucket { hash: 4, key: 3, value: 400 });",
          "    ",
          "    index_map.move_index(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[2].key, 0);",
          "    assert_eq!(index_map.entries[3].key, 3);",
          "    assert_eq!(index_map.entries[0].hash, 2);",
          "    assert_eq!(index_map.entries[1].hash, 3);",
          "    assert_eq!(index_map.entries[2].hash, 1);",
          "    assert_eq!(index_map.entries[3].hash, 4);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.entries.push(Bucket { hash: 2, key: 1, value: 200 });",
          "    index_map.entries.push(Bucket { hash: 3, key: 2, value: 300 });",
          "    index_map.entries.push(Bucket { hash: 4, key: 3, value: 400 });",
          "    ",
          "    index_map.move_index(0, 2);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[2].key, 0);",
          "    assert_eq!(index_map.entries[3].key, 3);",
          "    assert_eq!(index_map.entries[0].hash, 2);",
          "    assert_eq!(index_map.entries[1].hash, 3);",
          "    assert_eq!(index_map.entries[2].hash, 1);",
          "    assert_eq!(index_map.entries[3].hash, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.entries.push(Bucket { hash: 2, key: 1, value: 200 });",
          "    index_map.entries.push(Bucket { hash: 3, key: 2, value: 300 });",
          "    ",
          "    index_map.move_index(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 200);",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[1].value, 300);",
          "    assert_eq!(index_map.entries[2].key, 0);",
          "    assert_eq!(index_map.entries[2].value, 100);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.entries.push(Bucket { hash: 2, key: 1, value: 200 });",
          "    index_map.entries.push(Bucket { hash: 3, key: 2, value: 300 });",
          "    ",
          "    index_map.move_index(0, 2);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 200);",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[1].value, 300);",
          "    assert_eq!(index_map.entries[2].key, 0);",
          "    assert_eq!(index_map.entries[2].value, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.entries.push(Bucket { hash: 2, key: 1, value: 200 });",
          "    ",
          "    index_map.move_index(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 200);",
          "    assert_eq!(index_map.entries[1].key, 0);",
          "    assert_eq!(index_map.entries[1].value, 100);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.entries.push(Bucket { hash: 2, key: 1, value: 200 });",
          "    ",
          "    index_map.move_index(0, 1);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 200);",
          "    assert_eq!(index_map.entries[1].key, 0);",
          "    assert_eq!(index_map.entries[1].value, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    ",
          "    index_map.move_index(1, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 1);",
          "    assert_eq!(index_map.entries[0].key, 0);",
          "    assert_eq!(index_map.entries[0].value, 100);",
          "    assert_eq!(index_map.entries[0].hash, 1);",
          "    assert!(std::panic::catch_unwind(|| index_map.move_index(1, 0)).is_err());"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    ",
          "    index_map.move_index(1, 0);",
          "    assert_eq!(index_map.len(), 1);",
          "    assert_eq!(index_map.entries[0].key, 0);",
          "    assert_eq!(index_map.entries[0].value, 100);",
          "    assert_eq!(index_map.entries[0].hash, 1);",
          "    assert!(std::panic::catch_unwind(|| index_map.move_index(1, 0)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    ",
          "    index_map.move_index(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.move_index(0, 1);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    ",
          "    index_map.move_index(0, 1);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut index_map = IndexMapCore::<usize, usize>::new();",
          "    index_map.entries.push(Bucket { hash: 1, key: 0, value: 100 });",
          "    index_map.move_index(0, 1);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]