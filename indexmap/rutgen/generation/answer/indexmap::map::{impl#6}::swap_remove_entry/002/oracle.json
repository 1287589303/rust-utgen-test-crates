[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomKey;",
          "    struct CustomValue;",
          "",
          "    impl Hash for CustomKey {",
          "        fn hash<H: Hasher>(&self, _: &mut H) {}",
          "    }",
          "",
          "    impl PartialEq for CustomKey {",
          "        fn eq(&self, _: &Self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    impl Equivalent<CustomKey> for CustomKey {",
          "        fn equivalent(&self, _: &CustomKey) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<CustomKey, CustomValue, RandomState> = IndexMap::new();",
          "    ",
          "    let key_to_remove = CustomKey;",
          "    let result = index_map.swap_remove_entry(&key_to_remove);",
          "}"
        ],
        "oracle": [
          "    let key_to_remove = CustomKey;",
          "    assert_eq!(result, None);",
          "    assert!(index_map.is_empty());",
          "    assert!(!index_map.contains_key(&key_to_remove));",
          "    assert_eq!(index_map.swap_remove_full(&key_to_remove), None);",
          "    assert_eq!(index_map.get_full_mut(&key_to_remove), None);",
          "    assert_eq!(index_map.shift_remove_entry(&key_to_remove), None);",
          "    assert_eq!(index_map.remove_entry(&key_to_remove), None);",
          "    assert_eq!(index_map.get_index_of(&key_to_remove), None);",
          "    assert!(index_map.get_mut(&key_to_remove).is_none());",
          "    assert!(index_map.get(&key_to_remove).is_none());"
        ],
        "code": [
          "{",
          "    struct CustomKey;",
          "    struct CustomValue;",
          "",
          "    impl Hash for CustomKey {",
          "        fn hash<H: Hasher>(&self, _: &mut H) {}",
          "    }",
          "",
          "    impl PartialEq for CustomKey {",
          "        fn eq(&self, _: &Self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    impl Equivalent<CustomKey> for CustomKey {",
          "        fn equivalent(&self, _: &CustomKey) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<CustomKey, CustomValue, RandomState> = IndexMap::new();",
          "    ",
          "    let key_to_remove = CustomKey;",
          "    let result = index_map.swap_remove_entry(&key_to_remove);",
          "    let key_to_remove = CustomKey;",
          "    assert_eq!(result, None);",
          "    assert!(index_map.is_empty());",
          "    assert!(!index_map.contains_key(&key_to_remove));",
          "    assert_eq!(index_map.swap_remove_full(&key_to_remove), None);",
          "    assert_eq!(index_map.get_full_mut(&key_to_remove), None);",
          "    assert_eq!(index_map.shift_remove_entry(&key_to_remove), None);",
          "    assert_eq!(index_map.remove_entry(&key_to_remove), None);",
          "    assert_eq!(index_map.get_index_of(&key_to_remove), None);",
          "    assert!(index_map.get_mut(&key_to_remove).is_none());",
          "    assert!(index_map.get(&key_to_remove).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomKey;",
          "    struct CustomValue;",
          "",
          "    impl Hash for CustomKey {",
          "        fn hash<H: Hasher>(&self, _: &mut H) {}",
          "    }",
          "",
          "    impl PartialEq for CustomKey {",
          "        fn eq(&self, _: &Self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    impl Equivalent<CustomKey> for CustomKey {",
          "        fn equivalent(&self, _: &CustomKey) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<CustomKey, CustomValue, RandomState> = IndexMap::new();",
          "    ",
          "    let key_to_remove = CustomKey;",
          "    let result = index_map.swap_remove_entry(&key_to_remove);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct CustomKey;",
          "    struct CustomValue;",
          "",
          "    impl Hash for CustomKey {",
          "        fn hash<H: Hasher>(&self, _: &mut H) {}",
          "    }",
          "",
          "    impl PartialEq for CustomKey {",
          "        fn eq(&self, _: &Self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    impl Equivalent<CustomKey> for CustomKey {",
          "        fn equivalent(&self, _: &CustomKey) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<CustomKey, CustomValue, RandomState> = IndexMap::new();",
          "    ",
          "    let key_to_remove = CustomKey;",
          "    let result = index_map.swap_remove_entry(&key_to_remove);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]