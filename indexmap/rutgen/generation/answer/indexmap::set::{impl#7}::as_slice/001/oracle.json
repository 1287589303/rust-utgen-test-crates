[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSet {",
          "        map: super::IndexMap<i32, (), std::collections::hash_map::RandomState>,",
          "    }",
          "",
          "    let mut test_set = TestSet {",
          "        map: super::IndexMap::new(),",
          "    };",
          "",
          "    test_set.map.insert(1, ());",
          "    test_set.map.insert(2, ());",
          "    test_set.map.insert(3, ());",
          "",
          "    let slice = test_set.map.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.entries.len(), 3);",
          "    assert_eq!(slice.entries[0].key, 1);",
          "    assert_eq!(slice.entries[1].key, 2);",
          "    assert_eq!(slice.entries[2].key, 3);",
          "    assert!(!slice.entries.is_empty());",
          "    assert!(std::ptr::eq(slice.entries.as_ptr(), slice.as_entries().as_ptr()));",
          "    assert!(slice.entries.iter().all(|bucket| bucket.value == ()));",
          "    assert_eq!(slice.entries[0].hash, test_set.map.core.hash(&1));",
          "    assert_eq!(slice.entries[1].hash, test_set.map.core.hash(&2));",
          "    assert_eq!(slice.entries[2].hash, test_set.map.core.hash(&3));"
        ],
        "code": [
          "{",
          "    struct TestSet {",
          "        map: super::IndexMap<i32, (), std::collections::hash_map::RandomState>,",
          "    }",
          "",
          "    let mut test_set = TestSet {",
          "        map: super::IndexMap::new(),",
          "    };",
          "",
          "    test_set.map.insert(1, ());",
          "    test_set.map.insert(2, ());",
          "    test_set.map.insert(3, ());",
          "",
          "    let slice = test_set.map.as_slice();",
          "    assert_eq!(slice.entries.len(), 3);",
          "    assert_eq!(slice.entries[0].key, 1);",
          "    assert_eq!(slice.entries[1].key, 2);",
          "    assert_eq!(slice.entries[2].key, 3);",
          "    assert!(!slice.entries.is_empty());",
          "    assert!(std::ptr::eq(slice.entries.as_ptr(), slice.as_entries().as_ptr()));",
          "    assert!(slice.entries.iter().all(|bucket| bucket.value == ()));",
          "    assert_eq!(slice.entries[0].hash, test_set.map.core.hash(&1));",
          "    assert_eq!(slice.entries[1].hash, test_set.map.core.hash(&2));",
          "    assert_eq!(slice.entries[2].hash, test_set.map.core.hash(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSet {",
          "        map: super::IndexMap<i32, (), std::collections::hash_map::RandomState>,",
          "    }",
          "",
          "    let mut test_set = TestSet {",
          "        map: super::IndexMap::new(),",
          "    };",
          "",
          "    test_set.map.insert(42, ());",
          "",
          "    let slice = test_set.map.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.entries.len(), 1);",
          "    assert_eq!(slice.entries[0].key, 42);",
          "    assert!(slice.entries[0].value.is_empty());",
          "    assert!(slice.is_empty() == false);",
          "    assert!(slice.entries.as_ptr() == test_set.map.as_entries().as_ptr());",
          "    assert!(std::ptr::eq(slice, &slice));"
        ],
        "code": [
          "{",
          "    struct TestSet {",
          "        map: super::IndexMap<i32, (), std::collections::hash_map::RandomState>,",
          "    }",
          "",
          "    let mut test_set = TestSet {",
          "        map: super::IndexMap::new(),",
          "    };",
          "",
          "    test_set.map.insert(42, ());",
          "",
          "    let slice = test_set.map.as_slice();",
          "    assert_eq!(slice.entries.len(), 1);",
          "    assert_eq!(slice.entries[0].key, 42);",
          "    assert!(slice.entries[0].value.is_empty());",
          "    assert!(slice.is_empty() == false);",
          "    assert!(slice.entries.as_ptr() == test_set.map.as_entries().as_ptr());",
          "    assert!(std::ptr::eq(slice, &slice));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSet {",
          "        map: super::IndexMap<String, (), std::collections::hash_map::RandomState>,",
          "    }",
          "",
          "    let mut test_set = TestSet {",
          "        map: super::IndexMap::new(),",
          "    };",
          "",
          "    test_set.map.insert(\"one\".to_string(), ());",
          "    test_set.map.insert(\"two\".to_string(), ());",
          "    test_set.map.insert(\"three\".to_string(), ());",
          "",
          "    let slice = test_set.map.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.as_entries().len(), 3);",
          "    assert_eq!(slice.as_entries()[0].key, \"one\");",
          "    assert_eq!(slice.as_entries()[1].key, \"two\");",
          "    assert_eq!(slice.as_entries()[2].key, \"three\");",
          "    assert!(slice as *const _ != std::ptr::null());",
          "    assert_eq!(slice.entries.len(), 3);"
        ],
        "code": [
          "{",
          "    struct TestSet {",
          "        map: super::IndexMap<String, (), std::collections::hash_map::RandomState>,",
          "    }",
          "",
          "    let mut test_set = TestSet {",
          "        map: super::IndexMap::new(),",
          "    };",
          "",
          "    test_set.map.insert(\"one\".to_string(), ());",
          "    test_set.map.insert(\"two\".to_string(), ());",
          "    test_set.map.insert(\"three\".to_string(), ());",
          "",
          "    let slice = test_set.map.as_slice();",
          "    assert_eq!(slice.as_entries().len(), 3);",
          "    assert_eq!(slice.as_entries()[0].key, \"one\");",
          "    assert_eq!(slice.as_entries()[1].key, \"two\");",
          "    assert_eq!(slice.as_entries()[2].key, \"three\");",
          "    assert!(slice as *const _ != std::ptr::null());",
          "    assert_eq!(slice.entries.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]