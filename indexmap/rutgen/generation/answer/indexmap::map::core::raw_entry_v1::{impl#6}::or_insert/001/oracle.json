[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Entries::new();",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        map: RefMut::new(&mut entries),",
          "        hash_builder: &hash_builder,",
          "    });",
          "    let (key, value) = vacant_entry.or_insert(42, 100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*key, 42);",
          "    assert_eq!(*value, 100);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries.get(&42), Some(&100));"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::new();",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        map: RefMut::new(&mut entries),",
          "        hash_builder: &hash_builder,",
          "    });",
          "    let (key, value) = vacant_entry.or_insert(42, 100);",
          "    assert_eq!(*key, 42);",
          "    assert_eq!(*value, 100);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries.get(&42), Some(&100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Entries::new();",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        map: RefMut::new(&mut entries),",
          "        hash_builder: &hash_builder,",
          "    });",
          "    let (key, value) = vacant_entry.or_insert(\"default_key\".to_string(), \"default_value\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, \"default_key\");",
          "    assert_eq!(value, \"default_value\");",
          "    assert!(entries.contains_key(&key));",
          "    assert_eq!(entries.get(&key).unwrap(), &value);"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::new();",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        map: RefMut::new(&mut entries),",
          "        hash_builder: &hash_builder,",
          "    });",
          "    let (key, value) = vacant_entry.or_insert(\"default_key\".to_string(), \"default_value\".to_string());",
          "    assert_eq!(key, \"default_key\");",
          "    assert_eq!(value, \"default_value\");",
          "    assert!(entries.contains_key(&key));",
          "    assert_eq!(entries.get(&key).unwrap(), &value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Entries::new();",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        map: RefMut::new(&mut entries),",
          "        hash_builder: &hash_builder,",
          "    });",
          "    let (key, value) = vacant_entry.or_insert(3.14, 1.61);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*key, 3.14);",
          "    assert_eq!(*value, 1.61);",
          "    assert!(entries.len() > 0);",
          "    assert!(entries.contains_key(&3.14));",
          "    assert!(entries.get(&3.14).unwrap() == &1.61);"
        ],
        "code": [
          "{",
          "    let mut entries = Entries::new();",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        map: RefMut::new(&mut entries),",
          "        hash_builder: &hash_builder,",
          "    });",
          "    let (key, value) = vacant_entry.or_insert(3.14, 1.61);",
          "    assert_eq!(*key, 3.14);",
          "    assert_eq!(*value, 1.61);",
          "    assert!(entries.len() > 0);",
          "    assert!(entries.contains_key(&3.14));",
          "    assert!(entries.get(&3.14).unwrap() == &1.61);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]