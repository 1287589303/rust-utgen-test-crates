[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let mut map = IndexMapCore::new(&mut indices, &mut entries);",
          "    ",
          "    map.insert(TestKey, TestValue);",
          "    ",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = entry.swap_remove_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&TestKey).is_none());",
          "    let entry_result = entry.swap_remove_entry();",
          "    assert_eq!(entry_result.0, TestKey);",
          "    assert_eq!(entry_result.1, TestValue);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&TestKey).is_none());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let mut map = IndexMapCore::new(&mut indices, &mut entries);",
          "    ",
          "    map.insert(TestKey, TestValue);",
          "    ",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = entry.swap_remove_entry();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&TestKey).is_none());",
          "    let entry_result = entry.swap_remove_entry();",
          "    assert_eq!(entry_result.0, TestKey);",
          "    assert_eq!(entry_result.1, TestValue);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&TestKey).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let mut map = IndexMapCore::new(&mut indices, &mut entries);",
          "    ",
          "    map.insert(TestKey, TestValue);",
          "    map.insert(TestKey, TestValue); // Added a second entry",
          "    ",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = entry.swap_remove_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    let removed_entry = entry.swap_remove_entry();",
          "    assert_eq!(removed_entry.0, TestKey);",
          "    assert_eq!(removed_entry.1, TestValue);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get(&TestKey).is_none());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let mut map = IndexMapCore::new(&mut indices, &mut entries);",
          "    ",
          "    map.insert(TestKey, TestValue);",
          "    map.insert(TestKey, TestValue); // Added a second entry",
          "    ",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = entry.swap_remove_entry();",
          "    assert_eq!(map.len(), 2);",
          "    let removed_entry = entry.swap_remove_entry();",
          "    assert_eq!(removed_entry.0, TestKey);",
          "    assert_eq!(removed_entry.1, TestValue);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get(&TestKey).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let mut map = IndexMapCore::new(&mut indices, &mut entries);",
          "    ",
          "    map.insert(TestKey, TestValue);",
          "    ",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = entry.swap_remove_entry(); // Test removing last entry in a single-entry map",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(entry.index(), 0);",
          "    assert_eq!(map.entries.get(0).is_none(), true);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.swap_remove_index(0).is_none());",
          "    assert_eq!(map.swap_remove_index(0).is_some(), false);",
          "    assert_eq!(entry.key(), &TestKey);",
          "    assert_eq!(entry.get(), &TestValue);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let mut map = IndexMapCore::new(&mut indices, &mut entries);",
          "    ",
          "    map.insert(TestKey, TestValue);",
          "    ",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let _ = entry.swap_remove_entry(); // Test removing last entry in a single-entry map",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(entry.index(), 0);",
          "    assert_eq!(map.entries.get(0).is_none(), true);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.swap_remove_index(0).is_none());",
          "    assert_eq!(map.swap_remove_index(0).is_some(), false);",
          "    assert_eq!(entry.key(), &TestKey);",
          "    assert_eq!(entry.get(), &TestValue);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]