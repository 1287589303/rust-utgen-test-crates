[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: Vec<Bucket<TestKey, TestValue>> = Vec::with_capacity(10);",
          "    let additional = 5;",
          "    let try_capacity = 5; // Ensures that try_add is equal to additional",
          "",
          "    reserve_entries(&mut entries, additional, try_capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(entries.capacity(), 10);",
          "    assert_eq!(entries.try_reserve_exact(5).is_err(), true);",
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(entries.capacity(), 10);",
          "    assert!(entries.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: Vec<Bucket<TestKey, TestValue>> = Vec::with_capacity(10);",
          "    let additional = 5;",
          "    let try_capacity = 5; // Ensures that try_add is equal to additional",
          "",
          "    reserve_entries(&mut entries, additional, try_capacity);",
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(entries.capacity(), 10);",
          "    assert_eq!(entries.try_reserve_exact(5).is_err(), true);",
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(entries.capacity(), 10);",
          "    assert!(entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: Vec<Bucket<TestKey, TestValue>> = Vec::with_capacity(11);",
          "    let additional = 6;",
          "    let try_capacity = 6; // Try_capacity equals to additional",
          "",
          "    reserve_entries(&mut entries, additional, try_capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.capacity(), 11);",
          "    assert_eq!(entries.len(), 0);",
          "    assert!(entries.is_empty());",
          "    assert!(entries.try_reserve_exact(5).is_ok());",
          "    assert!(entries.try_reserve_exact(6).is_err());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: Vec<Bucket<TestKey, TestValue>> = Vec::with_capacity(11);",
          "    let additional = 6;",
          "    let try_capacity = 6; // Try_capacity equals to additional",
          "",
          "    reserve_entries(&mut entries, additional, try_capacity);",
          "    assert_eq!(entries.capacity(), 11);",
          "    assert_eq!(entries.len(), 0);",
          "    assert!(entries.is_empty());",
          "    assert!(entries.try_reserve_exact(5).is_ok());",
          "    assert!(entries.try_reserve_exact(6).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: Vec<Bucket<TestKey, TestValue>> = Vec::with_capacity(100);",
          "    let additional = 10;",
          "    let try_capacity = 10; // Try_capacity equals to additional",
          "",
          "    reserve_entries(&mut entries, additional, try_capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(entries.capacity(), 100);",
          "    assert!(entries.try_reserve_exact(0).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries: Vec<Bucket<TestKey, TestValue>> = Vec::with_capacity(100);",
          "    let additional = 10;",
          "    let try_capacity = 10; // Try_capacity equals to additional",
          "",
          "    reserve_entries(&mut entries, additional, try_capacity);",
          "    assert_eq!(entries.len(), 0);",
          "    assert_eq!(entries.capacity(), 100);",
          "    assert!(entries.try_reserve_exact(0).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]