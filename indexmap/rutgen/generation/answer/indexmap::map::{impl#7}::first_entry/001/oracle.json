[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    let entry = map.first_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.is_none(), true);",
          "    map.insert(1, \"one\".to_string());",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(0), Some(&\"one\".to_string()));",
          "    map.insert(2, \"two\".to_string());",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(0), Some(&\"one\".to_string()));",
          "    map.pop();",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(0), Some(&\"two\".to_string()));",
          "    map.clear();",
          "    let entry = map.first_entry();",
          "    assert_eq!(entry.is_none(), true);"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    let entry = map.first_entry();",
          "    assert_eq!(entry.is_none(), true);",
          "    map.insert(1, \"one\".to_string());",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(0), Some(&\"one\".to_string()));",
          "    map.insert(2, \"two\".to_string());",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(0), Some(&\"one\".to_string()));",
          "    map.pop();",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(0), Some(&\"two\".to_string()));",
          "    map.clear();",
          "    let entry = map.first_entry();",
          "    assert_eq!(entry.is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    let entry = map.first_entry();",
          "}"
        ],
        "oracle": [
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().0, &1);",
          "    assert_eq!(entry.unwrap().1, &\"first\".to_string());"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().0, &1);",
          "    assert_eq!(entry.unwrap().1, &\"first\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    map.insert(2, \"second\".to_string());",
          "    let entry = map.first_entry();",
          "}"
        ],
        "oracle": [
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get_index(0).unwrap(), (&1, &\"first\".to_string()));"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    map.insert(2, \"second\".to_string());",
          "    let entry = map.first_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get_index(0).unwrap(), (&1, &\"first\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    let entry = map.get_index_entry(100); // This tests a high index value",
          "}"
        ],
        "oracle": [
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    assert_eq!(map.first_entry(), Some(crate::IndexedEntry::new(&mut map.core, 0))); // Normal case",
          "    assert_eq!(map.get_index_entry(0), Some(crate::IndexedEntry::new(&mut map.core, 0))); // Index 0 case",
          "    assert_eq!(map.get_index_entry(1), None); // Out of bounds case",
          "    assert_eq!(map.get_index_entry(100), None); // High index value case",
          "    assert!(map.first_entry().is_some()); // Valid entry exists",
          "    map.clear(); // After clearing",
          "    assert_eq!(map.first_entry(), None); // Should return None after clearing."
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    let entry = map.get_index_entry(100); // This tests a high index value",
          "    let mut map: crate::IndexMap<i32, String, std::collections::hash_map::RandomState> = crate::IndexMap::default();",
          "    map.insert(1, \"first\".to_string());",
          "    assert_eq!(map.first_entry(), Some(crate::IndexedEntry::new(&mut map.core, 0))); // Normal case",
          "    assert_eq!(map.get_index_entry(0), Some(crate::IndexedEntry::new(&mut map.core, 0))); // Index 0 case",
          "    assert_eq!(map.get_index_entry(1), None); // Out of bounds case",
          "    assert_eq!(map.get_index_entry(100), None); // High index value case",
          "    assert!(map.first_entry().is_some()); // Valid entry exists",
          "    map.clear(); // After clearing",
          "    assert_eq!(map.first_entry(), None); // Should return None after clearing.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]