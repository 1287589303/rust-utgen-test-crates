[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEntries {",
          "        entries: Vec<Bucket<i32, String>>,",
          "    }",
          "",
          "    impl Entries for TestEntries {",
          "        type Entry = Bucket<i32, String>;",
          "",
          "        fn into_entries(self) -> Vec<Self::Entry> {",
          "            self.entries",
          "        }",
          "        ",
          "        fn as_entries(&self) -> &[Self::Entry] {",
          "            &self.entries",
          "        }",
          "",
          "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
          "            &mut self.entries",
          "        }",
          "",
          "        fn with_entries<F>(&mut self, f: F)",
          "        where",
          "            F: FnOnce(&mut [Self::Entry]),",
          "        {",
          "            f(&mut self.entries);",
          "        }",
          "    }",
          "    ",
          "    let mut entries = TestEntries {",
          "        entries: vec![",
          "            Bucket { hash: HashValue::default(), key: 1, value: \"Value1\".to_string() },",
          "            Bucket { hash: HashValue::default(), key: 2, value: \"Value2\".to_string() },",
          "        ],",
          "    };",
          "",
          "    let index = 1;",
          "    let occupied_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index: hashbrown::hash_table::OccupiedEntry::from_index(&mut entries.entries, index),",
          "        hash_builder: PhantomData,",
          "    };",
          "    ",
          "    let key = occupied_entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, &entries.entries[1].key);",
          "    assert_eq!(key, &2);",
          "    assert!(std::ptr::eq(key as *const _, &entries.entries[1].key as *const _));",
          "    assert_eq!(occupied_entry.index(), 1);",
          "    assert_eq!(occupied_entry.entries.as_entries()[occupied_entry.index()].key, 2);"
        ],
        "code": [
          "{",
          "    struct TestEntries {",
          "        entries: Vec<Bucket<i32, String>>,",
          "    }",
          "",
          "    impl Entries for TestEntries {",
          "        type Entry = Bucket<i32, String>;",
          "",
          "        fn into_entries(self) -> Vec<Self::Entry> {",
          "            self.entries",
          "        }",
          "        ",
          "        fn as_entries(&self) -> &[Self::Entry] {",
          "            &self.entries",
          "        }",
          "",
          "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
          "            &mut self.entries",
          "        }",
          "",
          "        fn with_entries<F>(&mut self, f: F)",
          "        where",
          "            F: FnOnce(&mut [Self::Entry]),",
          "        {",
          "            f(&mut self.entries);",
          "        }",
          "    }",
          "    ",
          "    let mut entries = TestEntries {",
          "        entries: vec![",
          "            Bucket { hash: HashValue::default(), key: 1, value: \"Value1\".to_string() },",
          "            Bucket { hash: HashValue::default(), key: 2, value: \"Value2\".to_string() },",
          "        ],",
          "    };",
          "",
          "    let index = 1;",
          "    let occupied_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index: hashbrown::hash_table::OccupiedEntry::from_index(&mut entries.entries, index),",
          "        hash_builder: PhantomData,",
          "    };",
          "    ",
          "    let key = occupied_entry.key();",
          "    assert_eq!(key, &entries.entries[1].key);",
          "    assert_eq!(key, &2);",
          "    assert!(std::ptr::eq(key as *const _, &entries.entries[1].key as *const _));",
          "    assert_eq!(occupied_entry.index(), 1);",
          "    assert_eq!(occupied_entry.entries.as_entries()[occupied_entry.index()].key, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEntries {",
          "        entries: Vec<Bucket<i32, String>>,",
          "    }",
          "",
          "    impl Entries for TestEntries {",
          "        type Entry = Bucket<i32, String>;",
          "",
          "        fn into_entries(self) -> Vec<Self::Entry> {",
          "            self.entries",
          "        }",
          "        ",
          "        fn as_entries(&self) -> &[Self::Entry] {",
          "            &self.entries",
          "        }",
          "",
          "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
          "            &mut self.entries",
          "        }",
          "",
          "        fn with_entries<F>(&mut self, f: F)",
          "        where",
          "            F: FnOnce(&mut [Self::Entry]),",
          "        {",
          "            f(&mut self.entries);",
          "        }",
          "    }",
          "    ",
          "    let mut entries = TestEntries {",
          "        entries: vec![",
          "            Bucket { hash: HashValue::default(), key: 3, value: \"Value3\".to_string() },",
          "        ],",
          "    };",
          "",
          "    let index = 0;",
          "    let occupied_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index: hashbrown::hash_table::OccupiedEntry::from_index(&mut entries.entries, index),",
          "        hash_builder: PhantomData,",
          "    };",
          "    ",
          "    let key = occupied_entry.key();",
          "}"
        ],
        "oracle": [
          "    let entries = TestEntries { entries: vec![Bucket { hash: HashValue::default(), key: 3, value: \"Value3\".to_string() }] };",
          "    let index = 0;",
          "    let occupied_entry = RawOccupiedEntryMut { entries: &mut entries, index: hashbrown::hash_table::OccupiedEntry::from_index(&mut entries.entries, index), hash_builder: PhantomData };",
          "    ",
          "    assert_eq!(occupied_entry.key(), &entries.entries[index].key);"
        ],
        "code": [
          "{",
          "    struct TestEntries {",
          "        entries: Vec<Bucket<i32, String>>,",
          "    }",
          "",
          "    impl Entries for TestEntries {",
          "        type Entry = Bucket<i32, String>;",
          "",
          "        fn into_entries(self) -> Vec<Self::Entry> {",
          "            self.entries",
          "        }",
          "        ",
          "        fn as_entries(&self) -> &[Self::Entry] {",
          "            &self.entries",
          "        }",
          "",
          "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
          "            &mut self.entries",
          "        }",
          "",
          "        fn with_entries<F>(&mut self, f: F)",
          "        where",
          "            F: FnOnce(&mut [Self::Entry]),",
          "        {",
          "            f(&mut self.entries);",
          "        }",
          "    }",
          "    ",
          "    let mut entries = TestEntries {",
          "        entries: vec![",
          "            Bucket { hash: HashValue::default(), key: 3, value: \"Value3\".to_string() },",
          "        ],",
          "    };",
          "",
          "    let index = 0;",
          "    let occupied_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index: hashbrown::hash_table::OccupiedEntry::from_index(&mut entries.entries, index),",
          "        hash_builder: PhantomData,",
          "    };",
          "    ",
          "    let key = occupied_entry.key();",
          "    let entries = TestEntries { entries: vec![Bucket { hash: HashValue::default(), key: 3, value: \"Value3\".to_string() }] };",
          "    let index = 0;",
          "    let occupied_entry = RawOccupiedEntryMut { entries: &mut entries, index: hashbrown::hash_table::OccupiedEntry::from_index(&mut entries.entries, index), hash_builder: PhantomData };",
          "    ",
          "    assert_eq!(occupied_entry.key(), &entries.entries[index].key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]