[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_a.insert(1);",
          "    set_a.insert(2);",
          "    set_a.insert(3);",
          "    ",
          "    set_b.insert(2);",
          "    set_b.insert(3);",
          "    set_b.insert(4);",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "}"
        ],
        "oracle": [
          "    let intersection = set_a.intersection(&set_b);",
          "    assert_eq!(intersection.iter.collect::<Vec<_>>(), vec![2, 3]);",
          "    assert!(!intersection.iter.is_empty());",
          "    assert_eq!(intersection.iter().count(), 2);",
          "    set_b.insert(1);",
          "    let intersection_after_insert = set_a.intersection(&set_b);",
          "    assert_eq!(intersection_after_insert.iter.collect::<Vec<_>>(), vec![2, 3]);",
          "    set_a.insert(4);",
          "    let intersection_after_insert_a = set_a.intersection(&set_b);",
          "    assert_eq!(intersection_after_insert_a.iter.collect::<Vec<_>>(), vec![2, 3]);"
        ],
        "code": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_a.insert(1);",
          "    set_a.insert(2);",
          "    set_a.insert(3);",
          "    ",
          "    set_b.insert(2);",
          "    set_b.insert(3);",
          "    set_b.insert(4);",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "    let intersection = set_a.intersection(&set_b);",
          "    assert_eq!(intersection.iter.collect::<Vec<_>>(), vec![2, 3]);",
          "    assert!(!intersection.iter.is_empty());",
          "    assert_eq!(intersection.iter().count(), 2);",
          "    set_b.insert(1);",
          "    let intersection_after_insert = set_a.intersection(&set_b);",
          "    assert_eq!(intersection_after_insert.iter.collect::<Vec<_>>(), vec![2, 3]);",
          "    set_a.insert(4);",
          "    let intersection_after_insert_a = set_a.intersection(&set_b);",
          "    assert_eq!(intersection_after_insert_a.iter.collect::<Vec<_>>(), vec![2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<String, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<String, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_a.insert(\"apple\".to_string());",
          "    set_a.insert(\"banana\".to_string());",
          "    set_a.insert(\"cherry\".to_string());",
          "",
          "    set_b.insert(\"banana\".to_string());",
          "    set_b.insert(\"cherry\".to_string());",
          "    set_b.insert(\"date\".to_string());",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersection.iter.collect::<Vec<_>>(), vec![\"banana\".to_string(), \"cherry\".to_string()]);"
        ],
        "code": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<String, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<String, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_a.insert(\"apple\".to_string());",
          "    set_a.insert(\"banana\".to_string());",
          "    set_a.insert(\"cherry\".to_string());",
          "",
          "    set_b.insert(\"banana\".to_string());",
          "    set_b.insert(\"cherry\".to_string());",
          "    set_b.insert(\"date\".to_string());",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "    assert_eq!(intersection.iter.collect::<Vec<_>>(), vec![\"banana\".to_string(), \"cherry\".to_string()]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<f64, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<f64, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_a.insert(1.1);",
          "    set_a.insert(2.2);",
          "    set_a.insert(3.3);",
          "",
          "    set_b.insert(2.2);",
          "    set_b.insert(3.3);",
          "    set_b.insert(4.4);",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersection.iter.collect::<Vec<_>>(), vec![2.2, 3.3]);"
        ],
        "code": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<f64, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<f64, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_a.insert(1.1);",
          "    set_a.insert(2.2);",
          "    set_a.insert(3.3);",
          "",
          "    set_b.insert(2.2);",
          "    set_b.insert(3.3);",
          "    set_b.insert(4.4);",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "    assert_eq!(intersection.iter.collect::<Vec<_>>(), vec![2.2, 3.3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_b.insert(10);",
          "    set_b.insert(20);",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersection.iter.count(), 0);",
          "    set_a.insert(10);",
          "    set_a.insert(15);",
          "    assert_eq!(intersection.iter.count(), 1);",
          "    set_a.insert(20);",
          "    assert_eq!(intersection.iter.count(), 2);",
          "    assert!(intersection.iter.eq(vec![10, 20].iter()));",
          "    set_a.insert(10);",
          "    set_a.insert(20);",
          "    let intersection_again = set_a.intersection(&set_b);",
          "    assert!(intersection.iter.eq(intersection_again.iter));"
        ],
        "code": [
          "{",
          "    struct HashBuilder;",
          "    impl BuildHasher for HashBuilder {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut set_a: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "    let mut set_b: IndexSet<i32, HashBuilder> = IndexSet { map: IndexMap { core: IndexMapCore::new(), hash_builder: HashBuilder } };",
          "",
          "    set_b.insert(10);",
          "    set_b.insert(20);",
          "",
          "    let intersection = set_a.intersection(&set_b);",
          "    assert_eq!(intersection.iter.count(), 0);",
          "    set_a.insert(10);",
          "    set_a.insert(15);",
          "    assert_eq!(intersection.iter.count(), 1);",
          "    set_a.insert(20);",
          "    assert_eq!(intersection.iter.count(), 2);",
          "    assert!(intersection.iter.eq(vec![10, 20].iter()));",
          "    set_a.insert(10);",
          "    set_a.insert(20);",
          "    let intersection_again = set_a.intersection(&set_b);",
          "    assert!(intersection.iter.eq(intersection_again.iter));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]