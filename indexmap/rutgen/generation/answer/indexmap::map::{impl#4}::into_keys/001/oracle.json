[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::default::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            Self::Hasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    ",
          "    let keys_iter = map.into_keys();",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    let keys_iter = map.into_keys();",
          "    assert_eq!(keys_iter.iter.collect::<Vec<_>>(), vec![1, 2]);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::default::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            Self::Hasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    ",
          "    let keys_iter = map.into_keys();",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    let keys_iter = map.into_keys();",
          "    assert_eq!(keys_iter.iter.collect::<Vec<_>>(), vec![1, 2]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::default::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            Self::Hasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "    ",
          "    let keys_iter = map.into_keys();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(keys_iter.collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert!(keys_iter.len() == 3);",
          "    assert!(!keys_iter.is_empty());",
          "    let keys_vec: Vec<_> = keys_iter.collect();",
          "    assert!(keys_vec.contains(&1));",
          "    assert!(keys_vec.contains(&2));",
          "    assert!(keys_vec.contains(&3));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::default::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            Self::Hasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "    ",
          "    let keys_iter = map.into_keys();",
          "    assert_eq!(keys_iter.collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert!(keys_iter.len() == 3);",
          "    assert!(!keys_iter.is_empty());",
          "    let keys_vec: Vec<_> = keys_iter.collect();",
          "    assert!(keys_vec.contains(&1));",
          "    assert!(keys_vec.contains(&2));",
          "    assert!(keys_vec.contains(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::default::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            Self::Hasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(5, \"five\");",
          "    ",
          "    let keys_iter = map.into_keys();",
          "}"
        ],
        "oracle": [
          "    let map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "    let keys_iter = map.into_keys();",
          "    assert_eq!(keys_iter.iter.count(), 1);",
          "    assert_eq!(keys_iter.iter.next().unwrap().key, 5);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::rustc_hash::default::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            Self::Hasher::default()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    map.insert(5, \"five\");",
          "    ",
          "    let keys_iter = map.into_keys();",
          "    let map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "    let keys_iter = map.into_keys();",
          "    assert_eq!(keys_iter.iter.count(), 1);",
          "    assert_eq!(keys_iter.iter.next().unwrap().key, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]