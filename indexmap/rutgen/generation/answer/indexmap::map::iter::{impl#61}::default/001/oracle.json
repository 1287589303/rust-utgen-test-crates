[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Values<i32, i32> = Values::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Values::<i32, i32>::default(), Values { iter: [].iter() });"
        ],
        "code": [
          "{",
          "    let _: Values<i32, i32> = Values::default();",
          "    assert_eq!(Values::<i32, i32>::default(), Values { iter: [].iter() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Values<String, String> = Values::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Values::default().iter.as_slice(), [].iter().as_slice());",
          "    assert!(Values::default().iter.next().is_none());",
          "    assert_eq!(Values::<String, String>::default().iter.len(), 0);",
          "    assert!(Values::<String, String>::default().iter.clone().eq([].iter()));",
          "    assert!(Values::default().iter.is_empty());"
        ],
        "code": [
          "{",
          "    let _: Values<String, String> = Values::default();",
          "    assert_eq!(Values::default().iter.as_slice(), [].iter().as_slice());",
          "    assert!(Values::default().iter.next().is_none());",
          "    assert_eq!(Values::<String, String>::default().iter.len(), 0);",
          "    assert!(Values::<String, String>::default().iter.clone().eq([].iter()));",
          "    assert!(Values::default().iter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        field: i32,",
          "    }",
          "    let _: Values<MyStruct, MyStruct> = Values::default();",
          "}"
        ],
        "oracle": [
          "    let result = Values::<MyStruct, MyStruct>::default();",
          "    assert_eq!(result.iter.as_slice(), [].iter().as_slice());",
          "    assert!(result.iter.is_empty());",
          "    assert!(result.iter.len() == 0);",
          "    let _: Values<MyStruct, MyStruct> = result;"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        field: i32,",
          "    }",
          "    let _: Values<MyStruct, MyStruct> = Values::default();",
          "    let result = Values::<MyStruct, MyStruct>::default();",
          "    assert_eq!(result.iter.as_slice(), [].iter().as_slice());",
          "    assert!(result.iter.is_empty());",
          "    assert!(result.iter.len() == 0);",
          "    let _: Values<MyStruct, MyStruct> = result;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Values<f32, f32> = Values::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Values::default(), Values { iter: [].iter() });"
        ],
        "code": [
          "{",
          "    let _: Values<f32, f32> = Values::default();",
          "    assert_eq!(Values::default(), Values { iter: [].iter() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct Complex {",
          "        real: f64,",
          "        imag: f64,",
          "    }",
          "    let _: Values<Complex, Complex> = Values::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Values::default(), Values { iter: [].iter() });"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct Complex {",
          "        real: f64,",
          "        imag: f64,",
          "    }",
          "    let _: Values<Complex, Complex> = Values::default();",
          "    assert_eq!(Values::default(), Values { iter: [].iter() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]