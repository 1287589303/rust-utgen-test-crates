[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(5);",
          "    let key = TestKey(1);",
          "    let value = TestValue(1);",
          "",
          "    map.insert_full(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(5);",
          "    let key = TestKey(1);",
          "    let value = TestValue(1);",
          "    assert_eq!(map.len(), 0);",
          "    let (index, existing_value) = map.insert_full(hash, key, value);",
          "    assert_eq!(index, 0);",
          "    assert!(existing_value.is_none());",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(5);",
          "    let key = TestKey(1);",
          "    let value = TestValue(1);",
          "",
          "    map.insert_full(hash, key, value);",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(5);",
          "    let key = TestKey(1);",
          "    let value = TestValue(1);",
          "    assert_eq!(map.len(), 0);",
          "    let (index, existing_value) = map.insert_full(hash, key, value);",
          "    assert_eq!(index, 0);",
          "    assert!(existing_value.is_none());",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(5);",
          "    let key1 = TestKey(1);",
          "    let value1 = TestValue(1);",
          "    let key2 = TestKey(2);",
          "    let value2 = TestValue(2);",
          "",
          "    map.insert_full(hash, key1, value1);",
          "    map.insert_full(hash, key2, value2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert!(map.indices.entry(hash.get(), equivalent(&key1, &map.entries)).is_vacant());",
          "    assert!(map.indices.entry(hash.get(), equivalent(&key2, &map.entries)).is_occupied());",
          "    assert_eq!(map.entries[0].key, key1);",
          "    assert_eq!(map.entries[0].value, value1);",
          "    assert_eq!(map.entries[1].key, key2);",
          "    assert_eq!(map.entries[1].value, value2);",
          "    assert_eq!(map.entries.len(), map.capacity());",
          "    assert_eq!(map.insert_full(hash, key1, value1).1, Some(value1));",
          "    assert_eq!(map.insert_full(hash, key2, value2).1, None);"
        ],
        "code": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(5);",
          "    let key1 = TestKey(1);",
          "    let value1 = TestValue(1);",
          "    let key2 = TestKey(2);",
          "    let value2 = TestValue(2);",
          "",
          "    map.insert_full(hash, key1, value1);",
          "    map.insert_full(hash, key2, value2);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert!(map.indices.entry(hash.get(), equivalent(&key1, &map.entries)).is_vacant());",
          "    assert!(map.indices.entry(hash.get(), equivalent(&key2, &map.entries)).is_occupied());",
          "    assert_eq!(map.entries[0].key, key1);",
          "    assert_eq!(map.entries[0].value, value1);",
          "    assert_eq!(map.entries[1].key, key2);",
          "    assert_eq!(map.entries[1].value, value2);",
          "    assert_eq!(map.entries.len(), map.capacity());",
          "    assert_eq!(map.insert_full(hash, key1, value1).1, Some(value1));",
          "    assert_eq!(map.insert_full(hash, key2, value2).1, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(10);",
          "    let key = TestKey(2);",
          "    let value = TestValue(2);",
          "",
          "    map.insert_full(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(2));",
          "    assert_eq!(map.entries[0].value, TestValue(2));",
          "    assert!(map.get_index_of(hash, &key).is_some());",
          "    assert_eq!(map.insert_full(hash, key, TestValue(4)).1, Some(TestValue(2)));",
          "    assert_eq!(map.entries[0].value, TestValue(4));"
        ],
        "code": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(10);",
          "    let key = TestKey(2);",
          "    let value = TestValue(2);",
          "",
          "    map.insert_full(hash, key, value);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(2));",
          "    assert_eq!(map.entries[0].value, TestValue(2));",
          "    assert!(map.get_index_of(hash, &key).is_some());",
          "    assert_eq!(map.insert_full(hash, key, TestValue(4)).1, Some(TestValue(2)));",
          "    assert_eq!(map.entries[0].value, TestValue(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(3);",
          "    let key = TestKey(3);",
          "    let value1 = TestValue(3);",
          "    let value2 = TestValue(4);",
          "",
          "    map.insert_full(hash, key, value1);",
          "    map.insert_full(hash, key, value2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(3));",
          "    assert_eq!(map.entries[0].value, TestValue(4));",
          "    assert_eq!(map.indices.get(hash.get()), Some(&0));",
          "    assert!(map.insert_full(hash, key, value1).1.is_some());",
          "    assert!(map.insert_full(hash, key, value2).1.is_some());"
        ],
        "code": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(3);",
          "    let key = TestKey(3);",
          "    let value1 = TestValue(3);",
          "    let value2 = TestValue(4);",
          "",
          "    map.insert_full(hash, key, value1);",
          "    map.insert_full(hash, key, value2);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(3));",
          "    assert_eq!(map.entries[0].value, TestValue(4));",
          "    assert_eq!(map.indices.get(hash.get()), Some(&0));",
          "    assert!(map.insert_full(hash, key, value1).1.is_some());",
          "    assert!(map.insert_full(hash, key, value2).1.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(0);",
          "    let key = TestKey(1);",
          "    let value = TestValue(1);",
          "",
          "    map.insert_full(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.indices.len() > 0);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(1));",
          "    assert_eq!(map.entries[0].value, TestValue(1));",
          "    assert_eq!(map.insert_full(hash, TestKey(2), TestValue(2)).1, None);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries[1].key, TestKey(2));",
          "    assert_eq!(map.entries[1].value, TestValue(2));",
          "    assert!(map.indices.get(hash.get()).is_some());"
        ],
        "code": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(0);",
          "    let key = TestKey(1);",
          "    let value = TestValue(1);",
          "",
          "    map.insert_full(hash, key, value);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.indices.len() > 0);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(1));",
          "    assert_eq!(map.entries[0].value, TestValue(1));",
          "    assert_eq!(map.insert_full(hash, TestKey(2), TestValue(2)).1, None);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.entries[1].key, TestKey(2));",
          "    assert_eq!(map.entries[1].value, TestValue(2));",
          "    assert!(map.indices.get(hash.get()).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(99);",
          "    let key = TestKey(10);",
          "    let value = TestValue(10);",
          "",
          "    map.insert_full(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(10));",
          "    assert_eq!(map.entries[0].value, TestValue(10));",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.indices.entry(hash.get(), equivalent(&key, &map.entries), get_hash(&map.entries)), hash_table::Entry::Vacant(*));",
          "    assert!(map.insert_full(hash, key, TestValue(20)).1.is_none());",
          "    assert_eq!(map.entries[0].value, TestValue(20));",
          "    assert_eq!(map.indices.len(), 1);"
        ],
        "code": [
          "{",
          "    struct TestKey(usize);",
          "    struct TestValue(usize);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    ",
          "    let hash = HashValue(99);",
          "    let key = TestKey(10);",
          "    let value = TestValue(10);",
          "",
          "    map.insert_full(hash, key, value);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 1);",
          "    assert_eq!(map.entries[0].key, TestKey(10));",
          "    assert_eq!(map.entries[0].value, TestValue(10));",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.indices.entry(hash.get(), equivalent(&key, &map.entries), get_hash(&map.entries)), hash_table::Entry::Vacant(*));",
          "    assert!(map.insert_full(hash, key, TestValue(20)).1.is_none());",
          "    assert_eq!(map.entries[0].value, TestValue(20));",
          "    assert_eq!(map.indices.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]