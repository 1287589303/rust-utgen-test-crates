[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![];",
          "    let iter = IntoKeys {",
          "        iter: buckets.into_iter()",
          "    };",
          "    let _ = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 0);"
        ],
        "code": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![];",
          "    let iter = IntoKeys {",
          "        iter: buckets.into_iter()",
          "    };",
          "    let _ = iter.len();",
          "    assert_eq!(iter.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![Bucket { hash: 0, key: 1, value: 100 }];",
          "    let iter = IntoKeys {",
          "        iter: buckets.into_iter()",
          "    };",
          "    let _ = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 1);",
          "    let buckets = vec![];",
          "    let iter_empty = IntoKeys { iter: buckets.into_iter() };",
          "    assert_eq!(iter_empty.len(), 0);",
          "    let buckets_multiple = vec![Bucket { hash: 0, key: 1, value: 100 }, Bucket { hash: 1, key: 2, value: 200 }];",
          "    let iter_multiple = IntoKeys { iter: buckets_multiple.into_iter() };",
          "    assert_eq!(iter_multiple.len(), 2);",
          "    let buckets_large = vec![Bucket { hash: 0, key: 1, value: 100 }; 100];",
          "    let iter_large = IntoKeys { iter: buckets_large.into_iter() };",
          "    assert_eq!(iter_large.len(), 100);"
        ],
        "code": [
          "{",
          "    let buckets = vec![Bucket { hash: 0, key: 1, value: 100 }];",
          "    let iter = IntoKeys {",
          "        iter: buckets.into_iter()",
          "    };",
          "    let _ = iter.len();",
          "    assert_eq!(iter.len(), 1);",
          "    let buckets = vec![];",
          "    let iter_empty = IntoKeys { iter: buckets.into_iter() };",
          "    assert_eq!(iter_empty.len(), 0);",
          "    let buckets_multiple = vec![Bucket { hash: 0, key: 1, value: 100 }, Bucket { hash: 1, key: 2, value: 200 }];",
          "    let iter_multiple = IntoKeys { iter: buckets_multiple.into_iter() };",
          "    assert_eq!(iter_multiple.len(), 2);",
          "    let buckets_large = vec![Bucket { hash: 0, key: 1, value: 100 }; 100];",
          "    let iter_large = IntoKeys { iter: buckets_large.into_iter() };",
          "    assert_eq!(iter_large.len(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: 0, key: 1, value: 100 },",
          "        Bucket { hash: 1, key: 2, value: 200 },",
          "        Bucket { hash: 2, key: 3, value: 300 },",
          "        Bucket { hash: 3, key: 4, value: 400 },",
          "        Bucket { hash: 4, key: 5, value: 500 },",
          "    ];",
          "    let iter = IntoKeys {",
          "        iter: buckets.into_iter()",
          "    };",
          "    let _ = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 5);"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: 0, key: 1, value: 100 },",
          "        Bucket { hash: 1, key: 2, value: 200 },",
          "        Bucket { hash: 2, key: 3, value: 300 },",
          "        Bucket { hash: 3, key: 4, value: 400 },",
          "        Bucket { hash: 4, key: 5, value: 500 },",
          "    ];",
          "    let iter = IntoKeys {",
          "        iter: buckets.into_iter()",
          "    };",
          "    let _ = iter.len();",
          "    assert_eq!(iter.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]