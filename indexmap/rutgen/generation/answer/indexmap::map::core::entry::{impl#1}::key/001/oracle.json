[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let key = TestKey;",
          "    let value = TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    let _key_ref = entry.key();",
          "}"
        ],
        "oracle": [
          "    let key_ref = entry.key();",
          "    assert_eq!(key_ref, &key);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let key = TestKey;",
          "    let value = TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::default(),",
          "        key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    let _key_ref = entry.key();",
          "    let key_ref = entry.key();",
          "    assert_eq!(key_ref, &key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let key = TestKey;",
          "    let value = TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    entries.insert(key, value);",
          "",
          "    let vacant_key = TestKey;",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::default(),",
          "        key: vacant_key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    let _key_ref = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*_key_ref, vacant_key);",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert!(matches!(entry, Entry::Vacant(ref e) if e.key() == &vacant_key));",
          "    assert!(entry.key() as *const _ != std::ptr::null());",
          "    assert_eq!(std::mem::size_of_val(_key_ref), std::mem::size_of::<TestKey>());",
          "    assert!(std::any::TypeId::of::<K>() == std::any::TypeId::of::<TestKey>());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let key = TestKey;",
          "    let value = TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    entries.insert(key, value);",
          "",
          "    let vacant_key = TestKey;",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::default(),",
          "        key: vacant_key,",
          "    };",
          "",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    let _key_ref = entry.key();",
          "    assert_eq!(*_key_ref, vacant_key);",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert!(matches!(entry, Entry::Vacant(ref e) if e.key() == &vacant_key));",
          "    assert!(entry.key() as *const _ != std::ptr::null());",
          "    assert_eq!(std::mem::size_of_val(_key_ref), std::mem::size_of::<TestKey>());",
          "    assert!(std::any::TypeId::of::<K>() == std::any::TypeId::of::<TestKey>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]