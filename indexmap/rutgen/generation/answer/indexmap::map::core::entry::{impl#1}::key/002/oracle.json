[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let index = hashbrown::hash_table::OccupiedEntry::from_index(0);",
          "    let occupied_entry = OccupiedEntry::new(&mut entries, index);",
          "    let entry = Entry::Occupied(occupied_entry);",
          "",
          "    let key = entry.key();",
          "}"
        ],
        "oracle": [
          "    let key = entry.key();",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(key, &occupied_entry.key());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let index = hashbrown::hash_table::OccupiedEntry::from_index(0);",
          "    let occupied_entry = OccupiedEntry::new(&mut entries, index);",
          "    let entry = Entry::Occupied(occupied_entry);",
          "",
          "    let key = entry.key();",
          "    let key = entry.key();",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(key, &occupied_entry.key());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::new(),",
          "        key: TestKey,",
          "    };",
          "    let entry = Entry::Vacant(vacant_entry);",
          "",
          "    let key = entry.key();",
          "}"
        ],
        "oracle": [
          "    let test_key = TestKey;",
          "    let test_value = TestValue;",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::from(0));",
          "    let entry = Entry::Occupied(occupied_entry);",
          "    let key = entry.key();",
          "    assert_eq!(key, &test_key);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let vacant_entry = VacantEntry {",
          "        map: RefMut::new(&mut entries),",
          "        hash: HashValue::new(),",
          "        key: TestKey,",
          "    };",
          "    let entry = Entry::Vacant(vacant_entry);",
          "",
          "    let key = entry.key();",
          "    let test_key = TestKey;",
          "    let test_value = TestValue;",
          "    let mut entries = Entries::<TestKey, TestValue>::new();",
          "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::from(0));",
          "    let entry = Entry::Occupied(occupied_entry);",
          "    let key = entry.key();",
          "    assert_eq!(key, &test_key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]