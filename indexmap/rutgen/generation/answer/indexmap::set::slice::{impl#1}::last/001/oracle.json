[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32>; 1],",
          "    }",
          "    ",
          "    let slice = Slice {",
          "        entries: [Bucket { hash: 0, key: 42, value: () }],",
          "    };",
          "    ",
          "    let result = slice.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&42));",
          "    ",
          "    let empty_slice = Slice { entries: [] };",
          "    let empty_result = empty_slice.last();",
          "    assert_eq!(empty_result, None);",
          "    ",
          "    let slice_multiple = Slice { entries: [Bucket { hash: 0, key: 10, value: () }, Bucket { hash: 1, key: 20, value: () }] };",
          "    let result_multiple = slice_multiple.last();",
          "    assert_eq!(result_multiple, Some(&20));"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32>; 1],",
          "    }",
          "    ",
          "    let slice = Slice {",
          "        entries: [Bucket { hash: 0, key: 42, value: () }],",
          "    };",
          "    ",
          "    let result = slice.last();",
          "    assert_eq!(result, Some(&42));",
          "    ",
          "    let empty_slice = Slice { entries: [] };",
          "    let empty_result = empty_slice.last();",
          "    assert_eq!(empty_result, None);",
          "    ",
          "    let slice_multiple = Slice { entries: [Bucket { hash: 0, key: 10, value: () }, Bucket { hash: 1, key: 20, value: () }] };",
          "    let result_multiple = slice_multiple.last();",
          "    assert_eq!(result_multiple, Some(&20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<String>; 1],",
          "    }",
          "    ",
          "    let slice = Slice {",
          "        entries: [Bucket { hash: 0, key: String::from(\"last\"), value: () }],",
          "    };",
          "",
          "    let result = slice.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&String::from(\"last\")));"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<String>; 1],",
          "    }",
          "    ",
          "    let slice = Slice {",
          "        entries: [Bucket { hash: 0, key: String::from(\"last\"), value: () }],",
          "    };",
          "",
          "    let result = slice.last();",
          "    assert_eq!(result, Some(&String::from(\"last\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = Slice::<i32>::new();",
          "    ",
          "    let result = slice.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let slice = Slice::<i32>::new();",
          "    ",
          "    let result = slice.last();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32>; 3],",
          "    }",
          "    ",
          "    let slice = Slice {",
          "        entries: [",
          "            Bucket { hash: 1, key: 1, value: () },",
          "            Bucket { hash: 2, key: 2, value: () },",
          "            Bucket { hash: 3, key: 3, value: () },",
          "        ],",
          "    };",
          "",
          "    let result = slice.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&3));"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32>; 3],",
          "    }",
          "    ",
          "    let slice = Slice {",
          "        entries: [",
          "            Bucket { hash: 1, key: 1, value: () },",
          "            Bucket { hash: 2, key: 2, value: () },",
          "            Bucket { hash: 3, key: 3, value: () },",
          "        ],",
          "    };",
          "",
          "    let result = slice.last();",
          "    assert_eq!(result, Some(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]