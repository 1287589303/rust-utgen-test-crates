[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let old_value = map.shift_insert(10, 'a', ());",
          "    let occupied_index_of_a = map.get_index_of(&'a').unwrap();",
          "    assert_eq!(occupied_index_of_a, 10);",
          "    assert!(old_value.is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 26);",
          "    assert_eq!(old_value, Some(()));",
          "    assert_eq!(map.get_index_of(&'a'), Some(10));",
          "    assert_eq!(map.get_index_of(&'b'), Some(11));",
          "    assert_eq!(map.get_index_of(&'c'), Some(12));",
          "    assert_eq!(map.get_index_of(&'d'), Some(13));",
          "    assert_eq!(map.get_index_of(&'e'), Some(14));",
          "    assert_eq!(map.get_index_of(&'f'), Some(15));",
          "    assert_eq!(map.get_index_of(&'g'), Some(16));",
          "    assert_eq!(map.get_index_of(&'h'), Some(17));",
          "    assert_eq!(map.get_index_of(&'i'), Some(18));",
          "    assert_eq!(map.get_index_of(&'j'), Some(19));",
          "    assert_eq!(map.get_index_of(&'k'), Some(20));",
          "    assert_eq!(map.get_index_of(&'l'), Some(21));",
          "    assert_eq!(map.get_index_of(&'m'), Some(22));",
          "    assert_eq!(map.get_index_of(&'n'), Some(23));",
          "    assert_eq!(map.get_index_of(&'o'), Some(24));",
          "    assert_eq!(map.get_index_of(&'p'), Some(25));",
          "    assert_eq!(map.get_index_of(&'q'), Some(26));",
          "    assert_eq!(map.get_index_of(&'r'), Some(27));",
          "    assert_eq!(map.get_index_of(&'s'), Some(28));",
          "    assert_eq!(map.get_index_of(&'t'), Some(29));",
          "    assert_eq!(map.get_index_of(&'u'), Some(30));",
          "    assert_eq!(map.get_index_of(&'v'), Some(31));",
          "    assert_eq!(map.get_index_of(&'w'), Some(32));",
          "    assert_eq!(map.get_index_of(&'x'), Some(33));",
          "    assert_eq!(map.get_index_of(&'y'), Some(34));",
          "    assert_eq!(map.get_index_of(&'z'), Some(35));",
          "    assert_eq!(map.get_index_of(&'*'), None);",
          "    assert_eq!(map.get_index_of(&'+'), None);",
          "    assert!(old_value.is_some());",
          "    assert_eq!(old_value.unwrap(), ());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let old_value = map.shift_insert(10, 'a', ());",
          "    let occupied_index_of_a = map.get_index_of(&'a').unwrap();",
          "    assert_eq!(occupied_index_of_a, 10);",
          "    assert!(old_value.is_some());",
          "    assert_eq!(map.len(), 26);",
          "    assert_eq!(old_value, Some(()));",
          "    assert_eq!(map.get_index_of(&'a'), Some(10));",
          "    assert_eq!(map.get_index_of(&'b'), Some(11));",
          "    assert_eq!(map.get_index_of(&'c'), Some(12));",
          "    assert_eq!(map.get_index_of(&'d'), Some(13));",
          "    assert_eq!(map.get_index_of(&'e'), Some(14));",
          "    assert_eq!(map.get_index_of(&'f'), Some(15));",
          "    assert_eq!(map.get_index_of(&'g'), Some(16));",
          "    assert_eq!(map.get_index_of(&'h'), Some(17));",
          "    assert_eq!(map.get_index_of(&'i'), Some(18));",
          "    assert_eq!(map.get_index_of(&'j'), Some(19));",
          "    assert_eq!(map.get_index_of(&'k'), Some(20));",
          "    assert_eq!(map.get_index_of(&'l'), Some(21));",
          "    assert_eq!(map.get_index_of(&'m'), Some(22));",
          "    assert_eq!(map.get_index_of(&'n'), Some(23));",
          "    assert_eq!(map.get_index_of(&'o'), Some(24));",
          "    assert_eq!(map.get_index_of(&'p'), Some(25));",
          "    assert_eq!(map.get_index_of(&'q'), Some(26));",
          "    assert_eq!(map.get_index_of(&'r'), Some(27));",
          "    assert_eq!(map.get_index_of(&'s'), Some(28));",
          "    assert_eq!(map.get_index_of(&'t'), Some(29));",
          "    assert_eq!(map.get_index_of(&'u'), Some(30));",
          "    assert_eq!(map.get_index_of(&'v'), Some(31));",
          "    assert_eq!(map.get_index_of(&'w'), Some(32));",
          "    assert_eq!(map.get_index_of(&'x'), Some(33));",
          "    assert_eq!(map.get_index_of(&'y'), Some(34));",
          "    assert_eq!(map.get_index_of(&'z'), Some(35));",
          "    assert_eq!(map.get_index_of(&'*'), None);",
          "    assert_eq!(map.get_index_of(&'+'), None);",
          "    assert!(old_value.is_some());",
          "    assert_eq!(old_value.unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let old_value = map.shift_insert(5, 'f', ());",
          "    let occupied_index_of_f = map.get_index_of(&'f').unwrap();",
          "    assert_eq!(occupied_index_of_f, 5);",
          "    assert!(old_value.is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.shift_insert(5, 'f', ()), Some(existing_value));",
          "    assert_eq!(map.get_index_of(&'f'), Some(5));",
          "    assert!(old_value.is_some());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let old_value = map.shift_insert(5, 'f', ());",
          "    let occupied_index_of_f = map.get_index_of(&'f').unwrap();",
          "    assert_eq!(occupied_index_of_f, 5);",
          "    assert!(old_value.is_some());",
          "    assert_eq!(map.shift_insert(5, 'f', ()), Some(existing_value));",
          "    assert_eq!(map.get_index_of(&'f'), Some(5));",
          "    assert!(old_value.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let old_value = map.shift_insert(0, 'b', ());",
          "    let occupied_index_of_b = map.get_index_of(&'b').unwrap();",
          "    assert_eq!(occupied_index_of_b, 0);",
          "    assert!(old_value.is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.shift_insert(0, 'a', ()), Some(()));",
          "    assert_eq!(map.get_index_of(&'a'), Some(0));",
          "    assert_eq!(map.shift_insert(0, 'b', ()), Some(()));",
          "    assert_eq!(map.get_index_of(&'b'), Some(0));",
          "    assert_eq!(map.get_index_of(&'a'), Some(1));",
          "    assert!(old_value.is_some());",
          "    assert_eq!(map.shift_insert(1, 'b', ()), Some(()));",
          "    assert_eq!(map.get_index_of(&'b'), Some(1));",
          "    assert_eq!(map.get_index_of(&'a'), Some(0));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let old_value = map.shift_insert(0, 'b', ());",
          "    let occupied_index_of_b = map.get_index_of(&'b').unwrap();",
          "    assert_eq!(occupied_index_of_b, 0);",
          "    assert!(old_value.is_some());",
          "    assert_eq!(map.shift_insert(0, 'a', ()), Some(()));",
          "    assert_eq!(map.get_index_of(&'a'), Some(0));",
          "    assert_eq!(map.shift_insert(0, 'b', ()), Some(()));",
          "    assert_eq!(map.get_index_of(&'b'), Some(0));",
          "    assert_eq!(map.get_index_of(&'a'), Some(1));",
          "    assert!(old_value.is_some());",
          "    assert_eq!(map.shift_insert(1, 'b', ()), Some(()));",
          "    assert_eq!(map.get_index_of(&'b'), Some(1));",
          "    assert_eq!(map.get_index_of(&'a'), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]