[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len - 1, 'a', ());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 26);",
          "    assert_eq!(map.get_index_of(&'a'), Some(len - 1));",
          "    assert_eq!(map.get_index_of(&'*'), Some(25));",
          "    assert_eq!(map.get_index_of(&'z'), Some(24));",
          "    assert!(panic::catch_unwind(|| map.shift_insert(len, 'b', ())).is_err());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len - 1, 'a', ());",
          "    assert_eq!(map.len(), 26);",
          "    assert_eq!(map.get_index_of(&'a'), Some(len - 1));",
          "    assert_eq!(map.get_index_of(&'*'), Some(25));",
          "    assert_eq!(map.get_index_of(&'z'), Some(24));",
          "    assert!(panic::catch_unwind(|| map.shift_insert(len, 'b', ())).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len, 'a', ());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 26);",
          "    assert_eq!(map.get_index_of(&'a'), Some(0));",
          "    assert_eq!(map.get_index_of(&'b'), Some(1));",
          "    assert_eq!(map.get_index_of(&'z'), Some(25));",
          "    assert_eq!(map.shift_insert(len, 'a', ()), None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len, 'a', ());",
          "    assert_eq!(map.len(), 26);",
          "    assert_eq!(map.get_index_of(&'a'), Some(0));",
          "    assert_eq!(map.get_index_of(&'b'), Some(1));",
          "    assert_eq!(map.get_index_of(&'z'), Some(25));",
          "    assert_eq!(map.shift_insert(len, 'a', ()), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len, '*', ());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.shift_insert(len, '*', ()), None);",
          "    assert_eq!(map.get_index_of(&'*'), Some(len));",
          "    assert!(std::panic::catch_unwind(|| {",
          "    map.shift_insert(len, 'a', ());",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    map.shift_insert(len + 1, 'b', ());",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len, '*', ());",
          "    assert_eq!(map.shift_insert(len, '*', ()), None);",
          "    assert_eq!(map.get_index_of(&'*'), Some(len));",
          "    assert!(std::panic::catch_unwind(|| {",
          "    map.shift_insert(len, 'a', ());",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    map.shift_insert(len + 1, 'b', ());",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len - 2, 'a', ());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index_of(&'a'), Some(len - 2));",
          "    assert_eq!(map.len(), len);",
          "    assert_eq!(map.get_index_of(&'z'), Some(len - 1));",
          "    assert_eq!(map.get_index_of(&'*'), Some(len));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len - 2, 'a', ());",
          "    assert_eq!(map.get_index_of(&'a'), Some(len - 2));",
          "    assert_eq!(map.len(), len);",
          "    assert_eq!(map.get_index_of(&'z'), Some(len - 1));",
          "    assert_eq!(map.get_index_of(&'*'), Some(len));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len, 'z', ());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.shift_insert(len, 'z', ()), None);",
          "    assert_eq!(map.get_index_of(&'z'), Some(len));",
          "    assert!(map.len() == 26);",
          "    assert!(map.get_index_of(&'z').is_some());",
          "    assert!(map.get_index_of(&'a').is_some());",
          "    assert!(map.get_index_of(&'y').is_some());",
          "    assert!(map.get_index_of(&'z').is_none());",
          "    assert_eq!(map.len(), 26);",
          "    assert!(matches!(map.entry('z'), Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();",
          "    let len = map.len();",
          "",
          "    map.shift_insert(len, 'z', ());",
          "    assert_eq!(map.shift_insert(len, 'z', ()), None);",
          "    assert_eq!(map.get_index_of(&'z'), Some(len));",
          "    assert!(map.len() == 26);",
          "    assert!(map.get_index_of(&'z').is_some());",
          "    assert!(map.get_index_of(&'a').is_some());",
          "    assert!(map.get_index_of(&'y').is_some());",
          "    assert!(map.get_index_of(&'z').is_none());",
          "    assert_eq!(map.len(), 26);",
          "    assert!(matches!(map.entry('z'), Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]