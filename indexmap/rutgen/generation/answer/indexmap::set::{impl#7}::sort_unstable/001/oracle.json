[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(42);",
          "    set.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.first(), Some(&42));",
          "    assert_eq!(set.last(), Some(&42));",
          "    let sorted_slice = set.as_slice();",
          "    assert_eq!(sorted_slice.len(), 1);",
          "    assert_eq!(sorted_slice[0], 42);"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(42);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&42));",
          "    assert_eq!(set.last(), Some(&42));",
          "    let sorted_slice = set.as_slice();",
          "    assert_eq!(sorted_slice.len(), 1);",
          "    assert_eq!(sorted_slice[0], 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(3);",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.first(), Some(&1));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.as_slice(), &Slice::<i32>::from(&[1, 2, 3][..]));",
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.get_index(0).is_some());",
          "    assert!(set.get_index(2).is_some());",
          "    assert_eq!(set.get_index(1), Some(&2));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(3);",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&1));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.as_slice(), &Slice::<i32>::from(&[1, 2, 3][..]));",
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.get_index(0).is_some());",
          "    assert!(set.get_index(2).is_some());",
          "    assert_eq!(set.get_index(1), Some(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.first(), Some(&1));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.as_slice(), &[1, 2, 3]);",
          "    set.insert(0);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&0));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.as_slice(), &[0, 1, 2, 3]);",
          "    set.insert(5);",
          "    set.insert(-1);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&-1));",
          "    assert_eq!(set.last(), Some(&5));",
          "    assert_eq!(set.as_slice(), &[-1, 0, 1, 2, 3, 5]);"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&1));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.as_slice(), &[1, 2, 3]);",
          "    set.insert(0);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&0));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.as_slice(), &[0, 1, 2, 3]);",
          "    set.insert(5);",
          "    set.insert(-1);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&-1));",
          "    assert_eq!(set.last(), Some(&5));",
          "    assert_eq!(set.as_slice(), &[-1, 0, 1, 2, 3, 5]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(3);",
          "    set.insert(2);",
          "    set.insert(1);",
          "    set.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.as_slice(), &[1, 2, 3]);",
          "    assert!(set.first() == Some(&1));",
          "    assert!(set.last() == Some(&3));",
          "    assert!(set.binary_search(&2).is_ok());",
          "    assert!(set.binary_search(&4).is_err());",
          "    assert_eq!(set.len(), 3);",
          "    set.swap_remove_index(0);",
          "    assert_eq!(set.as_slice(), &[2, 3]);",
          "    set.shift_remove_index(1);",
          "    assert_eq!(set.as_slice(), &[2]);"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(3);",
          "    set.insert(2);",
          "    set.insert(1);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice(), &[1, 2, 3]);",
          "    assert!(set.first() == Some(&1));",
          "    assert!(set.last() == Some(&3));",
          "    assert!(set.binary_search(&2).is_ok());",
          "    assert!(set.binary_search(&4).is_err());",
          "    assert_eq!(set.len(), 3);",
          "    set.swap_remove_index(0);",
          "    assert_eq!(set.as_slice(), &[2, 3]);",
          "    set.shift_remove_index(1);",
          "    assert_eq!(set.as_slice(), &[2]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.insert(2);",
          "    set.insert(1);",
          "    set.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.first(), Some(&1));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.get_index(0), Some(&1));",
          "    assert_eq!(set.get_index(1), Some(&2));",
          "    assert_eq!(set.get_index(2), Some(&3));",
          "    assert_eq!(set.len(), 3);",
          "    assert_eq!(set.as_slice().to_vec(), vec![1, 2, 3]);",
          "    assert!(set.get_index(3).is_none());",
          "    assert_eq!(set.partition_point(|&x| x < 2), 1);",
          "    set.swap_remove_index(0);",
          "    assert_eq!(set.first(), Some(&2));",
          "    set.shift_remove_index(0);",
          "    assert_eq!(set.first(), Some(&2));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.insert(2);",
          "    set.insert(1);",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), Some(&1));",
          "    assert_eq!(set.last(), Some(&3));",
          "    assert_eq!(set.get_index(0), Some(&1));",
          "    assert_eq!(set.get_index(1), Some(&2));",
          "    assert_eq!(set.get_index(2), Some(&3));",
          "    assert_eq!(set.len(), 3);",
          "    assert_eq!(set.as_slice().to_vec(), vec![1, 2, 3]);",
          "    assert!(set.get_index(3).is_none());",
          "    assert_eq!(set.partition_point(|&x| x < 2), 1);",
          "    set.swap_remove_index(0);",
          "    assert_eq!(set.first(), Some(&2));",
          "    set.shift_remove_index(0);",
          "    assert_eq!(set.first(), Some(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.first(), None);",
          "    set.push(3);",
          "    set.push(1);",
          "    set.push(2);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![1, 2, 3]);",
          "    set.push(2);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![1, 2, 3]);",
          "    set.swap_remove_index(0);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![2, 3]);",
          "    set.reverse();",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![2, 3]);",
          "    set.clear();",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), None);"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, std::collections::hash_map::RandomState>::new();",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), None);",
          "    set.push(3);",
          "    set.push(1);",
          "    set.push(2);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![1, 2, 3]);",
          "    set.push(2);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![1, 2, 3]);",
          "    set.swap_remove_index(0);",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![2, 3]);",
          "    set.reverse();",
          "    set.sort_unstable();",
          "    assert_eq!(set.as_slice().to_vec(), vec![2, 3]);",
          "    set.clear();",
          "    set.sort_unstable();",
          "    assert_eq!(set.first(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]