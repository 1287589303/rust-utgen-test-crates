[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let result = slice.split_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let result = slice.split_first();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entry = Bucket { hash: 0, key: 1, value: \"value\" };",
          "    let slice: Box<Slice<&str>> = Box::new(Slice { entries: [entry] });",
          "    let result = slice.split_first();",
          "}"
        ],
        "oracle": [
          "    let entry = Bucket { hash: 0, key: 2, value: \"value2\" };",
          "    let slice: Box<Slice<&str>> = Box::new(Slice { entries: [] });",
          "    let result = slice.split_first();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let entry = Bucket { hash: 0, key: 1, value: \"value\" };",
          "    let slice: Box<Slice<&str>> = Box::new(Slice { entries: [entry] });",
          "    let result = slice.split_first();",
          "    let entry = Bucket { hash: 0, key: 2, value: \"value2\" };",
          "    let slice: Box<Slice<&str>> = Box::new(Slice { entries: [] });",
          "    let result = slice.split_first();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]