[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    let cloned_map = empty_map.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_map.len(), 0);",
          "    assert_eq!(cloned_map.capacity(), 0);",
          "    assert!(cloned_map.indices.is_empty());",
          "    assert!(cloned_map.entries.is_empty());"
        ],
        "code": [
          "{",
          "    let empty_map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    let cloned_map = empty_map.clone();",
          "    assert_eq!(cloned_map.len(), 0);",
          "    assert_eq!(cloned_map.capacity(), 0);",
          "    assert!(cloned_map.indices.is_empty());",
          "    assert!(cloned_map.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut single_entry_map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    single_entry_map.push_entry(1.into(), 1, \"value1\".to_string());",
          "    let cloned_map = single_entry_map.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_map.len(), single_entry_map.len());",
          "    assert!(cloned_map.capacity() >= single_entry_map.capacity());",
          "    assert_eq!(cloned_map.entries, single_entry_map.entries);",
          "    assert_eq!(cloned_map.indices, single_entry_map.indices);"
        ],
        "code": [
          "{",
          "    let mut single_entry_map: IndexMapCore<usize, String> = IndexMapCore::new();",
          "    single_entry_map.push_entry(1.into(), 1, \"value1\".to_string());",
          "    let cloned_map = single_entry_map.clone();",
          "    assert_eq!(cloned_map.len(), single_entry_map.len());",
          "    assert!(cloned_map.capacity() >= single_entry_map.capacity());",
          "    assert_eq!(cloned_map.entries, single_entry_map.entries);",
          "    assert_eq!(cloned_map.indices, single_entry_map.indices);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    const MAX_CAPACITY: usize = IndexMapCore::<usize, String>::MAX_ENTRIES_CAPACITY;",
          "    let mut max_capacity_map: IndexMapCore<usize, String> = IndexMapCore::with_capacity(MAX_CAPACITY);",
          "    for i in 0..MAX_CAPACITY {",
          "        max_capacity_map.push_entry(i.into(), i, format!(\"value{}\", i));",
          "    }",
          "    let cloned_map = max_capacity_map.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_map.len(), max_capacity_map.len());",
          "    assert_eq!(cloned_map.capacity(), max_capacity_map.capacity());",
          "    for i in 0..MAX_CAPACITY {",
          "    assert_eq!(cloned_map.get_index_of(HASH_FUNC(i), &i), max_capacity_map.get_index_of(HASH_FUNC(i), &i));",
          "    assert_eq!(cloned_map.entries[i], max_capacity_map.entries[i]);",
          "    }"
        ],
        "code": [
          "{",
          "    const MAX_CAPACITY: usize = IndexMapCore::<usize, String>::MAX_ENTRIES_CAPACITY;",
          "    let mut max_capacity_map: IndexMapCore<usize, String> = IndexMapCore::with_capacity(MAX_CAPACITY);",
          "    for i in 0..MAX_CAPACITY {",
          "        max_capacity_map.push_entry(i.into(), i, format!(\"value{}\", i));",
          "    }",
          "    let cloned_map = max_capacity_map.clone();",
          "    assert_eq!(cloned_map.len(), max_capacity_map.len());",
          "    assert_eq!(cloned_map.capacity(), max_capacity_map.capacity());",
          "    for i in 0..MAX_CAPACITY {",
          "    assert_eq!(cloned_map.get_index_of(HASH_FUNC(i), &i), max_capacity_map.get_index_of(HASH_FUNC(i), &i));",
          "    assert_eq!(cloned_map.entries[i], max_capacity_map.entries[i]);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]