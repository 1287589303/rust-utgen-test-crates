[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let result: ValuesMut<TestKey, TestValue> = ValuesMut::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.iter.as_slice(), &[]);",
          "    assert!(result.iter.is_empty());",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert_eq!(result.iter.size_hint(), (0, Some(0)));",
          "    assert!(result.iter.fuse().is_fused());",
          "    assert!(result.iter.next().is_none());",
          "    assert!(result.iter.next_back().is_none());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let result: ValuesMut<TestKey, TestValue> = ValuesMut::default();",
          "    assert_eq!(result.iter.as_slice(), &[]);",
          "    assert!(result.iter.is_empty());",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert_eq!(result.iter.size_hint(), (0, Some(0)));",
          "    assert!(result.iter.fuse().is_fused());",
          "    assert!(result.iter.next().is_none());",
          "    assert!(result.iter.next_back().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherKey;",
          "    struct AnotherValue;",
          "",
          "    let result: ValuesMut<AnotherKey, AnotherValue> = ValuesMut::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.iter.len(), 0);",
          "    assert!(result.iter.as_slice().is_empty());",
          "    assert_eq!(std::mem::size_of_val(&result.iter), 0);",
          "    assert!(result.iter.is_fused());"
        ],
        "code": [
          "{",
          "    struct AnotherKey;",
          "    struct AnotherValue;",
          "",
          "    let result: ValuesMut<AnotherKey, AnotherValue> = ValuesMut::default();",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert!(result.iter.as_slice().is_empty());",
          "    assert_eq!(std::mem::size_of_val(&result.iter), 0);",
          "    assert!(result.iter.is_fused());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyKey;",
          "    struct EmptyValue;",
          "",
          "    let result: ValuesMut<EmptyKey, EmptyValue> = ValuesMut::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.iter.as_slice(), [].iter_mut().as_slice());",
          "    assert!(result.iter.is_empty());",
          "    assert!(result.iter.len() == 0);",
          "    let default_value: ValuesMut<EmptyKey, EmptyValue> = ValuesMut::default();",
          "    assert_eq!(result, default_value);"
        ],
        "code": [
          "{",
          "    struct EmptyKey;",
          "    struct EmptyValue;",
          "",
          "    let result: ValuesMut<EmptyKey, EmptyValue> = ValuesMut::default();",
          "    assert_eq!(result.iter.as_slice(), [].iter_mut().as_slice());",
          "    assert!(result.iter.is_empty());",
          "    assert!(result.iter.len() == 0);",
          "    let default_value: ValuesMut<EmptyKey, EmptyValue> = ValuesMut::default();",
          "    assert_eq!(result, default_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]