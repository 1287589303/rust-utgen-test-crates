[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let default_values: IntoValues<(), ()> = IntoValues::default();",
          "    let empty_iter = default_values.iter;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(default_values.iter.len(), 0);",
          "    assert!(default_values.iter.next().is_none());",
          "    assert!(default_values.iter.is_fused());",
          "    assert!(default_values.iter.is_empty());",
          "    assert_eq!(default_values.iter, Vec::new().into_iter());"
        ],
        "code": [
          "{",
          "    let default_values: IntoValues<(), ()> = IntoValues::default();",
          "    let empty_iter = default_values.iter;",
          "    assert_eq!(default_values.iter.len(), 0);",
          "    assert!(default_values.iter.next().is_none());",
          "    assert!(default_values.iter.is_fused());",
          "    assert!(default_values.iter.is_empty());",
          "    assert_eq!(default_values.iter, Vec::new().into_iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let default_values: IntoValues<i32, String> = IntoValues::default();",
          "    let empty_iter = default_values.iter;",
          "}"
        ],
        "oracle": [
          "    let default_values: IntoValues<i32, String> = IntoValues::default();",
          "    assert!(default_values.iter.len() == 0);",
          "    let empty_iter = default_values.iter;",
          "    assert!(empty_iter.eq(Vec::<Bucket<i32, String>>::new().into_iter()));",
          "    assert!(empty_iter.is_fused());"
        ],
        "code": [
          "{",
          "    let default_values: IntoValues<i32, String> = IntoValues::default();",
          "    let empty_iter = default_values.iter;",
          "    let default_values: IntoValues<i32, String> = IntoValues::default();",
          "    assert!(default_values.iter.len() == 0);",
          "    let empty_iter = default_values.iter;",
          "    assert!(empty_iter.eq(Vec::<Bucket<i32, String>>::new().into_iter()));",
          "    assert!(empty_iter.is_fused());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]