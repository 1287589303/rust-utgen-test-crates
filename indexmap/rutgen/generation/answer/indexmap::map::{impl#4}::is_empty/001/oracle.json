[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), true);",
          "    let map_with_element: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map_with_element.insert(1, 10);",
          "    assert_eq!(map_with_element.is_empty(), false);",
          "    let empty_map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(empty_map.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), true);",
          "    let map_with_element: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map_with_element.insert(1, 10);",
          "    assert_eq!(map_with_element.is_empty(), false);",
          "    let empty_map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(empty_map.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), true);",
          "    let map_non_empty: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    map_non_empty.insert(1, 1);",
          "    assert_eq!(map_non_empty.is_empty(), false);",
          "    let map_with_clear: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(5, std::collections::hash_map::RandomState::new());",
          "    map_with_clear.insert(1, 1);",
          "    map_with_clear.clear();",
          "    assert_eq!(map_with_clear.is_empty(), true);",
          "    let map_with_truncate: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(5, std::collections::hash_map::RandomState::new());",
          "    map_with_truncate.insert(1, 1);",
          "    map_with_truncate.truncate(0);",
          "    assert_eq!(map_with_truncate.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), true);",
          "    let map_non_empty: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    map_non_empty.insert(1, 1);",
          "    assert_eq!(map_non_empty.is_empty(), false);",
          "    let map_with_clear: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(5, std::collections::hash_map::RandomState::new());",
          "    map_with_clear.insert(1, 1);",
          "    map_with_clear.clear();",
          "    assert_eq!(map_with_clear.is_empty(), true);",
          "    let map_with_truncate: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(5, std::collections::hash_map::RandomState::new());",
          "    map_with_truncate.insert(1, 1);",
          "    map_with_truncate.truncate(0);",
          "    assert_eq!(map_with_truncate.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 10);",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), false);",
          "    map.clear();",
          "    assert_eq!(map.is_empty(), true);",
          "    let map_empty: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(map_empty.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 10);",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), false);",
          "    map.clear();",
          "    assert_eq!(map.is_empty(), true);",
          "    let map_empty: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(map_empty.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(100, std::collections::hash_map::RandomState::new());",
          "    for i in 0..10 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), false);",
          "    map.clear();",
          "    assert_eq!(map.is_empty(), true);",
          "    let empty_map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(empty_map.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(100, std::collections::hash_map::RandomState::new());",
          "    for i in 0..10 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), false);",
          "    map.clear();",
          "    assert_eq!(map.is_empty(), true);",
          "    let empty_map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(empty_map.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 1);",
          "    map.clear();",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    map.is_empty(); // expected: true, since map was just cleared",
          "    let len_after_clear = map.len(); // expected: 0",
          "    assert!(map.len() == 0); // expected: true, confirming that length is 0 after clear",
          "    map.insert(1, 1);",
          "    assert!(map.is_empty() == false); // expected: false, map is not empty after insertion",
          "    let len_after_insertion = map.len(); // expected: 1, since one item was inserted",
          "    assert!(len_after_insertion == 1); // expected: true, confirming that length is 1 after insertion",
          "    map.clear();",
          "    assert!(map.is_empty()); // expected: true, confirming that map is empty after clear again"
        ],
        "code": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 1);",
          "    map.clear();",
          "    map.is_empty();",
          "    map.is_empty(); // expected: true, since map was just cleared",
          "    let len_after_clear = map.len(); // expected: 0",
          "    assert!(map.len() == 0); // expected: true, confirming that length is 0 after clear",
          "    map.insert(1, 1);",
          "    assert!(map.is_empty() == false); // expected: false, map is not empty after insertion",
          "    let len_after_insertion = map.len(); // expected: 1, since one item was inserted",
          "    assert!(len_after_insertion == 1); // expected: true, confirming that length is 1 after insertion",
          "    map.clear();",
          "    assert!(map.is_empty()); // expected: true, confirming that map is empty after clear again",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]