[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::DummyHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::DummyHasher",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    let entry = map.last_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, None);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::DummyHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::DummyHasher",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    let entry = map.last_entry();",
          "    assert_eq!(entry, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::DummyHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::DummyHasher",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(1, 10);",
          "    let entry = map.last_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, None);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::DummyHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::DummyHasher",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, i32, TestHasher> = IndexMap::with_hasher(TestHasher);",
          "    map.insert(1, 10);",
          "    let entry = map.last_entry();",
          "    assert_eq!(entry, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]