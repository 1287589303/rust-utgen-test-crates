[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    let entry = map.last_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.is_some(), true);",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(&1), Some(&10));",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    let entry = map.last_entry();",
          "    assert_eq!(entry.is_some(), true);",
          "    assert_eq!(entry.unwrap().index, 0);",
          "    assert_eq!(entry.unwrap().map.get(&1), Some(&10));",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
          "    for i in 0..10 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    let entry = map.last_entry();",
          "}"
        ],
        "oracle": [
          "    assert!(entry.is_some());",
          "    let (key, value) = entry.unwrap();",
          "    assert_eq!(key, 9);",
          "    assert_eq!(value, 90);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
          "    for i in 0..10 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    let entry = map.last_entry();",
          "    assert!(entry.is_some());",
          "    let (key, value) = entry.unwrap();",
          "    assert_eq!(key, 9);",
          "    assert_eq!(value, 90);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32> = IndexMap::new();",
          "    for i in 0..u32::MAX {",
          "        map.insert(i, i * 2);",
          "        if map.len() == 10 { // Using a small number for practicality",
          "            break;",
          "        }",
          "    }",
          "    let entry = map.last_entry();",
          "}"
        ],
        "oracle": [
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 9);",
          "    assert_eq!(entry.unwrap().map.get_index(9).unwrap(), (&9, &18));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32> = IndexMap::new();",
          "    for i in 0..u32::MAX {",
          "        map.insert(i, i * 2);",
          "        if map.len() == 10 { // Using a small number for practicality",
          "            break;",
          "        }",
          "    }",
          "    let entry = map.last_entry();",
          "    assert!(entry.is_some());",
          "    assert_eq!(entry.unwrap().index, 9);",
          "    assert_eq!(entry.unwrap().map.get_index(9).unwrap(), (&9, &18));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]