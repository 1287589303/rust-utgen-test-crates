[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "",
          "    let result = map.shift_remove_entry(&2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((2, \"two\")));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "",
          "    let result = map.shift_remove_entry(&2);",
          "    assert_eq!(result, Some((2, \"two\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "",
          "    let result = map.shift_remove_entry(&2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((2, \"two\")));",
          "    assert!(map.get(&2).is_none());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(&1), Some(&\"one\"));",
          "    assert_eq!(map.get_index_of(&1), Some(0));",
          "    assert_eq!(map.get_index_of(&2), None);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "",
          "    let result = map.shift_remove_entry(&2);",
          "    assert_eq!(result, Some((2, \"two\")));",
          "    assert!(map.get(&2).is_none());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(&1), Some(&\"one\"));",
          "    assert_eq!(map.get_index_of(&1), Some(0));",
          "    assert_eq!(map.get_index_of(&2), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "",
          "    let result = map.shift_remove_entry(&1);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "    ",
          "    let result = map.shift_remove_entry(&1);",
          "    assert_eq!(result, Some((1, \"one\")));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "",
          "    let result = map.shift_remove_entry(&1);",
          "    let map: IndexMap<i32, &str, TestHasher> = IndexMap::default();",
          "    map.insert(1, \"one\");",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "    ",
          "    let result = map.shift_remove_entry(&1);",
          "    assert_eq!(result, Some((1, \"one\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]