[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket = Bucket {",
          "        hash: HashValue(1),",
          "        key: 42,",
          "        value: \"value\",",
          "    };",
          "    let key_ref = bucket.key_ref();",
          "}"
        ],
        "oracle": [
          "    let bucket = Bucket { hash: HashValue(1), key: 42, value: \"value\" };",
          "    let key_ref = bucket.key_ref();",
          "    assert_eq!(key_ref, &42);",
          "    assert_eq!(key_ref as *const _, &bucket.key as *const _);",
          "    assert_eq!(std::mem::size_of_val(key_ref), std::mem::size_of::<i32>());",
          "    assert!(std::ptr::eq(key_ref, &bucket.key));"
        ],
        "code": [
          "{",
          "    let bucket = Bucket {",
          "        hash: HashValue(1),",
          "        key: 42,",
          "        value: \"value\",",
          "    };",
          "    let key_ref = bucket.key_ref();",
          "    let bucket = Bucket { hash: HashValue(1), key: 42, value: \"value\" };",
          "    let key_ref = bucket.key_ref();",
          "    assert_eq!(key_ref, &42);",
          "    assert_eq!(key_ref as *const _, &bucket.key as *const _);",
          "    assert_eq!(std::mem::size_of_val(key_ref), std::mem::size_of::<i32>());",
          "    assert!(std::ptr::eq(key_ref, &bucket.key));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket = Bucket {",
          "        hash: HashValue(2),",
          "        key: 'a',",
          "        value: \"value\",",
          "    };",
          "    let key_ref = bucket.key_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key_ref, &'a');"
        ],
        "code": [
          "{",
          "    let bucket = Bucket {",
          "        hash: HashValue(2),",
          "        key: 'a',",
          "        value: \"value\",",
          "    };",
          "    let key_ref = bucket.key_ref();",
          "    assert_eq!(key_ref, &'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket = Bucket {",
          "        hash: HashValue(3),",
          "        key: (1, 2),",
          "        value: \"value\",",
          "    };",
          "    let key_ref = bucket.key_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key_ref, &(1, 2));",
          "    assert_eq!(std::mem::size_of_val(key_ref), std::mem::size_of::<(usize, usize)>());",
          "    assert!(key_ref == &(1, 2));",
          "    assert!(std::ptr::eq(key_ref, &bucket.key));",
          "    assert!(std::any::TypeId::of::<&_>() == std::any::TypeId::of::<&(usize, usize)>());",
          "    assert!(key_ref as *const _ == &bucket.key as *const _);"
        ],
        "code": [
          "{",
          "    let bucket = Bucket {",
          "        hash: HashValue(3),",
          "        key: (1, 2),",
          "        value: \"value\",",
          "    };",
          "    let key_ref = bucket.key_ref();",
          "    assert_eq!(key_ref, &(1, 2));",
          "    assert_eq!(std::mem::size_of_val(key_ref), std::mem::size_of::<(usize, usize)>());",
          "    assert!(key_ref == &(1, 2));",
          "    assert!(std::ptr::eq(key_ref, &bucket.key));",
          "    assert!(std::any::TypeId::of::<&_>() == std::any::TypeId::of::<&(usize, usize)>());",
          "    assert!(key_ref as *const _ == &bucket.key as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]