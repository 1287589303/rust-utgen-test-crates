[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.swap_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index(0), Some((&2, &20)));",
          "    assert_eq!(map.get_index(1), Some((&1, &10)));",
          "    assert_eq!(map.get_index(2), Some((&3, &30)));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.get_index(3).is_none());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.swap_indices(0, 1);",
          "    assert_eq!(map.get_index(0), Some((&2, &20)));",
          "    assert_eq!(map.get_index(1), Some((&1, &10)));",
          "    assert_eq!(map.get_index(2), Some((&3, &30)));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.get_index(3).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert!(map.len() == 2);",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(0, 0);",
          "    assert!(map.len() == 2);",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index(0), Some((&2, &20)));",
          "    assert_eq!(map.get_index(1), Some((&1, &10)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(std::panic::catch_unwind(|| map.swap_indices(0, 2)).is_err());",
          "    assert!(std::panic::catch_unwind(|| map.swap_indices(2, 1)).is_err());",
          "    map.swap_indices(0, 1);",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(0, 1);",
          "    assert_eq!(map.get_index(0), Some((&2, &20)));",
          "    assert_eq!(map.get_index(1), Some((&1, &10)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(std::panic::catch_unwind(|| map.swap_indices(0, 2)).is_err());",
          "    assert!(std::panic::catch_unwind(|| map.swap_indices(2, 1)).is_err());",
          "    map.swap_indices(0, 1);",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(1, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index(0), Some((&2, &20)));",
          "    assert_eq!(map.get_index(1), Some((&1, &10)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(matches!(map.swap_indices(2, 0), panic!()));",
          "    assert!(matches!(map.swap_indices(0, 2), panic!()));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(1, 0);",
          "    assert_eq!(map.get_index(0), Some((&2, &20)));",
          "    assert_eq!(map.get_index(1), Some((&1, &10)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(matches!(map.swap_indices(2, 0), panic!()));",
          "    assert!(matches!(map.swap_indices(0, 2), panic!()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.get_index(0).is_some());",
          "    assert!(map.get_index(1).is_some());",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "    assert!(map.get_index(2).is_none());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(0, 2);",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.get_index(0).is_some());",
          "    assert!(map.get_index(1).is_some());",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "    assert!(map.get_index(2).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(2, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "    assert_eq!(map.get_index(2), Some((&1, &10)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.first().is_some());",
          "    assert!(map.last().is_some());",
          "    assert!(map.first_entry().is_some());",
          "    assert!(map.last_entry().is_some());",
          "    assert!(!map.get_index_mut(3).is_some());",
          "    assert!(!map.get_index(3).is_some());",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "    assert_eq!(map.get_index(2), None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.swap_indices(2, 1);",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "    assert_eq!(map.get_index(2), Some((&1, &10)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.first().is_some());",
          "    assert!(map.last().is_some());",
          "    assert!(map.first_entry().is_some());",
          "    assert!(map.last_entry().is_some());",
          "    assert!(!map.get_index_mut(3).is_some());",
          "    assert!(!map.get_index(3).is_some());",
          "    assert_eq!(map.get_index(0), Some((&1, &10)));",
          "    assert_eq!(map.get_index(1), Some((&2, &20)));",
          "    assert_eq!(map.get_index(2), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.swap_indices(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    let result = std::panic::catch_unwind(|| { map.swap_indices(1, 2); });",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| { map.swap_indices(0, 1); });",
          "    assert!(result.is_err());",
          "    map.insert(1, 100);",
          "    map.insert(2, 200);",
          "    map.swap_indices(0, 1);",
          "    assert_eq!(map.get_index(0).unwrap().0, &2);",
          "    assert_eq!(map.get_index(1).unwrap().0, &1);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
          "    map.swap_indices(0, 0);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    let result = std::panic::catch_unwind(|| { map.swap_indices(1, 2); });",
          "    assert!(result.is_err());",
          "    let result = std::panic::catch_unwind(|| { map.swap_indices(0, 1); });",
          "    assert!(result.is_err());",
          "    map.insert(1, 100);",
          "    map.insert(2, 200);",
          "    map.swap_indices(0, 1);",
          "    assert_eq!(map.get_index(0).unwrap().0, &2);",
          "    assert_eq!(map.get_index(1).unwrap().0, &1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]