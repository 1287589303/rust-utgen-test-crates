[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "    ",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&1, &10)));"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "    ",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(0);",
          "    assert_eq!(result, Some((&1, &10)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&2, &20)));"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(2);",
          "    assert_eq!(result, Some((&2, &20)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(3);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestSlice {",
          "        entries: [Bucket<i32, i32>; 3],",
          "    }",
          "",
          "    let slice = TestSlice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "        ],",
          "    };",
          "    ",
          "    let result = slice.get_index(4);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]