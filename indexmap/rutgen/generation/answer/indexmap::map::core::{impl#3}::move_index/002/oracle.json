[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(2, 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries[2].key, 3);",
          "    assert_eq!(entries[3].key, 4);",
          "    assert_eq!(entries[4].key, 2);",
          "    assert_eq!(indices.find(HashValue(2).0), None);",
          "    assert_eq!(indices.find(HashValue(3).0), Some(4));",
          "    assert_eq!(indices.find(HashValue(4).0), Some(2));",
          "    assert_eq!(indices.find(HashValue(5).0), Some(5));",
          "    assert_eq!(indices.find(HashValue(6).0), Some(6));",
          "    assert_eq!(indices.find(HashValue(7).0), Some(7));",
          "    assert_eq!(indices.find(HashValue(8).0), Some(8));",
          "    assert_eq!(indices.find(HashValue(9).0), Some(9));"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(2, 4);",
          "    assert_eq!(entries[2].key, 3);",
          "    assert_eq!(entries[3].key, 4);",
          "    assert_eq!(entries[4].key, 2);",
          "    assert_eq!(indices.find(HashValue(2).0), None);",
          "    assert_eq!(indices.find(HashValue(3).0), Some(4));",
          "    assert_eq!(indices.find(HashValue(4).0), Some(2));",
          "    assert_eq!(indices.find(HashValue(5).0), Some(5));",
          "    assert_eq!(indices.find(HashValue(6).0), Some(6));",
          "    assert_eq!(indices.find(HashValue(7).0), Some(7));",
          "    assert_eq!(indices.find(HashValue(8).0), Some(8));",
          "    assert_eq!(indices.find(HashValue(9).0), Some(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(5, 5);",
          "}"
        ],
        "oracle": [
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![Bucket { hash: HashValue(0), key: 0, value: 0 }, Bucket { hash: HashValue(1), key: 1, value: 1 }, Bucket { hash: HashValue(2), key: 2, value: 2 }, Bucket { hash: HashValue(3), key: 3, value: 3 }, Bucket { hash: HashValue(4), key: 4, value: 4 }, Bucket { hash: HashValue(5), key: 5, value: 5 }, Bucket { hash: HashValue(6), key: 6, value: 6 }, Bucket { hash: HashValue(7), key: 7, value: 7 }, Bucket { hash: HashValue(8), key: 8, value: 8 }, Bucket { hash: HashValue(9), key: 9, value: 9 }];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(3, 7);",
          "    assert_eq!(entries[3], Bucket { hash: HashValue(3), key: 3, value: 3 });",
          "    assert_eq!(entries[4], Bucket { hash: HashValue(4), key: 4, value: 4 });",
          "    assert_eq!(entries[5], Bucket { hash: HashValue(5), key: 5, value: 5 });",
          "    assert_eq!(entries[6], Bucket { hash: HashValue(6), key: 6, value: 6 });",
          "    assert_eq!(entries[7], Bucket { hash: HashValue(7), key: 7, value: 7 });",
          "    assert_eq!(entries[8], Bucket { hash: HashValue(8), key: 8, value: 8 });",
          "    assert_eq!(entries[9], Bucket { hash: HashValue(9), key: 9, value: 9 });",
          "    assert_eq!(indices.len(), 10);",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(7, 3);",
          "    assert_eq!(entries[3], Bucket { hash: HashValue(4), key: 4, value: 4 });",
          "    assert_eq!(entries[4], Bucket { hash: HashValue(5), key: 5, value: 5 });",
          "    assert_eq!(entries[5], Bucket { hash: HashValue(3), key: 3, value: 3 });",
          "    assert_eq!(indices.len(), 10);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(5, 5);",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![Bucket { hash: HashValue(0), key: 0, value: 0 }, Bucket { hash: HashValue(1), key: 1, value: 1 }, Bucket { hash: HashValue(2), key: 2, value: 2 }, Bucket { hash: HashValue(3), key: 3, value: 3 }, Bucket { hash: HashValue(4), key: 4, value: 4 }, Bucket { hash: HashValue(5), key: 5, value: 5 }, Bucket { hash: HashValue(6), key: 6, value: 6 }, Bucket { hash: HashValue(7), key: 7, value: 7 }, Bucket { hash: HashValue(8), key: 8, value: 8 }, Bucket { hash: HashValue(9), key: 9, value: 9 }];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(3, 7);",
          "    assert_eq!(entries[3], Bucket { hash: HashValue(3), key: 3, value: 3 });",
          "    assert_eq!(entries[4], Bucket { hash: HashValue(4), key: 4, value: 4 });",
          "    assert_eq!(entries[5], Bucket { hash: HashValue(5), key: 5, value: 5 });",
          "    assert_eq!(entries[6], Bucket { hash: HashValue(6), key: 6, value: 6 });",
          "    assert_eq!(entries[7], Bucket { hash: HashValue(7), key: 7, value: 7 });",
          "    assert_eq!(entries[8], Bucket { hash: HashValue(8), key: 8, value: 8 });",
          "    assert_eq!(entries[9], Bucket { hash: HashValue(9), key: 9, value: 9 });",
          "    assert_eq!(indices.len(), 10);",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(7, 3);",
          "    assert_eq!(entries[3], Bucket { hash: HashValue(4), key: 4, value: 4 });",
          "    assert_eq!(entries[4], Bucket { hash: HashValue(5), key: 5, value: 5 });",
          "    assert_eq!(entries[5], Bucket { hash: HashValue(3), key: 3, value: 3 });",
          "    assert_eq!(indices.len(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(6, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ref_mut.entries[3].key, 6);",
          "    assert_eq!(ref_mut.entries[4].key, 7);",
          "    assert_eq!(ref_mut.entries[5].key, 8);",
          "    assert_eq!(ref_mut.entries[6].key, 9);",
          "    assert_eq!(ref_mut.entries.len(), 10);",
          "    assert_eq!(ref_mut.indices.find_mut(HashValue(2).get(), |&i| i == 6), None);",
          "    assert_eq!(ref_mut.indices.find_mut(HashValue(6).get(), |&i| i == usize::MAX), None);",
          "    assert_eq!(ref_mut.indices.find_mut(HashValue(6).get(), |&i| i == 3).is_some(), true);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(6, 3);",
          "    assert_eq!(ref_mut.entries[3].key, 6);",
          "    assert_eq!(ref_mut.entries[4].key, 7);",
          "    assert_eq!(ref_mut.entries[5].key, 8);",
          "    assert_eq!(ref_mut.entries[6].key, 9);",
          "    assert_eq!(ref_mut.entries.len(), 10);",
          "    assert_eq!(ref_mut.indices.find_mut(HashValue(2).get(), |&i| i == 6), None);",
          "    assert_eq!(ref_mut.indices.find_mut(HashValue(6).get(), |&i| i == usize::MAX), None);",
          "    assert_eq!(ref_mut.indices.find_mut(HashValue(6).get(), |&i| i == 3).is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(9, 1);",
          "}"
        ],
        "oracle": [
          "    assert!(ref_mut.entries[1].key == 9);",
          "    assert!(ref_mut.entries[9].key == 8);",
          "    assert!(indices.len() == 10);",
          "    assert!(indices.get(HashValue(9).0) == Some(1));",
          "    assert!(indices.get(HashValue(8).0) == Some(9));",
          "    assert!(indices.get(HashValue(0).0) == Some(0));",
          "    assert!(indices.get(HashValue(1).0) == Some(2));",
          "    assert!(indices.get(HashValue(2).0) == Some(3));",
          "    assert!(indices.get(HashValue(3).0) == Some(4));",
          "    assert!(indices.get(HashValue(4).0) == Some(5));",
          "    assert!(indices.get(HashValue(5).0) == Some(6));",
          "    assert!(indices.get(HashValue(6).0) == Some(7));",
          "    assert!(indices.get(HashValue(7).0) == Some(8));",
          "    assert!(indices.get(HashValue(9).0) == Some(1));",
          "    assert!(ref_mut.entries.len() == 10);",
          "    assert!(ref_mut.entries[1].value == 1);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(9, 1);",
          "    assert!(ref_mut.entries[1].key == 9);",
          "    assert!(ref_mut.entries[9].key == 8);",
          "    assert!(indices.len() == 10);",
          "    assert!(indices.get(HashValue(9).0) == Some(1));",
          "    assert!(indices.get(HashValue(8).0) == Some(9));",
          "    assert!(indices.get(HashValue(0).0) == Some(0));",
          "    assert!(indices.get(HashValue(1).0) == Some(2));",
          "    assert!(indices.get(HashValue(2).0) == Some(3));",
          "    assert!(indices.get(HashValue(3).0) == Some(4));",
          "    assert!(indices.get(HashValue(4).0) == Some(5));",
          "    assert!(indices.get(HashValue(5).0) == Some(6));",
          "    assert!(indices.get(HashValue(6).0) == Some(7));",
          "    assert!(indices.get(HashValue(7).0) == Some(8));",
          "    assert!(indices.get(HashValue(9).0) == Some(1));",
          "    assert!(ref_mut.entries.len() == 10);",
          "    assert!(ref_mut.entries[1].value == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]