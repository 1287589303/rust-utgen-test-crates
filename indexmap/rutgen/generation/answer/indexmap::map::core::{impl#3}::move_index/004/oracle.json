[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(1), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 20 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert_eq!(entries[1].key, 2);",
          "    assert_eq!(entries[1].value, 20);",
          "    assert_eq!(indices.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(1), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 20 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(0, 0);",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert_eq!(entries[1].key, 2);",
          "    assert_eq!(entries[1].value, 20);",
          "    assert_eq!(indices.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(1), key: 1, value: 10 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(indices.len(), 0);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert_eq!(entries[0].hash, HashValue(1));"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(1), key: 1, value: 10 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.move_index(0, 0);",
          "    assert_eq!(indices.len(), 0);",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert_eq!(entries[0].hash, HashValue(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]