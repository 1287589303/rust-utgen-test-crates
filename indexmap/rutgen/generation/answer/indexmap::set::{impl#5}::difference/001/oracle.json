[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    set2.insert(4);",
          "    set2.insert(5);",
          "    set2.insert(6);",
          "",
          "    let _diff = set1.difference(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert_eq!(set2.difference(&set1).iter().collect::<Vec<_>>(), vec![4, 5, 6]);",
          "    set1.insert(4);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 2, 3, 4]);",
          "    set1.insert(2);",
          "    set2.insert(2);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 4]);",
          "    set1.insert(5);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 4]);",
          "    set1.insert(6);",
          "    set1.insert(7);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 6, 7]);",
          "    set2.insert(7);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 6]);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    set2.insert(4);",
          "    set2.insert(5);",
          "    set2.insert(6);",
          "",
          "    let _diff = set1.difference(&set2);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert_eq!(set2.difference(&set1).iter().collect::<Vec<_>>(), vec![4, 5, 6]);",
          "    set1.insert(4);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 2, 3, 4]);",
          "    set1.insert(2);",
          "    set2.insert(2);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 4]);",
          "    set1.insert(5);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 4]);",
          "    set1.insert(6);",
          "    set1.insert(7);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 6, 7]);",
          "    set2.insert(7);",
          "    assert_eq!(set1.difference(&set2).iter().collect::<Vec<_>>(), vec![1, 3, 6]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "    set2.insert(4);",
          "",
          "    let _diff = set1.difference(&set2);",
          "}"
        ],
        "oracle": [
          "    _diff.iter.collect::<Vec<_>>() == vec![1]",
          "    _diff.iter.count() == 1",
          "    set1.difference(&set2).as_entries().len() == 1",
          "    set1.difference(&set2).as_entries()[0] == 1",
          "    set1.difference(&set2).into_entries() == vec![1]",
          "    set1.difference(&set2).as_entries_mut()[0] = 10; assert_eq!(set1.difference(&set2).as_entries()[0], 10);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "    set2.insert(4);",
          "",
          "    let _diff = set1.difference(&set2);",
          "    _diff.iter.collect::<Vec<_>>() == vec![1]",
          "    _diff.iter.count() == 1",
          "    set1.difference(&set2).as_entries().len() == 1",
          "    set1.difference(&set2).as_entries()[0] == 1",
          "    set1.difference(&set2).into_entries() == vec![1]",
          "    set1.difference(&set2).as_entries_mut()[0] = 10; assert_eq!(set1.difference(&set2).as_entries()[0], 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "    ",
          "    let _diff = set1.difference(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set1.difference(&set2).iter().count(), 0);",
          "    set1.insert(4);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 1);",
          "    assert!(set1.difference(&set2).iter().any(|&x| x == 4);",
          "    set2.insert(4);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 0);",
          "    set1.insert(5);",
          "    set2.insert(6);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 1);",
          "    assert!(set1.difference(&set2).iter().any(|&x| x == 5);",
          "    let empty_set: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    assert_eq!(set1.difference(&empty_set).iter().count(), 3);",
          "    set1.clear();",
          "    assert_eq!(set1.difference(&set2).iter().count(), 0);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "    ",
          "    let _diff = set1.difference(&set2);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 0);",
          "    set1.insert(4);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 1);",
          "    assert!(set1.difference(&set2).iter().any(|&x| x == 4);",
          "    set2.insert(4);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 0);",
          "    set1.insert(5);",
          "    set2.insert(6);",
          "    assert_eq!(set1.difference(&set2).iter().count(), 1);",
          "    assert!(set1.difference(&set2).iter().any(|&x| x == 5);",
          "    let empty_set: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    assert_eq!(set1.difference(&empty_set).iter().count(), 3);",
          "    set1.clear();",
          "    assert_eq!(set1.difference(&set2).iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "",
          "    let _diff = set1.difference(&set2);",
          "}"
        ],
        "oracle": [
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    ",
          "    set1.insert(1);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![1]);",
          "    ",
          "    set1.insert(2);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![1, 2]);",
          "    ",
          "    set1.insert(3);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    ",
          "    set2.insert(1);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![2, 3]);",
          "    ",
          "    set2.insert(2);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![3]);",
          "    ",
          "    set2.insert(3);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![]);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "",
          "    let _diff = set1.difference(&set2);",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    ",
          "    set1.insert(1);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![1]);",
          "    ",
          "    set1.insert(2);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![1, 2]);",
          "    ",
          "    set1.insert(3);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    ",
          "    set2.insert(1);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![2, 3]);",
          "    ",
          "    set2.insert(2);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![3]);",
          "    ",
          "    set2.insert(3);",
          "    assert_eq!(set1.difference(&set2).collect::<Vec<_>>(), vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set2.insert(1);",
          "    ",
          "    let _diff = set1.difference(&set2);",
          "    ",
          "    set2.insert(2);",
          "    let _diff_two = set1.difference(&set2);",
          "    ",
          "    set1.insert(3);",
          "    let _diff_three = set1.difference(&set2);",
          "}"
        ],
        "oracle": [
          "    set1.insert(1); assert!(_diff.as_entries().is_empty());",
          "    set2.insert(2); assert_eq!(_diff_two.as_entries(), &[1]);",
          "    set1.insert(3); assert_eq!(_diff_three.as_entries(), &[1, 3]);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::hash::SipHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::hash::SipHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set1: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "    let mut set2: super::IndexSet<i32, TestHasher> = super::IndexSet { map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher } };",
          "",
          "    set1.insert(1);",
          "    set2.insert(1);",
          "    ",
          "    let _diff = set1.difference(&set2);",
          "    ",
          "    set2.insert(2);",
          "    let _diff_two = set1.difference(&set2);",
          "    ",
          "    set1.insert(3);",
          "    let _diff_three = set1.difference(&set2);",
          "    set1.insert(1); assert!(_diff.as_entries().is_empty());",
          "    set2.insert(2); assert_eq!(_diff_two.as_entries(), &[1]);",
          "    set1.insert(3); assert_eq!(_diff_three.as_entries(), &[1, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]