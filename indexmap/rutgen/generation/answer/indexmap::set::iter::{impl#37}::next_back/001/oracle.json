[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter(vec![1, 2, 3]);",
          "    let set2 = IndexSet::<u32, TestHasher>::from_iter(vec![3, 4, 5]);",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    let _ = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next_back(), Some(5));",
          "    assert_eq!(iter.next_back(), Some(4));",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    assert_eq!(iter.next_back(), None);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter(vec![1, 2, 3]);",
          "    let set2 = IndexSet::<u32, TestHasher>::from_iter(vec![3, 4, 5]);",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    let _ = iter.next_back();",
          "    assert_eq!(iter.next_back(), Some(5));",
          "    assert_eq!(iter.next_back(), Some(4));",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    assert_eq!(iter.next_back(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter(vec![1]);",
          "    let set2 = IndexSet::<u32, TestHasher>::from_iter(vec![1]);",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    let _ = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next_back(), None);",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter(vec![1]);",
          "    let set2 = IndexSet::<u32, TestHasher>::from_iter(vec![1]);",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    let _ = iter.next_back();",
          "    assert_eq!(iter.next_back(), None);",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "    ",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter(vec![1, 2, 3]);",
          "    let set2 = IndexSet::<u32, TestHasher>::new();",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    let _ = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next_back(), Some(3));",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), None);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "    ",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter(vec![1, 2, 3]);",
          "    let set2 = IndexSet::<u32, TestHasher>::new();",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    let _ = iter.next_back();",
          "    assert_eq!(iter.next_back(), Some(3));",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter((1..1000).collect::<Vec<u32>>());",
          "    let set2 = IndexSet::<u32, TestHasher>::from_iter((500..1500).collect::<Vec<u32>>());",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    while let Some(_) = iter.next_back() {}",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), Some(499));",
          "    assert_eq!(iter.next_back(), None);",
          "    assert_eq!(iter.next_back(), None);",
          "    let mut iter = symmetric_diff;",
          "    let collected: Vec<_> = iter.collect();",
          "    assert_eq!(collected.len(), 1000);",
          "    assert!(collected.contains(&1));",
          "    assert!(collected.contains(&499));",
          "    assert!(!collected.contains(&500));",
          "    assert!(!collected.contains(&1000));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    // Implement required BuildHasher trait methods here",
          "",
          "    let hasher1 = TestHasher;",
          "    let hasher2 = TestHasher;",
          "",
          "    let set1 = IndexSet::<u32, TestHasher>::from_iter((1..1000).collect::<Vec<u32>>());",
          "    let set2 = IndexSet::<u32, TestHasher>::from_iter((500..1500).collect::<Vec<u32>>());",
          "",
          "    let difference1 = Difference {",
          "        iter: set1.iter(),",
          "        other: &set2,",
          "    };",
          "",
          "    let difference2 = Difference {",
          "        iter: set2.iter(),",
          "        other: &set1,",
          "    };",
          "",
          "    let symmetric_diff = SymmetricDifference {",
          "        iter: difference1.chain(difference2),",
          "    };",
          "",
          "    let mut iter = symmetric_diff;",
          "    while let Some(_) = iter.next_back() {}",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), Some(499));",
          "    assert_eq!(iter.next_back(), None);",
          "    assert_eq!(iter.next_back(), None);",
          "    let mut iter = symmetric_diff;",
          "    let collected: Vec<_> = iter.collect();",
          "    assert_eq!(collected.len(), 1000);",
          "    assert!(collected.contains(&1));",
          "    assert!(collected.contains(&499));",
          "    assert!(!collected.contains(&500));",
          "    assert!(!collected.contains(&1000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]