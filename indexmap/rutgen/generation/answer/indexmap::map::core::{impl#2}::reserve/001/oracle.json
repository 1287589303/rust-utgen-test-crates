[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(2);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    ",
          "    // Initial capacity is 2, len is 2, so additional must be > 0",
          "    let additional = 1; ",
          "    map.reserve(additional);",
          "}"
        ],
        "oracle": [
          "    assert!(map.entries.capacity() > 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.len(), 0);",
          "    assert!(map.entries.len() + 1 <= map.entries.capacity());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(2);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    ",
          "    // Initial capacity is 2, len is 2, so additional must be > 0",
          "    let additional = 1; ",
          "    map.reserve(additional);",
          "    assert!(map.entries.capacity() > 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.len(), 0);",
          "    assert!(map.entries.len() + 1 <= map.entries.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    ",
          "    // Initial capacity is 3, len is 3, additional must be 1",
          "    let additional = 1; ",
          "    map.reserve(additional);",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    assert_eq!(map.entries.capacity(), 3);",
          "    assert_eq!(map.entries.len(), 3);",
          "    let additional = 1;",
          "    map.reserve(additional);",
          "    assert!(map.entries.capacity() >= 4);",
          "    assert_eq!(map.entries.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    ",
          "    // Initial capacity is 3, len is 3, additional must be 1",
          "    let additional = 1; ",
          "    map.reserve(additional);",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    assert_eq!(map.entries.capacity(), 3);",
          "    assert_eq!(map.entries.len(), 3);",
          "    let additional = 1;",
          "    map.reserve(additional);",
          "    assert!(map.entries.capacity() >= 4);",
          "    assert_eq!(map.entries.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(5);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    ",
          "    // Initial capacity is 5, len is 2, additional can be 3",
          "    let additional = 3; ",
          "    map.reserve(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.capacity(), 8);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.indices.capacity() >= 5);",
          "    assert!(map.indices.len() == 0);",
          "    assert!(map.entries[0].key == 1);",
          "    assert!(map.entries[0].value == 10);",
          "    assert!(map.entries[1].key == 2);",
          "    assert!(map.entries[1].value == 20);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(5);",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    ",
          "    // Initial capacity is 5, len is 2, additional can be 3",
          "    let additional = 3; ",
          "    map.reserve(additional);",
          "    assert_eq!(map.entries.capacity(), 8);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.indices.capacity() >= 5);",
          "    assert!(map.indices.len() == 0);",
          "    assert!(map.entries[0].key == 1);",
          "    assert!(map.entries[0].value == 10);",
          "    assert!(map.entries[1].key == 2);",
          "    assert!(map.entries[1].value == 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]