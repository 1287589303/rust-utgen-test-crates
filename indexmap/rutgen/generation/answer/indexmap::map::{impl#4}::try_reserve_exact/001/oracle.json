[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(0);",
          "}"
        ],
        "oracle": [
          "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let result = index_map.try_reserve_exact(0);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    let result = index_map.try_reserve_exact(3);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 5);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let result = index_map.try_reserve_exact(10);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 10);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    let result = index_map.try_reserve_exact(5);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 10);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    let result = index_map.try_reserve_exact(2);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 5);",
          "    assert_eq!(index_map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(0);",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let result = index_map.try_reserve_exact(0);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    let result = index_map.try_reserve_exact(3);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 5);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let result = index_map.try_reserve_exact(10);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 10);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    let result = index_map.try_reserve_exact(5);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 10);",
          "    assert_eq!(index_map.len(), 0);",
          "    ",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    let result = index_map.try_reserve_exact(2);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(index_map.capacity() >= 5);",
          "    assert_eq!(index_map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.try_reserve_exact(1).is_ok());",
          "    assert_eq!(index_map.capacity(), 5);",
          "    assert!(index_map.core.entries.len() <= 5);",
          "    assert!(index_map.core.capacity() >= 1);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(1);",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.try_reserve_exact(1).is_ok());",
          "    assert_eq!(index_map.capacity(), 5);",
          "    assert!(index_map.core.entries.len() <= 5);",
          "    assert!(index_map.core.capacity() >= 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(10);",
          "}"
        ],
        "oracle": [
          "    assert!(index_map.capacity() >= 20);",
          "    assert_eq!(index_map.try_reserve_exact(0), Ok(()));",
          "    assert!(index_map.try_reserve_exact(5).is_ok());",
          "    assert!(index_map.try_reserve_exact(15).is_err());",
          "    assert!(index_map.len() == 0);",
          "    assert!(index_map.is_empty() == true);",
          "    assert!(index_map.try_reserve_exact(10).is_ok());",
          "    assert!(index_map.capacity() >= 20);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(10);",
          "    assert!(index_map.capacity() >= 20);",
          "    assert_eq!(index_map.try_reserve_exact(0), Ok(()));",
          "    assert!(index_map.try_reserve_exact(5).is_ok());",
          "    assert!(index_map.try_reserve_exact(15).is_err());",
          "    assert!(index_map.len() == 0);",
          "    assert!(index_map.is_empty() == true);",
          "    assert!(index_map.try_reserve_exact(10).is_ok());",
          "    assert!(index_map.capacity() >= 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(100, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(50);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.capacity(), 100);",
          "    assert!(index_map.len() == 0);",
          "    assert!(index_map.try_reserve_exact(50).is_ok());",
          "    assert!(index_map.capacity() >= 150);",
          "    assert!(index_map.try_reserve_exact(0).is_ok());",
          "    assert!(index_map.try_reserve_exact(100).is_ok());",
          "    assert!(index_map.try_reserve_exact(200).is_ok());",
          "    assert!(index_map.try_reserve_exact(150).is_ok());",
          "    assert!(index_map.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(100, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(50);",
          "    assert_eq!(index_map.capacity(), 100);",
          "    assert!(index_map.len() == 0);",
          "    assert!(index_map.try_reserve_exact(50).is_ok());",
          "    assert!(index_map.capacity() >= 150);",
          "    assert!(index_map.try_reserve_exact(0).is_ok());",
          "    assert!(index_map.try_reserve_exact(100).is_ok());",
          "    assert!(index_map.try_reserve_exact(200).is_ok());",
          "    assert!(index_map.try_reserve_exact(150).is_ok());",
          "    assert!(index_map.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(IndexMapCore::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "}"
        ],
        "oracle": [
          "    let mut index_map = IndexMap::with_capacity_and_hasher(IndexMapCore::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    let result = index_map.try_reserve_exact(IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert!(result.is_err(), \"Expected an error when reserving beyond max capacity\");"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(IndexMapCore::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    let _ = index_map.try_reserve_exact(IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    let mut index_map = IndexMap::with_capacity_and_hasher(IndexMapCore::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    let result = index_map.try_reserve_exact(IndexMapCore::MAX_ENTRIES_CAPACITY + 1);",
          "    assert!(result.is_err(), \"Expected an error when reserving beyond max capacity\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]