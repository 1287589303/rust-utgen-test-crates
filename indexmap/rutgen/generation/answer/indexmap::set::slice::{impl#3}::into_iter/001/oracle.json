[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: 1, value: \"a\" },",
          "        Bucket { hash: HashValue::new(2), key: 2, value: \"b\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 2);",
          "    assert_eq!(slice.first(), Some(&1));",
          "    assert_eq!(slice.last(), Some(&2));",
          "    assert!(!slice.is_empty());",
          "    assert_eq!(slice.get_index(0), Some(&1));",
          "    assert_eq!(slice.get_index(1), Some(&2));",
          "    assert_eq!(slice.get_range(0..2).unwrap().len(), 2);",
          "    assert_eq!(slice.split_at(1).0.len(), 1);",
          "    assert_eq!(slice.split_at(1).1.len(), 1);",
          "    assert_eq!(slice.split_first().unwrap().0, &1);",
          "    assert_eq!(slice.split_last().unwrap().0, &2);"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: 1, value: \"a\" },",
          "        Bucket { hash: HashValue::new(2), key: 2, value: \"b\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "    assert_eq!(iter.len(), 2);",
          "    assert_eq!(slice.first(), Some(&1));",
          "    assert_eq!(slice.last(), Some(&2));",
          "    assert!(!slice.is_empty());",
          "    assert_eq!(slice.get_index(0), Some(&1));",
          "    assert_eq!(slice.get_index(1), Some(&2));",
          "    assert_eq!(slice.get_range(0..2).unwrap().len(), 2);",
          "    assert_eq!(slice.split_at(1).0.len(), 1);",
          "    assert_eq!(slice.split_at(1).1.len(), 1);",
          "    assert_eq!(slice.split_first().unwrap().0, &1);",
          "    assert_eq!(slice.split_last().unwrap().0, &2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: 1, value: \"a\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "}"
        ],
        "oracle": [
          "    let buckets = vec![Bucket { hash: HashValue::new(1), key: 1, value: \"a\" }];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "    assert_eq!(iter.len(), 1);",
          "    assert_eq!(iter.as_slice().len(), 1);",
          "    assert_eq!(iter.as_slice().get_index(0), Some(&\"a\"));"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: 1, value: \"a\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "    let buckets = vec![Bucket { hash: HashValue::new(1), key: 1, value: \"a\" }];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "    assert_eq!(iter.len(), 1);",
          "    assert_eq!(iter.as_slice().len(), 1);",
          "    assert_eq!(iter.as_slice().get_index(0), Some(&\"a\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(3), key: 3, value: \"c\" },",
          "        Bucket { hash: HashValue::new(4), key: 4, value: \"d\" },",
          "        Bucket { hash: HashValue::new(5), key: 5, value: \"e\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "}"
        ],
        "oracle": [
          "    let expected_iter_length = 3;",
          "    let expected_first_bucket_key = 3;",
          "    let expected_last_bucket_key = 5;",
          "    let expected_second_bucket_value = \"d\";",
          "    let expected_iter_values = vec![\"c\", \"d\", \"e\"];",
          "    assert_eq!(iter.len(), expected_iter_length);",
          "    assert_eq!(iter.first().map(|b| b.key), Some(expected_first_bucket_key));",
          "    assert_eq!(iter.last().map(|b| b.key), Some(expected_last_bucket_key));",
          "    assert_eq!(iter.get_index(1).map(|b| b.value), Some(expected_second_bucket_value));",
          "    assert_eq!(slice.as_slice().len(), expected_iter_length);",
          "    assert!(!slice.as_slice().is_empty());"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(3), key: 3, value: \"c\" },",
          "        Bucket { hash: HashValue::new(4), key: 4, value: \"d\" },",
          "        Bucket { hash: HashValue::new(5), key: 5, value: \"e\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets });",
          "    let iter = slice.into_iter();",
          "    let expected_iter_length = 3;",
          "    let expected_first_bucket_key = 3;",
          "    let expected_last_bucket_key = 5;",
          "    let expected_second_bucket_value = \"d\";",
          "    let expected_iter_values = vec![\"c\", \"d\", \"e\"];",
          "    assert_eq!(iter.len(), expected_iter_length);",
          "    assert_eq!(iter.first().map(|b| b.key), Some(expected_first_bucket_key));",
          "    assert_eq!(iter.last().map(|b| b.key), Some(expected_last_bucket_key));",
          "    assert_eq!(iter.get_index(1).map(|b| b.value), Some(expected_second_bucket_value));",
          "    assert_eq!(slice.as_slice().len(), expected_iter_length);",
          "    assert!(!slice.as_slice().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]