[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    ",
          "    let result: &Slice<TestType> = Slice::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert!(result.get_index(0).is_none());",
          "    assert!(result.first().is_none());",
          "    assert!(result.last().is_none());",
          "    assert!(result.split_first().is_none());",
          "    assert!(result.split_last().is_none());",
          "    assert_eq!(result.get_range(0..1), None);",
          "    assert_eq!(result.binary_search(&TestType), Err(0));",
          "    assert_eq!(result.binary_search_by(|_| Ordering::Less), Err(0));",
          "    assert_eq!(result.partition_point(|_| false), 0);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    ",
          "    let result: &Slice<TestType> = Slice::new();",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert!(result.get_index(0).is_none());",
          "    assert!(result.first().is_none());",
          "    assert!(result.last().is_none());",
          "    assert!(result.split_first().is_none());",
          "    assert!(result.split_last().is_none());",
          "    assert_eq!(result.get_range(0..1), None);",
          "    assert_eq!(result.binary_search(&TestType), Err(0));",
          "    assert_eq!(result.binary_search_by(|_| Ordering::Less), Err(0));",
          "    assert_eq!(result.partition_point(|_| false), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherType;",
          "",
          "    let result: &Slice<AnotherType> = Slice::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.get_index(0), None);",
          "    assert_eq!(result.first(), None);",
          "    assert_eq!(result.last(), None);",
          "    assert_eq!(result.split_first(), None);",
          "    assert_eq!(result.split_last(), None);",
          "    assert_eq!(result.iter().count(), 0);"
        ],
        "code": [
          "{",
          "    struct AnotherType;",
          "",
          "    let result: &Slice<AnotherType> = Slice::new();",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.get_index(0), None);",
          "    assert_eq!(result.first(), None);",
          "    assert_eq!(result.last(), None);",
          "    assert_eq!(result.split_first(), None);",
          "    assert_eq!(result.split_last(), None);",
          "    assert_eq!(result.iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]