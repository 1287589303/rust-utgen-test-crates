[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = vec![];",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.index(), 0);",
          "    indices.push(1);",
          "    assert_eq!(entry.index(), 1);",
          "    indices.push(2);",
          "    assert_eq!(entry.index(), 2);",
          "    indices.clear();",
          "    assert_eq!(entry.index(), 0);",
          "    indices.push(3);",
          "    indices.push(4);",
          "    assert_eq!(entry.index(), 2);"
        ],
        "code": [
          "{",
          "    let mut indices = vec![];",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "    assert_eq!(entry.index(), 0);",
          "    indices.push(1);",
          "    assert_eq!(entry.index(), 1);",
          "    indices.push(2);",
          "    assert_eq!(entry.index(), 2);",
          "    indices.clear();",
          "    assert_eq!(entry.index(), 0);",
          "    indices.push(3);",
          "    indices.push(4);",
          "    assert_eq!(entry.index(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = vec![0];",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.index(), 1);"
        ],
        "code": [
          "{",
          "    let mut indices = vec![0];",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "    assert_eq!(entry.index(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = vec![0, 1, 2, 3, 4];",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.index(), 5);"
        ],
        "code": [
          "{",
          "    let mut indices = vec![0, 1, 2, 3, 4];",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "    assert_eq!(entry.index(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = (0..1000).collect::<Vec<_>>();",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.index(), 1000);"
        ],
        "code": [
          "{",
          "    let mut indices = (0..1000).collect::<Vec<_>>();",
          "    let entries = Entries::<i32, i32>::new();",
          "    let map = RefMut { indices: &mut indices, entries: &mut entries };",
          "    let entry = RawVacantEntryMut { map: map, hash_builder: &Default::default() };",
          "    let _ = entry.index();",
          "    assert_eq!(entry.index(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]