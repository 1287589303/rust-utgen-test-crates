[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_off(0);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_off(0);",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(result.capacity(), 0);",
          "    assert!(result.indices.is_empty());",
          "    assert!(result.entries.is_empty());",
          "    let result_at_len = map.split_off(map.len());",
          "    assert_eq!(result_at_len.len(), 0);",
          "    assert_eq!(result_at_len.capacity(), 0);",
          "    assert!(result_at_len.indices.is_empty());",
          "    assert!(result_at_len.entries.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_off(0);",
          "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_off(0);",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(result.capacity(), 0);",
          "    assert!(result.indices.is_empty());",
          "    assert!(result.entries.is_empty());",
          "    let result_at_len = map.split_off(map.len());",
          "    assert_eq!(result_at_len.len(), 0);",
          "    assert_eq!(result_at_len.capacity(), 0);",
          "    assert!(result_at_len.indices.is_empty());",
          "    assert!(result_at_len.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
          "    for i in 0..5 {",
          "        map.entries.push(Bucket {",
          "            hash: HashValue::from(i as u64),",
          "            key: i,",
          "            value: i * 10,",
          "        });",
          "    }",
          "    let result = map.split_off(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.entries.len(), 0);",
          "    assert_eq!(result.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 5);",
          "    assert_eq!(map.indices.len(), 5);",
          "    assert!(map.entries.is_empty() == false);",
          "    assert!(result.entries.is_empty());",
          "    assert!(result.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
          "    for i in 0..5 {",
          "        map.entries.push(Bucket {",
          "            hash: HashValue::from(i as u64),",
          "            key: i,",
          "            value: i * 10,",
          "        });",
          "    }",
          "    let result = map.split_off(5);",
          "    assert_eq!(result.entries.len(), 0);",
          "    assert_eq!(result.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 5);",
          "    assert_eq!(map.indices.len(), 5);",
          "    assert!(map.entries.is_empty() == false);",
          "    assert!(result.entries.is_empty());",
          "    assert!(result.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.entries.push(Bucket {",
          "        hash: HashValue::from(1),",
          "        key: 1,",
          "        value: 10,",
          "    });",
          "    let result = map.split_off(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.entries.len(), 0);",
          "    assert_eq!(result.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.entries.push(Bucket {",
          "        hash: HashValue::from(1),",
          "        key: 1,",
          "        value: 10,",
          "    });",
          "    let result = map.split_off(1);",
          "    assert_eq!(result.entries.len(), 0);",
          "    assert_eq!(result.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(3);",
          "    for i in 0..3 {",
          "        map.entries.push(Bucket {",
          "            hash: HashValue::from(i as u64),",
          "            key: i,",
          "            value: i * 10,",
          "        });",
          "    }",
          "    let result = map.split_off(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.entries.len(), 2);",
          "    assert_eq!(result.entries[0].key, 1);",
          "    assert_eq!(result.entries[0].value, 10);",
          "    assert_eq!(result.entries[1].key, 2);",
          "    assert_eq!(result.entries[1].value, 20);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 0);",
          "    assert_eq!(map.entries[0].value, 0);",
          "    assert!(map.indices.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(3);",
          "    for i in 0..3 {",
          "        map.entries.push(Bucket {",
          "            hash: HashValue::from(i as u64),",
          "            key: i,",
          "            value: i * 10,",
          "        });",
          "    }",
          "    let result = map.split_off(1);",
          "    assert_eq!(result.entries.len(), 2);",
          "    assert_eq!(result.entries[0].key, 1);",
          "    assert_eq!(result.entries[0].value, 10);",
          "    assert_eq!(result.entries[1].key, 2);",
          "    assert_eq!(result.entries[1].value, 20);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 0);",
          "    assert_eq!(map.entries[0].value, 0);",
          "    assert!(map.indices.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]