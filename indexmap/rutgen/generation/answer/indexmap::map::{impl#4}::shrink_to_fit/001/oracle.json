[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    map.shrink_to_fit();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 1);",
          "    map.insert(2, 2);",
          "    map.insert(3, 3);",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.capacity() <= 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.iter().count() == 3);",
          "    assert!(map.get(&1).is_some());",
          "    assert!(map.get(&2).is_some());",
          "    assert!(map.get(&3).is_some());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 1);",
          "    map.insert(2, 2);",
          "    map.insert(3, 3);",
          "    map.shrink_to_fit();",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.capacity() <= 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.iter().count() == 3);",
          "    assert!(map.get(&1).is_some());",
          "    assert!(map.get(&2).is_some());",
          "    assert!(map.get(&3).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        map.insert(i, i);",
          "    }",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.capacity() < IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), (0..IndexMapCore::MAX_ENTRIES_CAPACITY).collect::<Vec<_>>());",
          "    assert_eq!(map.values().collect::<Vec<_>>(), (0..IndexMapCore::MAX_ENTRIES_CAPACITY).collect::<Vec<_>>());",
          "    assert_eq!(map.iter().count(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(map.iter_mut().count(), IndexMapCore::MAX_ENTRIES_CAPACITY);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        map.insert(i, i);",
          "    }",
          "    map.shrink_to_fit();",
          "    assert_eq!(map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.capacity() < IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), (0..IndexMapCore::MAX_ENTRIES_CAPACITY).collect::<Vec<_>>());",
          "    assert_eq!(map.values().collect::<Vec<_>>(), (0..IndexMapCore::MAX_ENTRIES_CAPACITY).collect::<Vec<_>>());",
          "    assert_eq!(map.iter().count(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(map.iter_mut().count(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 1);",
          "    map.insert(2, 2);",
          "    map.remove(&1);",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.iter().count() == 0);",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 1);",
          "    map.insert(2, 2);",
          "    map.remove(&1);",
          "    map.shrink_to_fit();",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.iter().count() == 0);",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]