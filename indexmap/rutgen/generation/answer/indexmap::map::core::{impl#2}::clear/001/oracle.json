[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    index_map.clear();",
          "}"
        ],
        "oracle": [
          "    let index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.entries.is_empty());",
          "    assert!(index_map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    index_map.clear();",
          "    let index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.entries.is_empty());",
          "    assert!(index_map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    index_map.insert_full(1, 1, 10);",
          "    index_map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 0);",
          "    assert_eq!(index_map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.get_index_of(1, &1).is_none());",
          "    assert!(index_map.entries.is_empty());",
          "    assert!(index_map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    index_map.insert_full(1, 1, 10);",
          "    index_map.clear();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert_eq!(index_map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.get_index_of(1, &1).is_none());",
          "    assert!(index_map.entries.is_empty());",
          "    assert!(index_map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.insert_full(1, i, i as usize);",
          "    }",
          "    index_map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 0);",
          "    assert_eq!(index_map.capacity(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.get_index_of(1, &0).is_none());",
          "    assert!(index_map.entries.is_empty());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.insert_full(1, i, i as usize);",
          "    }",
          "    index_map.clear();",
          "    assert_eq!(index_map.len(), 0);",
          "    assert_eq!(index_map.capacity(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.get_index_of(1, &0).is_none());",
          "    assert!(index_map.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]