[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(1);",
          "    set.insert(3);",
          "    set.insert(5);",
          "    set.insert(7);",
          "    ",
          "    let result = set.binary_search_by_key(&3, |&x| x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1));",
          "    result = set.binary_search_by_key(&4, |&x| x);",
          "    assert_eq!(result, Err(2));",
          "    result = set.binary_search_by_key(&1, |&x| x);",
          "    assert_eq!(result, Ok(0));",
          "    result = set.binary_search_by_key(&7, |&x| x);",
          "    assert_eq!(result, Ok(3));",
          "    result = set.binary_search_by_key(&8, |&x| x);",
          "    assert_eq!(result, Err(4));",
          "    result = set.binary_search_by_key(&0, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    set.clear();",
          "    result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    set.insert(2);",
          "    set.insert(4);",
          "    result = set.binary_search_by_key(&2, |&x| x);",
          "    assert_eq!(result, Ok(0));",
          "    result = set.binary_search_by_key(&4, |&x| x);",
          "    assert_eq!(result, Ok(1));",
          "    result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Err(1));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(1);",
          "    set.insert(3);",
          "    set.insert(5);",
          "    set.insert(7);",
          "    ",
          "    let result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Ok(1));",
          "    result = set.binary_search_by_key(&4, |&x| x);",
          "    assert_eq!(result, Err(2));",
          "    result = set.binary_search_by_key(&1, |&x| x);",
          "    assert_eq!(result, Ok(0));",
          "    result = set.binary_search_by_key(&7, |&x| x);",
          "    assert_eq!(result, Ok(3));",
          "    result = set.binary_search_by_key(&8, |&x| x);",
          "    assert_eq!(result, Err(4));",
          "    result = set.binary_search_by_key(&0, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    set.clear();",
          "    result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    set.insert(2);",
          "    set.insert(4);",
          "    result = set.binary_search_by_key(&2, |&x| x);",
          "    assert_eq!(result, Ok(0));",
          "    result = set.binary_search_by_key(&4, |&x| x);",
          "    assert_eq!(result, Ok(1));",
          "    result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Err(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(2);",
          "    set.insert(4);",
          "    set.insert(6);",
          "    set.insert(8);",
          "    ",
          "    let result = set.binary_search_by_key(&1, |&x| x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(0));",
          "    assert_eq!(set.binary_search_by_key(&2, |&x| x), Ok(0));",
          "    assert_eq!(set.binary_search_by_key(&3, |&x| x), Err(1));",
          "    assert_eq!(set.binary_search_by_key(&4, |&x| x), Ok(1));",
          "    assert_eq!(set.binary_search_by_key(&5, |&x| x), Err(2));",
          "    assert_eq!(set.binary_search_by_key(&6, |&x| x), Ok(2));",
          "    assert_eq!(set.binary_search_by_key(&7, |&x| x), Err(3));",
          "    assert_eq!(set.binary_search_by_key(&8, |&x| x), Ok(3));",
          "    assert_eq!(set.binary_search_by_key(&9, |&x| x), Err(4));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(2);",
          "    set.insert(4);",
          "    set.insert(6);",
          "    set.insert(8);",
          "    ",
          "    let result = set.binary_search_by_key(&1, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    assert_eq!(set.binary_search_by_key(&2, |&x| x), Ok(0));",
          "    assert_eq!(set.binary_search_by_key(&3, |&x| x), Err(1));",
          "    assert_eq!(set.binary_search_by_key(&4, |&x| x), Ok(1));",
          "    assert_eq!(set.binary_search_by_key(&5, |&x| x), Err(2));",
          "    assert_eq!(set.binary_search_by_key(&6, |&x| x), Ok(2));",
          "    assert_eq!(set.binary_search_by_key(&7, |&x| x), Err(3));",
          "    assert_eq!(set.binary_search_by_key(&8, |&x| x), Ok(3));",
          "    assert_eq!(set.binary_search_by_key(&9, |&x| x), Err(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(2);",
          "    set.insert(4);",
          "    set.insert(6);",
          "    ",
          "    let result = set.binary_search_by_key(&10, |&x| x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(3));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(2);",
          "    set.insert(4);",
          "    set.insert(6);",
          "    ",
          "    let result = set.binary_search_by_key(&10, |&x| x);",
          "    assert_eq!(result, Err(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(3);",
          "    set.insert(3);",
          "    set.insert(5);",
          "    ",
          "    let result = set.binary_search_by_key(&3, |&x| x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0));",
          "    set.insert(7);",
          "    let result = set.binary_search_by_key(&5, |&x| x);",
          "    assert_eq!(result, Ok(1));",
          "    let result = set.binary_search_by_key(&6, |&x| x);",
          "    assert_eq!(result, Err(2));",
          "    let result = set.binary_search_by_key(&2, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    let result = set.binary_search_by_key(&8, |&x| x);",
          "    assert_eq!(result, Err(3));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(3);",
          "    set.insert(3);",
          "    set.insert(5);",
          "    ",
          "    let result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Ok(0));",
          "    set.insert(7);",
          "    let result = set.binary_search_by_key(&5, |&x| x);",
          "    assert_eq!(result, Ok(1));",
          "    let result = set.binary_search_by_key(&6, |&x| x);",
          "    assert_eq!(result, Err(2));",
          "    let result = set.binary_search_by_key(&2, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    let result = set.binary_search_by_key(&8, |&x| x);",
          "    assert_eq!(result, Err(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.insert(4);",
          "    set.insert(5);",
          "    ",
          "    let result = set.binary_search_by_key(&3, |&x| x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(2));",
          "    let result = set.binary_search_by_key(&6, |&x| x);",
          "    assert_eq!(result, Err(5));",
          "    let result = set.binary_search_by_key(&0, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    let result = set.binary_search_by_key(&4, |&x| x);",
          "    assert_eq!(result, Ok(3));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.insert(4);",
          "    set.insert(5);",
          "    ",
          "    let result = set.binary_search_by_key(&3, |&x| x);",
          "    assert_eq!(result, Ok(2));",
          "    let result = set.binary_search_by_key(&6, |&x| x);",
          "    assert_eq!(result, Err(5));",
          "    let result = set.binary_search_by_key(&0, |&x| x);",
          "    assert_eq!(result, Err(0));",
          "    let result = set.binary_search_by_key(&4, |&x| x);",
          "    assert_eq!(result, Ok(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(10);",
          "    set.insert(20);",
          "    set.insert(30);",
          "    set.insert(40);",
          "    ",
          "    let result = set.binary_search_by_key(&25, |&x| x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(2));"
        ],
        "code": [
          "{",
          "    let mut set = super::IndexSet::<i32, ()>::new();",
          "    set.insert(10);",
          "    set.insert(20);",
          "    set.insert(30);",
          "    set.insert(40);",
          "    ",
          "    let result = set.binary_search_by_key(&25, |&x| x);",
          "    assert_eq!(result, Err(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]