[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let _ref_mut = map.borrow_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(_ref_mut.indices.is_empty());",
          "    assert_eq!(_ref_mut.entries.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let _ref_mut = map.borrow_mut();",
          "    assert!(_ref_mut.indices.is_empty());",
          "    assert_eq!(_ref_mut.entries.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let _ref_mut = map.borrow_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.entries.capacity() >= 10);",
          "    assert!(map.borrow_mut().indices.is_empty());",
          "    assert!(map.borrow_mut().entries.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
          "    let _ref_mut = map.borrow_mut();",
          "    assert_eq!(map.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.entries.capacity() >= 10);",
          "    assert!(map.borrow_mut().indices.is_empty());",
          "    assert!(map.borrow_mut().entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    let _ref_mut = map.borrow_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(_ref_mut.entries.len(), 1);",
          "    assert_eq!(_ref_mut.entries[0].key, 1);",
          "    assert_eq!(_ref_mut.entries[0].value, 10);",
          "    assert!(!_ref_mut.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    let _ref_mut = map.borrow_mut();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(_ref_mut.entries.len(), 1);",
          "    assert_eq!(_ref_mut.entries[0].key, 1);",
          "    assert_eq!(_ref_mut.entries[0].value, 10);",
          "    assert!(!_ref_mut.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.clear();",
          "    let _ref_mut = map.borrow_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.entries.is_empty());",
          "    assert!(!map.indices.is_empty());",
          "    assert_eq!(_ref_mut.entries.len(), 0);",
          "    assert_eq!(_ref_mut.indices.borrow_mut().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.clear();",
          "    let _ref_mut = map.borrow_mut();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.entries.is_empty());",
          "    assert!(!map.indices.is_empty());",
          "    assert_eq!(_ref_mut.entries.len(), 0);",
          "    assert_eq!(_ref_mut.indices.borrow_mut().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]