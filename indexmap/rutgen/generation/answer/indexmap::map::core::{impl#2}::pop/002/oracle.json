[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let key = TestKey(1);",
          "    let value = TestValue(\"one\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash, key, value });",
          "    ",
          "    let result = map.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((TestKey(1), TestValue(\"one\".to_string()))));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), IndexMapCore::<TestKey, TestValue>::MAX_ENTRIES_CAPACITY);"
        ],
        "code": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let key = TestKey(1);",
          "    let value = TestValue(\"one\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash, key, value });",
          "    ",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((TestKey(1), TestValue(\"one\".to_string()))));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), IndexMapCore::<TestKey, TestValue>::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash1 = HashValue(1);",
          "    let key1 = TestKey(1);",
          "    let value1 = TestValue(\"one\".to_string());",
          "    ",
          "    let hash2 = HashValue(2);",
          "    let key2 = TestKey(2);",
          "    let value2 = TestValue(\"two\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash: hash1, key: key1, value: value1 });",
          "    map.entries.push(Bucket { hash: hash2, key: key2, value: value2 });",
          "    ",
          "    let result = map.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((TestKey(2), TestValue(\"two\".to_string()))));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], Bucket { hash: HashValue(1), key: TestKey(1), value: TestValue(\"one\".to_string()) });",
          "    assert!(map.indices.len() < 2);"
        ],
        "code": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash1 = HashValue(1);",
          "    let key1 = TestKey(1);",
          "    let value1 = TestValue(\"one\".to_string());",
          "    ",
          "    let hash2 = HashValue(2);",
          "    let key2 = TestKey(2);",
          "    let value2 = TestValue(\"two\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash: hash1, key: key1, value: value1 });",
          "    map.entries.push(Bucket { hash: hash2, key: key2, value: value2 });",
          "    ",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((TestKey(2), TestValue(\"two\".to_string()))));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], Bucket { hash: HashValue(1), key: TestKey(1), value: TestValue(\"one\".to_string()) });",
          "    assert!(map.indices.len() < 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let key = TestKey(1);",
          "    let value = TestValue(\"one\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash, key, value });",
          "",
          "    let before_pop_len = map.len();",
          "    let _result = map.pop();",
          "    ",
          "    let after_pop_len = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(before_pop_len, 1);",
          "    assert!(after_pop_len == 0);",
          "    assert_eq!(_result, Some((TestKey(1), TestValue(\"one\".to_string()))));"
        ],
        "code": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let key = TestKey(1);",
          "    let value = TestValue(\"one\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash, key, value });",
          "",
          "    let before_pop_len = map.len();",
          "    let _result = map.pop();",
          "    ",
          "    let after_pop_len = map.len();",
          "    assert_eq!(before_pop_len, 1);",
          "    assert!(after_pop_len == 0);",
          "    assert_eq!(_result, Some((TestKey(1), TestValue(\"one\".to_string()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(3);",
          "    let key = TestKey(3);",
          "    let value = TestValue(\"three\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash, key, value });",
          "    ",
          "    let result = map.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((TestKey(3), TestValue(\"three\".to_string()))));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.indices.is_empty());",
          "    assert!(map.entries.is_empty());"
        ],
        "code": [
          "{",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestKey(usize);",
          "    ",
          "    #[derive(Debug, PartialEq)]",
          "    struct TestValue(String);",
          "    ",
          "    let mut map: IndexMapCore<TestKey, TestValue> = IndexMapCore::new();",
          "    let hash = HashValue(3);",
          "    let key = TestKey(3);",
          "    let value = TestValue(\"three\".to_string());",
          "    ",
          "    map.entries.push(Bucket { hash, key, value });",
          "    ",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((TestKey(3), TestValue(\"three\".to_string()))));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.indices.is_empty());",
          "    assert!(map.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]