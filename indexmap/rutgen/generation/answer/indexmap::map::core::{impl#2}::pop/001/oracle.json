[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    let result = map.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((1, 10)));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((1, 10)));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    let result = map.pop();",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((2, 20)));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    let result = map.pop();",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((2, 20)));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.entries.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(5);",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    let result = map.pop();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((1, 10)));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 5);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(5);",
          "    map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    let result = map.pop();",
          "    assert_eq!(result, Some((1, 10)));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 5);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]