[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Slice<i32> = Slice::from_vec(vec![42]);",
          "    let iter = slice.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.len(), 1);",
          "    assert_eq!(iter.collect::<Vec<&i32>>(), vec![&42]);",
          "    assert!(!iter.is_empty());",
          "    assert_eq!(iter.next(), Some(&42));",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(iter.len(), 0);",
          "    assert!(iter.is_empty());"
        ],
        "code": [
          "{",
          "    let slice: Slice<i32> = Slice::from_vec(vec![42]);",
          "    let iter = slice.into_iter();",
          "    assert_eq!(iter.len(), 1);",
          "    assert_eq!(iter.collect::<Vec<&i32>>(), vec![&42]);",
          "    assert!(!iter.is_empty());",
          "    assert_eq!(iter.next(), Some(&42));",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(iter.len(), 0);",
          "    assert!(iter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Slice<i32> = Slice::from_vec(vec![1, 2, 3, 4, 5]);",
          "    let iter = slice.into_iter();",
          "}"
        ],
        "oracle": [
          "    iter.next(); // expects Some(&1)",
          "    iter.next(); // expects Some(&2)",
          "    iter.next(); // expects Some(&3)",
          "    iter.next(); // expects Some(&4)",
          "    iter.next(); // expects Some(&5)",
          "    iter.next(); // expects None"
        ],
        "code": [
          "{",
          "    let slice: Slice<i32> = Slice::from_vec(vec![1, 2, 3, 4, 5]);",
          "    let iter = slice.into_iter();",
          "    iter.next(); // expects Some(&1)",
          "    iter.next(); // expects Some(&2)",
          "    iter.next(); // expects Some(&3)",
          "    iter.next(); // expects Some(&4)",
          "    iter.next(); // expects Some(&5)",
          "    iter.next(); // expects None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Slice<i32> = Slice::from_vec((1..=1000).collect());",
          "    let iter = slice.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.iter.len() == 1000);",
          "    assert_eq!(iter.iter().next(), Some(&1));",
          "    assert_eq!(iter.iter().last(), Some(&1000));",
          "    assert!(iter.iter().all(|&x| x >= 1 && x <= 1000));",
          "    assert!(iter.iter().next_back().is_some());",
          "    assert!(iter.is_empty() == false);",
          "    assert!(iter.iter().count() == 1000);",
          "    assert!(iter.iter().nth(500) == Some(&501));"
        ],
        "code": [
          "{",
          "    let slice: Slice<i32> = Slice::from_vec((1..=1000).collect());",
          "    let iter = slice.into_iter();",
          "    assert!(iter.iter.len() == 1000);",
          "    assert_eq!(iter.iter().next(), Some(&1));",
          "    assert_eq!(iter.iter().last(), Some(&1000));",
          "    assert!(iter.iter().all(|&x| x >= 1 && x <= 1000));",
          "    assert!(iter.iter().next_back().is_some());",
          "    assert!(iter.is_empty() == false);",
          "    assert!(iter.iter().count() == 1000);",
          "    assert!(iter.iter().nth(500) == Some(&501));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]