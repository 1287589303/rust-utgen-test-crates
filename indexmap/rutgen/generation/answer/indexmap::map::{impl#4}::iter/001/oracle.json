[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    let _iterator = index_map.iter();",
          "}"
        ],
        "oracle": [
          "    assert!(_iterator.is_empty());",
          "    let _ = index_map.len();",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert!(index_map.hash_builder().build_hasher().finish() != 0);",
          "    let _ = index_map.reserve(10);",
          "    assert_eq!(index_map.len(), 0);",
          "    let _ = index_map.iter_mut();",
          "    assert_eq!(index_map.keys().as_slice().len(), 0);",
          "    let _ = index_map.values();",
          "    assert_eq!(index_map.into_keys().as_slice().len(), 0);",
          "    let _ = index_map.clear();",
          "    let split_map = index_map.split_off(0);",
          "    assert!(split_map.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    let _iterator = index_map.iter();",
          "    assert!(_iterator.is_empty());",
          "    let _ = index_map.len();",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert!(index_map.hash_builder().build_hasher().finish() != 0);",
          "    let _ = index_map.reserve(10);",
          "    assert_eq!(index_map.len(), 0);",
          "    let _ = index_map.iter_mut();",
          "    assert_eq!(index_map.keys().as_slice().len(), 0);",
          "    let _ = index_map.values();",
          "    assert_eq!(index_map.into_keys().as_slice().len(), 0);",
          "    let _ = index_map.clear();",
          "    let split_map = index_map.split_off(0);",
          "    assert!(split_map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    index_map.insert(1, 100);",
          "    let _iterator = index_map.iter();",
          "}"
        ],
        "oracle": [
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.len(), 1);",
          "    let mut iter = index_map.iter();",
          "    assert_eq!(iter.next(), Some((&1, &100)));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    index_map.insert(1, 100);",
          "    let _iterator = index_map.iter();",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.len(), 1);",
          "    let mut iter = index_map.iter();",
          "    assert_eq!(iter.next(), Some((&1, &100)));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    for i in 1..=10 {",
          "        index_map.insert(i, i * 10);",
          "    }",
          "    let _iterator = index_map.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 10);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.iter().as_slice().len(), 10);",
          "    assert_eq!(index_map.iter().as_slice()[0].key, 1);",
          "    assert_eq!(index_map.iter().as_slice()[0].value, 10);",
          "    assert_eq!(index_map.iter().as_slice()[1].key, 2);",
          "    assert_eq!(index_map.iter().as_slice()[1].value, 20);",
          "    assert_eq!(index_map.iter().as_slice()[9].key, 10);",
          "    assert_eq!(index_map.iter().as_slice()[9].value, 100);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    for i in 1..=10 {",
          "        index_map.insert(i, i * 10);",
          "    }",
          "    let _iterator = index_map.iter();",
          "    assert_eq!(index_map.len(), 10);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.iter().as_slice().len(), 10);",
          "    assert_eq!(index_map.iter().as_slice()[0].key, 1);",
          "    assert_eq!(index_map.iter().as_slice()[0].value, 10);",
          "    assert_eq!(index_map.iter().as_slice()[1].key, 2);",
          "    assert_eq!(index_map.iter().as_slice()[1].value, 20);",
          "    assert_eq!(index_map.iter().as_slice()[9].key, 10);",
          "    assert_eq!(index_map.iter().as_slice()[9].value, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<&str, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    index_map.insert(\"key1\", 100);",
          "    index_map.insert(\"key1\", 200); // Duplicate key",
          "    let _iterator = index_map.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 1);",
          "    assert_eq!(index_map.iter().as_slice()[0].key, \"key1\");",
          "    assert_eq!(index_map.iter().as_slice()[0].value, 200);",
          "    assert!(index_map.iter().as_slice().len() == 1);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<&str, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    index_map.insert(\"key1\", 100);",
          "    index_map.insert(\"key1\", 200); // Duplicate key",
          "    let _iterator = index_map.iter();",
          "    assert_eq!(index_map.len(), 1);",
          "    assert_eq!(index_map.iter().as_slice()[0].key, \"key1\");",
          "    assert_eq!(index_map.iter().as_slice()[0].value, 200);",
          "    assert!(index_map.iter().as_slice().len() == 1);",
          "    assert!(!index_map.is_empty());",
          "    assert_eq!(index_map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    for i in 1..=5 {",
          "        index_map.insert(i, i * 10);",
          "    }",
          "    index_map.remove(&3); // Remove one entry",
          "    let _iterator = index_map.iter();",
          "}"
        ],
        "oracle": [
          "    assert!(index_map.len() == 4);",
          "    assert!(index_map.is_empty() == false);",
          "    assert_eq!(index_map.iter().as_slice().len(), 4);",
          "    assert!(index_map.iter().as_slice().iter().all(|&entry| entry.key != 3));",
          "    assert_eq!(index_map.iter().as_slice()[0].value, 10);",
          "    assert_eq!(index_map.iter().as_slice()[1].value, 20);",
          "    assert_eq!(index_map.iter().as_slice()[2].value, 40);",
          "    assert_eq!(index_map.iter().as_slice()[3].value, 50);"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            self.hasher()",
          "        }",
          "    }",
          "",
          "    let mut index_map: super::IndexMap<i32, i32, TestHasher> = super::IndexMap::with_hasher(TestHasher);",
          "    for i in 1..=5 {",
          "        index_map.insert(i, i * 10);",
          "    }",
          "    index_map.remove(&3); // Remove one entry",
          "    let _iterator = index_map.iter();",
          "    assert!(index_map.len() == 4);",
          "    assert!(index_map.is_empty() == false);",
          "    assert_eq!(index_map.iter().as_slice().len(), 4);",
          "    assert!(index_map.iter().as_slice().iter().all(|&entry| entry.key != 3));",
          "    assert_eq!(index_map.iter().as_slice()[0].value, 10);",
          "    assert_eq!(index_map.iter().as_slice()[1].value, 20);",
          "    assert_eq!(index_map.iter().as_slice()[2].value, 40);",
          "    assert_eq!(index_map.iter().as_slice()[3].value, 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]