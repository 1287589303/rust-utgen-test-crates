[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    index_set.reserve(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    index_set.reserve(0);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    index_set.reserve(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert!(!index_set.is_empty());",
          "    assert_eq!(index_set.len(), 0);",
          "    index_set.reserve(5);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve(2);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve(1);",
          "    assert_eq!(index_set.capacity(), 10);"
        ],
        "code": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    index_set.reserve(1);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert!(!index_set.is_empty());",
          "    assert_eq!(index_set.len(), 0);",
          "    index_set.reserve(5);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve(2);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve(1);",
          "    assert_eq!(index_set.capacity(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    index_set.reserve(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.capacity() >= 10);",
          "    assert!(index_set.is_empty());",
          "    assert!(index_set.try_reserve(1).is_err());",
          "    assert!(index_set.try_reserve_exact(1).is_err());",
          "    assert!(index_set.try_reserve(usize::MAX).is_ok());",
          "    assert!(index_set.try_reserve_exact(usize::MAX).is_ok());",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.capacity() >= usize::MAX);",
          "    assert!(index_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    index_set.reserve(usize::MAX);",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.capacity() >= 10);",
          "    assert!(index_set.is_empty());",
          "    assert!(index_set.try_reserve(1).is_err());",
          "    assert!(index_set.try_reserve_exact(1).is_err());",
          "    assert!(index_set.try_reserve(usize::MAX).is_ok());",
          "    assert!(index_set.try_reserve_exact(usize::MAX).is_ok());",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.capacity() >= usize::MAX);",
          "    assert!(index_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    let random_value: usize = rand::random::<usize>() % usize::MAX; // Ensure it's within valid range",
          "    index_set.reserve(random_value);",
          "}"
        ],
        "oracle": [
          "    index_set.capacity() >= 10 + random_value",
          "    index_set.len() == 0",
          "    index_set.is_empty() == true",
          "    index_set.reserve(0) // should not change capacity",
          "    index_set.try_reserve(random_value).is_ok() // should return Ok",
          "    index_set.reserve_exact(5)",
          "    index_set.capacity() >= 10 + random_value + 5",
          "    index_set.try_reserve_exact(random_value).is_ok() // should return Ok",
          "    index_set.reserve(usize::MAX) // should handle maximum value correctly"
        ],
        "code": [
          "{",
          "    let mut index_set = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    let random_value: usize = rand::random::<usize>() % usize::MAX; // Ensure it's within valid range",
          "    index_set.reserve(random_value);",
          "    index_set.capacity() >= 10 + random_value",
          "    index_set.len() == 0",
          "    index_set.is_empty() == true",
          "    index_set.reserve(0) // should not change capacity",
          "    index_set.try_reserve(random_value).is_ok() // should return Ok",
          "    index_set.reserve_exact(5)",
          "    index_set.capacity() >= 10 + random_value + 5",
          "    index_set.try_reserve_exact(random_value).is_ok() // should return Ok",
          "    index_set.reserve(usize::MAX) // should handle maximum value correctly",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]