[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.entries.is_empty());",
          "    assert!(map.indices.is_empty());",
          "    assert!(map.indices.iter().all(|&i| i == 0));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.reverse();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.entries.is_empty());",
          "    assert!(map.indices.is_empty());",
          "    assert!(map.indices.iter().all(|&i| i == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert!(map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.reverse();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert!(map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    map.reverse();",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    assert_eq!(map.entries.len(), 3);",
          "    map.reverse();",
          "    assert_eq!(map.entries[0].key, 3);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[2].key, 1);",
          "    assert!(map.indices.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    map.reverse();",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
          "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
          "    assert_eq!(map.entries.len(), 3);",
          "    map.reverse();",
          "    assert_eq!(map.entries[0].key, 3);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[2].key, 1);",
          "    assert!(map.indices.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(100);",
          "    for i in 0..100 {",
          "        map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i * 10 });",
          "    }",
          "    map.reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 100);",
          "    assert_eq!(map.entries[0].key, 99);",
          "    assert_eq!(map.entries[0].value, 990);",
          "    assert_eq!(map.entries[99].key, 0);",
          "    assert_eq!(map.entries[99].value, 0);",
          "    assert!(map.indices.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(100);",
          "    for i in 0..100 {",
          "        map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i * 10 });",
          "    }",
          "    map.reverse();",
          "    assert_eq!(map.len(), 100);",
          "    assert_eq!(map.entries[0].key, 99);",
          "    assert_eq!(map.entries[0].value, 990);",
          "    assert_eq!(map.entries[99].key, 0);",
          "    assert_eq!(map.entries[99].value, 0);",
          "    assert!(map.indices.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]