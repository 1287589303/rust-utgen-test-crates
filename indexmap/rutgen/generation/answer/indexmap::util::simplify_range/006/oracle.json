[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let len = 0;",
          "    let range = Range {",
          "        start: Bound::Unbounded,",
          "        end: Bound::Included(0),",
          "    };",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, 0), 0..1);",
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(1) }, 1), 0..2);",
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(1) }, 1), 0..1);",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Included(0) }, 2)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Included(0) }, 1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, 1)).is_err());"
        ],
        "code": [
          "{",
          "    let len = 0;",
          "    let range = Range {",
          "        start: Bound::Unbounded,",
          "        end: Bound::Included(0),",
          "    };",
          "    simplify_range(range, len);",
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, 0), 0..1);",
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(1) }, 1), 0..2);",
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(1) }, 1), 0..1);",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Included(0) }, 2)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Included(0) }, 1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, 1)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let len = 1;",
          "    let range = Range {",
          "        start: Bound::Unbounded,",
          "        end: Bound::Included(1),",
          "    };",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    let range = Range { start: Bound::Unbounded, end: Bound::Included(1) };",
          "    let result = simplify_range(range, 1);",
          "    assert_eq!(result, 0..2);",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(2) }, 1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(1) }, 1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Excluded(1) }, 0)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Excluded(1) }, 1)).is_err());"
        ],
        "code": [
          "{",
          "    let len = 1;",
          "    let range = Range {",
          "        start: Bound::Unbounded,",
          "        end: Bound::Included(1),",
          "    };",
          "    simplify_range(range, len);",
          "    let range = Range { start: Bound::Unbounded, end: Bound::Included(1) };",
          "    let result = simplify_range(range, 1);",
          "    assert_eq!(result, 0..2);",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(2) }, 1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(1) }, 1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Excluded(1) }, 0)).is_err());",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Excluded(1) }, 1)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let len = 2;",
          "    let range = Range {",
          "        start: Bound::Unbounded,",
          "        end: Bound::Included(1),",
          "    };",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(1) }, 2), 0..2);",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(2) }, 2)).is_err());",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(2) }, 2)).is_err());",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, 0)).is_err());",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, 2)).is_err());"
        ],
        "code": [
          "{",
          "    let len = 2;",
          "    let range = Range {",
          "        start: Bound::Unbounded,",
          "        end: Bound::Included(1),",
          "    };",
          "    simplify_range(range, len);",
          "    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(1) }, 2), 0..2);",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(2) }, 2)).is_err());",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(2) }, 2)).is_err());",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, 0)).is_err());",
          "    #[should_panic]",
          "    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, 2)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]