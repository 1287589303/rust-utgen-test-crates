[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 5;",
          "    let range = Range {",
          "        start: Bound::Included(len),",
          "        end: Bound::Included(len),",
          "    };",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    let len = 5;",
          "    let range = Range { start: Bound::Included(len), end: Bound::Included(len) };",
          "    let result = simplify_range(range, len);",
          "    assert_eq!(result, 5..5);"
        ],
        "code": [
          "{",
          "    let len = 5;",
          "    let range = Range {",
          "        start: Bound::Included(len),",
          "        end: Bound::Included(len),",
          "    };",
          "    simplify_range(range, len);",
          "    let len = 5;",
          "    let range = Range { start: Bound::Included(len), end: Bound::Included(len) };",
          "    let result = simplify_range(range, len);",
          "    assert_eq!(result, 5..5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 5;",
          "    let range = Range {",
          "        start: Bound::Included(len),",
          "        end: Bound::Included(len),",
          "    };",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    simplify_range(Range { start: Bound::Included(5), end: Bound::Included(5) }, 5) should panic with \"range start index Included(5) out of range for slice of length 5\""
        ],
        "code": [
          "{",
          "    let len = 5;",
          "    let range = Range {",
          "        start: Bound::Included(len),",
          "        end: Bound::Included(len),",
          "    };",
          "    simplify_range(range, len);",
          "    plaintext",
          "    simplify_range(Range { start: Bound::Included(5), end: Bound::Included(5) }, 5) should panic with \"range start index Included(5) out of range for slice of length 5\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 5;",
          "    let range = Range {",
          "        start: Bound::Included(0),",
          "        end: Bound::Included(len),",
          "    };",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(5) }, 5), 0..6);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(1), end: Bound::Included(5) }, 5), 1..6);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(2), end: Bound::Included(5) }, 5), 2..6);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(4) }, 5), 0..5);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(3) }, 5), 0..4);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(2) }, 5), 0..3);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(1) }, 5), 0..2);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(1), end: Bound::Included(1) }, 5), 1..2);"
        ],
        "code": [
          "{",
          "    let len = 5;",
          "    let range = Range {",
          "        start: Bound::Included(0),",
          "        end: Bound::Included(len),",
          "    };",
          "    simplify_range(range, len);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(5) }, 5), 0..6);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(1), end: Bound::Included(5) }, 5), 1..6);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(2), end: Bound::Included(5) }, 5), 2..6);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(4) }, 5), 0..5);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(3) }, 5), 0..4);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(2) }, 5), 0..3);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(0), end: Bound::Included(1) }, 5), 0..2);",
          "    assert_eq!(simplify_range(Range { start: Bound::Included(1), end: Bound::Included(1) }, 5), 1..2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]