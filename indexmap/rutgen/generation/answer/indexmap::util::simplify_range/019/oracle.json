[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 10;",
          "    let range = 0..; // Equivalent to Bound::Included(&0)",
          "    let result = simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    result == 0..10",
          "    assert_eq!(result, 0..10);"
        ],
        "code": [
          "{",
          "    let len = 10;",
          "    let range = 0..; // Equivalent to Bound::Included(&0)",
          "    let result = simplify_range(range, len);",
          "    result == 0..10",
          "    assert_eq!(result, 0..10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 0;",
          "    let range = 0..; // Equivalent to Bound::Included(&0)",
          "    let result = simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    let expected_result = 0..0;",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let len = 0;",
          "    let range = 0..; // Equivalent to Bound::Included(&0)",
          "    let result = simplify_range(range, len);",
          "    let expected_result = 0..0;",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 10;",
          "    let range = 10..; // Equivalent to Bound::Included(&10)",
          "    let result = simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 10..10);"
        ],
        "code": [
          "{",
          "    let len = 10;",
          "    let range = 10..; // Equivalent to Bound::Included(&10)",
          "    let result = simplify_range(range, len);",
          "    assert_eq!(result, 10..10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let len = 100;",
          "    let range = 100..; // Equivalent to Bound::Included(&100)",
          "    let result = simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    let len = 100;",
          "    let range = 100..;",
          "    let result = simplify_range(range, len);",
          "    assert_eq!(result, 100..100);"
        ],
        "code": [
          "{",
          "    let len = 100;",
          "    let range = 100..; // Equivalent to Bound::Included(&100)",
          "    let result = simplify_range(range, len);",
          "    let len = 100;",
          "    let range = 100..;",
          "    let result = simplify_range(range, len);",
          "    assert_eq!(result, 100..100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]