[
  {
    "uses": [
      "use core::ops::Bound;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::ops::Bound;",
          "",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(len).into();",
          "    let end_range: Range<usize> = Bound::Excluded(len).into();",
          "    let range = (start_range, end_range);",
          "    ",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(len).into();",
          "    let end_range: Range<usize> = Bound::Excluded(len).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 5..5);"
        ],
        "code": [
          "{",
          "    use core::ops::Bound;",
          "",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(len).into();",
          "    let end_range: Range<usize> = Bound::Excluded(len).into();",
          "    let range = (start_range, end_range);",
          "    ",
          "    simplify_range(range, len);",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(len).into();",
          "    let end_range: Range<usize> = Bound::Excluded(len).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 5..5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::ops::Bound;",
          "",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(3).into();",
          "    let end_range: Range<usize> = Bound::Excluded(3).into();",
          "    let range = (start_range, end_range);",
          "    ",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    simplify_range((Bound::Excluded(3), Bound::Excluded(3)), 5); // Expected output: 3..3",
          "    simplify_range((Bound::Excluded(0), Bound::Excluded(5)), 5); // Expected output: 1..5",
          "    simplify_range((Bound::Excluded(1), Bound::Excluded(4)), 5); // Expected output: 2..4",
          "    simplify_range((Bound::Excluded(2), Bound::Excluded(4)), 5); // Expected output: 3..4"
        ],
        "code": [
          "{",
          "    use core::ops::Bound;",
          "",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(3).into();",
          "    let end_range: Range<usize> = Bound::Excluded(3).into();",
          "    let range = (start_range, end_range);",
          "    ",
          "    simplify_range(range, len);",
          "    simplify_range((Bound::Excluded(3), Bound::Excluded(3)), 5); // Expected output: 3..3",
          "    simplify_range((Bound::Excluded(0), Bound::Excluded(5)), 5); // Expected output: 1..5",
          "    simplify_range((Bound::Excluded(1), Bound::Excluded(4)), 5); // Expected output: 2..4",
          "    simplify_range((Bound::Excluded(2), Bound::Excluded(4)), 5); // Expected output: 3..4",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::ops::Bound;",
          "",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(0).into();",
          "    let end_range: Range<usize> = Bound::Excluded(0).into();",
          "    let range = (start_range, end_range);",
          "    ",
          "    simplify_range(range, len);",
          "}"
        ],
        "oracle": [
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(0).into();",
          "    let end_range: Range<usize> = Bound::Excluded(5).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 1..5);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(1).into();",
          "    let end_range: Range<usize> = Bound::Excluded(5).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 2..5);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(0).into();",
          "    let end_range: Range<usize> = Bound::Excluded(1).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 1..1);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(3).into();",
          "    let end_range: Range<usize> = Bound::Excluded(5).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 4..5);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(2).into();",
          "    let end_range: Range<usize> = Bound::Excluded(2).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 3..3);"
        ],
        "code": [
          "{",
          "    use core::ops::Bound;",
          "",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(0).into();",
          "    let end_range: Range<usize> = Bound::Excluded(0).into();",
          "    let range = (start_range, end_range);",
          "    ",
          "    simplify_range(range, len);",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(0).into();",
          "    let end_range: Range<usize> = Bound::Excluded(5).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 1..5);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(1).into();",
          "    let end_range: Range<usize> = Bound::Excluded(5).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 2..5);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(0).into();",
          "    let end_range: Range<usize> = Bound::Excluded(1).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 1..1);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(3).into();",
          "    let end_range: Range<usize> = Bound::Excluded(5).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 4..5);",
          "    ",
          "    let len = 5;",
          "    let start_range: Range<usize> = Bound::Excluded(2).into();",
          "    let end_range: Range<usize> = Bound::Excluded(2).into();",
          "    let range = (start_range, end_range);",
          "    assert_eq!(simplify_range(range, len), 3..3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]