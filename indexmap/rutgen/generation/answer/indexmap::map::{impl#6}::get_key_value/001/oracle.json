[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&None::<i32>);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&None::<i32>);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&None::<i32>);",
          "    let map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&None::<i32>);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&5);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&5);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&5);",
          "    let map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    let result = map.get_key_value(&5);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    let result = map.get_key_value(&3);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    let result = map.get_key_value(&3);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<String, i32, RandomState> = IndexMap::new();",
          "    map.insert(\"a\".to_string(), 10);",
          "    let result = map.get_key_value(&\"b\".to_string());",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMap<String, i32, RandomState> = IndexMap::new();",
          "    map.insert(\"a\".to_string(), 10);",
          "    let result = map.get_key_value(&\"b\".to_string());",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<String, i32, RandomState> = IndexMap::new();",
          "    map.insert(\"a\".to_string(), 10);",
          "    let result = map.get_key_value(&\"b\".to_string());",
          "    let mut map: IndexMap<String, i32, RandomState> = IndexMap::new();",
          "    map.insert(\"a\".to_string(), 10);",
          "    let result = map.get_key_value(&\"b\".to_string());",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<f32, i32, RandomState> = IndexMap::new();",
          "    map.insert(1.0, 10);",
          "    let result = map.get_key_value(&2.0);",
          "}"
        ],
        "oracle": [
          "    let map = IndexMap::new();",
          "    map.insert(1.0, 10);",
          "    let result = map.get_key_value(&2.0);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<f32, i32, RandomState> = IndexMap::new();",
          "    map.insert(1.0, 10);",
          "    let result = map.get_key_value(&2.0);",
          "    let map = IndexMap::new();",
          "    map.insert(1.0, 10);",
          "    let result = map.get_key_value(&2.0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]