[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(1, \"Value1\".to_string());",
          "",
          "    let key = 1;",
          "    let result = index_map.get_full_mut2(&key);",
          "    // result is expected to be Some((0, &mut \"Value1\")) since 1 is a valid key.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, &mut \"Value1\")));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(1, \"Value1\".to_string());",
          "",
          "    let key = 1;",
          "    let result = index_map.get_full_mut2(&key);",
          "    // result is expected to be Some((0, &mut \"Value1\")) since 1 is a valid key.",
          "    assert_eq!(result, Some((0, &mut \"Value1\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(1, \"Value1\".to_string());",
          "    index_map.insert(2, \"Value2\".to_string());",
          "",
          "    let key = 2;",
          "    let result = index_map.get_full_mut2(&key);",
          "    // result is expected to be Some((1, &mut \"Value2\")) since 2 exists in the map.",
          "}"
        ],
        "oracle": [
          "    let key = 2;",
          "    let result = index_map.get_full_mut2(&key);",
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 1);",
          "    assert_eq!(*key_ref, 2);",
          "    assert_eq!(*value_ref, \"Value2\");"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(1, \"Value1\".to_string());",
          "    index_map.insert(2, \"Value2\".to_string());",
          "",
          "    let key = 2;",
          "    let result = index_map.get_full_mut2(&key);",
          "    // result is expected to be Some((1, &mut \"Value2\")) since 2 exists in the map.",
          "    let key = 2;",
          "    let result = index_map.get_full_mut2(&key);",
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 1);",
          "    assert_eq!(*key_ref, 2);",
          "    assert_eq!(*value_ref, \"Value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(0, \"Value0\".to_string());",
          "    index_map.insert(99, \"Value99\".to_string());",
          "",
          "    let key = 99;",
          "    let result = index_map.get_full_mut2(&key);",
          "    // result is expected to be Some((1, &mut \"Value99\")) since 99 exists as the last entry.",
          "}"
        ],
        "oracle": [
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(0, \"Value0\".to_string());",
          "    index_map.insert(99, \"Value99\".to_string());",
          "    let key = 99;",
          "    let result = index_map.get_full_mut2(&key);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, 1);",
          "    assert_eq!(*(result.unwrap().1), \"Value99\".to_string());"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(0, \"Value0\".to_string());",
          "    index_map.insert(99, \"Value99\".to_string());",
          "",
          "    let key = 99;",
          "    let result = index_map.get_full_mut2(&key);",
          "    // result is expected to be Some((1, &mut \"Value99\")) since 99 exists as the last entry.",
          "    let mut index_map: IndexMap<i32, String, TestHasher> = IndexMap::new(TestHasher);",
          "    index_map.insert(0, \"Value0\".to_string());",
          "    index_map.insert(99, \"Value99\".to_string());",
          "    let key = 99;",
          "    let result = index_map.get_full_mut2(&key);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, 1);",
          "    assert_eq!(*(result.unwrap().1), \"Value99\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]