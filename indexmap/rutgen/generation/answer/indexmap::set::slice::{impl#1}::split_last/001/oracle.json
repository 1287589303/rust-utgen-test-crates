[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"first\" };",
          "    let bucket2 = Bucket { hash: HashValue::default(), key: 2, value: \"second\" };",
          "    let slice = Box::new(Slice { entries: [bucket1, bucket2] });",
          "    assert!(slice.split_last().is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.split_last(), Some((&2, Slice::from_slice(&[bucket1]))));",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(!slice.is_empty());",
          "    assert_eq!(slice.first(), Some(&1));",
          "    assert_eq!(slice.last(), Some(&2));"
        ],
        "code": [
          "{",
          "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"first\" };",
          "    let bucket2 = Bucket { hash: HashValue::default(), key: 2, value: \"second\" };",
          "    let slice = Box::new(Slice { entries: [bucket1, bucket2] });",
          "    assert!(slice.split_last().is_some());",
          "    assert_eq!(slice.split_last(), Some((&2, Slice::from_slice(&[bucket1]))));",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(!slice.is_empty());",
          "    assert_eq!(slice.first(), Some(&1));",
          "    assert_eq!(slice.last(), Some(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"first\" };",
          "    let bucket2 = Bucket { hash: HashValue::default(), key: 2, value: \"second\" };",
          "    let bucket3 = Bucket { hash: HashValue::default(), key: 3, value: \"third\" };",
          "    let slice = Box::new(Slice { entries: [bucket1, bucket2, bucket3] });",
          "    assert!(slice.split_last().is_some());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.split_last(), Some((&bucket3.key, Slice::from_slice(&[bucket1, bucket2]))));",
          "    assert_eq!(slice.split_last().unwrap().0, &bucket3.key);",
          "    assert_eq!(slice.split_last().unwrap().1.entries.len(), 2);",
          "    assert_eq!(slice.split_last().unwrap().1.entries[0].key, bucket1.key);",
          "    assert_eq!(slice.split_last().unwrap().1.entries[1].key, bucket2.key);",
          "    assert!(slice.is_empty() == false);",
          "    assert_eq!(slice.len(), 3);"
        ],
        "code": [
          "{",
          "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"first\" };",
          "    let bucket2 = Bucket { hash: HashValue::default(), key: 2, value: \"second\" };",
          "    let bucket3 = Bucket { hash: HashValue::default(), key: 3, value: \"third\" };",
          "    let slice = Box::new(Slice { entries: [bucket1, bucket2, bucket3] });",
          "    assert!(slice.split_last().is_some());",
          "    assert_eq!(slice.split_last(), Some((&bucket3.key, Slice::from_slice(&[bucket1, bucket2]))));",
          "    assert_eq!(slice.split_last().unwrap().0, &bucket3.key);",
          "    assert_eq!(slice.split_last().unwrap().1.entries.len(), 2);",
          "    assert_eq!(slice.split_last().unwrap().1.entries[0].key, bucket1.key);",
          "    assert_eq!(slice.split_last().unwrap().1.entries[1].key, bucket2.key);",
          "    assert!(slice.is_empty() == false);",
          "    assert_eq!(slice.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"only\" };",
          "    let slice = Box::new(Slice { entries: [bucket1] });",
          "    assert!(slice.split_last().is_none());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.split_last(), Some((&1, Slice::from_slice(&[]))));"
        ],
        "code": [
          "{",
          "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"only\" };",
          "    let slice = Box::new(Slice { entries: [bucket1] });",
          "    assert!(slice.split_last().is_none());",
          "    assert_eq!(slice.split_last(), Some((&1, Slice::from_slice(&[]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]