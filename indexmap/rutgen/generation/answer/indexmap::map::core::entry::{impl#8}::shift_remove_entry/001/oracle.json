[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 1;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries.get(0), Some(&(1, \"Value1\".to_string())));",
          "    assert_eq!(entry.index, 1);",
          "    assert!(map.entries.get(1).is_none());",
          "    let (key, value) = entry.shift_remove_entry();",
          "    assert_eq!(key, 2);",
          "    assert_eq!(value, \"Value2\".to_string());",
          "    assert!(map.entries.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 1;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries.get(0), Some(&(1, \"Value1\".to_string())));",
          "    assert_eq!(entry.index, 1);",
          "    assert!(map.entries.get(1).is_none());",
          "    let (key, value) = entry.shift_remove_entry();",
          "    assert_eq!(key, 2);",
          "    assert_eq!(value, \"Value2\".to_string());",
          "    assert!(map.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 0;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], (2, \"Value2\".to_string()));",
          "    assert_eq!(map.entries[1].is_none(), true);",
          "    assert_eq!(entry.index(), 0);",
          "    let removed_entry = entry.shift_remove_entry();",
          "    assert_eq!(removed_entry, (1, \"Value1\".to_string()));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], (2, \"Value2\".to_string()));",
          "    entry.shift_remove_entry();",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(entry.index(), 0);"
        ],
        "code": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 0;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], (2, \"Value2\".to_string()));",
          "    assert_eq!(map.entries[1].is_none(), true);",
          "    assert_eq!(entry.index(), 0);",
          "    let removed_entry = entry.shift_remove_entry();",
          "    assert_eq!(removed_entry, (1, \"Value1\".to_string()));",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], (2, \"Value2\".to_string()));",
          "    entry.shift_remove_entry();",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(entry.index(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 1;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], (2, \"Value2\".to_string()));",
          "    assert!(map.entries.get(1).is_none());",
          "    assert_eq!(entry.index(), 1);",
          "    assert_eq!(entry.key(), &2);",
          "    assert_eq!(entry.get(), &\"Value2\".to_string());"
        ],
        "code": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 1;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "    assert_eq!(map.entries.len(), 1);",
          "    assert_eq!(map.entries[0], (2, \"Value2\".to_string()));",
          "    assert!(map.entries.get(1).is_none());",
          "    assert_eq!(entry.index(), 1);",
          "    assert_eq!(entry.key(), &2);",
          "    assert_eq!(entry.get(), &\"Value2\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    entries.push((3, \"Value3\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 1;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.entries.get(0), Some(&(1, \"Value1\".to_string())));",
          "    assert_eq!(map.entries.get(1), Some(&(3, \"Value3\".to_string())));",
          "    assert_eq!(entry.index, 1);",
          "    assert!(map.entries.get(1).is_none());"
        ],
        "code": [
          "{",
          "    struct TestMap {",
          "        indices: Indices,",
          "        entries: Entries<i32, String>,",
          "    }",
          "    ",
          "    let mut indices = Indices::new();",
          "    let mut entries = Entries::new();",
          "    entries.push((1, \"Value1\".to_string()));",
          "    entries.push((2, \"Value2\".to_string()));",
          "    entries.push((3, \"Value3\".to_string()));",
          "    ",
          "    let mut map = TestMap { indices, entries };",
          "    let index = 1;  // Valid index for non-empty map",
          "    ",
          "    let mut entry = IndexedEntry::new(&mut map, index);",
          "    entry.shift_remove_entry();",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.entries.get(0), Some(&(1, \"Value1\".to_string())));",
          "    assert_eq!(map.entries.get(1), Some(&(3, \"Value3\".to_string())));",
          "    assert_eq!(entry.index, 1);",
          "    assert!(map.entries.get(1).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]