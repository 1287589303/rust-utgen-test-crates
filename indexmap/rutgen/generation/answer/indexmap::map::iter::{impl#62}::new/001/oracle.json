[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries: &mut [Bucket<i32, i32>] = &mut [];",
          "    let values_mut = ValuesMut::new(entries);",
          "}"
        ],
        "oracle": [
          "    let mut entries: &mut [Bucket<i32, i32>] = &mut [];",
          "    let values_mut = ValuesMut::new(entries);",
          "    assert_eq!(values_mut.iter.as_slice(), entries.iter_mut());"
        ],
        "code": [
          "{",
          "    let mut entries: &mut [Bucket<i32, i32>] = &mut [];",
          "    let values_mut = ValuesMut::new(entries);",
          "    let mut entries: &mut [Bucket<i32, i32>] = &mut [];",
          "    let values_mut = ValuesMut::new(entries);",
          "    assert_eq!(values_mut.iter.as_slice(), entries.iter_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = &mut [Bucket { hash: 0, key: 1, value: 10 }];",
          "    let values_mut = ValuesMut::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values_mut.iter.len(), 1);",
          "    assert_eq!(values_mut.iter.next().unwrap().key, 1);",
          "    assert_eq!(values_mut.iter.next().unwrap().value, 10);"
        ],
        "code": [
          "{",
          "    let mut entries = &mut [Bucket { hash: 0, key: 1, value: 10 }];",
          "    let values_mut = ValuesMut::new(entries);",
          "    assert_eq!(values_mut.iter.len(), 1);",
          "    assert_eq!(values_mut.iter.next().unwrap().key, 1);",
          "    assert_eq!(values_mut.iter.next().unwrap().value, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = &mut [",
          "        Bucket { hash: 0, key: 1, value: 10 },",
          "        Bucket { hash: 1, key: 2, value: 20 },",
          "        Bucket { hash: 2, key: 3, value: 30 },",
          "    ];",
          "    let values_mut = ValuesMut::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values_mut.iter.len(), 3);",
          "    assert_eq!(values_mut.iter.as_slice()[0].key, 1);",
          "    assert_eq!(values_mut.iter.as_slice()[1].key, 2);",
          "    assert_eq!(values_mut.iter.as_slice()[2].key, 3);",
          "    assert_eq!(values_mut.iter.as_slice()[0].value, 10);",
          "    assert_eq!(values_mut.iter.as_slice()[1].value, 20);",
          "    assert_eq!(values_mut.iter.as_slice()[2].value, 30);"
        ],
        "code": [
          "{",
          "    let mut entries = &mut [",
          "        Bucket { hash: 0, key: 1, value: 10 },",
          "        Bucket { hash: 1, key: 2, value: 20 },",
          "        Bucket { hash: 2, key: 3, value: 30 },",
          "    ];",
          "    let values_mut = ValuesMut::new(entries);",
          "    assert_eq!(values_mut.iter.len(), 3);",
          "    assert_eq!(values_mut.iter.as_slice()[0].key, 1);",
          "    assert_eq!(values_mut.iter.as_slice()[1].key, 2);",
          "    assert_eq!(values_mut.iter.as_slice()[2].key, 3);",
          "    assert_eq!(values_mut.iter.as_slice()[0].value, 10);",
          "    assert_eq!(values_mut.iter.as_slice()[1].value, 20);",
          "    assert_eq!(values_mut.iter.as_slice()[2].value, 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries: &mut [Bucket<i32, i32>] = &mut [",
          "        Bucket { hash: 0, key: 1, value: 10 },",
          "        Bucket { hash: 1, key: 2, value: 20 },",
          "        Bucket { hash: 2, key: 3, value: 30 },",
          "        Bucket { hash: 3, key: 4, value: 40 },",
          "        Bucket { hash: 4, key: 5, value: 50 },",
          "        Bucket { hash: 5, key: 6, value: 60 },",
          "        Bucket { hash: 6, key: 7, value: 70 },",
          "        Bucket { hash: 7, key: 8, value: 80 },",
          "    ];",
          "    let values_mut = ValuesMut::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert!(values_mut.iter.len() == 8);",
          "    assert!(values_mut.iter.next().is_some());",
          "    assert!(values_mut.iter.next().unwrap().key == 1);",
          "    assert!(values_mut.iter.next().unwrap().value == 10);",
          "    assert!(values_mut.iter.next().unwrap().hash == 0);",
          "    assert!(values_mut.iter.next().unwrap().key == 2);",
          "    assert!(values_mut.iter.next().unwrap().value == 20);",
          "    assert!(values_mut.iter.next().unwrap().hash == 1);",
          "    assert!(values_mut.iter.next().unwrap().key == 3);",
          "    assert!(values_mut.iter.next().unwrap().value == 30);",
          "    assert!(values_mut.iter.next().unwrap().hash == 2);",
          "    assert!(values_mut.iter.next().unwrap().key == 4);",
          "    assert!(values_mut.iter.next().unwrap().value == 40);",
          "    assert!(values_mut.iter.next().unwrap().hash == 3);",
          "    assert!(values_mut.iter.next().unwrap().key == 5);",
          "    assert!(values_mut.iter.next().unwrap().value == 50);",
          "    assert!(values_mut.iter.next().unwrap().hash == 4);",
          "    assert!(values_mut.iter.next().unwrap().key == 6);",
          "    assert!(values_mut.iter.next().unwrap().value == 60);",
          "    assert!(values_mut.iter.next().unwrap().hash == 5);",
          "    assert!(values_mut.iter.next().unwrap().key == 7);",
          "    assert!(values_mut.iter.next().unwrap().value == 70);",
          "    assert!(values_mut.iter.next().unwrap().hash == 6);",
          "    assert!(values_mut.iter.next().unwrap().key == 8);",
          "    assert!(values_mut.iter.next().unwrap().value == 80);",
          "    assert!(values_mut.iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let mut entries: &mut [Bucket<i32, i32>] = &mut [",
          "        Bucket { hash: 0, key: 1, value: 10 },",
          "        Bucket { hash: 1, key: 2, value: 20 },",
          "        Bucket { hash: 2, key: 3, value: 30 },",
          "        Bucket { hash: 3, key: 4, value: 40 },",
          "        Bucket { hash: 4, key: 5, value: 50 },",
          "        Bucket { hash: 5, key: 6, value: 60 },",
          "        Bucket { hash: 6, key: 7, value: 70 },",
          "        Bucket { hash: 7, key: 8, value: 80 },",
          "    ];",
          "    let values_mut = ValuesMut::new(entries);",
          "    assert!(values_mut.iter.len() == 8);",
          "    assert!(values_mut.iter.next().is_some());",
          "    assert!(values_mut.iter.next().unwrap().key == 1);",
          "    assert!(values_mut.iter.next().unwrap().value == 10);",
          "    assert!(values_mut.iter.next().unwrap().hash == 0);",
          "    assert!(values_mut.iter.next().unwrap().key == 2);",
          "    assert!(values_mut.iter.next().unwrap().value == 20);",
          "    assert!(values_mut.iter.next().unwrap().hash == 1);",
          "    assert!(values_mut.iter.next().unwrap().key == 3);",
          "    assert!(values_mut.iter.next().unwrap().value == 30);",
          "    assert!(values_mut.iter.next().unwrap().hash == 2);",
          "    assert!(values_mut.iter.next().unwrap().key == 4);",
          "    assert!(values_mut.iter.next().unwrap().value == 40);",
          "    assert!(values_mut.iter.next().unwrap().hash == 3);",
          "    assert!(values_mut.iter.next().unwrap().key == 5);",
          "    assert!(values_mut.iter.next().unwrap().value == 50);",
          "    assert!(values_mut.iter.next().unwrap().hash == 4);",
          "    assert!(values_mut.iter.next().unwrap().key == 6);",
          "    assert!(values_mut.iter.next().unwrap().value == 60);",
          "    assert!(values_mut.iter.next().unwrap().hash == 5);",
          "    assert!(values_mut.iter.next().unwrap().key == 7);",
          "    assert!(values_mut.iter.next().unwrap().value == 70);",
          "    assert!(values_mut.iter.next().unwrap().hash == 6);",
          "    assert!(values_mut.iter.next().unwrap().key == 8);",
          "    assert!(values_mut.iter.next().unwrap().value == 80);",
          "    assert!(values_mut.iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]