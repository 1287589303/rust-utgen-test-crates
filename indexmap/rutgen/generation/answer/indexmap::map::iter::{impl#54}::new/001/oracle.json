[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries: &[Bucket<i32, String>] = &[];",
          "    let values = Values::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), entries.len());",
          "    assert!(values.iter.is_empty());",
          "    assert_eq!(values.iter.as_slice(), entries);",
          "    assert_eq!(values.iter.next(), None);",
          "    assert_eq!(values.iter.count(), 0);"
        ],
        "code": [
          "{",
          "    let entries: &[Bucket<i32, String>] = &[];",
          "    let values = Values::new(entries);",
          "    assert_eq!(values.iter.len(), entries.len());",
          "    assert!(values.iter.is_empty());",
          "    assert_eq!(values.iter.as_slice(), entries);",
          "    assert_eq!(values.iter.next(), None);",
          "    assert_eq!(values.iter.count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries = &[Bucket { hash: HashValue::default(), key: 1, value: String::from(\"one\") }];",
          "    let values = Values::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.as_slice(), entries.iter());"
        ],
        "code": [
          "{",
          "    let entries = &[Bucket { hash: HashValue::default(), key: 1, value: String::from(\"one\") }];",
          "    let values = Values::new(entries);",
          "    assert_eq!(values.iter.as_slice(), entries.iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries = &[",
          "        Bucket { hash: HashValue::default(), key: 1, value: String::from(\"one\") },",
          "        Bucket { hash: HashValue::default(), key: 2, value: String::from(\"two\") },",
          "        Bucket { hash: HashValue::default(), key: 3, value: String::from(\"three\") },",
          "    ];",
          "    let values = Values::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), 3);",
          "    assert_eq!(values.iter[0].key, 1);",
          "    assert_eq!(values.iter[0].value, \"one\");",
          "    assert_eq!(values.iter[1].key, 2);",
          "    assert_eq!(values.iter[1].value, \"two\");",
          "    assert_eq!(values.iter[2].key, 3);",
          "    assert_eq!(values.iter[2].value, \"three\");",
          "    assert!(values.iter.is_fused());"
        ],
        "code": [
          "{",
          "    let entries = &[",
          "        Bucket { hash: HashValue::default(), key: 1, value: String::from(\"one\") },",
          "        Bucket { hash: HashValue::default(), key: 2, value: String::from(\"two\") },",
          "        Bucket { hash: HashValue::default(), key: 3, value: String::from(\"three\") },",
          "    ];",
          "    let values = Values::new(entries);",
          "    assert_eq!(values.iter.len(), 3);",
          "    assert_eq!(values.iter[0].key, 1);",
          "    assert_eq!(values.iter[0].value, \"one\");",
          "    assert_eq!(values.iter[1].key, 2);",
          "    assert_eq!(values.iter[1].value, \"two\");",
          "    assert_eq!(values.iter[2].key, 3);",
          "    assert_eq!(values.iter[2].value, \"three\");",
          "    assert!(values.iter.is_fused());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries = &[",
          "        Bucket { hash: HashValue::default(), key: \"key1\", value: 10 },",
          "        Bucket { hash: HashValue::default(), key: \"key2\", value: 20 },",
          "        Bucket { hash: HashValue::default(), key: \"key3\", value: 30 },",
          "    ];",
          "    let values = Values::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), 3);",
          "    assert_eq!(values.iter[0].key, \"key1\");",
          "    assert_eq!(values.iter[0].value, 10);",
          "    assert_eq!(values.iter[1].key, \"key2\");",
          "    assert_eq!(values.iter[1].value, 20);",
          "    assert_eq!(values.iter[2].key, \"key3\");",
          "    assert_eq!(values.iter[2].value, 30);"
        ],
        "code": [
          "{",
          "    let entries = &[",
          "        Bucket { hash: HashValue::default(), key: \"key1\", value: 10 },",
          "        Bucket { hash: HashValue::default(), key: \"key2\", value: 20 },",
          "        Bucket { hash: HashValue::default(), key: \"key3\", value: 30 },",
          "    ];",
          "    let values = Values::new(entries);",
          "    assert_eq!(values.iter.len(), 3);",
          "    assert_eq!(values.iter[0].key, \"key1\");",
          "    assert_eq!(values.iter[0].value, 10);",
          "    assert_eq!(values.iter[1].key, \"key2\");",
          "    assert_eq!(values.iter[1].value, 20);",
          "    assert_eq!(values.iter[2].key, \"key3\");",
          "    assert_eq!(values.iter[2].value, 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]