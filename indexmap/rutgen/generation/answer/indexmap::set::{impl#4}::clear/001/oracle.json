[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
          "    set.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.iter().count(), 0);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    set.reserve(10);",
          "    assert!(set.capacity() >= 10);",
          "    set.clear();",
          "    assert_eq!(set.capacity(), 10);"
        ],
        "code": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.iter().count(), 0);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    set.reserve(10);",
          "    assert!(set.capacity() >= 10);",
          "    set.clear();",
          "    assert_eq!(set.capacity(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(1, ());",
          "    set.insert(1);",
          "    let capacity_before = set.capacity();",
          "    set.clear();",
          "    assert_eq!(set.capacity(), capacity_before);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.iter().count() == 0);",
          "    assert_eq!(set.capacity(), capacity_before);"
        ],
        "code": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(1, ());",
          "    set.insert(1);",
          "    let capacity_before = set.capacity();",
          "    set.clear();",
          "    assert_eq!(set.capacity(), capacity_before);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.iter().count() == 0);",
          "    assert_eq!(set.capacity(), capacity_before);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(10, ());",
          "    for i in 0..10 {",
          "        set.insert(i);",
          "    }",
          "    let capacity_before = set.capacity();",
          "    set.clear();",
          "    assert_eq!(set.capacity(), capacity_before);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.iter().count(), 0);",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(10, ());",
          "    for i in 0..10 {",
          "        set.insert(i);",
          "    }",
          "    let capacity_before = set.capacity();",
          "    set.clear();",
          "    assert_eq!(set.capacity(), capacity_before);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.iter().count(), 0);",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(1000, ());",
          "    for i in 0..1000 {",
          "        set.insert(i);",
          "    }",
          "    let capacity_before = set.capacity();",
          "    set.clear();",
          "    assert_eq!(set.capacity(), capacity_before);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.iter().count(), 0);"
        ],
        "code": [
          "{",
          "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(1000, ());",
          "    for i in 0..1000 {",
          "        set.insert(i);",
          "    }",
          "    let capacity_before = set.capacity();",
          "    set.clear();",
          "    assert_eq!(set.capacity(), capacity_before);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]