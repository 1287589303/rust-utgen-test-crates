[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::with_capacity(4);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(1), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 30 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.increment_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(indices.len(), 0);",
          "    assert_eq!(entries[0].hash, HashValue(1));",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert!(indices.find_mut(0).is_none());",
          "    assert!(indices.find_mut(1).is_none());",
          "    assert_eq!(entries.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::with_capacity(4);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(1), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 30 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.increment_indices(0, 1);",
          "    assert_eq!(indices.len(), 0);",
          "    assert_eq!(entries[0].hash, HashValue(1));",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert!(indices.find_mut(0).is_none());",
          "    assert!(indices.find_mut(1).is_none());",
          "    assert_eq!(entries.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::with_capacity(4);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(4), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 50 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 60 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.increment_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    let mut indices = hash_table::HashTable::with_capacity(4);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "    Bucket { hash: HashValue(4), key: 4, value: 40 },",
          "    Bucket { hash: HashValue(5), key: 5, value: 50 },",
          "    Bucket { hash: HashValue(6), key: 6, value: 60 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    assert_eq!(indices.len(), 0);",
          "    ref_mut.increment_indices(0, 2);",
          "    assert_eq!(entries[0].hash, HashValue(4));",
          "    assert_eq!(entries[1].hash, HashValue(5));",
          "    assert!(indices.capacity() > entries.len());",
          "    assert!(indices.find_mut(4.get(), |&i| i == 0).is_err());",
          "    assert!(indices.find_mut(5.get(), |&i| i == 1).is_err());",
          "    assert!(indices.find_mut(6.get(), |&i| i == 2).is_err());"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::with_capacity(4);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(4), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 50 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 60 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.increment_indices(0, 2);",
          "    let mut indices = hash_table::HashTable::with_capacity(4);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "    Bucket { hash: HashValue(4), key: 4, value: 40 },",
          "    Bucket { hash: HashValue(5), key: 5, value: 50 },",
          "    Bucket { hash: HashValue(6), key: 6, value: 60 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    assert_eq!(indices.len(), 0);",
          "    ref_mut.increment_indices(0, 2);",
          "    assert_eq!(entries[0].hash, HashValue(4));",
          "    assert_eq!(entries[1].hash, HashValue(5));",
          "    assert!(indices.capacity() > entries.len());",
          "    assert!(indices.find_mut(4.get(), |&i| i == 0).is_err());",
          "    assert!(indices.find_mut(5.get(), |&i| i == 1).is_err());",
          "    assert!(indices.find_mut(6.get(), |&i| i == 2).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::with_capacity(6);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(7), key: 7, value: 70 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 80 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 90 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.increment_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    let shifted_entries_len = entries.len();",
          "    let indices_capacity = indices.capacity();",
          "    assert!(shifted_entries_len > indices_capacity / 2);",
          "    let indices_copy = indices.clone();",
          "    ref_mut.increment_indices(0, 1);",
          "    for i in &indices_copy {",
          "    assert!(*i < 1);",
          "    }",
          "    assert_eq!(indices.len(), indices_copy.len());",
          "    assert_eq!(entries[0].hash, HashValue(7));",
          "    assert_eq!(entries[0].key, 7);",
          "    assert_eq!(entries[0].value, 70);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::with_capacity(6);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(7), key: 7, value: 70 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 80 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 90 },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.increment_indices(0, 1);",
          "    let shifted_entries_len = entries.len();",
          "    let indices_capacity = indices.capacity();",
          "    assert!(shifted_entries_len > indices_capacity / 2);",
          "    let indices_copy = indices.clone();",
          "    ref_mut.increment_indices(0, 1);",
          "    for i in &indices_copy {",
          "    assert!(*i < 1);",
          "    }",
          "    assert_eq!(indices.len(), indices_copy.len());",
          "    assert_eq!(entries[0].hash, HashValue(7));",
          "    assert_eq!(entries[0].key, 7);",
          "    assert_eq!(entries[0].value, 70);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]