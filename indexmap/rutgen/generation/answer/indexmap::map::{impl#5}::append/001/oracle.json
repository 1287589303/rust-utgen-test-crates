[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\"), (2, \"b\")]);",
          "    let mut b = IndexMap::<i32, &str, RandomState>::from([(3, \"c\"), (4, \"d\")]);",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 4);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&[1, 2, 3, 4]));",
          "    assert_eq!(a[&3], \"c\");",
          "    assert_eq!(a[&1], \"a\");",
          "    assert_eq!(a[&2], \"b\");",
          "    assert_eq!(a[&4], \"d\");"
        ],
        "code": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\"), (2, \"b\")]);",
          "    let mut b = IndexMap::<i32, &str, RandomState>::from([(3, \"c\"), (4, \"d\")]);",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "    assert_eq!(a.len(), 4);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&[1, 2, 3, 4]));",
          "    assert_eq!(a[&3], \"c\");",
          "    assert_eq!(a[&1], \"a\");",
          "    assert_eq!(a[&2], \"b\");",
          "    assert_eq!(a[&4], \"d\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\"), (2, \"b\")]);",
          "    let mut b = IndexMap::<i32, &str, RandomState>::from([(2, \"c\"), (3, \"d\")]);",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 4);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&[1, 2, 3]));",
          "    assert_eq!(a[&2], \"c\");"
        ],
        "code": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\"), (2, \"b\")]);",
          "    let mut b = IndexMap::<i32, &str, RandomState>::from([(2, \"c\"), (3, \"d\")]);",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "    assert_eq!(a.len(), 4);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&[1, 2, 3]));",
          "    assert_eq!(a[&2], \"c\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\")]);",
          "    let mut b: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 1);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&[1]));"
        ],
        "code": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\")]);",
          "    let mut b: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "    assert_eq!(a.len(), 1);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&[1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\"), (2, \"b\")]);",
          "    let mut b = IndexMap::<i32, &str, RandomState>::from([(3, \"c\")]);",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 3);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert_eq!(a.keys().collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert_eq!(a[&3], \"c\");"
        ],
        "code": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::from([(1, \"a\"), (2, \"b\")]);",
          "    let mut b = IndexMap::<i32, &str, RandomState>::from([(3, \"c\")]);",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "    assert_eq!(a.len(), 3);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert_eq!(a.keys().collect::<Vec<_>>(), vec![1, 2, 3]);",
          "    assert_eq!(a[&3], \"c\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::new();",
          "    for i in 0..1000 {",
          "        a.insert(i, \"value\");",
          "    }",
          "    ",
          "    let mut b = IndexMap::<i32, &str, RandomState>::new();",
          "    for i in 1000..2000 {",
          "        b.insert(i, \"value\");",
          "    }",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 2000);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&(0..1000).chain(1000..2000)));",
          "    assert_eq!(a[&999], \"value\");",
          "    assert_eq!(a[&1000], \"value\");",
          "    assert_eq!(a[&1999], \"value\");"
        ],
        "code": [
          "{",
          "    let mut a = IndexMap::<i32, &str, RandomState>::new();",
          "    for i in 0..1000 {",
          "        a.insert(i, \"value\");",
          "    }",
          "    ",
          "    let mut b = IndexMap::<i32, &str, RandomState>::new();",
          "    for i in 1000..2000 {",
          "        b.insert(i, \"value\");",
          "    }",
          "    ",
          "    let old_capacity = b.capacity();",
          "    a.append(&mut b);",
          "    ",
          "    a.len();",
          "    b.len();",
          "    b.capacity();",
          "    assert_eq!(a.len(), 2000);",
          "    assert_eq!(b.len(), 0);",
          "    assert_eq!(b.capacity(), old_capacity);",
          "    assert!(a.keys().eq(&(0..1000).chain(1000..2000)));",
          "    assert_eq!(a[&999], \"value\");",
          "    assert_eq!(a[&1000], \"value\");",
          "    assert_eq!(a[&1999], \"value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]