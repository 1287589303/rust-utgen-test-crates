[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    set.inner.map.insert(1, ());",
          "    set.inner.map.insert(2, ());",
          "    set.inner.map.insert(3, ());",
          "",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.inner.map.len(), 3);",
          "    assert_eq!(removed_value, Some(2));",
          "    assert_eq!(set.inner.map.len(), 2);",
          "    assert!(set.inner.map.get_index(1).is_some());",
          "    assert_eq!(set.inner.map.get_index(0), Some(&1));",
          "    assert_eq!(set.inner.map.get_index(1), Some(&3));",
          "    assert!(set.inner.map.get_index(2).is_none());",
          "    assert_eq!(set.inner.swap_remove_index(0), Some(1));",
          "    assert_eq!(set.inner.map.len(), 1);",
          "    assert_eq!(set.inner.swap_remove_index(0), Some(3));",
          "    assert_eq!(set.inner.map.len(), 0);",
          "    assert_eq!(set.inner.swap_remove_index(0), None);",
          "    assert!(set.inner.map.get_index(0).is_none());"
        ],
        "code": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    set.inner.map.insert(1, ());",
          "    set.inner.map.insert(2, ());",
          "    set.inner.map.insert(3, ());",
          "",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "    assert_eq!(set.inner.map.len(), 3);",
          "    assert_eq!(removed_value, Some(2));",
          "    assert_eq!(set.inner.map.len(), 2);",
          "    assert!(set.inner.map.get_index(1).is_some());",
          "    assert_eq!(set.inner.map.get_index(0), Some(&1));",
          "    assert_eq!(set.inner.map.get_index(1), Some(&3));",
          "    assert!(set.inner.map.get_index(2).is_none());",
          "    assert_eq!(set.inner.swap_remove_index(0), Some(1));",
          "    assert_eq!(set.inner.map.len(), 1);",
          "    assert_eq!(set.inner.swap_remove_index(0), Some(3));",
          "    assert_eq!(set.inner.map.len(), 0);",
          "    assert_eq!(set.inner.swap_remove_index(0), None);",
          "    assert!(set.inner.map.get_index(0).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    set.inner.map.insert(10, ());",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(removed_value, Some(10));",
          "    assert_eq!(set.inner.map.len(), 0);",
          "    assert!(set.inner.map.get_index(0).is_none());",
          "    assert!(set.inner.swap_remove_index(0).is_none());",
          "    set.inner.map.insert(20, ());",
          "    set.inner.map.insert(30, ());",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "    assert_eq!(removed_value, Some(30));",
          "    assert_eq!(set.inner.map.len(), 1);",
          "    assert_eq!(set.inner.map.get_index(0), Some(&20));"
        ],
        "code": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    set.inner.map.insert(10, ());",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "    assert_eq!(removed_value, Some(10));",
          "    assert_eq!(set.inner.map.len(), 0);",
          "    assert!(set.inner.map.get_index(0).is_none());",
          "    assert!(set.inner.swap_remove_index(0).is_none());",
          "    set.inner.map.insert(20, ());",
          "    set.inner.map.insert(30, ());",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "    assert_eq!(removed_value, Some(30));",
          "    assert_eq!(set.inner.map.len(), 1);",
          "    assert_eq!(set.inner.map.get_index(0), Some(&20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    set.inner.map.insert(20, ());",
          "    set.inner.map.insert(30, ());",
          "",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(removed_value, Some(30));",
          "    assert_eq!(set.inner.map.len(), 1);",
          "    assert_eq!(set.inner.map.get_index(0), Some(&20));",
          "    assert_eq!(set.inner.map.get_index(1), None);",
          "    assert!(set.inner.swap_remove_index(0).is_some());",
          "    assert!(set.inner.swap_remove_index(0).is_none());"
        ],
        "code": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    set.inner.map.insert(20, ());",
          "    set.inner.map.insert(30, ());",
          "",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "    assert_eq!(removed_value, Some(30));",
          "    assert_eq!(set.inner.map.len(), 1);",
          "    assert_eq!(set.inner.map.get_index(0), Some(&20));",
          "    assert_eq!(set.inner.map.get_index(1), None);",
          "    assert!(set.inner.swap_remove_index(0).is_some());",
          "    assert!(set.inner.swap_remove_index(0).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    assert!(removed_value.is_none());",
          "    set.inner.push(1);",
          "    set.inner.push(2);",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "    assert_eq!(removed_value, Some(1));",
          "    assert_eq!(set.inner.len(), 1);",
          "    assert_eq!(set.inner.first(), Some(&2));",
          "    set.inner.push(3);",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "    assert_eq!(removed_value, Some(3));",
          "    assert_eq!(set.inner.len(), 1);",
          "    assert_eq!(set.inner.first(), Some(&2));",
          "    set.inner.push(4);",
          "    set.inner.push(5);",
          "    set.inner.push(6);",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "    assert_eq!(removed_value, Some(2));",
          "    assert_eq!(set.inner.len(), 3);",
          "    assert!(set.inner.first().map(|&x| x) == Some(5) || set.inner.first().map(|&x| x) == Some(6));",
          "    set.inner.push(7);",
          "    let removed_value = set.inner.swap_remove_index(2);",
          "    assert_eq!(removed_value, Some(7));",
          "    assert_eq!(set.inner.len(), 3);"
        ],
        "code": [
          "{",
          "    struct TestIndexSet {",
          "        inner: super::IndexSet<i32, ()>,",
          "    }",
          "",
          "    let mut set = TestIndexSet {",
          "        inner: super::IndexSet {",
          "            map: super::IndexMap {",
          "                core: super::IndexMapCore::new(),",
          "                hash_builder: (),",
          "            },",
          "        },",
          "    };",
          "",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "    assert!(removed_value.is_none());",
          "    set.inner.push(1);",
          "    set.inner.push(2);",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "    assert_eq!(removed_value, Some(1));",
          "    assert_eq!(set.inner.len(), 1);",
          "    assert_eq!(set.inner.first(), Some(&2));",
          "    set.inner.push(3);",
          "    let removed_value = set.inner.swap_remove_index(1);",
          "    assert_eq!(removed_value, Some(3));",
          "    assert_eq!(set.inner.len(), 1);",
          "    assert_eq!(set.inner.first(), Some(&2));",
          "    set.inner.push(4);",
          "    set.inner.push(5);",
          "    set.inner.push(6);",
          "    let removed_value = set.inner.swap_remove_index(0);",
          "    assert_eq!(removed_value, Some(2));",
          "    assert_eq!(set.inner.len(), 3);",
          "    assert!(set.inner.first().map(|&x| x) == Some(5) || set.inner.first().map(|&x| x) == Some(6));",
          "    set.inner.push(7);",
          "    let removed_value = set.inner.swap_remove_index(2);",
          "    assert_eq!(removed_value, Some(7));",
          "    assert_eq!(set.inner.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]