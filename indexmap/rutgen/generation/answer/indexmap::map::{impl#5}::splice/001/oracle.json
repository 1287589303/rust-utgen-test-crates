[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]);",
          "    let new = vec![(5, 'E'), (4, 'D'), (3, 'C')];",
          "    let removed: Vec<_> = map.splice(1..3, new).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 5);",
          "    assert!(map.contains_key(&0));",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&5));",
          "    assert!(map.contains_key(&3));",
          "    assert!(map.contains_key(&4));",
          "    assert_eq!(removed, vec![(1, 'a'), (2, 'b')]);",
          "    assert!(map.get(&1).unwrap() == &'C');",
          "    assert!(map.get(&4).unwrap() == &'D');",
          "    assert!(map.get(&5).unwrap() == &'E');",
          "    assert!(map.get(&2).unwrap() == &'b');"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]);",
          "    let new = vec![(5, 'E'), (4, 'D'), (3, 'C')];",
          "    let removed: Vec<_> = map.splice(1..3, new).collect();",
          "    assert_eq!(map.len(), 5);",
          "    assert!(map.contains_key(&0));",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&5));",
          "    assert!(map.contains_key(&3));",
          "    assert!(map.contains_key(&4));",
          "    assert_eq!(removed, vec![(1, 'a'), (2, 'b')]);",
          "    assert!(map.get(&1).unwrap() == &'C');",
          "    assert!(map.get(&4).unwrap() == &'D');",
          "    assert!(map.get(&5).unwrap() == &'E');",
          "    assert!(map.get(&2).unwrap() == &'b');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c')]);",
          "    let new = vec![(5, 'E'), (6, 'F')];",
          "    let removed: Vec<_> = map.splice(0..4, new).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(removed, vec![(0, '_'), (1, 'a'), (2, 'b'), (3, 'c')]);",
          "    assert!(map.into_iter().eq([(4, 'd'), (5, 'E'), (6, 'F')]));"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c')]);",
          "    let new = vec![(5, 'E'), (6, 'F')];",
          "    let removed: Vec<_> = map.splice(0..4, new).collect();",
          "    assert_eq!(removed, vec![(0, '_'), (1, 'a'), (2, 'b'), (3, 'c')]);",
          "    assert!(map.into_iter().eq([(4, 'd'), (5, 'E'), (6, 'F')]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]);",
          "    let new = vec![(5, 'E'), (6, 'F')];",
          "    let removed: Vec<_> = map.splice(2..3, new).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(removed, vec![(2, 'b')]);",
          "    assert!(map.into_iter().eq([(0, '_'), (1, 'a'), (5, 'E'), (3, 'c'), (4, 'd')]));",
          "    assert!(map.len() == 5);"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]);",
          "    let new = vec![(5, 'E'), (6, 'F')];",
          "    let removed: Vec<_> = map.splice(2..3, new).collect();",
          "    assert_eq!(removed, vec![(2, 'b')]);",
          "    assert!(map.into_iter().eq([(0, '_'), (1, 'a'), (5, 'E'), (3, 'c'), (4, 'd')]));",
          "    assert!(map.len() == 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b')]);",
          "    let new = vec![(5, 'E')];",
          "    let _removed: Vec<_> = map.splice(2..1, new).collect();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b')]);",
          "    let new = vec![(5, 'E')];",
          "    let _removed: Vec<_> = map.splice(2..1, new).collect();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b')]);",
          "    let new = vec![(5, 'E')];",
          "    let _removed: Vec<_> = map.splice(2..1, new).collect();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b')]);",
          "    let new = vec![(5, 'E')];",
          "    let _removed: Vec<_> = map.splice(2..1, new).collect();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b')]);",
          "    let new = vec![(5, 'E')];",
          "    let _removed: Vec<_> = map.splice(0..4, new).collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| map.splice(0..4, new)).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b')]);",
          "    let new = vec![(5, 'E')];",
          "    let _removed: Vec<_> = map.splice(0..4, new).collect();",
          "    assert_eq!(std::panic::catch_unwind(|| map.splice(0..4, new)).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]