[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    let _ = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    let _ = map.len();",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    let _ = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    map.insert(3, 4);",
          "    assert_eq!(map.len(), 2);",
          "    map.insert(5, 6);",
          "    assert_eq!(map.len(), 3);",
          "    map.insert(7, 8);",
          "    map.insert(9, 10);",
          "    assert_eq!(map.len(), 5);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    let _ = map.len();",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(3, 4);",
          "    assert_eq!(map.len(), 2);",
          "    map.insert(5, 6);",
          "    assert_eq!(map.len(), 3);",
          "    map.insert(7, 8);",
          "    map.insert(9, 10);",
          "    assert_eq!(map.len(), 5);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    map.insert(3, 4);",
          "    map.insert(5, 6);",
          "    let _ = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(10, 20);",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(30, 40);",
          "    map.insert(50, 60);",
          "    assert_eq!(map.len(), 3);",
          "    map.truncate(2);",
          "    assert_eq!(map.len(), 2);",
          "    let _ = map.split_off(1);",
          "    assert_eq!(map.len(), 1);",
          "    map.reserve(5);",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    map.insert(3, 4);",
          "    map.insert(5, 6);",
          "    let _ = map.len();",
          "    assert_eq!(map.len(), 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(10, 20);",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(30, 40);",
          "    map.insert(50, 60);",
          "    assert_eq!(map.len(), 3);",
          "    map.truncate(2);",
          "    assert_eq!(map.len(), 2);",
          "    let _ = map.split_off(1);",
          "    assert_eq!(map.len(), 1);",
          "    map.reserve(5);",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    map.clear();",
          "    let _ = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    map.clear();",
          "    let _ = map.len();",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_capacity = crate::IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_capacity_and_hasher(max_capacity, std::collections::hash_map::RandomState::new());",
          "    for i in 0..max_capacity {",
          "        map.insert(i, i + 1);",
          "    }",
          "    let _ = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), max_capacity);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(1, 2);",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(3, 4);",
          "    assert_eq!(map.len(), 2);",
          "    map.truncate(1);",
          "    assert_eq!(map.len(), 1);",
          "    map.truncate(0);",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let max_capacity = crate::IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_capacity_and_hasher(max_capacity, std::collections::hash_map::RandomState::new());",
          "    for i in 0..max_capacity {",
          "        map.insert(i, i + 1);",
          "    }",
          "    let _ = map.len();",
          "    assert_eq!(map.len(), max_capacity);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(1, 2);",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(3, 4);",
          "    assert_eq!(map.len(), 2);",
          "    map.truncate(1);",
          "    assert_eq!(map.len(), 1);",
          "    map.truncate(0);",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    map.insert(3, 4);",
          "    for _ in map.iter() {",
          "        map.insert(5, 6);",
          "    }",
          "    let _ = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    map.insert(7, 8);",
          "    assert_eq!(map.len(), 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(9, 10);",
          "    map.insert(11, 12);",
          "    map.insert(13, 14);",
          "    assert_eq!(map.len(), 3);",
          "    map.truncate(2);",
          "    assert_eq!(map.len(), 2);",
          "    map.reserve(5);",
          "    assert!(map.len() <= 7);"
        ],
        "code": [
          "{",
          "    let mut map: crate::IndexMap<i32, i32, std::collections::hash_map::RandomState> = crate::IndexMap::with_hasher(std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 2);",
          "    map.insert(3, 4);",
          "    for _ in map.iter() {",
          "        map.insert(5, 6);",
          "    }",
          "    let _ = map.len();",
          "    assert_eq!(map.len(), 2);",
          "    map.insert(7, 8);",
          "    assert_eq!(map.len(), 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(9, 10);",
          "    map.insert(11, 12);",
          "    map.insert(13, 14);",
          "    assert_eq!(map.len(), 3);",
          "    map.truncate(2);",
          "    assert_eq!(map.len(), 2);",
          "    map.reserve(5);",
          "    assert!(map.len() <= 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]