[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_splice(0..0);",
          "}"
        ],
        "oracle": [
          "    let result = map.split_splice(0..0);",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.0.capacity(), 0);",
          "    assert!(result.1.is_empty());",
          "    let result = map.split_splice(0..1);",
          "    assert!(result.0.is_empty());",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.0.capacity(), 0);",
          "    let result = map.split_splice(..1);",
          "    assert!(result.1.is_empty());",
          "    let result = map.split_splice(..);",
          "    assert!(result.1.is_empty());",
          "    let result = map.split_splice(1..1);",
          "    assert!(result.1.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_splice(0..0);",
          "    let result = map.split_splice(0..0);",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.0.capacity(), 0);",
          "    assert!(result.1.is_empty());",
          "    let result = map.split_splice(0..1);",
          "    assert!(result.0.is_empty());",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.0.capacity(), 0);",
          "    let result = map.split_splice(..1);",
          "    assert!(result.1.is_empty());",
          "    let result = map.split_splice(..);",
          "    assert!(result.1.is_empty());",
          "    let result = map.split_splice(1..1);",
          "    assert!(result.1.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.insert_full(0, 1, 2);",
          "    let result = map.split_splice(0..1);",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.insert_full(0, 1, 2);",
          "    let result = map.split_splice(0..1);",
          "    assert_eq!(result.0.len(), 1);",
          "    assert_eq!(result.1.len(), 1);",
          "    assert!(result.0.indices.len() > 0);",
          "    assert!(result.0.entries.len() > 0);",
          "    assert_eq!(result.0.entries[0].key, 1);",
          "    assert_eq!(result.0.entries[0].value, 2);",
          "    assert!(result.0.indices.capacity() >= 1);",
          "    assert!(result.0.indices.len() == 1);",
          "    assert!(map.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.insert_full(0, 1, 2);",
          "    let result = map.split_splice(0..1);",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.insert_full(0, 1, 2);",
          "    let result = map.split_splice(0..1);",
          "    assert_eq!(result.0.len(), 1);",
          "    assert_eq!(result.1.len(), 1);",
          "    assert!(result.0.indices.len() > 0);",
          "    assert!(result.0.entries.len() > 0);",
          "    assert_eq!(result.0.entries[0].key, 1);",
          "    assert_eq!(result.0.entries[0].value, 2);",
          "    assert!(result.0.indices.capacity() >= 1);",
          "    assert!(result.0.indices.len() == 1);",
          "    assert!(map.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
          "    map.insert_full(0, 1, 2);",
          "    map.insert_full(1, 2, 3);",
          "    let result = map.split_splice(0..2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0.len(), 1);",
          "    assert_eq!(result.0.entries.len(), 1);",
          "    assert_eq!(result.0.indices.len(), 1);",
          "    assert_eq!(result.0.entries[0].key, 2);",
          "    assert_eq!(result.0.entries[0].value, 3);",
          "    assert_eq!(result.1.len(), 2);",
          "    assert_eq!(result.1.next(), Some(Bucket { hash: 0, key: 1, value: 2 }));",
          "    assert_eq!(result.1.next(), Some(Bucket { hash: 1, key: 2, value: 3 }));",
          "    assert_eq!(result.0.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
          "    map.insert_full(0, 1, 2);",
          "    map.insert_full(1, 2, 3);",
          "    let result = map.split_splice(0..2);",
          "    assert_eq!(result.0.len(), 1);",
          "    assert_eq!(result.0.entries.len(), 1);",
          "    assert_eq!(result.0.indices.len(), 1);",
          "    assert_eq!(result.0.entries[0].key, 2);",
          "    assert_eq!(result.0.entries[0].value, 3);",
          "    assert_eq!(result.1.len(), 2);",
          "    assert_eq!(result.1.next(), Some(Bucket { hash: 0, key: 1, value: 2 }));",
          "    assert_eq!(result.1.next(), Some(Bucket { hash: 1, key: 2, value: 3 }));",
          "    assert_eq!(result.0.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
          "    map.insert_full(0, 1, 2);",
          "    map.insert_full(1, 2, 3);",
          "    let result = map.split_splice(1..2);",
          "}"
        ],
        "oracle": [
          "    let expected_length = 1;",
          "    let expected_indices_capacity = 1;",
          "    let expected_first_entry_key = 1;",
          "    let expected_first_entry_value = 2;",
          "    let result_indices = result.0.indices.len();",
          "    let result_entries = result.0.entries.len();",
          "    assert_eq!(result_indices, expected_indices_capacity);",
          "    assert_eq!(result_entries, expected_length);",
          "    assert_eq!(result.1.next(), Some(Bucket { hash: 1, key: expected_first_entry_key, value: expected_first_entry_value }));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get_index_of(0, &0), Some(0));",
          "    assert_eq!(map.get_index_of(1, &1), None);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
          "    map.insert_full(0, 1, 2);",
          "    map.insert_full(1, 2, 3);",
          "    let result = map.split_splice(1..2);",
          "    let expected_length = 1;",
          "    let expected_indices_capacity = 1;",
          "    let expected_first_entry_key = 1;",
          "    let expected_first_entry_value = 2;",
          "    let result_indices = result.0.indices.len();",
          "    let result_entries = result.0.entries.len();",
          "    assert_eq!(result_indices, expected_indices_capacity);",
          "    assert_eq!(result_entries, expected_length);",
          "    assert_eq!(result.1.next(), Some(Bucket { hash: 1, key: expected_first_entry_key, value: expected_first_entry_value }));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get_index_of(0, &0), Some(0));",
          "    assert_eq!(map.get_index_of(1, &1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_splice(1..2);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_splice(1..2);",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.1.len(), 0);",
          "    assert!(map.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_splice(1..2);",
          "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.split_splice(1..2);",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.1.len(), 0);",
          "    assert!(map.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]