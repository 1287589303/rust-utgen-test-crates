[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let self_slice: [TestKey; 3] = [TestKey, TestKey, TestKey];",
          "    let other_slice = Slice {",
          "        entries: [",
          "            Bucket::new(TestKey, TestValue),",
          "            Bucket::new(TestKey, TestValue),",
          "            Bucket::new(TestKey, TestValue),",
          "        ],",
          "    };",
          "",
          "    let result = self_slice.eq(&other_slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);",
          "    let different_other_slice = Slice {",
          "    entries: [",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    ],",
          "    };",
          "    let result_different = self_slice.eq(&different_other_slice);",
          "    assert!(result_different == false);",
          "    let another_self_slice: [TestKey; 3] = [TestKey, TestKey, TestKey];",
          "    let identical_other_slice = Slice {",
          "    entries: [",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    ],",
          "    };",
          "    let result_identical = another_self_slice.eq(&identical_other_slice);",
          "    assert!(result_identical == true);",
          "    let empty_other_slice = Slice {",
          "    entries: []",
          "    };",
          "    let result_empty = self_slice.eq(&empty_other_slice);",
          "    assert!(result_empty == false);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let self_slice: [TestKey; 3] = [TestKey, TestKey, TestKey];",
          "    let other_slice = Slice {",
          "        entries: [",
          "            Bucket::new(TestKey, TestValue),",
          "            Bucket::new(TestKey, TestValue),",
          "            Bucket::new(TestKey, TestValue),",
          "        ],",
          "    };",
          "",
          "    let result = self_slice.eq(&other_slice);",
          "    assert!(result == true);",
          "    let different_other_slice = Slice {",
          "    entries: [",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    ],",
          "    };",
          "    let result_different = self_slice.eq(&different_other_slice);",
          "    assert!(result_different == false);",
          "    let another_self_slice: [TestKey; 3] = [TestKey, TestKey, TestKey];",
          "    let identical_other_slice = Slice {",
          "    entries: [",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    Bucket::new(TestKey, TestValue),",
          "    ],",
          "    };",
          "    let result_identical = another_self_slice.eq(&identical_other_slice);",
          "    assert!(result_identical == true);",
          "    let empty_other_slice = Slice {",
          "    entries: []",
          "    };",
          "    let result_empty = self_slice.eq(&empty_other_slice);",
          "    assert!(result_empty == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let self_slice: [TestKey; 1] = [TestKey];",
          "    let other_slice = Slice {",
          "        entries: [",
          "            Bucket::new(TestKey, TestValue),",
          "        ],",
          "    };",
          "",
          "    let result = self_slice.eq(&other_slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(self_slice.len() == 1);",
          "    assert!(other_slice.entries.len() == 1);",
          "    assert!(other_slice.entries[0] != Bucket::new(TestKey, TestValue));",
          "    assert!(self_slice[0] != TestKey);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let self_slice: [TestKey; 1] = [TestKey];",
          "    let other_slice = Slice {",
          "        entries: [",
          "            Bucket::new(TestKey, TestValue),",
          "        ],",
          "    };",
          "",
          "    let result = self_slice.eq(&other_slice);",
          "    assert_eq!(result, false);",
          "    assert!(self_slice.len() == 1);",
          "    assert!(other_slice.entries.len() == 1);",
          "    assert!(other_slice.entries[0] != Bucket::new(TestKey, TestValue));",
          "    assert!(self_slice[0] != TestKey);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let self_slice: [&TestKey; 0] = [];",
          "    let other_slice = Slice {",
          "        entries: [],",
          "    };",
          "",
          "    let result = self_slice.eq(&other_slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let self_slice: [&TestKey; 0] = [];",
          "    let other_slice = Slice {",
          "        entries: [],",
          "    };",
          "",
          "    let result = self_slice.eq(&other_slice);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]