[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value> {",
          "            self.values.get_mut(index)",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![1, 2, 3] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(2));",
          "    assert_eq!(index_set.map.core.entries.values, vec![1, 3]);",
          "    assert_eq!(index_set.shift_remove_index(5), None);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(1));",
          "    assert_eq!(index_set.map.core.entries.values, vec![3]);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(3));",
          "    assert!(index_set.map.core.entries.values.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value> {",
          "            self.values.get_mut(index)",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![1, 2, 3] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(1);",
          "    assert_eq!(result, Some(2));",
          "    assert_eq!(index_set.map.core.entries.values, vec![1, 3]);",
          "    assert_eq!(index_set.shift_remove_index(5), None);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(1));",
          "    assert_eq!(index_set.map.core.entries.values, vec![3]);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(3));",
          "    assert!(index_set.map.core.entries.values.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, _index: usize) -> Option<&mut Self::Value> {",
          "            None",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set: IndexSet<i32, RandomState> = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.shift_remove_index(0), None);",
          "    index_set.values.push(10);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(10));",
          "    assert_eq!(index_set.values.len(), 0);",
          "    index_set.values.push(20);",
          "    index_set.values.push(30);",
          "    assert_eq!(index_set.shift_remove_index(1), Some(30));",
          "    assert_eq!(index_set.values.len(), 1);",
          "    assert_eq!(index_set.values[0], 20);",
          "    assert!(index_set.shift_remove_index(5).is_none());",
          "    index_set.values.push(40);",
          "    index_set.values.push(50);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(40));",
          "    assert_eq!(index_set.values.len(), 2);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(50));",
          "    assert_eq!(index_set.values.len(), 1);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(20));",
          "    assert_eq!(index_set.values.len(), 0);",
          "    assert_eq!(index_set.shift_remove_index(0), None);"
        ],
        "code": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, _index: usize) -> Option<&mut Self::Value> {",
          "            None",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set: IndexSet<i32, RandomState> = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "    assert_eq!(index_set.shift_remove_index(0), None);",
          "    index_set.values.push(10);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(10));",
          "    assert_eq!(index_set.values.len(), 0);",
          "    index_set.values.push(20);",
          "    index_set.values.push(30);",
          "    assert_eq!(index_set.shift_remove_index(1), Some(30));",
          "    assert_eq!(index_set.values.len(), 1);",
          "    assert_eq!(index_set.values[0], 20);",
          "    assert!(index_set.shift_remove_index(5).is_none());",
          "    index_set.values.push(40);",
          "    index_set.values.push(50);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(40));",
          "    assert_eq!(index_set.values.len(), 2);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(50));",
          "    assert_eq!(index_set.values.len(), 1);",
          "    assert_eq!(index_set.shift_remove_index(0), Some(20));",
          "    assert_eq!(index_set.values.len(), 0);",
          "    assert_eq!(index_set.shift_remove_index(0), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value> {",
          "            self.values.get_mut(index)",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![5, 10, 15] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(5));",
          "    assert_eq!(index_set.map.core.entries.values, vec![10, 15]);",
          "    assert!(index_set.shift_remove_index(3).is_none());",
          "    assert!(index_set.shift_remove_index(2).is_none());",
          "    assert!(index_set.shift_remove_index(1).is_none());",
          "    assert_eq!(index_set.map.core.entries.values.len(), 2);",
          "    index_set.shift_remove_index(0);",
          "    assert_eq!(index_set.map.core.entries.values, vec![15]);",
          "    index_set.shift_remove_index(0);",
          "    assert_eq!(index_set.map.core.entries.values, vec![]);"
        ],
        "code": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value> {",
          "            self.values.get_mut(index)",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![5, 10, 15] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "    assert_eq!(result, Some(5));",
          "    assert_eq!(index_set.map.core.entries.values, vec![10, 15]);",
          "    assert!(index_set.shift_remove_index(3).is_none());",
          "    assert!(index_set.shift_remove_index(2).is_none());",
          "    assert!(index_set.shift_remove_index(1).is_none());",
          "    assert_eq!(index_set.map.core.entries.values.len(), 2);",
          "    index_set.shift_remove_index(0);",
          "    assert_eq!(index_set.map.core.entries.values, vec![15]);",
          "    index_set.shift_remove_index(0);",
          "    assert_eq!(index_set.map.core.entries.values, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value> {",
          "            self.values.get_mut(index)",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![100, 200, 300] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(2);",
          "}"
        ],
        "oracle": [
          "    let result = index_set.shift_remove_index(2);",
          "    assert_eq!(result, Some(300));",
          "    ",
          "    let result = index_set.shift_remove_index(1);",
          "    assert_eq!(result, Some(200));",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "    assert_eq!(result, Some(100));",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = index_set.shift_remove_index(1);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestMutableValues {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    impl private::Sealed for TestMutableValues {}",
          "    impl MutableValues for TestMutableValues {",
          "        type Value = i32;",
          "",
          "        fn get_full_mut2<Q>(&mut self, _value: &Q) -> Option<(usize, &mut Self::Value)>",
          "        where",
          "            Q: ?Sized + Hash + Equivalent<Self::Value>,",
          "        {",
          "            None",
          "        }",
          "",
          "        fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value> {",
          "            self.values.get_mut(index)",
          "        }",
          "",
          "        fn retain2<F>(&mut self, _keep: F)",
          "        where",
          "            F: FnMut(&mut Self::Value) -> bool,",
          "        {",
          "        }",
          "    }",
          "",
          "    let mut index_set = IndexSet {",
          "        map: IndexMap {",
          "            core: IndexMapCore {",
          "                entries: TestMutableValues { values: vec![100, 200, 300] },",
          "            },",
          "            hash_builder: RandomState::new(),",
          "        },",
          "    };",
          "    ",
          "    let result = index_set.shift_remove_index(2);",
          "    let result = index_set.shift_remove_index(2);",
          "    assert_eq!(result, Some(300));",
          "    ",
          "    let result = index_set.shift_remove_index(1);",
          "    assert_eq!(result, Some(200));",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "    assert_eq!(result, Some(100));",
          "    ",
          "    let result = index_set.shift_remove_index(0);",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = index_set.shift_remove_index(1);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]