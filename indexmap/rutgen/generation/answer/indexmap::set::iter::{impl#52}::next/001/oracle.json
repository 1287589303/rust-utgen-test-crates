[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((1, ())));",
          "    assert_eq!(unit_value_iter.next(), Some((2, ())));",
          "    assert_eq!(unit_value_iter.next(), Some((3, ())));",
          "    assert_eq!(unit_value_iter.next(), None);"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((1, ())));",
          "    assert_eq!(unit_value_iter.next(), Some((2, ())));",
          "    assert_eq!(unit_value_iter.next(), Some((3, ())));",
          "    assert_eq!(unit_value_iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![\"a\", \"b\", \"c\"];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "}"
        ],
        "oracle": [
          "    let vec = vec![\"a\", \"b\", \"c\"];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((&\"a\", ())));",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((&\"b\", ())));",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((&\"c\", ())));",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let vec = vec![\"a\", \"b\", \"c\"];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "    let vec = vec![\"a\", \"b\", \"c\"];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((&\"a\", ())));",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((&\"b\", ())));",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, Some((&\"c\", ())));",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec: Vec<i32> = Vec::new();",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let vec: Vec<i32> = Vec::new();",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let result = unit_value_iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![42, 3.14];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let first_result = unit_value_iter.next();",
          "    let second_result = unit_value_iter.next();",
          "}"
        ],
        "oracle": [
          "    let expected_first_result = Some((42, ()));",
          "    let expected_second_result = Some((3.14, ()));",
          "    assert_eq!(first_result, expected_first_result);",
          "    assert_eq!(second_result, expected_second_result);"
        ],
        "code": [
          "{",
          "    let vec = vec![42, 3.14];",
          "    let iter = vec.iter();",
          "    let mut unit_value_iter = UnitValue(iter);",
          "    let first_result = unit_value_iter.next();",
          "    let second_result = unit_value_iter.next();",
          "    let expected_first_result = Some((42, ()));",
          "    let expected_second_result = Some((3.14, ()));",
          "    assert_eq!(first_result, expected_first_result);",
          "    assert_eq!(second_result, expected_second_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]