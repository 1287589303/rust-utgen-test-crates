[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.indices.insert_unique(1, 0, |_| unreachable!()); // total_indices = 1",
          "    // start = 0, end = 1, erased = 0",
          "    map.erase_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.indices.is_empty());",
          "    assert!(map.entries.is_empty());",
          "    assert!(map.indices.capacity() > 1);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.indices.insert_unique(1, 0, |_| unreachable!()); // total_indices = 1",
          "    // start = 0, end = 1, erased = 0",
          "    map.erase_indices(0, 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert!(map.indices.is_empty());",
          "    assert!(map.entries.is_empty());",
          "    assert!(map.indices.capacity() > 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.indices.insert_unique(1, 0, |_| unreachable!()); // total_indices = 1",
          "    map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    map.indices.insert_unique(3, 2, |_| unreachable!()); // total_indices = 3",
          "    // start = 0, end = 1, erased = 0, shifting one index",
          "    map.erase_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 2);",
          "    assert!(!map.indices.contains_key(&1));",
          "    assert!(map.indices.contains_key(&2));",
          "    assert!(map.indices.contains_key(&3));",
          "    assert_eq!(map.indices.get(&2), Some(&1));",
          "    assert_eq!(map.indices.get(&3), Some(&2));",
          "    assert_eq!(map.entries.len(), 3);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.capacity(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.indices.insert_unique(1, 0, |_| unreachable!()); // total_indices = 1",
          "    map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    map.indices.insert_unique(3, 2, |_| unreachable!()); // total_indices = 3",
          "    // start = 0, end = 1, erased = 0, shifting one index",
          "    map.erase_indices(0, 1);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert!(!map.indices.contains_key(&1));",
          "    assert!(map.indices.contains_key(&2));",
          "    assert!(map.indices.contains_key(&3));",
          "    assert_eq!(map.indices.get(&2), Some(&1));",
          "    assert_eq!(map.indices.get(&3), Some(&2));",
          "    assert_eq!(map.entries.len(), 3);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.capacity(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.indices.insert_unique(1, 0, |_| unreachable!()); // total_indices = 1",
          "    map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    // start = 0, end = 2, erased = 0, shifted = 0",
          "    map.erase_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 1);",
          "    assert!(map.indices.find(1).is_some());",
          "    assert!(map.indices.find(2).is_none());",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    map.indices.insert_unique(1, 0, |_| unreachable!()); // total_indices = 1",
          "    map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    // start = 0, end = 2, erased = 0, shifted = 0",
          "    map.erase_indices(0, 2);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert!(map.indices.find(1).is_some());",
          "    assert!(map.indices.find(2).is_none());",
          "    assert_eq!(map.entries.len(), 0);",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]