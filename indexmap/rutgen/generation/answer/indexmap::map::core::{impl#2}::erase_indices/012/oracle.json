[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "",
          "    map.erase_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.capacity(), 2);",
          "    assert_eq!(map.entries.as_entries()[0], Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    assert_eq!(map.entries.as_entries()[1], Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    assert_eq!(map.indices.get(0), Some(&1));",
          "    assert_eq!(map.indices.get(1), Some(&0));",
          "    assert_eq!(map.pop(), Some((1, 10)));",
          "    assert_eq!(map.pop(), Some((2, 20)));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "",
          "    map.erase_indices(0, 1);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.indices.capacity(), 2);",
          "    assert_eq!(map.entries.as_entries()[0], Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    assert_eq!(map.entries.as_entries()[1], Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    assert_eq!(map.indices.get(0), Some(&1));",
          "    assert_eq!(map.indices.get(1), Some(&0));",
          "    assert_eq!(map.pop(), Some((1, 10)));",
          "    assert_eq!(map.pop(), Some((2, 20)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "",
          "    map.erase_indices(1, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.indices.get(1).is_some());",
          "    assert!(map.entries.get(0).is_some());",
          "    assert!(map.entries.get(1).is_some());",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[1].value, 20);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "",
          "    map.erase_indices(1, 1);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert_eq!(map.indices.len(), 2);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.indices.get(1).is_some());",
          "    assert!(map.entries.get(0).is_some());",
          "    assert!(map.entries.get(1).is_some());",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[1].value, 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "    ",
          "    map.erase_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.entries.get(0).is_some());",
          "    assert!(map.entries.get(1).is_some());",
          "    assert!(map.entries.get(2).is_none());",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.capacity(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "    ",
          "    map.erase_indices(0, 2);",
          "    assert_eq!(map.indices.len(), 0);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.entries.get(0).is_some());",
          "    assert!(map.entries.get(1).is_some());",
          "    assert!(map.entries.get(2).is_none());",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.capacity(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "    ",
          "    map.entries.push(Bucket { hash: HashValue(3), key: 3, value: 30 });",
          "",
          "    map.erase_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.entries.get(0).is_some());",
          "    assert_eq!(map.entries[0].key, 2);",
          "    assert_eq!(map.entries[0].value, 20);",
          "    assert_eq!(map.indices.capacity(), 2);",
          "    assert!(map.indices.get(0).is_none());",
          "    assert!(map.indices.get(1).is_some());",
          "    assert_eq!(map.indices.get(1), Some(&1));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(2);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "    ",
          "    map.entries.push(Bucket { hash: HashValue(3), key: 3, value: 30 });",
          "",
          "    map.erase_indices(0, 1);",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert!(map.entries.get(0).is_some());",
          "    assert_eq!(map.entries[0].key, 2);",
          "    assert_eq!(map.entries[0].value, 20);",
          "    assert_eq!(map.indices.capacity(), 2);",
          "    assert!(map.indices.get(0).is_none());",
          "    assert!(map.indices.get(1).is_some());",
          "    assert_eq!(map.indices.get(1), Some(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(3);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "    ",
          "    map.erase_indices(0, 1);",
          "    ",
          "    map.indices.push(HashValue(4));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.indices.get(0).unwrap(), &HashValue(4));",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[1].value, 20);",
          "    assert_eq!(map.indices.capacity(), 3);",
          "    assert!(map.indices.get(0).is_some());",
          "    assert!(map.indices.get(1).is_none());",
          "    assert!(map.indices.get(2).is_none());",
          "    assert_ne!(map.indices.get(0).unwrap(), &HashValue(1));",
          "    assert_ne!(map.entries.get(0).unwrap().hash, HashValue(2));",
          "    assert!(map.indices.iter().any(|&index| index == HashValue(4)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.indices[0] >= 0);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.with_capacity(3);",
          "    map.push_entry(HashValue(1), 1, 10);",
          "    map.push_entry(HashValue(2), 2, 20);",
          "    ",
          "    map.erase_indices(0, 1);",
          "    ",
          "    map.indices.push(HashValue(4));",
          "    assert_eq!(map.indices.len(), 1);",
          "    assert_eq!(map.indices.get(0).unwrap(), &HashValue(4));",
          "    assert_eq!(map.entries.len(), 2);",
          "    assert_eq!(map.entries[0].key, 1);",
          "    assert_eq!(map.entries[0].value, 10);",
          "    assert_eq!(map.entries[1].key, 2);",
          "    assert_eq!(map.entries[1].value, 20);",
          "    assert_eq!(map.indices.capacity(), 3);",
          "    assert!(map.indices.get(0).is_some());",
          "    assert!(map.indices.get(1).is_none());",
          "    assert!(map.indices.get(2).is_none());",
          "    assert_ne!(map.indices.get(0).unwrap(), &HashValue(1));",
          "    assert_ne!(map.entries.get(0).unwrap().hash, HashValue(2));",
          "    assert!(map.indices.iter().any(|&index| index == HashValue(4)));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.indices[0] >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]