[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::new();",
          "    index_map.indices = Indices::with_capacity(2); // Precondition: half_capacity > 0",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    ",
          "    index_map.erase_indices(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 2); // Test for erased == 0 at line 460 is true",
          "    assert!(index_map.indices.capacity() >= 2); // Check that capacity allows for indices",
          "    index_map.erase_indices(0, 2); // Test with full range",
          "    assert_eq!(index_map.indices.len(), 2); // Ensure indices remain unchanged in case of no erased entries",
          "    assert_eq!(index_map.entries.len(), 2); // Validate that entries remain unchanged",
          "    assert!(index_map.indices.get(0) == Some(0)); // Check index validity for first entry",
          "    assert!(index_map.indices.get(1) == Some(1)); // Check index validity for second entry",
          "    index_map.entries.clear(); // Clear entries to test edge conditions",
          "    index_map.erase_indices(0, 2); // Test with empty entries after clear",
          "    assert!(index_map.indices.len() == 0); // Check that indices are empty after clearing entries"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::new();",
          "    index_map.indices = Indices::with_capacity(2); // Precondition: half_capacity > 0",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    ",
          "    index_map.erase_indices(0, 0);",
          "    assert_eq!(index_map.indices.len(), 2); // Test for erased == 0 at line 460 is true",
          "    assert!(index_map.indices.capacity() >= 2); // Check that capacity allows for indices",
          "    index_map.erase_indices(0, 2); // Test with full range",
          "    assert_eq!(index_map.indices.len(), 2); // Ensure indices remain unchanged in case of no erased entries",
          "    assert_eq!(index_map.entries.len(), 2); // Validate that entries remain unchanged",
          "    assert!(index_map.indices.get(0) == Some(0)); // Check index validity for first entry",
          "    assert!(index_map.indices.get(1) == Some(1)); // Check index validity for second entry",
          "    index_map.entries.clear(); // Clear entries to test edge conditions",
          "    index_map.erase_indices(0, 2); // Test with empty entries after clear",
          "    assert!(index_map.indices.len() == 0); // Check that indices are empty after clearing entries",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(4);",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "",
          "    index_map.erase_indices(1, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 4);",
          "    assert_eq!(index_map.indices.len(), 2);",
          "    assert_eq!(index_map.entries.len(), 4);",
          "    assert_eq!(index_map.entries[0], Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    assert_eq!(index_map.entries[1], Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "    ",
          "    let half_capacity = index_map.indices.capacity() / 2;",
          "    let start = 1;",
          "    let shifted_entries = index_map.entries[2..].to_vec();",
          "    assert!(start + shifted_entries.len() < half_capacity);",
          "    ",
          "    let erased_entries = index_map.entries[1..3].to_vec();",
          "    assert!(erased_entries.len() > 0);",
          "    assert!(start < erased_entries.len());"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(4);",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "",
          "    index_map.erase_indices(1, 3);",
          "    assert_eq!(index_map.len(), 4);",
          "    assert_eq!(index_map.indices.len(), 2);",
          "    assert_eq!(index_map.entries.len(), 4);",
          "    assert_eq!(index_map.entries[0], Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    assert_eq!(index_map.entries[1], Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "    ",
          "    let half_capacity = index_map.indices.capacity() / 2;",
          "    let start = 1;",
          "    let shifted_entries = index_map.entries[2..].to_vec();",
          "    assert!(start + shifted_entries.len() < half_capacity);",
          "    ",
          "    let erased_entries = index_map.entries[1..3].to_vec();",
          "    assert!(erased_entries.len() > 0);",
          "    assert!(start < erased_entries.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::new();",
          "    index_map.indices = Indices::with_capacity(4);",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    index_map.indices.insert_unique(3, 2, |_| unreachable!());",
          "    ",
          "    index_map.erase_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert_eq!(index_map.entries.len(), 3);",
          "    assert!(index_map.entries[0].key == 5);",
          "    assert!(index_map.entries[0].value == 6);",
          "    assert!(index_map.indices.get(0).is_none());",
          "    assert!(index_map.indices.get(1).is_none());",
          "    assert!(index_map.indices.get(2).is_some());",
          "    assert!(index_map.indices.get(3).is_none());"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::new();",
          "    index_map.indices = Indices::with_capacity(4);",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    index_map.indices.insert_unique(3, 2, |_| unreachable!());",
          "    ",
          "    index_map.erase_indices(0, 2);",
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert_eq!(index_map.entries.len(), 3);",
          "    assert!(index_map.entries[0].key == 5);",
          "    assert!(index_map.entries[0].value == 6);",
          "    assert!(index_map.indices.get(0).is_none());",
          "    assert!(index_map.indices.get(1).is_none());",
          "    assert!(index_map.indices.get(2).is_some());",
          "    assert!(index_map.indices.get(3).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(3);",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "",
          "    index_map.erase_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert_eq!(index_map.entries.len(), 3);",
          "    assert_eq!(index_map.entries[0].key, 5);",
          "    assert_eq!(index_map.entries[0].value, 6);",
          "    assert_eq!(index_map.indices.capacity(), 3);",
          "    assert!(index_map.indices.find_entry(1, |&i| i == 0).is_err());",
          "    assert!(index_map.indices.find_entry(2, |&i| i == 1).is_err());",
          "    assert!(index_map.indices.find_entry(3, |&i| i == 2).is_err());",
          "    assert_eq!(index_map.indices.get(0), Some(&1));"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(3);",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "",
          "    index_map.erase_indices(0, 2);",
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert_eq!(index_map.entries.len(), 3);",
          "    assert_eq!(index_map.entries[0].key, 5);",
          "    assert_eq!(index_map.entries[0].value, 6);",
          "    assert_eq!(index_map.indices.capacity(), 3);",
          "    assert!(index_map.indices.find_entry(1, |&i| i == 0).is_err());",
          "    assert!(index_map.indices.find_entry(2, |&i| i == 1).is_err());",
          "    assert!(index_map.indices.find_entry(3, |&i| i == 2).is_err());",
          "    assert_eq!(index_map.indices.get(0), Some(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(3);",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "",
          "    index_map.erase_indices(2, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert!(index_map.indices.find(1).is_none());",
          "    assert_eq!(index_map.indices.find(2).unwrap(), 0);",
          "    assert_eq!(index_map.entries.len(), 3);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[1].key, 3);",
          "    assert_eq!(index_map.entries[2].key, 5);",
          "    assert_eq!(index_map.entries[1].value, 4);",
          "    assert!(index_map.indices.capacity() >= 3);",
          "    assert!(index_map.indices.capacity() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(index_map.len(), 3);",
          "    assert!(index_map.capacity() >= 3);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(3);",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "",
          "    index_map.erase_indices(2, 3);",
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert!(index_map.indices.find(1).is_none());",
          "    assert_eq!(index_map.indices.find(2).unwrap(), 0);",
          "    assert_eq!(index_map.entries.len(), 3);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[1].key, 3);",
          "    assert_eq!(index_map.entries[2].key, 5);",
          "    assert_eq!(index_map.entries[1].value, 4);",
          "    assert!(index_map.indices.capacity() >= 3);",
          "    assert!(index_map.indices.capacity() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(index_map.len(), 3);",
          "    assert!(index_map.capacity() >= 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(4);",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "    ",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    index_map.indices.insert_unique(3, 2, |_| unreachable!());",
          "    index_map.indices.insert_unique(4, 3, |_| unreachable!());",
          "",
          "    index_map.erase_indices(1, 3);",
          "}"
        ],
        "oracle": [
          "    let mut index_map = IndexMapCore::with_capacity(4);",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "    ",
          "    assert_eq!(index_map.indices.len(), 4);",
          "    assert_eq!(index_map.entries.len(), 4);",
          "    index_map.erase_indices(1, 3);",
          "    assert_eq!(index_map.indices.len(), 2);",
          "    assert_eq!(index_map.entries.len(), 4);",
          "    assert_eq!(index_map.indices[0], 0);",
          "    assert_eq!(index_map.indices[1], 3);",
          "    assert!(index_map.indices.iter().all(|&i| i < 1 || i >= 3));"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(4);",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "    ",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 1, |_| unreachable!());",
          "    index_map.indices.insert_unique(3, 2, |_| unreachable!());",
          "    index_map.indices.insert_unique(4, 3, |_| unreachable!());",
          "",
          "    index_map.erase_indices(1, 3);",
          "    let mut index_map = IndexMapCore::with_capacity(4);",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 5, value: 6 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 7, value: 8 });",
          "    ",
          "    assert_eq!(index_map.indices.len(), 4);",
          "    assert_eq!(index_map.entries.len(), 4);",
          "    index_map.erase_indices(1, 3);",
          "    assert_eq!(index_map.indices.len(), 2);",
          "    assert_eq!(index_map.entries.len(), 4);",
          "    assert_eq!(index_map.indices[0], 0);",
          "    assert_eq!(index_map.indices[1], 3);",
          "    assert!(index_map.indices.iter().all(|&i| i < 1 || i >= 3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::new();",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "",
          "    index_map.erase_indices(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert_eq!(index_map.entries.len(), 2);",
          "    assert!(index_map.indices.get(0).is_some());",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 2);",
          "    assert_eq!(index_map.entries[1].key, 3);",
          "    assert_eq!(index_map.entries[1].value, 4);",
          "    assert!(index_map.indices.get(1).is_none());"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::new();",
          "    index_map.indices.insert_unique(1, 0, |_| unreachable!());",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 2 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 3, value: 4 });",
          "",
          "    index_map.erase_indices(0, 1);",
          "    assert_eq!(index_map.indices.len(), 1);",
          "    assert_eq!(index_map.entries.len(), 2);",
          "    assert!(index_map.indices.get(0).is_some());",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 2);",
          "    assert_eq!(index_map.entries[1].key, 3);",
          "    assert_eq!(index_map.entries[1].value, 4);",
          "    assert!(index_map.indices.get(1).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]