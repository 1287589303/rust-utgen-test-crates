[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    index_map.indices.reserve(2); // Ensure there's capacity",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "",
          "    index_map.erase_indices(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 0);",
          "    assert_eq!(index_map.entries.len(), 2);",
          "    assert_eq!(index_map.entries[0].hash, HashValue(1));",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 10);",
          "    assert_eq!(index_map.entries[1].hash, HashValue(2));",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[1].value, 20);",
          "    assert!(index_map.indices.capacity() >= 2);",
          "    assert!(index_map.indices.len() <= index_map.indices.capacity());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    index_map.indices.reserve(2); // Ensure there's capacity",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "",
          "    index_map.erase_indices(0, 0);",
          "    assert_eq!(index_map.indices.len(), 0);",
          "    assert_eq!(index_map.entries.len(), 2);",
          "    assert_eq!(index_map.entries[0].hash, HashValue(1));",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[0].value, 10);",
          "    assert_eq!(index_map.entries[1].hash, HashValue(2));",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[1].value, 20);",
          "    assert!(index_map.indices.capacity() >= 2);",
          "    assert!(index_map.indices.len() <= index_map.indices.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    index_map.indices.insert_unique(0, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(1, 1, |_| unreachable!());",
          "    ",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "",
          "    index_map.erase_indices(2, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), 2);",
          "    assert_eq!(index_map.indices.len(), 2);",
          "    assert_eq!(index_map.indices.capacity(), 2);",
          "    assert!(index_map.entries.len() > 0);",
          "    assert!(index_map.entries[0].hash.0 == 1);",
          "    assert!(index_map.entries[1].hash.0 == 2);",
          "    assert!(index_map.indices.get(0).is_some());",
          "    assert!(index_map.indices.get(1).is_some());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
          "    index_map.indices.insert_unique(0, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(1, 1, |_| unreachable!());",
          "    ",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "",
          "    index_map.erase_indices(2, 2);",
          "    assert_eq!(index_map.len(), 2);",
          "    assert_eq!(index_map.indices.len(), 2);",
          "    assert_eq!(index_map.indices.capacity(), 2);",
          "    assert!(index_map.entries.len() > 0);",
          "    assert!(index_map.entries[0].hash.0 == 1);",
          "    assert!(index_map.entries[1].hash.0 == 2);",
          "    assert!(index_map.indices.get(0).is_some());",
          "    assert!(index_map.indices.get(1).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(4);",
          "    index_map.indices.insert_unique(0, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(1, 1, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 2, |_| unreachable!());",
          "    ",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 3, value: 30 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 4, value: 40 });",
          "",
          "    index_map.erase_indices(2, 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.indices.len(), 3);",
          "    assert!(index_map.indices.contains(&0));",
          "    assert!(index_map.indices.contains(&1));",
          "    assert!(index_map.indices.contains(&2));",
          "    assert!(index_map.entries.len(), 4);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[2].key, 3);",
          "    assert_eq!(index_map.entries[3].key, 4);",
          "    assert_eq!(index_map.indices.capacity(), 4);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(4);",
          "    index_map.indices.insert_unique(0, 0, |_| unreachable!());",
          "    index_map.indices.insert_unique(1, 1, |_| unreachable!());",
          "    index_map.indices.insert_unique(2, 2, |_| unreachable!());",
          "    ",
          "    index_map.entries.push(Bucket { hash: HashValue(1), key: 1, value: 10 });",
          "    index_map.entries.push(Bucket { hash: HashValue(2), key: 2, value: 20 });",
          "    index_map.entries.push(Bucket { hash: HashValue(3), key: 3, value: 30 });",
          "    index_map.entries.push(Bucket { hash: HashValue(4), key: 4, value: 40 });",
          "",
          "    index_map.erase_indices(2, 4);",
          "    assert_eq!(index_map.indices.len(), 3);",
          "    assert!(index_map.indices.contains(&0));",
          "    assert!(index_map.indices.contains(&1));",
          "    assert!(index_map.indices.contains(&2));",
          "    assert!(index_map.entries.len(), 4);",
          "    assert_eq!(index_map.entries[0].key, 1);",
          "    assert_eq!(index_map.entries[1].key, 2);",
          "    assert_eq!(index_map.entries[2].key, 3);",
          "    assert_eq!(index_map.entries[3].key, 4);",
          "    assert_eq!(index_map.indices.capacity(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]