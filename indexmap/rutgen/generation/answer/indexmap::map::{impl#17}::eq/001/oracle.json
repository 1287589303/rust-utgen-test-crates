[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    let mut map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map1.insert(1, 10);",
          "    map2.insert(2, 20);",
          "    let result = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    let mut map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map1.insert(1, 10);",
          "    map2.insert(2, 20);",
          "    let result = map1.eq(&map2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    let map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    map1.insert(1, 10);",
          "    map1.insert(2, 20);",
          "    map1.insert(3, 30);",
          "    let result = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(map1.len() != map2.len());",
          "    assert!(map1.is_empty() == false);",
          "    assert!(map2.is_empty());",
          "    assert!(map1.len() == 3);",
          "    assert!(map2.len() == 0);"
        ],
        "code": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    let map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    map1.insert(1, 10);",
          "    map1.insert(2, 20);",
          "    map1.insert(3, 30);",
          "    let result = map1.eq(&map2);",
          "    assert_eq!(result, false);",
          "    assert!(map1.len() != map2.len());",
          "    assert!(map1.is_empty() == false);",
          "    assert!(map2.is_empty());",
          "    assert!(map1.len() == 3);",
          "    assert!(map2.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let mut map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map2.insert(1, 10);",
          "    let result = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let mut map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map2.insert(1, 10);",
          "    let result = map1.eq(&map2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    let mut map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    map1.insert(1, 10);",
          "    map2.insert(1, 10);",
          "    map2.insert(2, 20);",
          "    let result = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let map1: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    let mut map2: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    map1.insert(1, 10);",
          "    map2.insert(1, 10);",
          "    map2.insert(2, 20);",
          "    let result = map1.eq(&map2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]