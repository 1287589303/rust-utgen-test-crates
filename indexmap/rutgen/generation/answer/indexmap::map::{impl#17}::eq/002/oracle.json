[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    assert!(map1.eq(&map2));",
          "}"
        ],
        "oracle": [
          "    assert!(map1.len() == map2.len());",
          "    assert!(map1.is_empty());",
          "    assert!(map2.is_empty());",
          "    assert!(map1.keys().count() == map2.keys().count());"
        ],
        "code": [
          "{",
          "    let map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    assert!(map1.eq(&map2));",
          "    assert!(map1.len() == map2.len());",
          "    assert!(map1.is_empty());",
          "    assert!(map2.is_empty());",
          "    assert!(map1.keys().count() == map2.keys().count());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map2.insert(1, \"a\");",
          "    assert!(map1.eq(&map2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.is_empty() == map2.is_empty());",
          "    assert!(map1.iter().count() == map2.iter().count());",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)));"
        ],
        "code": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map2.insert(1, \"a\");",
          "    assert!(map1.eq(&map2));",
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.is_empty() == map2.is_empty());",
          "    assert!(map1.iter().count() == map2.iter().count());",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    map1.insert(2, \"b\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    map2.insert(1, \"a\");",
          "    map2.insert(2, \"b\");",
          "    assert!(map1.eq(&map2));",
          "}"
        ],
        "oracle": [
          "    assert!(map1.len() == map2.len());",
          "    assert_eq!(map1.iter().count(), 2);",
          "    assert_eq!(map2.iter().count(), 2);",
          "    assert!(map1.get(&1) == Some(&\"a\"));",
          "    assert!(map2.get(&1) == Some(&\"a\"));",
          "    assert!(map1.get(&2) == Some(&\"b\"));",
          "    assert!(map2.get(&2) == Some(&\"b\"));",
          "    assert!(map1.eq(&map2) == true);"
        ],
        "code": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    map1.insert(2, \"b\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(3, RandomState::new());",
          "    map2.insert(1, \"a\");",
          "    map2.insert(2, \"b\");",
          "    assert!(map1.eq(&map2));",
          "    assert!(map1.len() == map2.len());",
          "    assert_eq!(map1.iter().count(), 2);",
          "    assert_eq!(map2.iter().count(), 2);",
          "    assert!(map1.get(&1) == Some(&\"a\"));",
          "    assert!(map2.get(&1) == Some(&\"a\"));",
          "    assert!(map1.get(&2) == Some(&\"b\"));",
          "    assert!(map2.get(&2) == Some(&\"b\"));",
          "    assert!(map1.eq(&map2) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    map1.insert(2, \"b\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map2.insert(1, \"a\");",
          "    map2.insert(2, \"c\");",
          "    assert!(!map1.eq(&map2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), map2.len());",
          "    assert_eq!(map1.iter().count(), 2);",
          "    assert_eq!(map2.iter().count(), 2);",
          "    assert!(map1.iter().any(|(key, value)| *value == \"a\" && *key == 1);",
          "    assert!(map1.iter().any(|(key, value)| *value == \"b\" && *key == 2);",
          "    assert!(map2.iter().any(|(key, value)| *value == \"a\" && *key == 1);",
          "    assert!(map2.iter().any(|(key, value)| *value == \"c\" && *key == 2);",
          "    assert!(!map1.eq(&map2));"
        ],
        "code": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    map1.insert(2, \"b\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map2.insert(1, \"a\");",
          "    map2.insert(2, \"c\");",
          "    assert!(!map1.eq(&map2));",
          "    assert_eq!(map1.len(), map2.len());",
          "    assert_eq!(map1.iter().count(), 2);",
          "    assert_eq!(map2.iter().count(), 2);",
          "    assert!(map1.iter().any(|(key, value)| *value == \"a\" && *key == 1);",
          "    assert!(map1.iter().any(|(key, value)| *value == \"b\" && *key == 2);",
          "    assert!(map2.iter().any(|(key, value)| *value == \"a\" && *key == 1);",
          "    assert!(map2.iter().any(|(key, value)| *value == \"c\" && *key == 2);",
          "    assert!(!map1.eq(&map2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    map1.insert(2, \"b\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map2.insert(2, \"b\");",
          "    map2.insert(1, \"a\");",
          "    assert!(map1.eq(&map2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)));",
          "    assert!(map1.eq(&map2));",
          "    assert!(map2.eq(&map1));",
          "    assert!(!map1.eq(&IndexMap::with_capacity_and_hasher(3, RandomState::new())));",
          "    map1.insert(3, \"c\");",
          "    assert!(!map1.eq(&map2));",
          "    map2.insert(3, \"c\");",
          "    assert!(map1.eq(&map2));"
        ],
        "code": [
          "{",
          "    let mut map1: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map1.insert(1, \"a\");",
          "    map1.insert(2, \"b\");",
          "    let mut map2: IndexMap<u32, &str, RandomState> = IndexMap::with_capacity_and_hasher(2, RandomState::new());",
          "    map2.insert(2, \"b\");",
          "    map2.insert(1, \"a\");",
          "    assert!(map1.eq(&map2));",
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)));",
          "    assert!(map1.eq(&map2));",
          "    assert!(map2.eq(&map1));",
          "    assert!(!map1.eq(&IndexMap::with_capacity_and_hasher(3, RandomState::new())));",
          "    map1.insert(3, \"c\");",
          "    assert!(!map1.eq(&map2));",
          "    map2.insert(3, \"c\");",
          "    assert!(map1.eq(&map2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]