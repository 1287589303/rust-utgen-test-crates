[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 1);",
          "    table.insert(1, 2);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 1, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.get(&0), Some(&0));",
          "    assert_eq!(table.get(&1), Some(&2));",
          "    assert_eq!(table.find_mut(hash.get(), move |&i| i == 0).is_some(), true);",
          "    assert_eq!(table.find_mut(hash.get(), move |&i| i == 1).is_none(), true);",
          "    assert_eq!(table.get(&0), Some(&0));"
        ],
        "code": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 1);",
          "    table.insert(1, 2);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 1, 0);",
          "    assert_eq!(table.get(&0), Some(&0));",
          "    assert_eq!(table.get(&1), Some(&2));",
          "    assert_eq!(table.find_mut(hash.get(), move |&i| i == 0).is_some(), true);",
          "    assert_eq!(table.find_mut(hash.get(), move |&i| i == 1).is_none(), true);",
          "    assert_eq!(table.get(&0), Some(&0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 3);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.get(&0), Some(&1));",
          "    assert_eq!(table.get(&1), None);",
          "    assert!(table.keys().count() == 1);",
          "    assert!(table.contains_key(&0));",
          "    assert!(!table.contains_key(&1));"
        ],
        "code": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 3);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "    assert_eq!(table.get(&0), Some(&1));",
          "    assert_eq!(table.get(&1), None);",
          "    assert!(table.keys().count() == 1);",
          "    assert!(table.contains_key(&0));",
          "    assert!(!table.contains_key(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 5);",
          "    table.insert(1, 10);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.get(&0), Some(&1));",
          "    assert_eq!(table.get(&1), Some(&10));",
          "    assert_eq!(table.len(), 2);",
          "    assert!(table.find(0).is_some());",
          "    assert!(table.find(1).is_some());",
          "    assert!(table.find(5).is_none());",
          "    assert!(table.find(10).is_some());",
          "    assert!(table.find(2).is_none());",
          "    assert!(table.find(3).is_none());"
        ],
        "code": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 5);",
          "    table.insert(1, 10);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "    assert_eq!(table.get(&0), Some(&1));",
          "    assert_eq!(table.get(&1), Some(&10));",
          "    assert_eq!(table.len(), 2);",
          "    assert!(table.find(0).is_some());",
          "    assert!(table.find(1).is_some());",
          "    assert!(table.find(5).is_none());",
          "    assert!(table.find(10).is_some());",
          "    assert!(table.find(2).is_none());",
          "    assert!(table.find(3).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"index not found\")]"
        ],
        "prefix": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 0);",
          "    table.insert(1, 1);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 10, 1);",
          "}"
        ],
        "oracle": [
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 0);",
          "    table.insert(1, 1);",
          "    let hash = HashValue(0);",
          "    assert_eq!(table.find_mut(hash.get(), move |&i| i == 10), None);",
          "    assert_eq!(table.get(&0), Some(&0));",
          "    assert_eq!(table.get(&1), Some(&1));"
        ],
        "code": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 0);",
          "    table.insert(1, 1);",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 10, 1);",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    table.insert(0, 0);",
          "    table.insert(1, 1);",
          "    let hash = HashValue(0);",
          "    assert_eq!(table.find_mut(hash.get(), move |&i| i == 10), None);",
          "    assert_eq!(table.get(&0), Some(&0));",
          "    assert_eq!(table.get(&1), Some(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"index not found\")]"
        ],
        "prefix": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "}"
        ],
        "oracle": [
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "    assert!(table.is_empty());",
          "    assert!(matches!(std::panic::catch_unwind(|| { update_index(&mut table, hash, 0, 1); }), Err(e) if e.downcast_ref::<&str>() == Some(&\"index not found\")));"
        ],
        "code": [
          "{",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "    let mut table: Indices = hash_table::HashTable::new();",
          "    let hash = HashValue(0);",
          "    update_index(&mut table, hash, 0, 1);",
          "    assert!(table.is_empty());",
          "    assert!(matches!(std::panic::catch_unwind(|| { update_index(&mut table, hash, 0, 1); }), Err(e) if e.downcast_ref::<&str>() == Some(&\"index not found\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]