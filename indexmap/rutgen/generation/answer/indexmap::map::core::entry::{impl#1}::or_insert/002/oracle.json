[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        value: i32,",
          "    }",
          "    ",
          "    let mut entries: Vec<(TestKey, TestValue)> = vec![(TestKey, TestValue { value: 1 })];",
          "    let occupied_entry = hashbrown::hash_table::OccupiedEntry::from_raw(&mut entries, 0);",
          "    let entry = Entry::Occupied(OccupiedEntry::new(&mut entries, occupied_entry));",
          "    ",
          "    let default_value = TestValue { value: 2 };",
          "    ",
          "    let result = entry.or_insert(default_value);",
          "}"
        ],
        "oracle": [
          "    let occupied_entry = hashbrown::hash_table::OccupiedEntry::from_raw(&mut entries, 0);",
          "    assert_eq!(result.value, 1);",
          "    let result_default = entry.or_insert(TestValue { value: 3 });",
          "    assert_eq!(result_default.value, 1);",
          "    assert!(std::ptr::eq(result, result_default));",
          "    let modified_result = entry.and_modify(|v| v.value += 10);",
          "    assert_eq!(modified_result.get().value, 11);",
          "    let insert_result = entry.insert_entry(TestValue { value: 5 });",
          "    assert_eq!(insert_result.get().value, 5);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        value: i32,",
          "    }",
          "    ",
          "    let mut entries: Vec<(TestKey, TestValue)> = vec![(TestKey, TestValue { value: 1 })];",
          "    let occupied_entry = hashbrown::hash_table::OccupiedEntry::from_raw(&mut entries, 0);",
          "    let entry = Entry::Occupied(OccupiedEntry::new(&mut entries, occupied_entry));",
          "    ",
          "    let default_value = TestValue { value: 2 };",
          "    ",
          "    let result = entry.or_insert(default_value);",
          "    let occupied_entry = hashbrown::hash_table::OccupiedEntry::from_raw(&mut entries, 0);",
          "    assert_eq!(result.value, 1);",
          "    let result_default = entry.or_insert(TestValue { value: 3 });",
          "    assert_eq!(result_default.value, 1);",
          "    assert!(std::ptr::eq(result, result_default));",
          "    let modified_result = entry.and_modify(|v| v.value += 10);",
          "    assert_eq!(modified_result.get().value, 11);",
          "    let insert_result = entry.insert_entry(TestValue { value: 5 });",
          "    assert_eq!(insert_result.get().value, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        value: i32,",
          "    }",
          "",
          "    let mut entries: Vec<(TestKey, TestValue)> = vec![];",
          "    let vacant_entry = RefMut::new(&mut entries);",
          "    let entry = Entry::Vacant(VacantEntry { map: vacant_entry, hash: HashValue::default(), key: TestKey });",
          "",
          "    let default_value = TestValue { value: 3 };",
          "",
          "    let result = entry.or_insert(default_value);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(result.value, 3);",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue {",
          "        value: i32,",
          "    }",
          "",
          "    let mut entries: Vec<(TestKey, TestValue)> = vec![];",
          "    let vacant_entry = RefMut::new(&mut entries);",
          "    let entry = Entry::Vacant(VacantEntry { map: vacant_entry, hash: HashValue::default(), key: TestKey });",
          "",
          "    let default_value = TestValue { value: 3 };",
          "",
          "    let result = entry.or_insert(default_value);",
          "    plaintext",
          "    assert_eq!(result.value, 3);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]