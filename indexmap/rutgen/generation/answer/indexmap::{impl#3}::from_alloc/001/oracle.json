[
  {
    "uses": [
      "use alloc::alloc::Layout;",
      "use alloc::collections::TryReserveError;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    let error = TryReserveError::CapacityLimitExceeded;",
          "    let result = TryReserveError::from_alloc(error);",
          "}"
        ],
        "oracle": [
          "    let error = TryReserveError::CapacityLimitExceeded;",
          "    let expected_kind = TryReserveErrorKind::Std(error);",
          "    assert_eq!(result.kind, expected_kind);",
          "    assert!(matches!(result.kind, TryReserveErrorKind::Std(_)));"
        ],
        "code": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    let error = TryReserveError::CapacityLimitExceeded;",
          "    let result = TryReserveError::from_alloc(error);",
          "    let error = TryReserveError::CapacityLimitExceeded;",
          "    let expected_kind = TryReserveErrorKind::Std(error);",
          "    assert_eq!(result.kind, expected_kind);",
          "    assert!(matches!(result.kind, TryReserveErrorKind::Std(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    let error = TryReserveError::CapacityOverflow;",
          "    let result = TryReserveError::from_alloc(error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    let error = TryReserveError::CapacityOverflow;",
          "    let result = TryReserveError::from_alloc(error);",
          "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    use alloc::alloc::Layout;",
          "",
          "    let layout = Layout::new::<u32>();",
          "    let error = TryReserveError::AllocError { layout };",
          "    let result = TryReserveError::from_alloc(error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, TryReserveErrorKind::Std(error));"
        ],
        "code": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    use alloc::alloc::Layout;",
          "",
          "    let layout = Layout::new::<u32>();",
          "    let error = TryReserveError::AllocError { layout };",
          "    let result = TryReserveError::from_alloc(error);",
          "    assert_eq!(result.kind, TryReserveErrorKind::Std(error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    let error = TryReserveError::CapacityLimitExceeded;",
          "    let result = TryReserveError::from_alloc(error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityLimitExceeded));"
        ],
        "code": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "    let error = TryReserveError::CapacityLimitExceeded;",
          "    let result = TryReserveError::from_alloc(error);",
          "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityLimitExceeded));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]