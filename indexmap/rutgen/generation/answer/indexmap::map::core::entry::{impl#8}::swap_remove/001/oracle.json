[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0);",
          "    indexed_entry.swap_remove();",
          "}"
        ],
        "oracle": [
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0);",
          "    assert_eq!(indexed_entry.swap_remove(), \"one\".to_string());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get(&1).is_none());",
          "    assert_eq!(map.get(&2), Some(&\"two\".to_string()));"
        ],
        "code": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0);",
          "    indexed_entry.swap_remove();",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0);",
          "    assert_eq!(indexed_entry.swap_remove(), \"one\".to_string());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get(&1).is_none());",
          "    assert_eq!(map.get(&2), Some(&\"two\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 1); // last entry",
          "    indexed_entry.swap_remove();",
          "}"
        ],
        "oracle": [
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 1); // last entry",
          "    let removed_value = indexed_entry.swap_remove();",
          "    assert_eq!(removed_value, \"two\".to_string());",
          "    assert!(!map.contains_key(&2));"
        ],
        "code": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 1); // last entry",
          "    indexed_entry.swap_remove();",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 1); // last entry",
          "    let removed_value = indexed_entry.swap_remove();",
          "    assert_eq!(removed_value, \"two\".to_string());",
          "    assert!(!map.contains_key(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"only\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0); // only entry",
          "    indexed_entry.swap_remove();",
          "}"
        ],
        "oracle": [
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"only\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0); // only entry",
          "    let removed_value = indexed_entry.swap_remove();",
          "    assert_eq!(removed_value, \"only\");",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"only\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0); // only entry",
          "    indexed_entry.swap_remove();",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(1, \"only\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 0); // only entry",
          "    let removed_value = indexed_entry.swap_remove();",
          "    assert_eq!(removed_value, \"only\");",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(0, \"zero\".to_string());",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 2); // last entry ",
          "    indexed_entry.swap_remove();",
          "}"
        ],
        "oracle": [
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(0, \"zero\".to_string());",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 2); // last entry",
          "    let value = indexed_entry.swap_remove();",
          "    assert_eq!(value, \"two\".to_string());",
          "    assert!(map.get(&2).is_none());",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(0, \"zero\".to_string());",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 2); // last entry ",
          "    indexed_entry.swap_remove();",
          "    let mut map: indexmap::IndexMap<u32, String> = indexmap::IndexMap::new();",
          "    map.insert(0, \"zero\".to_string());",
          "    map.insert(1, \"one\".to_string());",
          "    map.insert(2, \"two\".to_string());",
          "    let indexed_entry = IndexedEntry::new(&mut map, 2); // last entry",
          "    let value = indexed_entry.swap_remove();",
          "    assert_eq!(value, \"two\".to_string());",
          "    assert!(map.get(&2).is_none());",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]