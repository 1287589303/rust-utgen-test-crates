[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice_a.eq(&slice_b), true);",
          "    let slice_c = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 15 }, Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_c), false);",
          "    let slice_d = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key3\", value: 10 }] };",
          "    assert_eq!(slice_a.eq(&slice_d), false);",
          "    let slice_e = Slice { entries: [] };",
          "    assert_eq!(slice_a.eq(&slice_e), false);",
          "    let slice_f = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }] };",
          "    assert_eq!(slice_a.eq(&slice_f), false);"
        ],
        "code": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "    assert_eq!(slice_a.eq(&slice_b), true);",
          "    let slice_c = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 15 }, Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_c), false);",
          "    let slice_d = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key3\", value: 10 }] };",
          "    assert_eq!(slice_a.eq(&slice_d), false);",
          "    let slice_e = Slice { entries: [] };",
          "    assert_eq!(slice_a.eq(&slice_e), false);",
          "    let slice_f = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }] };",
          "    assert_eq!(slice_a.eq(&slice_f), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key3\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice_a.eq(&slice_b), false);",
          "    assert_eq!(slice_a.eq(&slice_a), true);",
          "    let slice_c = Slice { entries: [] };",
          "    assert_eq!(slice_a.eq(&slice_c), false);",
          "    let slice_d = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }] };",
          "    assert_eq!(slice_a.eq(&slice_d), false);",
          "    let slice_e = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_e), false);",
          "    let slice_f = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }, Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_f), true);"
        ],
        "code": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key3\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "    assert_eq!(slice_a.eq(&slice_b), false);",
          "    assert_eq!(slice_a.eq(&slice_a), true);",
          "    let slice_c = Slice { entries: [] };",
          "    assert_eq!(slice_a.eq(&slice_c), false);",
          "    let slice_d = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }] };",
          "    assert_eq!(slice_a.eq(&slice_d), false);",
          "    let slice_e = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_e), false);",
          "    let slice_f = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }, Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_f), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 15,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice_a.eq(&slice_b), false);"
        ],
        "code": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 15,",
          "            },",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 20,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "    assert_eq!(slice_a.eq(&slice_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "}"
        ],
        "oracle": [
          "    assert!(!slice_a.eq(&slice_b));"
        ],
        "code": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key2\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "    assert!(!slice_a.eq(&slice_b));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice_a.eq(&slice_b), true);",
          "    let slice_c = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_c), false);",
          "    let slice_d = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 15 }] };",
          "    assert_eq!(slice_a.eq(&slice_d), false);",
          "    let slice_e = Slice { entries: [] };",
          "    let slice_f = Slice { entries: [] };",
          "    assert_eq!(slice_e.eq(&slice_f), true);",
          "    let slice_g = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }, Bucket { hash: HashValue::default(), key: \"key2\", value: 30 }] };",
          "    assert_eq!(slice_a.eq(&slice_g), false);"
        ],
        "code": [
          "{",
          "    let slice_a = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let slice_b = Slice {",
          "        entries: [",
          "            Bucket {",
          "                hash: HashValue::default(),",
          "                key: \"key1\",",
          "                value: 10,",
          "            },",
          "        ],",
          "    };",
          "",
          "    let _result = slice_a.eq(&slice_b);",
          "    assert_eq!(slice_a.eq(&slice_b), true);",
          "    let slice_c = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key2\", value: 20 }] };",
          "    assert_eq!(slice_a.eq(&slice_c), false);",
          "    let slice_d = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 15 }] };",
          "    assert_eq!(slice_a.eq(&slice_d), false);",
          "    let slice_e = Slice { entries: [] };",
          "    let slice_f = Slice { entries: [] };",
          "    assert_eq!(slice_e.eq(&slice_f), true);",
          "    let slice_g = Slice { entries: [Bucket { hash: HashValue::default(), key: \"key1\", value: 10 }, Bucket { hash: HashValue::default(), key: \"key2\", value: 30 }] };",
          "    assert_eq!(slice_a.eq(&slice_g), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]