[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
          "    self_set.insert(\"a\");",
          "    self_set.insert(\"b\");",
          "    self_set.insert(\"c\");",
          "    self_set.insert(\"d\");",
          "    self_set.insert(\"e\");",
          "",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    other_set.insert(\"a\");",
          "    other_set.insert(\"b\");",
          "    other_set.insert(\"c\");",
          "",
          "    let result = self_set.is_subset(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(!self_set.len() <= other_set.len());",
          "    assert!(self_set.iter().all(|value| other_set.contains(value)) == false);",
          "    assert_eq!(self_set.len(), 5);",
          "    assert_eq!(other_set.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
          "    self_set.insert(\"a\");",
          "    self_set.insert(\"b\");",
          "    self_set.insert(\"c\");",
          "    self_set.insert(\"d\");",
          "    self_set.insert(\"e\");",
          "",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    other_set.insert(\"a\");",
          "    other_set.insert(\"b\");",
          "    other_set.insert(\"c\");",
          "",
          "    let result = self_set.is_subset(&other_set);",
          "    assert_eq!(result, false);",
          "    assert!(!self_set.len() <= other_set.len());",
          "    assert!(self_set.iter().all(|value| other_set.contains(value)) == false);",
          "    assert_eq!(self_set.len(), 5);",
          "    assert_eq!(other_set.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(4, RandomState::new());",
          "    self_set.insert(\"x\");",
          "    self_set.insert(\"y\");",
          "    self_set.insert(\"z\");",
          "    self_set.insert(\"w\");",
          "",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
          "    other_set.insert(\"x\");",
          "    other_set.insert(\"y\");",
          "    other_set.insert(\"a\");",
          "    other_set.insert(\"b\");",
          "    other_set.insert(\"c\");",
          "",
          "    let result = self_set.is_subset(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(self_set.len() > other_set.len());",
          "    assert!(self_set.iter().all(|value| !other_set.contains(value)));",
          "    assert!(self_set.contains(\"z\") || self_set.contains(\"w\"));",
          "    assert!(!other_set.contains(\"z\"));",
          "    assert!(!other_set.contains(\"w\"));"
        ],
        "code": [
          "{",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(4, RandomState::new());",
          "    self_set.insert(\"x\");",
          "    self_set.insert(\"y\");",
          "    self_set.insert(\"z\");",
          "    self_set.insert(\"w\");",
          "",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
          "    other_set.insert(\"x\");",
          "    other_set.insert(\"y\");",
          "    other_set.insert(\"a\");",
          "    other_set.insert(\"b\");",
          "    other_set.insert(\"c\");",
          "",
          "    let result = self_set.is_subset(&other_set);",
          "    assert_eq!(result, false);",
          "    assert!(self_set.len() > other_set.len());",
          "    assert!(self_set.iter().all(|value| !other_set.contains(value)));",
          "    assert!(self_set.contains(\"z\") || self_set.contains(\"w\"));",
          "    assert!(!other_set.contains(\"z\"));",
          "    assert!(!other_set.contains(\"w\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    self_set.insert(\"1\");",
          "    self_set.insert(\"2\");",
          "    self_set.insert(\"3\");",
          "",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "    other_set.insert(\"a\");",
          "    other_set.insert(\"b\");",
          "",
          "    let result = self_set.is_subset(&other_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(self_set.len() > other_set.len());",
          "    assert!(self_set.iter().count() > 0);",
          "    assert!(other_set.len() > 0);",
          "    assert!(self_set.iter().any(|value| !other_set.contains(value)));"
        ],
        "code": [
          "{",
          "    let mut self_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    self_set.insert(\"1\");",
          "    self_set.insert(\"2\");",
          "    self_set.insert(\"3\");",
          "",
          "    let mut other_set = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "    other_set.insert(\"a\");",
          "    other_set.insert(\"b\");",
          "",
          "    let result = self_set.is_subset(&other_set);",
          "    assert_eq!(result, false);",
          "    assert!(self_set.len() > other_set.len());",
          "    assert!(self_set.iter().count() > 0);",
          "    assert!(other_set.len() > 0);",
          "    assert!(self_set.iter().any(|value| !other_set.contains(value)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]