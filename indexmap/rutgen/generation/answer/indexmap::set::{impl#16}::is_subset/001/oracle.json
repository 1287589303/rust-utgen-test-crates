[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    ",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "",
          "    let result = set1.is_subset(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    ",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set1: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
          "    let set2: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
          "",
          "    let result = set1.is_subset(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    set1.reserve(1);",
          "    set1.insert(1);",
          "    set2.insert(1);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set2.insert(2);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set1.remove(&1);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set1.insert(2);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let set1: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
          "    let set2: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
          "",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set1.reserve(1);",
          "    set1.insert(1);",
          "    set2.insert(1);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set2.insert(2);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set1.remove(&1);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "    set1.insert(2);",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    ",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    ",
          "    let result = set1.is_subset(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    ",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    ",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    ",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "    ",
          "    let result = set1.is_subset(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
          "",
          "    set1.insert(1);",
          "    set1.insert(2);",
          "    set1.insert(3);",
          "    ",
          "    set2.insert(1);",
          "    set2.insert(2);",
          "    set2.insert(3);",
          "    ",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "",
          "    set1.insert(10);",
          "    set1.insert(20);",
          "    ",
          "    set2.insert(10);",
          "    set2.insert(20);",
          "    ",
          "    let result = set1.is_subset(&set2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
          "",
          "    set1.insert(10);",
          "    set1.insert(20);",
          "    ",
          "    set2.insert(10);",
          "    set2.insert(20);",
          "    ",
          "    let result = set1.is_subset(&set2);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]