[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    let _ = map.values();",
          "}"
        ],
        "oracle": [
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    let values_iterator = map.values();",
          "    assert!(values_iterator.iter.len() == 0); // Check that the iterator over values is empty for a new map."
        ],
        "code": [
          "{",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    let _ = map.values();",
          "    let map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
          "    let values_iterator = map.values();",
          "    assert!(values_iterator.iter.len() == 0); // Check that the iterator over values is empty for a new map.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 10);",
          "    let _ = map.values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.values().iter().count(), 1);",
          "    assert_eq!(map.values().iter().next().unwrap(), &10);",
          "    assert!(map.values().iter().all(|&value| value == 10));",
          "    assert_eq!(map.is_empty(), false);",
          "    assert_eq!(map.capacity(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
          "    map.insert(1, 10);",
          "    let _ = map.values();",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.values().iter().count(), 1);",
          "    assert_eq!(map.values().iter().next().unwrap(), &10);",
          "    assert!(map.values().iter().all(|&value| value == 10));",
          "    assert_eq!(map.is_empty(), false);",
          "    assert_eq!(map.capacity(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    for i in 1..=10 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    let _ = map.values();",
          "}"
        ],
        "oracle": [
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(map.len(), 10);",
          "    assert!(!map.is_empty());",
          "    let values_iter = map.values();",
          "    assert_eq!(values_iter.iter.len(), 10);",
          "    assert_eq!(values_iter.iter().collect::<Vec<_>>(), vec![10, 20, 30, 40, 50, 60, 70, 80, 90, 100]);"
        ],
        "code": [
          "{",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    for i in 1..=10 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    let _ = map.values();",
          "    let mut map: super::IndexMap<i32, i32, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    assert_eq!(map.len(), 10);",
          "    assert!(!map.is_empty());",
          "    let values_iter = map.values();",
          "    assert_eq!(values_iter.iter.len(), 10);",
          "    assert_eq!(values_iter.iter().collect::<Vec<_>>(), vec![10, 20, 30, 40, 50, 60, 70, 80, 90, 100]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::IndexMap<String, String, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());",
          "    for i in 0..1000 {",
          "        map.insert(format!(\"key{}\", i), format!(\"value{}\", i));",
          "    }",
          "    let _ = map.values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1000);",
          "    assert!(!map.is_empty());",
          "    let values: Vec<String> = map.values().iter().map(|v| v.clone()).collect();",
          "    assert_eq!(values.len(), 1000);",
          "    assert_eq!(values[0], \"value0\");",
          "    assert_eq!(values[999], \"value999\");"
        ],
        "code": [
          "{",
          "    let mut map: super::IndexMap<String, String, std::collections::hash_map::RandomState> = super::IndexMap::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());",
          "    for i in 0..1000 {",
          "        map.insert(format!(\"key{}\", i), format!(\"value{}\", i));",
          "    }",
          "    let _ = map.values();",
          "    assert_eq!(map.len(), 1000);",
          "    assert!(!map.is_empty());",
          "    let values: Vec<String> = map.values().iter().map(|v| v.clone()).collect();",
          "    assert_eq!(values.len(), 1000);",
          "    assert_eq!(values[0], \"value0\");",
          "    assert_eq!(values[999], \"value999\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]