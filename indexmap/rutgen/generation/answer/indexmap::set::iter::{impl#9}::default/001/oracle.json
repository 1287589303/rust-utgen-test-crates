[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: Iter<u32> = Iter::default();",
          "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
          "}"
        ],
        "oracle": [
          "    let iter: Iter<u32> = Iter::default();",
          "    assert_eq!(iter.iter.len(), 0);",
          "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
          "    assert!(iter.iter.as_slice().is_empty());",
          "    assert!(iter.iter.clone().next().is_none());"
        ],
        "code": [
          "{",
          "    let iter: Iter<u32> = Iter::default();",
          "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
          "    let iter: Iter<u32> = Iter::default();",
          "    assert_eq!(iter.iter.len(), 0);",
          "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
          "    assert!(iter.iter.as_slice().is_empty());",
          "    assert!(iter.iter.clone().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: Iter<String> = Iter::default();",
          "    let _: SliceIter<'_, Bucket<String>> = iter.iter;",
          "}"
        ],
        "oracle": [
          "    let iter: Iter<String> = Iter::default();",
          "    assert_eq!(iter.iter.len(), 0);",
          "    assert!(iter.iter.as_slice().is_empty());",
          "    let _: SliceIter<'_, Bucket<String>> = iter.iter;"
        ],
        "code": [
          "{",
          "    let iter: Iter<String> = Iter::default();",
          "    let _: SliceIter<'_, Bucket<String>> = iter.iter;",
          "    let iter: Iter<String> = Iter::default();",
          "    assert_eq!(iter.iter.len(), 0);",
          "    assert!(iter.iter.as_slice().is_empty());",
          "    let _: SliceIter<'_, Bucket<String>> = iter.iter;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: Iter<(i32, i32)> = Iter::default();",
          "    let _: SliceIter<'_, Bucket<(i32, i32)>> = iter.iter;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.as_slice(), &[]);",
          "    assert!(iter.iter.len() == 0);",
          "    assert!(iter.iter.is_empty());",
          "    assert!(iter.iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let iter: Iter<(i32, i32)> = Iter::default();",
          "    let _: SliceIter<'_, Bucket<(i32, i32)>> = iter.iter;",
          "    assert_eq!(iter.iter.as_slice(), &[]);",
          "    assert!(iter.iter.len() == 0);",
          "    assert!(iter.iter.is_empty());",
          "    assert!(iter.iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]