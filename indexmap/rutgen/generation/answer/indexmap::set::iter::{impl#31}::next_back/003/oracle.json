[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Bucket<T> {",
          "        value: T,",
          "    }",
          "    ",
          "    struct IndexSet<T, S> {",
          "        elements: Vec<T>,",
          "        _marker: std::marker::PhantomData<S>,",
          "    }",
          "",
          "    impl<T: Eq + Hash, S: BuildHasher> IndexSet<T, S> {",
          "        fn contains(&self, item: &T) -> bool {",
          "            self.elements.contains(item)",
          "        }",
          "    }",
          "",
          "    struct Iter<'a, T> {",
          "        items: &'a [Bucket<T>],",
          "        current: usize,",
          "    }",
          "",
          "    impl<'a, T> Iter<'a, T> {",
          "        fn new(items: &'a [Bucket<T>]) -> Self {",
          "            Iter { items, current: items.len() }",
          "        }",
          "",
          "        fn next_back(&mut self) -> Option<&'a T> {",
          "            if self.current == 0 {",
          "                None",
          "            } else {",
          "                self.current -= 1;",
          "                Some(&self.items[self.current].value)",
          "            }",
          "        }",
          "    }",
          "",
          "    struct Intersection<'a, T, S> {",
          "        iter: Iter<'a, T>,",
          "        other: &'a IndexSet<T, S>,",
          "    }",
          "",
          "    let buckets = [",
          "        Bucket { value: 1 },",
          "        Bucket { value: 2 },",
          "        Bucket { value: 3 },",
          "    ];",
          "    let index_set = IndexSet { elements: vec![4, 5], _marker: std::marker::PhantomData };",
          "",
          "    let mut intersection = Intersection {",
          "        iter: Iter::new(&buckets),",
          "        other: &index_set,",
          "    };",
          "",
          "    let _item1 = intersection.iter.next_back(); // Should return Some(3)",
          "    let _item2 = intersection.iter.next_back(); // Should return Some(2)",
          "    let _item3 = intersection.iter.next_back(); // Should return Some(1)",
          "    ",
          "    let result = intersection.iter.next_back(); // Should return None",
          "}"
        ],
        "oracle": [
          "    intersection.iter.next_back(); // Expect Some(3)",
          "    let item = intersection.iter.next_back(); // Expect Some(2)",
          "    let item = intersection.iter.next_back(); // Expect Some(1)",
          "    let result = intersection.iter.next_back(); // Expect None",
          "    let buckets = [Bucket { value: 1 }, Bucket { value: 2 }, Bucket { value: 3 }];",
          "    let index_set = IndexSet { elements: vec![4, 5], _marker: std::marker::PhantomData };",
          "    let mut intersection = Intersection { iter: Iter::new(&buckets), other: &index_set };",
          "    let item = intersection.iter.next_back(); // Expect Some(3)",
          "    let item = intersection.iter.next_back(); // Expect Some(2)",
          "    let item = intersection.iter.next_back(); // Expect Some(1)",
          "    let result = intersection.iter.next_back(); // Expect None",
          "    let buckets = [Bucket { value: 10 }, Bucket { value: 20 }, Bucket { value: 30 }];",
          "    let index_set_empty = IndexSet { elements: vec![], _marker: std::marker::PhantomData };",
          "    let mut intersection_empty_set = Intersection { iter: Iter::new(&buckets), other: &index_set_empty };",
          "    let result_empty = intersection_empty_set.iter.next_back(); // Expect Some(30)",
          "    let result_empty_2 = intersection_empty_set.iter.next_back(); // Expect Some(20)",
          "    let result_empty_3 = intersection_empty_set.iter.next_back(); // Expect Some(10)",
          "    let result_empty_final = intersection_empty_set.iter.next_back(); // Expect None"
        ],
        "code": [
          "{",
          "    struct Bucket<T> {",
          "        value: T,",
          "    }",
          "    ",
          "    struct IndexSet<T, S> {",
          "        elements: Vec<T>,",
          "        _marker: std::marker::PhantomData<S>,",
          "    }",
          "",
          "    impl<T: Eq + Hash, S: BuildHasher> IndexSet<T, S> {",
          "        fn contains(&self, item: &T) -> bool {",
          "            self.elements.contains(item)",
          "        }",
          "    }",
          "",
          "    struct Iter<'a, T> {",
          "        items: &'a [Bucket<T>],",
          "        current: usize,",
          "    }",
          "",
          "    impl<'a, T> Iter<'a, T> {",
          "        fn new(items: &'a [Bucket<T>]) -> Self {",
          "            Iter { items, current: items.len() }",
          "        }",
          "",
          "        fn next_back(&mut self) -> Option<&'a T> {",
          "            if self.current == 0 {",
          "                None",
          "            } else {",
          "                self.current -= 1;",
          "                Some(&self.items[self.current].value)",
          "            }",
          "        }",
          "    }",
          "",
          "    struct Intersection<'a, T, S> {",
          "        iter: Iter<'a, T>,",
          "        other: &'a IndexSet<T, S>,",
          "    }",
          "",
          "    let buckets = [",
          "        Bucket { value: 1 },",
          "        Bucket { value: 2 },",
          "        Bucket { value: 3 },",
          "    ];",
          "    let index_set = IndexSet { elements: vec![4, 5], _marker: std::marker::PhantomData };",
          "",
          "    let mut intersection = Intersection {",
          "        iter: Iter::new(&buckets),",
          "        other: &index_set,",
          "    };",
          "",
          "    let _item1 = intersection.iter.next_back(); // Should return Some(3)",
          "    let _item2 = intersection.iter.next_back(); // Should return Some(2)",
          "    let _item3 = intersection.iter.next_back(); // Should return Some(1)",
          "    ",
          "    let result = intersection.iter.next_back(); // Should return None",
          "    intersection.iter.next_back(); // Expect Some(3)",
          "    let item = intersection.iter.next_back(); // Expect Some(2)",
          "    let item = intersection.iter.next_back(); // Expect Some(1)",
          "    let result = intersection.iter.next_back(); // Expect None",
          "    let buckets = [Bucket { value: 1 }, Bucket { value: 2 }, Bucket { value: 3 }];",
          "    let index_set = IndexSet { elements: vec![4, 5], _marker: std::marker::PhantomData };",
          "    let mut intersection = Intersection { iter: Iter::new(&buckets), other: &index_set };",
          "    let item = intersection.iter.next_back(); // Expect Some(3)",
          "    let item = intersection.iter.next_back(); // Expect Some(2)",
          "    let item = intersection.iter.next_back(); // Expect Some(1)",
          "    let result = intersection.iter.next_back(); // Expect None",
          "    let buckets = [Bucket { value: 10 }, Bucket { value: 20 }, Bucket { value: 30 }];",
          "    let index_set_empty = IndexSet { elements: vec![], _marker: std::marker::PhantomData };",
          "    let mut intersection_empty_set = Intersection { iter: Iter::new(&buckets), other: &index_set_empty };",
          "    let result_empty = intersection_empty_set.iter.next_back(); // Expect Some(30)",
          "    let result_empty_2 = intersection_empty_set.iter.next_back(); // Expect Some(20)",
          "    let result_empty_3 = intersection_empty_set.iter.next_back(); // Expect Some(10)",
          "    let result_empty_final = intersection_empty_set.iter.next_back(); // Expect None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]