[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Copy, Debug)]",
          "    struct TestKey;",
          "    ",
          "    #[derive(Copy, Debug)]",
          "    struct TestValue;",
          "    ",
          "    let entries: &[Bucket<TestKey, TestValue>] = &[",
          "        Bucket { hash: HashValue::from(1), key: TestKey, value: TestValue },",
          "        Bucket { hash: HashValue::from(2), key: TestKey, value: TestValue },",
          "    ];",
          "    ",
          "    let iter = Iter::new(entries);",
          "}"
        ],
        "oracle": [
          "    let entries: &[Bucket<TestKey, TestValue>] = &[",
          "    Bucket { hash: HashValue::from(1), key: TestKey, value: TestValue },",
          "    Bucket { hash: HashValue::from(2), key: TestKey, value: TestValue },",
          "    ];",
          "    let iter = Iter::new(entries);",
          "    assert_eq!(iter.iter.as_slice(), entries.iter());"
        ],
        "code": [
          "{",
          "    #[derive(Copy, Debug)]",
          "    struct TestKey;",
          "    ",
          "    #[derive(Copy, Debug)]",
          "    struct TestValue;",
          "    ",
          "    let entries: &[Bucket<TestKey, TestValue>] = &[",
          "        Bucket { hash: HashValue::from(1), key: TestKey, value: TestValue },",
          "        Bucket { hash: HashValue::from(2), key: TestKey, value: TestValue },",
          "    ];",
          "    ",
          "    let iter = Iter::new(entries);",
          "    let entries: &[Bucket<TestKey, TestValue>] = &[",
          "    Bucket { hash: HashValue::from(1), key: TestKey, value: TestValue },",
          "    Bucket { hash: HashValue::from(2), key: TestKey, value: TestValue },",
          "    ];",
          "    let iter = Iter::new(entries);",
          "    assert_eq!(iter.iter.as_slice(), entries.iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries: &[Bucket<i32, i32>] = &[];",
          "    ",
          "    let iter = Iter::new(entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.as_slice(), entries.iter());",
          "    assert!(iter.iter.len() == 0);",
          "    assert!(iter.iter.is_empty());"
        ],
        "code": [
          "{",
          "    let entries: &[Bucket<i32, i32>] = &[];",
          "    ",
          "    let iter = Iter::new(entries);",
          "    assert_eq!(iter.iter.as_slice(), entries.iter());",
          "    assert!(iter.iter.len() == 0);",
          "    assert!(iter.iter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]