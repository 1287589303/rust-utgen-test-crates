[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map.insert(1, 10);",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    map.insert(1, 10);",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 5);",
          "    map.reserve(3);",
          "    assert_eq!(map.capacity(), 5);",
          "    map.reserve(5);",
          "    assert!(map.capacity() >= 10);",
          "    map.clear();",
          "    assert_eq!(map.capacity(), 5);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 5);",
          "    map.reserve(3);",
          "    assert_eq!(map.capacity(), 5);",
          "    map.reserve(5);",
          "    assert!(map.capacity() >= 10);",
          "    map.clear();",
          "    assert_eq!(map.capacity(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    for i in 0..IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY {",
          "        map.insert(i, i);",
          "    }",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    assert_eq!(map.capacity(), 0);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    assert_eq!(map.capacity(), 5);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.insert(0, 0);",
          "    assert!(map.capacity() >= 1);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(15, RandomState::new());",
          "    for i in 0..10 {",
          "    map.insert(i, i);",
          "    }",
          "    assert!(map.capacity() >= 10);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    for i in 0..IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY {",
          "    map.insert(i, i);",
          "    }",
          "    assert_eq!(map.capacity(), IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    for i in 0..IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY {",
          "        map.insert(i, i);",
          "    }",
          "    let _ = map.capacity();",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    assert_eq!(map.capacity(), 0);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    assert_eq!(map.capacity(), 5);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
          "    map.insert(0, 0);",
          "    assert!(map.capacity() >= 1);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(15, RandomState::new());",
          "    for i in 0..10 {",
          "    map.insert(i, i);",
          "    }",
          "    assert!(map.capacity() >= 10);",
          "    ",
          "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
          "    for i in 0..IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY {",
          "    map.insert(i, i);",
          "    }",
          "    assert_eq!(map.capacity(), IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]