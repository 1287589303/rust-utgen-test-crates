[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map_core: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let non_existent_key = 42;",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map_core: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let non_existent_key = 42;",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map_core: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let non_existent_key = 99;",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map_core: IndexMapCore<i32, i32> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let non_existent_key = 99;",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map_core: IndexMapCore<String, String> = IndexMapCore::new();",
          "    let hash = HashValue(1);",
          "    let non_existent_key = \"non_existing_key\".to_string();",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map_core: IndexMapCore<String, String> = IndexMapCore::new();",
          "    let hash = HashValue(1);",
          "    let non_existent_key = \"non_existing_key\".to_string();",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map_core: IndexMapCore<u32, u32> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let non_existent_key = 100u32;",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map_core: IndexMapCore<u32, u32> = IndexMapCore::new();",
          "    let hash = HashValue(0);",
          "    let non_existent_key = 100u32;",
          "    let result = map_core.shift_remove_full(hash, &non_existent_key);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]