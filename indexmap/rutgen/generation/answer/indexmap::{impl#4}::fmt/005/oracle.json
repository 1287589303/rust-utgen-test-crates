[
  {
    "uses": [
      "use alloc::collections::TryReserveError;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "",
          "    let error_instance = TryReserveError::from(alloc::collections::TryReserveError::CapacityOverflow);",
          "    let error = TryReserveError {",
          "        kind: TryReserveErrorKind::Std(error_instance),",
          "    };",
          "",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _result = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let error_instance = TryReserveError::from(alloc::collections::TryReserveError::CapacityOverflow);",
          "    let error = TryReserveError { kind: TryReserveErrorKind::Std(error_instance) };",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(formatter.buffer, \"memory allocation failed because the computed capacity exceeded the collection's maximum\");"
        ],
        "code": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "",
          "    let error_instance = TryReserveError::from(alloc::collections::TryReserveError::CapacityOverflow);",
          "    let error = TryReserveError {",
          "        kind: TryReserveErrorKind::Std(error_instance),",
          "    };",
          "",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _result = error.fmt(&mut formatter);",
          "    let error_instance = TryReserveError::from(alloc::collections::TryReserveError::CapacityOverflow);",
          "    let error = TryReserveError { kind: TryReserveErrorKind::Std(error_instance) };",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(formatter.buffer, \"memory allocation failed because the computed capacity exceeded the collection's maximum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "",
          "    let error_instance = TryReserveError::from(alloc::collections::TryReserveError::AllocError { layout: alloc::alloc::Layout::from_size_align(1, 1).unwrap() });",
          "    let error = TryReserveError {",
          "        kind: TryReserveErrorKind::Std(error_instance),",
          "    };",
          "",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _result = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), false);",
          "    assert!(formatter.buffer().contains(\"memory allocation failed\"));",
          "    assert!(formatter.buffer().contains(\"because the memory allocator returned an error\"));"
        ],
        "code": [
          "{",
          "    use alloc::collections::TryReserveError;",
          "",
          "    let error_instance = TryReserveError::from(alloc::collections::TryReserveError::AllocError { layout: alloc::alloc::Layout::from_size_align(1, 1).unwrap() });",
          "    let error = TryReserveError {",
          "        kind: TryReserveErrorKind::Std(error_instance),",
          "    };",
          "",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _result = error.fmt(&mut formatter);",
          "    assert_eq!(_result.is_err(), false);",
          "    assert!(formatter.buffer().contains(\"memory allocation failed\"));",
          "    assert!(formatter.buffer().contains(\"because the memory allocator returned an error\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]