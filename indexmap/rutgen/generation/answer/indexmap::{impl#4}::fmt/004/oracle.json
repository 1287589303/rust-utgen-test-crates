[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity_overflow_error = TryReserveError {",
          "        kind: TryReserveErrorKind::CapacityOverflow,",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut buffer);",
          "    let _ = capacity_overflow_error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.as_slice(), b\"memory allocation failed because the computed capacity exceeded the collection's maximum\");"
        ],
        "code": [
          "{",
          "    let capacity_overflow_error = TryReserveError {",
          "        kind: TryReserveErrorKind::CapacityOverflow,",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut buffer);",
          "    let _ = capacity_overflow_error.fmt(&mut formatter);",
          "    assert_eq!(buffer.as_slice(), b\"memory allocation failed because the computed capacity exceeded the collection's maximum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc_error = TryReserveError {",
          "        kind: TryReserveErrorKind::AllocError {",
          "            layout: alloc::alloc::Layout::from_size_align(0, 1).unwrap(),",
          "        },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut buffer);",
          "    let _ = alloc_error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let alloc_error_capacity_overflow = TryReserveError {",
          "    kind: TryReserveErrorKind::CapacityOverflow,",
          "    };",
          "    let mut buffer_capacity_overflow = Vec::new();",
          "    let mut formatter_capacity_overflow = core::fmt::Formatter::new(&mut buffer_capacity_overflow);",
          "    let result_capacity_overflow = alloc_error_capacity_overflow.fmt(&mut formatter_capacity_overflow);",
          "    assert!(result_capacity_overflow.is_ok());",
          "    assert_eq!(buffer_capacity_overflow, b\"memory allocation failed because the computed capacity exceeded the collection's maximum\");"
        ],
        "code": [
          "{",
          "    let alloc_error = TryReserveError {",
          "        kind: TryReserveErrorKind::AllocError {",
          "            layout: alloc::alloc::Layout::from_size_align(0, 1).unwrap(),",
          "        },",
          "    };",
          "    let mut buffer = Vec::new();",
          "    let mut formatter = core::fmt::Formatter::new(&mut buffer);",
          "    let _ = alloc_error.fmt(&mut formatter);",
          "    let alloc_error_capacity_overflow = TryReserveError {",
          "    kind: TryReserveErrorKind::CapacityOverflow,",
          "    };",
          "    let mut buffer_capacity_overflow = Vec::new();",
          "    let mut formatter_capacity_overflow = core::fmt::Formatter::new(&mut buffer_capacity_overflow);",
          "    let result_capacity_overflow = alloc_error_capacity_overflow.fmt(&mut formatter_capacity_overflow);",
          "    assert!(result_capacity_overflow.is_ok());",
          "    assert_eq!(buffer_capacity_overflow, b\"memory allocation failed because the computed capacity exceeded the collection's maximum\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]