[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 1;",
          "    let result = ref_mut.swap_remove_finish(index);",
          "}"
        ],
        "oracle": [
          "    let expected_key = 2;",
          "    let expected_value = 200;",
          "    let (result_key, result_value) = result;",
          "    assert_eq!(result_key, expected_key);",
          "    assert_eq!(result_value, expected_value);",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 100);",
          "    assert_eq!(entries[1].key, 3);",
          "    assert_eq!(entries[1].value, 300);",
          "    assert!(indices.find_mut(HashValue(2).0, |&i| i == 1).is_some());"
        ],
        "code": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 1;",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    let expected_key = 2;",
          "    let expected_value = 200;",
          "    let (result_key, result_value) = result;",
          "    assert_eq!(result_key, expected_key);",
          "    assert_eq!(result_value, expected_value);",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 100);",
          "    assert_eq!(entries[1].key, 3);",
          "    assert_eq!(entries[1].value, 300);",
          "    assert!(indices.find_mut(HashValue(2).0, |&i| i == 1).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 0; // ensure this is the last element (1 will be removed)",
          "    let result = ref_mut.swap_remove_finish(index);",
          "}"
        ],
        "oracle": [
          "    let indices = Indices::default();",
          "    let entries: Vec<Bucket<usize, usize>> = vec![",
          "    Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "    Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 0; // index of the element to remove",
          "    let expected_key = 1;",
          "    let expected_value = 100;",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    assert_eq!(result, (expected_key, expected_value));",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 2);",
          "    assert_eq!(entries[0].value, 200);"
        ],
        "code": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 0; // ensure this is the last element (1 will be removed)",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    let indices = Indices::default();",
          "    let entries: Vec<Bucket<usize, usize>> = vec![",
          "    Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "    Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 0; // index of the element to remove",
          "    let expected_key = 1;",
          "    let expected_value = 100;",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    assert_eq!(result, (expected_key, expected_value));",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 2);",
          "    assert_eq!(entries[0].value, 200);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 400 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 2; // choose an element in the middle",
          "    let result = ref_mut.swap_remove_finish(index);",
          "}"
        ],
        "oracle": [
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "    Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "    Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "    Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "    Bucket { hash: HashValue(3), key: 4, value: 400 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 2;",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    assert_eq!(result, (3, 300));",
          "    assert_eq!(entries.len(), 3);",
          "    assert_eq!(entries[2].key, 4);",
          "    assert_eq!(entries[1].key, 2);",
          "    assert_eq!(entries[0].key, 1);"
        ],
        "code": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 400 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 2; // choose an element in the middle",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "    Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "    Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "    Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "    Bucket { hash: HashValue(3), key: 4, value: 400 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 2;",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    assert_eq!(result, (3, 300));",
          "    assert_eq!(entries.len(), 3);",
          "    assert_eq!(entries[2].key, 4);",
          "    assert_eq!(entries[1].key, 2);",
          "    assert_eq!(entries[0].key, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 0; // first element",
          "    let result = ref_mut.swap_remove_finish(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (1, 100));",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, 2);",
          "    assert_eq!(entries[1].key, 3);",
          "    assert_eq!(indices.find_mut(1).is_some(), true);",
          "    assert_eq!(indices.find_mut(2).is_some(), true);",
          "    assert_eq!(indices.find_mut(3).is_some(), false);"
        ],
        "code": [
          "{",
          "    let mut indices = Indices::default();",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 100 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 200 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 300 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = 0; // first element",
          "    let result = ref_mut.swap_remove_finish(index);",
          "    assert_eq!(result, (1, 100));",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, 2);",
          "    assert_eq!(entries[1].key, 3);",
          "    assert_eq!(indices.find_mut(1).is_some(), true);",
          "    assert_eq!(indices.find_mut(2).is_some(), true);",
          "    assert_eq!(indices.find_mut(3).is_some(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]