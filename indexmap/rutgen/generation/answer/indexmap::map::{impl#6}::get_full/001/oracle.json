[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(1, \"one\");",
          "    let result = map.get_full(&1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, &1, &\"one\")));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(1, \"one\");",
          "    let result = map.get_full(&1);",
          "    assert_eq!(result, Some((0, &1, &\"one\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "    map.insert(4, \"four\");",
          "    let result = map.get_full(&3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().0, 1);",
          "    assert_eq!(result.unwrap().1, &3);",
          "    assert_eq!(result.unwrap().2, &\"three\");"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(2, \"two\");",
          "    map.insert(3, \"three\");",
          "    map.insert(4, \"four\");",
          "    let result = map.get_full(&3);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().0, 1);",
          "    assert_eq!(result.unwrap().1, &3);",
          "    assert_eq!(result.unwrap().2, &\"three\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(5, \"five\");",
          "    let result = map.get_full(&5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, &5, &\"five\")));"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(5, \"five\");",
          "    let result = map.get_full(&5);",
          "    assert_eq!(result, Some((0, &5, &\"five\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(6, \"six\");",
          "    map.insert(7, \"seven\");",
          "    let result = map.get_full(&6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((0, &6, &\"six\")));",
          "    assert!(map.get_index_of(&6).is_some());",
          "    assert!(map.get_index_of(&7).is_some());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMap<i32, &str, RandomState> = IndexMap::new();",
          "    map.insert(6, \"six\");",
          "    map.insert(7, \"seven\");",
          "    let result = map.get_full(&6);",
          "    assert_eq!(result, Some((0, &6, &\"six\")));",
          "    assert!(map.get_index_of(&6).is_some());",
          "    assert!(map.get_index_of(&7).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]