[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "",
          "    let key = &2;",
          "    let result = map.get_full(key);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (index, key_out, value_out) = result.unwrap();",
          "    assert_eq!(index, 1); // The index for key 2 in the insertion order",
          "    assert_eq!(key_out, &2); // The key should match the requested key",
          "    assert_eq!(value_out, &\"b\"); // The value should match the inserted value for key 2"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "",
          "    let key = &2;",
          "    let result = map.get_full(key);",
          "    assert!(result.is_some());",
          "    let (index, key_out, value_out) = result.unwrap();",
          "    assert_eq!(index, 1); // The index for key 2 in the insertion order",
          "    assert_eq!(key_out, &2); // The key should match the requested key",
          "    assert_eq!(value_out, &\"b\"); // The value should match the inserted value for key 2",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(0, \"zero\");",
          "    map.insert(1, \"one\");",
          "",
          "    let key = &0;",
          "    let result = map.get_full(key);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 0);",
          "    assert_eq!(key_ref, &0);",
          "    assert_eq!(value_ref, &\"zero\");"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(0, \"zero\");",
          "    map.insert(1, \"one\");",
          "",
          "    let key = &0;",
          "    let result = map.get_full(key);",
          "    assert!(result.is_some());",
          "    let (index, key_ref, value_ref) = result.unwrap();",
          "    assert_eq!(index, 0);",
          "    assert_eq!(key_ref, &0);",
          "    assert_eq!(value_ref, &\"zero\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(10, \"ten\");",
          "    map.insert(20, \"twenty\");",
          "",
          "    let key = &20;",
          "    let result = map.get_full(key);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (index, key, value) = result.unwrap();",
          "    assert_eq!(index, 1);",
          "    assert_eq!(key, &20);",
          "    assert_eq!(value, &\"twenty\");"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(10, \"ten\");",
          "    map.insert(20, \"twenty\");",
          "",
          "    let key = &20;",
          "    let result = map.get_full(key);",
          "    assert!(result.is_some());",
          "    let (index, key, value) = result.unwrap();",
          "    assert_eq!(index, 1);",
          "    assert_eq!(key, &20);",
          "    assert_eq!(value, &\"twenty\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(5, \"five\");",
          "    map.insert(15, \"fifteen\");",
          "    map.insert(25, \"twenty-five\");",
          "",
          "    let key = &15;",
          "    let result = map.get_full(key);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, 1);",
          "    assert_eq!(result.unwrap().1, &15);",
          "    assert_eq!(result.unwrap().2, &\"fifteen\");"
        ],
        "code": [
          "{",
          "    let mut map = IndexMap::<i32, &str, RandomState>::new();",
          "    map.insert(5, \"five\");",
          "    map.insert(15, \"fifteen\");",
          "    map.insert(25, \"twenty-five\");",
          "",
          "    let key = &15;",
          "    let result = map.get_full(key);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, 1);",
          "    assert_eq!(result.unwrap().1, &15);",
          "    assert_eq!(result.unwrap().2, &\"fifteen\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]