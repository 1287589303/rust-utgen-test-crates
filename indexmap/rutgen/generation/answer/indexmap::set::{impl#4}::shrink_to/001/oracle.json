[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.shrink_to(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.shrink_to(5);",
          "    assert_eq!(set.capacity(), 0);  // capacity should remain unchanged since it's less than current capacity",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.reserve(10);",
          "    assert!(set.capacity() >= 10);  // capacity should increase to accommodate reserve",
          "    set.shrink_to(5);",
          "    assert_eq!(set.capacity(), 5);  // capacity should now be set to the new minimum",
          "    set.truncate(0);",
          "    set.shrink_to(0);",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.shrink_to(0);",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.shrink_to(5);",
          "    assert_eq!(set.capacity(), 0);  // capacity should remain unchanged since it's less than current capacity",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.reserve(10);",
          "    assert!(set.capacity() >= 10);  // capacity should increase to accommodate reserve",
          "    set.shrink_to(5);",
          "    assert_eq!(set.capacity(), 5);  // capacity should now be set to the new minimum",
          "    set.truncate(0);",
          "    set.shrink_to(0);",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.reserve(5);",
          "    set.shrink_to(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.capacity(), 1);",
          "    assert!(set.len() >= 1);",
          "    assert!(!set.is_empty());",
          "    set.shrink_to(0);",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.shrink_to(5);",
          "    assert_eq!(set.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.reserve(5);",
          "    set.shrink_to(1);",
          "    assert_eq!(set.capacity(), 1);",
          "    assert!(set.len() >= 1);",
          "    assert!(!set.is_empty());",
          "    set.shrink_to(0);",
          "    assert_eq!(set.capacity(), 0);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.shrink_to(5);",
          "    assert_eq!(set.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.reserve(5);",
          "    let current_capacity = set.capacity();",
          "    set.shrink_to(current_capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert_eq!(set.capacity(), current_capacity);",
          "    set.shrink_to(current_capacity - 1);",
          "    assert!(set.capacity() >= current_capacity - 1);",
          "    set.shrink_to(0);",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.reserve(5);",
          "    let current_capacity = set.capacity();",
          "    set.shrink_to(current_capacity);",
          "    assert_eq!(set.len(), 0);",
          "    assert_eq!(set.capacity(), current_capacity);",
          "    set.shrink_to(current_capacity - 1);",
          "    assert!(set.capacity() >= current_capacity - 1);",
          "    set.shrink_to(0);",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.reserve(5);",
          "    let new_capacity = set.capacity() + 5; // Greater than current capacity",
          "    set.shrink_to(new_capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.capacity(), new_capacity);",
          "    assert!(set.len() > 0);",
          "    assert!(!set.is_empty());",
          "    set.shrink_to(0);",
          "    assert_eq!(set.len(), 0);",
          "    assert_eq!(set.capacity(), 0);",
          "    set.shrink_to(3);",
          "    assert_eq!(set.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.reserve(5);",
          "    let new_capacity = set.capacity() + 5; // Greater than current capacity",
          "    set.shrink_to(new_capacity);",
          "    assert_eq!(set.capacity(), new_capacity);",
          "    assert!(set.len() > 0);",
          "    assert!(!set.is_empty());",
          "    set.shrink_to(0);",
          "    assert_eq!(set.len(), 0);",
          "    assert_eq!(set.capacity(), 0);",
          "    set.shrink_to(3);",
          "    assert_eq!(set.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.shrink_to(1000); // Non-negative integer larger than current capacity",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.capacity(), 1000);",
          "    assert!(set.len() <= 1000);"
        ],
        "code": [
          "{",
          "    let mut set: IndexSet<u32, RandomState> = IndexSet::with_capacity_and_hasher(10, RandomState::new());",
          "    set.shrink_to(1000); // Non-negative integer larger than current capacity",
          "    assert_eq!(set.capacity(), 1000);",
          "    assert!(set.len() <= 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]