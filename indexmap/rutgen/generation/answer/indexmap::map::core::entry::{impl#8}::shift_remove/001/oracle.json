[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let value = entry.shift_remove();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(value, \"value1\");",
          "    assert!(map.get(\"key1\").is_none());",
          "    assert_eq!(map.get(\"key2\"), Some(&\"value2\"));"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let value = entry.shift_remove();",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(value, \"value1\");",
          "    assert!(map.get(\"key1\").is_none());",
          "    assert_eq!(map.get(\"key2\"), Some(&\"value2\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let value = entry.shift_remove();",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let value = entry.shift_remove();",
          "    assert_eq!(value, \"value1\");",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let value = entry.shift_remove();",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let entry = IndexedEntry::new(&mut map, 0);",
          "    let value = entry.shift_remove();",
          "    assert_eq!(value, \"value1\");",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    map.insert(\"key3\", \"value3\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    let value = entry.shift_remove();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, \"value2\");",
          "    assert!(map.get(\"key2\").is_none());",
          "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
          "    assert_eq!(map.get(\"key3\"), Some(&\"value3\"));",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    map.insert(\"key3\", \"value3\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    let value = entry.shift_remove();",
          "    assert_eq!(value, \"value2\");",
          "    assert!(map.get(\"key2\").is_none());",
          "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
          "    assert_eq!(map.get(\"key3\"), Some(&\"value3\"));",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    let value = entry.shift_remove();",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    let value = entry.shift_remove();",
          "    assert_eq!(value, \"value2\");",
          "    assert!(map.get(\"key2\").is_none());",
          "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    let value = entry.shift_remove();",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    map.insert(\"key2\", \"value2\");",
          "    let entry = IndexedEntry::new(&mut map, 1);",
          "    let value = entry.shift_remove();",
          "    assert_eq!(value, \"value2\");",
          "    assert!(map.get(\"key2\").is_none());",
          "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]