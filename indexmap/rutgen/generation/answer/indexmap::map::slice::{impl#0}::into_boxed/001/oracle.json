[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: 1, key: 1, value: 10 },",
          "        Bucket { hash: 2, key: 2, value: 20 },",
          "    ];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "}"
        ],
        "oracle": [
          "    let buckets: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 1, key: 1, value: 10 }, Bucket { hash: 2, key: 2, value: 20 }];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "    assert_eq!(boxed_buckets.len(), 2);",
          "    assert_eq!(boxed_buckets[0].hash, 1);",
          "    assert_eq!(boxed_buckets[0].key, 1);",
          "    assert_eq!(boxed_buckets[0].value, 10);",
          "    assert_eq!(boxed_buckets[1].hash, 2);",
          "    assert_eq!(boxed_buckets[1].key, 2);",
          "    assert_eq!(boxed_buckets[1].value, 20);"
        ],
        "code": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: 1, key: 1, value: 10 },",
          "        Bucket { hash: 2, key: 2, value: 20 },",
          "    ];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 1, key: 1, value: 10 }, Bucket { hash: 2, key: 2, value: 20 }];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "    assert_eq!(boxed_buckets.len(), 2);",
          "    assert_eq!(boxed_buckets[0].hash, 1);",
          "    assert_eq!(boxed_buckets[0].key, 1);",
          "    assert_eq!(boxed_buckets[0].value, 10);",
          "    assert_eq!(boxed_buckets[1].hash, 2);",
          "    assert_eq!(boxed_buckets[1].key, 2);",
          "    assert_eq!(boxed_buckets[1].value, 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "}"
        ],
        "oracle": [
          "    let buckets: Vec<Bucket<i32, i32>> = vec![];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "    assert_eq!(boxed_buckets.len(), 0);",
          "    assert_eq!(boxed_buckets.as_ref(), buckets.as_slice());",
          "    let buckets_with_data: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 100 }, Bucket { hash: 0, key: 2, value: 200 }];",
          "    let slice_with_data = Box::new(Slice::from_slice(&buckets_with_data));",
          "    let boxed_buckets_with_data: Box<[Bucket<i32, i32>]> = slice_with_data.into_boxed();",
          "    assert_eq!(boxed_buckets_with_data.len(), 2);",
          "    assert_eq!(boxed_buckets_with_data.as_ref(), buckets_with_data.as_slice());"
        ],
        "code": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "    let buckets: Vec<Bucket<i32, i32>> = vec![];",
          "    let slice = Box::new(Slice::from_slice(&buckets));",
          "    let boxed_buckets: Box<[Bucket<i32, i32>]> = slice.into_boxed();",
          "    assert_eq!(boxed_buckets.len(), 0);",
          "    assert_eq!(boxed_buckets.as_ref(), buckets.as_slice());",
          "    let buckets_with_data: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 100 }, Bucket { hash: 0, key: 2, value: 200 }];",
          "    let slice_with_data = Box::new(Slice::from_slice(&buckets_with_data));",
          "    let boxed_buckets_with_data: Box<[Bucket<i32, i32>]> = slice_with_data.into_boxed();",
          "    assert_eq!(boxed_buckets_with_data.len(), 2);",
          "    assert_eq!(boxed_buckets_with_data.as_ref(), buckets_with_data.as_slice());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]