[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(0, 100);",
          "    index_map.insert(1, 200);",
          "    ",
          "    let result = index_map.get_index_mut2(0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &mut 0);",
          "    assert_eq!(result.unwrap().1, &mut 100);",
          "    ",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &mut 1);",
          "    assert_eq!(result.unwrap().1, &mut 200);",
          "    ",
          "    let result = index_map.get_index_mut2(2);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(0, 100);",
          "    index_map.insert(1, 200);",
          "    ",
          "    let result = index_map.get_index_mut2(0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &mut 0);",
          "    assert_eq!(result.unwrap().1, &mut 100);",
          "    ",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &mut 1);",
          "    assert_eq!(result.unwrap().1, &mut 200);",
          "    ",
          "    let result = index_map.get_index_mut2(2);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(1, 150);",
          "    index_map.insert(2, 250);",
          "    ",
          "    let result = index_map.get_index_mut2(1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &mut 2);",
          "    assert_eq!(result.unwrap().1, &mut 250);",
          "    assert!(index_map.get_index_mut2(0).is_some());",
          "    assert!(index_map.get_index_mut2(2).is_none());",
          "    index_map.get_index_mut2(1).map(|(_, v)| *v = 300);",
          "    assert_eq!(index_map.get_index_mut2(1).unwrap().1, &mut 300);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(1, 150);",
          "    index_map.insert(2, 250);",
          "    ",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &mut 2);",
          "    assert_eq!(result.unwrap().1, &mut 250);",
          "    assert!(index_map.get_index_mut2(0).is_some());",
          "    assert!(index_map.get_index_mut2(2).is_none());",
          "    index_map.get_index_mut2(1).map(|(_, v)| *v = 300);",
          "    assert_eq!(index_map.get_index_mut2(1).unwrap().1, &mut 300);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(0, 300);",
          "    ",
          "    let result = index_map.get_index_mut2(-1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(0, 300);",
          "    ",
          "    let result = index_map.get_index_mut2(-1);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(3, 400);",
          "    ",
          "    let result = index_map.get_index_mut2(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    index_map.insert(1, 100);",
          "    let result = index_map.get_index_mut2(0);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 3);",
          "    assert_eq!(*value, 400);",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 1);",
          "    assert_eq!(*value, 100);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    index_map.insert(3, 400);",
          "    ",
          "    let result = index_map.get_index_mut2(1);",
          "    assert_eq!(result, None);",
          "    index_map.insert(1, 100);",
          "    let result = index_map.get_index_mut2(0);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 3);",
          "    assert_eq!(*value, 400);",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 1);",
          "    assert_eq!(*value, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    ",
          "    let result = index_map.get_index_mut2(0);",
          "}"
        ],
        "oracle": [
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    assert_eq!(index_map.get_index_mut2(0), None);",
          "    index_map.insert(0, 10);",
          "    let result = index_map.get_index_mut2(0);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 0);",
          "    assert_eq!(*value, 10);",
          "    *value += 5;",
          "    assert_eq!(*value, 15);",
          "    let result = index_map.get_index_mut2(1);",
          "    assert_eq!(result, None);",
          "    index_map.insert(1, 20);",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 1);",
          "    assert_eq!(*value, 20);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    ",
          "    let result = index_map.get_index_mut2(0);",
          "    let mut index_map: IndexMap<i32, i32, std::collections::hash_map::RandomState> = IndexMap::new();",
          "    assert_eq!(index_map.get_index_mut2(0), None);",
          "    index_map.insert(0, 10);",
          "    let result = index_map.get_index_mut2(0);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 0);",
          "    assert_eq!(*value, 10);",
          "    *value += 5;",
          "    assert_eq!(*value, 15);",
          "    let result = index_map.get_index_mut2(1);",
          "    assert_eq!(result, None);",
          "    index_map.insert(1, 20);",
          "    let result = index_map.get_index_mut2(1);",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(*key, 1);",
          "    assert_eq!(*value, 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]