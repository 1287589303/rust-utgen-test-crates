[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = Vec::new();",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 0);"
        ],
        "code": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = Vec::new();",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "    assert_eq!(length, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }];",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 1);",
          "    let buckets_empty: Vec<Bucket<i32, i32>> = vec![];",
          "    let slice_empty: &[Bucket<i32, i32>] = &buckets_empty;",
          "    let iter_empty = Values { iter: slice_empty.iter() };",
          "    let length_empty = iter_empty.len();",
          "    assert_eq!(length_empty, 0);",
          "    let buckets_multiple = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }, Bucket { hash: HashValue::default(), key: 2, value: 20 }];",
          "    let slice_multiple: &[Bucket<i32, i32>] = &buckets_multiple;",
          "    let iter_multiple = Values { iter: slice_multiple.iter() };",
          "    let length_multiple = iter_multiple.len();",
          "    assert_eq!(length_multiple, 2);"
        ],
        "code": [
          "{",
          "    let buckets = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }];",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "    assert_eq!(length, 1);",
          "    let buckets_empty: Vec<Bucket<i32, i32>> = vec![];",
          "    let slice_empty: &[Bucket<i32, i32>] = &buckets_empty;",
          "    let iter_empty = Values { iter: slice_empty.iter() };",
          "    let length_empty = iter_empty.len();",
          "    assert_eq!(length_empty, 0);",
          "    let buckets_multiple = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }, Bucket { hash: HashValue::default(), key: 2, value: 20 }];",
          "    let slice_multiple: &[Bucket<i32, i32>] = &buckets_multiple;",
          "    let iter_multiple = Values { iter: slice_multiple.iter() };",
          "    let length_multiple = iter_multiple.len();",
          "    assert_eq!(length_multiple, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "    ];",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 2);",
          "    assert!(length > 0);",
          "    assert!(length <= buckets.len());",
          "    assert!(length >= 0);"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "    ];",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "    assert_eq!(length, 2);",
          "    assert!(length > 0);",
          "    assert!(length <= buckets.len());",
          "    assert!(length >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = (0..100).map(|i| Bucket { hash: HashValue::default(), key: i, value: i * 10 }).collect();",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 100);"
        ],
        "code": [
          "{",
          "    let buckets: Vec<Bucket<i32, i32>> = (0..100).map(|i| Bucket { hash: HashValue::default(), key: i, value: i * 10 }).collect();",
          "    let slice: &[Bucket<i32, i32>] = &buckets;",
          "    let iter = Values { iter: slice.iter() };",
          "    let length = iter.len();",
          "    assert_eq!(length, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]