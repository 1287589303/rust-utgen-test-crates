[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let values = slice.values();",
          "}"
        ],
        "oracle": [
          "    assert!(values.iter.len() == 0);",
          "    assert_eq!(values.iter.next(), None);",
          "    ",
          "    let slice_with_entries: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
          "    let values_with_entries = slice_with_entries.values();",
          "    assert!(values_with_entries.iter.len() == 1);",
          "    assert_eq!(values_with_entries.iter.next(), Some(&10));",
          "    ",
          "    let slice_multiple_entries: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }] });",
          "    let values_multiple_entries = slice_multiple_entries.values();",
          "    assert!(values_multiple_entries.iter.len() == 2);",
          "    assert_eq!(values_multiple_entries.iter.next(), Some(&10));",
          "    assert_eq!(values_multiple_entries.iter.next(), Some(&20));"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
          "    let values = slice.values();",
          "    assert!(values.iter.len() == 0);",
          "    assert_eq!(values.iter.next(), None);",
          "    ",
          "    let slice_with_entries: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
          "    let values_with_entries = slice_with_entries.values();",
          "    assert!(values_with_entries.iter.len() == 1);",
          "    assert_eq!(values_with_entries.iter.next(), Some(&10));",
          "    ",
          "    let slice_multiple_entries: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }] });",
          "    let values_multiple_entries = slice_multiple_entries.values();",
          "    assert!(values_multiple_entries.iter.len() == 2);",
          "    assert_eq!(values_multiple_entries.iter.next(), Some(&10));",
          "    assert_eq!(values_multiple_entries.iter.next(), Some(&20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 100 }] });",
          "    let values = slice.values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some((&1, &100)));",
          "    assert!(values.iter.nth(1).is_none());",
          "    assert_eq!(values.iter.count(), 0);",
          "    assert_eq!(values.iter.len(), 0);",
          "    assert!(slice.is_empty() == false);",
          "    assert_eq!(slice.len(), 1);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 100 }] });",
          "    let values = slice.values();",
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some((&1, &100)));",
          "    assert!(values.iter.nth(1).is_none());",
          "    assert_eq!(values.iter.count(), 0);",
          "    assert_eq!(values.iter.len(), 0);",
          "    assert!(slice.is_empty() == false);",
          "    assert_eq!(slice.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [",
          "        Bucket { hash: HashValue::default(), key: 1, value: 100 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 200 },",
          "    ]});",
          "    let values = slice.values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), 2);",
          "    assert_eq!(values.iter().next(), Some((&100)));",
          "    assert_eq!(values.iter().next_back(), Some((&200)));",
          "    assert!(values.iter().all(|&v| v == 100 || v == 200));",
          "    assert!(slice.values().iter().len() == 2);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [",
          "        Bucket { hash: HashValue::default(), key: 1, value: 100 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 200 },",
          "    ]});",
          "    let values = slice.values();",
          "    assert_eq!(values.iter.len(), 2);",
          "    assert_eq!(values.iter().next(), Some((&100)));",
          "    assert_eq!(values.iter().next_back(), Some((&200)));",
          "    assert!(values.iter().all(|&v| v == 100 || v == 200));",
          "    assert!(slice.values().iter().len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]