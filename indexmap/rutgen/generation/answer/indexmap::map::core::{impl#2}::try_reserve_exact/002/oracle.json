[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.try_reserve_exact(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    let result = map.try_reserve_exact(10);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(map.capacity() >= 10);",
          "    let result = map.try_reserve_exact(usize::MAX);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    let result = map.try_reserve_exact(0);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    let result = map.try_reserve_exact(10);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(map.capacity() >= 10);",
          "    let result = map.try_reserve_exact(usize::MAX);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(capacity);",
          "    let result = map.try_reserve_exact(capacity - map.len());",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(capacity);",
          "    let result = map.try_reserve_exact(capacity - map.len());",
          "    assert!(result.is_ok());",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.try_reserve_exact(10).unwrap(); // Reserving some capacity to ensure it works",
          "    let result = map.try_reserve_exact(5); // Test reserving additional capacity",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(map.indices.len() >= 5);",
          "    assert!(map.entries.capacity() >= 15);"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
          "    map.try_reserve_exact(10).unwrap(); // Reserving some capacity to ensure it works",
          "    let result = map.try_reserve_exact(5); // Test reserving additional capacity",
          "    assert_eq!(result, Ok(()));",
          "    assert!(map.indices.len() >= 5);",
          "    assert!(map.entries.capacity() >= 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
          "    map.try_reserve_exact(1).unwrap(); // Ensure the first case works",
          "    let result = map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY - map.len() - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.try_reserve_exact(0).is_ok());",
          "    assert!(map.try_reserve_exact(2).is_err());"
        ],
        "code": [
          "{",
          "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
          "    map.try_reserve_exact(1).unwrap(); // Ensure the first case works",
          "    let result = map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY - map.len() - 1);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "    assert!(map.try_reserve_exact(0).is_ok());",
          "    assert!(map.try_reserve_exact(2).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]