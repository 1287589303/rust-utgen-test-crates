[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "        ],",
          "    };",
          "    let _result = slice.first_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_some(), true);",
          "    assert_eq!(_result.unwrap().0, &TestKey);",
          "    let value_mut = _result.unwrap().1;",
          "    *value_mut = TestValue;",
          "    assert_eq!(slice.entries[0].value, TestValue);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "        ],",
          "    };",
          "    let _result = slice.first_mut();",
          "    assert_eq!(_result.is_some(), true);",
          "    assert_eq!(_result.unwrap().0, &TestKey);",
          "    let value_mut = _result.unwrap().1;",
          "    *value_mut = TestValue;",
          "    assert_eq!(slice.entries[0].value, TestValue);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "        ],",
          "    };",
          "    let _result = slice.first_mut();",
          "}"
        ],
        "oracle": [
          "    rust",
          "    assert!(_result.is_some());",
          "    let (_key, value) = _result.unwrap();",
          "    assert_eq!(value, &mut TestValue);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "        ],",
          "    };",
          "    let _result = slice.first_mut();",
          "    rust",
          "    assert!(_result.is_some());",
          "    let (_key, value) = _result.unwrap();",
          "    assert_eq!(value, &mut TestValue);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "        ],",
          "    };",
          "    let _result = slice.first_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_some());",
          "    let (key, value) = _result.unwrap();",
          "    assert_eq!(key, &TestKey);",
          "    assert_eq!(*value, TestValue);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(slice.is_empty() == false);"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "            Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
          "        ],",
          "    };",
          "    let _result = slice.first_mut();",
          "    assert!(_result.is_some());",
          "    let (key, value) = _result.unwrap();",
          "    assert_eq!(key, &TestKey);",
          "    assert_eq!(*value, TestValue);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(slice.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [],",
          "    };",
          "    let _result = slice.first_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.entries.len(), 0);",
          "    assert!(slice.first_mut().is_none());"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let mut slice = Slice {",
          "        entries: [],",
          "    };",
          "    let _result = slice.first_mut();",
          "    assert_eq!(slice.entries.len(), 0);",
          "    assert!(slice.first_mut().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]