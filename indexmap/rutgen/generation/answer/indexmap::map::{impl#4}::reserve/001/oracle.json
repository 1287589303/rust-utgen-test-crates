[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    index_map.reserve(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    index_map.reserve(0);",
          "    assert_eq!(index_map.capacity(), 0);",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    index_map.reserve(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.capacity(), 1);",
          "    assert_eq!(index_map.len(), 0);",
          "    index_map.reserve(3);",
          "    assert_eq!(index_map.capacity(), 4);",
          "    assert_eq!(index_map.len(), 0);",
          "    index_map.reserve(0);",
          "    assert_eq!(index_map.capacity(), 4);",
          "    assert_eq!(index_map.len(), 0);",
          "    index_map.reserve(2);",
          "    assert_eq!(index_map.capacity(), 4);",
          "    assert_eq!(index_map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
          "    index_map.reserve(1);",
          "    assert_eq!(index_map.capacity(), 1);",
          "    assert_eq!(index_map.len(), 0);",
          "    index_map.reserve(3);",
          "    assert_eq!(index_map.capacity(), 4);",
          "    assert_eq!(index_map.len(), 0);",
          "    index_map.reserve(0);",
          "    assert_eq!(index_map.capacity(), 4);",
          "    assert_eq!(index_map.len(), 0);",
          "    index_map.reserve(2);",
          "    assert_eq!(index_map.capacity(), 4);",
          "    assert_eq!(index_map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    index_map.reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.capacity(), 5);",
          "    index_map.reserve(10);",
          "    assert_eq!(index_map.capacity(), 15);",
          "    index_map.reserve(0);",
          "    assert_eq!(index_map.capacity(), 15);",
          "    index_map.reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.capacity() <= IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
          "    index_map.reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert_eq!(index_map.capacity(), 5);",
          "    index_map.reserve(10);",
          "    assert_eq!(index_map.capacity(), 15);",
          "    index_map.reserve(0);",
          "    assert_eq!(index_map.capacity(), 15);",
          "    index_map.reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.capacity() <= IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_capacity = IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(max_capacity, RandomState::new());",
          "    index_map.reserve(max_capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.capacity(), max_capacity + max_capacity);",
          "    assert!(index_map.is_empty() == false);",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.iter().count() == 0);",
          "    assert!(index_map.keys().count() == 0);",
          "    assert!(index_map.values().count() == 0);"
        ],
        "code": [
          "{",
          "    let max_capacity = IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(max_capacity, RandomState::new());",
          "    index_map.reserve(max_capacity);",
          "    assert_eq!(index_map.capacity(), max_capacity + max_capacity);",
          "    assert!(index_map.is_empty() == false);",
          "    assert_eq!(index_map.len(), 0);",
          "    assert!(index_map.iter().count() == 0);",
          "    assert!(index_map.keys().count() == 0);",
          "    assert!(index_map.values().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let additional = IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
          "    index_map.reserve(additional);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.len() == 0);",
          "    assert!(index_map.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
          "    let additional = IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
          "    index_map.reserve(additional);",
          "    assert_eq!(index_map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
          "    assert!(index_map.len() == 0);",
          "    assert!(index_map.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]