[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    *value_ref = \"new_value1\";",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert_eq!(entry.index(), 0);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    assert_eq!(value_ref, &mut \"value1\");",
          "    *value_ref = \"new_value1\";",
          "    assert_eq!(entry.get(), &\"new_value1\");"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    *value_ref = \"new_value1\";",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    assert_eq!(entry.key(), &\"key1\");",
          "    assert_eq!(entry.get(), &\"value1\");",
          "    assert_eq!(entry.index(), 0);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    assert_eq!(value_ref, &mut \"value1\");",
          "    *value_ref = \"new_value1\";",
          "    assert_eq!(entry.get(), &\"new_value1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0; ",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    *value_ref = \"new_value1\";",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    assert_eq!(value_ref, &mut \"new_value1\");",
          "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0; ",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    *value_ref = \"new_value1\";",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = 0;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    assert_eq!(value_ref, &mut \"new_value1\");",
          "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = map.entries.len() - 1; ",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    *value_ref = \"new_value1\";",
          "}"
        ],
        "oracle": [
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = map.entries.len() - 1;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    assert_eq!(entry.into_mut(), &mut \"value1\");",
          "    let value_ref: &mut str = entry.into_mut();",
          "    assert_eq!(value_ref, &mut \"value1\");",
          "    *value_ref = \"new_value1\";",
          "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));"
        ],
        "code": [
          "{",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = map.entries.len() - 1; ",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    let value_ref: &mut str = entry.into_mut();",
          "    *value_ref = \"new_value1\";",
          "    let mut map = IndexMapCore::new();",
          "    map.insert(\"key1\", \"value1\");",
          "    let index = map.entries.len() - 1;",
          "    let entry = IndexedEntry::new(&mut map, index);",
          "    assert_eq!(entry.into_mut(), &mut \"value1\");",
          "    let value_ref: &mut str = entry.into_mut();",
          "    assert_eq!(value_ref, &mut \"value1\");",
          "    *value_ref = \"new_value1\";",
          "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]