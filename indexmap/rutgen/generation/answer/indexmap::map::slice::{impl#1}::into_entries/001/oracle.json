[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::from(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue::from(2), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "}"
        ],
        "oracle": [
          "    let buckets = vec![Bucket { hash: HashValue::from(1), key: \"key1\", value: \"value1\" }, Bucket { hash: HashValue::from(2), key: \"key2\", value: \"value2\" }];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, \"key1\");",
          "    assert_eq!(entries[0].value, \"value1\");",
          "    assert_eq!(entries[1].key, \"key2\");",
          "    assert_eq!(entries[1].value, \"value2\");"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::from(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue::from(2), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "    let buckets = vec![Bucket { hash: HashValue::from(1), key: \"key1\", value: \"value1\" }, Bucket { hash: HashValue::from(2), key: \"key2\", value: \"value2\" }];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "    assert_eq!(entries.len(), 2);",
          "    assert_eq!(entries[0].key, \"key1\");",
          "    assert_eq!(entries[0].value, \"value1\");",
          "    assert_eq!(entries[1].key, \"key2\");",
          "    assert_eq!(entries[1].value, \"value2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::from(3), key: \"key3\", value: \"value3\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].hash, HashValue::from(3));",
          "    assert_eq!(entries[0].key, \"key3\");",
          "    assert_eq!(entries[0].value, \"value3\");"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::from(3), key: \"key3\", value: \"value3\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].hash, HashValue::from(3));",
          "    assert_eq!(entries[0].key, \"key3\");",
          "    assert_eq!(entries[0].value, \"value3\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::from(4), key: \"key4\", value: \"value4\" },",
          "        Bucket { hash: HashValue::from(5), key: \"key5\", value: \"value5\" },",
          "        Bucket { hash: HashValue::from(6), key: \"key6\", value: \"value6\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.len(), 3);",
          "    assert_eq!(entries[0].hash, HashValue::from(4));",
          "    assert_eq!(entries[0].key, \"key4\");",
          "    assert_eq!(entries[0].value, \"value4\");",
          "    assert_eq!(entries[1].hash, HashValue::from(5));",
          "    assert_eq!(entries[1].key, \"key5\");",
          "    assert_eq!(entries[1].value, \"value5\");",
          "    assert_eq!(entries[2].hash, HashValue::from(6));",
          "    assert_eq!(entries[2].key, \"key6\");",
          "    assert_eq!(entries[2].value, \"value6\");"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::from(4), key: \"key4\", value: \"value4\" },",
          "        Bucket { hash: HashValue::from(5), key: \"key5\", value: \"value5\" },",
          "        Bucket { hash: HashValue::from(6), key: \"key6\", value: \"value6\" },",
          "    ];",
          "    let slice = Box::new(Slice { entries: buckets.try_into().unwrap() });",
          "    let entries = slice.into_entries();",
          "    assert_eq!(entries.len(), 3);",
          "    assert_eq!(entries[0].hash, HashValue::from(4));",
          "    assert_eq!(entries[0].key, \"key4\");",
          "    assert_eq!(entries[0].value, \"value4\");",
          "    assert_eq!(entries[1].hash, HashValue::from(5));",
          "    assert_eq!(entries[1].key, \"key5\");",
          "    assert_eq!(entries[1].value, \"value5\");",
          "    assert_eq!(entries[2].hash, HashValue::from(6));",
          "    assert_eq!(entries[2].key, \"key6\");",
          "    assert_eq!(entries[2].value, \"value6\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]