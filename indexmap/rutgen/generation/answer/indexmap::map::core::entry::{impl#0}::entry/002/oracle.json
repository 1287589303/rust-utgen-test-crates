[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "fn test_entry_occupied() {",
      "    struct TestEntries {",
      "        data: Vec<Bucket<i32, String>>,",
      "    }",
      "",
      "    impl Entries for TestEntries {",
      "        type Entry = Bucket<i32, String>;",
      "",
      "        fn into_entries(self) -> Vec<Self::Entry> {",
      "            self.data",
      "        }",
      "",
      "        fn as_entries(&self) -> &[Self::Entry] {",
      "            &self.data",
      "        }",
      "",
      "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
      "            &mut self.data",
      "        }",
      "",
      "        fn with_entries<F>(&mut self, f: F)",
      "        where",
      "            F: FnOnce(&mut [Self::Entry]) {",
      "            f(&mut self.data);",
      "        }",
      "    }",
      "",
      "    struct TestIndices {",
      "        entries: Vec<Option<usize>>,",
      "    }",
      "",
      "    impl TestIndices {",
      "        fn find_entry(&self, _hash: u64, eq: impl Fn(&usize) -> bool) -> Result<usize, usize> {",
      "            for (i, entry) in self.entries.iter().enumerate() {",
      "                if let Some(_) = entry {",
      "                    if eq(&i) {",
      "                        return Ok(i);",
      "                    }",
      "                }",
      "            }",
      "            Err(0) // Simulate \"not found\" case",
      "        }",
      "",
      "        fn insert(&mut self, index: usize) {",
      "            if index < self.entries.len() {",
      "                self.entries[index] = Some(index);",
      "            }",
      "        }",
      "    }",
      "",
      "    let mut entries = TestEntries { data: vec![Bucket { hash: HashValue(0), key: 1, value: \"A\".to_string() }] };",
      "    let mut indices = TestIndices { entries: vec![Some(0)] };",
      "",
      "    let mut map_core = IndexMapCore {",
      "        indices,",
      "        entries,",
      "    };",
      "",
      "    let hash = HashValue(0);",
      "    let key = 1;",
      "",
      "    let result = map_core.entry(hash, key);",
      "    // The result variable now holds the Entry that we are testing for",
      "}",
      "",
      "fn test_entry_vacant() {",
      "    struct TestEntries {",
      "        data: Vec<Bucket<i32, String>>,",
      "    }",
      "",
      "    impl Entries for TestEntries {",
      "        type Entry = Bucket<i32, String>;",
      "",
      "        fn into_entries(self) -> Vec<Self::Entry> {",
      "            self.data",
      "        }",
      "",
      "        fn as_entries(&self) -> &[Self::Entry] {",
      "            &self.data",
      "        }",
      "",
      "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
      "            &mut self.data",
      "        }",
      "",
      "        fn with_entries<F>(&mut self, f: F)",
      "        where",
      "            F: FnOnce(&mut [Self::Entry]) {",
      "            f(&mut self.data);",
      "        }",
      "    }",
      "",
      "    struct TestIndices {",
      "        entries: Vec<Option<usize>>,",
      "    }",
      "",
      "    impl TestIndices {",
      "        fn find_entry(&self, _hash: u64, _eq: impl Fn(&usize) -> bool) -> Result<usize, usize> {",
      "            Err(0) // Simulating not found",
      "        }",
      "    }",
      "",
      "    let mut entries = TestEntries { data: vec![] };",
      "    let mut indices = TestIndices { entries: vec![None] };",
      "",
      "    let mut map_core = IndexMapCore {",
      "        indices,",
      "        entries,",
      "    };",
      "",
      "    let hash = HashValue(1);",
      "    let key = 2;",
      "",
      "    let result = map_core.entry(hash, key);",
      "    // The result variable now holds the Entry that we are testing for",
      "}"
    ],
    "chain_tests": []
  }
]