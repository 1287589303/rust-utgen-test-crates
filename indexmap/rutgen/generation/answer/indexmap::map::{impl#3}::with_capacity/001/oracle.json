[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.keys().into_iter().count(), 0);",
          "    assert_eq!(map.values().into_iter().count(), 0);"
        ],
        "code": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(0);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.keys().into_iter().count(), 0);",
          "    assert_eq!(map.values().into_iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(1);",
          "}"
        ],
        "oracle": [
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(0); assert_eq!(map.len(), 0);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(1); assert_eq!(map.len(), 0);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(10); assert_eq!(map.len(), 0);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(1); assert!(map.is_empty());",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(5); assert!(map.is_empty());",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(10); assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(1);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(0); assert_eq!(map.len(), 0);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(1); assert_eq!(map.len(), 0);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(10); assert_eq!(map.len(), 0);",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(1); assert!(map.is_empty());",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(5); assert!(map.is_empty());",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(10); assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    assert!(map.iter().next().is_none());",
          "    assert!(map.keys().next().is_none());",
          "    assert!(map.values().next().is_none());"
        ],
        "code": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(10);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    assert!(map.iter().next().is_none());",
          "    assert!(map.keys().next().is_none());",
          "    assert!(map.values().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), usize::MAX);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    ",
          "    let map_zero: IndexMap<usize, usize> = IndexMap::with_capacity(0);",
          "    assert_eq!(map_zero.capacity(), 0);",
          "    assert!(map_zero.is_empty());",
          "    assert_eq!(map_zero.len(), 0);",
          "    ",
          "    let map_small: IndexMap<usize, usize> = IndexMap::with_capacity(1);",
          "    assert_eq!(map_small.capacity(), 1);",
          "    assert!(map_small.is_empty());",
          "    assert_eq!(map_small.len(), 0);"
        ],
        "code": [
          "{",
          "    let map: IndexMap<usize, usize> = IndexMap::with_capacity(usize::MAX);",
          "    assert_eq!(map.capacity(), usize::MAX);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    ",
          "    let map_zero: IndexMap<usize, usize> = IndexMap::with_capacity(0);",
          "    assert_eq!(map_zero.capacity(), 0);",
          "    assert!(map_zero.is_empty());",
          "    assert_eq!(map_zero.len(), 0);",
          "    ",
          "    let map_small: IndexMap<usize, usize> = IndexMap::with_capacity(1);",
          "    assert_eq!(map_small.capacity(), 1);",
          "    assert!(map_small.is_empty());",
          "    assert_eq!(map_small.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]