[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bucket = Bucket { ",
          "        hash: HashValue::new(1), ",
          "        key: \"key1\", ",
          "        value: \"value1\" ",
          "    };",
          "    let iter = IntoIter {",
          "        iter: vec![bucket].into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.as_slice()[0].key, \"key1\");",
          "    assert_eq!(iter.iter.as_slice()[0].value, \"value1\");",
          "    assert_eq!(iter.iter.as_slice()[0].hash, HashValue::new(1));",
          "    assert!(iter.iter.as_slice()[0].refs().is_some());",
          "    assert!(iter.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(iter.iter.is_fused());"
        ],
        "code": [
          "{",
          "    let bucket = Bucket { ",
          "        hash: HashValue::new(1), ",
          "        key: \"key1\", ",
          "        value: \"value1\" ",
          "    };",
          "    let iter = IntoIter {",
          "        iter: vec![bucket].into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.as_slice()[0].key, \"key1\");",
          "    assert_eq!(iter.iter.as_slice()[0].value, \"value1\");",
          "    assert_eq!(iter.iter.as_slice()[0].hash, HashValue::new(1));",
          "    assert!(iter.iter.as_slice()[0].refs().is_some());",
          "    assert!(iter.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(iter.iter.is_fused());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue::new(2), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    let iter = IntoIter {",
          "        iter: buckets.into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    let buckets = vec![",
          "    Bucket { hash: HashValue::new(1), key: \"key1\", value: \"value1\" },",
          "    Bucket { hash: HashValue::new(2), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    ",
          "    let iter = IntoIter {",
          "    iter: buckets.into_iter(),",
          "    };",
          "    ",
          "    let result = iter.fmt(&mut fmt::Formatter::new());",
          "    assert!(result.is_ok());",
          "    ",
          "    let empty_buckets: Vec<Bucket<&str, &str>> = vec![];",
          "    let empty_iter = IntoIter { iter: empty_buckets.into_iter() };",
          "    let empty_result = empty_iter.fmt(&mut fmt::Formatter::new());",
          "    assert!(empty_result.is_ok());"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue::new(2), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    let iter = IntoIter {",
          "        iter: buckets.into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "    let buckets = vec![",
          "    Bucket { hash: HashValue::new(1), key: \"key1\", value: \"value1\" },",
          "    Bucket { hash: HashValue::new(2), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    ",
          "    let iter = IntoIter {",
          "    iter: buckets.into_iter(),",
          "    };",
          "    ",
          "    let result = iter.fmt(&mut fmt::Formatter::new());",
          "    assert!(result.is_ok());",
          "    ",
          "    let empty_buckets: Vec<Bucket<&str, &str>> = vec![];",
          "    let empty_iter = IntoIter { iter: empty_buckets.into_iter() };",
          "    let empty_result = empty_iter.fmt(&mut fmt::Formatter::new());",
          "    assert!(empty_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter = IntoIter {",
          "        iter: Vec::<Bucket<&str, &str>>::new().into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.len(), 0);",
          "    assert!(iter.iter.as_slice().is_empty());",
          "    assert!(fmt::Formatter::new().debug_list().entries(iter.iter).finish().is_ok());",
          "    assert!(iter.iter.map(Bucket::refs).count() == 0);",
          "    assert_eq!(format!(\"{:?}\", iter), \"[]\");"
        ],
        "code": [
          "{",
          "    let iter = IntoIter {",
          "        iter: Vec::<Bucket<&str, &str>>::new().into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "    assert_eq!(iter.iter.len(), 0);",
          "    assert!(iter.iter.as_slice().is_empty());",
          "    assert!(fmt::Formatter::new().debug_list().entries(iter.iter).finish().is_ok());",
          "    assert!(iter.iter.map(Bucket::refs).count() == 0);",
          "    assert_eq!(format!(\"{:?}\", iter), \"[]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue::new(1), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    let iter = IntoIter {",
          "        iter: buckets.into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", iter), \"[(key1, value1), (key2, value2)]\");",
          "    assert!(iter.iter.len() == 2);",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_none());",
          "    assert!(format!(\"{:?}\", iter).contains(\"[(key1, value1), (key2, value2)]\"));",
          "    assert!(iter.iter.as_slice().len() == 2);"
        ],
        "code": [
          "{",
          "    let buckets = vec![",
          "        Bucket { hash: HashValue::new(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue::new(1), key: \"key2\", value: \"value2\" },",
          "    ];",
          "    let iter = IntoIter {",
          "        iter: buckets.into_iter(),",
          "    };",
          "    let _ = iter.fmt(&mut fmt::Formatter::new());",
          "    assert_eq!(format!(\"{:?}\", iter), \"[(key1, value1), (key2, value2)]\");",
          "    assert!(iter.iter.len() == 2);",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_none());",
          "    assert!(format!(\"{:?}\", iter).contains(\"[(key1, value1), (key2, value2)]\"));",
          "    assert!(iter.iter.as_slice().len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]