[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEntry {",
          "        hash: HashValue,",
          "        key: usize,",
          "        value: usize,",
          "    }",
          "",
          "    let mut map = IndexMapCore::new();",
          "    for i in 0..5 {",
          "        map.push_entry(HashValue::from(i), i, i);",
          "    }",
          "    let current_len = map.len();",
          "",
          "    map.truncate(current_len - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), current_len - 1);",
          "    assert!(map.entries.len() <= current_len - 1);",
          "    assert!(map.indices.len() <= current_len - 1);",
          "    assert!(map.entries.len() < current_len);"
        ],
        "code": [
          "{",
          "    struct TestEntry {",
          "        hash: HashValue,",
          "        key: usize,",
          "        value: usize,",
          "    }",
          "",
          "    let mut map = IndexMapCore::new();",
          "    for i in 0..5 {",
          "        map.push_entry(HashValue::from(i), i, i);",
          "    }",
          "    let current_len = map.len();",
          "",
          "    map.truncate(current_len - 1);",
          "    assert_eq!(map.len(), current_len - 1);",
          "    assert!(map.entries.len() <= current_len - 1);",
          "    assert!(map.indices.len() <= current_len - 1);",
          "    assert!(map.entries.len() < current_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEntry {",
          "        hash: HashValue,",
          "        key: usize,",
          "        value: usize,",
          "    }",
          "",
          "    let mut map = IndexMapCore::new();",
          "    for i in 0..3 {",
          "        map.push_entry(HashValue::from(i), i, i);",
          "    }",
          "    let current_len = map.len();",
          "",
          "    map.truncate(current_len - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), current_len - 1);",
          "    assert!(map.entries.len() == current_len - 1);",
          "    assert!(map.indices.len() < current_len);",
          "    assert!(map.entries.get(current_len - 1).is_none());",
          "    assert!(map.entries.get(current_len - 2).is_some());",
          "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);"
        ],
        "code": [
          "{",
          "    struct TestEntry {",
          "        hash: HashValue,",
          "        key: usize,",
          "        value: usize,",
          "    }",
          "",
          "    let mut map = IndexMapCore::new();",
          "    for i in 0..3 {",
          "        map.push_entry(HashValue::from(i), i, i);",
          "    }",
          "    let current_len = map.len();",
          "",
          "    map.truncate(current_len - 1);",
          "    assert_eq!(map.len(), current_len - 1);",
          "    assert!(map.entries.len() == current_len - 1);",
          "    assert!(map.indices.len() < current_len);",
          "    assert!(map.entries.get(current_len - 1).is_none());",
          "    assert!(map.entries.get(current_len - 2).is_some());",
          "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEntry {",
          "        hash: HashValue,",
          "        key: usize,",
          "        value: usize,",
          "    }",
          "",
          "    let mut map = IndexMapCore::new();",
          "    for i in 0..10 {",
          "        map.push_entry(HashValue::from(i), i, i);",
          "    }",
          "    let current_len = map.len();",
          "",
          "    map.truncate(current_len - 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), current_len - 2);",
          "    assert_eq!(map.entries.len(), current_len - 2);",
          "    assert!(map.indices.len() <= current_len - 2);",
          "    assert!(map.entries.iter().all(|entry| entry.key < current_len));",
          "    assert!(map.entries.iter().all(|entry| entry.value < current_len));",
          "    assert!(map.len() < current_len);",
          "    assert!(map.entries.len() < current_len);",
          "    assert!(map.indices.len() < current_len);"
        ],
        "code": [
          "{",
          "    struct TestEntry {",
          "        hash: HashValue,",
          "        key: usize,",
          "        value: usize,",
          "    }",
          "",
          "    let mut map = IndexMapCore::new();",
          "    for i in 0..10 {",
          "        map.push_entry(HashValue::from(i), i, i);",
          "    }",
          "    let current_len = map.len();",
          "",
          "    map.truncate(current_len - 2);",
          "    assert_eq!(map.len(), current_len - 2);",
          "    assert_eq!(map.entries.len(), current_len - 2);",
          "    assert!(map.indices.len() <= current_len - 2);",
          "    assert!(map.entries.iter().all(|entry| entry.key < current_len));",
          "    assert!(map.entries.iter().all(|entry| entry.value < current_len));",
          "    assert!(map.len() < current_len);",
          "    assert!(map.entries.len() < current_len);",
          "    assert!(map.indices.len() < current_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]