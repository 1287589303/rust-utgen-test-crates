[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(5);",
          "    let hash = HashValue::default();",
          "    index_map.push_entry(hash, 1, \"value1\");",
          "    index_map.push_entry(hash, 2, \"value2\");",
          "    ",
          "    let len = index_map.len();",
          "    index_map.truncate(len);",
          "}"
        ],
        "oracle": [
          "    index_map.len() == len",
          "    index_map.entries.len() == 2",
          "    index_map.indices.len() == 2",
          "    index_map.capacity() >= 5"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(5);",
          "    let hash = HashValue::default();",
          "    index_map.push_entry(hash, 1, \"value1\");",
          "    index_map.push_entry(hash, 2, \"value2\");",
          "    ",
          "    let len = index_map.len();",
          "    index_map.truncate(len);",
          "    index_map.len() == len",
          "    index_map.entries.len() == 2",
          "    index_map.indices.len() == 2",
          "    index_map.capacity() >= 5",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let hash = HashValue::default();",
          "    ",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.push_entry(hash, i, format!(\"value{}\", i));",
          "    }",
          "    ",
          "    let len = index_map.len();",
          "    index_map.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_map.len(), len);",
          "    assert_eq!(index_map.entries.len(), len);",
          "    assert!(!index_map.entries.is_empty());",
          "    assert!(index_map.indices.len() <= len);"
        ],
        "code": [
          "{",
          "    let mut index_map = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
          "    let hash = HashValue::default();",
          "    ",
          "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
          "        index_map.push_entry(hash, i, format!(\"value{}\", i));",
          "    }",
          "    ",
          "    let len = index_map.len();",
          "    index_map.truncate(len);",
          "    assert_eq!(index_map.len(), len);",
          "    assert_eq!(index_map.entries.len(), len);",
          "    assert!(!index_map.entries.is_empty());",
          "    assert!(index_map.indices.len() <= len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]