[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = ",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve_exact(0);",
          "}"
        ],
        "oracle": [
          "    index_set.reserve_exact(0); assert_eq!(index_set.len(), 0); assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve_exact(5); assert!(index_set.capacity() >= 15); assert_eq!(index_set.len(), 0);",
          "    index_set.reserve_exact(10); assert!(index_set.capacity() >= 20); assert_eq!(index_set.len(), 0);",
          "    index_set.reserve_exact(1); assert!(index_set.capacity() >= 21); assert_eq!(index_set.len(), 0);",
          "    index_set.truncate(0); index_set.reserve_exact(0); assert_eq!(index_set.len(), 0);",
          "    index_set.reserve_exact(100); assert!(index_set.capacity() >= 110); assert_eq!(index_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = ",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve_exact(0);",
          "    index_set.reserve_exact(0); assert_eq!(index_set.len(), 0); assert_eq!(index_set.capacity(), 10);",
          "    index_set.reserve_exact(5); assert!(index_set.capacity() >= 15); assert_eq!(index_set.len(), 0);",
          "    index_set.reserve_exact(10); assert!(index_set.capacity() >= 20); assert_eq!(index_set.len(), 0);",
          "    index_set.reserve_exact(1); assert!(index_set.capacity() >= 21); assert_eq!(index_set.len(), 0);",
          "    index_set.truncate(0); index_set.reserve_exact(0); assert_eq!(index_set.len(), 0);",
          "    index_set.reserve_exact(100); assert!(index_set.capacity() >= 110); assert_eq!(index_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = ",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve_exact(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 15);",
          "    index_set.reserve_exact(10);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 25);",
          "    index_set.reserve_exact(0);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 15);",
          "    index_set.reserve_exact(1);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 16);",
          "    index_set.reserve_exact(100);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 115);"
        ],
        "code": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = ",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve_exact(5);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 15);",
          "    index_set.reserve_exact(10);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 25);",
          "    index_set.reserve_exact(0);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 15);",
          "    index_set.reserve_exact(1);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 16);",
          "    index_set.reserve_exact(100);",
          "    assert_eq!(index_set.len(), 5);",
          "    assert!(index_set.capacity() >= 115);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = ",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve_exact(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert!(index_set.try_reserve_exact(1).is_ok());",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.is_empty());",
          "    index_set.reserve_exact(5);",
          "    assert!(index_set.capacity() >= 15);",
          "    index_set.shrink_to(10);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert!(index_set.try_reserve_exact(usize::MAX).is_err());"
        ],
        "code": [
          "{",
          "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = ",
          "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
          "    index_set.reserve_exact(usize::MAX);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert!(index_set.try_reserve_exact(1).is_ok());",
          "    assert_eq!(index_set.len(), 0);",
          "    assert!(index_set.is_empty());",
          "    index_set.reserve_exact(5);",
          "    assert!(index_set.capacity() >= 15);",
          "    index_set.shrink_to(10);",
          "    assert_eq!(index_set.capacity(), 10);",
          "    assert!(index_set.try_reserve_exact(usize::MAX).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]