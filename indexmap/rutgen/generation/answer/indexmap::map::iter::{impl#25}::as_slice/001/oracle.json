[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries: Vec<Bucket<u32, u32>> = vec![];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.entries.len(), 0);",
          "    assert!(slice.entries.is_empty());",
          "    assert!(slice as *const Slice<u32, u32> == Slice::from_slice(&[]));",
          "    assert!(slice.entries as *const [Bucket<u32, u32>] == &[] as *const _);",
          "    assert!(slice.entries.is_empty());"
        ],
        "code": [
          "{",
          "    let entries: Vec<Bucket<u32, u32>> = vec![];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    assert_eq!(slice.entries.len(), 0);",
          "    assert!(slice.entries.is_empty());",
          "    assert!(slice as *const Slice<u32, u32> == Slice::from_slice(&[]));",
          "    assert!(slice.entries as *const [Bucket<u32, u32>] == &[] as *const _);",
          "    assert!(slice.entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries = vec![Bucket { hash: 1, key: 1u32, value: 10u32 }];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "}"
        ],
        "oracle": [
          "    let entries = vec![Bucket { hash: 1, key: 1u32, value: 10u32 }];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    assert_eq!(slice.entries.len(), 1);",
          "    assert_eq!(slice.entries[0].key, 1u32);",
          "    assert_eq!(slice.entries[0].value, 10u32);",
          "    assert_eq!(slice.entries[0].hash, 1);"
        ],
        "code": [
          "{",
          "    let entries = vec![Bucket { hash: 1, key: 1u32, value: 10u32 }];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    let entries = vec![Bucket { hash: 1, key: 1u32, value: 10u32 }];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    assert_eq!(slice.entries.len(), 1);",
          "    assert_eq!(slice.entries[0].key, 1u32);",
          "    assert_eq!(slice.entries[0].value, 10u32);",
          "    assert_eq!(slice.entries[0].hash, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let entries = vec![",
          "        Bucket { hash: 1, key: 1u32, value: 10u32 },",
          "        Bucket { hash: 2, key: 2u32, value: 20u32 },",
          "        Bucket { hash: 3, key: 3u32, value: 30u32 },",
          "    ];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.entries.len(), 3);",
          "    assert_eq!(slice.entries[0].key, 1u32);",
          "    assert_eq!(slice.entries[0].value, 10u32);",
          "    assert_eq!(slice.entries[1].key, 2u32);",
          "    assert_eq!(slice.entries[1].value, 20u32);",
          "    assert_eq!(slice.entries[2].key, 3u32);",
          "    assert_eq!(slice.entries[2].value, 30u32);"
        ],
        "code": [
          "{",
          "    let entries = vec![",
          "        Bucket { hash: 1, key: 1u32, value: 10u32 },",
          "        Bucket { hash: 2, key: 2u32, value: 20u32 },",
          "        Bucket { hash: 3, key: 3u32, value: 30u32 },",
          "    ];",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    assert_eq!(slice.entries.len(), 3);",
          "    assert_eq!(slice.entries[0].key, 1u32);",
          "    assert_eq!(slice.entries[0].value, 10u32);",
          "    assert_eq!(slice.entries[1].key, 2u32);",
          "    assert_eq!(slice.entries[1].value, 20u32);",
          "    assert_eq!(slice.entries[2].key, 3u32);",
          "    assert_eq!(slice.entries[2].value, 30u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries = Vec::with_capacity(1000);",
          "    for i in 0..1000 {",
          "        entries.push(Bucket { hash: i as u64, key: i, value: i * 10 });",
          "    }",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "}"
        ],
        "oracle": [
          "    let mut entries = Vec::with_capacity(1000);",
          "    assert_eq!(entries.capacity(), 1000);",
          "    for i in 0..1000 {",
          "    entries.push(Bucket { hash: i as u64, key: i, value: i * 10 });",
          "    }",
          "    assert_eq!(entries.len(), 1000);",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    assert!(!slice.entries.is_empty());",
          "    assert_eq!(slice.entries.len(), 1000);",
          "    assert_eq!(slice.entries[0].key, 0);",
          "    assert_eq!(slice.entries[0].value, 0);",
          "    assert_eq!(slice.entries[999].key, 999);",
          "    assert_eq!(slice.entries[999].value, 9990);"
        ],
        "code": [
          "{",
          "    let mut entries = Vec::with_capacity(1000);",
          "    for i in 0..1000 {",
          "        entries.push(Bucket { hash: i as u64, key: i, value: i * 10 });",
          "    }",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    let mut entries = Vec::with_capacity(1000);",
          "    assert_eq!(entries.capacity(), 1000);",
          "    for i in 0..1000 {",
          "    entries.push(Bucket { hash: i as u64, key: i, value: i * 10 });",
          "    }",
          "    assert_eq!(entries.len(), 1000);",
          "    let iter = IntoIter::new(entries);",
          "    let slice = iter.as_slice();",
          "    assert!(!slice.entries.is_empty());",
          "    assert_eq!(slice.entries.len(), 1000);",
          "    assert_eq!(slice.entries[0].key, 0);",
          "    assert_eq!(slice.entries[0].value, 0);",
          "    assert_eq!(slice.entries[999].key, 999);",
          "    assert_eq!(slice.entries[999].value, 9990);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]