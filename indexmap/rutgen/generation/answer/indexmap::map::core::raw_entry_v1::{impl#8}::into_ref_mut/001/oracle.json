[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(0);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref_mut.entries.as_entries().len(), 2);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].key, 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[1].key, 2);"
        ],
        "code": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(0);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "    assert_eq!(_ref_mut.entries.as_entries().len(), 2);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].key, 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[1].key, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(entries.len() - 1);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref_mut.entries.as_entries().len(), 2);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].key, 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].value, 10);",
          "    assert_eq!(_ref_mut.entries.as_entries()[1].key, 2);",
          "    assert_eq!(_ref_mut.entries.as_entries()[1].value, 20);",
          "    assert_eq!(_ref_mut.indices, &mut vec![0, 1]);"
        ],
        "code": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(entries.len() - 1);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "    assert_eq!(_ref_mut.entries.as_entries().len(), 2);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].key, 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].value, 10);",
          "    assert_eq!(_ref_mut.entries.as_entries()[1].key, 2);",
          "    assert_eq!(_ref_mut.entries.as_entries()[1].value, 20);",
          "    assert_eq!(_ref_mut.indices, &mut vec![0, 1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "        Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(1);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref_mut.entries.len(), 3);",
          "    assert_eq!(_ref_mut.entries[1].key, 2);",
          "    assert_eq!(_ref_mut.entries[1].value, 20);",
          "    assert_eq!(_ref_mut.entries[0].key, 1);",
          "    assert_eq!(_ref_mut.entries[0].value, 10);",
          "    assert_eq!(_ref_mut.entries[2].key, 3);",
          "    assert_eq!(_ref_mut.entries[2].value, 30);",
          "    assert!(std::ptr::eq(_ref_mut.entries as *const _, entries.as_ptr()));"
        ],
        "code": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
          "        Bucket { hash: HashValue::default(), key: 3, value: 30 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(1);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "    assert_eq!(_ref_mut.entries.len(), 3);",
          "    assert_eq!(_ref_mut.entries[1].key, 2);",
          "    assert_eq!(_ref_mut.entries[1].value, 20);",
          "    assert_eq!(_ref_mut.entries[0].key, 1);",
          "    assert_eq!(_ref_mut.entries[0].value, 10);",
          "    assert_eq!(_ref_mut.entries[2].key, 3);",
          "    assert_eq!(_ref_mut.entries[2].value, 30);",
          "    assert!(std::ptr::eq(_ref_mut.entries as *const _, entries.as_ptr()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(0);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert_eq!(_ref_mut.entries.as_entries().len(), 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].key, 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].value, 10);",
          "    assert_eq!(_ref_mut.indices, &mut raw_entry.indices);"
        ],
        "code": [
          "{",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
          "    ];",
          "    let index = hash_table::OccupiedEntry::from_index(0);",
          "    let raw_entry = RawOccupiedEntryMut {",
          "        entries: &mut entries,",
          "        index,",
          "        hash_builder: PhantomData,",
          "    };",
          "    let _ref_mut = raw_entry.into_ref_mut();",
          "    assert_eq!(entries.len(), 1);",
          "    assert_eq!(entries[0].key, 1);",
          "    assert_eq!(entries[0].value, 10);",
          "    assert_eq!(_ref_mut.entries.as_entries().len(), 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].key, 1);",
          "    assert_eq!(_ref_mut.entries.as_entries()[0].value, 10);",
          "    assert_eq!(_ref_mut.indices, &mut raw_entry.indices);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]