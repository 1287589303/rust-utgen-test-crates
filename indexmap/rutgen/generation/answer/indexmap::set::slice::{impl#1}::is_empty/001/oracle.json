[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let result = slice.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let result = slice.is_empty();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 10 }] });",
          "    let result = slice.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result == false);",
          "    let empty_slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let empty_result = empty_slice.is_empty();",
          "    assert!(empty_result == true);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 10 }] });",
          "    let result = slice.is_empty();",
          "    assert!(result == false);",
          "    let empty_slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let empty_result = empty_slice.is_empty();",
          "    assert!(empty_result == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 10 }, Bucket { hash: HashValue::default(), key: 2, value: 20 }] });",
          "    let result = slice.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    ",
          "    let empty_slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let empty_result = empty_slice.is_empty();",
          "    assert_eq!(empty_result, true);"
        ],
        "code": [
          "{",
          "    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 10 }, Bucket { hash: HashValue::default(), key: 2, value: 20 }] });",
          "    let result = slice.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let empty_slice: Box<Slice<u32>> = Box::new(Slice { entries: [] });",
          "    let empty_result = empty_slice.is_empty();",
          "    assert_eq!(empty_result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &Slice<u32> = Slice::new();",
          "    let result = slice.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let slice: &Slice<u32> = Slice::new();",
          "    let result = slice.is_empty();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]