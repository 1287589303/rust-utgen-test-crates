[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iterable: Vec<i32> = Vec::new();",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "}"
        ],
        "oracle": [
          "    let iterable: Vec<i32> = Vec::new();",
          "    let expected: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(Vec::new());",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let iterable: Vec<i32> = Vec::new();",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "    let iterable: Vec<i32> = Vec::new();",
          "    let expected: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(Vec::new());",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iterable = vec![42];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "}"
        ],
        "oracle": [
          "    let iterable = vec![42];",
          "    let expected = super::IndexSet {",
          "    map: super::IndexMap::from_iter(vec![(42, ())]),",
          "    };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let iterable = vec![42];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "    let iterable = vec![42];",
          "    let expected = super::IndexSet {",
          "    map: super::IndexMap::from_iter(vec![(42, ())]),",
          "    };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iterable = vec![1, 2, 3, 4, 5];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "}"
        ],
        "oracle": [
          "    let expected_result = super::IndexSet::from_iter(vec![(1, ()), (2, ()), (3, ()), (4, ()), (5, ())]);",
          "    assert_eq!(result, expected_result);",
          "    assert!(result.map.core.len() == 5);",
          "    assert!(result.map.core.contains_key(&1));",
          "    assert!(result.map.core.contains_key(&5));",
          "    assert!(!result.map.core.contains_key(&6));",
          "    assert!(result.map.core.value_hasher == std::collections::hash_map::RandomState::new());"
        ],
        "code": [
          "{",
          "    let iterable = vec![1, 2, 3, 4, 5];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "    let expected_result = super::IndexSet::from_iter(vec![(1, ()), (2, ()), (3, ()), (4, ()), (5, ())]);",
          "    assert_eq!(result, expected_result);",
          "    assert!(result.map.core.len() == 5);",
          "    assert!(result.map.core.contains_key(&1));",
          "    assert!(result.map.core.contains_key(&5));",
          "    assert!(!result.map.core.contains_key(&6));",
          "    assert!(result.map.core.value_hasher == std::collections::hash_map::RandomState::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iterable: Vec<i32> = (0..1000).collect();",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.map.core.len(), 1000);",
          "    assert!(result.map.core.contains_key(&0));",
          "    assert!(result.map.core.contains_key(&999));",
          "    assert!(!result.map.core.contains_key(&1000));",
          "    assert_eq!(result.map.hash_builder, std::collections::hash_map::RandomState::new());",
          "    assert!(result.map.is_empty() == false);",
          "    assert_eq!(result.map.core.entries.len(), 1000);"
        ],
        "code": [
          "{",
          "    let iterable: Vec<i32> = (0..1000).collect();",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable);",
          "    assert_eq!(result.map.core.len(), 1000);",
          "    assert!(result.map.core.contains_key(&0));",
          "    assert!(result.map.core.contains_key(&999));",
          "    assert!(!result.map.core.contains_key(&1000));",
          "    assert_eq!(result.map.hash_builder, std::collections::hash_map::RandomState::new());",
          "    assert!(result.map.is_empty() == false);",
          "    assert_eq!(result.map.core.entries.len(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iterable = vec![1, 1, 2, 2, 3];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable.into_iter().collect::<std::collections::HashSet<_>>());",
          "}"
        ],
        "oracle": [
          "    let iterable = vec![1, 1, 2, 2, 3];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable.into_iter().collect::<std::collections::HashSet<_>>());",
          "    assert_eq!(result.map.as_entries(), &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let iterable = vec![1, 1, 2, 2, 3];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable.into_iter().collect::<std::collections::HashSet<_>>());",
          "    let iterable = vec![1, 1, 2, 2, 3];",
          "    let result: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::from_iter(iterable.into_iter().collect::<std::collections::HashSet<_>>());",
          "    assert_eq!(result.map.as_entries(), &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]