[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: hash_table::HashTable<usize> = hash_table::HashTable::default();",
          "    indices.insert(2);",
          "    indices.insert(3);",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 30 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(4), key: 5, value: 50 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(indices.len(), 2);",
          "    assert!(indices.contains(&2));",
          "    assert!(indices.contains(&3));",
          "    assert!(!indices.contains(&0));",
          "    assert!(!indices.contains(&(3 + 1)));",
          "    assert_eq!(entries[0].hash.0, 0);",
          "    assert_eq!(entries[1].hash.0, 1);",
          "    assert_eq!(entries[2].hash.0, 2);",
          "    assert_eq!(entries[3].hash.0, 3);",
          "    assert_eq!(entries[4].hash.0, 4);"
        ],
        "code": [
          "{",
          "    let mut indices: hash_table::HashTable<usize> = hash_table::HashTable::default();",
          "    indices.insert(2);",
          "    indices.insert(3);",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 30 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(4), key: 5, value: 50 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 2);",
          "    assert_eq!(indices.len(), 2);",
          "    assert!(indices.contains(&2));",
          "    assert!(indices.contains(&3));",
          "    assert!(!indices.contains(&0));",
          "    assert!(!indices.contains(&(3 + 1)));",
          "    assert_eq!(entries[0].hash.0, 0);",
          "    assert_eq!(entries[1].hash.0, 1);",
          "    assert_eq!(entries[2].hash.0, 2);",
          "    assert_eq!(entries[3].hash.0, 3);",
          "    assert_eq!(entries[4].hash.0, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: hash_table::HashTable<usize> = hash_table::HashTable::default();",
          "    indices.insert(3);",
          "    indices.insert(4);",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 30 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(4), key: 5, value: 50 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(1, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(indices.len(), 2);",
          "    assert!(indices.get(3).is_none());",
          "    assert!(indices.get(4).is_some());",
          "    assert_eq!(entries[1].key, 2);",
          "    assert_eq!(entries[2].key, 3);",
          "    assert_eq!(entries[3].key, 4);",
          "    assert_eq!(entries[4].key, 5);",
          "    assert_eq!(entries.len(), 5);",
          "    assert_eq!(indices.get(2), Some(&1));",
          "    assert_eq!(indices.get(3), None);",
          "    assert_eq!(indices.get(4), Some(&4));"
        ],
        "code": [
          "{",
          "    let mut indices: hash_table::HashTable<usize> = hash_table::HashTable::default();",
          "    indices.insert(3);",
          "    indices.insert(4);",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 30 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(4), key: 5, value: 50 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(1, 3);",
          "    assert_eq!(indices.len(), 2);",
          "    assert!(indices.get(3).is_none());",
          "    assert!(indices.get(4).is_some());",
          "    assert_eq!(entries[1].key, 2);",
          "    assert_eq!(entries[2].key, 3);",
          "    assert_eq!(entries[3].key, 4);",
          "    assert_eq!(entries[4].key, 5);",
          "    assert_eq!(entries.len(), 5);",
          "    assert_eq!(indices.get(2), Some(&1));",
          "    assert_eq!(indices.get(3), None);",
          "    assert_eq!(indices.get(4), Some(&4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: hash_table::HashTable<usize> = hash_table::HashTable::default();",
          "    indices.insert(5);",
          "    indices.insert(6);",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 30 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(4), key: 5, value: 50 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(indices.len(), 2);",
          "    assert!(indices.contains(&5));",
          "    assert!(indices.contains(&6));",
          "    assert_eq!(entries[0].hash.0, 0);",
          "    assert_eq!(entries[1].hash.0, 1);",
          "    assert_eq!(entries[2].hash.0, 2);",
          "    assert_eq!(entries[3].hash.0, 3);",
          "    assert_eq!(entries[4].hash.0, 4);",
          "    assert_eq!(entries.get(0).unwrap().key, 1);",
          "    assert_eq!(entries.get(1).unwrap().key, 2);",
          "    assert_eq!(entries.get(2).unwrap().key, 3);",
          "    assert_eq!(entries.get(3).unwrap().key, 4);",
          "    assert_eq!(entries.get(4).unwrap().key, 5);",
          "    assert!(indices.iter().all(|&i| i != 0));"
        ],
        "code": [
          "{",
          "    let mut indices: hash_table::HashTable<usize> = hash_table::HashTable::default();",
          "    indices.insert(5);",
          "    indices.insert(6);",
          "    let mut entries: Vec<Bucket<i32, i32>> = vec![",
          "        Bucket { hash: HashValue(0), key: 1, value: 10 },",
          "        Bucket { hash: HashValue(1), key: 2, value: 20 },",
          "        Bucket { hash: HashValue(2), key: 3, value: 30 },",
          "        Bucket { hash: HashValue(3), key: 4, value: 40 },",
          "        Bucket { hash: HashValue(4), key: 5, value: 50 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    assert_eq!(indices.len(), 2);",
          "    assert!(indices.contains(&5));",
          "    assert!(indices.contains(&6));",
          "    assert_eq!(entries[0].hash.0, 0);",
          "    assert_eq!(entries[1].hash.0, 1);",
          "    assert_eq!(entries[2].hash.0, 2);",
          "    assert_eq!(entries[3].hash.0, 3);",
          "    assert_eq!(entries[4].hash.0, 4);",
          "    assert_eq!(entries.get(0).unwrap().key, 1);",
          "    assert_eq!(entries.get(1).unwrap().key, 2);",
          "    assert_eq!(entries.get(2).unwrap().key, 3);",
          "    assert_eq!(entries.get(3).unwrap().key, 4);",
          "    assert_eq!(entries.get(4).unwrap().key, 5);",
          "    assert!(indices.iter().all(|&i| i != 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]