[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(2, 0);",
          "    indices.insert(3, 1);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue(2), key: \"key2\", value: \"value2\" },",
          "        Bucket { hash: HashValue(3), key: \"key3\", value: \"value3\" },",
          "        Bucket { hash: HashValue(4), key: \"key4\", value: \"value4\" },",
          "        Bucket { hash: HashValue(5), key: \"key5\", value: \"value5\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(1, 4);",
          "}"
        ],
        "oracle": [
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(2, 0);",
          "    indices.insert(3, 1);",
          "    let mut entries = vec![",
          "    Bucket { hash: HashValue(1), key: \"key1\", value: \"value1\" },",
          "    Bucket { hash: HashValue(2), key: \"key2\", value: \"value2\" },",
          "    Bucket { hash: HashValue(3), key: \"key3\", value: \"value3\" },",
          "    Bucket { hash: HashValue(4), key: \"key4\", value: \"value4\" },",
          "    Bucket { hash: HashValue(5), key: \"key5\", value: \"value5\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(1, 4);",
          "    assert_eq!(indices.get(&HashValue(2).0), None);",
          "    assert_eq!(indices.get(&HashValue(3).0), Some(&0));",
          "    assert_eq!(entries[0].key, \"key1\");",
          "    assert_eq!(entries[1].key, \"key2\");",
          "    assert_eq!(entries[2].key, \"key3\");",
          "    assert_eq!(entries[3].key, \"key4\");",
          "    assert_eq!(entries[4].key, \"key5\");",
          "    assert_eq!(indices.len(), 2);",
          "    assert!(entries.len() > 0);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(2, 0);",
          "    indices.insert(3, 1);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(1), key: \"key1\", value: \"value1\" },",
          "        Bucket { hash: HashValue(2), key: \"key2\", value: \"value2\" },",
          "        Bucket { hash: HashValue(3), key: \"key3\", value: \"value3\" },",
          "        Bucket { hash: HashValue(4), key: \"key4\", value: \"value4\" },",
          "        Bucket { hash: HashValue(5), key: \"key5\", value: \"value5\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(1, 4);",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(2, 0);",
          "    indices.insert(3, 1);",
          "    let mut entries = vec![",
          "    Bucket { hash: HashValue(1), key: \"key1\", value: \"value1\" },",
          "    Bucket { hash: HashValue(2), key: \"key2\", value: \"value2\" },",
          "    Bucket { hash: HashValue(3), key: \"key3\", value: \"value3\" },",
          "    Bucket { hash: HashValue(4), key: \"key4\", value: \"value4\" },",
          "    Bucket { hash: HashValue(5), key: \"key5\", value: \"value5\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(1, 4);",
          "    assert_eq!(indices.get(&HashValue(2).0), None);",
          "    assert_eq!(indices.get(&HashValue(3).0), Some(&0));",
          "    assert_eq!(entries[0].key, \"key1\");",
          "    assert_eq!(entries[1].key, \"key2\");",
          "    assert_eq!(entries[2].key, \"key3\");",
          "    assert_eq!(entries[3].key, \"key4\");",
          "    assert_eq!(entries[4].key, \"key5\");",
          "    assert_eq!(indices.len(), 2);",
          "    assert!(entries.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(3, 0);",
          "    indices.insert(4, 1);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(6), key: \"key6\", value: \"value6\" },",
          "        Bucket { hash: HashValue(7), key: \"key7\", value: \"value7\" },",
          "        Bucket { hash: HashValue(8), key: \"key8\", value: \"value8\" },",
          "        Bucket { hash: HashValue(9), key: \"key9\", value: \"value9\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 3);",
          "}"
        ],
        "oracle": [
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(3, 0);",
          "    indices.insert(4, 1);",
          "    let mut entries = vec![",
          "    Bucket { hash: HashValue(6), key: \"key6\", value: \"value6\" },",
          "    Bucket { hash: HashValue(7), key: \"key7\", value: \"value7\" },",
          "    Bucket { hash: HashValue(8), key: \"key8\", value: \"value8\" },",
          "    Bucket { hash: HashValue(9), key: \"key9\", value: \"value9\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    assert_eq!(indices.len(), 2);",
          "    ref_mut.decrement_indices(0, 3);",
          "    assert_eq!(indices.get(&HashValue(6).get()).is_none(), true);",
          "    assert_eq!(indices.get(&HashValue(7).get()).is_none(), true);",
          "    assert_eq!(indices.get(&HashValue(8).get()).is_none(), true);",
          "    assert_eq!(indices.get(&HashValue(9).get()).is_none(), true);",
          "    assert_eq!(indices.capacity(), 2);",
          "    assert_eq!(entries.len(), 4);",
          "    assert_eq!(entries[0].key, \"key6\");",
          "    assert_eq!(entries[1].key, \"key7\");",
          "    assert_eq!(entries[2].key, \"key8\");",
          "    assert_eq!(entries[3].key, \"key9\");"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(3, 0);",
          "    indices.insert(4, 1);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(6), key: \"key6\", value: \"value6\" },",
          "        Bucket { hash: HashValue(7), key: \"key7\", value: \"value7\" },",
          "        Bucket { hash: HashValue(8), key: \"key8\", value: \"value8\" },",
          "        Bucket { hash: HashValue(9), key: \"key9\", value: \"value9\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 3);",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(3, 0);",
          "    indices.insert(4, 1);",
          "    let mut entries = vec![",
          "    Bucket { hash: HashValue(6), key: \"key6\", value: \"value6\" },",
          "    Bucket { hash: HashValue(7), key: \"key7\", value: \"value7\" },",
          "    Bucket { hash: HashValue(8), key: \"key8\", value: \"value8\" },",
          "    Bucket { hash: HashValue(9), key: \"key9\", value: \"value9\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    assert_eq!(indices.len(), 2);",
          "    ref_mut.decrement_indices(0, 3);",
          "    assert_eq!(indices.get(&HashValue(6).get()).is_none(), true);",
          "    assert_eq!(indices.get(&HashValue(7).get()).is_none(), true);",
          "    assert_eq!(indices.get(&HashValue(8).get()).is_none(), true);",
          "    assert_eq!(indices.get(&HashValue(9).get()).is_none(), true);",
          "    assert_eq!(indices.capacity(), 2);",
          "    assert_eq!(entries.len(), 4);",
          "    assert_eq!(entries[0].key, \"key6\");",
          "    assert_eq!(entries[1].key, \"key7\");",
          "    assert_eq!(entries[2].key, \"key8\");",
          "    assert_eq!(entries[3].key, \"key9\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(6, 0);",
          "    indices.insert(7, 1);",
          "    indices.insert(8, 2);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(10), key: \"key10\", value: \"value10\" },",
          "        Bucket { hash: HashValue(11), key: \"key11\", value: \"value11\" },",
          "        Bucket { hash: HashValue(12), key: \"key12\", value: \"value12\" },",
          "        Bucket { hash: HashValue(13), key: \"key13\", value: \"value13\" },",
          "        Bucket { hash: HashValue(14), key: \"key14\", value: \"value14\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "}"
        ],
        "oracle": [
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(6, 0);",
          "    indices.insert(7, 1);",
          "    indices.insert(8, 2);",
          "    let mut entries = vec![",
          "    Bucket { hash: HashValue(10), key: \"key10\", value: \"value10\" },",
          "    Bucket { hash: HashValue(11), key: \"key11\", value: \"value11\" },",
          "    Bucket { hash: HashValue(12), key: \"key12\", value: \"value12\" },",
          "    Bucket { hash: HashValue(13), key: \"key13\", value: \"value13\" },",
          "    Bucket { hash: HashValue(14), key: \"key14\", value: \"value14\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    ",
          "    assert_eq!(indices.get(&HashValue(10).get()).unwrap(), &-1);",
          "    assert_eq!(indices.get(&HashValue(11).get()).unwrap(), &0);",
          "    assert_eq!(indices.get(&HashValue(12).get()).unwrap(), &1);",
          "    assert_eq!(indices.get(&HashValue(13).get()).unwrap(), &2);",
          "    assert_eq!(indices.get(&HashValue(14).get()).unwrap(), &3);",
          "    assert!(!indices.contains_key(&(6)));",
          "    assert!(!indices.contains_key(&(7)));",
          "    assert!(!indices.contains_key(&(8)));"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(6, 0);",
          "    indices.insert(7, 1);",
          "    indices.insert(8, 2);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(10), key: \"key10\", value: \"value10\" },",
          "        Bucket { hash: HashValue(11), key: \"key11\", value: \"value11\" },",
          "        Bucket { hash: HashValue(12), key: \"key12\", value: \"value12\" },",
          "        Bucket { hash: HashValue(13), key: \"key13\", value: \"value13\" },",
          "        Bucket { hash: HashValue(14), key: \"key14\", value: \"value14\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(6, 0);",
          "    indices.insert(7, 1);",
          "    indices.insert(8, 2);",
          "    let mut entries = vec![",
          "    Bucket { hash: HashValue(10), key: \"key10\", value: \"value10\" },",
          "    Bucket { hash: HashValue(11), key: \"key11\", value: \"value11\" },",
          "    Bucket { hash: HashValue(12), key: \"key12\", value: \"value12\" },",
          "    Bucket { hash: HashValue(13), key: \"key13\", value: \"value13\" },",
          "    Bucket { hash: HashValue(14), key: \"key14\", value: \"value14\" },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    ",
          "    assert_eq!(indices.get(&HashValue(10).get()).unwrap(), &-1);",
          "    assert_eq!(indices.get(&HashValue(11).get()).unwrap(), &0);",
          "    assert_eq!(indices.get(&HashValue(12).get()).unwrap(), &1);",
          "    assert_eq!(indices.get(&HashValue(13).get()).unwrap(), &2);",
          "    assert_eq!(indices.get(&HashValue(14).get()).unwrap(), &3);",
          "    assert!(!indices.contains_key(&(6)));",
          "    assert!(!indices.contains_key(&(7)));",
          "    assert!(!indices.contains_key(&(8)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(5, 0);",
          "    indices.insert(6, 1);",
          "    indices.insert(7, 2);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(15), key: \"key15\", value: \"value15\" },",
          "        Bucket { hash: HashValue(16), key: \"key16\", value: \"value16\" },",
          "        Bucket { hash: HashValue(17), key: \"key17\", value: \"value17\" },",
          "        Bucket { hash: HashValue(18), key: \"key18\", value: \"value18\" },",
          "        Bucket { hash: HashValue(19), key: \"key19\", value: \"value19\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(indices.find_mut(5), None);",
          "    assert_eq!(indices.find_mut(6), Some(&mut 5));",
          "    assert_eq!(indices.find_mut(7), Some(&mut 6));",
          "    assert_eq!(entries[0].hash, HashValue(15));",
          "    assert_eq!(entries[1].hash, HashValue(16));",
          "    assert_eq!(entries[2].hash, HashValue(17));",
          "    assert_eq!(entries[3].hash, HashValue(18));",
          "    assert_eq!(entries[4].hash, HashValue(19));"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    indices.insert(5, 0);",
          "    indices.insert(6, 1);",
          "    indices.insert(7, 2);",
          "    let mut entries = vec![",
          "        Bucket { hash: HashValue(15), key: \"key15\", value: \"value15\" },",
          "        Bucket { hash: HashValue(16), key: \"key16\", value: \"value16\" },",
          "        Bucket { hash: HashValue(17), key: \"key17\", value: \"value17\" },",
          "        Bucket { hash: HashValue(18), key: \"key18\", value: \"value18\" },",
          "        Bucket { hash: HashValue(19), key: \"key19\", value: \"value19\" },",
          "    ];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 4);",
          "    assert_eq!(indices.find_mut(5), None);",
          "    assert_eq!(indices.find_mut(6), Some(&mut 5));",
          "    assert_eq!(indices.find_mut(7), Some(&mut 6));",
          "    assert_eq!(entries[0].hash, HashValue(15));",
          "    assert_eq!(entries[1].hash, HashValue(16));",
          "    assert_eq!(entries[2].hash, HashValue(17));",
          "    assert_eq!(entries[3].hash, HashValue(18));",
          "    assert_eq!(entries[4].hash, HashValue(19));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]