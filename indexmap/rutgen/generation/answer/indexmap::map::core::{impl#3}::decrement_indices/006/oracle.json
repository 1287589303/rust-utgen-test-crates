[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 0);",
          "}"
        ],
        "oracle": [
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 0);",
          "    assert_eq!(indices.len(), 0);",
          "    assert_eq!(entries.len(), 0);",
          "    assert!(indices.is_empty());",
          "    assert!(entries.is_empty());"
        ],
        "code": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 0);",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 0);",
          "    assert_eq!(indices.len(), 0);",
          "    assert_eq!(entries.len(), 0);",
          "    assert!(indices.is_empty());",
          "    assert!(entries.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::with_capacity(100);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![Bucket { hash: HashValue(1), key: 0, value: 0 }; 50];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 50);",
          "}"
        ],
        "oracle": [
          "    assert!(indices.len() == 0);",
          "    assert!(entries[0..50] == vec![Bucket { hash: HashValue(1), key: 0, value: 0 }; 50]);",
          "    assert!(entries.len() == 50);",
          "    assert!(ref_mut.indices.capacity() >= 100);",
          "    assert!(ref_mut.indices.is_empty() == true);",
          "    assert!(ref_mut.entries[0].key == 0);",
          "    assert!(ref_mut.entries[0].value == 0);",
          "    assert!(ref_mut.entries[49].key == 0);",
          "    assert!(ref_mut.entries[49].value == 0);"
        ],
        "code": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::with_capacity(100);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![Bucket { hash: HashValue(1), key: 0, value: 0 }; 50];",
          "    ",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 50);",
          "    assert!(indices.len() == 0);",
          "    assert!(entries[0..50] == vec![Bucket { hash: HashValue(1), key: 0, value: 0 }; 50]);",
          "    assert!(entries.len() == 50);",
          "    assert!(ref_mut.indices.capacity() >= 100);",
          "    assert!(ref_mut.indices.is_empty() == true);",
          "    assert!(ref_mut.entries[0].key == 0);",
          "    assert!(ref_mut.entries[0].value == 0);",
          "    assert!(ref_mut.entries[49].key == 0);",
          "    assert!(ref_mut.entries[49].value == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::with_capacity(100);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![Bucket { hash: HashValue(1), key: 0, value: 0 }; 50];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 50);",
          "}"
        ],
        "oracle": [
          "    assert!(ref_mut.indices.is_empty());",
          "    assert_eq!(ref_mut.entries[0].hash, HashValue(1));",
          "    for i in 0..50 {",
          "    assert_eq!(ref_mut.entries[i].key, i);",
          "    assert_eq!(ref_mut.entries[i].value, i);",
          "    }",
          "    assert!(!ref_mut.indices.iter().any(|&i| i == 49));"
        ],
        "code": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::with_capacity(100);",
          "    let mut entries: Vec<Bucket<usize, usize>> = vec![Bucket { hash: HashValue(1), key: 0, value: 0 }; 50];",
          "",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 50);",
          "    assert!(ref_mut.indices.is_empty());",
          "    assert_eq!(ref_mut.entries[0].hash, HashValue(1));",
          "    for i in 0..50 {",
          "    assert_eq!(ref_mut.entries[i].key, i);",
          "    assert_eq!(ref_mut.entries[i].value, i);",
          "    }",
          "    assert!(!ref_mut.indices.iter().any(|&i| i == 49));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]