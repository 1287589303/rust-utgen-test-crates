[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    let mut entries: Entries<usize, usize> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "}"
        ],
        "oracle": [
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    let mut entries: Entries<usize, usize> = vec![Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "    Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "    Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "    Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "    Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "    Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "    Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "    Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "    Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "    Bucket { hash: HashValue(9), key: 9, value: 9 }];",
          "    ",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    assert_eq!(indices.len(), 10);",
          "    assert!(indices.contains(&0));",
          "    assert!(indices.contains(&1));",
          "    assert!(indices.contains(&2));",
          "    assert!(indices.contains(&3));",
          "    assert!(indices.contains(&4));",
          "    assert!(!indices.contains(&5));",
          "    assert!(indices.contains(&6));",
          "    assert!(indices.contains(&7));",
          "    assert!(indices.contains(&8));",
          "    assert!(indices.contains(&9));"
        ],
        "code": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    let mut entries: Entries<usize, usize> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    let mut entries: Entries<usize, usize> = vec![Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "    Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "    Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "    Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "    Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "    Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "    Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "    Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "    Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "    Bucket { hash: HashValue(9), key: 9, value: 9 }];",
          "    ",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(0, 5);",
          "    assert_eq!(indices.len(), 10);",
          "    assert!(indices.contains(&0));",
          "    assert!(indices.contains(&1));",
          "    assert!(indices.contains(&2));",
          "    assert!(indices.contains(&3));",
          "    assert!(indices.contains(&4));",
          "    assert!(!indices.contains(&5));",
          "    assert!(indices.contains(&6));",
          "    assert!(indices.contains(&7));",
          "    assert!(indices.contains(&8));",
          "    assert!(indices.contains(&9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 10]);",
          "    let mut entries: Entries<usize, usize> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(5, 10);",
          "}"
        ],
        "oracle": [
          "    let indices = hash_table::HashTable::new();",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 10]);",
          "    let entries = vec![",
          "    Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "    Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "    Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "    Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "    Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "    Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "    Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "    Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "    Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "    Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(5, 10);",
          "    assert_eq!(indices.as_entries(), vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    assert_eq!(entries.len(), 10);",
          "    assert!(indices.find_mut(HashValue(10).get(), |&i| i == 10).is_none());",
          "    assert!(indices.find_mut(HashValue(9).get(), |&i| i == 9).is_some());"
        ],
        "code": [
          "{",
          "    let mut indices: Indices = hash_table::HashTable::new();",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 10]);",
          "    let mut entries: Entries<usize, usize> = vec![",
          "        Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "        Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "        Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "        Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "        Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "        Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "        Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "        Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "        Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "        Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(5, 10);",
          "    let indices = hash_table::HashTable::new();",
          "    indices.extend(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 10]);",
          "    let entries = vec![",
          "    Bucket { hash: HashValue(0), key: 0, value: 0 },",
          "    Bucket { hash: HashValue(1), key: 1, value: 1 },",
          "    Bucket { hash: HashValue(2), key: 2, value: 2 },",
          "    Bucket { hash: HashValue(3), key: 3, value: 3 },",
          "    Bucket { hash: HashValue(4), key: 4, value: 4 },",
          "    Bucket { hash: HashValue(5), key: 5, value: 5 },",
          "    Bucket { hash: HashValue(6), key: 6, value: 6 },",
          "    Bucket { hash: HashValue(7), key: 7, value: 7 },",
          "    Bucket { hash: HashValue(8), key: 8, value: 8 },",
          "    Bucket { hash: HashValue(9), key: 9, value: 9 },",
          "    ];",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    ref_mut.decrement_indices(5, 10);",
          "    assert_eq!(indices.as_entries(), vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    assert_eq!(entries.len(), 10);",
          "    assert!(indices.find_mut(HashValue(10).get(), |&i| i == 10).is_none());",
          "    assert!(indices.find_mut(HashValue(9).get(), |&i| i == 9).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]