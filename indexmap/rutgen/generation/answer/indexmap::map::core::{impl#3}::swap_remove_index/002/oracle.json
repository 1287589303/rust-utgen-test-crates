[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = usize::MAX; // Out of bounds",
          "    let result = ref_mut.swap_remove_index(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = usize::MAX; // Out of bounds",
          "    let result = ref_mut.swap_remove_index(index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = entries.len(); // Index equals length of entries, which is out of bounds",
          "    let result = ref_mut.swap_remove_index(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut indices = hash_table::HashTable::new();",
          "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
          "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
          "    let index = entries.len(); // Index equals length of entries, which is out of bounds",
          "    let result = ref_mut.swap_remove_index(index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]