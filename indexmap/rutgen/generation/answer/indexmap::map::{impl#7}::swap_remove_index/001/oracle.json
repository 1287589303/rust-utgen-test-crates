[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    let result = map.swap_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    let result = map.swap_remove_index(0); assert_eq!(result, Some((TestK(1), TestV(10))));  // Test valid index at 0",
          "    let result = map.swap_remove_index(0); assert_eq!(result, None);  // Test removal from empty map",
          "    map.insert(TestK(2), TestV(20));",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1); assert_eq!(result, Some((TestK(2), TestV(20))));  // Test valid index at 1",
          "    let result = map.swap_remove_index(0); assert_eq!(result, Some((TestK(3), TestV(30))));  // Test valid index at 0 after previous removal",
          "    let result = map.swap_remove_index(2); assert_eq!(result, None);  // Test out-of-bounds index",
          "    map.insert(TestK(4), TestV(40));",
          "    map.insert(TestK(5), TestV(50));",
          "    let result = map.swap_remove_index(1); assert_eq!(result, Some((TestK(4), TestV(40))));  // Test valid index after previous removals"
        ],
        "code": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    let result = map.swap_remove_index(0);",
          "    let result = map.swap_remove_index(0); assert_eq!(result, Some((TestK(1), TestV(10))));  // Test valid index at 0",
          "    let result = map.swap_remove_index(0); assert_eq!(result, None);  // Test removal from empty map",
          "    map.insert(TestK(2), TestV(20));",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1); assert_eq!(result, Some((TestK(2), TestV(20))));  // Test valid index at 1",
          "    let result = map.swap_remove_index(0); assert_eq!(result, Some((TestK(3), TestV(30))));  // Test valid index at 0 after previous removal",
          "    let result = map.swap_remove_index(2); assert_eq!(result, None);  // Test out-of-bounds index",
          "    map.insert(TestK(4), TestV(40));",
          "    map.insert(TestK(5), TestV(50));",
          "    let result = map.swap_remove_index(1); assert_eq!(result, Some((TestK(4), TestV(40))));  // Test valid index after previous removals",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    map.insert(TestK(2), TestV(20));",
          "    let result = map.swap_remove_index(map.len() - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((TestK(2), TestV(20))));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get_index(0).is_some());",
          "    assert_eq!(map.get_index(0), Some((&TestK(1), &TestV(10))));",
          "    let result_empty = map.swap_remove_index(0);",
          "    assert_eq!(result_empty, Some((TestK(1), TestV(10))));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.swap_remove_index(0).is_none());"
        ],
        "code": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    map.insert(TestK(2), TestV(20));",
          "    let result = map.swap_remove_index(map.len() - 1);",
          "    assert_eq!(result, Some((TestK(2), TestV(20))));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get_index(0).is_some());",
          "    assert_eq!(map.get_index(0), Some((&TestK(1), &TestV(10))));",
          "    let result_empty = map.swap_remove_index(0);",
          "    assert_eq!(result_empty, Some((TestK(1), TestV(10))));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.swap_remove_index(0).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    let result = map.swap_remove_index(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    let result = map.swap_remove_index(usize::MAX);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    let result = map.swap_remove_index(2);",
          "}"
        ],
        "oracle": [
          "    let map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    let result = map.swap_remove_index(2);",
          "    assert!(result.is_none());",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(TestK(2), TestV(20));",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1);",
          "    assert_eq!(result, Some((TestK(3), TestV(30))));",
          "    assert_eq!(map.len(), 2);",
          "    let result_out_of_bounds = map.swap_remove_index(5);",
          "    assert!(result_out_of_bounds.is_none());"
        ],
        "code": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    let result = map.swap_remove_index(2);",
          "    let map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    let result = map.swap_remove_index(2);",
          "    assert!(result.is_none());",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(TestK(2), TestV(20));",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1);",
          "    assert_eq!(result, Some((TestK(3), TestV(30))));",
          "    assert_eq!(map.len(), 2);",
          "    let result_out_of_bounds = map.swap_remove_index(5);",
          "    assert!(result_out_of_bounds.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    map.insert(TestK(2), TestV(20));",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((TestK(2), TestV(20))));",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.get_index(1), Some((&TestK(3), &TestV(30))));",
          "    assert_eq!(map.get_index(0), Some((&TestK(1), &TestV(10))));",
          "    assert!(map.get_index(2).is_none());"
        ],
        "code": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    map.insert(TestK(1), TestV(10));",
          "    map.insert(TestK(2), TestV(20));",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1);",
          "    assert_eq!(result, Some((TestK(2), TestV(20))));",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.get_index(1), Some((&TestK(3), &TestV(30))));",
          "    assert_eq!(map.get_index(0), Some((&TestK(1), &TestV(10))));",
          "    assert!(map.get_index(2).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    let result = map.swap_remove_index(0);",
          "}"
        ],
        "oracle": [
          "    let map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    assert_eq!(map.len(), 0);",
          "    let result = map.swap_remove_index(0);",
          "    assert!(result.is_none());",
          "    let insert_key = TestK(1);",
          "    let insert_value = TestV(10);",
          "    map.insert(insert_key, insert_value);",
          "    let result = map.swap_remove_index(0);",
          "    assert_eq!(result, Some((TestK(1), TestV(10))));",
          "    assert_eq!(map.len(), 0);",
          "    let result = map.swap_remove_index(0);",
          "    assert!(result.is_none());",
          "    let insert_key_2 = TestK(2);",
          "    let insert_value_2 = TestV(20);",
          "    map.insert(insert_key_2, insert_value_2);",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1);",
          "    assert_eq!(result, Some((TestK(3), TestV(30))));",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    struct TestK(u32);",
          "    struct TestV(u32);",
          "    let mut map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    let result = map.swap_remove_index(0);",
          "    let map = IndexMap::<TestK, TestV, RandomState>::new();",
          "    assert_eq!(map.len(), 0);",
          "    let result = map.swap_remove_index(0);",
          "    assert!(result.is_none());",
          "    let insert_key = TestK(1);",
          "    let insert_value = TestV(10);",
          "    map.insert(insert_key, insert_value);",
          "    let result = map.swap_remove_index(0);",
          "    assert_eq!(result, Some((TestK(1), TestV(10))));",
          "    assert_eq!(map.len(), 0);",
          "    let result = map.swap_remove_index(0);",
          "    assert!(result.is_none());",
          "    let insert_key_2 = TestK(2);",
          "    let insert_value_2 = TestV(20);",
          "    map.insert(insert_key_2, insert_value_2);",
          "    map.insert(TestK(3), TestV(30));",
          "    let result = map.swap_remove_index(1);",
          "    assert_eq!(result, Some((TestK(3), TestV(30))));",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]