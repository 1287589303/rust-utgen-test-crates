{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/libc-2480f8b345c68cc9/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/libc-384c7caf153dd45a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblibc-78e719d219e56f98.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblibc-78e719d219e56f98.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libcfg_if-57bf25c23e31efdb.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libcfg_if-57bf25c23e31efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/zerocopy-e2dcbf5d140aef67/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/getrandom-4537a21348276e8e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/proc-macro2-0c3d45c0079797c8/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/getrandom-a92d17dcd104f758/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/zerocopy-022e340a2c34a89a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libunicode_ident-926027468c5cecb0.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libunicode_ident-926027468c5cecb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-75fcf3dd4af70ab5.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-75fcf3dd4af70ab5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","use_std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libeither-1d89dc1ba1a1ecd5.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libeither-1d89dc1ba1a1ecd5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libequivalent-bf738b088bb070ea.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libequivalent-bf738b088bb070ea.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libhashbrown-fa53149ffb38b2f5.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libhashbrown-fa53149ffb38b2f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblazy_static-7af2f34f8b124b26.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblazy_static-7af2f34f8b124b26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libfnv-574dedeaa4c89e1d.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libfnv-574dedeaa4c89e1d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/proc-macro2-3bfb6d3b5c679c6f/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libzerocopy-85026333d1a1561f.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libzerocopy-85026333d1a1561f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["getrandom"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-b7248ee897f10b1f.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-b7248ee897f10b1f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.14.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libitertools-de2dd384cdf232cc.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libitertools-de2dd384cdf232cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libproc_macro2-266ccd2fb7e5af8f.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libproc_macro2-266ccd2fb7e5af8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-c85e947e1719e143.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-c85e947e1719e143.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["getrandom","small_rng"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-0022b9eefbf2b05a.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-0022b9eefbf2b05a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.39","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquote-ba51b6359bb907e7.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquote-ba51b6359bb907e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_chacha-6290e3ba04a0fbd3.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_chacha-6290e3ba04a0fbd3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quickcheck@1.0.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quickcheck-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quickcheck","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quickcheck-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquickcheck-38d9a8900d2195aa.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquickcheck-38d9a8900d2195aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","derive","parsing","printing","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libsyn-43438f6056661991.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libsyn-43438f6056661991.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-353b58b3ca393991.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-353b58b3ca393991.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libserde_derive-695cd9417736ebe1.so"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `default` found for struct `HashValue` in the current scope\n   --> src/set/slice.rs:389:43\n    |\n389 |    let bucket = Bucket { hash: HashValue::default(), key: 1, value: \"a\" }; // Bucket with default hash value\n    |                                           ^^^^^^^ function or associated item not found in `HashValue`\n    |\n   ::: src/lib.rs:140:1\n    |\n140 | struct HashValue(usize);\n    | ---------------- function or associated item `default` not found for this struct\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `default`, perhaps you need to implement it:\n            candidate #1: `Default`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the following trait defines an item `default`, perhaps you need to implement it:\ncandidate #1: `Default`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `default` found for struct `HashValue` in the current scope","spans":[{"byte_end":10968,"byte_start":10961,"column_end":50,"column_start":43,"expansion":null,"file_name":"src/set/slice.rs","is_primary":true,"label":"function or associated item not found in `HashValue`","line_end":389,"line_start":389,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":43,"text":"   let bucket = Bucket { hash: HashValue::default(), key: 1, value: \"a\" }; // Bucket with default hash value"}]},{"byte_end":5437,"byte_start":5421,"column_end":17,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"function or associated item `default` not found for this struct","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"struct HashValue(usize);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/set/slice.rs:389:69\n    |\n389 |    let bucket = Bucket { hash: HashValue::default(), key: 1, value: \"a\" }; // Bucket with default hash value\n    |                                                                     ^^^ expected `()`, found `&str`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":10990,"byte_start":10987,"column_end":72,"column_start":69,"expansion":null,"file_name":"src/set/slice.rs","is_primary":true,"label":"expected `()`, found `&str`","line_end":389,"line_start":389,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":69,"text":"   let bucket = Bucket { hash: HashValue::default(), key: 1, value: \"a\" }; // Bucket with default hash value"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/set/slice.rs:390:59\n    |\n390 |    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [bucket] }); \n    |                                                           ^^^^^^^^ expected `[Bucket<{integer}, ()>]`, found `[Bucket<{integer}, ()>; 1]`\n    |\n    = note: expected slice `[Bucket<{integer}, ()>]`\n               found array `[Bucket<{integer}, ()>; 1]`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected slice `[Bucket<{integer}, ()>]`\n   found array `[Bucket<{integer}, ()>; 1]`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":11094,"byte_start":11086,"column_end":67,"column_start":59,"expansion":null,"file_name":"src/set/slice.rs","is_primary":true,"label":"expected `[Bucket<{integer}, ()>]`, found `[Bucket<{integer}, ()>; 1]`","line_end":390,"line_start":390,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":59,"text":"   let slice: Box<Slice<u32>> = Box::new(Slice { entries: [bucket] }); "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the size for values of type `[Bucket<{integer}, ()>]` cannot be known at compilation time\n   --> src/set/slice.rs:390:42\n    |\n390 |    let slice: Box<Slice<u32>> = Box::new(Slice { entries: [bucket] }); \n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `set::slice::Slice<{integer}>`, the trait `Sized` is not implemented for `[Bucket<{integer}, ()>]`, which is required by `set::slice::Slice<{integer}>: Sized`\nnote: required because it appears within the type `set::slice::Slice<{integer}>`\n   --> src/set/slice.rs:19:12\n    |\n19  | pub struct Slice<T> {\n    |            ^^^^^\n    = note: structs must have a statically known size to be initialized\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `set::slice::Slice<{integer}>`, the trait `Sized` is not implemented for `[Bucket<{integer}, ()>]`, which is required by `set::slice::Slice<{integer}>: Sized`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `set::slice::Slice<{integer}>`","rendered":null,"spans":[{"byte_end":640,"byte_start":635,"column_end":17,"column_start":12,"expansion":null,"file_name":"src/set/slice.rs","is_primary":true,"label":null,"line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"pub struct Slice<T> {"}]}]},{"children":[],"code":null,"level":"note","message":"structs must have a statically known size to be initialized","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the size for values of type `[Bucket<{integer}, ()>]` cannot be known at compilation time","spans":[{"byte_end":11096,"byte_start":11069,"column_end":69,"column_start":42,"expansion":null,"file_name":"src/set/slice.rs","is_primary":true,"label":"doesn't have a size known at compile-time","line_end":390,"line_start":390,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":42,"text":"   let slice: Box<Slice<u32>> = Box::new(Slice { entries: [bucket] }); "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 4 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 4 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0277, E0308, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0277, E0308, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
