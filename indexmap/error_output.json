{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/libc-2480f8b345c68cc9/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/libc-384c7caf153dd45a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblibc-78e719d219e56f98.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblibc-78e719d219e56f98.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libcfg_if-57bf25c23e31efdb.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libcfg_if-57bf25c23e31efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/zerocopy-e2dcbf5d140aef67/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/proc-macro2-0c3d45c0079797c8/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/getrandom-4537a21348276e8e/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/zerocopy-022e340a2c34a89a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libunicode_ident-926027468c5cecb0.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libunicode_ident-926027468c5cecb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-75fcf3dd4af70ab5.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-75fcf3dd4af70ab5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","use_std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libeither-1d89dc1ba1a1ecd5.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libeither-1d89dc1ba1a1ecd5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libhashbrown-fa53149ffb38b2f5.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libhashbrown-fa53149ffb38b2f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libfnv-574dedeaa4c89e1d.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libfnv-574dedeaa4c89e1d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblazy_static-7af2f34f8b124b26.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/liblazy_static-7af2f34f8b124b26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libequivalent-bf738b088bb070ea.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libequivalent-bf738b088bb070ea.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/proc-macro2-3bfb6d3b5c679c6f/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/build/getrandom-a92d17dcd104f758/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libzerocopy-85026333d1a1561f.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libzerocopy-85026333d1a1561f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["getrandom"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-b7248ee897f10b1f.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-b7248ee897f10b1f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.14.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libitertools-de2dd384cdf232cc.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libitertools-de2dd384cdf232cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libproc_macro2-266ccd2fb7e5af8f.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libproc_macro2-266ccd2fb7e5af8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["getrandom","small_rng"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-0022b9eefbf2b05a.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-0022b9eefbf2b05a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-c85e947e1719e143.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_core-c85e947e1719e143.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.39","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquote-ba51b6359bb907e7.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquote-ba51b6359bb907e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quickcheck@1.0.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quickcheck-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quickcheck","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quickcheck-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquickcheck-38d9a8900d2195aa.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libquickcheck-38d9a8900d2195aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","derive","parsing","printing","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libsyn-43438f6056661991.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libsyn-43438f6056661991.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_chacha-6290e3ba04a0fbd3.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand_chacha-6290e3ba04a0fbd3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-353b58b3ca393991.rlib","/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/librand-353b58b3ca393991.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/abezbm/rust-utgen-test-crates/indexmap/target/debug/deps/libserde_derive-695cd9417736ebe1.so"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:92:19\n   |\n92 |    simplify_range(range, len);\n   |    -------------- ^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`\n   |    |\n   |    required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":2531,"byte_start":2526,"column_end":24,"column_start":19,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":19,"text":"   simplify_range(range, len);"}]},{"byte_end":2525,"byte_start":2511,"column_end":18,"column_start":4,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":92,"line_start":92,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":4,"text":"   simplify_range(range, len);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:93:30\n   |\n93 |    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, len), 0..1);\n   |               -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`\n   |               |\n   |               required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":2626,"byte_start":2568,"column_end":88,"column_start":30,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`","line_end":93,"line_start":93,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":88,"highlight_start":30,"text":"   assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, len), 0..1);"}]},{"byte_end":2567,"byte_start":2553,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":93,"line_start":93,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"   assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(0) }, len), 0..1);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<usize>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:94:30\n   |\n94 |    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(len) }, len), 0..2);\n   |               -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<usize>>`\n   |               |\n   |               required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<usize>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":2730,"byte_start":2670,"column_end":90,"column_start":30,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<usize>>`","line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":90,"highlight_start":30,"text":"   assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(len) }, len), 0..2);"}]},{"byte_end":2669,"byte_start":2655,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":94,"line_start":94,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"   assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Included(len) }, len), 0..2);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<usize>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:95:30\n   |\n95 |    assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(len) }, len), 0..1);\n   |               -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<usize>>`\n   |               |\n   |               required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<usize>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":2834,"byte_start":2774,"column_end":90,"column_start":30,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<usize>>`","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":90,"highlight_start":30,"text":"   assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(len) }, len), 0..1);"}]},{"byte_end":2773,"byte_start":2759,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":95,"line_start":95,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"   assert_eq!(simplify_range(Range { start: Bound::Unbounded, end: Bound::Excluded(len) }, len), 0..1);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:96:55\n   |\n96 |    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Included(0) }, len)).is_err());\n   |                                        -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`\n   |                                        |\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":2963,"byte_start":2903,"column_end":115,"column_start":55,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":55,"text":"   assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Included(0) }, len)).is_err());"}]},{"byte_end":2902,"byte_start":2888,"column_end":54,"column_start":40,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":40,"text":"   assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(1), end: Bound::Included(0) }, len)).is_err());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:97:55\n   |\n97 |    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Included(0) }, len)).is_err());\n   |                                        -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`\n   |                                        |\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":3096,"byte_start":3036,"column_end":115,"column_start":55,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":55,"text":"   assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Included(0) }, len)).is_err());"}]},{"byte_end":3035,"byte_start":3021,"column_end":54,"column_start":40,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":40,"text":"   assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Included(0), end: Bound::Included(0) }, len)).is_err());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied\n  --> src/util.rs:98:55\n   |\n98 |    assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, len)).is_err());\n   |                                        -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`\n   |                                        |\n   |                                        required by a bound introduced by this call\n   |\n   = help: the following other types implement trait `RangeBounds<T>`:\n             core::ops::Range<&T>\n             core::ops::Range<T>\nnote: required by a bound in `util::simplify_range`\n  --> src/util.rs:10:8\n   |\n8  | pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>\n   |               -------------- required by a bound in this function\n9  | where\n10 |     R: RangeBounds<usize>,\n   |        ^^^^^^^^^^^^^^^^^^ required by this bound in `simplify_range`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `RangeBounds<T>`:\n  core::ops::Range<&T>\n  core::ops::Range<T>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `util::simplify_range`","rendered":null,"spans":[{"byte_end":150,"byte_start":136,"column_end":29,"column_start":15,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound in this function","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":15,"text":"pub(crate) fn simplify_range<R>(range: R, len: usize) -> Range<usize>"}]},{"byte_end":223,"byte_start":205,"column_end":26,"column_start":8,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"required by this bound in `simplify_range`","line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":8,"text":"    R: RangeBounds<usize>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `core::ops::Range<core::ops::Bound<{integer}>>: RangeBounds<usize>` is not satisfied","spans":[{"byte_end":3229,"byte_start":3169,"column_end":115,"column_start":55,"expansion":null,"file_name":"src/util.rs","is_primary":true,"label":"the trait `RangeBounds<usize>` is not implemented for `core::ops::Range<core::ops::Bound<{integer}>>`","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":115,"highlight_start":55,"text":"   assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, len)).is_err());"}]},{"byte_end":3168,"byte_start":3154,"column_end":54,"column_start":40,"expansion":null,"file_name":"src/util.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":98,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":40,"text":"   assert!(std::panic::catch_unwind(|| simplify_range(Range { start: Bound::Excluded(0), end: Bound::Included(1) }, len)).is_err());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 7 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 7 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/indexmap#2.7.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/indexmap/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/rust-utgen-test-crates/indexmap/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
