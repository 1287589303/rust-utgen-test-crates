{
  "name": "indexmap::map::core::raw_entry_v1::{impl#6}::or_insert_with",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:351:5:364:6",
  "doc": "/// Inserts the result of the `call` function in the entry if it is vacant and returns mutable\n/// references to them. Otherwise mutable references to an already existent pair are returned.\n",
  "code": [
    "pub fn or_insert_with<F>(self, call: F) -> (&'a mut K, &'a mut V)",
    "where",
    "    F: FnOnce() -> (K, V),",
    "    K: Hash,",
    "    S: BuildHasher,",
    "{",
    "    match self {",
    "        Self::Occupied(entry) => entry.into_key_value_mut(),",
    "        Self::Vacant(entry) => {",
    "            let (key, value) = call();",
    "            entry.insert(key, value)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Self::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 357,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Self::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 357,
          "bound": null
        },
        {
          "cond": "self matches Self::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 357,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}