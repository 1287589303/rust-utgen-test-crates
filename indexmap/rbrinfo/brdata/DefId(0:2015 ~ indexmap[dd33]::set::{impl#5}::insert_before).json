{
  "name": "indexmap::set::{impl#5}::insert_before",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:432:5:435:6",
  "doc": "/// Insert the value into the set before the value at the given index, or at the end.\n///\n/// If an equivalent item already exists in the set, it returns `false` leaving the\n/// original value in the set, but moved to the new position. The returned index\n/// will either be the given index or one less, depending on how the value moved.\n/// (See [`shift_insert`](Self::shift_insert) for different behavior here.)\n///\n/// Otherwise, it inserts the new value exactly at the given index and returns `true`.\n///\n/// ***Panics*** if `index` is out of bounds.\n/// Valid indices are `0..=set.len()` (inclusive).\n///\n/// Computes in **O(n)** time (average).\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexSet;\n/// let mut set: IndexSet<char> = ('a'..='z').collect();\n///\n/// // The new value '*' goes exactly at the given index.\n/// assert_eq!(set.get_index_of(&'*'), None);\n/// assert_eq!(set.insert_before(10, '*'), (10, true));\n/// assert_eq!(set.get_index_of(&'*'), Some(10));\n///\n/// // Moving the value 'a' up will shift others down, so this moves *before* 10 to index 9.\n/// assert_eq!(set.insert_before(10, 'a'), (9, false));\n/// assert_eq!(set.get_index_of(&'a'), Some(9));\n/// assert_eq!(set.get_index_of(&'*'), Some(10));\n///\n/// // Moving the value 'z' down will shift others up, so this moves to exactly 10.\n/// assert_eq!(set.insert_before(10, 'z'), (10, false));\n/// assert_eq!(set.get_index_of(&'z'), Some(10));\n/// assert_eq!(set.get_index_of(&'*'), Some(11));\n///\n/// // Moving or inserting before the endpoint is also valid.\n/// assert_eq!(set.len(), 27);\n/// assert_eq!(set.insert_before(set.len(), '*'), (26, false));\n/// assert_eq!(set.get_index_of(&'*'), Some(26));\n/// assert_eq!(set.insert_before(set.len(), '+'), (27, true));\n/// assert_eq!(set.get_index_of(&'+'), Some(27));\n/// assert_eq!(set.len(), 28);\n/// ```\n",
  "code": [
    "pub fn insert_before(&mut self, index: usize, value: T) -> (usize, bool) {",
    "    let (index, existing) = self.map.insert_before(index, value, ());",
    "    (index, existing.is_none())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(index, existing.is_none())",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}