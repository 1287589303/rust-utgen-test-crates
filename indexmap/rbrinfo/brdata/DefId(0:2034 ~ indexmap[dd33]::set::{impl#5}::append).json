{
  "name": "indexmap::set::{impl#5}::append",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:626:5:628:6",
  "doc": "/// Moves all values from `other` into `self`, leaving `other` empty.\n///\n/// This is equivalent to calling [`insert`][Self::insert] for each value\n/// from `other` in order, which means that values that already exist\n/// in `self` are unchanged in their current position.\n///\n/// See also [`union`][Self::union] to iterate the combined values by\n/// reference, without modifying `self` or `other`.\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexSet;\n///\n/// let mut a = IndexSet::from([3, 2, 1]);\n/// let mut b = IndexSet::from([3, 4, 5]);\n/// let old_capacity = b.capacity();\n///\n/// a.append(&mut b);\n///\n/// assert_eq!(a.len(), 5);\n/// assert_eq!(b.len(), 0);\n/// assert_eq!(b.capacity(), old_capacity);\n///\n/// assert!(a.iter().eq(&[3, 2, 1, 4, 5]));\n/// ```\n",
  "code": [
    "pub fn append<S2>(&mut self, other: &mut IndexSet<T, S2>) {",
    "    self.map.append(&mut other.map);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}