{
  "name": "indexmap::map::core::{impl#3}::shift_insert_unique",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": false,
  "loc": "src/map/core.rs:569:5:587:6",
  "doc": "/// Insert a key-value pair in `entries` at a particular index,\n/// *without* checking whether it already exists.\n",
  "code": [
    "fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {",
    "    let end = self.indices.len();",
    "    assert!(index <= end);",
    "    // Increment others first so we don't have duplicate indices.",
    "    self.increment_indices(index, end);",
    "    let entries = &*self.entries;",
    "    self.indices.insert_unique(hash.get(), index, move |&i| {",
    "        // Adjust for the incremented indices to find hashes.",
    "        debug_assert_ne!(i, index);",
    "        let i = if i < index { i } else { i - 1 };",
    "        entries[i].hash.get()",
    "    });",
    "    if self.entries.len() == self.entries.capacity() {",
    "        // Reserve our own capacity synced to the indices,",
    "        // rather than letting `Vec::insert` just double it.",
    "        self.reserve_entries(1);",
    "    }",
    "    self.entries.insert(index, Bucket { hash, key, value });",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "index <= end",
          "norm": "end >= index",
          "value": "true",
          "line": 571,
          "bound": "index == end"
        },
        {
          "cond": "self.entries.len() == self.entries.capacity()",
          "norm": "self.entries.capacity() == self.entries.len()",
          "value": "true",
          "line": 581,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "index <= end",
          "norm": "end >= index",
          "value": "true",
          "line": 571,
          "bound": "index == end"
        },
        {
          "cond": "self.entries.len() == self.entries.capacity()",
          "norm": "self.entries.capacity() == self.entries.len()",
          "value": "false",
          "line": 581,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "index <= end",
          "norm": "end >= index",
          "value": "false",
          "line": 571,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}