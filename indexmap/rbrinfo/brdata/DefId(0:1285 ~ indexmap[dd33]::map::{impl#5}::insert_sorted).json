{
  "name": "indexmap::map::{impl#5}::insert_sorted",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:440:5:448:6",
  "doc": "/// Insert a key-value pair in the map at its ordered position among sorted keys.\n///\n/// This is equivalent to finding the position with\n/// [`binary_search_keys`][Self::binary_search_keys], then either updating\n/// it or calling [`insert_before`][Self::insert_before] for a new key.\n///\n/// If the sorted key is found in the map, its corresponding value is\n/// updated with `value`, and the older value is returned inside\n/// `(index, Some(_))`. Otherwise, the new key-value pair is inserted at\n/// the sorted position, and `(index, None)` is returned.\n///\n/// If the existing keys are **not** already sorted, then the insertion\n/// index is unspecified (like [`slice::binary_search`]), but the key-value\n/// pair is moved to or inserted at that position regardless.\n///\n/// Computes in **O(n)** time (average). Instead of repeating calls to\n/// `insert_sorted`, it may be faster to call batched [`insert`][Self::insert]\n/// or [`extend`][Self::extend] and only call [`sort_keys`][Self::sort_keys]\n/// or [`sort_unstable_keys`][Self::sort_unstable_keys] once.\n",
  "code": [
    "pub fn insert_sorted(&mut self, key: K, value: V) -> (usize, Option<V>)",
    "where",
    "    K: Ord,",
    "{",
    "    match self.binary_search_keys(&key) {",
    "        Ok(i) => (i, Some(mem::replace(&mut self[i], value))),",
    "        Err(i) => self.insert_before(i, key, value),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.binary_search_keys(&key) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 444,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.binary_search_keys(&key) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 444,
          "bound": null
        },
        {
          "cond": "self.binary_search_keys(&key) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 444,
          "bound": null
        }
      ],
      "ret": "(i, Some(mem::replace(&mut self[i], value)))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}