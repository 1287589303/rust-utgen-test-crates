{
  "name": "indexmap::map::core::{impl#2}::try_reserve_exact",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:291:5:298:6",
  "doc": "/// Try to reserve capacity for `additional` more key-value pairs, without over-allocating.\n",
  "code": [
    "pub(crate) fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {",
    "    self.indices",
    "        .try_reserve(additional, get_hash(&self.entries))",
    "        .map_err(TryReserveError::from_hashbrown)?;",
    "    self.entries",
    "        .try_reserve_exact(additional)",
    "        .map_err(TryReserveError::from_alloc)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.indices\n            .try_reserve(additional, get_hash(&self.entries))\n            .map_err(TryReserveError::from_hashbrown)?",
          "norm": null,
          "value": "Err/None",
          "line": 292,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.indices\n            .try_reserve(additional, get_hash(&self.entries))\n            .map_err(TryReserveError::from_hashbrown)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 292,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}