{
  "name": "indexmap::map::core::raw_entry_v1::{impl#10}::shift_insert",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:632:5:640:6",
  "doc": "/// Inserts the given key and value into the map at the given index,\n/// shifting others to the right, and returns mutable references to them.\n///\n/// ***Panics*** if `index` is out of bounds.\n///\n/// Computes in **O(n)** time (average).\n",
  "code": [
    "pub fn shift_insert(self, index: usize, key: K, value: V) -> (&'a mut K, &'a mut V)",
    "where",
    "    K: Hash,",
    "    S: BuildHasher,",
    "{",
    "    let mut h = self.hash_builder.build_hasher();",
    "    key.hash(&mut h);",
    "    self.shift_insert_hashed_nocheck(index, h.finish(), key, value)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}