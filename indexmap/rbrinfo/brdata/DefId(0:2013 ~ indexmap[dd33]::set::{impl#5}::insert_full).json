{
  "name": "indexmap::set::{impl#5}::insert_full",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:357:5:360:6",
  "doc": "/// Insert the value into the set, and get its index.\n///\n/// If an equivalent item already exists in the set, it returns\n/// the index of the existing item and `false`, leaving the\n/// original value in the set and without altering its insertion\n/// order. Otherwise, it inserts the new item and returns the index\n/// of the inserted item and `true`.\n///\n/// Computes in **O(1)** time (amortized average).\n",
  "code": [
    "pub fn insert_full(&mut self, value: T) -> (usize, bool) {",
    "    let (index, existing) = self.map.insert_full(value, ());",
    "    (index, existing.is_none())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(index, existing.is_none())",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}