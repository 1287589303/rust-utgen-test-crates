{
  "name": "indexmap::map::{impl#5}::insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:400:5:402:6",
  "doc": "/// Insert a key-value pair in the map.\n///\n/// If an equivalent key already exists in the map: the key remains and\n/// retains in its place in the order, its corresponding value is updated\n/// with `value`, and the older value is returned inside `Some(_)`.\n///\n/// If no equivalent key existed in the map: the new key-value pair is\n/// inserted, last in order, and `None` is returned.\n///\n/// Computes in **O(1)** time (amortized average).\n///\n/// See also [`entry`][Self::entry] if you want to insert *or* modify,\n/// or [`insert_full`][Self::insert_full] if you need to get the index of\n/// the corresponding key-value pair.\n",
  "code": [
    "pub fn insert(&mut self, key: K, value: V) -> Option<V> {",
    "    self.insert_full(key, value).1",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.insert_full(key, value).1",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}