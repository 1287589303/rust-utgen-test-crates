{
  "name": "indexmap::map::{impl#6}::shift_remove_full",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:933:5:948:6",
  "doc": "/// Remove the key-value pair equivalent to `key` and return it and\n/// the index it had.\n///\n/// Like [`Vec::remove`], the pair is removed by shifting all of the\n/// elements that follow it, preserving their relative order.\n/// **This perturbs the index of all of those elements!**\n///\n/// Return `None` if `key` is not in map.\n///\n/// Computes in **O(n)** time (average).\n",
  "code": [
    "pub fn shift_remove_full<Q>(&mut self, key: &Q) -> Option<(usize, K, V)>",
    "where",
    "    Q: ?Sized + Hash + Equivalent<K>,",
    "{",
    "    match self.as_entries() {",
    "        [x] if key.equivalent(&x.key) => {",
    "            let (k, v) = self.core.pop()?;",
    "            Some((0, k, v))",
    "        }",
    "        [_] | [] => None,",
    "        _ => {",
    "            let hash = self.hash(key);",
    "            self.core.shift_remove_full(hash, key)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "true",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        },
        {
          "cond": "key.equivalent(&x.key)",
          "norm": null,
          "value": "true",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.core.pop()?",
          "norm": null,
          "value": "Err/None",
          "line": 939,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        7,
        8,
        10,
        11,
        13,
        15,
        16,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "true",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        },
        {
          "cond": "key.equivalent(&x.key)",
          "norm": null,
          "value": "true",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.core.pop()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 939,
          "bound": null
        }
      ],
      "ret": "Some((0, k, v))",
      "path": [
        0,
        1,
        3,
        6,
        7,
        8,
        10,
        11,
        14,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "true",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        },
        {
          "cond": "key.equivalent(&x.key)",
          "norm": null,
          "value": "false",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches [] or [_]",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        6,
        7,
        9,
        5,
        25,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "false",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches []",
          "norm": null,
          "value": "true",
          "line": 942,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches [] or [_]",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        5,
        25,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.as_entries() matches [x]",
          "norm": null,
          "value": "false",
          "line": 938,
          "bound": null
        },
        {
          "cond": "self.as_entries() matches []",
          "norm": null,
          "value": "false",
          "line": 942,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        2,
        26,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}