{
  "name": "indexmap::set::{impl#4}::drain",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:254:5:259:6",
  "doc": "/// Clears the `IndexSet` in the given index range, returning those values\n/// as a drain iterator.\n///\n/// The range may be any type that implements [`RangeBounds<usize>`],\n/// including all of the `std::ops::Range*` types, or even a tuple pair of\n/// `Bound` start and end values. To drain the set entirely, use `RangeFull`\n/// like `set.drain(..)`.\n///\n/// This shifts down all entries following the drained range to fill the\n/// gap, and keeps the allocated memory for reuse.\n///\n/// ***Panics*** if the starting point is greater than the end point or if\n/// the end point is greater than the length of the set.\n",
  "code": [
    "pub fn drain<R>(&mut self, range: R) -> Drain<'_, T>",
    "where",
    "    R: RangeBounds<usize>,",
    "{",
    "    Drain::new(self.map.core.drain(range))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}