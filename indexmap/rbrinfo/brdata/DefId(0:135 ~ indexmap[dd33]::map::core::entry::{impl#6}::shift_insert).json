{
  "name": "indexmap::map::core::entry::{impl#6}::shift_insert",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:410:5:414:6",
  "doc": "/// Inserts the entry's key and the given value into the map at the given index,\n/// shifting others to the right, and returns a mutable reference to the value.\n///\n/// ***Panics*** if `index` is out of bounds.\n///\n/// Computes in **O(n)** time (average).\n",
  "code": [
    "pub fn shift_insert(mut self, index: usize, value: V) -> &'a mut V {",
    "    self.map",
    "        .shift_insert_unique(index, self.hash, self.key, value);",
    "    &mut self.map.entries[index].value",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&mut self.map.entries[index].value",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}