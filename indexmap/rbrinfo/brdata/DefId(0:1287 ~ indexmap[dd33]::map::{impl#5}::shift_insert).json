{
  "name": "indexmap::map::{impl#5}::shift_insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:584:5:607:6",
  "doc": "/// Insert a key-value pair in the map at the given index.\n///\n/// If an equivalent key already exists in the map: the key remains and\n/// is moved to the given index in the map, its corresponding value is updated\n/// with `value`, and the older value is returned inside `Some(_)`.\n/// Note that existing entries **cannot** be moved to `index == map.len()`!\n/// (See [`insert_before`](Self::insert_before) for different behavior here.)\n///\n/// If no equivalent key existed in the map: the new key-value pair is\n/// inserted at the given index, and `None` is returned.\n///\n/// ***Panics*** if `index` is out of bounds.\n/// Valid indices are `0..map.len()` (exclusive) when moving an existing entry, or\n/// `0..=map.len()` (inclusive) when inserting a new key.\n///\n/// Computes in **O(n)** time (average).\n///\n/// See also [`entry`][Self::entry] if you want to insert *or* modify,\n/// perhaps only using the index for new entries with [`VacantEntry::shift_insert`].\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexMap;\n/// let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();\n///\n/// // The new key '*' goes exactly at the given index.\n/// assert_eq!(map.get_index_of(&'*'), None);\n/// assert_eq!(map.shift_insert(10, '*', ()), None);\n/// assert_eq!(map.get_index_of(&'*'), Some(10));\n///\n/// // Moving the key 'a' up to 10 will shift others down, including the '*' that was at 10.\n/// assert_eq!(map.shift_insert(10, 'a', ()), Some(()));\n/// assert_eq!(map.get_index_of(&'a'), Some(10));\n/// assert_eq!(map.get_index_of(&'*'), Some(9));\n///\n/// // Moving the key 'z' down to 9 will shift others up, including the '*' that was at 9.\n/// assert_eq!(map.shift_insert(9, 'z', ()), Some(()));\n/// assert_eq!(map.get_index_of(&'z'), Some(9));\n/// assert_eq!(map.get_index_of(&'*'), Some(10));\n///\n/// // Existing keys can move to len-1 at most, but new keys can insert at the endpoint.\n/// assert_eq!(map.len(), 27);\n/// assert_eq!(map.shift_insert(map.len() - 1, '*', ()), Some(()));\n/// assert_eq!(map.get_index_of(&'*'), Some(26));\n/// assert_eq!(map.shift_insert(map.len(), '+', ()), None);\n/// assert_eq!(map.get_index_of(&'+'), Some(27));\n/// assert_eq!(map.len(), 28);\n/// ```\n///\n/// ```should_panic\n/// use indexmap::IndexMap;\n/// let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();\n///\n/// // This is an invalid index for moving an existing key!\n/// map.shift_insert(map.len(), 'a', ());\n/// ```\n",
  "code": [
    "pub fn shift_insert(&mut self, index: usize, key: K, value: V) -> Option<V> {",
    "    let len = self.len();",
    "    match self.entry(key) {",
    "        Entry::Occupied(mut entry) => {",
    "            assert!(",
    "                index < len,",
    "                \"index out of bounds: the len is {len} but the index is {index}\"",
    "            );",
    "",
    "            let old = mem::replace(entry.get_mut(), value);",
    "            entry.move_index(index);",
    "            Some(old)",
    "        }",
    "        Entry::Vacant(entry) => {",
    "            assert!(",
    "                index <= len,",
    "                \"index out of bounds: the len is {len} but the index is {index}. Expected index <= len\"",
    "            );",
    "",
    "            entry.shift_insert(index, value);",
    "            None",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.entry(key) matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 586,
          "bound": null
        },
        {
          "cond": "index <= len",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": "index == len"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        17,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.entry(key) matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 586,
          "bound": null
        },
        {
          "cond": "index <= len",
          "norm": null,
          "value": "false",
          "line": 599,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        18,
        19,
        20,
        21,
        30,
        33,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 586,
          "bound": null
        },
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 586,
          "bound": null
        },
        {
          "cond": "index < len",
          "norm": null,
          "value": "true",
          "line": 589,
          "bound": null
        }
      ],
      "ret": "Some(old)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        12,
        13,
        14,
        15,
        16,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 586,
          "bound": null
        },
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 586,
          "bound": null
        },
        {
          "cond": "index < len",
          "norm": null,
          "value": "false",
          "line": 589,
          "bound": "index == len"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        33,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}