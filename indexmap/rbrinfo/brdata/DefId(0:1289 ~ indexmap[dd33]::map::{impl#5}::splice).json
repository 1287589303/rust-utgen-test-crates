{
  "name": "indexmap::map::{impl#5}::splice",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:649:5:655:6",
  "doc": "/// Creates a splicing iterator that replaces the specified range in the map\n/// with the given `replace_with` key-value iterator and yields the removed\n/// items. `replace_with` does not need to be the same length as `range`.\n///\n/// The `range` is removed even if the iterator is not consumed until the\n/// end. It is unspecified how many elements are removed from the map if the\n/// `Splice` value is leaked.\n///\n/// The input iterator `replace_with` is only consumed when the `Splice`\n/// value is dropped. If a key from the iterator matches an existing entry\n/// in the map (outside of `range`), then the value will be updated in that\n/// position. Otherwise, the new key-value pair will be inserted in the\n/// replaced `range`.\n///\n/// ***Panics*** if the starting point is greater than the end point or if\n/// the end point is greater than the length of the map.\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexMap;\n///\n/// let mut map = IndexMap::from([(0, '_'), (1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]);\n/// let new = [(5, 'E'), (4, 'D'), (3, 'C'), (2, 'B'), (1, 'A')];\n/// let removed: Vec<_> = map.splice(2..4, new).collect();\n///\n/// // 1 and 4 got new values, while 5, 3, and 2 were newly inserted.\n/// assert!(map.into_iter().eq([(0, '_'), (1, 'A'), (5, 'E'), (3, 'C'), (2, 'B'), (4, 'D')]));\n/// assert_eq!(removed, &[(2, 'b'), (3, 'c')]);\n/// ```\n",
  "code": [
    "pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, K, V, S>",
    "where",
    "    R: RangeBounds<usize>,",
    "    I: IntoIterator<Item = (K, V)>,",
    "{",
    "    Splice::new(self, range, replace_with.into_iter())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}