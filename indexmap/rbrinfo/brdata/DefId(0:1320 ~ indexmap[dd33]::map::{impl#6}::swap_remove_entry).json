{
  "name": "indexmap::map::{impl#6}::swap_remove_entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:850:5:858:6",
  "doc": "/// Remove and return the key-value pair equivalent to `key`.\n///\n/// Like [`Vec::swap_remove`], the pair is removed by swapping it with the\n/// last element of the map and popping it off. **This perturbs\n/// the position of what used to be the last element!**\n///\n/// Return `None` if `key` is not in map.\n///\n/// Computes in **O(1)** time (average).\n",
  "code": [
    "pub fn swap_remove_entry<Q>(&mut self, key: &Q) -> Option<(K, V)>",
    "where",
    "    Q: ?Sized + Hash + Equivalent<K>,",
    "{",
    "    match self.swap_remove_full(key) {",
    "        Some((_, key, value)) => Some((key, value)),",
    "        None => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.swap_remove_full(key) matches Some((_, key, value))",
          "norm": null,
          "value": "true",
          "line": 854,
          "bound": null
        },
        {
          "cond": "self.swap_remove_full(key) matches Some((_, key, value))",
          "norm": null,
          "value": "true",
          "line": 854,
          "bound": null
        }
      ],
      "ret": "Some((key, value))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.swap_remove_full(key) matches None",
          "norm": null,
          "value": "true",
          "line": 854,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}