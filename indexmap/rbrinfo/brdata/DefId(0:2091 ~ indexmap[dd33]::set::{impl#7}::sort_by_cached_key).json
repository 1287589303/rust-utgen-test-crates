{
  "name": "indexmap::set::{impl#7}::sort_by_cached_key",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:901:5:909:6",
  "doc": "/// Sort the setâ€™s values in place using a key extraction function.\n///\n/// During sorting, the function is called at most once per entry, by using temporary storage\n/// to remember the results of its evaluation. The order of calls to the function is\n/// unspecified and may change between versions of `indexmap` or the standard library.\n///\n/// Computes in **O(m n + n log n + c)** time () and **O(n)** space, where the function is\n/// **O(m)**, *n* is the length of the map, and *c* the capacity. The sort is stable.\n",
  "code": [
    "pub fn sort_by_cached_key<K, F>(&mut self, mut sort_key: F)",
    "where",
    "    K: Ord,",
    "    F: FnMut(&T) -> K,",
    "{",
    "    self.with_entries(move |entries| {",
    "        entries.sort_by_cached_key(move |a| sort_key(&a.key));",
    "    });",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}