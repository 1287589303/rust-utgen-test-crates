{
  "name": "indexmap::set::{impl#5}::insert_sorted",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:380:5:386:6",
  "doc": "/// Insert the value into the set at its ordered position among sorted values.\n///\n/// This is equivalent to finding the position with\n/// [`binary_search`][Self::binary_search], and if needed calling\n/// [`insert_before`][Self::insert_before] for a new value.\n///\n/// If the sorted item is found in the set, it returns the index of that\n/// existing item and `false`, without any change. Otherwise, it inserts the\n/// new item and returns its sorted index and `true`.\n///\n/// If the existing items are **not** already sorted, then the insertion\n/// index is unspecified (like [`slice::binary_search`]), but the value\n/// is moved to or inserted at that position regardless.\n///\n/// Computes in **O(n)** time (average). Instead of repeating calls to\n/// `insert_sorted`, it may be faster to call batched [`insert`][Self::insert]\n/// or [`extend`][Self::extend] and only call [`sort`][Self::sort] or\n/// [`sort_unstable`][Self::sort_unstable] once.\n",
  "code": [
    "pub fn insert_sorted(&mut self, value: T) -> (usize, bool)",
    "where",
    "    T: Ord,",
    "{",
    "    let (index, existing) = self.map.insert_sorted(value, ());",
    "    (index, existing.is_none())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(index, existing.is_none())",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}