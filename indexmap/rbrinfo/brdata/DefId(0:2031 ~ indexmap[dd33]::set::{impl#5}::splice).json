{
  "name": "indexmap::set::{impl#5}::splice",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:592:5:598:6",
  "doc": "/// Creates a splicing iterator that replaces the specified range in the set\n/// with the given `replace_with` iterator and yields the removed items.\n/// `replace_with` does not need to be the same length as `range`.\n///\n/// The `range` is removed even if the iterator is not consumed until the\n/// end. It is unspecified how many elements are removed from the set if the\n/// `Splice` value is leaked.\n///\n/// The input iterator `replace_with` is only consumed when the `Splice`\n/// value is dropped. If a value from the iterator matches an existing entry\n/// in the set (outside of `range`), then the original will be unchanged.\n/// Otherwise, the new value will be inserted in the replaced `range`.\n///\n/// ***Panics*** if the starting point is greater than the end point or if\n/// the end point is greater than the length of the set.\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexSet;\n///\n/// let mut set = IndexSet::from([0, 1, 2, 3, 4]);\n/// let new = [5, 4, 3, 2, 1];\n/// let removed: Vec<_> = set.splice(2..4, new).collect();\n///\n/// // 1 and 4 kept their positions, while 5, 3, and 2 were newly inserted.\n/// assert!(set.into_iter().eq([0, 1, 5, 3, 2, 4]));\n/// assert_eq!(removed, &[2, 3]);\n/// ```\n",
  "code": [
    "pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, T, S>",
    "where",
    "    R: RangeBounds<usize>,",
    "    I: IntoIterator<Item = T>,",
    "{",
    "    Splice::new(self, range, replace_with.into_iter())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}