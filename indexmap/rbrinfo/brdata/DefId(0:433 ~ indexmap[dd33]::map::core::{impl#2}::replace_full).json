{
  "name": "indexmap::map::core::{impl#2}::replace_full",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:360:5:389:6",
  "doc": "/// Same as `insert_full`, except it also replaces the key\n",
  "code": [
    "pub(crate) fn replace_full(",
    "    &mut self,",
    "    hash: HashValue,",
    "    key: K,",
    "    value: V,",
    ") -> (usize, Option<(K, V)>)",
    "where",
    "    K: Eq,",
    "{",
    "    let eq = equivalent(&key, &self.entries);",
    "    let hasher = get_hash(&self.entries);",
    "    match self.indices.entry(hash.get(), eq, hasher) {",
    "        hash_table::Entry::Occupied(entry) => {",
    "            let i = *entry.get();",
    "            let entry = &mut self.entries[i];",
    "            let kv = (",
    "                mem::replace(&mut entry.key, key),",
    "                mem::replace(&mut entry.value, value),",
    "            );",
    "            (i, Some(kv))",
    "        }",
    "        hash_table::Entry::Vacant(entry) => {",
    "            let i = self.entries.len();",
    "            entry.insert(i);",
    "            self.push_entry(hash, key, value);",
    "            debug_assert_eq!(self.indices.len(), self.entries.len());",
    "            (i, None)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.indices.entry(hash.get(), eq, hasher) matches hash_table::Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 371,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "(i, None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.indices.entry(hash.get(), eq, hasher) matches hash_table::Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 371,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        45,
        46,
        47,
        48,
        49
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.indices.entry(hash.get(), eq, hasher) matches hash_table::Entry::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 371,
          "bound": null
        },
        {
          "cond": "self.indices.entry(hash.get(), eq, hasher) matches hash_table::Entry::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 371,
          "bound": null
        }
      ],
      "ret": "(i, Some(kv))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}