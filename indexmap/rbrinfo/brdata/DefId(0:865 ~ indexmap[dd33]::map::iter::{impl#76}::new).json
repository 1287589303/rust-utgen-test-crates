{
  "name": "indexmap::map::iter::{impl#76}::new",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": false,
  "loc": "src/map/iter.rs:671:5:682:6",
  "doc": "",
  "code": [
    "pub(super) fn new<R>(map: &'a mut IndexMap<K, V, S>, range: R, replace_with: I) -> Self",
    "where",
    "    R: RangeBounds<usize>,",
    "{",
    "    let (tail, drain) = map.core.split_splice(range);",
    "    Self {",
    "        map,",
    "        tail,",
    "        drain,",
    "        replace_with,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            map,\n            tail,\n            drain,\n            replace_with,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}