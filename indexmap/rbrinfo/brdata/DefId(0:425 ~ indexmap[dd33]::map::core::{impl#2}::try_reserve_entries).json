{
  "name": "indexmap::map::core::{impl#2}::try_reserve_entries",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": false,
  "loc": "src/map/core.rs:277:5:288:6",
  "doc": "/// Try to reserve entries capacity, rounded up to match the indices\n",
  "code": [
    "fn try_reserve_entries(&mut self, additional: usize) -> Result<(), TryReserveError> {",
    "    // Use a soft-limit on the maximum capacity, but if the caller explicitly",
    "    // requested more, do it and let them have the resulting error.",
    "    let new_capacity = Ord::min(self.indices.capacity(), Self::MAX_ENTRIES_CAPACITY);",
    "    let try_add = new_capacity - self.entries.len();",
    "    if try_add > additional && self.entries.try_reserve_exact(try_add).is_ok() {",
    "        return Ok(());",
    "    }",
    "    self.entries",
    "        .try_reserve_exact(additional)",
    "        .map_err(TryReserveError::from_alloc)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "try_add > additional",
          "norm": "additional < try_add",
          "value": "true",
          "line": 282,
          "bound": null
        },
        {
          "cond": "self.entries.try_reserve_exact(try_add).is_ok()",
          "norm": null,
          "value": "true",
          "line": 282,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "try_add > additional",
          "norm": "additional < try_add",
          "value": "true",
          "line": 282,
          "bound": null
        },
        {
          "cond": "self.entries.try_reserve_exact(try_add).is_ok()",
          "norm": null,
          "value": "false",
          "line": 282,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "try_add > additional",
          "norm": "additional < try_add",
          "value": "false",
          "line": 282,
          "bound": "try_add == additional"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}