{
  "name": "indexmap::map::{impl#12}::from_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1499:5:1505:6",
  "doc": "/// Create an `IndexMap` from the sequence of key-value pairs in the\n/// iterable.\n///\n/// `from_iter` uses the same logic as `extend`. See\n/// [`extend`][IndexMap::extend] for more details.\n",
  "code": [
    "fn from_iter<I: IntoIterator<Item = (K, V)>>(iterable: I) -> Self {",
    "    let iter = iterable.into_iter();",
    "    let (low, _) = iter.size_hint();",
    "    let mut map = Self::with_capacity_and_hasher(low, <_>::default());",
    "    map.extend(iter);",
    "    map",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "map",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}