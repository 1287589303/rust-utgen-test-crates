{
  "name": "indexmap::map::core::entry::{impl#1}::insert_entry",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:45:5:53:6",
  "doc": "/// Sets the value of the entry (after inserting if vacant), and returns an `OccupiedEntry`.\n///\n/// Computes in **O(1)** time (amortized average).\n",
  "code": [
    "pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {",
    "    match self {",
    "        Entry::Occupied(mut entry) => {",
    "            entry.insert(value);",
    "            entry",
    "        }",
    "        Entry::Vacant(entry) => entry.insert_entry(value),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 46,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 46,
          "bound": null
        },
        {
          "cond": "self matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 46,
          "bound": null
        }
      ],
      "ret": "entry",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}