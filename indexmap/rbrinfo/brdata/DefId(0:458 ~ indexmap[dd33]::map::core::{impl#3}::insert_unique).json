{
  "name": "indexmap::map::core::{impl#3}::insert_unique",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": false,
  "loc": "src/map/core.rs:551:5:565:6",
  "doc": "/// Insert a key-value pair in `entries`,\n/// *without* checking whether it already exists.\n",
  "code": [
    "fn insert_unique(self, hash: HashValue, key: K, value: V) -> OccupiedEntry<'a, K, V> {",
    "    let i = self.indices.len();",
    "    debug_assert_eq!(i, self.entries.len());",
    "    let entry = self",
    "        .indices",
    "        .insert_unique(hash.get(), i, get_hash(self.entries));",
    "    if self.entries.len() == self.entries.capacity() {",
    "        // We can't call `indices.capacity()` while this `entry` has borrowed it, so we'll have",
    "        // to amortize growth on our own. It's still an improvement over the basic `Vec::push`",
    "        // doubling though, since we also consider `MAX_ENTRIES_CAPACITY`.",
    "        reserve_entries(self.entries, 1, 2 * self.entries.capacity());",
    "    }",
    "    self.entries.push(Bucket { hash, key, value });",
    "    OccupiedEntry::new(self.entries, entry)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.entries.len() == self.entries.capacity()",
          "norm": "self.entries.capacity() == self.entries.len()",
          "value": "true",
          "line": 557,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.entries.len() == self.entries.capacity()",
          "norm": "self.entries.capacity() == self.entries.len()",
          "value": "false",
          "line": 557,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}