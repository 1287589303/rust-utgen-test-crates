{
  "name": "indexmap::map::{impl#5}::insert_before",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:499:5:524:6",
  "doc": "/// Insert a key-value pair in the map before the entry at the given index, or at the end.\n///\n/// If an equivalent key already exists in the map: the key remains and\n/// is moved to the new position in the map, its corresponding value is updated\n/// with `value`, and the older value is returned inside `Some(_)`. The returned index\n/// will either be the given index or one less, depending on how the entry moved.\n/// (See [`shift_insert`](Self::shift_insert) for different behavior here.)\n///\n/// If no equivalent key existed in the map: the new key-value pair is\n/// inserted exactly at the given index, and `None` is returned.\n///\n/// ***Panics*** if `index` is out of bounds.\n/// Valid indices are `0..=map.len()` (inclusive).\n///\n/// Computes in **O(n)** time (average).\n///\n/// See also [`entry`][Self::entry] if you want to insert *or* modify,\n/// perhaps only using the index for new entries with [`VacantEntry::shift_insert`].\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexMap;\n/// let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();\n///\n/// // The new key '*' goes exactly at the given index.\n/// assert_eq!(map.get_index_of(&'*'), None);\n/// assert_eq!(map.insert_before(10, '*', ()), (10, None));\n/// assert_eq!(map.get_index_of(&'*'), Some(10));\n///\n/// // Moving the key 'a' up will shift others down, so this moves *before* 10 to index 9.\n/// assert_eq!(map.insert_before(10, 'a', ()), (9, Some(())));\n/// assert_eq!(map.get_index_of(&'a'), Some(9));\n/// assert_eq!(map.get_index_of(&'*'), Some(10));\n///\n/// // Moving the key 'z' down will shift others up, so this moves to exactly 10.\n/// assert_eq!(map.insert_before(10, 'z', ()), (10, Some(())));\n/// assert_eq!(map.get_index_of(&'z'), Some(10));\n/// assert_eq!(map.get_index_of(&'*'), Some(11));\n///\n/// // Moving or inserting before the endpoint is also valid.\n/// assert_eq!(map.len(), 27);\n/// assert_eq!(map.insert_before(map.len(), '*', ()), (26, Some(())));\n/// assert_eq!(map.get_index_of(&'*'), Some(26));\n/// assert_eq!(map.insert_before(map.len(), '+', ()), (27, None));\n/// assert_eq!(map.get_index_of(&'+'), Some(27));\n/// assert_eq!(map.len(), 28);\n/// ```\n",
  "code": [
    "pub fn insert_before(&mut self, mut index: usize, key: K, value: V) -> (usize, Option<V>) {",
    "    let len = self.len();",
    "",
    "    assert!(",
    "        index <= len,",
    "        \"index out of bounds: the len is {len} but the index is {index}. Expected index <= len\"",
    "    );",
    "",
    "    match self.entry(key) {",
    "        Entry::Occupied(mut entry) => {",
    "            if index > entry.index() {",
    "                // Some entries will shift down when this one moves up,",
    "                // so \"insert before index\" becomes \"move to index - 1\",",
    "                // keeping the entry at the original index unmoved.",
    "                index -= 1;",
    "            }",
    "            let old = mem::replace(entry.get_mut(), value);",
    "            entry.move_index(index);",
    "            (index, Some(old))",
    "        }",
    "        Entry::Vacant(entry) => {",
    "            entry.shift_insert(index, value);",
    "            (index, None)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "index <= len",
          "norm": null,
          "value": "true",
          "line": 503,
          "bound": "index == len"
        },
        {
          "cond": "self.entry(key) matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        }
      ],
      "ret": "(index, None)",
      "path": [
        0,
        1,
        2,
        7,
        10,
        23,
        24,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "index <= len",
          "norm": null,
          "value": "true",
          "line": 503,
          "bound": "index == len"
        },
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "index > entry.index()",
          "norm": "entry.index() < index",
          "value": "true",
          "line": 509,
          "bound": null
        }
      ],
      "ret": "(index, Some(old))",
      "path": [
        0,
        1,
        2,
        7,
        9,
        11,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "index <= len",
          "norm": null,
          "value": "true",
          "line": 503,
          "bound": "index == len"
        },
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "self.entry(key) matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "index > entry.index()",
          "norm": "entry.index() < index",
          "value": "false",
          "line": 509,
          "bound": "index == entry.index()"
        }
      ],
      "ret": "(index, Some(old))",
      "path": [
        0,
        1,
        2,
        7,
        9,
        11,
        12,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "index <= len",
          "norm": null,
          "value": "false",
          "line": 503,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}