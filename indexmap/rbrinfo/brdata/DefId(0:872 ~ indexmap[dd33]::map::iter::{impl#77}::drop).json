{
  "name": "indexmap::map::iter::{impl#77}::drop",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:691:5:712:6",
  "doc": "",
  "code": [
    "fn drop(&mut self) {",
    "    // Finish draining unconsumed items. We don't strictly *have* to do this",
    "    // manually, since we already split it into separate memory, but it will",
    "    // match the drop order of `vec::Splice` items this way.",
    "    let _ = self.drain.nth(usize::MAX);",
    "",
    "    // Now insert all the new items. If a key matches an existing entry, it",
    "    // keeps the original position and only replaces the value, like `insert`.",
    "    while let Some((key, value)) = self.replace_with.next() {",
    "        // Since the tail is disjoint, we can try to update it first,",
    "        // or else insert (update or append) the primary map.",
    "        let hash = self.map.hash(&key);",
    "        if let Some(i) = self.tail.get_index_of(hash, &key) {",
    "            self.tail.as_entries_mut()[i].value = value;",
    "        } else {",
    "            self.map.core.insert_full(hash, key, value);",
    "        }",
    "    }",
    "",
    "    // Finally, re-append the tail",
    "    self.map.core.append_unchecked(&mut self.tail);",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some((key, value)) = self.replace_with.next()",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        21,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some((key, value)) = self.replace_with.next()",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        },
        {
          "cond": "let Some(i) = self.tail.get_index_of(hash, &key)",
          "norm": null,
          "value": "true",
          "line": 703,
          "bound": null
        },
        {
          "cond": "let Some((key, value)) = self.replace_with.next()",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        3,
        4,
        5,
        21,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some((key, value)) = self.replace_with.next()",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        },
        {
          "cond": "let Some(i) = self.tail.get_index_of(hash, &key)",
          "norm": null,
          "value": "true",
          "line": 703,
          "bound": null
        },
        {
          "cond": "let Some((key, value)) = self.replace_with.next()",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        20,
        22,
        23,
        24,
        3,
        4,
        5,
        21,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}