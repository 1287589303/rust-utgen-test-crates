{
  "name": "indexmap::set::iter::{impl#47}::new",
  "mod_info": {
    "name": "set::iter",
    "loc": "src/set.rs:3:1:3:10"
  },
  "visible": false,
  "loc": "src/set/iter.rs:546:5:553:6",
  "doc": "",
  "code": [
    "pub(super) fn new<R>(set: &'a mut IndexSet<T, S>, range: R, replace_with: I) -> Self",
    "where",
    "    R: RangeBounds<usize>,",
    "{",
    "    Self {",
    "        iter: set.map.splice(range, UnitValue(replace_with)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            iter: set.map.splice(range, UnitValue(replace_with)),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}