{
  "name": "indexmap::map::core::raw_entry_v1::{impl#4}::from_hash",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:286:5:303:6",
  "doc": "/// Access an entry by hash.\n",
  "code": [
    "pub fn from_hash<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S>",
    "where",
    "    F: FnMut(&K) -> bool,",
    "{",
    "    let ref_entries = &*self.map.core.entries;",
    "    let eq = move |&i: &usize| is_match(&ref_entries[i].key);",
    "    match self.map.core.indices.find_entry(hash, eq) {",
    "        Ok(index) => RawEntryMut::Occupied(RawOccupiedEntryMut {",
    "            entries: &mut self.map.core.entries,",
    "            index,",
    "            hash_builder: PhantomData,",
    "        }),",
    "        Err(absent) => RawEntryMut::Vacant(RawVacantEntryMut {",
    "            map: RefMut::new(absent.into_table(), &mut self.map.core.entries),",
    "            hash_builder: &self.map.hash_builder,",
    "        }),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.core.indices.find_entry(hash, eq) matches Err(absent)",
          "norm": null,
          "value": "true",
          "line": 292,
          "bound": null
        }
      ],
      "ret": "RawEntryMut::Vacant(RawVacantEntryMut {\n                map: RefMut::new(absent.into_table(), &mut self.map.core.entries),\n                hash_builder: &self.map.hash_builder,\n            })",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.core.indices.find_entry(hash, eq) matches Ok(index)",
          "norm": null,
          "value": "true",
          "line": 292,
          "bound": null
        },
        {
          "cond": "self.map.core.indices.find_entry(hash, eq) matches Ok(index)",
          "norm": null,
          "value": "true",
          "line": 292,
          "bound": null
        }
      ],
      "ret": "RawEntryMut::Occupied(RawOccupiedEntryMut {\n                entries: &mut self.map.core.entries,\n                index,\n                hash_builder: PhantomData,\n            })",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}