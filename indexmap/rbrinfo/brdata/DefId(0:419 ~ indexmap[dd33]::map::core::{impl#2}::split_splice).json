{
  "name": "indexmap::map::core::{impl#2}::split_splice",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:226:5:238:6",
  "doc": "",
  "code": [
    "pub(crate) fn split_splice<R>(&mut self, range: R) -> (Self, vec::IntoIter<Bucket<K, V>>)",
    "where",
    "    R: RangeBounds<usize>,",
    "{",
    "    let range = simplify_range(range, self.len());",
    "    self.erase_indices(range.start, self.entries.len());",
    "    let entries = self.entries.split_off(range.end);",
    "    let drained = self.entries.split_off(range.start);",
    "",
    "    let mut indices = Indices::with_capacity(entries.len());",
    "    insert_bulk_no_grow(&mut indices, &entries);",
    "    (Self { indices, entries }, drained.into_iter())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(Self { indices, entries }, drained.into_iter())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}