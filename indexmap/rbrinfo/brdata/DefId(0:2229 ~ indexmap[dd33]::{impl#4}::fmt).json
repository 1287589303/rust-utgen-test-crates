{
  "name": "indexmap::{impl#4}::fmt",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:2:1:271:46"
  },
  "visible": true,
  "loc": "src/lib.rs:254:5:266:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    let reason = match &self.kind {",
    "        TryReserveErrorKind::Std(e) => return core::fmt::Display::fmt(e, f),",
    "        TryReserveErrorKind::CapacityOverflow => {",
    "            \" because the computed capacity exceeded the collection's maximum\"",
    "        }",
    "        TryReserveErrorKind::AllocError { .. } => {",
    "            \" because the memory allocator returned an error\"",
    "        }",
    "    };",
    "    f.write_str(\"memory allocation failed\")?;",
    "    f.write_str(reason)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "&self.kind matches TryReserveErrorKind::AllocError { .. }",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "f.write_str(\"memory allocation failed\")?",
          "norm": null,
          "value": "Err/None",
          "line": 264,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        12,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "&self.kind matches TryReserveErrorKind::AllocError { .. }",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "f.write_str(\"memory allocation failed\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 264,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        13,
        16,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "&self.kind matches TryReserveErrorKind::CapacityOverflow",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "&self.kind matches TryReserveErrorKind::CapacityOverflow",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "f.write_str(\"memory allocation failed\")?",
          "norm": null,
          "value": "Err/None",
          "line": 264,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "&self.kind matches TryReserveErrorKind::CapacityOverflow",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "&self.kind matches TryReserveErrorKind::CapacityOverflow",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "f.write_str(\"memory allocation failed\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 264,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        10,
        13,
        16,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "&self.kind matches TryReserveErrorKind::Std(e)",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "&self.kind matches TryReserveErrorKind::Std(e)",
          "norm": null,
          "value": "true",
          "line": 255,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}