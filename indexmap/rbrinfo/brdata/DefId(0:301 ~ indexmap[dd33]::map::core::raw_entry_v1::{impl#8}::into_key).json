{
  "name": "indexmap::map::core::raw_entry_v1::{impl#8}::into_key",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:433:5:436:6",
  "doc": "/// Converts into a mutable reference to the entry's key in the map,\n/// with a lifetime bound to the map itself.\n///\n/// Note that this is not the key that was used to find the entry. There may be an observable\n/// difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like\n/// extra fields or the memory address of an allocation.\n",
  "code": [
    "pub fn into_key(self) -> &'a mut K {",
    "    let index = self.index();",
    "    &mut self.entries[index].key",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&mut self.entries[index].key",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}