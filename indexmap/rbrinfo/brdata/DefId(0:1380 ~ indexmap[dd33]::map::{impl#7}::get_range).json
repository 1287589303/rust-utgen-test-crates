{
  "name": "indexmap::map::{impl#7}::get_range",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1204:5:1208:6",
  "doc": "/// Returns a slice of key-value pairs in the given range of indices.\n///\n/// Valid indices are `0 <= index < self.len()`.\n///\n/// Computes in **O(1)** time.\n",
  "code": [
    "pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Slice<K, V>> {",
    "    let entries = self.as_entries();",
    "    let range = try_simplify_range(range, entries.len())?;",
    "    entries.get(range).map(Slice::from_slice)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "try_simplify_range(range, entries.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 1206,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "try_simplify_range(range, entries.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1206,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}