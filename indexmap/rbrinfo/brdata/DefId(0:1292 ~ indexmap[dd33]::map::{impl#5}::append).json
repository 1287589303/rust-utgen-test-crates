{
  "name": "indexmap::map::{impl#5}::append",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:682:5:684:6",
  "doc": "/// Moves all key-value pairs from `other` into `self`, leaving `other` empty.\n///\n/// This is equivalent to calling [`insert`][Self::insert] for each\n/// key-value pair from `other` in order, which means that for keys that\n/// already exist in `self`, their value is updated in the current position.\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexMap;\n///\n/// // Note: Key (3) is present in both maps.\n/// let mut a = IndexMap::from([(3, \"c\"), (2, \"b\"), (1, \"a\")]);\n/// let mut b = IndexMap::from([(3, \"d\"), (4, \"e\"), (5, \"f\")]);\n/// let old_capacity = b.capacity();\n///\n/// a.append(&mut b);\n///\n/// assert_eq!(a.len(), 5);\n/// assert_eq!(b.len(), 0);\n/// assert_eq!(b.capacity(), old_capacity);\n///\n/// assert!(a.keys().eq(&[3, 2, 1, 4, 5]));\n/// assert_eq!(a[&3], \"d\"); // \"c\" was overwritten.\n/// ```\n",
  "code": [
    "pub fn append<S2>(&mut self, other: &mut IndexMap<K, V, S2>) {",
    "    self.extend(other.drain(..));",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}