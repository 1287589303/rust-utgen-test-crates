{
  "name": "indexmap::map::core::entry::{impl#6}::insert_sorted",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:395:5:402:6",
  "doc": "/// Inserts the entry's key and the given value into the map at its ordered\n/// position among sorted keys, and returns the new index and a mutable\n/// reference to the value.\n///\n/// If the existing keys are **not** already sorted, then the insertion\n/// index is unspecified (like [`slice::binary_search`]), but the key-value\n/// pair is inserted at that position regardless.\n///\n/// Computes in **O(n)** time (average).\n",
  "code": [
    "pub fn insert_sorted(self, value: V) -> (usize, &'a mut V)",
    "where",
    "    K: Ord,",
    "{",
    "    let slice = crate::map::Slice::from_slice(self.map.entries);",
    "    let i = slice.binary_search_keys(&self.key).unwrap_err();",
    "    (i, self.shift_insert(i, value))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(i, self.shift_insert(i, value))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}