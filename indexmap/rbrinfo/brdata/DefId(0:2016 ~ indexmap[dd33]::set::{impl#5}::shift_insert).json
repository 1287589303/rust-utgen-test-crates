{
  "name": "indexmap::set::{impl#5}::shift_insert",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:490:5:492:6",
  "doc": "/// Insert the value into the set at the given index.\n///\n/// If an equivalent item already exists in the set, it returns `false` leaving\n/// the original value in the set, but moved to the given index.\n/// Note that existing values **cannot** be moved to `index == set.len()`!\n/// (See [`insert_before`](Self::insert_before) for different behavior here.)\n///\n/// Otherwise, it inserts the new value at the given index and returns `true`.\n///\n/// ***Panics*** if `index` is out of bounds.\n/// Valid indices are `0..set.len()` (exclusive) when moving an existing value, or\n/// `0..=set.len()` (inclusive) when inserting a new value.\n///\n/// Computes in **O(n)** time (average).\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexSet;\n/// let mut set: IndexSet<char> = ('a'..='z').collect();\n///\n/// // The new value '*' goes exactly at the given index.\n/// assert_eq!(set.get_index_of(&'*'), None);\n/// assert_eq!(set.shift_insert(10, '*'), true);\n/// assert_eq!(set.get_index_of(&'*'), Some(10));\n///\n/// // Moving the value 'a' up to 10 will shift others down, including the '*' that was at 10.\n/// assert_eq!(set.shift_insert(10, 'a'), false);\n/// assert_eq!(set.get_index_of(&'a'), Some(10));\n/// assert_eq!(set.get_index_of(&'*'), Some(9));\n///\n/// // Moving the value 'z' down to 9 will shift others up, including the '*' that was at 9.\n/// assert_eq!(set.shift_insert(9, 'z'), false);\n/// assert_eq!(set.get_index_of(&'z'), Some(9));\n/// assert_eq!(set.get_index_of(&'*'), Some(10));\n///\n/// // Existing values can move to len-1 at most, but new values can insert at the endpoint.\n/// assert_eq!(set.len(), 27);\n/// assert_eq!(set.shift_insert(set.len() - 1, '*'), false);\n/// assert_eq!(set.get_index_of(&'*'), Some(26));\n/// assert_eq!(set.shift_insert(set.len(), '+'), true);\n/// assert_eq!(set.get_index_of(&'+'), Some(27));\n/// assert_eq!(set.len(), 28);\n/// ```\n///\n/// ```should_panic\n/// use indexmap::IndexSet;\n/// let mut set: IndexSet<char> = ('a'..='z').collect();\n///\n/// // This is an invalid index for moving an existing value!\n/// set.shift_insert(set.len(), 'a');\n/// ```\n",
  "code": [
    "pub fn shift_insert(&mut self, index: usize, value: T) -> bool {",
    "    self.map.shift_insert(index, value, ()).is_none()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}