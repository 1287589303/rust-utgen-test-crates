{
  "name": "indexmap::set::{impl#6}::swap_take",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:747:5:752:6",
  "doc": "/// Removes and returns the value in the set, if any, that is equal to the\n/// given one.\n///\n/// Like [`Vec::swap_remove`], the value is removed by swapping it with the\n/// last element of the set and popping it off. **This perturbs\n/// the position of what used to be the last element!**\n///\n/// Return `None` if `value` was not in the set.\n///\n/// Computes in **O(1)** time (average).\n",
  "code": [
    "pub fn swap_take<Q>(&mut self, value: &Q) -> Option<T>",
    "where",
    "    Q: ?Sized + Hash + Equivalent<T>,",
    "{",
    "    self.map.swap_remove_entry(value).map(|(x, ())| x)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}