bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:1233:9-1233:42)
  1: StorageLive(_3)
    SourceInfo(src/map.rs:1233:9-1233:30)
  2: StorageLive(_4)
    SourceInfo(src/map.rs:1233:9-1233:30)
  3: StorageLive(_5)
    SourceInfo(src/map.rs:1233:9-1233:13)
  4: _5 = &mut (*_1)
    SourceInfo(src/map.rs:1233:9-1233:13)
  Terminator {
      source_info: SourceInfo(src/map.rs:1233:9-1233:30)
      kind: _4 = <map::IndexMap<K, V, S> as Entries>::as_entries_mut(move _5) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _3 = &mut (*_4)
    SourceInfo(src/map.rs:1233:9-1233:30)
  1: StorageDead(_5)
    SourceInfo(src/map.rs:1233:29-1233:30)
  Terminator {
      source_info: SourceInfo(src/map.rs:1233:9-1233:42)
      kind: _2 = core::slice::<impl [Bucket<K, V>]>::first_mut(move _3) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_3)
    SourceInfo(src/map.rs:1233:41-1233:42)
  Terminator {
      source_info: SourceInfo(src/map.rs:1233:9-1233:63)
      kind: _0 = core::option::Option::<&mut Bucket<K, V>>::map::<(&K, &mut V), for<'a> fn(&'a mut Bucket<K, V>) -> (&'a K, &'a mut V) {Bucket::<K, V>::ref_mut}>(move _2, Bucket::<K, V>::ref_mut) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_2)
    SourceInfo(src/map.rs:1233:62-1233:63)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:1234:5-1234:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1234:6-1234:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1232:5-1234:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

