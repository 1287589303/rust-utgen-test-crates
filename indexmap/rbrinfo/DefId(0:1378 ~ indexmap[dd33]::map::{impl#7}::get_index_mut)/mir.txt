bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:1184:9-1184:45)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:1184:9-1184:30)
  2: StorageLive(_5)
    SourceInfo(src/map.rs:1184:9-1184:30)
  3: StorageLive(_6)
    SourceInfo(src/map.rs:1184:9-1184:13)
  4: _6 = &mut (*_1)
    SourceInfo(src/map.rs:1184:9-1184:13)
  Terminator {
      source_info: SourceInfo(src/map.rs:1184:9-1184:30)
      kind: _5 = <map::IndexMap<K, V, S> as Entries>::as_entries_mut(move _6) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _4 = &mut (*_5)
    SourceInfo(src/map.rs:1184:9-1184:30)
  1: StorageDead(_6)
    SourceInfo(src/map.rs:1184:29-1184:30)
  2: StorageLive(_7)
    SourceInfo(src/map.rs:1184:39-1184:44)
  3: _7 = _2
    SourceInfo(src/map.rs:1184:39-1184:44)
  Terminator {
      source_info: SourceInfo(src/map.rs:1184:9-1184:45)
      kind: _3 = core::slice::<impl [Bucket<K, V>]>::get_mut::<usize>(move _4, move _7) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_7)
    SourceInfo(src/map.rs:1184:44-1184:45)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:1184:44-1184:45)
  Terminator {
      source_info: SourceInfo(src/map.rs:1184:9-1184:66)
      kind: _0 = core::option::Option::<&mut Bucket<K, V>>::map::<(&K, &mut V), for<'a> fn(&'a mut Bucket<K, V>) -> (&'a K, &'a mut V) {Bucket::<K, V>::ref_mut}>(move _3, Bucket::<K, V>::ref_mut) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(src/map.rs:1184:65-1184:66)
  1: StorageDead(_5)
    SourceInfo(src/map.rs:1185:5-1185:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1185:6-1185:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1183:5-1185:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

