Body {
    params: [
        Param {
            hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).1),
            pat: Pat {
                hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).2),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).2),
                    self#0,
                    None,
                ),
                span: src/map.rs:1348:14: 1348:19 (#0),
                default_binding_modes: true,
            },
            ty_span: src/map.rs:1348:14: 1348:19 (#0),
            span: src/map.rs:1348:14: 1348:19 (#0),
        },
        Param {
            hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).3),
            pat: Pat {
                hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).4),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).4),
                    key#0,
                    None,
                ),
                span: src/map.rs:1348:21: 1348:24 (#0),
                default_binding_modes: true,
            },
            ty_span: src/map.rs:1348:26: 1348:28 (#0),
            span: src/map.rs:1348:21: 1348:28 (#0),
        },
    ],
    value: Expr {
        hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).15),
        kind: Block(
            Block {
                stmts: [],
                expr: Some(
                    Expr {
                        hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).5),
                        kind: MethodCall(
                            PathSegment {
                                ident: expect#0,
                                hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).6),
                                res: Err,
                                args: None,
                                infer_args: true,
                            },
                            Expr {
                                hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).7),
                                kind: MethodCall(
                                    PathSegment {
                                        ident: get#0,
                                        hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).8),
                                        res: Err,
                                        args: None,
                                        infer_args: true,
                                    },
                                    Expr {
                                        hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).9),
                                        kind: Path(
                                            Resolved(
                                                None,
                                                Path {
                                                    span: src/map.rs:1349:9: 1349:13 (#0),
                                                    res: Local(
                                                        HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).2),
                                                    ),
                                                    segments: [
                                                        PathSegment {
                                                            ident: self#0,
                                                            hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).10),
                                                            res: Local(
                                                                HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).2),
                                                            ),
                                                            args: None,
                                                            infer_args: true,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ),
                                        span: src/map.rs:1349:9: 1349:13 (#0),
                                    },
                                    [
                                        Expr {
                                            hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).11),
                                            kind: Path(
                                                Resolved(
                                                    None,
                                                    Path {
                                                        span: src/map.rs:1349:18: 1349:21 (#0),
                                                        res: Local(
                                                            HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).4),
                                                        ),
                                                        segments: [
                                                            PathSegment {
                                                                ident: key#0,
                                                                hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).12),
                                                                res: Local(
                                                                    HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).4),
                                                                ),
                                                                args: None,
                                                                infer_args: true,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ),
                                            span: src/map.rs:1349:18: 1349:21 (#0),
                                        },
                                    ],
                                    src/map.rs:1349:14: 1349:22 (#0),
                                ),
                                span: src/map.rs:1349:9: 1349:22 (#0),
                            },
                            [
                                Expr {
                                    hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).13),
                                    kind: Lit(
                                        Spanned {
                                            node: Str(
                                                "no entry found for key",
                                                Cooked,
                                            ),
                                            span: src/map.rs:1349:30: 1349:54 (#0),
                                        },
                                    ),
                                    span: src/map.rs:1349:30: 1349:54 (#0),
                                },
                            ],
                            src/map.rs:1349:23: 1349:55 (#0),
                        ),
                        span: src/map.rs:1349:9: 1349:55 (#0),
                    },
                ),
                hir_id: HirId(DefId(0:1400 ~ indexmap[dd33]::map::{impl#8}::index).14),
                rules: DefaultBlock,
                span: src/map.rs:1348:36: 1350:6 (#0),
                targeted_by_break: false,
            },
            None,
        ),
        span: src/map.rs:1348:36: 1350:6 (#0),
    },
}