bb0
  0: StorageLive(_3)
    SourceInfo(src/map/iter.rs:442:9-442:41)
  1: StorageLive(_4)
    SourceInfo(src/map/iter.rs:442:10-442:30)
  2: StorageLive(_5)
    SourceInfo(src/map/iter.rs:442:10-442:19)
  3: _5 = &((*_1).0: core::slice::Iter<'_, Bucket<K, V>>)
    SourceInfo(src/map/iter.rs:442:10-442:19)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:442:10-442:30)
      kind: _4 = core::slice::Iter::<'_, Bucket<K, V>>::as_slice(move _5) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_5)
    SourceInfo(src/map/iter.rs:442:29-442:30)
  1: StorageLive(_6)
    SourceInfo(src/map/iter.rs:442:31-442:36)
  2: _6 = _2
    SourceInfo(src/map/iter.rs:442:31-442:36)
  3: _7 = Len((*_4))
    SourceInfo(src/map/iter.rs:442:10-442:37)
  4: _8 = Lt(_6, _7)
    SourceInfo(src/map/iter.rs:442:10-442:37)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:442:10-442:37)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _3 = &((*_4)[_6].1: K)
    SourceInfo(src/map/iter.rs:442:9-442:41)
  1: _0 = &(*_3)
    SourceInfo(src/map/iter.rs:442:9-442:41)
  2: StorageDead(_6)
    SourceInfo(src/map/iter.rs:443:5-443:6)
  3: StorageDead(_4)
    SourceInfo(src/map/iter.rs:443:5-443:6)
  4: StorageDead(_3)
    SourceInfo(src/map/iter.rs:443:5-443:6)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:443:6-443:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:441:5-443:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

