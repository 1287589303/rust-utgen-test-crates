bb0
  0: StorageLive(_2)
    SourceInfo(src/map/core.rs:96:13-96:20)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:96:23-96:34)
      kind: _2 = map::core::IndexMapCore::<K, V>::new() -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(src/map/core.rs:96:13-96:20)
  1: StorageLive(_3)
    SourceInfo(src/map/core.rs:97:9-97:29)
  2: StorageLive(_4)
    SourceInfo(src/map/core.rs:97:9-97:12)
  3: _4 = &mut _2
    SourceInfo(src/map/core.rs:97:9-97:12)
  4: StorageLive(_5)
    SourceInfo(src/map/core.rs:97:24-97:28)
  5: _5 = &(*_1)
    SourceInfo(src/map/core.rs:97:24-97:28)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:97:9-97:29)
      kind: _3 = <map::core::IndexMapCore<K, V> as core::clone::Clone>::clone_from(move _4, move _5) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_5)
    SourceInfo(src/map/core.rs:97:28-97:29)
  1: StorageDead(_4)
    SourceInfo(src/map/core.rs:97:28-97:29)
  2: StorageDead(_3)
    SourceInfo(src/map/core.rs:97:29-97:30)
  3: _0 = move _2
    SourceInfo(src/map/core.rs:98:9-98:12)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:99:5-99:6)
      kind: drop(_2) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_2)
    SourceInfo(src/map/core.rs:99:5-99:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:99:6-99:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/map/core.rs:99:5-99:6)
      kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/map/core.rs:95:5-99:6)
      kind: resume
  }
  preds [bb0, bb2, bb4]
  succs []

