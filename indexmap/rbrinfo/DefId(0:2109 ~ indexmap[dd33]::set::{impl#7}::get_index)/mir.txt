bb0
  0: StorageLive(_3)
    SourceInfo(src/set.rs:995:9-995:37)
  1: StorageLive(_4)
    SourceInfo(src/set.rs:995:9-995:26)
  2: StorageLive(_5)
    SourceInfo(src/set.rs:995:9-995:26)
  3: StorageLive(_6)
    SourceInfo(src/set.rs:995:9-995:13)
  4: _6 = &(*_1)
    SourceInfo(src/set.rs:995:9-995:13)
  Terminator {
      source_info: SourceInfo(src/set.rs:995:9-995:26)
      kind: _5 = <set::IndexSet<T, S> as Entries>::as_entries(move _6) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _4 = &(*_5)
    SourceInfo(src/set.rs:995:9-995:26)
  1: StorageDead(_6)
    SourceInfo(src/set.rs:995:25-995:26)
  2: StorageLive(_7)
    SourceInfo(src/set.rs:995:31-995:36)
  3: _7 = _2
    SourceInfo(src/set.rs:995:31-995:36)
  Terminator {
      source_info: SourceInfo(src/set.rs:995:9-995:37)
      kind: _3 = core::slice::<impl [Bucket<T, ()>]>::get::<usize>(move _4, move _7) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_7)
    SourceInfo(src/set.rs:995:36-995:37)
  1: StorageDead(_4)
    SourceInfo(src/set.rs:995:36-995:37)
  Terminator {
      source_info: SourceInfo(src/set.rs:995:9-995:58)
      kind: _0 = core::option::Option::<&Bucket<T, ()>>::map::<&T, for<'a> fn(&'a Bucket<T, ()>) -> &'a T {Bucket::<T, ()>::key_ref}>(move _3, Bucket::<T, ()>::key_ref) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(src/set.rs:995:57-995:58)
  1: StorageDead(_5)
    SourceInfo(src/set.rs:996:5-996:6)
  Terminator {
      source_info: SourceInfo(src/set.rs:996:6-996:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/set.rs:994:5-996:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

