bb0
  0: StorageLive(_4)
    SourceInfo(src/map/core.rs:689:13-689:22)
  1: StorageLive(_5)
    SourceInfo(src/map/core.rs:689:37-689:43)
  2: StorageLive(_6)
    SourceInfo(src/map/core.rs:689:25-689:37)
  3: _6 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:689:25-689:37)
  4: StorageLive(_7)
    SourceInfo(src/map/core.rs:689:38-689:42)
  5: _7 = _2
    SourceInfo(src/map/core.rs:689:38-689:42)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:689:37-689:43)
      kind: _5 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Index<usize>>::index(move _6, move _7) -> [return: bb1, unwind: bb24]
  }
  preds []
  succs [bb1, bb24]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:689:42-689:43)
  1: StorageDead(_6)
    SourceInfo(src/map/core.rs:689:42-689:43)
  2: _4 = ((*_5).0: HashValue)
    SourceInfo(src/map/core.rs:689:25-689:48)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(src/map/core.rs:689:13-689:22)
  4: StorageDead(_5)
    SourceInfo(src/map/core.rs:689:48-689:49)
  5: StorageLive(_8)
    SourceInfo(src/map/core.rs:690:29-690:33)
  6: StorageLive(_9)
    SourceInfo(src/map/core.rs:690:17-690:29)
  7: _9 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:690:17-690:29)
  8: StorageLive(_10)
    SourceInfo(src/map/core.rs:690:30-690:32)
  9: _10 = _3
    SourceInfo(src/map/core.rs:690:30-690:32)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:690:29-690:33)
      kind: _8 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Index<usize>>::index(move _9, move _10) -> [return: bb2, unwind: bb24]
  }
  preds [bb0]
  succs [bb2, bb24]

bb2
  0: StorageDead(_10)
    SourceInfo(src/map/core.rs:690:32-690:33)
  1: StorageDead(_9)
    SourceInfo(src/map/core.rs:690:32-690:33)
  2: PlaceMention((*_8))
    SourceInfo(src/map/core.rs:690:17-690:33)
  3: StorageDead(_8)
    SourceInfo(src/map/core.rs:690:33-690:34)
  4: StorageLive(_11)
    SourceInfo(src/map/core.rs:691:12-691:22)
  5: StorageLive(_12)
    SourceInfo(src/map/core.rs:691:12-691:16)
  6: _12 = _2
    SourceInfo(src/map/core.rs:691:12-691:16)
  7: StorageLive(_13)
    SourceInfo(src/map/core.rs:691:20-691:22)
  8: _13 = _3
    SourceInfo(src/map/core.rs:691:20-691:22)
  9: _11 = Ne(move _12, move _13)
    SourceInfo(src/map/core.rs:691:12-691:22)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:691:12-691:22)
      kind: switchInt(move _11) -> [0: bb22, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb22]

bb3
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:691:21-691:22)
  1: StorageDead(_12)
    SourceInfo(src/map/core.rs:691:21-691:22)
  2: StorageLive(_14)
    SourceInfo(src/map/core.rs:693:13-693:68)
  3: StorageLive(_15)
    SourceInfo(src/map/core.rs:693:26-693:38)
  4: _15 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:693:26-693:38)
  5: StorageLive(_16)
    SourceInfo(src/map/core.rs:693:40-693:49)
  6: _16 = _4
    SourceInfo(src/map/core.rs:693:40-693:49)
  7: StorageLive(_17)
    SourceInfo(src/map/core.rs:693:51-693:55)
  8: _17 = _2
    SourceInfo(src/map/core.rs:693:51-693:55)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:693:13-693:68)
      kind: _14 = map::core::update_index(move _15, move _16, move _17, const core::num::<impl usize>::MAX) -> [return: bb4, unwind: bb24]
  }
  preds [bb2]
  succs [bb4, bb24]

bb4
  0: StorageDead(_17)
    SourceInfo(src/map/core.rs:693:67-693:68)
  1: StorageDead(_16)
    SourceInfo(src/map/core.rs:693:67-693:68)
  2: StorageDead(_15)
    SourceInfo(src/map/core.rs:693:67-693:68)
  3: StorageDead(_14)
    SourceInfo(src/map/core.rs:693:68-693:69)
  4: StorageLive(_18)
    SourceInfo(src/map/core.rs:696:13-702:14)
  5: StorageLive(_19)
    SourceInfo(src/map/core.rs:696:16-696:25)
  6: StorageLive(_20)
    SourceInfo(src/map/core.rs:696:16-696:20)
  7: _20 = _2
    SourceInfo(src/map/core.rs:696:16-696:20)
  8: StorageLive(_21)
    SourceInfo(src/map/core.rs:696:23-696:25)
  9: _21 = _3
    SourceInfo(src/map/core.rs:696:23-696:25)
  10: _19 = Lt(move _20, move _21)
    SourceInfo(src/map/core.rs:696:16-696:25)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:696:16-696:25)
      kind: switchInt(move _19) -> [0: bb12, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb12]

bb5
  0: StorageDead(_21)
    SourceInfo(src/map/core.rs:696:24-696:25)
  1: StorageDead(_20)
    SourceInfo(src/map/core.rs:696:24-696:25)
  2: StorageLive(_22)
    SourceInfo(src/map/core.rs:697:17-697:57)
  3: StorageLive(_23)
    SourceInfo(src/map/core.rs:697:17-697:21)
  4: _23 = &mut (*_1)
    SourceInfo(src/map/core.rs:697:17-697:21)
  5: StorageLive(_24)
    SourceInfo(src/map/core.rs:697:40-697:48)
  6: StorageLive(_25)
    SourceInfo(src/map/core.rs:697:40-697:44)
  7: _25 = _2
    SourceInfo(src/map/core.rs:697:40-697:44)
  8: _26 = AddWithOverflow(_25, const 1_usize)
    SourceInfo(src/map/core.rs:697:40-697:48)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:697:40-697:48)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _25, const 1_usize) -> [success: bb6, unwind: bb24]
  }
  preds [bb4]
  succs [bb6, bb24]

bb6
  0: _24 = move (_26.0: usize)
    SourceInfo(src/map/core.rs:697:40-697:48)
  1: StorageDead(_25)
    SourceInfo(src/map/core.rs:697:47-697:48)
  2: StorageLive(_27)
    SourceInfo(src/map/core.rs:697:50-697:56)
  3: StorageLive(_28)
    SourceInfo(src/map/core.rs:697:50-697:52)
  4: _28 = _3
    SourceInfo(src/map/core.rs:697:50-697:52)
  5: _29 = AddWithOverflow(_28, const 1_usize)
    SourceInfo(src/map/core.rs:697:50-697:56)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:697:50-697:56)
      kind: assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, const 1_usize) -> [success: bb7, unwind: bb24]
  }
  preds [bb5]
  succs [bb7, bb24]

bb7
  0: _27 = move (_29.0: usize)
    SourceInfo(src/map/core.rs:697:50-697:56)
  1: StorageDead(_28)
    SourceInfo(src/map/core.rs:697:55-697:56)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:697:17-697:57)
      kind: _22 = map::core::RefMut::<'_, K, V>::decrement_indices(move _23, move _24, move _27) -> [return: bb8, unwind: bb24]
  }
  preds [bb6]
  succs [bb8, bb24]

bb8
  0: StorageDead(_27)
    SourceInfo(src/map/core.rs:697:56-697:57)
  1: StorageDead(_24)
    SourceInfo(src/map/core.rs:697:56-697:57)
  2: StorageDead(_23)
    SourceInfo(src/map/core.rs:697:56-697:57)
  3: StorageDead(_22)
    SourceInfo(src/map/core.rs:697:57-697:58)
  4: StorageLive(_30)
    SourceInfo(src/map/core.rs:698:17-698:55)
  5: StorageLive(_31)
    SourceInfo(src/map/core.rs:698:17-698:40)
  6: StorageLive(_32)
    SourceInfo(src/map/core.rs:698:29-698:40)
  7: StorageLive(_33)
    SourceInfo(src/map/core.rs:698:17-698:29)
  8: _33 = &mut (*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:698:17-698:29)
  9: StorageLive(_34)
    SourceInfo(src/map/core.rs:698:30-698:39)
  10: StorageLive(_35)
    SourceInfo(src/map/core.rs:698:30-698:34)
  11: _35 = _2
    SourceInfo(src/map/core.rs:698:30-698:34)
  12: StorageLive(_36)
    SourceInfo(src/map/core.rs:698:37-698:39)
  13: _36 = _3
    SourceInfo(src/map/core.rs:698:37-698:39)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:698:30-698:39)
      kind: _34 = core::ops::RangeInclusive::<usize>::new(move _35, move _36) -> [return: bb9, unwind: bb24]
  }
  preds [bb7]
  succs [bb9, bb24]

bb9
  0: StorageDead(_36)
    SourceInfo(src/map/core.rs:698:38-698:39)
  1: StorageDead(_35)
    SourceInfo(src/map/core.rs:698:38-698:39)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:698:29-698:40)
      kind: _32 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::IndexMut<core::ops::RangeInclusive<usize>>>::index_mut(move _33, move _34) -> [return: bb10, unwind: bb24]
  }
  preds [bb8]
  succs [bb10, bb24]

bb10
  0: _31 = &mut (*_32)
    SourceInfo(src/map/core.rs:698:17-698:40)
  1: StorageDead(_34)
    SourceInfo(src/map/core.rs:698:39-698:40)
  2: StorageDead(_33)
    SourceInfo(src/map/core.rs:698:39-698:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:698:17-698:55)
      kind: _30 = core::slice::<impl [Bucket<K, V>]>::rotate_left(move _31, const 1_usize) -> [return: bb11, unwind: bb24]
  }
  preds [bb9]
  succs [bb11, bb24]

bb11
  0: StorageDead(_31)
    SourceInfo(src/map/core.rs:698:54-698:55)
  1: StorageDead(_32)
    SourceInfo(src/map/core.rs:698:55-698:56)
  2: StorageDead(_30)
    SourceInfo(src/map/core.rs:698:55-698:56)
  3: _18 = const ()
    SourceInfo(src/map/core.rs:696:26-699:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:696:13-702:14)
      kind: goto -> bb20
  }
  preds [bb10]
  succs [bb20]

bb12
  0: StorageDead(_21)
    SourceInfo(src/map/core.rs:696:24-696:25)
  1: StorageDead(_20)
    SourceInfo(src/map/core.rs:696:24-696:25)
  2: StorageLive(_37)
    SourceInfo(src/map/core.rs:699:23-699:32)
  3: StorageLive(_38)
    SourceInfo(src/map/core.rs:699:23-699:25)
  4: _38 = _3
    SourceInfo(src/map/core.rs:699:23-699:25)
  5: StorageLive(_39)
    SourceInfo(src/map/core.rs:699:28-699:32)
  6: _39 = _2
    SourceInfo(src/map/core.rs:699:28-699:32)
  7: _37 = Lt(move _38, move _39)
    SourceInfo(src/map/core.rs:699:23-699:32)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:699:23-699:32)
      kind: switchInt(move _37) -> [0: bb18, otherwise: bb13]
  }
  preds [bb4]
  succs [bb13, bb18]

bb13
  0: StorageDead(_39)
    SourceInfo(src/map/core.rs:699:31-699:32)
  1: StorageDead(_38)
    SourceInfo(src/map/core.rs:699:31-699:32)
  2: StorageLive(_40)
    SourceInfo(src/map/core.rs:700:17-700:49)
  3: StorageLive(_41)
    SourceInfo(src/map/core.rs:700:17-700:21)
  4: _41 = &mut (*_1)
    SourceInfo(src/map/core.rs:700:17-700:21)
  5: StorageLive(_42)
    SourceInfo(src/map/core.rs:700:40-700:42)
  6: _42 = _3
    SourceInfo(src/map/core.rs:700:40-700:42)
  7: StorageLive(_43)
    SourceInfo(src/map/core.rs:700:44-700:48)
  8: _43 = _2
    SourceInfo(src/map/core.rs:700:44-700:48)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:700:17-700:49)
      kind: _40 = map::core::RefMut::<'_, K, V>::increment_indices(move _41, move _42, move _43) -> [return: bb14, unwind: bb24]
  }
  preds [bb12]
  succs [bb14, bb24]

bb14
  0: StorageDead(_43)
    SourceInfo(src/map/core.rs:700:48-700:49)
  1: StorageDead(_42)
    SourceInfo(src/map/core.rs:700:48-700:49)
  2: StorageDead(_41)
    SourceInfo(src/map/core.rs:700:48-700:49)
  3: StorageDead(_40)
    SourceInfo(src/map/core.rs:700:49-700:50)
  4: StorageLive(_44)
    SourceInfo(src/map/core.rs:701:17-701:56)
  5: StorageLive(_45)
    SourceInfo(src/map/core.rs:701:17-701:40)
  6: StorageLive(_46)
    SourceInfo(src/map/core.rs:701:29-701:40)
  7: StorageLive(_47)
    SourceInfo(src/map/core.rs:701:17-701:29)
  8: _47 = &mut (*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:701:17-701:29)
  9: StorageLive(_48)
    SourceInfo(src/map/core.rs:701:30-701:39)
  10: StorageLive(_49)
    SourceInfo(src/map/core.rs:701:30-701:32)
  11: _49 = _3
    SourceInfo(src/map/core.rs:701:30-701:32)
  12: StorageLive(_50)
    SourceInfo(src/map/core.rs:701:35-701:39)
  13: _50 = _2
    SourceInfo(src/map/core.rs:701:35-701:39)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:701:30-701:39)
      kind: _48 = core::ops::RangeInclusive::<usize>::new(move _49, move _50) -> [return: bb15, unwind: bb24]
  }
  preds [bb13]
  succs [bb15, bb24]

bb15
  0: StorageDead(_50)
    SourceInfo(src/map/core.rs:701:38-701:39)
  1: StorageDead(_49)
    SourceInfo(src/map/core.rs:701:38-701:39)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:701:29-701:40)
      kind: _46 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::IndexMut<core::ops::RangeInclusive<usize>>>::index_mut(move _47, move _48) -> [return: bb16, unwind: bb24]
  }
  preds [bb14]
  succs [bb16, bb24]

bb16
  0: _45 = &mut (*_46)
    SourceInfo(src/map/core.rs:701:17-701:40)
  1: StorageDead(_48)
    SourceInfo(src/map/core.rs:701:39-701:40)
  2: StorageDead(_47)
    SourceInfo(src/map/core.rs:701:39-701:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:701:17-701:56)
      kind: _44 = core::slice::<impl [Bucket<K, V>]>::rotate_right(move _45, const 1_usize) -> [return: bb17, unwind: bb24]
  }
  preds [bb15]
  succs [bb17, bb24]

bb17
  0: StorageDead(_45)
    SourceInfo(src/map/core.rs:701:55-701:56)
  1: StorageDead(_46)
    SourceInfo(src/map/core.rs:701:56-701:57)
  2: StorageDead(_44)
    SourceInfo(src/map/core.rs:701:56-701:57)
  3: _18 = const ()
    SourceInfo(src/map/core.rs:699:33-702:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:699:20-702:14)
      kind: goto -> bb19
  }
  preds [bb16]
  succs [bb19]

bb18
  0: StorageDead(_39)
    SourceInfo(src/map/core.rs:699:31-699:32)
  1: StorageDead(_38)
    SourceInfo(src/map/core.rs:699:31-699:32)
  2: _18 = const ()
    SourceInfo(src/map/core.rs:702:14-702:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:699:20-702:14)
      kind: goto -> bb19
  }
  preds [bb12]
  succs [bb19]

bb19
  0: StorageDead(_37)
    SourceInfo(src/map/core.rs:702:13-702:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:696:13-702:14)
      kind: goto -> bb20
  }
  preds [bb17, bb18]
  succs [bb20]

bb20
  0: StorageDead(_19)
    SourceInfo(src/map/core.rs:702:13-702:14)
  1: StorageDead(_18)
    SourceInfo(src/map/core.rs:702:13-702:14)
  2: StorageLive(_51)
    SourceInfo(src/map/core.rs:705:13-705:66)
  3: StorageLive(_52)
    SourceInfo(src/map/core.rs:705:26-705:38)
  4: _52 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:705:26-705:38)
  5: StorageLive(_53)
    SourceInfo(src/map/core.rs:705:40-705:49)
  6: _53 = _4
    SourceInfo(src/map/core.rs:705:40-705:49)
  7: StorageLive(_54)
    SourceInfo(src/map/core.rs:705:63-705:65)
  8: _54 = _3
    SourceInfo(src/map/core.rs:705:63-705:65)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:705:13-705:66)
      kind: _51 = map::core::update_index(move _52, move _53, const core::num::<impl usize>::MAX, move _54) -> [return: bb21, unwind: bb24]
  }
  preds [bb11, bb19]
  succs [bb21, bb24]

bb21
  0: StorageDead(_54)
    SourceInfo(src/map/core.rs:705:65-705:66)
  1: StorageDead(_53)
    SourceInfo(src/map/core.rs:705:65-705:66)
  2: StorageDead(_52)
    SourceInfo(src/map/core.rs:705:65-705:66)
  3: StorageDead(_51)
    SourceInfo(src/map/core.rs:705:66-705:67)
  4: _0 = const ()
    SourceInfo(src/map/core.rs:691:23-706:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:691:9-706:10)
      kind: goto -> bb23
  }
  preds [bb20]
  succs [bb23]

bb22
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:691:21-691:22)
  1: StorageDead(_12)
    SourceInfo(src/map/core.rs:691:21-691:22)
  2: _0 = const ()
    SourceInfo(src/map/core.rs:706:10-706:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:691:9-706:10)
      kind: goto -> bb23
  }
  preds [bb2]
  succs [bb23]

bb23
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:706:9-706:10)
  1: StorageDead(_4)
    SourceInfo(src/map/core.rs:707:5-707:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:707:6-707:6)
      kind: return
  }
  preds [bb21, bb22]
  succs []

bb24
  Terminator {
      source_info: SourceInfo(src/map/core.rs:688:5-707:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb6, bb7, bb8, bb9, bb10, bb13, bb14, bb15, bb16, bb20]
  succs []

