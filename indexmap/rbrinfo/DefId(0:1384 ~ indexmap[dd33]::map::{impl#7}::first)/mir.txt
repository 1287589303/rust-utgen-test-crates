bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:1226:9-1226:34)
  1: StorageLive(_3)
    SourceInfo(src/map.rs:1226:9-1226:26)
  2: StorageLive(_4)
    SourceInfo(src/map.rs:1226:9-1226:26)
  3: StorageLive(_5)
    SourceInfo(src/map.rs:1226:9-1226:13)
  4: _5 = &(*_1)
    SourceInfo(src/map.rs:1226:9-1226:13)
  Terminator {
      source_info: SourceInfo(src/map.rs:1226:9-1226:26)
      kind: _4 = <map::IndexMap<K, V, S> as Entries>::as_entries(move _5) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _3 = &(*_4)
    SourceInfo(src/map.rs:1226:9-1226:26)
  1: StorageDead(_5)
    SourceInfo(src/map.rs:1226:25-1226:26)
  Terminator {
      source_info: SourceInfo(src/map.rs:1226:9-1226:34)
      kind: _2 = core::slice::<impl [Bucket<K, V>]>::first(move _3) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_3)
    SourceInfo(src/map.rs:1226:33-1226:34)
  Terminator {
      source_info: SourceInfo(src/map.rs:1226:9-1226:52)
      kind: _0 = core::option::Option::<&Bucket<K, V>>::map::<(&K, &V), for<'a> fn(&'a Bucket<K, V>) -> (&'a K, &'a V) {Bucket::<K, V>::refs}>(move _2, Bucket::<K, V>::refs) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_2)
    SourceInfo(src/map.rs:1226:51-1226:52)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:1227:5-1227:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1227:6-1227:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1225:5-1227:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

