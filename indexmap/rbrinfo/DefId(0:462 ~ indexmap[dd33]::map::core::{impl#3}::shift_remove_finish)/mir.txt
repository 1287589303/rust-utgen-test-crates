bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:605:9-605:62)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:605:9-605:13)
  2: _4 = &mut (*_1)
    SourceInfo(src/map/core.rs:605:9-605:13)
  3: StorageLive(_5)
    SourceInfo(src/map/core.rs:605:32-605:41)
  4: StorageLive(_6)
    SourceInfo(src/map/core.rs:605:32-605:37)
  5: _6 = _2
    SourceInfo(src/map/core.rs:605:32-605:37)
  6: _7 = AddWithOverflow(_6, const 1_usize)
    SourceInfo(src/map/core.rs:605:32-605:41)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:605:32-605:41)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_usize) -> [success: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: _5 = move (_7.0: usize)
    SourceInfo(src/map/core.rs:605:32-605:41)
  1: StorageDead(_6)
    SourceInfo(src/map/core.rs:605:40-605:41)
  2: StorageLive(_8)
    SourceInfo(src/map/core.rs:605:43-605:61)
  3: StorageLive(_9)
    SourceInfo(src/map/core.rs:605:43-605:55)
  4: _9 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:605:43-605:55)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:605:43-605:61)
      kind: _8 = alloc::vec::Vec::<Bucket<K, V>>::len(move _9) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_9)
    SourceInfo(src/map/core.rs:605:60-605:61)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:605:9-605:62)
      kind: _3 = map::core::RefMut::<'_, K, V>::decrement_indices(move _4, move _5, move _8) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_8)
    SourceInfo(src/map/core.rs:605:61-605:62)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:605:61-605:62)
  2: StorageDead(_4)
    SourceInfo(src/map/core.rs:605:61-605:62)
  3: StorageDead(_3)
    SourceInfo(src/map/core.rs:605:62-605:63)
  4: StorageLive(_10)
    SourceInfo(src/map/core.rs:608:13-608:18)
  5: StorageLive(_11)
    SourceInfo(src/map/core.rs:608:21-608:33)
  6: _11 = &mut (*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:608:21-608:33)
  7: StorageLive(_12)
    SourceInfo(src/map/core.rs:608:41-608:46)
  8: _12 = _2
    SourceInfo(src/map/core.rs:608:41-608:46)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:608:21-608:47)
      kind: _10 = alloc::vec::Vec::<Bucket<K, V>>::remove(move _11, move _12) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_12)
    SourceInfo(src/map/core.rs:608:46-608:47)
  1: StorageDead(_11)
    SourceInfo(src/map/core.rs:608:46-608:47)
  2: FakeRead(ForLet(None), _10)
    SourceInfo(src/map/core.rs:608:13-608:18)
  3: StorageLive(_13)
    SourceInfo(src/map/core.rs:609:10-609:19)
  4: _13 = move (_10.1: K)
    SourceInfo(src/map/core.rs:609:10-609:19)
  5: StorageLive(_14)
    SourceInfo(src/map/core.rs:609:21-609:32)
  6: _14 = move (_10.2: V)
    SourceInfo(src/map/core.rs:609:21-609:32)
  7: _0 = (move _13, move _14)
    SourceInfo(src/map/core.rs:609:9-609:33)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:609:32-609:33)
      kind: drop(_14) -> [return: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: StorageDead(_14)
    SourceInfo(src/map/core.rs:609:32-609:33)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:609:32-609:33)
      kind: drop(_13) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:609:32-609:33)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:610:5-610:6)
      kind: drop(_10) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_10)
    SourceInfo(src/map/core.rs:610:5-610:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:610:6-610:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(src/map/core.rs:609:32-609:33)
      kind: drop(_13) -> [return: bb9, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(src/map/core.rs:610:5-610:6)
      kind: drop(_10) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb5, bb8]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/map/core.rs:603:5-610:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb6, bb9]
  succs []

