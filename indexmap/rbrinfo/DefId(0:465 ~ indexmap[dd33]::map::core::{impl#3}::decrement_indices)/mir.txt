bb0
  0: StorageLive(_4)
    SourceInfo(src/map/core.rs:648:13-648:28)
  1: StorageLive(_5)
    SourceInfo(src/map/core.rs:648:44-648:56)
  2: StorageLive(_6)
    SourceInfo(src/map/core.rs:648:32-648:44)
  3: _6 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:648:32-648:44)
  4: StorageLive(_7)
    SourceInfo(src/map/core.rs:648:45-648:55)
  5: StorageLive(_8)
    SourceInfo(src/map/core.rs:648:45-648:50)
  6: _8 = _2
    SourceInfo(src/map/core.rs:648:45-648:50)
  7: StorageLive(_9)
    SourceInfo(src/map/core.rs:648:52-648:55)
  8: _9 = _3
    SourceInfo(src/map/core.rs:648:52-648:55)
  9: _7 = core::ops::Range::<usize> { start: move _8, end: move _9 }
    SourceInfo(src/map/core.rs:648:45-648:55)
  10: StorageDead(_9)
    SourceInfo(src/map/core.rs:648:54-648:55)
  11: StorageDead(_8)
    SourceInfo(src/map/core.rs:648:54-648:55)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:648:44-648:56)
      kind: _5 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Index<core::ops::Range<usize>>>::index(move _6, move _7) -> [return: bb1, unwind: bb34]
  }
  preds []
  succs [bb1, bb34]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:648:55-648:56)
  1: StorageDead(_6)
    SourceInfo(src/map/core.rs:648:55-648:56)
  2: _4 = &(*_5)
    SourceInfo(src/map/core.rs:648:31-648:56)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(src/map/core.rs:648:13-648:28)
  4: StorageLive(_10)
    SourceInfo(src/map/core.rs:649:12-649:63)
  5: StorageLive(_11)
    SourceInfo(src/map/core.rs:649:12-649:33)
  6: StorageLive(_12)
    SourceInfo(src/map/core.rs:649:12-649:27)
  7: _12 = &(*_4)
    SourceInfo(src/map/core.rs:649:12-649:27)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:649:12-649:33)
      kind: _11 = core::slice::<impl [Bucket<K, V>]>::len(move _12) -> [return: bb2, unwind: bb34]
  }
  preds [bb0]
  succs [bb2, bb34]

bb2
  0: StorageDead(_12)
    SourceInfo(src/map/core.rs:649:32-649:33)
  1: StorageLive(_13)
    SourceInfo(src/map/core.rs:649:36-649:63)
  2: StorageLive(_14)
    SourceInfo(src/map/core.rs:649:36-649:59)
  3: StorageLive(_15)
    SourceInfo(src/map/core.rs:649:36-649:48)
  4: _15 = &(*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:649:36-649:48)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:649:36-649:59)
      kind: _14 = hashbrown::HashTable::<usize>::capacity(move _15) -> [return: bb3, unwind: bb34]
  }
  preds [bb1]
  succs [bb3, bb34]

bb3
  0: StorageDead(_15)
    SourceInfo(src/map/core.rs:649:58-649:59)
  1: _16 = Eq(const 2_usize, const 0_usize)
    SourceInfo(src/map/core.rs:649:36-649:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:649:36-649:63)
      kind: assert(!move _16, "attempt to divide `{}` by zero", _14) -> [success: bb4, unwind: bb34]
  }
  preds [bb2]
  succs [bb4, bb34]

bb4
  0: _13 = Div(move _14, const 2_usize)
    SourceInfo(src/map/core.rs:649:36-649:63)
  1: StorageDead(_14)
    SourceInfo(src/map/core.rs:649:62-649:63)
  2: _10 = Gt(move _11, move _13)
    SourceInfo(src/map/core.rs:649:12-649:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:649:12-649:63)
      kind: switchInt(move _10) -> [0: bb21, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb21]

bb5
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:649:62-649:63)
  1: StorageDead(_11)
    SourceInfo(src/map/core.rs:649:62-649:63)
  2: StorageLive(_17)
    SourceInfo(src/map/core.rs:651:22-651:40)
  3: StorageLive(_18)
    SourceInfo(src/map/core.rs:651:22-651:40)
  4: _18 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:651:22-651:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:22-651:40)
      kind: _17 = <&mut hashbrown::HashTable<usize> as core::iter::IntoIterator>::into_iter(move _18) -> [return: bb6, unwind: bb34]
  }
  preds [bb4]
  succs [bb6, bb34]

bb6
  0: StorageDead(_18)
    SourceInfo(src/map/core.rs:651:39-651:40)
  1: PlaceMention(_17)
    SourceInfo(src/map/core.rs:651:22-651:40)
  2: StorageLive(_19)
    SourceInfo(src/map/core.rs:651:22-651:40)
  3: _19 = move _17
    SourceInfo(src/map/core.rs:651:22-651:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:13-655:14)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:13-655:14)
      kind: falseUnwind -> [real: bb8, unwind: bb34]
  }
  preds [bb6, bb20]
  succs [bb8, bb34]

bb8
  0: StorageLive(_21)
    SourceInfo(src/map/core.rs:651:22-651:40)
  1: StorageLive(_22)
    SourceInfo(src/map/core.rs:651:22-651:40)
  2: StorageLive(_23)
    SourceInfo(src/map/core.rs:651:22-651:40)
  3: StorageLive(_24)
    SourceInfo(src/map/core.rs:651:22-651:40)
  4: _24 = &mut _19
    SourceInfo(src/map/core.rs:651:22-651:40)
  5: _23 = &mut (*_24)
    SourceInfo(src/map/core.rs:651:22-651:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:22-651:40)
      kind: _22 = <hashbrown::hash_table::IterMut<'_, usize> as core::iter::Iterator>::next(move _23) -> [return: bb9, unwind: bb34]
  }
  preds [bb7]
  succs [bb9, bb34]

bb9
  0: StorageDead(_23)
    SourceInfo(src/map/core.rs:651:39-651:40)
  1: PlaceMention(_22)
    SourceInfo(src/map/core.rs:651:22-651:40)
  2: _25 = discriminant(_22)
    SourceInfo(src/map/core.rs:651:22-651:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:22-651:40)
      kind: switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb10]
  }
  preds [bb8]
  succs [bb10, bb11, bb12]

bb10
  0: FakeRead(ForMatchedPlace(None), _22)
    SourceInfo(src/map/core.rs:651:22-651:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:22-651:40)
      kind: unreachable
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:13-655:14)
      kind: falseEdge -> [real: bb13, imaginary: bb12]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: StorageLive(_27)
    SourceInfo(src/map/core.rs:651:17-651:18)
  1: _27 = move ((_22 as Some).0: &mut usize)
    SourceInfo(src/map/core.rs:651:17-651:18)
  2: StorageLive(_28)
    SourceInfo(src/map/core.rs:652:20-652:31)
  3: StorageLive(_29)
    SourceInfo(src/map/core.rs:652:20-652:25)
  4: _29 = _2
    SourceInfo(src/map/core.rs:652:20-652:25)
  5: StorageLive(_30)
    SourceInfo(src/map/core.rs:652:29-652:31)
  6: _30 = (*_27)
    SourceInfo(src/map/core.rs:652:29-652:31)
  7: _28 = Le(move _29, move _30)
    SourceInfo(src/map/core.rs:652:20-652:31)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:652:20-652:31)
      kind: switchInt(move _28) -> [0: bb18, otherwise: bb14]
  }
  preds [bb9, bb11]
  succs [bb14, bb18]

bb13
  0: _0 = const ()
    SourceInfo(src/map/core.rs:651:13-655:14)
  1: StorageDead(_24)
    SourceInfo(src/map/core.rs:655:13-655:14)
  2: StorageDead(_22)
    SourceInfo(src/map/core.rs:655:13-655:14)
  3: StorageDead(_21)
    SourceInfo(src/map/core.rs:655:13-655:14)
  4: StorageDead(_19)
    SourceInfo(src/map/core.rs:655:13-655:14)
  5: StorageDead(_17)
    SourceInfo(src/map/core.rs:655:13-655:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:649:9-661:10)
      kind: goto -> bb33
  }
  preds [bb11]
  succs [bb33]

bb14
  0: StorageDead(_30)
    SourceInfo(src/map/core.rs:652:30-652:31)
  1: StorageDead(_29)
    SourceInfo(src/map/core.rs:652:30-652:31)
  2: StorageLive(_31)
    SourceInfo(src/map/core.rs:652:35-652:43)
  3: StorageLive(_32)
    SourceInfo(src/map/core.rs:652:35-652:37)
  4: _32 = (*_27)
    SourceInfo(src/map/core.rs:652:35-652:37)
  5: StorageLive(_33)
    SourceInfo(src/map/core.rs:652:40-652:43)
  6: _33 = _3
    SourceInfo(src/map/core.rs:652:40-652:43)
  7: _31 = Lt(move _32, move _33)
    SourceInfo(src/map/core.rs:652:35-652:43)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:652:35-652:43)
      kind: switchInt(move _31) -> [0: bb17, otherwise: bb15]
  }
  preds [bb12]
  succs [bb15, bb17]

bb15
  0: StorageDead(_33)
    SourceInfo(src/map/core.rs:652:42-652:43)
  1: StorageDead(_32)
    SourceInfo(src/map/core.rs:652:42-652:43)
  2: _34 = SubWithOverflow((*_27), const 1_usize)
    SourceInfo(src/map/core.rs:653:21-653:28)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:653:21-653:28)
      kind: assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_27), const 1_usize) -> [success: bb16, unwind: bb34]
  }
  preds [bb14]
  succs [bb16, bb34]

bb16
  0: (*_27) = move (_34.0: usize)
    SourceInfo(src/map/core.rs:653:21-653:28)
  1: _21 = const ()
    SourceInfo(src/map/core.rs:652:44-654:18)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:652:17-654:18)
      kind: goto -> bb20
  }
  preds [bb15]
  succs [bb20]

bb17
  0: StorageDead(_33)
    SourceInfo(src/map/core.rs:652:42-652:43)
  1: StorageDead(_32)
    SourceInfo(src/map/core.rs:652:42-652:43)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb14]
  succs [bb19]

bb18
  0: StorageDead(_30)
    SourceInfo(src/map/core.rs:652:30-652:31)
  1: StorageDead(_29)
    SourceInfo(src/map/core.rs:652:30-652:31)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb12]
  succs [bb19]

bb19
  0: _21 = const ()
    SourceInfo(src/map/core.rs:654:18-654:18)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:652:17-654:18)
      kind: goto -> bb20
  }
  preds [bb17, bb18]
  succs [bb20]

bb20
  0: StorageDead(_31)
    SourceInfo(src/map/core.rs:654:17-654:18)
  1: StorageDead(_28)
    SourceInfo(src/map/core.rs:654:17-654:18)
  2: StorageDead(_27)
    SourceInfo(src/map/core.rs:655:13-655:14)
  3: StorageDead(_24)
    SourceInfo(src/map/core.rs:655:13-655:14)
  4: StorageDead(_22)
    SourceInfo(src/map/core.rs:655:13-655:14)
  5: StorageDead(_21)
    SourceInfo(src/map/core.rs:655:13-655:14)
  6: _20 = const ()
    SourceInfo(src/map/core.rs:651:13-655:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:651:13-655:14)
      kind: goto -> bb7
  }
  preds [bb16, bb19]
  succs [bb7]

bb21
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:649:62-649:63)
  1: StorageDead(_11)
    SourceInfo(src/map/core.rs:649:62-649:63)
  2: StorageLive(_35)
    SourceInfo(src/map/core.rs:658:31-658:64)
  3: StorageLive(_36)
    SourceInfo(src/map/core.rs:658:31-658:64)
  4: StorageLive(_37)
    SourceInfo(src/map/core.rs:658:31-658:43)
  5: StorageLive(_38)
    SourceInfo(src/map/core.rs:658:32-658:37)
  6: _38 = _2
    SourceInfo(src/map/core.rs:658:32-658:37)
  7: StorageLive(_39)
    SourceInfo(src/map/core.rs:658:39-658:42)
  8: _39 = _3
    SourceInfo(src/map/core.rs:658:39-658:42)
  9: _37 = core::ops::Range::<usize> { start: move _38, end: move _39 }
    SourceInfo(src/map/core.rs:658:31-658:43)
  10: StorageDead(_39)
    SourceInfo(src/map/core.rs:658:42-658:43)
  11: StorageDead(_38)
    SourceInfo(src/map/core.rs:658:42-658:43)
  12: StorageLive(_40)
    SourceInfo(src/map/core.rs:658:48-658:63)
  13: _40 = _4
    SourceInfo(src/map/core.rs:658:48-658:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:31-658:64)
      kind: _36 = <core::ops::Range<usize> as core::iter::Iterator>::zip::<&[Bucket<K, V>]>(move _37, move _40) -> [return: bb22, unwind: bb34]
  }
  preds [bb4]
  succs [bb22, bb34]

bb22
  0: StorageDead(_40)
    SourceInfo(src/map/core.rs:658:63-658:64)
  1: StorageDead(_37)
    SourceInfo(src/map/core.rs:658:63-658:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:31-658:64)
      kind: _35 = <core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'_, Bucket<K, V>>> as core::iter::IntoIterator>::into_iter(move _36) -> [return: bb23, unwind: bb34]
  }
  preds [bb21]
  succs [bb23, bb34]

bb23
  0: StorageDead(_36)
    SourceInfo(src/map/core.rs:658:63-658:64)
  1: PlaceMention(_35)
    SourceInfo(src/map/core.rs:658:31-658:64)
  2: StorageLive(_41)
    SourceInfo(src/map/core.rs:658:31-658:64)
  3: _41 = move _35
    SourceInfo(src/map/core.rs:658:31-658:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:13-660:14)
      kind: goto -> bb24
  }
  preds [bb22]
  succs [bb24]

bb24
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:13-660:14)
      kind: falseUnwind -> [real: bb25, unwind: bb34]
  }
  preds [bb23, bb32]
  succs [bb25, bb34]

bb25
  0: StorageLive(_42)
    SourceInfo(src/map/core.rs:658:31-658:64)
  1: StorageLive(_43)
    SourceInfo(src/map/core.rs:658:31-658:64)
  2: StorageLive(_44)
    SourceInfo(src/map/core.rs:658:31-658:64)
  3: StorageLive(_45)
    SourceInfo(src/map/core.rs:658:31-658:64)
  4: _45 = &mut _41
    SourceInfo(src/map/core.rs:658:31-658:64)
  5: _44 = &mut (*_45)
    SourceInfo(src/map/core.rs:658:31-658:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:31-658:64)
      kind: _43 = <core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'_, Bucket<K, V>>> as core::iter::Iterator>::next(move _44) -> [return: bb26, unwind: bb34]
  }
  preds [bb24]
  succs [bb26, bb34]

bb26
  0: StorageDead(_44)
    SourceInfo(src/map/core.rs:658:63-658:64)
  1: PlaceMention(_43)
    SourceInfo(src/map/core.rs:658:31-658:64)
  2: _46 = discriminant(_43)
    SourceInfo(src/map/core.rs:658:31-658:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:31-658:64)
      kind: switchInt(move _46) -> [0: bb28, 1: bb29, otherwise: bb27]
  }
  preds [bb25]
  succs [bb27, bb28, bb29]

bb27
  0: FakeRead(ForMatchedPlace(None), _43)
    SourceInfo(src/map/core.rs:658:31-658:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:31-658:64)
      kind: unreachable
  }
  preds [bb26]
  succs []

bb28
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:13-660:14)
      kind: falseEdge -> [real: bb30, imaginary: bb29]
  }
  preds [bb26]
  succs [bb29, bb30]

bb29
  0: StorageLive(_48)
    SourceInfo(src/map/core.rs:658:18-658:19)
  1: _48 = (((_43 as Some).0: (usize, &Bucket<K, V>)).0: usize)
    SourceInfo(src/map/core.rs:658:18-658:19)
  2: StorageLive(_49)
    SourceInfo(src/map/core.rs:658:21-658:26)
  3: _49 = (((_43 as Some).0: (usize, &Bucket<K, V>)).1: &Bucket<K, V>)
    SourceInfo(src/map/core.rs:658:21-658:26)
  4: StorageLive(_50)
    SourceInfo(src/map/core.rs:659:17-659:65)
  5: StorageLive(_51)
    SourceInfo(src/map/core.rs:659:30-659:42)
  6: _51 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:659:30-659:42)
  7: StorageLive(_52)
    SourceInfo(src/map/core.rs:659:44-659:54)
  8: _52 = ((*_49).0: HashValue)
    SourceInfo(src/map/core.rs:659:44-659:54)
  9: StorageLive(_53)
    SourceInfo(src/map/core.rs:659:56-659:57)
  10: _53 = _48
    SourceInfo(src/map/core.rs:659:56-659:57)
  11: StorageLive(_54)
    SourceInfo(src/map/core.rs:659:59-659:64)
  12: StorageLive(_55)
    SourceInfo(src/map/core.rs:659:59-659:60)
  13: _55 = _48
    SourceInfo(src/map/core.rs:659:59-659:60)
  14: _56 = SubWithOverflow(_55, const 1_usize)
    SourceInfo(src/map/core.rs:659:59-659:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:659:59-659:64)
      kind: assert(!move (_56.1: bool), "attempt to compute `{} - {}`, which would overflow", move _55, const 1_usize) -> [success: bb31, unwind: bb34]
  }
  preds [bb26, bb28]
  succs [bb31, bb34]

bb30
  0: _0 = const ()
    SourceInfo(src/map/core.rs:658:13-660:14)
  1: StorageDead(_45)
    SourceInfo(src/map/core.rs:660:13-660:14)
  2: StorageDead(_43)
    SourceInfo(src/map/core.rs:660:13-660:14)
  3: StorageDead(_42)
    SourceInfo(src/map/core.rs:660:13-660:14)
  4: StorageDead(_41)
    SourceInfo(src/map/core.rs:660:13-660:14)
  5: StorageDead(_35)
    SourceInfo(src/map/core.rs:660:13-660:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:649:9-661:10)
      kind: goto -> bb33
  }
  preds [bb28]
  succs [bb33]

bb31
  0: _54 = move (_56.0: usize)
    SourceInfo(src/map/core.rs:659:59-659:64)
  1: StorageDead(_55)
    SourceInfo(src/map/core.rs:659:63-659:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:659:17-659:65)
      kind: _50 = map::core::update_index(move _51, move _52, move _53, move _54) -> [return: bb32, unwind: bb34]
  }
  preds [bb29]
  succs [bb32, bb34]

bb32
  0: StorageDead(_54)
    SourceInfo(src/map/core.rs:659:64-659:65)
  1: StorageDead(_53)
    SourceInfo(src/map/core.rs:659:64-659:65)
  2: StorageDead(_52)
    SourceInfo(src/map/core.rs:659:64-659:65)
  3: StorageDead(_51)
    SourceInfo(src/map/core.rs:659:64-659:65)
  4: StorageDead(_50)
    SourceInfo(src/map/core.rs:659:65-659:66)
  5: _42 = const ()
    SourceInfo(src/map/core.rs:658:65-660:14)
  6: StorageDead(_49)
    SourceInfo(src/map/core.rs:660:13-660:14)
  7: StorageDead(_48)
    SourceInfo(src/map/core.rs:660:13-660:14)
  8: StorageDead(_45)
    SourceInfo(src/map/core.rs:660:13-660:14)
  9: StorageDead(_43)
    SourceInfo(src/map/core.rs:660:13-660:14)
  10: StorageDead(_42)
    SourceInfo(src/map/core.rs:660:13-660:14)
  11: _20 = const ()
    SourceInfo(src/map/core.rs:658:13-660:14)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:658:13-660:14)
      kind: goto -> bb24
  }
  preds [bb31]
  succs [bb24]

bb33
  0: StorageDead(_10)
    SourceInfo(src/map/core.rs:661:9-661:10)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:662:5-662:6)
  2: StorageDead(_4)
    SourceInfo(src/map/core.rs:662:5-662:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:662:6-662:6)
      kind: return
  }
  preds [bb13, bb30]
  succs []

bb34
  Terminator {
      source_info: SourceInfo(src/map/core.rs:646:5-662:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb5, bb7, bb8, bb15, bb21, bb22, bb24, bb25, bb29, bb31]
  succs []

