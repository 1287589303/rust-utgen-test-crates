bb0
  0: StorageLive(_3)
    SourceInfo(src/map/iter.rs:635:13-635:17)
  1: StorageLive(_4)
    SourceInfo(src/map/iter.rs:635:20-635:47)
  2: StorageLive(_5)
    SourceInfo(src/map/iter.rs:635:20-635:40)
  3: StorageLive(_6)
    SourceInfo(src/map/iter.rs:635:20-635:40)
  4: StorageLive(_7)
    SourceInfo(src/map/iter.rs:635:20-635:29)
  5: _7 = &((*_1).0: alloc::vec::IntoIter<Bucket<K, V>>)
    SourceInfo(src/map/iter.rs:635:20-635:29)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:635:20-635:40)
      kind: _6 = alloc::vec::IntoIter::<Bucket<K, V>>::as_slice(move _7) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: _5 = &(*_6)
    SourceInfo(src/map/iter.rs:635:20-635:40)
  1: StorageDead(_7)
    SourceInfo(src/map/iter.rs:635:39-635:40)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:635:20-635:47)
      kind: _4 = core::slice::<impl [Bucket<K, V>]>::iter(move _5) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_5)
    SourceInfo(src/map/iter.rs:635:46-635:47)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:635:20-635:70)
      kind: _3 = <core::slice::Iter<'_, Bucket<K, V>> as core::iter::Iterator>::map::<&V, for<'a> fn(&'a Bucket<K, V>) -> &'a V {Bucket::<K, V>::value_ref}>(move _4, Bucket::<K, V>::value_ref) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_4)
    SourceInfo(src/map/iter.rs:635:69-635:70)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/map/iter.rs:635:13-635:17)
  2: StorageDead(_6)
    SourceInfo(src/map/iter.rs:635:70-635:71)
  3: StorageLive(_8)
    SourceInfo(src/map/iter.rs:636:9-636:37)
  4: StorageLive(_9)
    SourceInfo(src/map/iter.rs:636:9-636:37)
  5: StorageLive(_10)
    SourceInfo(src/map/iter.rs:636:9-636:23)
  6: StorageLive(_11)
    SourceInfo(src/map/iter.rs:636:9-636:23)
  7: StorageLive(_12)
    SourceInfo(src/map/iter.rs:636:9-636:10)
  8: _12 = &mut (*_2)
    SourceInfo(src/map/iter.rs:636:9-636:10)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:636:9-636:23)
      kind: _11 = core::fmt::Formatter::<'_>::debug_list(move _12) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _10 = &mut _11
    SourceInfo(src/map/iter.rs:636:9-636:23)
  1: StorageDead(_12)
    SourceInfo(src/map/iter.rs:636:22-636:23)
  2: StorageLive(_13)
    SourceInfo(src/map/iter.rs:636:32-636:36)
  3: _13 = move _3
    SourceInfo(src/map/iter.rs:636:32-636:36)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:636:9-636:37)
      kind: _9 = core::fmt::DebugList::<'_, '_>::entries::<&V, core::iter::Map<core::slice::Iter<'_, Bucket<K, V>>, for<'a> fn(&'a Bucket<K, V>) -> &'a V {Bucket::<K, V>::value_ref}>>(move _10, move _13) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _8 = &mut (*_9)
    SourceInfo(src/map/iter.rs:636:9-636:37)
  1: StorageDead(_13)
    SourceInfo(src/map/iter.rs:636:36-636:37)
  2: StorageDead(_10)
    SourceInfo(src/map/iter.rs:636:36-636:37)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:636:9-636:46)
      kind: _0 = core::fmt::DebugList::<'_, '_>::finish(move _8) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_8)
    SourceInfo(src/map/iter.rs:636:45-636:46)
  1: StorageDead(_3)
    SourceInfo(src/map/iter.rs:637:5-637:6)
  2: StorageDead(_11)
    SourceInfo(src/map/iter.rs:637:5-637:6)
  3: StorageDead(_9)
    SourceInfo(src/map/iter.rs:637:5-637:6)
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:637:6-637:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/map/iter.rs:634:5-637:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

