bb0
  0: StorageLive(_6)
    SourceInfo(src/map/core.rs:570:13-570:16)
  1: StorageLive(_7)
    SourceInfo(src/map/core.rs:570:19-570:31)
  2: _7 = &(*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:570:19-570:31)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:570:19-570:37)
      kind: _6 = hashbrown::HashTable::<usize>::len(move _7) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:570:36-570:37)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(src/map/core.rs:570:13-570:16)
  2: StorageLive(_8)
    SourceInfo(src/map/core.rs:571:9-571:30)
  3: StorageLive(_9)
    SourceInfo(src/map/core.rs:571:17-571:29)
  4: StorageLive(_10)
    SourceInfo(src/map/core.rs:571:17-571:22)
  5: _10 = _2
    SourceInfo(src/map/core.rs:571:17-571:22)
  6: StorageLive(_11)
    SourceInfo(src/map/core.rs:571:26-571:29)
  7: _11 = _6
    SourceInfo(src/map/core.rs:571:26-571:29)
  8: _9 = Le(move _10, move _11)
    SourceInfo(src/map/core.rs:571:17-571:29)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:571:17-571:29)
      kind: switchInt(move _9) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:571:28-571:29)
  1: StorageDead(_10)
    SourceInfo(src/map/core.rs:571:28-571:29)
  2: _8 = const ()
    SourceInfo(src/map/core.rs:571:30-571:30)
  3: StorageDead(_9)
    SourceInfo(src/map/core.rs:571:29-571:30)
  4: StorageDead(_8)
    SourceInfo(src/map/core.rs:571:29-571:30)
  5: StorageLive(_13)
    SourceInfo(src/map/core.rs:573:9-573:43)
  6: StorageLive(_14)
    SourceInfo(src/map/core.rs:573:9-573:13)
  7: _14 = &mut (*_1)
    SourceInfo(src/map/core.rs:573:9-573:13)
  8: StorageLive(_15)
    SourceInfo(src/map/core.rs:573:32-573:37)
  9: _15 = _2
    SourceInfo(src/map/core.rs:573:32-573:37)
  10: StorageLive(_16)
    SourceInfo(src/map/core.rs:573:39-573:42)
  11: _16 = _6
    SourceInfo(src/map/core.rs:573:39-573:42)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:573:9-573:43)
      kind: _13 = map::core::RefMut::<'_, K, V>::increment_indices(move _14, move _15, move _16) -> [return: bb4, unwind: bb20]
  }
  preds [bb1]
  succs [bb4, bb20]

bb3
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:571:28-571:29)
  1: StorageDead(_10)
    SourceInfo(src/map/core.rs:571:28-571:29)
  2: StorageLive(_12)
    SourceInfo(src/map/core.rs:571:9-571:30)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:571:9-571:30)
      kind: _12 = core::panicking::panic(const "assertion failed: index <= end") -> bb20
  }
  preds [bb1]
  succs [bb20]

bb4
  0: StorageDead(_16)
    SourceInfo(src/map/core.rs:573:42-573:43)
  1: StorageDead(_15)
    SourceInfo(src/map/core.rs:573:42-573:43)
  2: StorageDead(_14)
    SourceInfo(src/map/core.rs:573:42-573:43)
  3: StorageDead(_13)
    SourceInfo(src/map/core.rs:573:43-573:44)
  4: StorageLive(_17)
    SourceInfo(src/map/core.rs:574:13-574:20)
  5: _17 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:574:23-574:37)
  6: FakeRead(ForLet(None), _17)
    SourceInfo(src/map/core.rs:574:13-574:20)
  7: StorageLive(_18)
    SourceInfo(src/map/core.rs:575:9-580:11)
  8: StorageLive(_19)
    SourceInfo(src/map/core.rs:575:9-575:21)
  9: _19 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:575:9-575:21)
  10: StorageLive(_20)
    SourceInfo(src/map/core.rs:575:36-575:46)
  11: StorageLive(_21)
    SourceInfo(src/map/core.rs:575:36-575:40)
  12: _21 = _3
    SourceInfo(src/map/core.rs:575:36-575:40)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:575:36-575:46)
      kind: _20 = HashValue::get(move _21) -> [return: bb5, unwind: bb20]
  }
  preds [bb2]
  succs [bb5, bb20]

bb5
  0: StorageDead(_21)
    SourceInfo(src/map/core.rs:575:45-575:46)
  1: StorageLive(_22)
    SourceInfo(src/map/core.rs:575:48-575:53)
  2: _22 = _2
    SourceInfo(src/map/core.rs:575:48-575:53)
  3: StorageLive(_23)
    SourceInfo(src/map/core.rs:575:55-580:10)
  4: _23 = {closure@src/map/core.rs:575:55: 575:64} { index: _2, entries: _17 }
    SourceInfo(src/map/core.rs:575:55-580:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:575:9-580:11)
      kind: _18 = hashbrown::HashTable::<usize>::insert_unique::<{closure@src/map/core.rs:575:55: 575:64}>(move _19, move _20, move _22, move _23) -> [return: bb6, unwind: bb20]
  }
  preds [bb4]
  succs [bb6, bb20]

bb6
  0: StorageDead(_23)
    SourceInfo(src/map/core.rs:580:10-580:11)
  1: StorageDead(_22)
    SourceInfo(src/map/core.rs:580:10-580:11)
  2: StorageDead(_20)
    SourceInfo(src/map/core.rs:580:10-580:11)
  3: StorageDead(_19)
    SourceInfo(src/map/core.rs:580:10-580:11)
  4: StorageDead(_18)
    SourceInfo(src/map/core.rs:580:11-580:12)
  5: StorageLive(_24)
    SourceInfo(src/map/core.rs:581:9-585:10)
  6: StorageLive(_25)
    SourceInfo(src/map/core.rs:581:12-581:57)
  7: StorageLive(_26)
    SourceInfo(src/map/core.rs:581:12-581:30)
  8: StorageLive(_27)
    SourceInfo(src/map/core.rs:581:12-581:24)
  9: _27 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:581:12-581:24)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:581:12-581:30)
      kind: _26 = alloc::vec::Vec::<Bucket<K, V>>::len(move _27) -> [return: bb7, unwind: bb20]
  }
  preds [bb5]
  succs [bb7, bb20]

bb7
  0: StorageDead(_27)
    SourceInfo(src/map/core.rs:581:29-581:30)
  1: StorageLive(_28)
    SourceInfo(src/map/core.rs:581:34-581:57)
  2: StorageLive(_29)
    SourceInfo(src/map/core.rs:581:34-581:46)
  3: _29 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:581:34-581:46)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:581:34-581:57)
      kind: _28 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _29) -> [return: bb8, unwind: bb20]
  }
  preds [bb6]
  succs [bb8, bb20]

bb8
  0: StorageDead(_29)
    SourceInfo(src/map/core.rs:581:56-581:57)
  1: _25 = Eq(move _26, move _28)
    SourceInfo(src/map/core.rs:581:12-581:57)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:581:12-581:57)
      kind: switchInt(move _25) -> [0: bb11, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: StorageDead(_28)
    SourceInfo(src/map/core.rs:581:56-581:57)
  1: StorageDead(_26)
    SourceInfo(src/map/core.rs:581:56-581:57)
  2: StorageLive(_30)
    SourceInfo(src/map/core.rs:584:13-584:36)
  3: StorageLive(_31)
    SourceInfo(src/map/core.rs:584:13-584:17)
  4: _31 = &mut (*_1)
    SourceInfo(src/map/core.rs:584:13-584:17)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:584:13-584:36)
      kind: _30 = map::core::RefMut::<'_, K, V>::reserve_entries(move _31, const 1_usize) -> [return: bb10, unwind: bb20]
  }
  preds [bb8]
  succs [bb10, bb20]

bb10
  0: StorageDead(_31)
    SourceInfo(src/map/core.rs:584:35-584:36)
  1: StorageDead(_30)
    SourceInfo(src/map/core.rs:584:36-584:37)
  2: _24 = const ()
    SourceInfo(src/map/core.rs:581:58-585:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:581:9-585:10)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: StorageDead(_28)
    SourceInfo(src/map/core.rs:581:56-581:57)
  1: StorageDead(_26)
    SourceInfo(src/map/core.rs:581:56-581:57)
  2: _24 = const ()
    SourceInfo(src/map/core.rs:585:10-585:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:581:9-585:10)
      kind: goto -> bb12
  }
  preds [bb8]
  succs [bb12]

bb12
  0: StorageDead(_25)
    SourceInfo(src/map/core.rs:585:9-585:10)
  1: StorageDead(_24)
    SourceInfo(src/map/core.rs:585:9-585:10)
  2: StorageLive(_32)
    SourceInfo(src/map/core.rs:586:9-586:64)
  3: StorageLive(_33)
    SourceInfo(src/map/core.rs:586:9-586:21)
  4: _33 = &mut (*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:586:9-586:21)
  5: StorageLive(_34)
    SourceInfo(src/map/core.rs:586:29-586:34)
  6: _34 = _2
    SourceInfo(src/map/core.rs:586:29-586:34)
  7: StorageLive(_35)
    SourceInfo(src/map/core.rs:586:36-586:63)
  8: StorageLive(_36)
    SourceInfo(src/map/core.rs:586:45-586:49)
  9: _36 = _3
    SourceInfo(src/map/core.rs:586:45-586:49)
  10: StorageLive(_37)
    SourceInfo(src/map/core.rs:586:51-586:54)
  11: _37 = move _4
    SourceInfo(src/map/core.rs:586:51-586:54)
  12: StorageLive(_38)
    SourceInfo(src/map/core.rs:586:56-586:61)
  13: _38 = move _5
    SourceInfo(src/map/core.rs:586:56-586:61)
  14: _35 = Bucket::<K, V> { hash: move _36, key: move _37, value: move _38 }
    SourceInfo(src/map/core.rs:586:36-586:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:586:62-586:63)
      kind: drop(_38) -> [return: bb13, unwind: bb18]
  }
  preds [bb10, bb11]
  succs [bb13, bb18]

bb13
  0: StorageDead(_38)
    SourceInfo(src/map/core.rs:586:62-586:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:586:62-586:63)
      kind: drop(_37) -> [return: bb14, unwind: bb19]
  }
  preds [bb12]
  succs [bb14, bb19]

bb14
  0: StorageDead(_37)
    SourceInfo(src/map/core.rs:586:62-586:63)
  1: StorageDead(_36)
    SourceInfo(src/map/core.rs:586:62-586:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:586:9-586:64)
      kind: _32 = alloc::vec::Vec::<Bucket<K, V>>::insert(move _33, move _34, move _35) -> [return: bb15, unwind: bb19]
  }
  preds [bb13]
  succs [bb15, bb19]

bb15
  0: StorageDead(_35)
    SourceInfo(src/map/core.rs:586:63-586:64)
  1: StorageDead(_34)
    SourceInfo(src/map/core.rs:586:63-586:64)
  2: StorageDead(_33)
    SourceInfo(src/map/core.rs:586:63-586:64)
  3: StorageDead(_32)
    SourceInfo(src/map/core.rs:586:64-586:65)
  4: _0 = const ()
    SourceInfo(src/map/core.rs:569:88-587:6)
  5: StorageDead(_17)
    SourceInfo(src/map/core.rs:587:5-587:6)
  6: StorageDead(_6)
    SourceInfo(src/map/core.rs:587:5-587:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:587:5-587:6)
      kind: drop(_5) -> [return: bb16, unwind: bb21]
  }
  preds [bb14]
  succs [bb16, bb21]

bb16
  Terminator {
      source_info: SourceInfo(src/map/core.rs:587:5-587:6)
      kind: drop(_4) -> [return: bb17, unwind: bb22]
  }
  preds [bb15]
  succs [bb17, bb22]

bb17
  Terminator {
      source_info: SourceInfo(src/map/core.rs:587:6-587:6)
      kind: return
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(src/map/core.rs:586:62-586:63)
      kind: drop(_37) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/map/core.rs:586:63-586:64)
      kind: drop(_35) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb13, bb14, bb18]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(src/map/core.rs:587:5-587:6)
      kind: drop(_5) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6, bb7, bb9, bb19]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(src/map/core.rs:587:5-587:6)
      kind: drop(_4) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb15, bb20]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(src/map/core.rs:569:5-587:6)
      kind: resume
  }
  preds [bb16, bb21]
  succs []

