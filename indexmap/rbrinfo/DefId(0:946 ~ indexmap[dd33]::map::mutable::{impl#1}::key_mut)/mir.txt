bb0
  0: StorageLive(_2)
    SourceInfo(src/map/mutable.rs:121:9-124:10)
  1: StorageLive(_3)
    SourceInfo(src/map/mutable.rs:121:9-124:10)
  2: PlaceMention(_1)
    SourceInfo(src/map/mutable.rs:121:15-121:19)
  3: _4 = discriminant((*_1))
    SourceInfo(src/map/mutable.rs:121:15-121:19)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:121:9-121:19)
      kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), _1)
    SourceInfo(src/map/mutable.rs:121:15-121:19)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:121:15-121:19)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:122:13-122:31)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_8)
    SourceInfo(src/map/mutable.rs:123:27-123:28)
  1: _8 = &mut (((*_1) as Vacant).0: map::core::entry::VacantEntry<'_, K, V>)
    SourceInfo(src/map/mutable.rs:123:27-123:28)
  2: StorageLive(_9)
    SourceInfo(src/map/mutable.rs:123:33-123:44)
  3: StorageLive(_10)
    SourceInfo(src/map/mutable.rs:123:33-123:34)
  4: _10 = &mut (*_8)
    SourceInfo(src/map/mutable.rs:123:33-123:34)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:123:33-123:44)
      kind: _9 = map::core::entry::VacantEntry::<'_, K, V>::key_mut(move _10) -> [return: bb6, unwind: bb8]
  }
  preds [bb0, bb2]
  succs [bb6, bb8]

bb4
  0: StorageLive(_5)
    SourceInfo(src/map/mutable.rs:122:29-122:30)
  1: _5 = &mut (((*_1) as Occupied).0: map::core::entry::OccupiedEntry<'_, K, V>)
    SourceInfo(src/map/mutable.rs:122:29-122:30)
  2: StorageLive(_6)
    SourceInfo(src/map/mutable.rs:122:35-122:46)
  3: StorageLive(_7)
    SourceInfo(src/map/mutable.rs:122:35-122:36)
  4: _7 = &mut (*_5)
    SourceInfo(src/map/mutable.rs:122:35-122:36)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:122:35-122:46)
      kind: _6 = map::core::entry::OccupiedEntry::<'_, K, V>::key_mut(move _7) -> [return: bb5, unwind: bb8]
  }
  preds [bb2]
  succs [bb5, bb8]

bb5
  0: _3 = &mut (*_6)
    SourceInfo(src/map/mutable.rs:122:35-122:46)
  1: StorageDead(_7)
    SourceInfo(src/map/mutable.rs:122:45-122:46)
  2: StorageDead(_6)
    SourceInfo(src/map/mutable.rs:122:45-122:46)
  3: StorageDead(_5)
    SourceInfo(src/map/mutable.rs:122:45-122:46)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:122:45-122:46)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: _3 = &mut (*_9)
    SourceInfo(src/map/mutable.rs:123:33-123:44)
  1: StorageDead(_10)
    SourceInfo(src/map/mutable.rs:123:43-123:44)
  2: StorageDead(_9)
    SourceInfo(src/map/mutable.rs:123:43-123:44)
  3: StorageDead(_8)
    SourceInfo(src/map/mutable.rs:123:43-123:44)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:123:43-123:44)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb7
  0: _2 = &mut (*_3)
    SourceInfo(src/map/mutable.rs:121:9-124:10)
  1: _0 = &mut (*_2)
    SourceInfo(src/map/mutable.rs:121:9-124:10)
  2: StorageDead(_3)
    SourceInfo(src/map/mutable.rs:125:5-125:6)
  3: StorageDead(_2)
    SourceInfo(src/map/mutable.rs:125:5-125:6)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:125:6-125:6)
      kind: return
  }
  preds [bb5, bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:120:5-125:6)
      kind: resume
  }
  preds [bb3, bb4]
  succs []

