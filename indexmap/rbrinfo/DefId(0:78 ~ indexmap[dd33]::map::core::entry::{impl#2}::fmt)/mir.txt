bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core/entry.rs:135:13-135:22)
  1: StorageLive(_4)
    SourceInfo(src/map/core/entry.rs:135:25-135:26)
  2: _4 = &mut (*_2)
    SourceInfo(src/map/core/entry.rs:135:25-135:26)
  3: StorageLive(_5)
    SourceInfo(src/map/core/entry.rs:135:39-135:46)
  4: StorageLive(_6)
    SourceInfo(src/map/core/entry.rs:135:39-135:46)
  5: _6 = const "Entry"
    SourceInfo(src/map/core/entry.rs:135:39-135:46)
  6: _5 = &(*_6)
    SourceInfo(src/map/core/entry.rs:135:39-135:46)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:135:25-135:47)
      kind: _3 = core::fmt::Formatter::<'_>::debug_tuple(move _4, move _5) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_5)
    SourceInfo(src/map/core/entry.rs:135:46-135:47)
  1: StorageDead(_4)
    SourceInfo(src/map/core/entry.rs:135:46-135:47)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/map/core/entry.rs:135:13-135:22)
  3: StorageDead(_6)
    SourceInfo(src/map/core/entry.rs:135:47-135:48)
  4: StorageLive(_7)
    SourceInfo(src/map/core/entry.rs:136:9-139:10)
  5: PlaceMention(_1)
    SourceInfo(src/map/core/entry.rs:136:15-136:19)
  6: _8 = discriminant((*_1))
    SourceInfo(src/map/core/entry.rs:136:15-136:19)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:136:9-136:19)
      kind: switchInt(move _8) -> [0: bb4, 1: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _1)
    SourceInfo(src/map/core/entry.rs:136:15-136:19)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:136:15-136:19)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:137:13-137:29)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_13)
    SourceInfo(src/map/core/entry.rs:138:29-138:30)
  1: _13 = &(((*_1) as Occupied).0: map::core::entry::OccupiedEntry<'_, K, V>)
    SourceInfo(src/map/core/entry.rs:138:29-138:30)
  2: StorageLive(_14)
    SourceInfo(src/map/core/entry.rs:138:35-138:49)
  3: StorageLive(_15)
    SourceInfo(src/map/core/entry.rs:138:35-138:40)
  4: _15 = &mut _3
    SourceInfo(src/map/core/entry.rs:138:35-138:40)
  5: StorageLive(_16)
    SourceInfo(src/map/core/entry.rs:138:47-138:48)
  6: StorageLive(_17)
    SourceInfo(src/map/core/entry.rs:138:47-138:48)
  7: _17 = &(*_13)
    SourceInfo(src/map/core/entry.rs:138:47-138:48)
  8: _16 = move _17 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(src/map/core/entry.rs:138:47-138:48)
  9: StorageDead(_17)
    SourceInfo(src/map/core/entry.rs:138:47-138:48)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:138:35-138:49)
      kind: _14 = core::fmt::DebugTuple::<'_, '_>::field(move _15, move _16) -> [return: bb7, unwind: bb10]
  }
  preds [bb1, bb3]
  succs [bb7, bb10]

bb5
  0: StorageLive(_9)
    SourceInfo(src/map/core/entry.rs:137:27-137:28)
  1: _9 = &(((*_1) as Vacant).0: map::core::entry::VacantEntry<'_, K, V>)
    SourceInfo(src/map/core/entry.rs:137:27-137:28)
  2: StorageLive(_10)
    SourceInfo(src/map/core/entry.rs:137:33-137:38)
  3: _10 = &mut _3
    SourceInfo(src/map/core/entry.rs:137:33-137:38)
  4: StorageLive(_11)
    SourceInfo(src/map/core/entry.rs:137:45-137:46)
  5: StorageLive(_12)
    SourceInfo(src/map/core/entry.rs:137:45-137:46)
  6: _12 = &(*_9)
    SourceInfo(src/map/core/entry.rs:137:45-137:46)
  7: _11 = move _12 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(src/map/core/entry.rs:137:45-137:46)
  8: StorageDead(_12)
    SourceInfo(src/map/core/entry.rs:137:45-137:46)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:137:33-137:47)
      kind: _7 = core::fmt::DebugTuple::<'_, '_>::field(move _10, move _11) -> [return: bb6, unwind: bb10]
  }
  preds [bb3]
  succs [bb6, bb10]

bb6
  0: StorageDead(_11)
    SourceInfo(src/map/core/entry.rs:137:46-137:47)
  1: StorageDead(_10)
    SourceInfo(src/map/core/entry.rs:137:46-137:47)
  2: StorageDead(_9)
    SourceInfo(src/map/core/entry.rs:137:46-137:47)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:137:46-137:47)
      kind: goto -> bb8
  }
  preds [bb5]
  succs [bb8]

bb7
  0: _7 = &mut (*_14)
    SourceInfo(src/map/core/entry.rs:138:35-138:49)
  1: StorageDead(_16)
    SourceInfo(src/map/core/entry.rs:138:48-138:49)
  2: StorageDead(_15)
    SourceInfo(src/map/core/entry.rs:138:48-138:49)
  3: StorageDead(_14)
    SourceInfo(src/map/core/entry.rs:138:48-138:49)
  4: StorageDead(_13)
    SourceInfo(src/map/core/entry.rs:138:48-138:49)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:138:48-138:49)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb8
  0: StorageDead(_7)
    SourceInfo(src/map/core/entry.rs:139:10-139:11)
  1: StorageLive(_18)
    SourceInfo(src/map/core/entry.rs:140:9-140:14)
  2: _18 = &mut _3
    SourceInfo(src/map/core/entry.rs:140:9-140:14)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:140:9-140:23)
      kind: _0 = core::fmt::DebugTuple::<'_, '_>::finish(move _18) -> [return: bb9, unwind: bb10]
  }
  preds [bb6, bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_18)
    SourceInfo(src/map/core/entry.rs:140:22-140:23)
  1: StorageDead(_3)
    SourceInfo(src/map/core/entry.rs:141:5-141:6)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:141:6-141:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:134:5-141:6)
      kind: resume
  }
  preds [bb0, bb4, bb5, bb8]
  succs []

