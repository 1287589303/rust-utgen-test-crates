bb0
  0: StorageLive(_4)
    SourceInfo(src/map/core/entry.rs:11:13-11:20)
  1: _4 = &mut ((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core/entry.rs:11:23-11:40)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/map/core/entry.rs:11:13-11:20)
  3: StorageLive(_5)
    SourceInfo(src/map/core/entry.rs:12:13-12:15)
  4: StorageLive(_6)
    SourceInfo(src/map/core/entry.rs:12:29-12:33)
  5: StorageLive(_7)
    SourceInfo(src/map/core/entry.rs:12:29-12:33)
  6: _7 = &_3
    SourceInfo(src/map/core/entry.rs:12:29-12:33)
  7: _6 = &(*_7)
    SourceInfo(src/map/core/entry.rs:12:29-12:33)
  8: StorageLive(_8)
    SourceInfo(src/map/core/entry.rs:12:35-12:42)
  9: StorageLive(_9)
    SourceInfo(src/map/core/entry.rs:12:35-12:42)
  10: StorageLive(_10)
    SourceInfo(src/map/core/entry.rs:12:35-12:42)
  11: _10 = &(*_4)
    SourceInfo(src/map/core/entry.rs:12:35-12:42)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:12:35-12:42)
      kind: _9 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Deref>::deref(move _10) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: _8 = &(*_9)
    SourceInfo(src/map/core/entry.rs:12:35-12:42)
  1: StorageDead(_10)
    SourceInfo(src/map/core/entry.rs:12:41-12:42)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:12:18-12:43)
      kind: _5 = map::core::equivalent::<K, V, K>(move _6, move _8) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_8)
    SourceInfo(src/map/core/entry.rs:12:42-12:43)
  1: StorageDead(_6)
    SourceInfo(src/map/core/entry.rs:12:42-12:43)
  2: FakeRead(ForLet(None), _5)
    SourceInfo(src/map/core/entry.rs:12:13-12:15)
  3: StorageDead(_9)
    SourceInfo(src/map/core/entry.rs:12:43-12:44)
  4: StorageDead(_7)
    SourceInfo(src/map/core/entry.rs:12:43-12:44)
  5: StorageLive(_11)
    SourceInfo(src/map/core/entry.rs:13:15-13:54)
  6: StorageLive(_12)
    SourceInfo(src/map/core/entry.rs:13:15-13:27)
  7: _12 = &mut ((*_1).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core/entry.rs:13:15-13:27)
  8: StorageLive(_13)
    SourceInfo(src/map/core/entry.rs:13:39-13:49)
  9: StorageLive(_14)
    SourceInfo(src/map/core/entry.rs:13:39-13:43)
  10: _14 = _2
    SourceInfo(src/map/core/entry.rs:13:39-13:43)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:13:39-13:49)
      kind: _13 = HashValue::get(move _14) -> [return: bb3, unwind: bb18]
  }
  preds [bb1]
  succs [bb3, bb18]

bb3
  0: StorageDead(_14)
    SourceInfo(src/map/core/entry.rs:13:48-13:49)
  1: StorageLive(_15)
    SourceInfo(src/map/core/entry.rs:13:51-13:53)
  2: _15 = move _5
    SourceInfo(src/map/core/entry.rs:13:51-13:53)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:13:15-13:54)
      kind: _11 = hashbrown::HashTable::<usize>::find_entry::<impl for<'a> Fn(&'a usize) -> bool + '_>(move _12, move _13, move _15) -> [return: bb4, unwind: bb17]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: StorageDead(_15)
    SourceInfo(src/map/core/entry.rs:13:53-13:54)
  1: StorageDead(_13)
    SourceInfo(src/map/core/entry.rs:13:53-13:54)
  2: StorageDead(_12)
    SourceInfo(src/map/core/entry.rs:13:53-13:54)
  3: PlaceMention(_11)
    SourceInfo(src/map/core/entry.rs:13:15-13:54)
  4: _16 = discriminant(_11)
    SourceInfo(src/map/core/entry.rs:13:15-13:54)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:13:9-13:54)
      kind: switchInt(move _16) -> [0: bb6, 1: bb7, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(src/map/core/entry.rs:13:15-13:54)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:13:15-13:54)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:14:13-14:22)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_21)
    SourceInfo(src/map/core/entry.rs:15:17-15:23)
  1: _21 = move ((_11 as Err).0: hashbrown::hash_table::AbsentEntry<'_, usize>)
    SourceInfo(src/map/core/entry.rs:15:17-15:23)
  2: StorageLive(_22)
    SourceInfo(src/map/core/entry.rs:15:42-19:14)
  3: StorageLive(_23)
    SourceInfo(src/map/core/entry.rs:16:22-16:63)
  4: StorageLive(_24)
    SourceInfo(src/map/core/entry.rs:16:34-16:53)
  5: StorageLive(_25)
    SourceInfo(src/map/core/entry.rs:16:34-16:53)
  6: StorageLive(_26)
    SourceInfo(src/map/core/entry.rs:16:34-16:40)
  7: _26 = move _21
    SourceInfo(src/map/core/entry.rs:16:34-16:40)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:16:34-16:53)
      kind: _25 = hashbrown::hash_table::AbsentEntry::<'_, usize>::into_table(move _26) -> [return: bb9, unwind: bb18]
  }
  preds [bb4, bb6]
  succs [bb9, bb18]

bb8
  0: StorageLive(_17)
    SourceInfo(src/map/core/entry.rs:14:16-14:21)
  1: _17 = move ((_11 as Ok).0: hashbrown::hash_table::OccupiedEntry<'_, usize>)
    SourceInfo(src/map/core/entry.rs:14:16-14:21)
  2: StorageLive(_18)
    SourceInfo(src/map/core/entry.rs:14:42-14:74)
  3: StorageLive(_19)
    SourceInfo(src/map/core/entry.rs:14:58-14:65)
  4: _19 = &mut (*_4)
    SourceInfo(src/map/core/entry.rs:14:58-14:65)
  5: StorageLive(_20)
    SourceInfo(src/map/core/entry.rs:14:67-14:72)
  6: _20 = move _17
    SourceInfo(src/map/core/entry.rs:14:67-14:72)
  7: _18 = map::core::entry::OccupiedEntry::<'_, K, V> { entries: move _19, index: move _20 }
    SourceInfo(src/map/core/entry.rs:14:42-14:74)
  8: StorageDead(_20)
    SourceInfo(src/map/core/entry.rs:14:73-14:74)
  9: StorageDead(_19)
    SourceInfo(src/map/core/entry.rs:14:73-14:74)
  10: _0 = map::core::entry::Entry::<'_, K, V>::Occupied(move _18)
    SourceInfo(src/map/core/entry.rs:14:26-14:75)
  11: StorageDead(_18)
    SourceInfo(src/map/core/entry.rs:14:74-14:75)
  12: StorageDead(_17)
    SourceInfo(src/map/core/entry.rs:14:74-14:75)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:14:74-14:75)
      kind: goto -> bb13
  }
  preds [bb6]
  succs [bb13]

bb9
  0: _24 = &mut (*_25)
    SourceInfo(src/map/core/entry.rs:16:34-16:53)
  1: StorageDead(_26)
    SourceInfo(src/map/core/entry.rs:16:52-16:53)
  2: StorageLive(_27)
    SourceInfo(src/map/core/entry.rs:16:55-16:62)
  3: _27 = &mut (*_4)
    SourceInfo(src/map/core/entry.rs:16:55-16:62)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:16:22-16:63)
      kind: _23 = map::core::RefMut::<'_, K, V>::new(move _24, move _27) -> [return: bb10, unwind: bb18]
  }
  preds [bb7]
  succs [bb10, bb18]

bb10
  0: StorageDead(_27)
    SourceInfo(src/map/core/entry.rs:16:62-16:63)
  1: StorageDead(_24)
    SourceInfo(src/map/core/entry.rs:16:62-16:63)
  2: StorageLive(_28)
    SourceInfo(src/map/core/entry.rs:17:17-17:21)
  3: _28 = _2
    SourceInfo(src/map/core/entry.rs:17:17-17:21)
  4: StorageLive(_29)
    SourceInfo(src/map/core/entry.rs:18:17-18:20)
  5: _29 = move _3
    SourceInfo(src/map/core/entry.rs:18:17-18:20)
  6: _22 = map::core::entry::VacantEntry::<'_, K, V> { map: move _23, hash: move _28, key: move _29 }
    SourceInfo(src/map/core/entry.rs:15:42-19:14)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:19:13-19:14)
      kind: drop(_29) -> [return: bb11, unwind: bb16]
  }
  preds [bb9]
  succs [bb11, bb16]

bb11
  0: StorageDead(_29)
    SourceInfo(src/map/core/entry.rs:19:13-19:14)
  1: StorageDead(_28)
    SourceInfo(src/map/core/entry.rs:19:13-19:14)
  2: StorageDead(_23)
    SourceInfo(src/map/core/entry.rs:19:13-19:14)
  3: _0 = map::core::entry::Entry::<'_, K, V>::Vacant(move _22)
    SourceInfo(src/map/core/entry.rs:15:28-19:15)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:19:14-19:15)
      kind: drop(_22) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_22)
    SourceInfo(src/map/core/entry.rs:19:14-19:15)
  1: StorageDead(_25)
    SourceInfo(src/map/core/entry.rs:19:14-19:15)
  2: StorageDead(_21)
    SourceInfo(src/map/core/entry.rs:19:14-19:15)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:19:14-19:15)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:21:5-21:6)
      kind: drop(_5) -> [return: bb14, unwind: bb19]
  }
  preds [bb8, bb12]
  succs [bb14, bb19]

bb14
  0: StorageDead(_5)
    SourceInfo(src/map/core/entry.rs:21:5-21:6)
  1: StorageDead(_4)
    SourceInfo(src/map/core/entry.rs:21:5-21:6)
  2: StorageDead(_11)
    SourceInfo(src/map/core/entry.rs:21:5-21:6)
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:21:5-21:6)
      kind: drop(_3) -> [return: bb15, unwind: bb20]
  }
  preds [bb13]
  succs [bb15, bb20]

bb15
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:21:6-21:6)
      kind: return
  }
  preds [bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:19:14-19:15)
      kind: drop(_22) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb10]
  succs [bb18]

bb17
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:13:53-13:54)
      kind: drop(_15) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:21:5-21:6)
      kind: drop(_5) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb2, bb7, bb9, bb11, bb16, bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:21:5-21:6)
      kind: drop(_3) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb13, bb18]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(src/map/core/entry.rs:7:5-21:6)
      kind: resume
  }
  preds [bb14, bb19]
  succs []

