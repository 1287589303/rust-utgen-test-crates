bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:1262:9-1262:13)
  1: _2 = &mut (*_1)
    SourceInfo(src/map.rs:1262:9-1262:13)
  2: StorageLive(_3)
    SourceInfo(src/map.rs:1262:30-1262:56)
  3: StorageLive(_4)
    SourceInfo(src/map.rs:1262:30-1262:56)
  4: StorageLive(_5)
    SourceInfo(src/map.rs:1262:30-1262:55)
  5: StorageLive(_6)
    SourceInfo(src/map.rs:1262:30-1262:40)
  6: StorageLive(_7)
    SourceInfo(src/map.rs:1262:30-1262:34)
  7: _7 = &(*_1)
    SourceInfo(src/map.rs:1262:30-1262:34)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:30-1262:40)
      kind: _6 = map::IndexMap::<K, V, S>::len(move _7) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map.rs:1262:39-1262:40)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:30-1262:55)
      kind: _5 = core::num::<impl usize>::checked_sub(move _6, const 1_usize) -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageDead(_6)
    SourceInfo(src/map.rs:1262:54-1262:55)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:30-1262:56)
      kind: _4 = <core::option::Option<usize> as core::ops::Try>::branch(move _5) -> [return: bb3, unwind: bb11]
  }
  preds [bb1]
  succs [bb3, bb11]

bb3
  0: StorageDead(_5)
    SourceInfo(src/map.rs:1262:55-1262:56)
  1: PlaceMention(_4)
    SourceInfo(src/map.rs:1262:30-1262:56)
  2: _8 = discriminant(_4)
    SourceInfo(src/map.rs:1262:30-1262:56)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:30-1262:56)
      kind: switchInt(move _8) -> [0: bb6, 1: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(src/map.rs:1262:30-1262:56)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:30-1262:56)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:55-1262:56)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_12)
    SourceInfo(src/map.rs:1262:30-1262:56)
  1: _12 = ((_4 as Continue).0: usize)
    SourceInfo(src/map.rs:1262:30-1262:56)
  2: _3 = _12
    SourceInfo(src/map.rs:1262:30-1262:56)
  3: StorageDead(_12)
    SourceInfo(src/map.rs:1262:55-1262:56)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:9-1262:57)
      kind: _0 = map::IndexMap::<K, V, S>::get_index_entry(move _2, move _3) -> [return: bb9, unwind: bb11]
  }
  preds [bb3, bb5]
  succs [bb9, bb11]

bb7
  0: StorageLive(_9)
    SourceInfo(src/map.rs:1262:55-1262:56)
  1: _9 = ((_4 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(src/map.rs:1262:55-1262:56)
  2: StorageLive(_11)
    SourceInfo(src/map.rs:1262:55-1262:56)
  3: _11 = _9
    SourceInfo(src/map.rs:1262:55-1262:56)
  Terminator {
      source_info: SourceInfo(src/map.rs:1262:30-1262:56)
      kind: _0 = <core::option::Option<map::core::entry::IndexedEntry<'_, K, V>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _11) -> [return: bb8, unwind: bb11]
  }
  preds [bb5]
  succs [bb8, bb11]

bb8
  0: StorageDead(_11)
    SourceInfo(src/map.rs:1262:55-1262:56)
  1: StorageDead(_9)
    SourceInfo(src/map.rs:1262:55-1262:56)
  2: StorageDead(_3)
    SourceInfo(src/map.rs:1262:56-1262:57)
  3: StorageDead(_2)
    SourceInfo(src/map.rs:1262:56-1262:57)
  4: StorageDead(_4)
    SourceInfo(src/map.rs:1263:5-1263:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1263:6-1263:6)
      kind: goto -> bb10
  }
  preds [bb7]
  succs [bb10]

bb9
  0: StorageDead(_3)
    SourceInfo(src/map.rs:1262:56-1262:57)
  1: StorageDead(_2)
    SourceInfo(src/map.rs:1262:56-1262:57)
  2: StorageDead(_4)
    SourceInfo(src/map.rs:1263:5-1263:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1263:6-1263:6)
      kind: goto -> bb10
  }
  preds [bb6]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/map.rs:1263:6-1263:6)
      kind: return
  }
  preds [bb8, bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(src/map.rs:1261:5-1263:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb7]
  succs []

