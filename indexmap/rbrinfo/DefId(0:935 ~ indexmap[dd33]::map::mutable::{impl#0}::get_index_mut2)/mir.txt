bb0
  0: StorageLive(_3)
    SourceInfo(src/map/mutable.rs:78:9-78:45)
  1: StorageLive(_4)
    SourceInfo(src/map/mutable.rs:78:9-78:30)
  2: StorageLive(_5)
    SourceInfo(src/map/mutable.rs:78:9-78:30)
  3: StorageLive(_6)
    SourceInfo(src/map/mutable.rs:78:9-78:13)
  4: _6 = &mut (*_1)
    SourceInfo(src/map/mutable.rs:78:9-78:13)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:78:9-78:30)
      kind: _5 = <map::IndexMap<K, V, S> as Entries>::as_entries_mut(move _6) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _4 = &mut (*_5)
    SourceInfo(src/map/mutable.rs:78:9-78:30)
  1: StorageDead(_6)
    SourceInfo(src/map/mutable.rs:78:29-78:30)
  2: StorageLive(_7)
    SourceInfo(src/map/mutable.rs:78:39-78:44)
  3: _7 = _2
    SourceInfo(src/map/mutable.rs:78:39-78:44)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:78:9-78:45)
      kind: _3 = core::slice::<impl [Bucket<K, V>]>::get_mut::<usize>(move _4, move _7) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_7)
    SourceInfo(src/map/mutable.rs:78:44-78:45)
  1: StorageDead(_4)
    SourceInfo(src/map/mutable.rs:78:44-78:45)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:78:9-78:63)
      kind: _0 = core::option::Option::<&mut Bucket<K, V>>::map::<(&mut K, &mut V), for<'a> fn(&'a mut Bucket<K, V>) -> (&'a mut K, &'a mut V) {Bucket::<K, V>::muts}>(move _3, Bucket::<K, V>::muts) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(src/map/mutable.rs:78:62-78:63)
  1: StorageDead(_5)
    SourceInfo(src/map/mutable.rs:79:5-79:6)
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:79:6-79:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/map/mutable.rs:77:5-79:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

