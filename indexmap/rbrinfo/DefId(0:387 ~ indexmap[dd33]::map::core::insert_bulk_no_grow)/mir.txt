bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:84:5-84:65)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:84:13-84:64)
  2: StorageLive(_5)
    SourceInfo(src/map/core.rs:84:13-84:47)
  3: StorageLive(_6)
    SourceInfo(src/map/core.rs:84:13-84:31)
  4: StorageLive(_7)
    SourceInfo(src/map/core.rs:84:13-84:20)
  5: _7 = &(*_1)
    SourceInfo(src/map/core.rs:84:13-84:20)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:84:13-84:31)
      kind: _6 = hashbrown::HashTable::<usize>::capacity(move _7) -> [return: bb1, unwind: bb18]
  }
  preds []
  succs [bb1, bb18]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:84:30-84:31)
  1: StorageLive(_8)
    SourceInfo(src/map/core.rs:84:34-84:47)
  2: StorageLive(_9)
    SourceInfo(src/map/core.rs:84:34-84:41)
  3: _9 = &(*_1)
    SourceInfo(src/map/core.rs:84:34-84:41)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:84:34-84:47)
      kind: _8 = hashbrown::HashTable::<usize>::len(move _9) -> [return: bb2, unwind: bb18]
  }
  preds [bb0]
  succs [bb2, bb18]

bb2
  0: StorageDead(_9)
    SourceInfo(src/map/core.rs:84:46-84:47)
  1: _10 = SubWithOverflow(_6, _8)
    SourceInfo(src/map/core.rs:84:13-84:47)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:84:13-84:47)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, move _8) -> [success: bb3, unwind: bb18]
  }
  preds [bb1]
  succs [bb3, bb18]

bb3
  0: _5 = move (_10.0: usize)
    SourceInfo(src/map/core.rs:84:13-84:47)
  1: StorageDead(_8)
    SourceInfo(src/map/core.rs:84:46-84:47)
  2: StorageDead(_6)
    SourceInfo(src/map/core.rs:84:46-84:47)
  3: StorageLive(_11)
    SourceInfo(src/map/core.rs:84:51-84:64)
  4: StorageLive(_12)
    SourceInfo(src/map/core.rs:84:51-84:58)
  5: _12 = &(*_2)
    SourceInfo(src/map/core.rs:84:51-84:58)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:84:51-84:64)
      kind: _11 = core::slice::<impl [Bucket<K, V>]>::len(move _12) -> [return: bb4, unwind: bb18]
  }
  preds [bb2]
  succs [bb4, bb18]

bb4
  0: StorageDead(_12)
    SourceInfo(src/map/core.rs:84:63-84:64)
  1: _4 = Ge(move _5, move _11)
    SourceInfo(src/map/core.rs:84:13-84:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:84:13-84:64)
      kind: switchInt(move _4) -> [0: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:84:63-84:64)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:84:63-84:64)
  2: _3 = const ()
    SourceInfo(src/map/core.rs:84:65-84:65)
  3: StorageDead(_4)
    SourceInfo(src/map/core.rs:84:64-84:65)
  4: StorageDead(_3)
    SourceInfo(src/map/core.rs:84:64-84:65)
  5: StorageLive(_14)
    SourceInfo(src/map/core.rs:85:18-85:25)
  6: StorageLive(_15)
    SourceInfo(src/map/core.rs:85:18-85:25)
  7: _15 = _2
    SourceInfo(src/map/core.rs:85:18-85:25)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:18-85:25)
      kind: _14 = <&[Bucket<K, V>] as core::iter::IntoIterator>::into_iter(move _15) -> [return: bb7, unwind: bb18]
  }
  preds [bb4]
  succs [bb7, bb18]

bb6
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:84:63-84:64)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:84:63-84:64)
  2: StorageLive(_13)
    SourceInfo(src/map/core.rs:84:5-84:65)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:84:5-84:65)
      kind: _13 = core::panicking::panic(const "assertion failed: indices.capacity() - indices.len() >= entries.len()") -> bb18
  }
  preds [bb4]
  succs [bb18]

bb7
  0: StorageDead(_15)
    SourceInfo(src/map/core.rs:85:24-85:25)
  1: PlaceMention(_14)
    SourceInfo(src/map/core.rs:85:18-85:25)
  2: StorageLive(_16)
    SourceInfo(src/map/core.rs:85:18-85:25)
  3: _16 = move _14
    SourceInfo(src/map/core.rs:85:18-85:25)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:5-87:6)
      kind: goto -> bb8
  }
  preds [bb5]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:5-87:6)
      kind: falseUnwind -> [real: bb9, unwind: bb18]
  }
  preds [bb7, bb17]
  succs [bb9, bb18]

bb9
  0: StorageLive(_18)
    SourceInfo(src/map/core.rs:85:18-85:25)
  1: StorageLive(_19)
    SourceInfo(src/map/core.rs:85:18-85:25)
  2: StorageLive(_20)
    SourceInfo(src/map/core.rs:85:18-85:25)
  3: StorageLive(_21)
    SourceInfo(src/map/core.rs:85:18-85:25)
  4: _21 = &mut _16
    SourceInfo(src/map/core.rs:85:18-85:25)
  5: _20 = &mut (*_21)
    SourceInfo(src/map/core.rs:85:18-85:25)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:18-85:25)
      kind: _19 = <core::slice::Iter<'_, Bucket<K, V>> as core::iter::Iterator>::next(move _20) -> [return: bb10, unwind: bb18]
  }
  preds [bb8]
  succs [bb10, bb18]

bb10
  0: StorageDead(_20)
    SourceInfo(src/map/core.rs:85:24-85:25)
  1: PlaceMention(_19)
    SourceInfo(src/map/core.rs:85:18-85:25)
  2: _22 = discriminant(_19)
    SourceInfo(src/map/core.rs:85:18-85:25)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:18-85:25)
      kind: switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _19)
    SourceInfo(src/map/core.rs:85:18-85:25)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:18-85:25)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:5-87:6)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_24)
    SourceInfo(src/map/core.rs:85:9-85:14)
  1: _24 = ((_19 as Some).0: &Bucket<K, V>)
    SourceInfo(src/map/core.rs:85:9-85:14)
  2: StorageLive(_25)
    SourceInfo(src/map/core.rs:86:9-86:83)
  3: StorageLive(_26)
    SourceInfo(src/map/core.rs:86:9-86:16)
  4: _26 = &mut (*_1)
    SourceInfo(src/map/core.rs:86:9-86:16)
  5: StorageLive(_27)
    SourceInfo(src/map/core.rs:86:31-86:47)
  6: StorageLive(_28)
    SourceInfo(src/map/core.rs:86:31-86:41)
  7: _28 = ((*_24).0: HashValue)
    SourceInfo(src/map/core.rs:86:31-86:41)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:86:31-86:47)
      kind: _27 = HashValue::get(move _28) -> [return: bb15, unwind: bb18]
  }
  preds [bb10, bb12]
  succs [bb15, bb18]

bb14
  0: _0 = const ()
    SourceInfo(src/map/core.rs:85:5-87:6)
  1: StorageDead(_21)
    SourceInfo(src/map/core.rs:87:5-87:6)
  2: StorageDead(_19)
    SourceInfo(src/map/core.rs:87:5-87:6)
  3: StorageDead(_18)
    SourceInfo(src/map/core.rs:87:5-87:6)
  4: StorageDead(_16)
    SourceInfo(src/map/core.rs:87:5-87:6)
  5: StorageDead(_14)
    SourceInfo(src/map/core.rs:87:5-87:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:88:2-88:2)
      kind: return
  }
  preds [bb12]
  succs []

bb15
  0: StorageDead(_28)
    SourceInfo(src/map/core.rs:86:46-86:47)
  1: StorageLive(_29)
    SourceInfo(src/map/core.rs:86:49-86:62)
  2: StorageLive(_30)
    SourceInfo(src/map/core.rs:86:49-86:56)
  3: _30 = &(*_1)
    SourceInfo(src/map/core.rs:86:49-86:56)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:86:49-86:62)
      kind: _29 = hashbrown::HashTable::<usize>::len(move _30) -> [return: bb16, unwind: bb18]
  }
  preds [bb13]
  succs [bb16, bb18]

bb16
  0: StorageDead(_30)
    SourceInfo(src/map/core.rs:86:61-86:62)
  1: StorageLive(_31)
    SourceInfo(src/map/core.rs:86:64-86:82)
  2: _31 = {closure@src/map/core.rs:86:64: 86:67}
    SourceInfo(src/map/core.rs:86:64-86:82)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:86:9-86:83)
      kind: _25 = hashbrown::HashTable::<usize>::insert_unique::<{closure@src/map/core.rs:86:64: 86:67}>(move _26, move _27, move _29, move _31) -> [return: bb17, unwind: bb18]
  }
  preds [bb15]
  succs [bb17, bb18]

bb17
  0: StorageDead(_31)
    SourceInfo(src/map/core.rs:86:82-86:83)
  1: StorageDead(_29)
    SourceInfo(src/map/core.rs:86:82-86:83)
  2: StorageDead(_27)
    SourceInfo(src/map/core.rs:86:82-86:83)
  3: StorageDead(_26)
    SourceInfo(src/map/core.rs:86:82-86:83)
  4: StorageDead(_25)
    SourceInfo(src/map/core.rs:86:83-86:84)
  5: _18 = const ()
    SourceInfo(src/map/core.rs:85:26-87:6)
  6: StorageDead(_24)
    SourceInfo(src/map/core.rs:87:5-87:6)
  7: StorageDead(_21)
    SourceInfo(src/map/core.rs:87:5-87:6)
  8: StorageDead(_19)
    SourceInfo(src/map/core.rs:87:5-87:6)
  9: StorageDead(_18)
    SourceInfo(src/map/core.rs:87:5-87:6)
  10: _17 = const ()
    SourceInfo(src/map/core.rs:85:5-87:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:85:5-87:6)
      kind: goto -> bb8
  }
  preds [bb16]
  succs [bb8]

bb18
  Terminator {
      source_info: SourceInfo(src/map/core.rs:83:1-88:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb5, bb6, bb8, bb9, bb13, bb15, bb16]
  succs []

