bb0
  0: StorageLive(_3)
    SourceInfo(src/map/slice.rs:424:9-424:39)
  1: StorageLive(_4)
    SourceInfo(src/map/slice.rs:424:9-424:39)
  2: StorageLive(_5)
    SourceInfo(src/map/slice.rs:424:27-424:32)
  3: _5 = _2
    SourceInfo(src/map/slice.rs:424:27-424:32)
  4: _6 = Len(((*_1).0: [Bucket<K, V>]))
    SourceInfo(src/map/slice.rs:424:14-424:33)
  5: _7 = Lt(_5, _6)
    SourceInfo(src/map/slice.rs:424:14-424:33)
  Terminator {
      source_info: SourceInfo(src/map/slice.rs:424:14-424:33)
      kind: assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _4 = &mut (((*_1).0: [Bucket<K, V>])[_5].2: V)
    SourceInfo(src/map/slice.rs:424:9-424:39)
  1: _3 = &mut (*_4)
    SourceInfo(src/map/slice.rs:424:9-424:39)
  2: _0 = &mut (*_3)
    SourceInfo(src/map/slice.rs:424:9-424:39)
  3: StorageDead(_5)
    SourceInfo(src/map/slice.rs:425:5-425:6)
  4: StorageDead(_4)
    SourceInfo(src/map/slice.rs:425:5-425:6)
  5: StorageDead(_3)
    SourceInfo(src/map/slice.rs:425:5-425:6)
  Terminator {
      source_info: SourceInfo(src/map/slice.rs:425:6-425:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/map/slice.rs:423:5-425:6)
      kind: resume
  }
  preds [bb0]
  succs []

