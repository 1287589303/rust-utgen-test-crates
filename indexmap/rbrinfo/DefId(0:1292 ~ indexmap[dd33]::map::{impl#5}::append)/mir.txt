bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:683:9-683:37)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:683:9-683:13)
  2: _4 = &mut (*_1)
    SourceInfo(src/map.rs:683:9-683:13)
  3: StorageLive(_5)
    SourceInfo(src/map.rs:683:21-683:36)
  4: StorageLive(_6)
    SourceInfo(src/map.rs:683:21-683:26)
  5: _6 = &mut (*_2)
    SourceInfo(src/map.rs:683:21-683:26)
  6: StorageLive(_7)
    SourceInfo(src/map.rs:683:33-683:35)
  7: _7 = core::ops::RangeFull
    SourceInfo(src/map.rs:683:33-683:35)
  Terminator {
      source_info: SourceInfo(src/map.rs:683:21-683:36)
      kind: _5 = map::IndexMap::<K, V, S2>::drain::<core::ops::RangeFull>(move _6, move _7) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map.rs:683:35-683:36)
  1: StorageDead(_6)
    SourceInfo(src/map.rs:683:35-683:36)
  Terminator {
      source_info: SourceInfo(src/map.rs:683:9-683:37)
      kind: _3 = <map::IndexMap<K, V, S> as core::iter::Extend<(K, V)>>::extend::<map::iter::Drain<'_, K, V>>(move _4, move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(src/map.rs:683:36-683:37)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:683:36-683:37)
  2: StorageDead(_3)
    SourceInfo(src/map.rs:683:37-683:38)
  3: _0 = const ()
    SourceInfo(src/map.rs:682:66-684:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:684:6-684:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map.rs:683:36-683:37)
      kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:682:5-684:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

