bb0
  0: StorageLive(_3)
    SourceInfo(src/lib.rs:255:13-255:19)
  1: StorageLive(_4)
    SourceInfo(src/lib.rs:255:28-255:38)
  2: _4 = &((*_1).0: TryReserveErrorKind)
    SourceInfo(src/lib.rs:255:28-255:38)
  3: PlaceMention(_4)
    SourceInfo(src/lib.rs:255:28-255:38)
  4: _5 = discriminant((*_4))
    SourceInfo(src/lib.rs:255:28-255:38)
  Terminator {
      source_info: SourceInfo(src/lib.rs:255:22-255:38)
      kind: switchInt(move _5) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4]

bb1
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(src/lib.rs:255:28-255:38)
  Terminator {
      source_info: SourceInfo(src/lib.rs:255:28-255:38)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/lib.rs:256:13-256:40)
      kind: falseEdge -> [real: bb5, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb5]

bb3
  Terminator {
      source_info: SourceInfo(src/lib.rs:257:13-257:50)
      kind: falseEdge -> [real: bb7, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb7]

bb4
  0: StorageLive(_10)
    SourceInfo(src/lib.rs:261:17-261:66)
  1: _10 = const " because the memory allocator returned an error"
    SourceInfo(src/lib.rs:261:17-261:66)
  2: _3 = &(*_10)
    SourceInfo(src/lib.rs:261:17-261:66)
  3: StorageDead(_10)
    SourceInfo(src/lib.rs:262:13-262:14)
  Terminator {
      source_info: SourceInfo(src/lib.rs:262:13-262:14)
      kind: goto -> bb8
  }
  preds [bb0, bb3]
  succs [bb8]

bb5
  0: StorageLive(_6)
    SourceInfo(src/lib.rs:256:38-256:39)
  1: _6 = &(((*_4) as Std).0: alloc::collections::TryReserveError)
    SourceInfo(src/lib.rs:256:38-256:39)
  2: StorageLive(_8)
    SourceInfo(src/lib.rs:256:75-256:76)
  3: _8 = &(*_6)
    SourceInfo(src/lib.rs:256:75-256:76)
  4: StorageLive(_9)
    SourceInfo(src/lib.rs:256:78-256:79)
  5: _9 = &mut (*_2)
    SourceInfo(src/lib.rs:256:78-256:79)
  Terminator {
      source_info: SourceInfo(src/lib.rs:256:51-256:80)
      kind: _0 = <alloc::collections::TryReserveError as core::fmt::Display>::fmt(move _8, move _9) -> [return: bb6, unwind: bb19]
  }
  preds [bb2]
  succs [bb6, bb19]

bb6
  0: StorageDead(_9)
    SourceInfo(src/lib.rs:256:79-256:80)
  1: StorageDead(_8)
    SourceInfo(src/lib.rs:256:79-256:80)
  2: StorageDead(_6)
    SourceInfo(src/lib.rs:256:79-256:80)
  3: StorageDead(_4)
    SourceInfo(src/lib.rs:263:10-263:11)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb5]
  succs [bb17]

bb7
  0: _3 = const " because the computed capacity exceeded the collection's maximum"
    SourceInfo(src/lib.rs:258:17-258:83)
  Terminator {
      source_info: SourceInfo(src/lib.rs:258:17-258:83)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb8
  0: FakeRead(ForLet(None), _3)
    SourceInfo(src/lib.rs:255:13-255:19)
  1: StorageDead(_4)
    SourceInfo(src/lib.rs:263:10-263:11)
  2: StorageLive(_11)
    SourceInfo(src/lib.rs:264:9-264:49)
  3: StorageLive(_12)
    SourceInfo(src/lib.rs:264:9-264:49)
  4: StorageLive(_13)
    SourceInfo(src/lib.rs:264:9-264:48)
  5: StorageLive(_14)
    SourceInfo(src/lib.rs:264:9-264:10)
  6: _14 = &mut (*_2)
    SourceInfo(src/lib.rs:264:9-264:10)
  7: StorageLive(_15)
    SourceInfo(src/lib.rs:264:21-264:47)
  8: StorageLive(_16)
    SourceInfo(src/lib.rs:264:21-264:47)
  9: _16 = const "memory allocation failed"
    SourceInfo(src/lib.rs:264:21-264:47)
  10: _15 = &(*_16)
    SourceInfo(src/lib.rs:264:21-264:47)
  Terminator {
      source_info: SourceInfo(src/lib.rs:264:9-264:48)
      kind: _13 = core::fmt::Formatter::<'_>::write_str(move _14, move _15) -> [return: bb9, unwind: bb19]
  }
  preds [bb4, bb7]
  succs [bb9, bb19]

bb9
  0: StorageDead(_15)
    SourceInfo(src/lib.rs:264:47-264:48)
  1: StorageDead(_14)
    SourceInfo(src/lib.rs:264:47-264:48)
  Terminator {
      source_info: SourceInfo(src/lib.rs:264:9-264:49)
      kind: _12 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _13) -> [return: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: StorageDead(_13)
    SourceInfo(src/lib.rs:264:48-264:49)
  1: PlaceMention(_12)
    SourceInfo(src/lib.rs:264:9-264:49)
  2: _17 = discriminant(_12)
    SourceInfo(src/lib.rs:264:9-264:49)
  Terminator {
      source_info: SourceInfo(src/lib.rs:264:9-264:49)
      kind: switchInt(move _17) -> [0: bb13, 1: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _12)
    SourceInfo(src/lib.rs:264:9-264:49)
  Terminator {
      source_info: SourceInfo(src/lib.rs:264:9-264:49)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(src/lib.rs:264:48-264:49)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_21)
    SourceInfo(src/lib.rs:264:9-264:49)
  1: _21 = ((_12 as Continue).0: ())
    SourceInfo(src/lib.rs:264:9-264:49)
  2: _11 = _21
    SourceInfo(src/lib.rs:264:9-264:49)
  3: StorageDead(_21)
    SourceInfo(src/lib.rs:264:48-264:49)
  4: StorageDead(_16)
    SourceInfo(src/lib.rs:264:49-264:50)
  5: StorageDead(_12)
    SourceInfo(src/lib.rs:264:49-264:50)
  6: StorageDead(_11)
    SourceInfo(src/lib.rs:264:49-264:50)
  7: StorageLive(_22)
    SourceInfo(src/lib.rs:265:9-265:10)
  8: _22 = &mut (*_2)
    SourceInfo(src/lib.rs:265:9-265:10)
  9: StorageLive(_23)
    SourceInfo(src/lib.rs:265:21-265:27)
  10: _23 = &(*_3)
    SourceInfo(src/lib.rs:265:21-265:27)
  Terminator {
      source_info: SourceInfo(src/lib.rs:265:9-265:28)
      kind: _0 = core::fmt::Formatter::<'_>::write_str(move _22, move _23) -> [return: bb16, unwind: bb19]
  }
  preds [bb10, bb12]
  succs [bb16, bb19]

bb14
  0: StorageLive(_18)
    SourceInfo(src/lib.rs:264:48-264:49)
  1: _18 = ((_12 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>)
    SourceInfo(src/lib.rs:264:48-264:49)
  2: StorageLive(_20)
    SourceInfo(src/lib.rs:264:48-264:49)
  3: _20 = _18
    SourceInfo(src/lib.rs:264:48-264:49)
  Terminator {
      source_info: SourceInfo(src/lib.rs:264:9-264:49)
      kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _20) -> [return: bb15, unwind: bb19]
  }
  preds [bb12]
  succs [bb15, bb19]

bb15
  0: StorageDead(_20)
    SourceInfo(src/lib.rs:264:48-264:49)
  1: StorageDead(_18)
    SourceInfo(src/lib.rs:264:48-264:49)
  2: StorageDead(_16)
    SourceInfo(src/lib.rs:264:49-264:50)
  3: StorageDead(_12)
    SourceInfo(src/lib.rs:264:49-264:50)
  4: StorageDead(_11)
    SourceInfo(src/lib.rs:264:49-264:50)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb14]
  succs [bb17]

bb16
  0: StorageDead(_23)
    SourceInfo(src/lib.rs:265:27-265:28)
  1: StorageDead(_22)
    SourceInfo(src/lib.rs:265:27-265:28)
  2: StorageDead(_3)
    SourceInfo(src/lib.rs:266:5-266:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:266:6-266:6)
      kind: goto -> bb18
  }
  preds [bb13]
  succs [bb18]

bb17
  0: StorageDead(_3)
    SourceInfo(src/lib.rs:266:5-266:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:266:6-266:6)
      kind: goto -> bb18
  }
  preds [bb6, bb15]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/lib.rs:266:6-266:6)
      kind: return
  }
  preds [bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(src/lib.rs:254:5-266:6)
      kind: resume
  }
  preds [bb5, bb8, bb9, bb13, bb14]
  succs []

