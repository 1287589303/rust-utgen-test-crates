bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:265:9-267:55)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:265:9-267:55)
  2: StorageLive(_5)
    SourceInfo(src/map/core.rs:265:9-267:54)
  3: StorageLive(_6)
    SourceInfo(src/map/core.rs:265:9-266:62)
  4: StorageLive(_7)
    SourceInfo(src/map/core.rs:265:9-265:21)
  5: _7 = &mut ((*_1).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core.rs:265:9-265:21)
  6: StorageLive(_8)
    SourceInfo(src/map/core.rs:266:26-266:36)
  7: _8 = _2
    SourceInfo(src/map/core.rs:266:26-266:36)
  8: StorageLive(_9)
    SourceInfo(src/map/core.rs:266:38-266:61)
  9: StorageLive(_10)
    SourceInfo(src/map/core.rs:266:47-266:60)
  10: StorageLive(_11)
    SourceInfo(src/map/core.rs:266:47-266:60)
  11: StorageLive(_12)
    SourceInfo(src/map/core.rs:266:47-266:60)
  12: StorageLive(_13)
    SourceInfo(src/map/core.rs:266:47-266:60)
  13: _13 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:266:47-266:60)
  14: _12 = &(*_13)
    SourceInfo(src/map/core.rs:266:47-266:60)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:266:47-266:60)
      kind: _11 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Deref>::deref(move _12) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: _10 = &(*_11)
    SourceInfo(src/map/core.rs:266:47-266:60)
  1: StorageDead(_12)
    SourceInfo(src/map/core.rs:266:59-266:60)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:266:38-266:61)
      kind: _9 = map::core::get_hash::<K, V>(move _10) -> [return: bb2, unwind: bb20]
  }
  preds [bb0]
  succs [bb2, bb20]

bb2
  0: StorageDead(_10)
    SourceInfo(src/map/core.rs:266:60-266:61)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:265:9-266:62)
      kind: _6 = hashbrown::HashTable::<usize>::try_reserve::<impl for<'a> Fn(&'a usize) -> u64 + '_>(move _7, move _8, move _9) -> [return: bb3, unwind: bb19]
  }
  preds [bb1]
  succs [bb3, bb19]

bb3
  0: StorageDead(_9)
    SourceInfo(src/map/core.rs:266:61-266:62)
  1: StorageDead(_8)
    SourceInfo(src/map/core.rs:266:61-266:62)
  2: StorageDead(_7)
    SourceInfo(src/map/core.rs:266:61-266:62)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:265:9-267:54)
      kind: _5 = core::result::Result::<(), hashbrown::TryReserveError>::map_err::<TryReserveError, fn(hashbrown::TryReserveError) -> TryReserveError {TryReserveError::from_hashbrown}>(move _6, TryReserveError::from_hashbrown) -> [return: bb4, unwind: bb20]
  }
  preds [bb2]
  succs [bb4, bb20]

bb4
  0: StorageDead(_6)
    SourceInfo(src/map/core.rs:267:53-267:54)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:265:9-267:55)
      kind: _4 = <core::result::Result<(), TryReserveError> as core::ops::Try>::branch(move _5) -> [return: bb5, unwind: bb20]
  }
  preds [bb3]
  succs [bb5, bb20]

bb5
  0: StorageDead(_5)
    SourceInfo(src/map/core.rs:267:54-267:55)
  1: PlaceMention(_4)
    SourceInfo(src/map/core.rs:265:9-267:55)
  2: _14 = discriminant(_4)
    SourceInfo(src/map/core.rs:265:9-267:55)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:265:9-267:55)
      kind: switchInt(move _14) -> [0: bb8, 1: bb7, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(src/map/core.rs:265:9-267:55)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:265:9-267:55)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/map/core.rs:267:54-267:55)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_18)
    SourceInfo(src/map/core.rs:265:9-267:55)
  1: _18 = ((_4 as Continue).0: ())
    SourceInfo(src/map/core.rs:265:9-267:55)
  2: _3 = _18
    SourceInfo(src/map/core.rs:265:9-267:55)
  3: StorageDead(_18)
    SourceInfo(src/map/core.rs:267:54-267:55)
  4: StorageDead(_13)
    SourceInfo(src/map/core.rs:267:55-267:56)
  5: StorageDead(_11)
    SourceInfo(src/map/core.rs:267:55-267:56)
  6: StorageDead(_4)
    SourceInfo(src/map/core.rs:267:55-267:56)
  7: StorageDead(_3)
    SourceInfo(src/map/core.rs:267:55-267:56)
  8: StorageLive(_19)
    SourceInfo(src/map/core.rs:269:12-269:69)
  9: StorageLive(_20)
    SourceInfo(src/map/core.rs:269:12-269:22)
  10: _20 = _2
    SourceInfo(src/map/core.rs:269:12-269:22)
  11: StorageLive(_21)
    SourceInfo(src/map/core.rs:269:25-269:69)
  12: StorageLive(_22)
    SourceInfo(src/map/core.rs:269:25-269:48)
  13: StorageLive(_23)
    SourceInfo(src/map/core.rs:269:25-269:37)
  14: _23 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:269:25-269:37)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:269:25-269:48)
      kind: _22 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _23) -> [return: bb11, unwind: bb20]
  }
  preds [bb5, bb7]
  succs [bb11, bb20]

bb9
  0: StorageLive(_15)
    SourceInfo(src/map/core.rs:267:54-267:55)
  1: _15 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, TryReserveError>)
    SourceInfo(src/map/core.rs:267:54-267:55)
  2: StorageLive(_17)
    SourceInfo(src/map/core.rs:267:54-267:55)
  3: _17 = move _15
    SourceInfo(src/map/core.rs:267:54-267:55)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:265:9-267:55)
      kind: _0 = <core::result::Result<(), TryReserveError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, TryReserveError>>>::from_residual(move _17) -> [return: bb10, unwind: bb20]
  }
  preds [bb7]
  succs [bb10, bb20]

bb10
  0: StorageDead(_17)
    SourceInfo(src/map/core.rs:267:54-267:55)
  1: StorageDead(_15)
    SourceInfo(src/map/core.rs:267:54-267:55)
  2: StorageDead(_13)
    SourceInfo(src/map/core.rs:267:55-267:56)
  3: StorageDead(_11)
    SourceInfo(src/map/core.rs:267:55-267:56)
  4: StorageDead(_4)
    SourceInfo(src/map/core.rs:267:55-267:56)
  5: StorageDead(_3)
    SourceInfo(src/map/core.rs:267:55-267:56)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:274:6-274:6)
      kind: goto -> bb18
  }
  preds [bb9]
  succs [bb18]

bb11
  0: StorageDead(_23)
    SourceInfo(src/map/core.rs:269:47-269:48)
  1: StorageLive(_24)
    SourceInfo(src/map/core.rs:269:51-269:69)
  2: StorageLive(_25)
    SourceInfo(src/map/core.rs:269:51-269:63)
  3: _25 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:269:51-269:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:269:51-269:69)
      kind: _24 = alloc::vec::Vec::<Bucket<K, V>>::len(move _25) -> [return: bb12, unwind: bb20]
  }
  preds [bb8]
  succs [bb12, bb20]

bb12
  0: StorageDead(_25)
    SourceInfo(src/map/core.rs:269:68-269:69)
  1: _26 = SubWithOverflow(_22, _24)
    SourceInfo(src/map/core.rs:269:25-269:69)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:269:25-269:69)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} - {}`, which would overflow", move _22, move _24) -> [success: bb13, unwind: bb20]
  }
  preds [bb11]
  succs [bb13, bb20]

bb13
  0: _21 = move (_26.0: usize)
    SourceInfo(src/map/core.rs:269:25-269:69)
  1: StorageDead(_24)
    SourceInfo(src/map/core.rs:269:68-269:69)
  2: StorageDead(_22)
    SourceInfo(src/map/core.rs:269:68-269:69)
  3: _19 = Gt(move _20, move _21)
    SourceInfo(src/map/core.rs:269:12-269:69)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:269:12-269:69)
      kind: switchInt(move _19) -> [0: bb16, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb16]

bb14
  0: StorageDead(_21)
    SourceInfo(src/map/core.rs:269:68-269:69)
  1: StorageDead(_20)
    SourceInfo(src/map/core.rs:269:68-269:69)
  2: StorageLive(_27)
    SourceInfo(src/map/core.rs:270:13-270:17)
  3: _27 = &mut (*_1)
    SourceInfo(src/map/core.rs:270:13-270:17)
  4: StorageLive(_28)
    SourceInfo(src/map/core.rs:270:38-270:48)
  5: _28 = _2
    SourceInfo(src/map/core.rs:270:38-270:48)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:270:13-270:49)
      kind: _0 = map::core::IndexMapCore::<K, V>::try_reserve_entries(move _27, move _28) -> [return: bb15, unwind: bb20]
  }
  preds [bb13]
  succs [bb15, bb20]

bb15
  0: StorageDead(_28)
    SourceInfo(src/map/core.rs:270:48-270:49)
  1: StorageDead(_27)
    SourceInfo(src/map/core.rs:270:48-270:49)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:269:9-273:10)
      kind: goto -> bb17
  }
  preds [bb14]
  succs [bb17]

bb16
  0: StorageDead(_21)
    SourceInfo(src/map/core.rs:269:68-269:69)
  1: StorageDead(_20)
    SourceInfo(src/map/core.rs:269:68-269:69)
  2: StorageLive(_29)
    SourceInfo(src/map/core.rs:272:16-272:18)
  3: _29 = ()
    SourceInfo(src/map/core.rs:272:16-272:18)
  4: _0 = core::result::Result::<(), TryReserveError>::Ok(move _29)
    SourceInfo(src/map/core.rs:272:13-272:19)
  5: StorageDead(_29)
    SourceInfo(src/map/core.rs:272:18-272:19)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:269:9-273:10)
      kind: goto -> bb17
  }
  preds [bb13]
  succs [bb17]

bb17
  0: StorageDead(_19)
    SourceInfo(src/map/core.rs:273:9-273:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:274:6-274:6)
      kind: goto -> bb18
  }
  preds [bb15, bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/map/core.rs:274:6-274:6)
      kind: return
  }
  preds [bb10, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(src/map/core.rs:266:61-266:62)
      kind: drop(_9) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(src/map/core.rs:264:5-274:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb8, bb9, bb11, bb12, bb14, bb19]
  succs []

