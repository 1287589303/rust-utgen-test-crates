bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:546:9-546:75)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:546:25-546:37)
  2: _4 = &mut (*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>))
    SourceInfo(src/map/core.rs:546:25-546:37)
  3: StorageLive(_5)
    SourceInfo(src/map/core.rs:546:39-546:49)
  4: _5 = _2
    SourceInfo(src/map/core.rs:546:39-546:49)
  5: StorageLive(_6)
    SourceInfo(src/map/core.rs:546:51-546:74)
  6: StorageLive(_7)
    SourceInfo(src/map/core.rs:546:51-546:63)
  7: _7 = &(*((*_1).0: &mut hashbrown::HashTable<usize>))
    SourceInfo(src/map/core.rs:546:51-546:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:546:51-546:74)
      kind: _6 = hashbrown::HashTable::<usize>::capacity(move _7) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:546:73-546:74)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:546:9-546:75)
      kind: _3 = map::core::reserve_entries::<K, V>(move _4, move _5, move _6) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(src/map/core.rs:546:74-546:75)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:546:74-546:75)
  2: StorageDead(_4)
    SourceInfo(src/map/core.rs:546:74-546:75)
  3: StorageDead(_3)
    SourceInfo(src/map/core.rs:546:75-546:76)
  4: _0 = const ()
    SourceInfo(src/map/core.rs:545:54-547:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:547:6-547:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map/core.rs:545:5-547:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

