bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:102:9-102:48)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:102:9-102:21)
  2: _4 = &mut ((*_1).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core.rs:102:9-102:21)
  3: StorageLive(_5)
    SourceInfo(src/map/core.rs:102:33-102:47)
  4: StorageLive(_6)
    SourceInfo(src/map/core.rs:102:33-102:47)
  5: _6 = &((*_2).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core.rs:102:33-102:47)
  6: _5 = &(*_6)
    SourceInfo(src/map/core.rs:102:33-102:47)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:102:9-102:48)
      kind: _3 = <hashbrown::HashTable<usize> as core::clone::Clone>::clone_from(move _4, move _5) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_5)
    SourceInfo(src/map/core.rs:102:47-102:48)
  1: StorageDead(_4)
    SourceInfo(src/map/core.rs:102:47-102:48)
  2: StorageDead(_6)
    SourceInfo(src/map/core.rs:102:48-102:49)
  3: StorageDead(_3)
    SourceInfo(src/map/core.rs:102:48-102:49)
  4: StorageLive(_7)
    SourceInfo(src/map/core.rs:103:9-107:10)
  5: StorageLive(_8)
    SourceInfo(src/map/core.rs:103:12-103:57)
  6: StorageLive(_9)
    SourceInfo(src/map/core.rs:103:12-103:35)
  7: StorageLive(_10)
    SourceInfo(src/map/core.rs:103:12-103:24)
  8: _10 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:103:12-103:24)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:103:12-103:35)
      kind: _9 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _10) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_10)
    SourceInfo(src/map/core.rs:103:34-103:35)
  1: StorageLive(_11)
    SourceInfo(src/map/core.rs:103:38-103:57)
  2: StorageLive(_12)
    SourceInfo(src/map/core.rs:103:38-103:51)
  3: _12 = &((*_2).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:103:38-103:51)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:103:38-103:57)
      kind: _11 = alloc::vec::Vec::<Bucket<K, V>>::len(move _12) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_12)
    SourceInfo(src/map/core.rs:103:56-103:57)
  1: _8 = Lt(move _9, move _11)
    SourceInfo(src/map/core.rs:103:12-103:57)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:103:12-103:57)
      kind: switchInt(move _8) -> [0: bb10, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:103:56-103:57)
  1: StorageDead(_9)
    SourceInfo(src/map/core.rs:103:56-103:57)
  2: StorageLive(_13)
    SourceInfo(src/map/core.rs:105:17-105:27)
  3: StorageLive(_14)
    SourceInfo(src/map/core.rs:105:30-105:49)
  4: StorageLive(_15)
    SourceInfo(src/map/core.rs:105:30-105:43)
  5: _15 = &((*_2).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:105:30-105:43)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:105:30-105:49)
      kind: _14 = alloc::vec::Vec::<Bucket<K, V>>::len(move _15) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: StorageDead(_15)
    SourceInfo(src/map/core.rs:105:48-105:49)
  1: StorageLive(_16)
    SourceInfo(src/map/core.rs:105:52-105:70)
  2: StorageLive(_17)
    SourceInfo(src/map/core.rs:105:52-105:64)
  3: _17 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:105:52-105:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:105:52-105:70)
      kind: _16 = alloc::vec::Vec::<Bucket<K, V>>::len(move _17) -> [return: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: StorageDead(_17)
    SourceInfo(src/map/core.rs:105:69-105:70)
  1: _18 = SubWithOverflow(_14, _16)
    SourceInfo(src/map/core.rs:105:30-105:70)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:105:30-105:70)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, move _16) -> [success: bb7, unwind: bb13]
  }
  preds [bb5]
  succs [bb7, bb13]

bb7
  0: _13 = move (_18.0: usize)
    SourceInfo(src/map/core.rs:105:30-105:70)
  1: StorageDead(_16)
    SourceInfo(src/map/core.rs:105:69-105:70)
  2: StorageDead(_14)
    SourceInfo(src/map/core.rs:105:69-105:70)
  3: FakeRead(ForLet(None), _13)
    SourceInfo(src/map/core.rs:105:17-105:27)
  4: StorageLive(_19)
    SourceInfo(src/map/core.rs:106:13-106:58)
  5: StorageLive(_20)
    SourceInfo(src/map/core.rs:106:13-106:30)
  6: StorageLive(_21)
    SourceInfo(src/map/core.rs:106:13-106:30)
  7: StorageLive(_22)
    SourceInfo(src/map/core.rs:106:13-106:17)
  8: _22 = &mut (*_1)
    SourceInfo(src/map/core.rs:106:13-106:17)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:106:13-106:30)
      kind: _21 = map::core::IndexMapCore::<K, V>::borrow_mut(move _22) -> [return: bb8, unwind: bb13]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: _20 = &mut _21
    SourceInfo(src/map/core.rs:106:13-106:30)
  1: StorageDead(_22)
    SourceInfo(src/map/core.rs:106:29-106:30)
  2: StorageLive(_23)
    SourceInfo(src/map/core.rs:106:47-106:57)
  3: _23 = _13
    SourceInfo(src/map/core.rs:106:47-106:57)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:106:13-106:58)
      kind: _19 = map::core::RefMut::<'_, K, V>::reserve_entries(move _20, move _23) -> [return: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: StorageDead(_23)
    SourceInfo(src/map/core.rs:106:57-106:58)
  1: StorageDead(_20)
    SourceInfo(src/map/core.rs:106:57-106:58)
  2: StorageDead(_21)
    SourceInfo(src/map/core.rs:106:58-106:59)
  3: StorageDead(_19)
    SourceInfo(src/map/core.rs:106:58-106:59)
  4: _7 = const ()
    SourceInfo(src/map/core.rs:103:58-107:10)
  5: StorageDead(_13)
    SourceInfo(src/map/core.rs:107:9-107:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:103:9-107:10)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb10
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:103:56-103:57)
  1: StorageDead(_9)
    SourceInfo(src/map/core.rs:103:56-103:57)
  2: _7 = const ()
    SourceInfo(src/map/core.rs:107:10-107:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:103:9-107:10)
      kind: goto -> bb11
  }
  preds [bb3]
  succs [bb11]

bb11
  0: StorageDead(_8)
    SourceInfo(src/map/core.rs:107:9-107:10)
  1: StorageDead(_7)
    SourceInfo(src/map/core.rs:107:9-107:10)
  2: StorageLive(_24)
    SourceInfo(src/map/core.rs:108:9-108:48)
  3: StorageLive(_25)
    SourceInfo(src/map/core.rs:108:9-108:21)
  4: _25 = &mut ((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:108:9-108:21)
  5: StorageLive(_26)
    SourceInfo(src/map/core.rs:108:33-108:47)
  6: StorageLive(_27)
    SourceInfo(src/map/core.rs:108:33-108:47)
  7: _27 = &((*_2).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:108:33-108:47)
  8: _26 = &(*_27)
    SourceInfo(src/map/core.rs:108:33-108:47)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:108:9-108:48)
      kind: _24 = <alloc::vec::Vec<Bucket<K, V>> as core::clone::Clone>::clone_from(move _25, move _26) -> [return: bb12, unwind: bb13]
  }
  preds [bb9, bb10]
  succs [bb12, bb13]

bb12
  0: StorageDead(_26)
    SourceInfo(src/map/core.rs:108:47-108:48)
  1: StorageDead(_25)
    SourceInfo(src/map/core.rs:108:47-108:48)
  2: StorageDead(_27)
    SourceInfo(src/map/core.rs:108:48-108:49)
  3: StorageDead(_24)
    SourceInfo(src/map/core.rs:108:48-108:49)
  4: _0 = const ()
    SourceInfo(src/map/core.rs:101:44-109:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:109:6-109:6)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(src/map/core.rs:101:5-109:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5, bb6, bb7, bb8, bb11]
  succs []

