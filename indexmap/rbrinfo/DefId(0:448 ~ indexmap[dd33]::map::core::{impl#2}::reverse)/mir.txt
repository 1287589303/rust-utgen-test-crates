bb0
  0: StorageLive(_2)
    SourceInfo(src/map/core.rs:514:9-514:31)
  1: StorageLive(_3)
    SourceInfo(src/map/core.rs:514:9-514:21)
  2: StorageLive(_4)
    SourceInfo(src/map/core.rs:514:9-514:31)
  3: StorageLive(_5)
    SourceInfo(src/map/core.rs:514:9-514:21)
  4: _5 = &mut ((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:514:9-514:21)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:514:9-514:31)
      kind: _4 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::DerefMut>::deref_mut(move _5) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: _3 = &mut (*_4)
    SourceInfo(src/map/core.rs:514:9-514:21)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:514:20-514:21)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:514:9-514:31)
      kind: _2 = core::slice::<impl [Bucket<K, V>]>::reverse(move _3) -> [return: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: StorageDead(_3)
    SourceInfo(src/map/core.rs:514:30-514:31)
  1: StorageDead(_4)
    SourceInfo(src/map/core.rs:514:31-514:32)
  2: StorageDead(_2)
    SourceInfo(src/map/core.rs:514:31-514:32)
  3: StorageLive(_6)
    SourceInfo(src/map/core.rs:518:13-518:16)
  4: StorageLive(_7)
    SourceInfo(src/map/core.rs:518:19-518:31)
  5: _7 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:518:19-518:31)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:518:19-518:37)
      kind: _6 = alloc::vec::Vec::<Bucket<K, V>>::len(move _7) -> [return: bb3, unwind: bb14]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:518:36-518:37)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(src/map/core.rs:518:13-518:16)
  2: StorageLive(_8)
    SourceInfo(src/map/core.rs:519:18-519:35)
  3: StorageLive(_9)
    SourceInfo(src/map/core.rs:519:18-519:35)
  4: _9 = &mut ((*_1).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core.rs:519:18-519:35)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:18-519:35)
      kind: _8 = <&mut hashbrown::HashTable<usize> as core::iter::IntoIterator>::into_iter(move _9) -> [return: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: StorageDead(_9)
    SourceInfo(src/map/core.rs:519:34-519:35)
  1: PlaceMention(_8)
    SourceInfo(src/map/core.rs:519:18-519:35)
  2: StorageLive(_10)
    SourceInfo(src/map/core.rs:519:18-519:35)
  3: _10 = move _8
    SourceInfo(src/map/core.rs:519:18-519:35)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:9-521:10)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:9-521:10)
      kind: falseUnwind -> [real: bb6, unwind: bb14]
  }
  preds [bb4, bb13]
  succs [bb6, bb14]

bb6
  0: StorageLive(_12)
    SourceInfo(src/map/core.rs:519:18-519:35)
  1: StorageLive(_13)
    SourceInfo(src/map/core.rs:519:18-519:35)
  2: StorageLive(_14)
    SourceInfo(src/map/core.rs:519:18-519:35)
  3: StorageLive(_15)
    SourceInfo(src/map/core.rs:519:18-519:35)
  4: _15 = &mut _10
    SourceInfo(src/map/core.rs:519:18-519:35)
  5: _14 = &mut (*_15)
    SourceInfo(src/map/core.rs:519:18-519:35)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:18-519:35)
      kind: _13 = <hashbrown::hash_table::IterMut<'_, usize> as core::iter::Iterator>::next(move _14) -> [return: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: StorageDead(_14)
    SourceInfo(src/map/core.rs:519:34-519:35)
  1: PlaceMention(_13)
    SourceInfo(src/map/core.rs:519:18-519:35)
  2: _16 = discriminant(_13)
    SourceInfo(src/map/core.rs:519:18-519:35)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:18-519:35)
      kind: switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9, bb10]

bb8
  0: FakeRead(ForMatchedPlace(None), _13)
    SourceInfo(src/map/core.rs:519:18-519:35)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:18-519:35)
      kind: unreachable
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:9-521:10)
      kind: falseEdge -> [real: bb11, imaginary: bb10]
  }
  preds [bb7]
  succs [bb10, bb11]

bb10
  0: StorageLive(_18)
    SourceInfo(src/map/core.rs:519:13-519:14)
  1: _18 = move ((_13 as Some).0: &mut usize)
    SourceInfo(src/map/core.rs:519:13-519:14)
  2: StorageLive(_19)
    SourceInfo(src/map/core.rs:520:18-520:26)
  3: StorageLive(_20)
    SourceInfo(src/map/core.rs:520:18-520:21)
  4: _20 = _6
    SourceInfo(src/map/core.rs:520:18-520:21)
  5: StorageLive(_21)
    SourceInfo(src/map/core.rs:520:24-520:26)
  6: _21 = (*_18)
    SourceInfo(src/map/core.rs:520:24-520:26)
  7: _22 = SubWithOverflow(_20, _21)
    SourceInfo(src/map/core.rs:520:18-520:26)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:520:18-520:26)
      kind: assert(!move (_22.1: bool), "attempt to compute `{} - {}`, which would overflow", move _20, move _21) -> [success: bb12, unwind: bb14]
  }
  preds [bb7, bb9]
  succs [bb12, bb14]

bb11
  0: _0 = const ()
    SourceInfo(src/map/core.rs:519:9-521:10)
  1: StorageDead(_15)
    SourceInfo(src/map/core.rs:521:9-521:10)
  2: StorageDead(_13)
    SourceInfo(src/map/core.rs:521:9-521:10)
  3: StorageDead(_12)
    SourceInfo(src/map/core.rs:521:9-521:10)
  4: StorageDead(_10)
    SourceInfo(src/map/core.rs:521:9-521:10)
  5: StorageDead(_8)
    SourceInfo(src/map/core.rs:521:9-521:10)
  6: StorageDead(_6)
    SourceInfo(src/map/core.rs:522:5-522:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:522:6-522:6)
      kind: return
  }
  preds [bb9]
  succs []

bb12
  0: _19 = move (_22.0: usize)
    SourceInfo(src/map/core.rs:520:18-520:26)
  1: StorageDead(_21)
    SourceInfo(src/map/core.rs:520:25-520:26)
  2: StorageDead(_20)
    SourceInfo(src/map/core.rs:520:25-520:26)
  3: _23 = SubWithOverflow(_19, const 1_usize)
    SourceInfo(src/map/core.rs:520:18-520:30)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:520:18-520:30)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const 1_usize) -> [success: bb13, unwind: bb14]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: (*_18) = move (_23.0: usize)
    SourceInfo(src/map/core.rs:520:13-520:30)
  1: StorageDead(_19)
    SourceInfo(src/map/core.rs:520:29-520:30)
  2: _12 = const ()
    SourceInfo(src/map/core.rs:519:36-521:10)
  3: StorageDead(_18)
    SourceInfo(src/map/core.rs:521:9-521:10)
  4: StorageDead(_15)
    SourceInfo(src/map/core.rs:521:9-521:10)
  5: StorageDead(_13)
    SourceInfo(src/map/core.rs:521:9-521:10)
  6: StorageDead(_12)
    SourceInfo(src/map/core.rs:521:9-521:10)
  7: _11 = const ()
    SourceInfo(src/map/core.rs:519:9-521:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:519:9-521:10)
      kind: goto -> bb5
  }
  preds [bb12]
  succs [bb5]

bb14
  Terminator {
      source_info: SourceInfo(src/map/core.rs:513:5-522:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb5, bb6, bb10, bb12]
  succs []

