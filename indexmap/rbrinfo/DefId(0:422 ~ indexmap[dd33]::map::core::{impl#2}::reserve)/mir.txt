bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:250:9-250:66)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:250:9-250:21)
  2: _4 = &mut ((*_1).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core.rs:250:9-250:21)
  3: StorageLive(_5)
    SourceInfo(src/map/core.rs:250:30-250:40)
  4: _5 = _2
    SourceInfo(src/map/core.rs:250:30-250:40)
  5: StorageLive(_6)
    SourceInfo(src/map/core.rs:250:42-250:65)
  6: StorageLive(_7)
    SourceInfo(src/map/core.rs:250:51-250:64)
  7: StorageLive(_8)
    SourceInfo(src/map/core.rs:250:51-250:64)
  8: StorageLive(_9)
    SourceInfo(src/map/core.rs:250:51-250:64)
  9: StorageLive(_10)
    SourceInfo(src/map/core.rs:250:51-250:64)
  10: _10 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:250:51-250:64)
  11: _9 = &(*_10)
    SourceInfo(src/map/core.rs:250:51-250:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:250:51-250:64)
      kind: _8 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: _7 = &(*_8)
    SourceInfo(src/map/core.rs:250:51-250:64)
  1: StorageDead(_9)
    SourceInfo(src/map/core.rs:250:63-250:64)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:250:42-250:65)
      kind: _6 = map::core::get_hash::<K, V>(move _7) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_7)
    SourceInfo(src/map/core.rs:250:64-250:65)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:250:9-250:66)
      kind: _3 = hashbrown::HashTable::<usize>::reserve::<impl for<'a> Fn(&'a usize) -> u64 + '_>(move _4, move _5, move _6) -> [return: bb3, unwind: bb12]
  }
  preds [bb1]
  succs [bb3, bb12]

bb3
  0: StorageDead(_6)
    SourceInfo(src/map/core.rs:250:65-250:66)
  1: StorageDead(_5)
    SourceInfo(src/map/core.rs:250:65-250:66)
  2: StorageDead(_4)
    SourceInfo(src/map/core.rs:250:65-250:66)
  3: StorageDead(_10)
    SourceInfo(src/map/core.rs:250:66-250:67)
  4: StorageDead(_8)
    SourceInfo(src/map/core.rs:250:66-250:67)
  5: StorageDead(_3)
    SourceInfo(src/map/core.rs:250:66-250:67)
  6: StorageLive(_11)
    SourceInfo(src/map/core.rs:252:12-252:69)
  7: StorageLive(_12)
    SourceInfo(src/map/core.rs:252:12-252:22)
  8: _12 = _2
    SourceInfo(src/map/core.rs:252:12-252:22)
  9: StorageLive(_13)
    SourceInfo(src/map/core.rs:252:25-252:69)
  10: StorageLive(_14)
    SourceInfo(src/map/core.rs:252:25-252:48)
  11: StorageLive(_15)
    SourceInfo(src/map/core.rs:252:25-252:37)
  12: _15 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:252:25-252:37)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:252:25-252:48)
      kind: _14 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _15) -> [return: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: StorageDead(_15)
    SourceInfo(src/map/core.rs:252:47-252:48)
  1: StorageLive(_16)
    SourceInfo(src/map/core.rs:252:51-252:69)
  2: StorageLive(_17)
    SourceInfo(src/map/core.rs:252:51-252:63)
  3: _17 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:252:51-252:63)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:252:51-252:69)
      kind: _16 = alloc::vec::Vec::<Bucket<K, V>>::len(move _17) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: StorageDead(_17)
    SourceInfo(src/map/core.rs:252:68-252:69)
  1: _18 = SubWithOverflow(_14, _16)
    SourceInfo(src/map/core.rs:252:25-252:69)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:252:25-252:69)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, move _16) -> [success: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: _13 = move (_18.0: usize)
    SourceInfo(src/map/core.rs:252:25-252:69)
  1: StorageDead(_16)
    SourceInfo(src/map/core.rs:252:68-252:69)
  2: StorageDead(_14)
    SourceInfo(src/map/core.rs:252:68-252:69)
  3: _11 = Gt(move _12, move _13)
    SourceInfo(src/map/core.rs:252:12-252:69)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:252:12-252:69)
      kind: switchInt(move _11) -> [0: bb10, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:252:68-252:69)
  1: StorageDead(_12)
    SourceInfo(src/map/core.rs:252:68-252:69)
  2: StorageLive(_19)
    SourceInfo(src/map/core.rs:253:13-253:58)
  3: StorageLive(_20)
    SourceInfo(src/map/core.rs:253:13-253:30)
  4: StorageLive(_21)
    SourceInfo(src/map/core.rs:253:13-253:30)
  5: StorageLive(_22)
    SourceInfo(src/map/core.rs:253:13-253:17)
  6: _22 = &mut (*_1)
    SourceInfo(src/map/core.rs:253:13-253:17)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:253:13-253:30)
      kind: _21 = map::core::IndexMapCore::<K, V>::borrow_mut(move _22) -> [return: bb8, unwind: bb13]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: _20 = &mut _21
    SourceInfo(src/map/core.rs:253:13-253:30)
  1: StorageDead(_22)
    SourceInfo(src/map/core.rs:253:29-253:30)
  2: StorageLive(_23)
    SourceInfo(src/map/core.rs:253:47-253:57)
  3: _23 = _2
    SourceInfo(src/map/core.rs:253:47-253:57)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:253:13-253:58)
      kind: _19 = map::core::RefMut::<'_, K, V>::reserve_entries(move _20, move _23) -> [return: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: StorageDead(_23)
    SourceInfo(src/map/core.rs:253:57-253:58)
  1: StorageDead(_20)
    SourceInfo(src/map/core.rs:253:57-253:58)
  2: StorageDead(_21)
    SourceInfo(src/map/core.rs:253:58-253:59)
  3: StorageDead(_19)
    SourceInfo(src/map/core.rs:253:58-253:59)
  4: _0 = const ()
    SourceInfo(src/map/core.rs:252:70-254:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:252:9-254:10)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb10
  0: StorageDead(_13)
    SourceInfo(src/map/core.rs:252:68-252:69)
  1: StorageDead(_12)
    SourceInfo(src/map/core.rs:252:68-252:69)
  2: _0 = const ()
    SourceInfo(src/map/core.rs:254:10-254:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:252:9-254:10)
      kind: goto -> bb11
  }
  preds [bb6]
  succs [bb11]

bb11
  0: StorageDead(_11)
    SourceInfo(src/map/core.rs:254:9-254:10)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:255:6-255:6)
      kind: return
  }
  preds [bb9, bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(src/map/core.rs:250:65-250:66)
      kind: drop(_6) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(src/map/core.rs:249:5-255:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb5, bb7, bb8, bb12]
  succs []

