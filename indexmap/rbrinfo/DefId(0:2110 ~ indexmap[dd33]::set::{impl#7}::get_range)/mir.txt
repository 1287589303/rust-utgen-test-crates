bb0
  0: StorageLive(_3)
    SourceInfo(src/set.rs:1004:13-1004:20)
  1: StorageLive(_4)
    SourceInfo(src/set.rs:1004:23-1004:27)
  2: _4 = &(*_1)
    SourceInfo(src/set.rs:1004:23-1004:27)
  Terminator {
      source_info: SourceInfo(src/set.rs:1004:23-1004:40)
      kind: _3 = <set::IndexSet<T, S> as Entries>::as_entries(move _4) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageDead(_4)
    SourceInfo(src/set.rs:1004:39-1004:40)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/set.rs:1004:13-1004:20)
  2: StorageLive(_5)
    SourceInfo(src/set.rs:1005:13-1005:18)
  3: StorageLive(_6)
    SourceInfo(src/set.rs:1005:21-1005:62)
  4: StorageLive(_7)
    SourceInfo(src/set.rs:1005:21-1005:61)
  5: StorageLive(_8)
    SourceInfo(src/set.rs:1005:40-1005:45)
  6: _8 = move _2
    SourceInfo(src/set.rs:1005:40-1005:45)
  7: StorageLive(_9)
    SourceInfo(src/set.rs:1005:47-1005:60)
  8: StorageLive(_10)
    SourceInfo(src/set.rs:1005:47-1005:54)
  9: _10 = &(*_3)
    SourceInfo(src/set.rs:1005:47-1005:54)
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:47-1005:60)
      kind: _9 = core::slice::<impl [Bucket<T, ()>]>::len(move _10) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_10)
    SourceInfo(src/set.rs:1005:59-1005:60)
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:21-1005:61)
      kind: _7 = util::try_simplify_range::<R>(move _8, move _9) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_9)
    SourceInfo(src/set.rs:1005:60-1005:61)
  1: StorageDead(_8)
    SourceInfo(src/set.rs:1005:60-1005:61)
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:21-1005:62)
      kind: _6 = <core::option::Option<core::ops::Range<usize>> as core::ops::Try>::branch(move _7) -> [return: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: StorageDead(_7)
    SourceInfo(src/set.rs:1005:61-1005:62)
  1: PlaceMention(_6)
    SourceInfo(src/set.rs:1005:21-1005:62)
  2: _11 = discriminant(_6)
    SourceInfo(src/set.rs:1005:21-1005:62)
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:21-1005:62)
      kind: switchInt(move _11) -> [0: bb7, 1: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(src/set.rs:1005:21-1005:62)
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:21-1005:62)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:61-1005:62)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_15)
    SourceInfo(src/set.rs:1005:21-1005:62)
  1: _15 = move ((_6 as Continue).0: core::ops::Range<usize>)
    SourceInfo(src/set.rs:1005:21-1005:62)
  2: _5 = move _15
    SourceInfo(src/set.rs:1005:21-1005:62)
  3: StorageDead(_15)
    SourceInfo(src/set.rs:1005:61-1005:62)
  4: FakeRead(ForLet(None), _5)
    SourceInfo(src/set.rs:1005:13-1005:18)
  5: StorageDead(_6)
    SourceInfo(src/set.rs:1005:62-1005:63)
  6: StorageLive(_16)
    SourceInfo(src/set.rs:1006:9-1006:27)
  7: StorageLive(_17)
    SourceInfo(src/set.rs:1006:9-1006:16)
  8: _17 = &(*_3)
    SourceInfo(src/set.rs:1006:9-1006:16)
  9: StorageLive(_18)
    SourceInfo(src/set.rs:1006:21-1006:26)
  10: _18 = move _5
    SourceInfo(src/set.rs:1006:21-1006:26)
  Terminator {
      source_info: SourceInfo(src/set.rs:1006:9-1006:27)
      kind: _16 = core::slice::<impl [Bucket<T, ()>]>::get::<core::ops::Range<usize>>(move _17, move _18) -> [return: bb10, unwind: bb14]
  }
  preds [bb4, bb6]
  succs [bb10, bb14]

bb8
  0: StorageLive(_12)
    SourceInfo(src/set.rs:1005:61-1005:62)
  1: _12 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(src/set.rs:1005:61-1005:62)
  2: StorageLive(_14)
    SourceInfo(src/set.rs:1005:61-1005:62)
  3: _14 = _12
    SourceInfo(src/set.rs:1005:61-1005:62)
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:21-1005:62)
      kind: _0 = <core::option::Option<&set::slice::Slice<T>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _14) -> [return: bb9, unwind: bb14]
  }
  preds [bb6]
  succs [bb9, bb14]

bb9
  0: StorageDead(_14)
    SourceInfo(src/set.rs:1005:61-1005:62)
  1: StorageDead(_12)
    SourceInfo(src/set.rs:1005:61-1005:62)
  2: StorageDead(_6)
    SourceInfo(src/set.rs:1005:62-1005:63)
  3: StorageDead(_5)
    SourceInfo(src/set.rs:1007:5-1007:6)
  4: StorageDead(_3)
    SourceInfo(src/set.rs:1007:5-1007:6)
  Terminator {
      source_info: SourceInfo(src/set.rs:1007:5-1007:6)
      kind: drop(_2) -> [return: bb12, unwind: bb15]
  }
  preds [bb8]
  succs [bb12, bb15]

bb10
  0: StorageDead(_18)
    SourceInfo(src/set.rs:1006:26-1006:27)
  1: StorageDead(_17)
    SourceInfo(src/set.rs:1006:26-1006:27)
  Terminator {
      source_info: SourceInfo(src/set.rs:1006:9-1006:50)
      kind: _0 = core::option::Option::<&[Bucket<T, ()>]>::map::<&set::slice::Slice<T>, for<'a> fn(&'a [Bucket<T, ()>]) -> &'a set::slice::Slice<T> {set::slice::Slice::<T>::from_slice}>(move _16, set::slice::Slice::<T>::from_slice) -> [return: bb11, unwind: bb14]
  }
  preds [bb7]
  succs [bb11, bb14]

bb11
  0: StorageDead(_16)
    SourceInfo(src/set.rs:1006:49-1006:50)
  1: StorageDead(_5)
    SourceInfo(src/set.rs:1007:5-1007:6)
  2: StorageDead(_3)
    SourceInfo(src/set.rs:1007:5-1007:6)
  Terminator {
      source_info: SourceInfo(src/set.rs:1007:5-1007:6)
      kind: drop(_2) -> [return: bb12, unwind: bb15]
  }
  preds [bb10]
  succs [bb12, bb15]

bb12
  Terminator {
      source_info: SourceInfo(src/set.rs:1007:6-1007:6)
      kind: return
  }
  preds [bb9, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(src/set.rs:1005:60-1005:61)
      kind: drop(_8) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb1, bb2]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/set.rs:1007:5-1007:6)
      kind: drop(_2) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb0, bb3, bb7, bb8, bb10, bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/set.rs:1003:5-1007:6)
      kind: resume
  }
  preds [bb9, bb11, bb14]
  succs []

