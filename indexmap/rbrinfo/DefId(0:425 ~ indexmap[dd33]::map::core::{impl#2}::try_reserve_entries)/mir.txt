bb0
  0: StorageLive(_3)
    SourceInfo(src/map/core.rs:280:13-280:25)
  1: StorageLive(_4)
    SourceInfo(src/map/core.rs:280:37-280:60)
  2: StorageLive(_5)
    SourceInfo(src/map/core.rs:280:37-280:49)
  3: _5 = &((*_1).0: hashbrown::HashTable<usize>)
    SourceInfo(src/map/core.rs:280:37-280:49)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:280:37-280:60)
      kind: _4 = hashbrown::HashTable::<usize>::capacity(move _5) -> [return: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: StorageDead(_5)
    SourceInfo(src/map/core.rs:280:59-280:60)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:280:28-280:89)
      kind: _3 = <usize as core::cmp::Ord>::min(move _4, const map::core::IndexMapCore::<K, V>::MAX_ENTRIES_CAPACITY) -> [return: bb2, unwind: bb15]
  }
  preds [bb0]
  succs [bb2, bb15]

bb2
  0: StorageDead(_4)
    SourceInfo(src/map/core.rs:280:88-280:89)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/map/core.rs:280:13-280:25)
  2: StorageLive(_6)
    SourceInfo(src/map/core.rs:281:13-281:20)
  3: StorageLive(_7)
    SourceInfo(src/map/core.rs:281:23-281:35)
  4: _7 = _3
    SourceInfo(src/map/core.rs:281:23-281:35)
  5: StorageLive(_8)
    SourceInfo(src/map/core.rs:281:38-281:56)
  6: StorageLive(_9)
    SourceInfo(src/map/core.rs:281:38-281:50)
  7: _9 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:281:38-281:50)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:281:38-281:56)
      kind: _8 = alloc::vec::Vec::<Bucket<K, V>>::len(move _9) -> [return: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: StorageDead(_9)
    SourceInfo(src/map/core.rs:281:55-281:56)
  1: _10 = SubWithOverflow(_7, _8)
    SourceInfo(src/map/core.rs:281:23-281:56)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:281:23-281:56)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _8) -> [success: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: _6 = move (_10.0: usize)
    SourceInfo(src/map/core.rs:281:23-281:56)
  1: StorageDead(_8)
    SourceInfo(src/map/core.rs:281:55-281:56)
  2: StorageDead(_7)
    SourceInfo(src/map/core.rs:281:55-281:56)
  3: FakeRead(ForLet(None), _6)
    SourceInfo(src/map/core.rs:281:13-281:20)
  4: StorageLive(_11)
    SourceInfo(src/map/core.rs:282:9-284:10)
  5: StorageLive(_12)
    SourceInfo(src/map/core.rs:282:12-282:32)
  6: StorageLive(_13)
    SourceInfo(src/map/core.rs:282:12-282:19)
  7: _13 = _6
    SourceInfo(src/map/core.rs:282:12-282:19)
  8: StorageLive(_14)
    SourceInfo(src/map/core.rs:282:22-282:32)
  9: _14 = _2
    SourceInfo(src/map/core.rs:282:22-282:32)
  10: _12 = Gt(move _13, move _14)
    SourceInfo(src/map/core.rs:282:12-282:32)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:282:12-282:32)
      kind: switchInt(move _12) -> [0: bb10, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_14)
    SourceInfo(src/map/core.rs:282:31-282:32)
  1: StorageDead(_13)
    SourceInfo(src/map/core.rs:282:31-282:32)
  2: StorageLive(_15)
    SourceInfo(src/map/core.rs:282:36-282:83)
  3: StorageLive(_16)
    SourceInfo(src/map/core.rs:282:36-282:75)
  4: StorageLive(_17)
    SourceInfo(src/map/core.rs:282:36-282:75)
  5: StorageLive(_18)
    SourceInfo(src/map/core.rs:282:36-282:48)
  6: _18 = &mut ((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:282:36-282:48)
  7: StorageLive(_19)
    SourceInfo(src/map/core.rs:282:67-282:74)
  8: _19 = _6
    SourceInfo(src/map/core.rs:282:67-282:74)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:282:36-282:75)
      kind: _17 = alloc::vec::Vec::<Bucket<K, V>>::try_reserve_exact(move _18, move _19) -> [return: bb6, unwind: bb15]
  }
  preds [bb4]
  succs [bb6, bb15]

bb6
  0: _16 = &_17
    SourceInfo(src/map/core.rs:282:36-282:75)
  1: StorageDead(_19)
    SourceInfo(src/map/core.rs:282:74-282:75)
  2: StorageDead(_18)
    SourceInfo(src/map/core.rs:282:74-282:75)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:282:36-282:83)
      kind: _15 = core::result::Result::<(), alloc::collections::TryReserveError>::is_ok(move _16) -> [return: bb7, unwind: bb15]
  }
  preds [bb5]
  succs [bb7, bb15]

bb7
  Terminator {
      source_info: SourceInfo(src/map/core.rs:282:36-282:83)
      kind: switchInt(move _15) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_17)
    SourceInfo(src/map/core.rs:282:82-282:83)
  1: StorageDead(_16)
    SourceInfo(src/map/core.rs:282:82-282:83)
  2: StorageLive(_21)
    SourceInfo(src/map/core.rs:283:23-283:25)
  3: _21 = ()
    SourceInfo(src/map/core.rs:283:23-283:25)
  4: _0 = core::result::Result::<(), TryReserveError>::Ok(move _21)
    SourceInfo(src/map/core.rs:283:20-283:26)
  5: StorageDead(_21)
    SourceInfo(src/map/core.rs:283:25-283:26)
  6: StorageDead(_15)
    SourceInfo(src/map/core.rs:284:9-284:10)
  7: StorageDead(_12)
    SourceInfo(src/map/core.rs:284:9-284:10)
  8: StorageDead(_11)
    SourceInfo(src/map/core.rs:284:9-284:10)
  9: StorageDead(_6)
    SourceInfo(src/map/core.rs:288:5-288:6)
  10: StorageDead(_3)
    SourceInfo(src/map/core.rs:288:5-288:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:288:6-288:6)
      kind: goto -> bb14
  }
  preds [bb7]
  succs [bb14]

bb9
  0: StorageDead(_17)
    SourceInfo(src/map/core.rs:282:82-282:83)
  1: StorageDead(_16)
    SourceInfo(src/map/core.rs:282:82-282:83)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb10
  0: StorageDead(_14)
    SourceInfo(src/map/core.rs:282:31-282:32)
  1: StorageDead(_13)
    SourceInfo(src/map/core.rs:282:31-282:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb11
  }
  preds [bb4]
  succs [bb11]

bb11
  0: _11 = const ()
    SourceInfo(src/map/core.rs:284:10-284:10)
  1: StorageDead(_15)
    SourceInfo(src/map/core.rs:284:9-284:10)
  2: StorageDead(_12)
    SourceInfo(src/map/core.rs:284:9-284:10)
  3: StorageDead(_11)
    SourceInfo(src/map/core.rs:284:9-284:10)
  4: StorageLive(_22)
    SourceInfo(src/map/core.rs:285:9-286:43)
  5: StorageLive(_23)
    SourceInfo(src/map/core.rs:285:9-285:21)
  6: _23 = &mut ((*_1).1: alloc::vec::Vec<Bucket<K, V>>)
    SourceInfo(src/map/core.rs:285:9-285:21)
  7: StorageLive(_24)
    SourceInfo(src/map/core.rs:286:32-286:42)
  8: _24 = _2
    SourceInfo(src/map/core.rs:286:32-286:42)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:285:9-286:43)
      kind: _22 = alloc::vec::Vec::<Bucket<K, V>>::try_reserve_exact(move _23, move _24) -> [return: bb12, unwind: bb15]
  }
  preds [bb9, bb10]
  succs [bb12, bb15]

bb12
  0: StorageDead(_24)
    SourceInfo(src/map/core.rs:286:42-286:43)
  1: StorageDead(_23)
    SourceInfo(src/map/core.rs:286:42-286:43)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:285:9-287:50)
      kind: _0 = core::result::Result::<(), alloc::collections::TryReserveError>::map_err::<TryReserveError, fn(alloc::collections::TryReserveError) -> TryReserveError {TryReserveError::from_alloc}>(move _22, TryReserveError::from_alloc) -> [return: bb13, unwind: bb15]
  }
  preds [bb11]
  succs [bb13, bb15]

bb13
  0: StorageDead(_22)
    SourceInfo(src/map/core.rs:287:49-287:50)
  1: StorageDead(_6)
    SourceInfo(src/map/core.rs:288:5-288:6)
  2: StorageDead(_3)
    SourceInfo(src/map/core.rs:288:5-288:6)
  Terminator {
      source_info: SourceInfo(src/map/core.rs:288:6-288:6)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/map/core.rs:288:6-288:6)
      kind: return
  }
  preds [bb8, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(src/map/core.rs:277:5-288:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb5, bb6, bb11, bb12]
  succs []

