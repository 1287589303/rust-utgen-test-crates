[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: [Bucket<K, V>]),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:85:9: 85:36 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [Bucket<K, V>]>::get_mut::<usize>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:85:9: 85:57 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&mut Bucket<K, V>>::map::<(&K, &mut V), for<'a> fn(&'a mut Bucket<K, V>) -> (&'a K, &'a mut V) {Bucket::<K, V>::ref_mut}>(move _3, Bucket::<K, V>::ref_mut) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:86:6: 86:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:84:5: 86:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#0, &'{erased} mut V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:84:54: 84:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:84:26: 84:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:84:44: 84:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:84:37: 84:42 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:84:37: 84:42 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:84:37: 84:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:85:9: 85:57 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut Bucket<K/#0, V/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:85:9: 85:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:85:9: 85:57 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:85:9: 85:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:85:9: 85:57 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:85:30: 85:35 (#0),
            scope: scope[0],
        },
    },
]