[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1157:20: 1157:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = <I as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@src/set.rs:1157:45: 1157:48},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1157:20: 1157:57 (#0),
                    scope: scope[0],
                },
                kind: _3 = <<I as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::map::<(T, ()), {closure@src/set.rs:1157:45: 1157:48}>(move _4, move _6) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut ((*_1).0: map::IndexMap<T, (), S>),
            StorageLive(_9),
            _9 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1158:9: 1158:30 (#0),
                    scope: scope[1],
                },
                kind: _7 = <map::IndexMap<T, (), S> as core::iter::Extend<(T, ())>>::extend::<core::iter::Map<<I as core::iter::IntoIterator>::IntoIter, {closure@src/set.rs:1157:45: 1157:48}>>(move _8, move _9) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1159:5: 1159:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1159:5: 1159:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1159:6: 1159:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1158:29: 1158:30 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1159:5: 1159:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1157:56: 1157:57 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1157:39: 1157:40 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1159:5: 1159:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1156:5: 1159:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1156:65: 1156:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1156:42: 1156:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1156:63: 1156:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1156:53: 1156:61 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1156:53: 1156:61 (#0),
                    },
                ),
            ),
        ),
        ty: I/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1156:53: 1156:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1157:20: 1157:57 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1157:13: 1157:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<Alias(Projection, AliasTy { args: [I/#2], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Closure(DefId(0:2141 ~ indexmap[dd33]::set::{impl#11}::extend::{closure#0}), [T/#0, S/#1, I/#2, i16, Binder { value: extern "RustCall" fn((T/#0,)) -> (T/#0, ()), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1157:13: 1157:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#2,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1157:20: 1157:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1157:20: 1157:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:2141 ~ indexmap[dd33]::set::{impl#11}::extend::{closure#0}),
            [
                T/#0,
                S/#1,
                I/#2,
                i16,
                Binder { value: extern "RustCall" fn((T/#0,)) -> (T/#0, ()), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1157:45: 1157:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1158:9: 1158:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::IndexMap<T/#0, (), S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1158:9: 1158:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<Alias(Projection, AliasTy { args: [I/#2], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Closure(DefId(0:2141 ~ indexmap[dd33]::set::{impl#11}::extend::{closure#0}), [T/#0, S/#1, I/#2, i16, Binder { value: extern "RustCall" fn((T/#0,)) -> (T/#0, ()), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1158:25: 1158:29 (#0),
            scope: scope[0],
        },
    },
]