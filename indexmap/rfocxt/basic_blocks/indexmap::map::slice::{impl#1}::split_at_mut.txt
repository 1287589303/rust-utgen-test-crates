[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: [Bucket<K, V>]),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:136:31: 136:63 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [Bucket<K, V>]>::split_at_mut(move _6, move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = move (_5.0: &mut [Bucket<K, V>]),
            StorageLive(_4),
            _4 = move (_5.1: &mut [Bucket<K, V>]),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:137:10: 137:37 (#0),
                    scope: scope[1],
                },
                kind: _9 = map::slice::Slice::<K, V>::from_mut_slice(move _10) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:137:39: 137:67 (#0),
                    scope: scope[1],
                },
                kind: _12 = map::slice::Slice::<K, V>::from_mut_slice(move _13) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &mut (*_12),
            StorageDead(_13),
            _0 = (move _8, move _11),
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:138:6: 138:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:135:5: 138:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut map::slice::Slice<K/#0, V/#1>, &'{erased} mut map::slice::Slice<K/#0, V/#1>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:135:53: 135:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:135:25: 135:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:135:43: 135:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:135:36: 135:41 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:135:36: 135:41 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:135:36: 135:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/map/slice.rs:136:31: 136:63 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:136:13: 136:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:136:14: 136:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/map/slice.rs:136:31: 136:63 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:136:13: 136:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:136:21: 136:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut [Bucket<K/#0, V/#1>], &'{erased} mut [Bucket<K/#0, V/#1>]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:136:31: 136:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:136:31: 136:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:136:57: 136:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:137:9: 137:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:137:10: 137:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:137:9: 137:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:137:10: 137:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:137:9: 137:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:137:31: 137:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:137:9: 137:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:137:39: 137:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:137:9: 137:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:137:39: 137:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:137:9: 137:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:137:60: 137:66 (#0),
            scope: scope[0],
        },
    },
]