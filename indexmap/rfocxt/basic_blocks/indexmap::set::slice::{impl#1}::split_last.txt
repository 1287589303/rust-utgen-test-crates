[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: [Bucket<T, ()>]),
            PlaceMention(_2),
            _3 = Len((*_2)),
            _4 = const 1_usize,
            _5 = Ge(move _3, move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:106:16: 106:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:106:16: 106:33 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &(*_2)[:-1],
            StorageLive(_7),
            _7 = &(*_2)[-1 of 1],
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_7).1: T),
            _9 = &(*_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:107:30: 107:52 (#0),
                    scope: scope[1],
                },
                kind: _12 = set::slice::Slice::<T>::from_slice(move _13) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_13),
            _8 = (move _9, move _11),
            StorageDead(_11),
            StorageDead(_9),
            _0 = core::option::Option::<(&T, &set::slice::Slice<T>)>::Some(move _8),
            StorageDead(_8),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:106:9: 110:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<(&T, &set::slice::Slice<T>)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:106:9: 110:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:111:6: 111:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:105:5: 111:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} T/#0, &'{erased} set::slice::Slice<T/#0>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:105:33: 105:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:105:23: 105:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:106:9: 110:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:106:36: 106:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:106:16: 106:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:106:16: 106:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:106:16: 106:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/set/slice.rs:106:36: 106:49 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:106:16: 106:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:106:17: 106:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/set/slice.rs:106:36: 106:49 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:106:16: 106:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Bucket<T/#0, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:106:28: 106:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (&'{erased} T/#0, &'{erased} set::slice::Slice<T/#0>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:107:18: 107:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:107:13: 107:54 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:107:19: 107:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:107:13: 107:54 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:107:19: 107:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:107:13: 107:54 (#0),
                },
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:107:30: 107:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:107:13: 107:54 (#0),
                },
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:107:30: 107:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:107:13: 107:54 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:107:47: 107:51 (#0),
            scope: scope[0],
        },
    },
]