[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _3,
            StorageLive(_7),
            _7 = &(*_2),
            _5 = {closure@src/set/slice.rs:159:31: 159:34} { f: move _6, b: move _7 },
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:159:9: 159:47 (#0),
                    scope: scope[0],
                },
                kind: _0 = set::slice::Slice::<T>::binary_search_by::<'_, {closure@src/set/slice.rs:159:31: 159:34}>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:160:5: 160:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:160:6: 160:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:160:5: 160:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:154:5: 160:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:154:73: 154:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:154:43: 154:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:154:56: 154:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:154:53: 154:54 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:154:53: 154:54 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:154:53: 154:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:154:67: 154:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:154:60: 154:65 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:154:60: 154:65 (#0),
                    },
                ),
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:154:60: 154:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:159:9: 159:47 (#0),
                },
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:159:9: 159:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:159:9: 159:47 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1856 ~ indexmap[dd33]::set::slice::{impl#1}::binary_search_by_key::{closure#0}),
            [
                T/#0,
                '{erased},
                B/#2,
                F/#3,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} T/#0,)) -> core::cmp::Ordering, bound_vars: [] },
                (&'{erased} mut F/#3, &'{erased} B/#2),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:159:31: 159:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:159:31: 159:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:159:9: 159:47 (#0),
                },
            ),
        ),
        ty: &'{erased} B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:159:31: 159:46 (#0),
            scope: scope[0],
        },
    },
]