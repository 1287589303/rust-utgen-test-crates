[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*(*_1)).0: [Bucket<T, ()>]),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:209:27: 209:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = alloc::slice::<impl [Bucket<T, ()>]>::to_vec(move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:209:27: 209:67 (#0),
                    scope: scope[0],
                },
                kind: _2 = alloc::vec::Vec::<Bucket<T, ()>>::into_boxed_slice(move _3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:209:9: 209:68 (#0),
                    scope: scope[0],
                },
                kind: _0 = set::slice::Slice::<T>::from_boxed(move _2) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:210:6: 210:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:209:67: 209:68 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:209:66: 209:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:208:5: 210:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<set::slice::Slice<T/#0>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:208:24: 208:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<set::slice::Slice<T/#0>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:208:14: 208:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:209:9: 209:68 (#0),
                },
            ),
        ),
        ty: alloc::boxed::Box<[Bucket<T/#0, ()>], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:209:27: 209:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:209:9: 209:68 (#0),
                },
            ),
        ),
        ty: alloc::vec::Vec<Bucket<T/#0, ()>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:209:27: 209:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:209:9: 209:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:209:27: 209:39 (#0),
            scope: scope[0],
        },
    },
]