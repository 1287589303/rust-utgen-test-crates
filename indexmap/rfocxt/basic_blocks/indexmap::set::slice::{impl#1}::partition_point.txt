[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &((*_1).0: [Bucket<T, ()>]),
            StorageLive(_4),
            _4 = {closure@src/set/slice.rs:173:38: 173:46} { pred: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:173:9: 173:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::slice::<impl [Bucket<T, ()>]>::partition_point::<{closure@src/set/slice.rs:173:38: 173:46}>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:174:5: 174:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:174:6: 174:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:173:59: 173:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:174:5: 174:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:169:5: 174:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:169:54: 169:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:169:31: 169:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:169:48: 169:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:169:38: 169:46 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:169:38: 169:46 (#0),
                    },
                ),
            ),
        ),
        ty: P/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:169:38: 169:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:173:9: 173:60 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:173:9: 173:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:173:9: 173:60 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1859 ~ indexmap[dd33]::set::slice::{impl#1}::partition_point::{closure#0}),
            [
                T/#0,
                P/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 Bucket<T/#0, ()>,)) -> bool, bound_vars: [Region(BrAnon)] },
                (P/#1,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:173:38: 173:59 (#0),
            scope: scope[0],
        },
    },
]