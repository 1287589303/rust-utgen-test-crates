[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:330:9: 330:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:330:15: 330:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:331:13: 331:34 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            AscribeUserType((*_1), +, UserTypeProjection { base: UserType(3), projs: [] }),
            StorageLive(_5),
            _5 = &(((*_1) as Vacant).0: map::core::raw_entry_v1::RawVacantEntryMut<'_, K, V, S>),
            StorageLive(_6),
            _6 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:332:36: 332:49 (#0),
                    scope: scope[2],
                },
                kind: _0 = map::core::raw_entry_v1::RawVacantEntryMut::<'_, K, V, S>::index(move _6) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            AscribeUserType((*_1), +, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_3),
            _3 = &(((*_1) as Occupied).0: map::core::raw_entry_v1::RawOccupiedEntryMut<'_, K, V, S>),
            StorageLive(_4),
            _4 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:331:38: 331:51 (#0),
                    scope: scope[1],
                },
                kind: _0 = map::core::raw_entry_v1::RawOccupiedEntryMut::<'_, K, V, S>::index(move _4) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:331:50: 331:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:332:48: 332:49 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:334:6: 334:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:329:5: 334:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:329:28: 329:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::core::raw_entry_v1::RawEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:329:18: 329:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:331:13: 331:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/raw_entry_v1.rs:330:15: 330:19 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:331:13: 331:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::core::raw_entry_v1::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [
                                Downcast(
                                    Some(
                                        "Occupied",
                                    ),
                                    0,
                                ),
                                Field(
                                    0,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/raw_entry_v1.rs:331:13: 331:34 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:331:28: 331:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:330:9: 333:10 (#0),
                },
            ),
        ),
        ty: &'{erased} map::core::raw_entry_v1::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:331:38: 331:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/raw_entry_v1.rs:330:15: 330:19 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:332:13: 332:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::core::raw_entry_v1::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [
                                Downcast(
                                    Some(
                                        "Vacant",
                                    ),
                                    1,
                                ),
                                Field(
                                    0,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/raw_entry_v1.rs:332:13: 332:32 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:332:26: 332:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:330:9: 333:10 (#0),
                },
            ),
        ),
        ty: &'{erased} map::core::raw_entry_v1::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:332:36: 332:41 (#0),
            scope: scope[0],
        },
    },
]