[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: core::iter::Chain<set::iter::Iter<'_, T>, set::iter::Difference<'_, T, S>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:511:19: 511:36 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::iter::Chain<set::iter::Iter<'_, T>, set::iter::Difference<'_, T, S>> as core::clone::Clone>::clone(move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = set::iter::Union::<'_, T, S> { iter: move _2 },
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:513:6: 513:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:509:5: 513:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::iter::Union<'{erased}, T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:509:24: 509:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::iter::Union<'{erased}, T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:509:14: 509:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::iter::Chain<set::iter::Iter<'{erased}, T/#1>, set::iter::Difference<'{erased}, T/#1, S/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:511:19: 511:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:510:9: 512:10 (#0),
                },
            ),
        ),
        ty: &'{erased} core::iter::Chain<set::iter::Iter<'{erased}, T/#1>, set::iter::Difference<'{erased}, T/#1, S/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:511:19: 511:28 (#0),
            scope: scope[0],
        },
    },
]