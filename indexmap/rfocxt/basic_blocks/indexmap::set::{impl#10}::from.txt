[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1147:9: 1147:29 (#0),
                    scope: scope[0],
                },
                kind: _0 = <set::IndexSet<T> as core::iter::FromIterator<T>>::from_iter::<[T; N]>(move _2) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1148:5: 1148:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1148:6: 1148:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1147:28: 1147:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1148:5: 1148:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1146:5: 1148:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::IndexSet<T/#0, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:29: 1146:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1146:18: 1146:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1146:13: 1146:16 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1146:13: 1146:16 (#0),
                    },
                ),
            ),
        ),
        ty: [T/#0; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:13: 1146:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1147:9: 1147:29 (#0),
                },
            ),
        ),
        ty: [T/#0; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1147:25: 1147:28 (#0),
            scope: scope[0],
        },
    },
]