[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &raw const (*_1),
            _3 = move _4 as *const set::slice::Slice<T> (PtrToPtr),
            StorageDead(_4),
            _2 = &(*_3),
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:29:6: 29:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:27:62: 27:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:27:45: 27:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:27:36: 27:43 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:27:36: 27:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:27:36: 27:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:28:18: 28:66 (#0),
                },
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:28:18: 28:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:28:18: 28:66 (#0),
                },
            ),
        ),
        ty: *const set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:28:20: 28:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:28:18: 28:66 (#0),
                },
            ),
        ),
        ty: *const [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:28:21: 28:50 (#0),
            scope: scope[0],
        },
    },
]