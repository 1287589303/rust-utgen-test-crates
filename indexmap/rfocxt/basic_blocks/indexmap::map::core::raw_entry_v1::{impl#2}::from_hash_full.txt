[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = (_1.0: &map::IndexMap<K, V, S>),
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _1,
            StorageLive(_9),
            _9 = _2,
            StorageLive(_10),
            _10 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:17: 235:53 (#0),
                    scope: scope[1],
                },
                kind: _7 = map::core::raw_entry_v1::RawEntryBuilder::<'_, K, V, S>::index_from_hash::<F>(move _8, move _9, move _10) -> [return: bb1, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                    scope: scope[1],
                },
                kind: _6 = <core::option::Option<usize> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _11 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:53: 235:54 (#141),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_6 as Continue).0: usize),
            _5 = _15,
            StorageDead(_15),
            FakeRead(ForLet(None), _5),
            StorageDead(_6),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_4),
            StorageLive(_22),
            _22 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:236:28: 236:44 (#0),
                    scope: scope[2],
                },
                kind: _20 = map::IndexMap::<K, V, S>::get_index(move _21, move _22) -> [return: bb8, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_14),
            _14 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                    scope: scope[4],
                },
                kind: _0 = <core::option::Option<(usize, &K, &V)> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _14) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                    scope: scope[2],
                },
                kind: _19 = <core::option::Option<(&K, &V)> as core::ops::Try>::branch(move _20) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            PlaceMention(_19),
            _23 = discriminant(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                    scope: scope[2],
                },
                kind: switchInt(move _23) -> [0: bb12, 1: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:236:44: 236:45 (#143),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = ((_19 as Continue).0: (&K, &V)),
            _18 = _27,
            StorageDead(_27),
            PlaceMention(_18),
            StorageLive(_16),
            _16 = (_18.0: &K),
            StorageLive(_17),
            _17 = (_18.1: &V),
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _5,
            StorageLive(_30),
            _30 = &(*_16),
            StorageLive(_31),
            _31 = &(*_17),
            _28 = (move _29, move _30, move _31),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
            _0 = core::option::Option::<(usize, &K, &V)>::Some(move _28),
            StorageDead(_28),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:238:5: 238:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_19 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_26),
            _26 = _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                    scope: scope[9],
                },
                kind: _0 = <core::option::Option<(usize, &K, &V)> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _26) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:238:5: 238:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:238:6: 238:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:235:52: 235:53 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:238:5: 238:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:230:5: 238:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, &'{erased} K/#1, &'{erased} V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:230:63: 230:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawEntryBuilder<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:230:30: 230:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:230:42: 230:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:230:36: 230:40 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:230:36: 230:40 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:230:36: 230:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:230:57: 230:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:230:47: 230:55 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:230:47: 230:55 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:230:47: 230:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:234:19: 234:27 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:234:13: 234:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::IndexMap<K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:234:13: 234:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:235:17: 235:54 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:235:13: 235:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:13: 235:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:17: 235:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::core::raw_entry_v1::RawEntryBuilder<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:17: 235:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:38: 235:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:44: 235:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:53: 235:54 (#141),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:235:53: 235:54 (#141),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:53: 235:54 (#141),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:53: 235:54 (#141),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:53: 235:54 (#141),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#140),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:235:17: 235:54 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/map/core/raw_entry_v1.rs:236:28: 236:45 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:236:13: 236:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:14: 236:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/map/core/raw_entry_v1.rs:236:28: 236:45 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:236:13: 236:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:19: 236:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} K/#1, &'{erased} V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, (&'{erased} K/#1, &'{erased} V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#1, &'{erased} V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:28: 236:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::IndexMap<K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:28: 236:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:42: 236:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:44: 236:45 (#143),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:236:44: 236:45 (#143),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:44: 236:45 (#143),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:44: 236:45 (#143),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:44: 236:45 (#143),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#142),
                    },
                ),
            ),
        ),
        ty: (&'{erased} K/#1, &'{erased} V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:236:28: 236:45 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (usize, &'{erased} K/#1, &'{erased} V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:237:14: 237:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:237:9: 237:30 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:237:15: 237:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:237:9: 237:30 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:237:18: 237:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:237:9: 237:30 (#0),
                },
            ),
        ),
        ty: &'{erased} V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:237:23: 237:28 (#0),
            scope: scope[0],
        },
    },
]