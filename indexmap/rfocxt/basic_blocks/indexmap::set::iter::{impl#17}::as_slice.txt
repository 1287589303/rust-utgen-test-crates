[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: alloc::vec::Drain<'_, Bucket<T, ()>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:157:27: 157:47 (#0),
                    scope: scope[0],
                },
                kind: _4 = alloc::vec::Drain::<'_, Bucket<T, ()>>::as_slice(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:157:9: 157:48 (#0),
                    scope: scope[0],
                },
                kind: _2 = set::slice::Slice::<T>::from_slice(move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:158:6: 158:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:156:5: 158:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} set::slice::Slice<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:156:31: 156:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::iter::Drain<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:156:21: 156:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:157:9: 157:48 (#0),
                },
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:157:9: 157:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:157:9: 157:48 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#1, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:157:27: 157:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:157:9: 157:48 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#1, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:157:27: 157:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:157:9: 157:48 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Drain<'{erased}, Bucket<T/#1, ()>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:157:27: 157:36 (#0),
            scope: scope[0],
        },
    },
]