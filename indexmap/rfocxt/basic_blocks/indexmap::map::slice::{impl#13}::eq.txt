[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_1),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_2).0: [Bucket<K2, V2>]),
            _4 = &(*_5),
            StorageLive(_6),
            _6 = {closure@src/map/slice.rs:366:40: 366:46},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:366:9: 366:78 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::slice_eq::<(K, V), Bucket<K2, V2>, {closure@src/map/slice.rs:366:40: 366:46}>(move _3, move _4, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:367:6: 367:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:365:5: 367:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:365:44: 365:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} [(K/#0, V/#1)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:365:11: 365:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:365:25: 365:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:365:18: 365:23 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:365:18: 365:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K2/#2, V2/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:365:18: 365:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:366:9: 366:78 (#0),
                },
            ),
        ),
        ty: &'{erased} [(K/#0, V/#1)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:366:18: 366:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:366:9: 366:78 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K2/#2, V2/#3>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:366:24: 366:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:366:9: 366:78 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K2/#2, V2/#3>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:366:24: 366:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:366:9: 366:78 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1131 ~ indexmap[dd33]::map::slice::{impl#13}::eq::{closure#0}),
            [
                K/#0,
                V/#1,
                K2/#2,
                V2/#3,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 (K/#0, V/#1), &'^1 Bucket<K2/#2, V2/#3>)) -> bool, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:366:40: 366:77 (#0),
            scope: scope[0],
        },
    },
]