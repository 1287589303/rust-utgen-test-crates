[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).2: alloc::vec::IntoIter<Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:695:17: 695:43 (#0),
                    scope: scope[0],
                },
                kind: _2 = <alloc::vec::IntoIter<Bucket<K, V>> as core::iter::Iterator>::nth(move _3, const core::num::<impl usize>::MAX) -> [return: bb1, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:695:43: 695:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:699:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:699:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut ((*_1).3: I),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:699:40: 699:64 (#0),
                    scope: scope[2],
                },
                kind: _6 = <I as core::iter::Iterator>::next(move _7) -> [return: bb5, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _8 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:699:19: 699:37 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _8) -> [1: bb6, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:699:19: 699:37 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move (((_6 as Some).0: (K, V)).0: K),
            StorageLive(_10),
            _10 = move (((_6 as Some).0: (K, V)).1: V),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*((*_1).0: &mut map::IndexMap<K, V, S>)),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_9,
            _13 = &(*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:702:24: 702:43 (#0),
                    scope: scope[2],
                },
                kind: _11 = map::IndexMap::<K, V, S>::hash::<K>(move _12, move _13) -> [return: bb8, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &((*_1).1: map::core::IndexMapCore<K, V>),
            StorageLive(_17),
            _17 = _11,
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_9,
            _18 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:703:30: 703:64 (#0),
                    scope: scope[4],
                },
                kind: _15 = map::core::IndexMapCore::<K, V>::get_index_of::<K>(move _16, move _17, move _18) -> [return: bb9, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            PlaceMention(_15),
            _20 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:703:20: 703:27 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _20) -> [1: bb10, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:703:20: 703:27 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_15 as Some).0: usize),
            StorageLive(_22),
            _22 = move _10,
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut ((*_1).1: map::core::IndexMapCore<K, V>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:704:17: 704:43 (#0),
                    scope: scope[4],
                },
                kind: _23 = <map::core::IndexMapCore<K, V> as Entries>::as_entries_mut(move _24) -> [return: bb12, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_25),
            _25 = _21,
            _26 = Len((*_23)),
            _27 = Lt(_25, _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:704:17: 704:46 (#0),
                    scope: scope[4],
                },
                kind: assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb13, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:704:17: 704:52 (#0),
                    scope: scope[4],
                },
                kind: drop(((*_23)[_25].2: V)) -> [return: bb14, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_23)[_25].2: V) = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:704:59: 704:60 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb16, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_23)[_25].2: V) = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:704:17: 704:52 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_25),
            StorageDead(_23),
            _5 = const (),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut ((*((*_1).0: &mut map::IndexMap<K, V, S>)).0: map::core::IndexMapCore<K, V>),
            StorageLive(_30),
            _30 = _11,
            StorageLive(_31),
            _31 = move _9,
            StorageLive(_32),
            _32 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:706:17: 706:60 (#0),
                    scope: scope[3],
                },
                kind: _28 = map::core::IndexMapCore::<K, V>::insert_full(move _29, move _30, move _31, move _32) -> [return: bb18, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:706:60: 706:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb19, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_19),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _4 = const (),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#223),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb25, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#223),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb24, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:699:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut ((*((*_1).0: &mut map::IndexMap<K, V, S>)).0: map::core::IndexMapCore<K, V>),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut ((*_1).1: map::core::IndexMapCore<K, V>),
            _38 = &mut (*_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:711:9: 711:55 (#0),
                    scope: scope[1],
                },
                kind: _36 = map::core::IndexMapCore::<K, V>::append_unchecked(move _37, move _38) -> [return: bb26, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_39),
            StorageDead(_36),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:712:6: 712:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:706:59: 706:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_32) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:706:59: 706:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:704:59: 704:60 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:708:9: 708:10 (#223),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:691:5: 712:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:691:23: 691:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::iter::Splice<'{erased}, I/#1, K/#2, V/#3, S/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:691:13: 691:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Bucket<K/#2, V/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:695:17: 695:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::IntoIter<Bucket<K/#2, V/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:695:17: 695:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:9: 708:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:691:5: 712:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:699:9: 708:10 (#223),
                },
            ),
        ),
        ty: core::option::Option<(K/#2, V/#3)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:40: 699:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:699:9: 708:10 (#223),
                },
            ),
        ),
        ty: &'{erased} mut I/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:40: 699:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:19: 699:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/map/iter.rs:699:40: 699:64 (#0),
                            ),
                        ),
                        pat_span: src/map/iter.rs:699:19: 699:37 (#0),
                    },
                ),
            ),
        ),
        ty: K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:25: 699:28 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/map/iter.rs:699:40: 699:64 (#0),
                            ),
                        ),
                        pat_span: src/map/iter.rs:699:19: 699:37 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:30: 699:35 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/iter.rs:702:24: 702:43 (#0),
                            ),
                        ),
                        pat_span: src/map/iter.rs:702:17: 702:21 (#0),
                    },
                ),
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:702:17: 702:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::IndexMap<K/#2, V/#3, S/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:702:24: 702:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:702:38: 702:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:702:38: 702:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:30: 703:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                },
            ),
        ),
        ty: &'{erased} map::core::IndexMapCore<K/#2, V/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:30: 703:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                },
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:53: 703:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:59: 703:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:703:13: 707:14 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:59: 703:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:20: 703:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/map/iter.rs:703:30: 703:64 (#0),
                            ),
                        ),
                        pat_span: src/map/iter.rs:703:20: 703:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:703:25: 703:26 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:704:55: 704:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [Bucket<K/#2, V/#3>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:704:17: 704:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#2, V/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:704:17: 704:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:704:44: 704:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:704:17: 704:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:704:17: 704:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<V/#3>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:706:17: 706:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#2, V/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:706:17: 706:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:706:43: 706:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:706:49: 706:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:706:54: 706:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/iter.rs:699:9: 708:10 (#223),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:9: 708:10 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:9: 708:10 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:699:9: 708:10 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:711:9: 711:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#2, V/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:711:9: 711:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#2, V/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:711:40: 711:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#2, V/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:711:40: 711:54 (#0),
            scope: scope[0],
        },
    },
]