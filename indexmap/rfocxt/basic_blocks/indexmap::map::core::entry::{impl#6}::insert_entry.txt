[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            AscribeUserType(_1, +, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_3),
            _3 = move (_1.0: map::core::RefMut<'_, K, V>),
            StorageLive(_4),
            _4 = (_1.1: HashValue),
            StorageLive(_5),
            _5 = move (_1.2: K),
            StorageLive(_6),
            _6 = move _3,
            StorageLive(_7),
            _7 = _4,
            StorageLive(_8),
            _8 = move _5,
            StorageLive(_9),
            _9 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:383:9: 383:44 (#0),
                    scope: scope[1],
                },
                kind: _0 = map::core::RefMut::<'_, K, V>::insert_unique(move _6, move _7, move _8, move _9) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:6: 384:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:383:43: 383:44 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:383:43: 383:44 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:381:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::core::entry::OccupiedEntry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:381:44: 381:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::core::entry::VacantEntry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:381:25: 381:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/entry.rs:381:38: 381:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/entry.rs:381:31: 381:36 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:381:31: 381:36 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:381:31: 381:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/entry.rs:382:39: 382:43 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:382:13: 382:36 (#0),
                    },
                ),
            ),
        ),
        ty: map::core::RefMut<'{erased}, K/#1, V/#2>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [
                                Field(
                                    0,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/entry.rs:382:13: 382:36 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/entry.rs:382:20: 382:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/entry.rs:382:39: 382:43 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:382:13: 382:36 (#0),
                    },
                ),
            ),
        ),
        ty: HashValue,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [
                                Field(
                                    1,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/entry.rs:382:13: 382:36 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/entry.rs:382:25: 382:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/entry.rs:382:39: 382:43 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:382:13: 382:36 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [
                                Field(
                                    2,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/entry.rs:382:13: 382:36 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/entry.rs:382:31: 382:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:383:9: 383:44 (#0),
                },
            ),
        ),
        ty: map::core::RefMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:383:9: 383:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:383:9: 383:44 (#0),
                },
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:383:27: 383:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:383:9: 383:44 (#0),
                },
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:383:33: 383:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:383:9: 383:44 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:383:38: 383:43 (#0),
            scope: scope[0],
        },
    },
]