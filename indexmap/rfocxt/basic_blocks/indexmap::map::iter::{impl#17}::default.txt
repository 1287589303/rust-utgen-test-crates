[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = [],
            _3 = &mut _4,
            _2 = move _3 as &mut [Bucket<K, V>] (PointerCoercion(Unsize)),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:154:19: 154:32 (#0),
                    scope: scope[0],
                },
                kind: _1 = core::slice::<impl [Bucket<K, V>]>::iter_mut(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            _0 = map::iter::IterMut::<'_, K, V> { iter: move _1 },
            StorageDead(_1),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:156:6: 156:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:152:5: 156:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::iter::IterMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:152:21: 152:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::IterMut<'{erased}, Bucket<K/#1, V/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:154:19: 154:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:153:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:154:19: 154:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:153:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#1, V/#2>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:154:19: 154:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:153:9: 155:10 (#0),
                },
            ),
        ),
        ty: [Bucket<K/#1, V/#2>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:154:19: 154:21 (#0),
            scope: scope[0],
        },
    },
]