[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:456:19: 456:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = set::IndexSet::<T, S>::iter(move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:456:37: 456:58 (#0),
                    scope: scope[0],
                },
                kind: _6 = set::IndexSet::<T, S2>::difference::<S>(move _7, move _8) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:456:19: 456:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = <set::iter::Iter<'_, T> as core::iter::Iterator>::chain::<set::iter::Difference<'_, T, S>>(move _4, move _6) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            _0 = set::iter::Union::<'_, T, S> { iter: move _3 },
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:458:6: 458:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:451:5: 458:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::iter::Union<'{erased}, T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:451:83: 451:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/iter.rs:451:33: 451:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:451:27: 451:31 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:451:27: 451:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:451:27: 451:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/iter.rs:451:59: 451:78 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:451:53: 451:57 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:451:53: 451:57 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#1, S2/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:451:53: 451:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::iter::Chain<set::iter::Iter<'{erased}, T/#1>, set::iter::Difference<'{erased}, T/#1, S/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:456:19: 456:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:455:9: 457:10 (#0),
                },
            ),
        ),
        ty: set::iter::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:456:19: 456:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:455:9: 457:10 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:456:19: 456:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:455:9: 457:10 (#0),
                },
            ),
        ),
        ty: set::iter::Difference<'{erased}, T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:456:37: 456:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:455:9: 457:10 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#1, S2/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:456:37: 456:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:455:9: 457:10 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:456:53: 456:57 (#0),
            scope: scope[0],
        },
    },
]