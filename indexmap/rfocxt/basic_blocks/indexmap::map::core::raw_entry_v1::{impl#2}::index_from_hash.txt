[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
            _5 = move _6 as usize (IntToInt),
            StorageDead(_6),
            _4 = HashValue(move _5),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(((*(_1.0: &map::IndexMap<K, V, S>)).0: map::core::IndexMapCore<K, V>).1: alloc::vec::Vec<Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:246:24: 246:46 (#0),
                    scope: scope[1],
                },
                kind: _8 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = &(*_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_10),
            _10 = {closure@src/map/core/raw_entry_v1.rs:247:18: 247:35} { is_match: move _3, entries: _7 },
            FakeRead(ForLet(None), _10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(((*(_1.0: &map::IndexMap<K, V, S>)).0: map::core::IndexMapCore<K, V>).0: hashbrown::HashTable<usize>),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:248:36: 248:46 (#0),
                    scope: scope[3],
                },
                kind: _13 = HashValue::get(move _14) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:51 (#0),
                    scope: scope[3],
                },
                kind: _11 = hashbrown::HashTable::<usize>::find::<{closure@src/map/core/raw_entry_v1.rs:247:18: 247:35}>(move _12, move _13, move _15) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:60 (#0),
                    scope: scope[3],
                },
                kind: _0 = core::option::Option::<&usize>::copied(move _11) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:249:5: 249:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:249:5: 249:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:249:6: 249:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:248:50: 248:51 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:249:5: 249:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:249:5: 249:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:241:5: 249:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:241:68: 241:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawEntryBuilder<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:241:31: 241:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:241:43: 241:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:241:37: 241:41 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:241:37: 241:41 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:241:37: 241:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:241:62: 241:63 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:241:48: 241:60 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:241:48: 241:60 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:241:48: 241:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:245:20: 245:44 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:245:13: 245:17 (#0),
                    },
                ),
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:245:13: 245:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:245:30: 245:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:245:30: 245:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:246:23: 246:46 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:246:13: 246:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:246:13: 246:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:246:24: 246:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:246:25: 246:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:247:18: 247:61 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:247:13: 247:15 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:227 ~ indexmap[dd33]::map::core::raw_entry_v1::{impl#2}::index_from_hash::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                S/#3,
                F/#4,
                i16,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:2679 ~ indexmap[dd33]::map::core::raw_entry_v1::{impl#2}::index_from_hash::'_), "'_") usize,)) -> bool, bound_vars: [Region(BrNamed(DefId(0:2679 ~ indexmap[dd33]::map::core::raw_entry_v1::{impl#2}::index_from_hash::'_), '_))] },
                (F/#4, &'{erased} [Bucket<K/#1, V/#2>]),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:247:13: 247:15 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:60 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:248:9: 248:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:60 (#0),
                },
            ),
        ),
        ty: &'{erased} hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:248:9: 248:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:60 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:248:36: 248:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:60 (#0),
                },
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:248:36: 248:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:248:9: 248:60 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:227 ~ indexmap[dd33]::map::core::raw_entry_v1::{impl#2}::index_from_hash::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                S/#3,
                F/#4,
                i16,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:2679 ~ indexmap[dd33]::map::core::raw_entry_v1::{impl#2}::index_from_hash::'_), "'_") usize,)) -> bool, bound_vars: [Region(BrNamed(DefId(0:2679 ~ indexmap[dd33]::map::core::raw_entry_v1::{impl#2}::index_from_hash::'_), '_))] },
                (F/#4, &'{erased} [Bucket<K/#1, V/#2>]),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:248:48: 248:50 (#0),
            scope: scope[0],
        },
    },
]