[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1593:12: 1593:22 (#0),
                    scope: scope[0],
                },
                kind: _5 = map::IndexMap::<K, V1, S1>::len(move _6) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1593:26: 1593:37 (#0),
                    scope: scope[0],
                },
                kind: _7 = map::IndexMap::<K, V2, S2>::len(move _8) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _4 = Ne(move _5, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1593:12: 1593:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            _0 = const false,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1599:6: 1599:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1597:9: 1597:20 (#0),
                    scope: scope[0],
                },
                kind: _11 = map::IndexMap::<K, V1, S1>::iter(move _12) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut _11,
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_2),
            _13 = {closure@src/map.rs:1598:18: 1598:32} { other: move _14 },
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1597:9: 1598:80 (#0),
                    scope: scope[0],
                },
                kind: _0 = <map::iter::Iter<'_, K, V1> as core::iter::Iterator>::all::<{closure@src/map.rs:1598:18: 1598:32}>(move _10, move _13) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1599:6: 1599:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1599:6: 1599:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1592:5: 1599:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1592:50: 1592:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::IndexMap<K/#0, V1/#1, S1/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1592:11: 1592:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1592:25: 1592:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1592:18: 1592:23 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1592:18: 1592:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::IndexMap<K/#0, V2/#3, S2/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1592:18: 1592:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:9: 1595:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:12: 1593:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:12: 1593:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::IndexMap<K/#0, V1/#1, S1/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:12: 1593:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:26: 1593:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::IndexMap<K/#0, V2/#3, S2/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:26: 1593:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1593:38: 1595:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1597:9: 1598:80 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::iter::Iter<'{erased}, K/#0, V1/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1597:9: 1597:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1597:9: 1598:80 (#0),
                },
            ),
        ),
        ty: map::iter::Iter<'{erased}, K/#0, V1/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1597:9: 1597:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1597:9: 1598:80 (#0),
                },
            ),
        ),
        ty: &'{erased} map::IndexMap<K/#0, V1/#1, S1/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1597:9: 1597:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1597:9: 1598:80 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1458 ~ indexmap[dd33]::map::{impl#17}::eq::{closure#0}),
            [
                K/#0,
                V1/#1,
                S1/#2,
                V2/#3,
                S2/#4,
                i16,
                Binder { value: extern "RustCall" fn(((&'{erased} K/#0, &'{erased} V1/#1),)) -> bool, bound_vars: [] },
                (&'{erased} map::IndexMap<K/#0, V2/#3, S2/#4>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1598:18: 1598:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1597:9: 1598:80 (#0),
                },
            ),
        ),
        ty: &'{erased} map::IndexMap<K/#0, V2/#3, S2/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1598:18: 1598:79 (#0),
            scope: scope[0],
        },
    },
]