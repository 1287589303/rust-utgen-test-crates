[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:78:9: 78:30 (#0),
                    scope: scope[0],
                },
                kind: _5 = <map::IndexMap<K, V, S> as Entries>::as_entries_mut(move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_5),
            StorageDead(_6),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:78:9: 78:45 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [Bucket<K, V>]>::get_mut::<usize>(move _4, move _7) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:78:9: 78:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&mut Bucket<K, V>>::map::<(&mut K, &mut V), for<'a> fn(&'a mut Bucket<K, V>) -> (&'a mut K, &'a mut V) {Bucket::<K, V>::muts}>(move _3, Bucket::<K, V>::muts) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:77:5: 79:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} mut K/#0, &'{erased} mut V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:77:51: 77:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:77:23: 77:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/mutable.rs:77:41: 77:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/mutable.rs:77:34: 77:39 (#0),
                            ),
                        ),
                        pat_span: src/map/mutable.rs:77:34: 77:39 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:77:34: 77:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:78:9: 78:63 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut Bucket<K/#0, V/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:78:9: 78:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:78:9: 78:63 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:78:9: 78:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:78:9: 78:63 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:78:9: 78:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:78:9: 78:63 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:78:9: 78:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:78:9: 78:63 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:78:39: 78:44 (#0),
            scope: scope[0],
        },
    },
]