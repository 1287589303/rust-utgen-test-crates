[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: map::IndexMap<T, (), S>),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:768:9: 768:43 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::IndexMap::<T, (), S>::shift_remove_entry::<Q>(move _4, move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            _6 = {closure@src/set.rs:768:48: 768:57},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:768:9: 768:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<(T, ())>::map::<T, {closure@src/set.rs:768:48: 768:57}>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:769:6: 769:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:768:59: 768:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:764:5: 769:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:764:51: 764:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:764:26: 764:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:764:44: 764:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:764:37: 764:42 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:764:37: 764:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Q/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:764:37: 764:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:768:9: 768:60 (#0),
                },
            ),
        ),
        ty: core::option::Option<(T/#0, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:768:9: 768:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:768:9: 768:60 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<T/#0, (), S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:768:9: 768:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:768:9: 768:60 (#0),
                },
            ),
        ),
        ty: &'{erased} Q/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:768:37: 768:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:768:9: 768:60 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2062 ~ indexmap[dd33]::set::{impl#6}::shift_take::{closure#0}),
            [
                T/#0,
                S/#1,
                Q/#2,
                i32,
                Binder { value: extern "RustCall" fn(((T/#0, ()),)) -> T/#0, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:768:48: 768:59 (#0),
            scope: scope[0],
        },
    },
]