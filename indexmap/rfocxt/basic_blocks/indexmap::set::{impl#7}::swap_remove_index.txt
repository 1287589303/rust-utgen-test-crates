[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: map::IndexMap<T, (), S>),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1033:9: 1033:42 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::IndexMap::<T, (), S>::swap_remove_index(move _4, move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            _6 = {closure@src/set.rs:1033:47: 1033:56},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1033:9: 1033:59 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<(T, ())>::map::<T, {closure@src/set.rs:1033:47: 1033:56}>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1034:6: 1034:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1033:58: 1033:59 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1032:5: 1034:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1032:58: 1032:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1032:30: 1032:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1032:48: 1032:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1032:41: 1032:46 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1032:41: 1032:46 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1032:41: 1032:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1033:9: 1033:59 (#0),
                },
            ),
        ),
        ty: core::option::Option<(T/#0, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1033:9: 1033:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1033:9: 1033:59 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<T/#0, (), S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1033:9: 1033:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1033:9: 1033:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1033:36: 1033:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1033:9: 1033:59 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2115 ~ indexmap[dd33]::set::{impl#7}::swap_remove_index::{closure#0}),
            [
                T/#0,
                S/#1,
                i32,
                Binder { value: extern "RustCall" fn(((T/#0, ()),)) -> T/#0, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1033:47: 1033:58 (#0),
            scope: scope[0],
        },
    },
]