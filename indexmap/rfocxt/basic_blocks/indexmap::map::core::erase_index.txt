[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:64:41: 64:51 (#0),
                    scope: scope[1],
                },
                kind: _6 = HashValue::get(move _7) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = {closure@src/map/core.rs:64:53: 64:62} { index: _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:64:24: 64:74 (#0),
                    scope: scope[1],
                },
                kind: _4 = hashbrown::HashTable::<usize>::find_entry::<{closure@src/map/core.rs:64:53: 64:62}>(move _5, move _6, move _8) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:64:12: 64:21 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb3, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:64:12: 64:21 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_4 as Ok).0: hashbrown::hash_table::OccupiedEntry<'_, usize>),
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:65:9: 65:23 (#0),
                    scope: scope[1],
                },
                kind: _11 = hashbrown::hash_table::OccupiedEntry::<'_, usize>::remove(move _12) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _0 = const (),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:64:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:66:15: 66:37 (#21),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = [const "index not found"],
            _19 = &_20,
            _18 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#25),
                    scope: scope[0],
                },
                kind: _17 = core::fmt::Arguments::<'_>::new_const::<1>(move _18) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#24),
                    scope: scope[0],
                },
                kind: _16 = core::panicking::panic_fmt(move _17) -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:64:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:69:2: 69:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:63:1: 69:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:63:67: 63:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:63:23: 63:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:63:16: 63:21 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:63:16: 63:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:63:16: 63:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:63:43: 63:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:63:37: 63:41 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:63:37: 63:41 (#0),
                    },
                ),
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:63:37: 63:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:63:61: 63:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:63:54: 63:59 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:63:54: 63:59 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:63:54: 63:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: core::result::Result<hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>, hashbrown::hash_table::AbsentEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:24: 64:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:24: 64:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:41: 64:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:41: 64:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:384 ~ indexmap[dd33]::map::core::erase_index::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 usize,)) -> bool, bound_vars: [Region(BrAnon)] },
                (usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:53: 64:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:12: 64:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/map/core.rs:64:24: 64:74 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:64:12: 64:21 (#0),
                    },
                ),
            ),
        ),
        ty: hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:64:15: 64:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (usize, hashbrown::hash_table::VacantEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:65:9: 65:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:65:9: 65:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:66:15: 66:37 (#21),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:64:5: 68:6 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:66:38: 68:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:67:16: 67:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:67:16: 67:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:67:16: 67:33 (#0),
            scope: scope[0],
        },
    },
]