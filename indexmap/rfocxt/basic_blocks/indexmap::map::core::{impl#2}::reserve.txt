[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: hashbrown::HashTable<usize>),
            StorageLive(_5),
            _5 = _2,
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>),
            _9 = &(*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:250:51: 250:64 (#0),
                    scope: scope[0],
                },
                kind: _8 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:250:42: 250:65 (#0),
                    scope: scope[0],
                },
                kind: _6 = map::core::get_hash::<K, V>(move _7) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:250:9: 250:66 (#0),
                    scope: scope[0],
                },
                kind: _3 = hashbrown::HashTable::<usize>::reserve::<impl for<'a> Fn(&'a usize) -> u64 + '_>(move _4, move _5, move _6) -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_3),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _2,
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:252:25: 252:48 (#0),
                    scope: scope[0],
                },
                kind: _14 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _15) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:252:51: 252:69 (#0),
                    scope: scope[0],
                },
                kind: _16 = alloc::vec::Vec::<Bucket<K, V>>::len(move _17) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _18 = SubWithOverflow(_14, _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:252:25: 252:69 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, move _16) -> [success: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_18.0: usize),
            StorageDead(_16),
            StorageDead(_14),
            _11 = Gt(move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:252:12: 252:69 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb10, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:253:13: 253:30 (#0),
                    scope: scope[0],
                },
                kind: _21 = map::core::IndexMapCore::<K, V>::borrow_mut(move _22) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &mut _21,
            StorageDead(_22),
            StorageLive(_23),
            _23 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:253:13: 253:58 (#0),
                    scope: scope[0],
                },
                kind: _19 = map::core::RefMut::<'_, K, V>::reserve_entries(move _20, move _23) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_21),
            StorageDead(_19),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:252:9: 254:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:252:9: 254:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:255:6: 255:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:250:65: 250:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:249:5: 255:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:249:56: 249:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:249:27: 249:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:249:50: 249:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:249:38: 249:48 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:249:38: 249:48 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:249:38: 249:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:9: 250:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:9: 250:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:30: 250:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#0,
                    V/#1,
                    '{erased},
                ],
                def_id: DefId(0:2715 ~ indexmap[dd33]::map::core::get_hash::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:42: 250:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:51: 250:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:51: 250:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:51: 250:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:250:51: 250:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:12: 252:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:12: 252:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:25: 252:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:25: 252:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:25: 252:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:51: 252:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:252:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:51: 252:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:252:25: 252:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:253:13: 253:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::RefMut<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:253:13: 253:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::core::RefMut<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:253:13: 253:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:253:13: 253:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:253:47: 253:57 (#0),
            scope: scope[0],
        },
    },
]