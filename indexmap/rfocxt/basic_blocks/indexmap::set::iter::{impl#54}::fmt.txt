[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: I),
            _3 = &(*_4),
            StorageLive(_5),
            _5 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:626:9: 626:36 (#0),
                    scope: scope[0],
                },
                kind: _0 = <I as core::fmt::Debug>::fmt(move _3, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:627:6: 627:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:625:5: 627:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:625:50: 625:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::iter::UnitValue<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:625:12: 625:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/iter.rs:625:22: 625:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:625:19: 625:20 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:625:19: 625:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:625:19: 625:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:626:9: 626:36 (#0),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:626:25: 626:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:626:9: 626:36 (#0),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:626:25: 626:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:626:9: 626:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:626:34: 626:35 (#0),
            scope: scope[0],
        },
    },
]