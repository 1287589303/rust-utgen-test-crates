[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1391:9: 1391:26 (#0),
                    scope: scope[0],
                },
                kind: _5 = map::IndexMap::<K, V, S>::get_mut::<Q>(move _6, move _7) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            _9 = const "no entry found for key",
            _8 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1391:9: 1391:59 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<&mut V>::expect(move _5, move _8) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_8),
            StorageDead(_5),
            _0 = &mut (*_3),
            StorageDead(_9),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1392:6: 1392:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1390:5: 1392:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1390:41: 1390:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#1, V/#2, S/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1390:18: 1390:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1390:34: 1390:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1390:29: 1390:32 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1390:29: 1390:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Q/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1390:29: 1390:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:9: 1391:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1391:9: 1391:59 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:9: 1391:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1391:9: 1391:59 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:9: 1391:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1391:9: 1391:59 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#1, V/#2, S/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:9: 1391:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1391:9: 1391:59 (#0),
                },
            ),
        ),
        ty: &'{erased} Q/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:22: 1391:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1391:9: 1391:59 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:34: 1391:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1391:9: 1391:59 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1391:34: 1391:58 (#0),
            scope: scope[0],
        },
    },
]