[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1240:9: 1240:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = map::IndexMap::<K, V, S>::get_index_entry(move _2, const 0_usize) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1241:6: 1241:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1239:5: 1241:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<map::core::entry::IndexedEntry<'{erased}, K/#0, V/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1239:38: 1239:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1239:24: 1239:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1240:9: 1240:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1240:9: 1240:13 (#0),
            scope: scope[0],
        },
    },
]