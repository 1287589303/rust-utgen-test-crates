[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut ((*_1).0: map::IndexMap<T, (), S>),
            StorageLive(_4),
            _4 = {closure@src/set.rs:879:35: 879:52} { cmp: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:879:9: 879:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = map::IndexMap::<T, (), S>::sort_unstable_by::<{closure@src/set.rs:879:35: 879:52}>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:880:5: 880:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:880:6: 880:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:879:62: 879:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:880:5: 880:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:875:5: 880:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:875:54: 875:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:875:32: 875:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:875:52: 875:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:875:43: 875:50 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:875:43: 875:50 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:875:43: 875:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:879:9: 879:63 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<T/#0, (), S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:879:9: 879:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:879:9: 879:63 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2087 ~ indexmap[dd33]::set::{impl#7}::sort_unstable_by::{closure#0}),
            [
                T/#0,
                S/#1,
                F/#2,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 T/#0, &'^1 (), &'^2 T/#0, &'^3 ())) -> core::cmp::Ordering, bound_vars: [Region(BrAnon), Region(BrAnon), Region(BrAnon), Region(BrAnon)] },
                (F/#2,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:879:35: 879:62 (#0),
            scope: scope[0],
        },
    },
]