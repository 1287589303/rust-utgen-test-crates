[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1500:20: 1500:40 (#0),
                    scope: scope[0],
                },
                kind: _2 = <I as core::iter::IntoIterator>::into_iter(move _3) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1501:24: 1501:40 (#0),
                    scope: scope[1],
                },
                kind: _5 = <<I as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::size_hint(move _6) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_4),
            _4 = (_5.0: usize),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _4,
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1502:59: 1502:73 (#0),
                    scope: scope[2],
                },
                kind: _9 = <S as core::default::Default>::default() -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1502:23: 1502:74 (#0),
                    scope: scope[2],
                },
                kind: _7 = map::IndexMap::<K, V, S>::with_capacity_and_hasher(move _8, move _9) -> [return: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _7,
            StorageLive(_12),
            _12 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1503:9: 1503:25 (#0),
                    scope: scope[3],
                },
                kind: _10 = <map::IndexMap<K, V, S> as core::iter::Extend<(K, V)>>::extend::<<I as core::iter::IntoIterator>::IntoIter>(move _11, move _12) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            _0 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:5: 1505:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:5: 1505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:5: 1505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:6: 1505:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1503:24: 1503:25 (#0),
                    scope: scope[3],
                },
                kind: drop(_12) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:5: 1505:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1502:73: 1502:74 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:5: 1505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1500:39: 1500:40 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1505:5: 1505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1499:5: 1505:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1499:66: 1499:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1499:60: 1499:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1499:50: 1499:58 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1499:50: 1499:58 (#0),
                    },
                ),
            ),
        ),
        ty: I/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1499:50: 1499:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1500:20: 1500:40 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1500:13: 1500:17 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#3,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1500:13: 1500:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1500:20: 1500:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/map.rs:1501:24: 1501:40 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1501:13: 1501:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1501:14: 1501:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1501:24: 1501:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#3], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1501:24: 1501:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1502:23: 1502:74 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1502:13: 1502:20 (#0),
                    },
                ),
            ),
        ),
        ty: map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1502:13: 1502:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1502:54: 1502:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1502:59: 1502:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1503:9: 1503:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1503:9: 1503:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#3,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1503:20: 1503:24 (#0),
            scope: scope[0],
        },
    },
]