[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: [Bucket<K, V>]),
            _3 = &(*_4),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            _6 = {closure@src/map/slice.rs:356:40: 356:46},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:356:9: 356:78 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::slice_eq::<Bucket<K, V>, (K2, V2), {closure@src/map/slice.rs:356:40: 356:46}>(move _3, move _5, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:357:6: 357:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:355:5: 357:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:355:41: 355:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:355:11: 355:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:355:25: 355:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:355:18: 355:23 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:355:18: 355:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(K2/#2, V2/#3)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:355:18: 355:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:356:9: 356:78 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:356:18: 356:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:356:9: 356:78 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:356:18: 356:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:356:9: 356:78 (#0),
                },
            ),
        ),
        ty: &'{erased} [(K2/#2, V2/#3)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:356:33: 356:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:356:9: 356:78 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1124 ~ indexmap[dd33]::map::slice::{impl#12}::eq::{closure#0}),
            [
                K/#0,
                V/#1,
                K2/#2,
                V2/#3,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 Bucket<K/#0, V/#1>, &'^1 (K2/#2, V2/#3))) -> bool, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:356:40: 356:77 (#0),
            scope: scope[0],
        },
    },
]