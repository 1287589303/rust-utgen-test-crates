[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:42:9: 42:26 (#0),
                    scope: scope[0],
                },
                kind: _2 = set::slice::Slice::<T>::into_boxed(move _3) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:42:9: 42:37 (#0),
                    scope: scope[0],
                },
                kind: _0 = alloc::slice::<impl [Bucket<T, ()>]>::into_vec::<alloc::alloc::Global>(move _2) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:43:5: 43:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:43:6: 43:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:42:36: 42:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:42:25: 42:26 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:43:5: 43:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:41:5: 43:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<Bucket<T/#0, ()>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:41:52: 41:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:41:38: 41:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:41:32: 41:36 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:41:32: 41:36 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::boxed::Box<set::slice::Slice<T/#0>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:41:32: 41:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:42:9: 42:37 (#0),
                },
            ),
        ),
        ty: alloc::boxed::Box<[Bucket<T/#0, ()>], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:42:9: 42:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:42:9: 42:37 (#0),
                },
            ),
        ),
        ty: alloc::boxed::Box<set::slice::Slice<T/#0>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:42:9: 42:13 (#0),
            scope: scope[0],
        },
    },
]