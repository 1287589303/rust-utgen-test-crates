[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: alloc::vec::Drain<'_, Bucket<T, ()>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:181:20: 181:40 (#0),
                    scope: scope[0],
                },
                kind: _6 = alloc::vec::Drain::<'_, Bucket<T, ()>>::as_slice(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:181:20: 181:47 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [Bucket<T, ()>]>::iter(move _5) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:181:20: 181:68 (#0),
                    scope: scope[0],
                },
                kind: _3 = <core::slice::Iter<'_, Bucket<T, ()>> as core::iter::Iterator>::map::<&T, for<'a> fn(&'a Bucket<T, ()>) -> &'a T {Bucket::<T, ()>::key_ref}>(move _4, Bucket::<T, ()>::key_ref) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:182:9: 182:23 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::fmt::Formatter::<'_>::debug_list(move _12) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut _11,
            StorageDead(_12),
            StorageLive(_13),
            _13 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:182:9: 182:37 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::fmt::DebugList::<'_, '_>::entries::<&T, core::iter::Map<core::slice::Iter<'_, Bucket<T, ()>>, for<'a> fn(&'a Bucket<T, ()>) -> &'a T {Bucket::<T, ()>::key_ref}>>(move _10, move _13) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_13),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::fmt::DebugList::<'_, '_>::finish(move _8) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:183:6: 183:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:180:5: 183:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:180:50: 180:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::iter::Drain<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:180:12: 180:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/iter.rs:180:22: 180:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:180:19: 180:20 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:180:19: 180:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:180:19: 180:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:181:20: 181:68 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:181:13: 181:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, Bucket<T/#1, ()>>, FnDef(DefId(0:2209 ~ indexmap[dd33]::{impl#2}::key_ref), [T/#1, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:181:13: 181:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, Bucket<T/#1, ()>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:181:20: 181:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<T/#1, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:181:20: 181:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<T/#1, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:181:20: 181:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Drain<'{erased}, Bucket<T/#1, ()>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:181:20: 181:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:182:9: 182:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:182:9: 182:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:182:9: 182:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                },
            ),
        ),
        ty: core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:182:9: 182:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:182:9: 182:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:182:9: 182:46 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, Bucket<T/#1, ()>>, FnDef(DefId(0:2209 ~ indexmap[dd33]::{impl#2}::key_ref), [T/#1, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:182:32: 182:36 (#0),
            scope: scope[0],
        },
    },
]