[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            _5 = {closure@src/map.rs:1004:27: 1004:41} { cmp: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1004:9: 1006:11 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::IndexMap<K, V, S> as Entries>::with_entries::<{closure@src/map.rs:1004:27: 1004:41}>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1007:5: 1007:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1007:6: 1007:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1006:10: 1006:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1007:5: 1007:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1000:5: 1007:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1000:45: 1000:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1000:23: 1000:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1000:43: 1000:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1000:34: 1000:41 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1000:34: 1000:41 (#0),
                    },
                ),
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1000:34: 1000:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1004:9: 1006:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1004:9: 1004:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1343 ~ indexmap[dd33]::map::{impl#7}::sort_by::{closure#0}),
            [
                K/#0,
                V/#1,
                S/#2,
                F/#3,
                i32,
                Binder { value: extern "RustCall" fn((&'^0 mut [Bucket<K/#0, V/#1>],)), bound_vars: [Region(BrAnon)] },
                (F/#3,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1004:27: 1006:10 (#0),
            scope: scope[0],
        },
    },
]