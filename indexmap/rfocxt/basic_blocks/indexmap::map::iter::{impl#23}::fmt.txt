[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: core::slice::IterMut<'_, Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:207:20: 207:40 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::IterMut::<'_, Bucket<K, V>>::as_slice(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:207:20: 207:47 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [Bucket<K, V>]>::iter(move _5) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:207:20: 207:65 (#0),
                    scope: scope[0],
                },
                kind: _3 = <core::slice::Iter<'_, Bucket<K, V>> as core::iter::Iterator>::map::<(&K, &V), for<'a> fn(&'a Bucket<K, V>) -> (&'a K, &'a V) {Bucket::<K, V>::refs}>(move _4, Bucket::<K, V>::refs) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:208:9: 208:23 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::fmt::Formatter::<'_>::debug_list(move _12) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut _11,
            StorageDead(_12),
            StorageLive(_13),
            _13 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:208:9: 208:37 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::fmt::DebugList::<'_, '_>::entries::<(&K, &V), core::iter::Map<core::slice::Iter<'_, Bucket<K, V>>, for<'a> fn(&'a Bucket<K, V>) -> (&'a K, &'a V) {Bucket::<K, V>::refs}>>(move _10, move _13) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_13),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::fmt::DebugList::<'_, '_>::finish(move _8) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:209:6: 209:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:206:5: 209:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:206:50: 206:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::iter::IterMut2<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:206:12: 206:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/iter.rs:206:22: 206:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/iter.rs:206:19: 206:20 (#0),
                            ),
                        ),
                        pat_span: src/map/iter.rs:206:19: 206:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:206:19: 206:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/iter.rs:207:20: 207:65 (#0),
                            ),
                        ),
                        pat_span: src/map/iter.rs:207:13: 207:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>, FnDef(DefId(0:2215 ~ indexmap[dd33]::{impl#2}::refs), [K/#1, V/#2])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:207:13: 207:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:207:20: 207:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:207:20: 207:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:207:20: 207:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::slice::IterMut<'{erased}, Bucket<K/#1, V/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:207:20: 207:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:208:9: 208:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:208:9: 208:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:208:9: 208:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                },
            ),
        ),
        ty: core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:208:9: 208:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:208:9: 208:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:208:9: 208:46 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>, FnDef(DefId(0:2215 ~ indexmap[dd33]::{impl#2}::refs), [K/#1, V/#2])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:208:32: 208:36 (#0),
            scope: scope[0],
        },
    },
]