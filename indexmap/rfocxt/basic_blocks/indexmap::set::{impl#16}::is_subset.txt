[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:9: 1225:19 (#0),
                    scope: scope[0],
                },
                kind: _4 = set::IndexSet::<T, S>::len(move _5) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:23: 1225:34 (#0),
                    scope: scope[0],
                },
                kind: _6 = set::IndexSet::<T, S2>::len(move _7) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _3 = Le(move _4, move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:9: 1225:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:38: 1225:49 (#0),
                    scope: scope[0],
                },
                kind: _9 = set::IndexSet::<T, S>::iter(move _10) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            _0 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:9: 1225:89 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut _9,
            StorageDead(_10),
            StorageLive(_11),
            _11 = {closure@src/set.rs:1225:54: 1225:66} { other: _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:38: 1225:89 (#0),
                    scope: scope[0],
                },
                kind: _0 = <set::iter::Iter<'_, T> as core::iter::Iterator>::all::<{closure@src/set.rs:1225:54: 1225:66}>(move _8, move _11) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1225:9: 1225:89 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1226:6: 1226:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1221:5: 1226:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1221:61: 1221:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1221:26: 1221:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1221:40: 1221:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1221:33: 1221:38 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1221:33: 1221:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S2/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1221:33: 1221:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:9: 1225:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:9: 1225:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:9: 1225:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:23: 1225:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S2/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:23: 1225:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: &'{erased} mut set::iter::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:38: 1225:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: set::iter::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:38: 1225:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:38: 1225:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1225:9: 1225:89 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2169 ~ indexmap[dd33]::set::{impl#16}::is_subset::{closure#0}),
            [
                T/#0,
                S/#1,
                S2/#2,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} T/#0,)) -> bool, bound_vars: [] },
                (&'{erased} set::IndexSet<T/#0, S2/#2>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1225:54: 1225:88 (#0),
            scope: scope[0],
        },
    },
]