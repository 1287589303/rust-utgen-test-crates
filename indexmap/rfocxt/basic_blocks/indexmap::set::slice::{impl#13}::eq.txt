[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            _3 = move _4 as &[T] (PointerCoercion(Unsize)),
            StorageDead(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:266:9: 266:54 (#0),
                    scope: scope[0],
                },
                kind: _0 = <[T] as core::cmp::PartialEq<set::slice::Slice<U>>>::eq(move _3, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:267:6: 267:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:265:5: 267:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:265:39: 265:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} [T/#0; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:265:11: 265:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:265:25: 265:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:265:18: 265:23 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:265:18: 265:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<U/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:265:18: 265:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:266:9: 266:54 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:266:42: 266:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:266:9: 266:54 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:266:42: 266:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:266:9: 266:54 (#0),
                },
            ),
        ),
        ty: &'{erased} set::slice::Slice<U/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:266:48: 266:53 (#0),
            scope: scope[0],
        },
    },
]