[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _3,
            StorageLive(_7),
            _7 = &(*_2),
            _5 = {closure@src/map/slice.rs:256:31: 256:37} { f: move _6, b: move _7 },
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:256:9: 256:53 (#0),
                    scope: scope[0],
                },
                kind: _0 = map::slice::Slice::<K, V>::binary_search_by::<'_, {closure@src/map/slice.rs:256:31: 256:37}>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:257:5: 257:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:257:6: 257:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:257:5: 257:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:251:5: 257:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:251:73: 251:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:251:43: 251:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:251:56: 251:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:251:53: 251:54 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:251:53: 251:54 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:251:53: 251:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:251:67: 251:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:251:60: 251:65 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:251:60: 251:65 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:251:60: 251:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:256:9: 256:53 (#0),
                },
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:256:9: 256:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:256:9: 256:53 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1063 ~ indexmap[dd33]::map::slice::{impl#1}::binary_search_by_key::{closure#0}),
            [
                K/#0,
                V/#1,
                '{erased},
                B/#3,
                F/#4,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} K/#0, &'{erased} V/#1)) -> core::cmp::Ordering, bound_vars: [] },
                (&'{erased} mut F/#4, &'{erased} B/#3),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:256:31: 256:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:256:31: 256:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:256:9: 256:53 (#0),
                },
            ),
        ),
        ty: &'{erased} B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:256:31: 256:52 (#0),
            scope: scope[0],
        },
    },
]