[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*(_1.1: &S)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:614:21: 614:53 (#0),
                    scope: scope[0],
                },
                kind: _4 = <S as core::hash::BuildHasher>::build_hasher(move _5) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _4,
            _8 = &mut (*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:615:9: 615:25 (#0),
                    scope: scope[1],
                },
                kind: _6 = <K as core::hash::Hash>::hash::<<S as core::hash::BuildHasher>::Hasher>(move _7, move _8) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_9),
            StorageDead(_6),
            StorageLive(_10),
            _10 = move _1,
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:616:36: 616:46 (#0),
                    scope: scope[1],
                },
                kind: _11 = <<S as core::hash::BuildHasher>::Hasher as core::hash::Hasher>::finish(move _12) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_13),
            _13 = move _2,
            StorageLive(_14),
            _14 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:616:9: 616:59 (#0),
                    scope: scope[1],
                },
                kind: _0 = map::core::raw_entry_v1::RawVacantEntryMut::<'_, K, V, S>::insert_hashed_nocheck(move _10, move _11, move _13, move _14) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:6: 617:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:616:58: 616:59 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:616:58: 616:59 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:617:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:609:5: 617:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:609:46: 609:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:609:19: 609:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:609:30: 609:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:609:25: 609:28 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:609:25: 609:28 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:609:25: 609:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:609:40: 609:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:609:33: 609:38 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:609:33: 609:38 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:609:33: 609:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:614:21: 614:53 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:614:13: 614:18 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#3,
                ],
                def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:614:13: 614:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:614:21: 614:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:615:9: 615:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:615:9: 615:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#3], def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:615:18: 615:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#3], def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:615:18: 615:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:616:9: 616:59 (#0),
                },
            ),
        ),
        ty: map::core::raw_entry_v1::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:616:9: 616:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:616:9: 616:59 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:616:36: 616:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:616:9: 616:59 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [S/#3], def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:616:36: 616:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:616:9: 616:59 (#0),
                },
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:616:48: 616:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:616:9: 616:59 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:616:53: 616:58 (#0),
            scope: scope[0],
        },
    },
]