[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>)),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
            StorageLive(_9),
            _9 = _3,
            _7 = core::ops::Range::<usize> { start: move _8, end: move _9 },
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:648:44: 648:56 (#0),
                    scope: scope[0],
                },
                kind: _5 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Index<core::ops::Range<usize>>>::index(move _6, move _7) -> [return: bb1, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            _4 = &(*_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:649:12: 649:33 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::slice::<impl [Bucket<K, V>]>::len(move _12) -> [return: bb2, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*((*_1).0: &mut hashbrown::HashTable<usize>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:649:36: 649:59 (#0),
                    scope: scope[1],
                },
                kind: _14 = hashbrown::HashTable::<usize>::capacity(move _15) -> [return: bb3, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _16 = Eq(const 2_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:649:36: 649:63 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _16, "attempt to divide `{}` by zero", _14) -> [success: bb4, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = Div(move _14, const 2_usize),
            StorageDead(_14),
            _10 = Gt(move _11, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:649:12: 649:63 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb21, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:22: 651:40 (#204),
                    scope: scope[1],
                },
                kind: _17 = <&mut hashbrown::HashTable<usize> as core::iter::IntoIterator>::into_iter(move _18) -> [return: bb6, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            StorageLive(_19),
            _19 = move _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:13: 655:14 (#203),
                    scope: scope[2],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:13: 655:14 (#203),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb8, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut _19,
            _23 = &mut (*_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:22: 651:40 (#204),
                    scope: scope[2],
                },
                kind: _22 = <hashbrown::hash_table::IterMut<'_, usize> as core::iter::Iterator>::next(move _23) -> [return: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            PlaceMention(_22),
            _25 = discriminant(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:22: 651:40 (#204),
                    scope: scope[2],
                },
                kind: switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:22: 651:40 (#204),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:13: 655:14 (#203),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = move ((_22 as Some).0: &mut usize),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _2,
            StorageLive(_30),
            _30 = (*_27),
            _28 = Le(move _29, move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:652:20: 652:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _28) -> [0: bb18, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:649:9: 661:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_31),
            StorageLive(_32),
            _32 = (*_27),
            StorageLive(_33),
            _33 = _3,
            _31 = Lt(move _32, move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:652:35: 652:43 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _31) -> [0: bb17, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            _34 = SubWithOverflow((*_27), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:653:21: 653:28 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_27), const 1_usize) -> [success: bb16, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_27) = move (_34.0: usize),
            _21 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:652:17: 654:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:652:17: 654:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_21),
            _20 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:651:13: 655:14 (#203),
                    scope: scope[2],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _2,
            StorageLive(_39),
            _39 = _3,
            _37 = core::ops::Range::<usize> { start: move _38, end: move _39 },
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_40),
            _40 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:31: 658:64 (#0),
                    scope: scope[1],
                },
                kind: _36 = <core::ops::Range<usize> as core::iter::Iterator>::zip::<&[Bucket<K, V>]>(move _37, move _40) -> [return: bb22, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:31: 658:64 (#208),
                    scope: scope[1],
                },
                kind: _35 = <core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'_, Bucket<K, V>>> as core::iter::IntoIterator>::into_iter(move _36) -> [return: bb23, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            PlaceMention(_35),
            StorageLive(_41),
            _41 = move _35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:13: 660:14 (#207),
                    scope: scope[4],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:13: 660:14 (#207),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb25, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut _41,
            _44 = &mut (*_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:31: 658:64 (#208),
                    scope: scope[4],
                },
                kind: _43 = <core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'_, Bucket<K, V>>> as core::iter::Iterator>::next(move _44) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            _46 = discriminant(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:31: 658:64 (#208),
                    scope: scope[4],
                },
                kind: switchInt(move _46) -> [0: bb28, 1: bb29, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:31: 658:64 (#208),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:13: 660:14 (#207),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            _48 = (((_43 as Some).0: (usize, &Bucket<K, V>)).0: usize),
            StorageLive(_49),
            _49 = (((_43 as Some).0: (usize, &Bucket<K, V>)).1: &Bucket<K, V>),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>)),
            StorageLive(_52),
            _52 = ((*_49).0: HashValue),
            StorageLive(_53),
            _53 = _48,
            StorageLive(_54),
            StorageLive(_55),
            _55 = _48,
            _56 = SubWithOverflow(_55, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:659:59: 659:64 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_56.1: bool), "attempt to compute `{} - {}`, which would overflow", move _55, const 1_usize) -> [success: bb31, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:649:9: 661:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = move (_56.0: usize),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:659:17: 659:65 (#0),
                    scope: scope[5],
                },
                kind: _50 = map::core::update_index(move _51, move _52, move _53, move _54) -> [return: bb32, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
            _42 = const (),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
            _20 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:658:13: 660:14 (#207),
                    scope: scope[4],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:662:6: 662:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:646:5: 662:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:646:62: 646:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::core::RefMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:646:26: 646:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:646:44: 646:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:646:37: 646:42 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:646:37: 646:42 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:646:37: 646:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:646:56: 646:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:646:51: 646:54 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:646:51: 646:54 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:646:51: 646:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:648:31: 648:56 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:648:13: 648:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:648:13: 648:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:648:44: 648:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:648:32: 648:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:648:45: 648:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:648:45: 648:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:648:52: 648:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:649:9: 661:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:12: 649:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:649:9: 661:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:12: 649:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:649:9: 661:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:12: 649:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:649:9: 661:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:36: 649:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:649:9: 661:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:36: 649:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:649:9: 661:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:36: 649:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:649:36: 649:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:651:13: 655:14 (#203),
                },
            ),
        ),
        ty: hashbrown::hash_table::IterMut<'{erased}, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:651:13: 655:14 (#203),
                },
            ),
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/map/core.rs:651:22: 651:40 (#204),
                            ),
                        ),
                        pat_span: src/map/core.rs:651:22: 651:40 (#204),
                    },
                ),
            ),
        ),
        ty: hashbrown::hash_table::IterMut<'{erased}, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#204),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:646:5: 662:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hashbrown::hash_table::IterMut<'{erased}, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hashbrown::hash_table::IterMut<'{erased}, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:22: 651:40 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:13: 655:14 (#203),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:13: 655:14 (#203),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                src/map/core.rs:651:22: 651:40 (#204),
                            ),
                        ),
                        pat_span: src/map/core.rs:651:17: 651:18 (#205),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:651:17: 651:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:652:17: 654:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:652:20: 652:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:652:17: 654:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:652:20: 652:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:652:17: 654:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:652:29: 652:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:652:17: 654:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:652:35: 652:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:652:17: 654:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:652:35: 652:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:652:17: 654:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:652:40: 652:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:653:21: 653:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:658:13: 660:14 (#207),
                },
            ),
        ),
        ty: core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#208),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:658:13: 660:14 (#207),
                },
            ),
        ),
        ty: core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:658:13: 660:14 (#207),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:32: 658:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:39: 658:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:658:13: 660:14 (#207),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:48: 658:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                src/map/core.rs:658:31: 658:64 (#208),
                            ),
                        ),
                        pat_span: src/map/core.rs:658:31: 658:64 (#208),
                    },
                ),
            ),
        ),
        ty: core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#208),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#208),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, &'{erased} Bucket<K/#1, V/#2>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#208),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#208),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Zip<core::ops::Range<usize>, core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:31: 658:64 (#208),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:13: 660:14 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:13: 660:14 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                src/map/core.rs:658:31: 658:64 (#208),
                            ),
                        ),
                        pat_span: src/map/core.rs:658:17: 658:27 (#209),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:18: 658:19 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                src/map/core.rs:658:31: 658:64 (#208),
                            ),
                        ),
                        pat_span: src/map/core.rs:658:17: 658:27 (#209),
                    },
                ),
            ),
        ),
        ty: &'{erased} Bucket<K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:658:21: 658:26 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:17: 659:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:30: 659:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:44: 659:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:56: 659:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:59: 659:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:59: 659:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:659:59: 659:64 (#0),
            scope: scope[0],
        },
    },
]