[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: hashbrown::HashTable<usize>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:171:18: 171:41 (#0),
                    scope: scope[0],
                },
                kind: _2 = hashbrown::HashTable::<usize>::capacity(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: alloc::vec::Vec<Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:171:43: 171:66 (#0),
                    scope: scope[0],
                },
                kind: _4 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:171:9: 171:67 (#0),
                    scope: scope[0],
                },
                kind: _0 = <usize as core::cmp::Ord>::min(move _2, move _4) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:172:6: 172:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:170:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:170:38: 170:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::core::IndexMapCore<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:170:28: 170:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core.rs:171:9: 171:67 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:171:18: 171:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core.rs:171:9: 171:67 (#0),
                },
            ),
        ),
        ty: &'{erased} hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:171:18: 171:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core.rs:171:9: 171:67 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:171:43: 171:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core.rs:171:9: 171:67 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:171:43: 171:55 (#0),
            scope: scope[0],
        },
    },
]