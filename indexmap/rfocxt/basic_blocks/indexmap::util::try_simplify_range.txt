[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:42:23: 42:42 (#0),
                    scope: scope[0],
                },
                kind: _4 = <R as core::ops::RangeBounds<usize>>::start_bound(move _5) -> [return: bb1, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:42:17: 42:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb4, 1: bb5, 2: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<core::ops::Range<usize>>::None,
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:43:9: 43:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:44:9: 44:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:45:9: 45:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const 0_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:43:29: 43:30 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(*((_4 as Included).0: &usize)),
            _6 = &fake shallow _4,
            _7 = &fake shallow ((_4 as Included).0: &usize),
            _8 = &fake shallow ((_4 as Excluded).0: &usize),
            StorageLive(_12),
            StorageLive(_13),
            _13 = (*_11),
            StorageLive(_14),
            _14 = _2,
            _12 = Le(move _13, move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:44:32: 44:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            FakeRead(ForMatchGuard, _6),
            FakeRead(ForMatchGuard, _7),
            FakeRead(ForMatchGuard, _8),
            FakeRead(ForGuardBinding, _11),
            StorageLive(_10),
            _10 = (*((_4 as Included).0: &usize)),
            _3 = _10,
            StorageDead(_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:44:44: 44:45 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:44:32: 44:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &(*((_4 as Excluded).0: &usize)),
            _6 = &fake shallow _4,
            _7 = &fake shallow ((_4 as Included).0: &usize),
            _8 = &fake shallow ((_4 as Excluded).0: &usize),
            StorageLive(_17),
            StorageLive(_18),
            _18 = (*_16),
            StorageLive(_19),
            _19 = _2,
            _17 = Lt(move _18, move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:45:32: 45:39 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            FakeRead(ForMatchGuard, _6),
            FakeRead(ForMatchGuard, _7),
            FakeRead(ForMatchGuard, _8),
            FakeRead(ForGuardBinding, _16),
            StorageLive(_15),
            _15 = (*((_4 as Excluded).0: &usize)),
            StorageLive(_20),
            _20 = _15,
            _21 = AddWithOverflow(_20, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:45:43: 45:48 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, const 1_usize) -> [success: bb13, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:45:32: 45:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_21.0: usize),
            StorageDead(_20),
            StorageDead(_15),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:45:47: 45:48 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:48:21: 48:38 (#0),
                    scope: scope[1],
                },
                kind: _24 = <R as core::ops::RangeBounds<usize>>::end_bound(move _25) -> [return: bb15, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _29 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:48:15: 48:38 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _29) -> [0: bb19, 1: bb18, 2: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<core::ops::Range<usize>>::None,
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:49:9: 49:25 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:50:9: 50:28 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:51:9: 51:28 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:49:29: 49:32 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = &(*((_24 as Excluded).0: &usize)),
            _26 = &fake shallow _24,
            _27 = &fake shallow ((_24 as Excluded).0: &usize),
            _28 = &fake shallow ((_24 as Included).0: &usize),
            StorageLive(_32),
            StorageLive(_33),
            _33 = (*_31),
            StorageLive(_34),
            _34 = _2,
            _32 = Le(move _33, move _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:50:32: 50:40 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _32) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            FakeRead(ForMatchGuard, _26),
            FakeRead(ForMatchGuard, _27),
            FakeRead(ForMatchGuard, _28),
            FakeRead(ForGuardBinding, _31),
            StorageLive(_30),
            _30 = (*((_24 as Excluded).0: &usize)),
            _23 = _30,
            StorageDead(_30),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:50:44: 50:45 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:50:32: 50:40 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = &(*((_24 as Included).0: &usize)),
            _26 = &fake shallow _24,
            _27 = &fake shallow ((_24 as Excluded).0: &usize),
            _28 = &fake shallow ((_24 as Included).0: &usize),
            StorageLive(_37),
            StorageLive(_38),
            _38 = (*_36),
            StorageLive(_39),
            _39 = _2,
            _37 = Lt(move _38, move _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:51:32: 51:39 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _37) -> [0: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            FakeRead(ForMatchGuard, _26),
            FakeRead(ForMatchGuard, _27),
            FakeRead(ForMatchGuard, _28),
            FakeRead(ForGuardBinding, _36),
            StorageLive(_35),
            _35 = (*((_24 as Included).0: &usize)),
            StorageLive(_40),
            _40 = _35,
            _41 = AddWithOverflow(_40, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:51:43: 51:48 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _40, const 1_usize) -> [success: bb27, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:51:32: 51:39 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_41.0: usize),
            StorageDead(_40),
            StorageDead(_35),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:51:47: 51:48 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _23),
            StorageDead(_24),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _3,
            StorageLive(_46),
            _46 = _23,
            _44 = Gt(move _45, move _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:54:8: 54:19 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _44) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            _0 = core::option::Option::<core::ops::Range<usize>>::None,
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            _43 = const (),
            StorageDead(_44),
            StorageDead(_43),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _3,
            StorageLive(_50),
            _50 = _23,
            _48 = core::ops::Range::<usize> { start: move _49, end: move _50 },
            StorageDead(_50),
            StorageDead(_49),
            _0 = core::option::Option::<core::ops::Range<usize>>::Some(move _48),
            StorageDead(_48),
            StorageDead(_23),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:58:1: 58:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:58:1: 58:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:58:2: 58:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:58:1: 58:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:38:1: 58:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::ops::Range<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:38:62: 38:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/util.rs:38:44: 38:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:38:37: 38:42 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:38:37: 38:42 (#0),
                    },
                ),
            ),
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:38:37: 38:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/util.rs:38:52: 38:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:38:47: 38:50 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:38:47: 38:50 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:38:47: 38:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:42:17: 47:6 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:42:9: 42:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:42:9: 42:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Bound<&'{erased} usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:42:23: 42:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:42:23: 42:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::ops::Bound<&'{erased} usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:42:23: 42:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:42:23: 42:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:42:23: 42:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:43:9: 43:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/util.rs:42:23: 42:42 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:44:9: 44:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:44:26: 44:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:44:26: 44:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:44:32: 44:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:44:32: 44:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:44:37: 44:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/util.rs:42:23: 42:42 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:45:9: 45:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:26: 45:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:26: 45:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:32: 45:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:32: 45:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:36: 45:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:43: 45:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:45:43: 45:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:46:14: 46:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:48:15: 53:6 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:48:9: 48:12 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:48:9: 48:12 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Bound<&'{erased} usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:48:21: 48:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:48:21: 48:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::ops::Bound<&'{erased} usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:48:21: 48:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:48:21: 48:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:48:21: 48:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:49:9: 49:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/util.rs:48:21: 48:38 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:50:9: 50:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:50:26: 50:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:50:26: 50:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:50:32: 50:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:50:32: 50:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:50:37: 50:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/util.rs:48:21: 48:38 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:51:9: 51:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:26: 51:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:26: 51:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:32: 51:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:32: 51:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:36: 51:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:43: 51:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:51:43: 51:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:52:14: 52:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:54:5: 56:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:54:8: 54:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:54:8: 54:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:54:16: 54:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:54:20: 56:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:57:10: 57:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:57:10: 57:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:57:17: 57:20 (#0),
            scope: scope[0],
        },
    },
]