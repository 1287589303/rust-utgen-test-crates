[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:406:9: 406:19 (#0),
                    scope: scope[0],
                },
                kind: _5 = map::slice::Slice::<K, V>::len(move _6) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &_5,
            StorageDead(_6),
            StorageLive(_7),
            _7 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:406:9: 406:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = <usize as core::hash::Hash>::hash::<H>(move _4, move _7) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_5),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:29: 407:33 (#229),
                    scope: scope[0],
                },
                kind: _8 = <&map::slice::Slice<K, V> as core::iter::IntoIterator>::into_iter(move _9) -> [return: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:9: 410:10 (#228),
                    scope: scope[1],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:9: 410:10 (#228),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _10,
            _14 = &mut (*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:29: 407:33 (#229),
                    scope: scope[1],
                },
                kind: _13 = <map::iter::Iter<'_, K, V> as core::iter::Iterator>::next(move _14) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:29: 407:33 (#229),
                    scope: scope[1],
                },
                kind: switchInt(move _16) -> [0: bb8, 1: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:29: 407:33 (#229),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:9: 410:10 (#228),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = (((_13 as Some).0: (&K, &V)).0: &K),
            StorageLive(_19),
            _19 = (((_13 as Some).0: (&K, &V)).1: &V),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_18),
            StorageLive(_22),
            _22 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:408:13: 408:28 (#0),
                    scope: scope[2],
                },
                kind: _20 = <K as core::hash::Hash>::hash::<H>(move _21, move _22) -> [return: bb11, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:411:6: 411:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_19),
            StorageLive(_25),
            _25 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:409:13: 409:30 (#0),
                    scope: scope[2],
                },
                kind: _23 = <V as core::hash::Hash>::hash::<H>(move _24, move _25) -> [return: bb12, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            _12 = const (),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:407:9: 410:10 (#228),
                    scope: scope[1],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:405:5: 411:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:405:45: 405:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:405:24: 405:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:405:38: 405:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:405:31: 405:36 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:405:31: 405:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut H/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:405:31: 405:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:406:9: 406:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:406:9: 406:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:406:9: 406:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:406:9: 406:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut H/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:406:25: 406:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/slice.rs:407:9: 410:10 (#228),
                },
            ),
        ),
        ty: map::iter::Iter<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/slice.rs:407:9: 410:10 (#228),
                },
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/map/slice.rs:407:29: 407:33 (#229),
                            ),
                        ),
                        pat_span: src/map/slice.rs:407:29: 407:33 (#229),
                    },
                ),
            ),
        ),
        ty: map::iter::Iter<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:405:5: 411:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#0, &'{erased} V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::iter::Iter<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::iter::Iter<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:29: 407:33 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:9: 410:10 (#228),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:9: 410:10 (#228),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                src/map/slice.rs:407:29: 407:33 (#229),
                            ),
                        ),
                        pat_span: src/map/slice.rs:407:13: 407:25 (#230),
                    },
                ),
            ),
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:14: 407:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                src/map/slice.rs:407:29: 407:33 (#229),
                            ),
                        ),
                        pat_span: src/map/slice.rs:407:13: 407:25 (#230),
                    },
                ),
            ),
        ),
        ty: &'{erased} V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:407:19: 407:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:408:13: 408:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:408:13: 408:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut H/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:408:22: 408:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:409:13: 409:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:409:13: 409:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut H/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:409:24: 409:29 (#0),
            scope: scope[0],
        },
    },
]