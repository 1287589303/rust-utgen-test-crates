[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = [],
            _3 = &_4,
            _2 = move _3 as &[Bucket<K, V>] (PointerCoercion(Unsize)),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:94:22: 94:31 (#0),
                    scope: scope[0],
                },
                kind: _1 = core::slice::<impl [Bucket<K, V>]>::iter(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            _0 = map::iter::Iter::<'_, K, V> { iter: move _1 },
            StorageDead(_1),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:95:6: 95:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:93:5: 95:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::iter::Iter<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:93:21: 93:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::Iter<'{erased}, Bucket<K/#1, V/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:94:22: 94:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:94:9: 94:33 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:94:22: 94:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:94:9: 94:33 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:94:22: 94:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:94:9: 94:33 (#0),
                },
            ),
        ),
        ty: [Bucket<K/#1, V/#2>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:94:22: 94:24 (#0),
            scope: scope[0],
        },
    },
]