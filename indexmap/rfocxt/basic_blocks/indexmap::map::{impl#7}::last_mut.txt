[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1255:9: 1255:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = <map::IndexMap<K, V, S> as Entries>::as_entries_mut(move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1255:9: 1255:41 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::slice::<impl [Bucket<K, V>]>::last_mut(move _3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1255:9: 1255:62 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&mut Bucket<K, V>>::map::<(&K, &mut V), for<'a> fn(&'a mut Bucket<K, V>) -> (&'a K, &'a mut V) {Bucket::<K, V>::ref_mut}>(move _2, Bucket::<K, V>::ref_mut) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1256:6: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1254:5: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#0, &'{erased} mut V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1254:35: 1254:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1254:21: 1254:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1255:9: 1255:62 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut Bucket<K/#0, V/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1255:9: 1255:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1255:9: 1255:62 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1255:9: 1255:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1255:9: 1255:62 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1255:9: 1255:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1255:9: 1255:62 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1255:9: 1255:13 (#0),
            scope: scope[0],
        },
    },
]