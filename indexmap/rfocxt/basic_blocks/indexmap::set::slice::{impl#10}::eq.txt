[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: [Bucket<T, ()>]),
            _3 = &(*_4),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            _6 = {closure@src/set/slice.rs:239:40: 239:46},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:239:9: 239:59 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::slice_eq::<Bucket<T, ()>, U, {closure@src/set/slice.rs:239:40: 239:46}>(move _3, move _5, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:240:6: 240:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:238:5: 240:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:238:34: 238:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:238:11: 238:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:238:25: 238:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:238:18: 238:23 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:238:18: 238:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [U/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:238:18: 238:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:239:9: 239:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:239:18: 239:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:239:9: 239:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:239:18: 239:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:239:9: 239:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [U/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:239:33: 239:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:239:9: 239:59 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1895 ~ indexmap[dd33]::set::slice::{impl#10}::eq::{closure#0}),
            [
                T/#0,
                U/#1,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 Bucket<T/#0, ()>, &'^1 U/#1)) -> bool, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:239:40: 239:58 (#0),
            scope: scope[0],
        },
    },
]