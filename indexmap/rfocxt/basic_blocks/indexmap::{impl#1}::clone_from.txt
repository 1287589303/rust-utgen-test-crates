[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = ((*_2).0: HashValue),
            ((*_1).0: HashValue) = move _3,
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).1: K),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_2).1: K),
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:171:9: 171:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = <K as core::clone::Clone>::clone_from(move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_7),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_1).2: V),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*_2).2: V),
            _10 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:172:9: 172:44 (#0),
                    scope: scope[0],
                },
                kind: _8 = <V as core::clone::Clone>::clone_from(move _9, move _10) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_11),
            StorageDead(_8),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:173:6: 173:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:169:5: 173:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:169:43: 169:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Bucket<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:169:19: 169:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:169:37: 169:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:169:30: 169:35 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:169:30: 169:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Bucket<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:169:30: 169:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:170:21: 170:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:171:9: 171:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:171:9: 171:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:171:29: 171:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:171:29: 171:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:172:9: 172:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:172:9: 172:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:172:31: 172:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:172:31: 172:43 (#0),
            scope: scope[0],
        },
    },
]