[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: [Bucket<K, V>]),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:78:9: 78:32 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [Bucket<K, V>]>::get::<usize>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:78:9: 78:50 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&Bucket<K, V>>::map::<(&K, &V), for<'a> fn(&'a Bucket<K, V>) -> (&'a K, &'a V) {Bucket::<K, V>::refs}>(move _3, Bucket::<K, V>::refs) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:77:5: 79:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#0, &'{erased} V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:77:46: 77:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:77:22: 77:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:77:36: 77:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:77:29: 77:34 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:77:29: 77:34 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:77:29: 77:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:78:9: 78:50 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} Bucket<K/#0, V/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:78:9: 78:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:78:9: 78:50 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:78:9: 78:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:78:9: 78:50 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:78:26: 78:31 (#0),
            scope: scope[0],
        },
    },
]