[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            PlaceMention(_1),
            _4 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:121:9: 121:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:121:15: 121:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:122:13: 122:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &mut (((*_1) as Vacant).0: map::core::entry::VacantEntry<'_, K, V>),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:123:33: 123:44 (#0),
                    scope: scope[2],
                },
                kind: _9 = map::core::entry::VacantEntry::<'_, K, V>::key_mut(move _10) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &mut (((*_1) as Occupied).0: map::core::entry::OccupiedEntry<'_, K, V>),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut (*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:122:35: 122:46 (#0),
                    scope: scope[1],
                },
                kind: _6 = map::core::entry::OccupiedEntry::<'_, K, V>::key_mut(move _7) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_6),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:122:45: 122:46 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_9),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:123:43: 123:44 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            _0 = &mut (*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:125:6: 125:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/mutable.rs:120:5: 125:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:120:30: 120:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::core::entry::Entry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:120:16: 120:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:121:9: 124:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:121:9: 124:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:121:9: 124:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:122:13: 122:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/mutable.rs:121:15: 121:19 (#0),
                            ),
                        ),
                        pat_span: src/map/mutable.rs:122:13: 122:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut map::core::entry::OccupiedEntry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:122:29: 122:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:121:9: 124:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:122:35: 122:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:121:9: 124:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::core::entry::OccupiedEntry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:122:35: 122:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/mutable.rs:121:15: 121:19 (#0),
                            ),
                        ),
                        pat_span: src/map/mutable.rs:123:13: 123:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut map::core::entry::VacantEntry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:123:27: 123:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:121:9: 124:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:123:33: 123:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/mutable.rs:121:9: 124:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::core::entry::VacantEntry<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/mutable.rs:123:33: 123:34 (#0),
            scope: scope[0],
        },
    },
]