[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:357:9: 357:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:357:15: 357:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:358:13: 358:34 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            AscribeUserType(_1, +, UserTypeProjection { base: UserType(3), projs: [] }),
            StorageLive(_6),
            _6 = move ((_1 as Vacant).0: map::core::raw_entry_v1::RawVacantEntryMut<'_, K, V, S>),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _2,
            StorageLive(_11),
            _11 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:360:36: 360:42 (#0),
                    scope: scope[2],
                },
                kind: _9 = <F as core::ops::FnOnce<()>>::call_once(move _10, move _11) -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            AscribeUserType(_1, +, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_4),
            _4 = move ((_1 as Occupied).0: map::core::raw_entry_v1::RawOccupiedEntryMut<'_, K, V, S>),
            StorageLive(_5),
            _5 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:358:38: 358:64 (#0),
                    scope: scope[1],
                },
                kind: _0 = map::core::raw_entry_v1::RawOccupiedEntryMut::<'_, K, V, S>::into_key_value_mut(move _5) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:358:63: 358:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_7),
            _7 = move (_9.0: K),
            StorageLive(_8),
            _8 = move (_9.1: V),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:360:42: 360:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_12),
            _12 = move _6,
            StorageLive(_13),
            _13 = move _7,
            StorageLive(_14),
            _14 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:361:17: 361:41 (#0),
                    scope: scope[3],
                },
                kind: _0 = map::core::raw_entry_v1::RawVacantEntryMut::<'_, K, V, S>::insert(move _12, move _13, move _14) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:362:13: 362:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:362:13: 362:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:362:13: 362:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:364:5: 364:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:364:6: 364:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:361:40: 361:41 (#0),
                    scope: scope[3],
                },
                kind: drop(_14) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:361:40: 361:41 (#0),
                    scope: scope[3],
                },
                kind: drop(_13) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:362:13: 362:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:362:13: 362:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:360:41: 360:42 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:364:5: 364:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:351:5: 364:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:351:48: 351:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:351:30: 351:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:351:42: 351:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:351:36: 351:40 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:351:36: 351:40 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:351:36: 351:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:358:13: 358:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/raw_entry_v1.rs:357:15: 357:19 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:358:13: 358:34 (#0),
                    },
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [
                                Downcast(
                                    Some(
                                        "Occupied",
                                    ),
                                    0,
                                ),
                                Field(
                                    0,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/raw_entry_v1.rs:358:13: 358:34 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:358:28: 358:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:357:9: 363:10 (#0),
                },
            ),
        ),
        ty: map::core::raw_entry_v1::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:358:38: 358:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map/core/raw_entry_v1.rs:357:15: 357:19 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:359:13: 359:32 (#0),
                    },
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [
                                Downcast(
                                    Some(
                                        "Vacant",
                                    ),
                                    1,
                                ),
                                Field(
                                    0,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/raw_entry_v1.rs:359:13: 359:32 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:359:26: 359:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/map/core/raw_entry_v1.rs:360:36: 360:42 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:360:21: 360:33 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:360:22: 360:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/map/core/raw_entry_v1.rs:360:36: 360:42 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:360:21: 360:33 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:360:27: 360:32 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (K/#1, V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:360:36: 360:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:360:36: 360:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:360:36: 360:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:361:17: 361:41 (#0),
                },
            ),
        ),
        ty: map::core::raw_entry_v1::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:361:17: 361:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:361:17: 361:41 (#0),
                },
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:361:30: 361:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/raw_entry_v1.rs:361:17: 361:41 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:361:35: 361:40 (#0),
            scope: scope[0],
        },
    },
]