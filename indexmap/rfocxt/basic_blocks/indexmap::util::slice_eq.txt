[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:63:8: 63:18 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::<impl [T]>::len(move _7) -> [return: bb1, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:63:22: 63:33 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::slice::<impl [U]>::len(move _9) -> [return: bb2, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _5 = Ne(move _6, move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:63:8: 63:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            _0 = const false,
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:17: 70:27 (#0),
                    scope: scope[0],
                },
                kind: _14 = core::slice::<impl [T]>::len(move _15) -> [return: bb5, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = core::ops::Range::<usize> { start: const 0_usize, end: move _14 },
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:14: 70:27 (#133),
                    scope: scope[0],
                },
                kind: _12 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb6, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            StorageLive(_16),
            _16 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:5: 75:6 (#132),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:5: 75:6 (#132),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb8, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut _16,
            _20 = &mut (*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:14: 70:27 (#133),
                    scope: scope[1],
                },
                kind: _19 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _20) -> [return: bb9, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            PlaceMention(_19),
            _22 = discriminant(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:14: 70:27 (#133),
                    scope: scope[1],
                },
                kind: switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:14: 70:27 (#133),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:5: 75:6 (#132),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_19 as Some).0: usize),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &_3,
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _24,
            _31 = Len((*_1)),
            _32 = Lt(_30, _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:72:17: 72:24 (#0),
                    scope: scope[2],
                },
                kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = const (),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_11),
            _0 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:78:1: 78:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb20, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = &(*_1)[_30],
            _28 = &(*_29),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _24,
            _36 = Len((*_2)),
            _37 = Lt(_35, _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:72:27: 72:35 (#0),
                    scope: scope[2],
                },
                kind: assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> [success: bb15, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &(*_2)[_35],
            _33 = &(*_34),
            _27 = (move _28, move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:72:13: 72:36 (#0),
                    scope: scope[2],
                },
                kind: _25 = <impl Fn(&T, &U) -> bool as core::ops::Fn<(&T, &U)>>::call(move _26, move _27) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:72:13: 72:36 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _25) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_30),
            StorageDead(_29),
            _18 = const (),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:70:5: 75:6 (#132),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_30),
            StorageDead(_29),
            _0 = const false,
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:78:1: 78:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb20, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:78:2: 78:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:78:1: 78:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:62:1: 78:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:62:87: 62:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/util.rs:62:36: 62:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:62:30: 62:34 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:62:30: 62:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:62:30: 62:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/util.rs:62:49: 62:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:62:42: 62:47 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:62:42: 62:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [U/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:62:42: 62:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/util.rs:62:59: 62:82 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:62:55: 62:57 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:62:55: 62:57 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T, &U) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:62:55: 62:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:5: 65:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:8: 63:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:8: 63:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:8: 63:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:22: 63:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [U/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:22: 63:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:63:34: 65:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:5: 75:6 (#132),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:17: 70:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:17: 70:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                src/util.rs:70:14: 70:27 (#133),
                            ),
                        ),
                        pat_span: src/util.rs:70:14: 70:27 (#133),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:62:1: 78:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:14: 70:27 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:5: 75:6 (#132),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:5: 75:6 (#132),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                src/util.rs:70:14: 70:27 (#133),
                            ),
                        ),
                        pat_span: src/util.rs:70:9: 70:10 (#134),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:70:9: 70:10 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:13: 72:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(&T, &U) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:13: 72:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: (&'{erased} T/#0, &'{erased} U/#1),
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:13: 72:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:16: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:16: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:22: 72:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:17: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:17: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: &'{erased} U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:26: 72:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: &'{erased} U/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:26: 72:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:33: 72:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:27: 72:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:27: 72:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/util.rs:72:9: 74:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:72:37: 74:10 (#0),
            scope: scope[0],
        },
    },
]