[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:172:13: 172:29 (#101),
                    scope: scope[0],
                },
                kind: _0 = <set::iter::IntoIter<T> as core::iter::DoubleEndedIterator>::next_back(move _2) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:173:9: 173:10 (#101),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:173:10: 173:10 (#101),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:173:9: 173:10 (#101),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:171:9: 173:10 (#101),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/macros.rs:171:30: 171:48 (#101),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: set::iter::IntoIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/macros.rs:171:17: 171:25 (#101),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/macros.rs:172:13: 172:29 (#101),
                },
            ),
        ),
        ty: &'{erased} mut set::iter::IntoIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/macros.rs:172:13: 172:17 (#101),
            scope: scope[0],
        },
    },
]