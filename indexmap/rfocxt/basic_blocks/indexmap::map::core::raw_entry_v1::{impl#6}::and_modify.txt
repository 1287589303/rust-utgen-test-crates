[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut _1,
            PlaceMention(_4),
            _5 = discriminant((*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:371:16: 371:37 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb1, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:371:16: 371:37 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            AscribeUserType((*_4), +, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_6),
            _6 = &mut (((*_4) as Occupied).0: map::core::raw_entry_v1::RawOccupiedEntryMut<'_, K, V, S>),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:372:26: 372:51 (#0),
                    scope: scope[1],
                },
                kind: _9 = map::core::raw_entry_v1::RawOccupiedEntryMut::<'_, K, V, S>::get_key_value_mut(move _10) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_7),
            _7 = move (_9.0: &mut K),
            StorageLive(_8),
            _8 = move (_9.1: &mut V),
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _2,
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut (*_7),
            StorageLive(_15),
            _15 = &mut (*_8),
            _13 = (move _14, move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:373:13: 373:20 (#0),
                    scope: scope[2],
                },
                kind: _11 = <F as core::ops::FnOnce<(&mut K, &mut V)>>::call_once(move _12, move _13) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            _3 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:371:9: 374:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:371:9: 374:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            _0 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:376:5: 376:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:376:6: 376:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:373:19: 373:20 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:376:5: 376:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/raw_entry_v1.rs:367:5: 376:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::core::raw_entry_v1::RawEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:367:45: 367:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: map::core::raw_entry_v1::RawEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:367:26: 367:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/raw_entry_v1.rs:367:39: 367:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/raw_entry_v1.rs:367:36: 367:37 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:367:36: 367:37 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:367:36: 367:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:371:9: 374:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::raw_entry_v1::RawEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:371:40: 371:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:371:16: 371:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/map/core/raw_entry_v1.rs:371:40: 371:49 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:371:16: 371:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut map::core::raw_entry_v1::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [
                                Downcast(
                                    Some(
                                        "Occupied",
                                    ),
                                    0,
                                ),
                                Field(
                                    0,
                                    (),
                                ),
                            ],
                        },
                        src/map/core/raw_entry_v1.rs:371:16: 371:37 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:371:31: 371:36 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/map/core/raw_entry_v1.rs:372:26: 372:51 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:372:17: 372:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:372:18: 372:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/map/core/raw_entry_v1.rs:372:26: 372:51 (#0),
                            ),
                        ),
                        pat_span: src/map/core/raw_entry_v1.rs:372:17: 372:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:372:21: 372:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:372:26: 372:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::raw_entry_v1::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:372:26: 372:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:373:13: 373:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:373:13: 373:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:373:13: 373:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:373:15: 373:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/raw_entry_v1.rs:373:18: 373:19 (#0),
            scope: scope[0],
        },
    },
]