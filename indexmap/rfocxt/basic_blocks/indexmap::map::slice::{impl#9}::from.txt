[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: [Bucket<K, V>]),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:328:27: 328:52 (#0),
                    scope: scope[0],
                },
                kind: _2 = <alloc::boxed::Box<[Bucket<K, V>]> as core::convert::From<&[Bucket<K, V>]>>::from(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:328:9: 328:53 (#0),
                    scope: scope[0],
                },
                kind: _0 = map::slice::Slice::<K, V>::from_boxed(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:329:6: 329:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:328:52: 328:53 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:327:5: 329:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<map::slice::Slice<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:327:37: 327:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:327:20: 327:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:327:13: 327:18 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:327:13: 327:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:327:13: 327:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:328:9: 328:53 (#0),
                },
            ),
        ),
        ty: alloc::boxed::Box<[Bucket<K/#1, V/#2>], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:328:27: 328:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:328:9: 328:53 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#1, V/#2>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:328:37: 328:51 (#0),
            scope: scope[0],
        },
    },
]