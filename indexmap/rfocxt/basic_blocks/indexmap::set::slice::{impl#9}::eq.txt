[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: [Bucket<T, ()>]),
            _3 = &(*_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_2).0: [Bucket<U, ()>]),
            _5 = &(*_6),
            StorageLive(_7),
            _7 = {closure@src/set/slice.rs:230:49: 230:57},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:230:9: 230:75 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::slice_eq::<Bucket<T, ()>, Bucket<U, ()>, {closure@src/set/slice.rs:230:49: 230:57}>(move _3, move _5, move _7) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:231:6: 231:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/slice.rs:229:5: 231:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:229:39: 229:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:229:11: 229:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/slice.rs:229:25: 229:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/slice.rs:229:18: 229:23 (#0),
                            ),
                        ),
                        pat_span: src/set/slice.rs:229:18: 229:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::slice::Slice<U/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:229:18: 229:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:230:9: 230:75 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:230:18: 230:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:230:9: 230:75 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<T/#0, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:230:18: 230:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:230:9: 230:75 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<U/#1, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:230:33: 230:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:230:9: 230:75 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<U/#1, ()>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:230:33: 230:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/slice.rs:230:9: 230:75 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1890 ~ indexmap[dd33]::set::slice::{impl#9}::eq::{closure#0}),
            [
                T/#0,
                U/#1,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 Bucket<T/#0, ()>, &'^1 Bucket<U/#1, ()>)) -> bool, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/slice.rs:230:49: 230:74 (#0),
            scope: scope[0],
        },
    },
]