[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move (_1.0: core::iter::Chain<set::iter::Iter<'_, T>, set::iter::Difference<'_, T, S>>),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            _6 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:497:9: 497:33 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::iter::Chain<set::iter::Iter<'_, T>, set::iter::Difference<'_, T, S>> as core::iter::DoubleEndedIterator>::rfold::<B, F>(move _4, move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:498:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:498:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:498:6: 498:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:497:32: 497:33 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:497:32: 497:33 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:498:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:498:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/iter.rs:493:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:493:44: 493:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: set::iter::Union<'{erased}, T/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:493:20: 493:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/iter.rs:493:32: 493:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:493:26: 493:30 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:493:26: 493:30 (#0),
                    },
                ),
            ),
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:493:26: 493:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/iter.rs:493:38: 493:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/iter.rs:493:35: 493:36 (#0),
                            ),
                        ),
                        pat_span: src/set/iter.rs:493:35: 493:36 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:493:35: 493:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:497:9: 497:33 (#0),
                },
            ),
        ),
        ty: core::iter::Chain<set::iter::Iter<'{erased}, T/#1>, set::iter::Difference<'{erased}, T/#1, S/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:497:9: 497:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:497:9: 497:33 (#0),
                },
            ),
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:497:25: 497:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/iter.rs:497:9: 497:33 (#0),
                },
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/iter.rs:497:31: 497:32 (#0),
            scope: scope[0],
        },
    },
]