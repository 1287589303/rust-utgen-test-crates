[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            _7 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:683:21: 683:36 (#0),
                    scope: scope[0],
                },
                kind: _5 = map::IndexMap::<K, V, S2>::drain::<core::ops::RangeFull>(move _6, move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:683:9: 683:37 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::IndexMap<K, V, S> as core::iter::Extend<(K, V)>>::extend::<map::iter::Drain<'_, K, V>>(move _4, move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:684:6: 684:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:683:36: 683:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:682:5: 684:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:682:65: 682:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:682:23: 682:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:682:41: 682:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:682:34: 682:39 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:682:34: 682:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S2/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:682:34: 682:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:683:9: 683:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:683:9: 683:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::iter::Drain<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:683:21: 683:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::IndexMap<K/#0, V/#1, S2/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:683:21: 683:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:683:33: 683:35 (#0),
            scope: scope[0],
        },
    },
]