[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).2: alloc::vec::IntoIter<Bucket<K, V>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:724:9: 724:26 (#0),
                    scope: scope[0],
                },
                kind: _2 = <alloc::vec::IntoIter<Bucket<K, V>> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:724:9: 724:49 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<Bucket<K, V>>::map::<(K, V), fn(Bucket<K, V>) -> (K, V) {Bucket::<K, V>::key_value}>(move _2, Bucket::<K, V>::key_value) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:725:6: 725:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:724:48: 724:49 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/iter.rs:723:5: 725:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(K/#2, V/#3)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:723:27: 723:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::iter::Splice<'{erased}, I/#1, K/#2, V/#3, S/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:723:13: 723:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:724:9: 724:49 (#0),
                },
            ),
        ),
        ty: core::option::Option<Bucket<K/#2, V/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:724:9: 724:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/iter.rs:724:9: 724:49 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::IntoIter<Bucket<K/#2, V/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/iter.rs:724:9: 724:19 (#0),
            scope: scope[0],
        },
    },
]