[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: core::slice::Iter<'_, Bucket<T, ()>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:160:13: 160:34 (#98),
                    scope: scope[0],
                },
                kind: _0 = <core::slice::Iter<'_, Bucket<T, ()>> as core::iter::Iterator>::size_hint(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:161:10: 161:10 (#98),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/macros.rs:159:9: 161:10 (#98),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/macros.rs:159:32: 159:54 (#98),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::iter::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/macros.rs:159:22: 159:27 (#98),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/macros.rs:160:13: 160:34 (#98),
                },
            ),
        ),
        ty: &'{erased} core::slice::Iter<'{erased}, Bucket<T/#1, ()>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/macros.rs:160:13: 160:22 (#98),
            scope: scope[0],
        },
    },
]