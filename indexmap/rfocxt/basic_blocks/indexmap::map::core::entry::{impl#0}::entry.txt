[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut ((*_1).1: alloc::vec::Vec<Bucket<K, V>>),
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_3,
            _6 = &(*_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:12:35: 12:42 (#0),
                    scope: scope[1],
                },
                kind: _9 = <alloc::vec::Vec<Bucket<K, V>> as core::ops::Deref>::deref(move _10) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &(*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:12:18: 12:43 (#0),
                    scope: scope[1],
                },
                kind: _5 = map::core::equivalent::<K, V, K>(move _6, move _8) -> [return: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).0: hashbrown::HashTable<usize>),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:13:39: 13:49 (#0),
                    scope: scope[2],
                },
                kind: _13 = HashValue::get(move _14) -> [return: bb3, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:13:15: 13:54 (#0),
                    scope: scope[2],
                },
                kind: _11 = hashbrown::HashTable::<usize>::find_entry::<impl for<'a> Fn(&'a usize) -> bool + '_>(move _12, move _13, move _15) -> [return: bb4, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            PlaceMention(_11),
            _16 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:13:9: 13:54 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:13:15: 13:54 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:14:13: 14:22 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_11 as Err).0: hashbrown::hash_table::AbsentEntry<'_, usize>),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:16:34: 16:53 (#0),
                    scope: scope[4],
                },
                kind: _25 = hashbrown::hash_table::AbsentEntry::<'_, usize>::into_table(move _26) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_11 as Ok).0: hashbrown::hash_table::OccupiedEntry<'_, usize>),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_4),
            StorageLive(_20),
            _20 = move _17,
            _18 = map::core::entry::OccupiedEntry::<'_, K, V> { entries: move _19, index: move _20 },
            StorageDead(_20),
            StorageDead(_19),
            _0 = map::core::entry::Entry::<'_, K, V>::Occupied(move _18),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:14:74: 14:75 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &mut (*_25),
            StorageDead(_26),
            StorageLive(_27),
            _27 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:16:22: 16:63 (#0),
                    scope: scope[4],
                },
                kind: _23 = map::core::RefMut::<'_, K, V>::new(move _24, move _27) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            StorageLive(_28),
            _28 = _2,
            StorageLive(_29),
            _29 = move _3,
            _22 = map::core::entry::VacantEntry::<'_, K, V> { map: move _23, hash: move _28, key: move _29 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:19:13: 19:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_29) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_23),
            _0 = map::core::entry::Entry::<'_, K, V>::Vacant(move _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:19:14: 19:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_25),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:19:14: 19:15 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:21:5: 21:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:21:5: 21:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb15, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:21:6: 21:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:19:14: 19:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:13:53: 13:54 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:21:5: 21:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:21:5: 21:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core/entry.rs:7:5: 21:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::core::entry::Entry<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:7:64: 7:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::core::IndexMapCore<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:7:25: 7:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/entry.rs:7:42: 7:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/entry.rs:7:36: 7:40 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:7:36: 7:40 (#0),
                    },
                ),
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:7:36: 7:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core/entry.rs:7:58: 7:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/entry.rs:7:53: 7:56 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:7:53: 7:56 (#0),
                    },
                ),
            ),
        ),
        ty: K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:7:53: 7:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/entry.rs:11:23: 11:40 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:11:13: 11:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:11:13: 11:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core/entry.rs:12:18: 12:43 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:12:13: 12:15 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#0,
                    V/#1,
                    K/#0,
                    '{erased},
                ],
                def_id: DefId(0:2718 ~ indexmap[dd33]::map::core::equivalent::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:12:13: 12:15 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:12:29: 12:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:12:29: 12:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:12:35: 12:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:12:35: 12:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:12:35: 12:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>, hashbrown::hash_table::AbsentEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:13:15: 13:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:13:15: 13:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:13:39: 13:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:13:39: 13:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#0,
                    V/#1,
                    K/#0,
                    '{erased},
                ],
                def_id: DefId(0:2718 ~ indexmap[dd33]::map::core::equivalent::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:13:51: 13:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:14:13: 14:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/map/core/entry.rs:13:15: 13:54 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:14:13: 14:22 (#0),
                    },
                ),
            ),
        ),
        ty: hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:14:16: 14:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::core::entry::OccupiedEntry<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:14:42: 14:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:14:58: 14:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:14:67: 14:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/map/core/entry.rs:13:15: 13:54 (#0),
                            ),
                        ),
                        pat_span: src/map/core/entry.rs:15:13: 15:24 (#0),
                    },
                ),
            ),
        ),
        ty: hashbrown::hash_table::AbsentEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:15:17: 15:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::core::entry::VacantEntry<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:15:42: 19:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::core::RefMut<'{erased}, K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:16:22: 16:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:16:34: 16:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:16:34: 16:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: hashbrown::hash_table::AbsentEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:16:34: 16:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/core/entry.rs:13:9: 20:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<Bucket<K/#0, V/#1>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:16:55: 16:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:17:17: 17:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core/entry.rs:18:17: 18:20 (#0),
            scope: scope[0],
        },
    },
]