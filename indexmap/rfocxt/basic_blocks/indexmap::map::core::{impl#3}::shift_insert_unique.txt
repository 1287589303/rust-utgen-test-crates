[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*((*_1).0: &mut hashbrown::HashTable<usize>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:570:19: 570:37 (#0),
                    scope: scope[0],
                },
                kind: _6 = hashbrown::HashTable::<usize>::len(move _7) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _2,
            StorageLive(_11),
            _11 = _6,
            _9 = Le(move _10, move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:571:17: 571:29 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = const (),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut (*_1),
            StorageLive(_15),
            _15 = _2,
            StorageLive(_16),
            _16 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:573:9: 573:43 (#0),
                    scope: scope[1],
                },
                kind: _13 = map::core::RefMut::<'_, K, V>::increment_indices(move _14, move _15, move _16) -> [return: bb4, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:571:9: 571:30 (#47),
                    scope: scope[1],
                },
                kind: _12 = core::panicking::panic(const "assertion failed: index <= end") -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_17),
            _17 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>)),
            FakeRead(ForLet(None), _17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*((*_1).0: &mut hashbrown::HashTable<usize>)),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:575:36: 575:46 (#0),
                    scope: scope[2],
                },
                kind: _20 = HashValue::get(move _21) -> [return: bb5, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_22),
            _22 = _2,
            StorageLive(_23),
            _23 = {closure@src/map/core.rs:575:55: 575:64} { index: _2, entries: _17 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:575:9: 580:11 (#0),
                    scope: scope[2],
                },
                kind: _18 = hashbrown::HashTable::<usize>::insert_unique::<{closure@src/map/core.rs:575:55: 575:64}>(move _19, move _20, move _22, move _23) -> [return: bb6, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:581:12: 581:30 (#0),
                    scope: scope[2],
                },
                kind: _26 = alloc::vec::Vec::<Bucket<K, V>>::len(move _27) -> [return: bb7, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:581:34: 581:57 (#0),
                    scope: scope[2],
                },
                kind: _28 = alloc::vec::Vec::<Bucket<K, V>>::capacity(move _29) -> [return: bb8, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            _25 = Eq(move _26, move _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:581:12: 581:57 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _25) -> [0: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_26),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:584:13: 584:36 (#0),
                    scope: scope[2],
                },
                kind: _30 = map::core::RefMut::<'_, K, V>::reserve_entries(move _31, const 1_usize) -> [return: bb10, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:581:9: 585:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_26),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:581:9: 585:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut (*((*_1).1: &mut alloc::vec::Vec<Bucket<K, V>>)),
            StorageLive(_34),
            _34 = _2,
            StorageLive(_35),
            StorageLive(_36),
            _36 = _3,
            StorageLive(_37),
            _37 = move _4,
            StorageLive(_38),
            _38 = move _5,
            _35 = Bucket::<K, V> { hash: move _36, key: move _37, value: move _38 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:586:62: 586:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_38) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:586:62: 586:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:586:9: 586:64 (#0),
                    scope: scope[2],
                },
                kind: _32 = alloc::vec::Vec::<Bucket<K, V>>::insert(move _33, move _34, move _35) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            _0 = const (),
            StorageDead(_17),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:587:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:587:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb17, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:587:6: 587:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:586:62: 586:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_37) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:586:63: 586:64 (#0),
                    scope: scope[2],
                },
                kind: drop(_35) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:587:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:587:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/core.rs:569:5: 587:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:569:87: 569:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::core::RefMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:569:28: 569:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:569:46: 569:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:569:39: 569:44 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:569:39: 569:44 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:569:39: 569:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:569:59: 569:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:569:53: 569:57 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:569:53: 569:57 (#0),
                    },
                ),
            ),
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:569:53: 569:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:569:75: 569:76 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:569:70: 569:73 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:569:70: 569:73 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:569:70: 569:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map/core.rs:569:85: 569:86 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:569:78: 569:83 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:569:78: 569:83 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:569:78: 569:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:570:19: 570:37 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:570:13: 570:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:570:13: 570:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:570:19: 570:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:571:9: 571:30 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:571:17: 571:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:571:17: 571:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:571:26: 571:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/map/core.rs:571:9: 571:30 (#47),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:571:9: 571:30 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:573:9: 573:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::RefMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:573:9: 573:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:573:32: 573:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:573:39: 573:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map/core.rs:574:23: 574:37 (#0),
                            ),
                        ),
                        pat_span: src/map/core.rs:574:13: 574:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:574:13: 574:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: hashbrown::hash_table::OccupiedEntry<'{erased}, usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:575:9: 580:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hashbrown::HashTable<usize, hashbrown::raw::alloc::inner::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:575:9: 575:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:575:36: 575:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:575:36: 575:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:575:48: 575:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:460 ~ indexmap[dd33]::map::core::{impl#3}::shift_insert_unique::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 usize,)) -> u64, bound_vars: [Region(BrAnon)] },
                (usize, &'{erased} alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:575:55: 580:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:581:9: 585:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:581:12: 581:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:581:12: 581:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:581:12: 581:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:581:34: 581:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:581:34: 581:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:584:13: 584:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::core::RefMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:584:13: 584:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:9: 586:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<Bucket<K/#1, V/#2>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:9: 586:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:29: 586:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Bucket<K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:36: 586:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: HashValue,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:45: 586:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:51: 586:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/core.rs:586:56: 586:61 (#0),
            scope: scope[0],
        },
    },
]