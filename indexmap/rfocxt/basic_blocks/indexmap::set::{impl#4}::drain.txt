[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (((*_1).0: map::IndexMap<T, (), S>).0: map::core::IndexMapCore<T, ()>),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:258:20: 258:46 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::core::IndexMapCore::<T, ()>::drain::<R>(move _4, move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:258:9: 258:47 (#0),
                    scope: scope[0],
                },
                kind: _0 = set::iter::Drain::<'_, T>::new(move _3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:259:5: 259:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:259:6: 259:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:258:46: 258:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:258:45: 258:46 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:259:5: 259:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:254:5: 259:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::iter::Drain<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:254:45: 254:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:254:21: 254:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:254:39: 254:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:254:32: 254:37 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:254:32: 254:37 (#0),
                    },
                ),
            ),
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:254:32: 254:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:258:9: 258:47 (#0),
                },
            ),
        ),
        ty: alloc::vec::Drain<'{erased}, Bucket<T/#0, ()>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:258:20: 258:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:258:9: 258:47 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::core::IndexMapCore<T/#0, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:258:20: 258:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:258:9: 258:47 (#0),
                },
            ),
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:258:40: 258:45 (#0),
            scope: scope[0],
        },
    },
]