[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &((*_1).0: [Bucket<K, V>]),
            StorageLive(_4),
            _4 = {closure@src/map/slice.rs:271:30: 271:38} { pred: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:270:9: 271:62 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::slice::<impl [Bucket<K, V>]>::partition_point::<{closure@src/map/slice.rs:271:30: 271:38}>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:272:5: 272:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:272:6: 272:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:271:61: 271:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:272:5: 272:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map/slice.rs:266:5: 272:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:266:54: 266:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::slice::Slice<K/#0, V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:266:31: 266:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/map/slice.rs:266:48: 266:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map/slice.rs:266:38: 266:46 (#0),
                            ),
                        ),
                        pat_span: src/map/slice.rs:266:38: 266:46 (#0),
                    },
                ),
            ),
        ),
        ty: P/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:266:38: 266:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:270:9: 271:62 (#0),
                },
            ),
        ),
        ty: &'{erased} [Bucket<K/#0, V/#1>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:270:9: 270:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map/slice.rs:270:9: 271:62 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1066 ~ indexmap[dd33]::map::slice::{impl#1}::partition_point::{closure#0}),
            [
                K/#0,
                V/#1,
                P/#2,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 Bucket<K/#0, V/#1>,)) -> bool, bound_vars: [Region(BrAnon)] },
                (P/#2,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map/slice.rs:271:30: 271:61 (#0),
            scope: scope[0],
        },
    },
]