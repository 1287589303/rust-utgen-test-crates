[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1192:9: 1192:19 (#0),
                    scope: scope[0],
                },
                kind: _4 = set::IndexSet::<T, S1>::len(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1192:23: 1192:34 (#0),
                    scope: scope[0],
                },
                kind: _6 = set::IndexSet::<T, S2>::len(move _7) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _3 = Eq(move _4, move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1192:9: 1192:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1192:38: 1192:59 (#0),
                    scope: scope[0],
                },
                kind: _0 = set::IndexSet::<T, S1>::is_subset::<S2>(move _8, move _9) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            _0 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1192:9: 1192:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1192:9: 1192:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1193:6: 1193:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1191:5: 1193:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1191:46: 1191:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S1/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1191:11: 1191:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1191:25: 1191:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1191:18: 1191:23 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1191:18: 1191:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S2/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1191:18: 1191:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:9: 1192:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:9: 1192:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S1/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:9: 1192:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:23: 1192:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S2/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:23: 1192:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S1/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:38: 1192:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1192:9: 1192:59 (#0),
                },
            ),
        ),
        ty: &'{erased} set::IndexSet<T/#0, S2/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1192:53: 1192:58 (#0),
            scope: scope[0],
        },
    },
]