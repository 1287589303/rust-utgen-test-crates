[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: map::IndexMap<T, (), S>),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:61:15: 61:44 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::IndexMap<T, (), S> as map::mutable::MutableKeys>::get_full_mut2::<Q>(move _4, move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:61:9: 61:44 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:61:15: 61:44 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:62:13: 62:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<(usize, &mut T)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:63:21: 63:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = (((_3 as Some).0: (usize, &mut T, &mut ())).0: usize),
            StorageLive(_8),
            _8 = move (((_3 as Some).0: (usize, &mut T, &mut ())).1: &mut T),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _7,
            StorageLive(_11),
            _11 = &mut (*_8),
            _9 = (move _10, move _11),
            StorageDead(_11),
            StorageDead(_10),
            _0 = core::option::Option::<(usize, &mut T)>::Some(move _9),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:62:60: 62:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:65:6: 65:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set/mutable.rs:57:5: 65:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, &'{erased} mut T/#0)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:57:50: 57:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::IndexSet<T/#0, S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:57:25: 57:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set/mutable.rs:57:43: 57:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set/mutable.rs:57:36: 57:41 (#0),
                            ),
                        ),
                        pat_span: src/set/mutable.rs:57:36: 57:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Q/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:57:36: 57:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/mutable.rs:61:9: 64:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<(usize, &'{erased} mut T/#0, &'{erased} mut ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:61:15: 61:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/mutable.rs:61:9: 64:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IndexMap<T/#0, (), S/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:61:15: 61:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/mutable.rs:61:9: 64:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Q/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:61:38: 61:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:62:13: 62:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/set/mutable.rs:61:15: 61:44 (#0),
                            ),
                        ),
                        pat_span: src/set/mutable.rs:62:13: 62:37 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:62:19: 62:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/set/mutable.rs:61:15: 61:44 (#0),
                            ),
                        ),
                        pat_span: src/set/mutable.rs:62:13: 62:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:62:26: 62:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (usize, &'{erased} mut T/#0),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:62:46: 62:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/mutable.rs:61:9: 64:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:62:47: 62:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set/mutable.rs:61:9: 64:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set/mutable.rs:62:54: 62:59 (#0),
            scope: scope[0],
        },
    },
]