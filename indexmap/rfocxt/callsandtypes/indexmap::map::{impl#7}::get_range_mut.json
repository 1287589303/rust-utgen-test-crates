{"mod_name":"map","calls":["core::option::Option::<&mut [Bucket<K, V>]>::map::<&mut map::slice::Slice<K, V>, for<'a> fn","util::try_simplify_range::<R>","<core::option::Option<core::ops::Range<usize>> as core::ops::Try>::branch","<core::option::Option<&mut map::slice::Slice<K, V>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual","core::slice::<impl [Bucket<K, V>]>::get_mut::<core::ops::Range<usize>>","<map::IndexMap<K, V, S> as Entries>::as_entries_mut","core::slice::<impl [Bucket<K, V>]>::len"],"types":["map::slice::Slice<K, V>","isize","Bucket<K, V>","core::ops::Range<usize>","usize","core::option::Option<core::convert::Infallible>","[Bucket<K, V>]","core::convert::Infallible","!","core::option::Option<&mut [Bucket<K, V>]>","V","core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, core::ops::Range<usize>>","core::option::Option<core::ops::Range<usize>>","K","R","map::IndexMap<K, V, S>","S","for<'a> fn(&'a mut [Bucket<K, V>]) -> &'a mut map::slice::Slice<K, V> {map::slice::Slice::<K, V>::from_mut_slice}","core::option::Option<&mut map::slice::Slice<K, V>>"]}