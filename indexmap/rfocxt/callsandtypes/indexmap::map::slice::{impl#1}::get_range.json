{"mod_name":"map::slice","calls":["core::option::Option::<&[Bucket<K, V>]>::map::<&map::slice::Slice<K, V>, for<'a> fn","core::slice::<impl [Bucket<K, V>]>::get::<core::ops::Range<usize>>","core::slice::<impl [Bucket<K, V>]>::len","util::try_simplify_range::<R>","<core::option::Option<core::ops::Range<usize>> as core::ops::Try>::branch","<core::option::Option<&map::slice::Slice<K, V>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual"],"types":["V","core::option::Option<&[Bucket<K, V>]>","core::convert::Infallible","R","core::option::Option<core::convert::Infallible>","core::option::Option<&map::slice::Slice<K, V>>","[Bucket<K, V>]","map::slice::Slice<K, V>","K","core::option::Option<core::ops::Range<usize>>","Bucket<K, V>","core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, core::ops::Range<usize>>","!","core::ops::Range<usize>","isize","usize","for<'a> fn(&'a [Bucket<K, V>]) -> &'a map::slice::Slice<K, V> {map::slice::Slice::<K, V>::from_slice}"]}