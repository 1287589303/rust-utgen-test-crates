{
  "name": "serde_json::number::{impl#3}::from_f32",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:320:5:336:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: f.is_finite() at line 321 is true\n",
        "expected return value/type: Some(Number { n })\n"
      ],
      "input_infer": "f must be a finite f32 value within the range of -3.4028235e38 to 3.4028235e38, excluding values of NaN and Infinity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(1.0_f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let number = result.unwrap();",
                "    assert!(number.is_f64());",
                "    assert_eq!(number.as_f64(), Some(1.0));"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(1.0_f32);",
                "    assert!(result.is_some());",
                "    let number = result.unwrap();",
                "    assert!(number.is_f64());",
                "    assert_eq!(number.as_f64(), Some(1.0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(3.4028234e38_f32);",
                "}"
              ],
              "oracle": [
                "    let result = Number::from_f32(3.4028234e38_f32);",
                "    assert!(result.is_some());",
                "    if let Some(number) = result {",
                "    assert!(number.is_f64());",
                "    assert_eq!(number.as_f64(), Some(3.4028234e38_f64));",
                "    }"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(3.4028234e38_f32);",
                "    let result = Number::from_f32(3.4028234e38_f32);",
                "    assert!(result.is_some());",
                "    if let Some(number) = result {",
                "    assert!(number.is_f64());",
                "    assert_eq!(number.as_f64(), Some(3.4028234e38_f64));",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(0.0_f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f64(), Some(0.0));"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(0.0_f32);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f64(), Some(0.0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(-1.0_f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f64(), Some(-1.0));"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(-1.0_f32);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f64(), Some(-1.0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(-3.4028234e38_f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    match result {",
                "    Some(number) => {",
                "    assert_eq!(number.as_f32(), Some(-3.4028234_f32));",
                "    assert_eq!(number.as_f64(), Some(-3.4028234_f64));",
                "    assert!(number.is_f64());",
                "    assert!(number.is_i64() == false);",
                "    assert!(number.is_u64() == false);",
                "    },",
                "    None => panic!(\"Expected Some(Number) but got None\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(-3.4028234e38_f32);",
                "    assert!(result.is_some());",
                "    match result {",
                "    Some(number) => {",
                "    assert_eq!(number.as_f32(), Some(-3.4028234_f32));",
                "    assert_eq!(number.as_f64(), Some(-3.4028234_f64));",
                "    assert!(number.is_f64());",
                "    assert!(number.is_i64() == false);",
                "    assert!(number.is_u64() == false);",
                "    },",
                "    None => panic!(\"Expected Some(Number) but got None\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(1.2e-38_f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f64(), Some(1.2e-38));"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(1.2e-38_f32);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f64(), Some(1.2e-38));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Number::from_f32(-1.2e-38_f32);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f32(), Some(-1.2e-38_f32));",
                "    assert!(result.unwrap().is_f64());",
                "    assert_eq!(result.unwrap().as_i64(), None);",
                "    assert_eq!(result.unwrap().as_u64(), None);",
                "    assert!(result.unwrap().as_i128().is_none());",
                "    assert!(result.unwrap().as_u128().is_none());"
              ],
              "code": [
                "{",
                "    let result = Number::from_f32(-1.2e-38_f32);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().as_f32(), Some(-1.2e-38_f32));",
                "    assert!(result.unwrap().is_f64());",
                "    assert_eq!(result.unwrap().as_i64(), None);",
                "    assert_eq!(result.unwrap().as_u64(), None);",
                "    assert!(result.unwrap().as_i128().is_none());",
                "    assert!(result.unwrap().as_u128().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: f.is_finite() at line 321 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "Test input conditions or ranges: f ∈ (-∞, -∞) ∪ (NaN, +∞) ∪ (∞, +∞) (f must be NaN or ±∞).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = f32::NAN;",
                "    let result = Number::from_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = f32::NAN;",
                "    let result = Number::from_f32(value);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = f32::NEG_INFINITY;",
                "    let result = Number::from_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = f32::NEG_INFINITY;",
                "    let result = Number::from_f32(value);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = f32::INFINITY;",
                "    let result = Number::from_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = f32::INFINITY;",
                "    let result = Number::from_f32(value);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}