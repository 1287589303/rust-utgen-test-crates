{
  "name": "serde_json::value::{impl#2}::is_boolean",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:691:5:693:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: Include values of type Value such as Bool(true), Bool(false), Null, String(\"true\"), String(\"false\"), Number(12), Array(vec![Bool(true)]), Object(Map::new()), and ensure coverage for invalid and boundary cases like empty strings, empty arrays, and empty objects.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(v.is_boolean());",
                "    let v_false = Value::Bool(false);",
                "    assert!(v_false.is_boolean());",
                "    let v_null = Value::Null;",
                "    assert!(!v_null.is_boolean());",
                "    let v_string = Value::String(String::from(\"false\"));",
                "    assert!(!v_string.is_boolean());",
                "    let v_number = Value::Number(Number { n: 0 });",
                "    assert!(!v_number.is_boolean());",
                "    let v_array = Value::Array(Vec::new());",
                "    assert!(!v_array.is_boolean());",
                "    let v_object = Value::Object(Map::new());",
                "    assert!(!v_object.is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.is_boolean();",
                "    assert!(v.is_boolean());",
                "    let v_false = Value::Bool(false);",
                "    assert!(v_false.is_boolean());",
                "    let v_null = Value::Null;",
                "    assert!(!v_null.is_boolean());",
                "    let v_string = Value::String(String::from(\"false\"));",
                "    assert!(!v_string.is_boolean());",
                "    let v_number = Value::Number(Number { n: 0 });",
                "    assert!(!v_number.is_boolean());",
                "    let v_array = Value::Array(Vec::new());",
                "    assert!(!v_array.is_boolean());",
                "    let v_object = Value::Object(Map::new());",
                "    assert!(!v_object.is_boolean());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Bool(false);",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(v.is_boolean());",
                "    assert!(!Value::String(String::from(\"false\")).is_boolean());",
                "    assert!(!Value::Null.is_boolean());",
                "    assert!(Value::Bool(true).is_boolean());",
                "    assert!(!Value::Number(Number { n: 0 }).is_boolean());",
                "    assert!(!Value::Array(vec![]).is_boolean());",
                "    assert!(!Value::Object(Map::new()).is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::Bool(false);",
                "    v.is_boolean();",
                "    assert!(v.is_boolean());",
                "    assert!(!Value::String(String::from(\"false\")).is_boolean());",
                "    assert!(!Value::Null.is_boolean());",
                "    assert!(Value::Bool(true).is_boolean());",
                "    assert!(!Value::Number(Number { n: 0 }).is_boolean());",
                "    assert!(!Value::Array(vec![]).is_boolean());",
                "    assert!(!Value::Object(Map::new()).is_boolean());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Null;",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_boolean());",
                "    assert!(Value::Bool(true).is_boolean());",
                "    assert!(Value::Bool(false).is_boolean());",
                "    assert!(!Value::String(String::from(\"true\")).is_boolean());",
                "    assert!(!Value::Array(vec![]).is_boolean());",
                "    assert!(!Value::Object(Map::new()).is_boolean());",
                "    assert!(!Value::Number(Number { n: 0 }).is_boolean());",
                "    assert!(Value::Bool(true).as_bool().is_some());",
                "    assert!(Value::Bool(false).as_bool().is_some());",
                "    assert!(Value::Null.as_bool().is_none());",
                "    assert!(Value::String(String::from(\"true\")).as_bool().is_none());"
              ],
              "code": [
                "{",
                "    let v = Value::Null;",
                "    v.is_boolean();",
                "    assert!(!v.is_boolean());",
                "    assert!(Value::Bool(true).is_boolean());",
                "    assert!(Value::Bool(false).is_boolean());",
                "    assert!(!Value::String(String::from(\"true\")).is_boolean());",
                "    assert!(!Value::Array(vec![]).is_boolean());",
                "    assert!(!Value::Object(Map::new()).is_boolean());",
                "    assert!(!Value::Number(Number { n: 0 }).is_boolean());",
                "    assert!(Value::Bool(true).as_bool().is_some());",
                "    assert!(Value::Bool(false).as_bool().is_some());",
                "    assert!(Value::Null.as_bool().is_none());",
                "    assert!(Value::String(String::from(\"true\")).as_bool().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::String(String::from(\"true\"));",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::String(String::from(\"true\"));",
                "    v.is_boolean();",
                "    assert!(!v.is_boolean());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::String(String::from(\"false\"));",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Bool(true);",
                "    assert_eq!(v.is_boolean(), true);",
                "    let v = Value::Bool(false);",
                "    assert_eq!(v.is_boolean(), true);",
                "    let v = Value::Null;",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Number(Number { n: 0 });",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Array(vec![]);",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Object(Map::new());",
                "    assert_eq!(v.is_boolean(), false);"
              ],
              "code": [
                "{",
                "    let v = Value::String(String::from(\"false\"));",
                "    v.is_boolean();",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Bool(true);",
                "    assert_eq!(v.is_boolean(), true);",
                "    let v = Value::Bool(false);",
                "    assert_eq!(v.is_boolean(), true);",
                "    let v = Value::Null;",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Number(Number { n: 0 });",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Array(vec![]);",
                "    assert_eq!(v.is_boolean(), false);",
                "    let v = Value::Object(Map::new());",
                "    assert_eq!(v.is_boolean(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Number(Number { n: N });",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_boolean());",
                "    let v = Value::Bool(true);",
                "    assert!(v.is_boolean());",
                "    let v = Value::Bool(false);",
                "    assert!(v.is_boolean());",
                "    let v = Value::String(String::from(\"true\"));",
                "    assert!(!v.is_boolean());",
                "    let v = Value::String(String::from(\"false\"));",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Null;",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Array(vec![]);",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Object(Map::new());",
                "    assert!(!v.is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::Number(Number { n: N });",
                "    v.is_boolean();",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Bool(true);",
                "    assert!(v.is_boolean());",
                "    let v = Value::Bool(false);",
                "    assert!(v.is_boolean());",
                "    let v = Value::String(String::from(\"true\"));",
                "    assert!(!v.is_boolean());",
                "    let v = Value::String(String::from(\"false\"));",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Null;",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Array(vec![]);",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Object(Map::new());",
                "    assert!(!v.is_boolean());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Array(vec![Value::Bool(true)]);",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(v.is_boolean());",
                "    let v = Value::Bool(false);",
                "    assert!(v.is_boolean());",
                "    let v = Value::Bool(true);",
                "    assert!(v.is_boolean());",
                "    let v = Value::String(String::from(\"true\"));",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Number(Number { n: 0 });",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Null;",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Object(Map::new());",
                "    assert!(!v.is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::Array(vec![Value::Bool(true)]);",
                "    v.is_boolean();",
                "    assert!(v.is_boolean());",
                "    let v = Value::Bool(false);",
                "    assert!(v.is_boolean());",
                "    let v = Value::Bool(true);",
                "    assert!(v.is_boolean());",
                "    let v = Value::String(String::from(\"true\"));",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Number(Number { n: 0 });",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Null;",
                "    assert!(!v.is_boolean());",
                "    let v = Value::Object(Map::new());",
                "    assert!(!v.is_boolean());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Array(vec![]);",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Bool(true);",
                "    assert!(v.is_boolean());",
                "    assert_eq!(v.is_boolean(), true);",
                "    ",
                "    let v = Value::Bool(false);",
                "    assert!(v.is_boolean());",
                "    assert_eq!(v.is_boolean(), true);",
                "    ",
                "    let v = Value::String(String::from(\"true\"));",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::String(String::from(\"false\"));",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Number(Number { n: 0 });",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Null;",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Object(Map::new());",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);"
              ],
              "code": [
                "{",
                "    let v = Value::Array(vec![]);",
                "    v.is_boolean();",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Bool(true);",
                "    assert!(v.is_boolean());",
                "    assert_eq!(v.is_boolean(), true);",
                "    ",
                "    let v = Value::Bool(false);",
                "    assert!(v.is_boolean());",
                "    assert_eq!(v.is_boolean(), true);",
                "    ",
                "    let v = Value::String(String::from(\"true\"));",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::String(String::from(\"false\"));",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Number(Number { n: 0 });",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Null;",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "    ",
                "    let v = Value::Object(Map::new());",
                "    assert!(!v.is_boolean());",
                "    assert_eq!(v.is_boolean(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Object(Map::new());",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_boolean());",
                "    ",
                "    let v_bool = Value::Bool(true);",
                "    assert!(v_bool.is_boolean());",
                "    ",
                "    let v_string = Value::String(String::from(\"true\"));",
                "    assert!(!v_string.is_boolean());",
                "    ",
                "    let v_null = Value::Null;",
                "    assert!(!v_null.is_boolean());",
                "    ",
                "    let v_number = Value::Number(Number { n: 42 });",
                "    assert!(!v_number.is_boolean());",
                "    ",
                "    let v_array = Value::Array(vec![Value::Bool(false), Value::Bool(true)]);",
                "    assert!(!v_array.is_boolean());",
                "    ",
                "    let v_object = Value::Object(Map::new());",
                "    assert!(!v_object.is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::Object(Map::new());",
                "    v.is_boolean();",
                "    assert!(!v.is_boolean());",
                "    ",
                "    let v_bool = Value::Bool(true);",
                "    assert!(v_bool.is_boolean());",
                "    ",
                "    let v_string = Value::String(String::from(\"true\"));",
                "    assert!(!v_string.is_boolean());",
                "    ",
                "    let v_null = Value::Null;",
                "    assert!(!v_null.is_boolean());",
                "    ",
                "    let v_number = Value::Number(Number { n: 42 });",
                "    assert!(!v_number.is_boolean());",
                "    ",
                "    let v_array = Value::Array(vec![Value::Bool(false), Value::Bool(true)]);",
                "    assert!(!v_array.is_boolean());",
                "    ",
                "    let v_object = Value::Object(Map::new());",
                "    assert!(!v_object.is_boolean());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Object(Map::new());",
                "    v.is_boolean();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_boolean());"
              ],
              "code": [
                "{",
                "    let v = Value::Object(Map::new());",
                "    v.is_boolean();",
                "    assert!(!v.is_boolean());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}