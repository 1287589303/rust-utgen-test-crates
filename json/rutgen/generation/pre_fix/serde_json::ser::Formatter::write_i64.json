{
  "name": "serde_json::ser::Formatter::write_i64",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1615:5:1622:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "i64 values within the range of -2^63 to 2^63-1 covering edge cases of -2^63, -1, 0, 1, and 2^63-1, with a valid writer that implements io::Write.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "struct DummyFormatter; // A placeholder struct for testing purposes to satisfy the trait bounds."
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -i64::MAX - 1;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -123;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-123\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MAX;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(i64::MAX).as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -i64::MIN;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(-i64::MIN).as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 1;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -1;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-1\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -i64::MAX - 1;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -123;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-123\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MAX;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(i64::MAX).as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -i64::MIN;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(-i64::MIN).as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 1;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -1;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -1;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"-1\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -1;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"0\");",
                "    writer.output.clear();",
                "    let value: i64 = -123;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-123\");",
                "    writer.output.clear();",
                "    let value: i64 = 123456789;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"123456789\");",
                "    writer.output.clear();",
                "    let value: i64 = -987654321;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-987654321\");",
                "    writer.output.clear();",
                "    let value: i64 = i64::MAX;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(i64::MAX).as_bytes());",
                "    writer.output.clear();",
                "    let value: i64 = i64::MIN;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(i64::MIN).as_bytes());"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"0\");",
                "    writer.output.clear();",
                "    let value: i64 = -123;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-123\");",
                "    writer.output.clear();",
                "    let value: i64 = 123456789;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"123456789\");",
                "    writer.output.clear();",
                "    let value: i64 = -987654321;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-987654321\");",
                "    writer.output.clear();",
                "    let value: i64 = i64::MAX;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(i64::MAX).as_bytes());",
                "    writer.output.clear();",
                "    let value: i64 = i64::MIN;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, itoa::Buffer::new().format(i64::MIN).as_bytes());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 1;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -123;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-123\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 9223372036854775807; // i64::MAX",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"9223372036854775807\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -9223372036854775808; // i64::MIN",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-9223372036854775808\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 1;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -123;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-123\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 9223372036854775807; // i64::MAX",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"9223372036854775807\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -9223372036854775808; // i64::MIN",
                "    let mut formatter = DummyFormatter;",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    assert_eq!(writer.output, b\"-9223372036854775808\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MAX;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MAX;",
                "    let expected_output = \"9223372036854775807\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let expected_output = \"0\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -1;",
                "    let expected_output = \"-1\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MIN;",
                "    let expected_output = \"-9223372036854775808\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MAX;",
                "    let mut formatter = DummyFormatter;",
                "",
                "    let _ = formatter.write_i64(&mut writer, value);",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MAX;",
                "    let expected_output = \"9223372036854775807\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = 0;",
                "    let expected_output = \"0\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = -1;",
                "    let expected_output = \"-1\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i64 = i64::MIN;",
                "    let expected_output = \"-9223372036854775808\";",
                "    formatter.write_i64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, expected_output.as_bytes());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}