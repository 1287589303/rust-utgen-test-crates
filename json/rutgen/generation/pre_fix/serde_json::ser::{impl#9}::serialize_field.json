{
  "name": "serde_json::ser::{impl#9}::serialize_field",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:690:5:713:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "key should be a valid static string; value should implement Serialize trait; Compound should be either of type Map, Number (with key equal to TOKEN), or RawValue (with key equal to TOKEN).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::Map {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "        state: State::Empty,",
                "    };",
                "    let key: &'static str = \"test_key\";",
                "    let value = \"test_value\";",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compound.state, State::Empty);",
                "    assert_eq!(compound.serialize_field(key, &value).is_ok(), true);",
                "    assert_eq!(compound.serialize_field(crate::number::TOKEN, &value).is_err(), true);",
                "    assert_eq!(compound.serialize_field(crate::raw::TOKEN, &value).is_err(), true);",
                "    assert!(matches!(compound, Compound::Map { .. }));",
                "    assert!(compound.writer.is::<TestWriter>());",
                "    assert!(compound.formatter.is::<TestFormatter>());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::Map {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "        state: State::Empty,",
                "    };",
                "    let key: &'static str = \"test_key\";",
                "    let value = \"test_value\";",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "    assert_eq!(compound.state, State::Empty);",
                "    assert_eq!(compound.serialize_field(key, &value).is_ok(), true);",
                "    assert_eq!(compound.serialize_field(crate::number::TOKEN, &value).is_err(), true);",
                "    assert_eq!(compound.serialize_field(crate::raw::TOKEN, &value).is_err(), true);",
                "    assert!(matches!(compound, Compound::Map { .. }));",
                "    assert!(compound.writer.is::<TestWriter>());",
                "    assert!(compound.formatter.is::<TestFormatter>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"arbitrary_precision\")]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::Number {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = crate::number::TOKEN;",
                "    let value = 42;",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compound.serialize_field(crate::number::TOKEN, &42).is_ok(), true);",
                "    assert_eq!(compound.serialize_field(\"other_key\", &42).is_err(), true);",
                "    ",
                "    #[cfg(feature = \"raw_value\")]",
                "    let mut compound_raw = Compound::RawValue {",
                "    ser: &mut Serializer {",
                "    writer,",
                "    formatter,",
                "    },",
                "    };",
                "    ",
                "    assert_eq!(compound_raw.serialize_field(crate::raw::TOKEN, &\"raw_value\").is_ok(), true);",
                "    assert_eq!(compound_raw.serialize_field(\"other_key\", &\"raw_value\").is_err(), true);",
                "    ",
                "    let invalid_key = \"invalid_key\";",
                "    assert_eq!(compound.serialize_field(invalid_key, &42).is_err(), true);"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::Number {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = crate::number::TOKEN;",
                "    let value = 42;",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "    assert_eq!(compound.serialize_field(crate::number::TOKEN, &42).is_ok(), true);",
                "    assert_eq!(compound.serialize_field(\"other_key\", &42).is_err(), true);",
                "    ",
                "    #[cfg(feature = \"raw_value\")]",
                "    let mut compound_raw = Compound::RawValue {",
                "    ser: &mut Serializer {",
                "    writer,",
                "    formatter,",
                "    },",
                "    };",
                "    ",
                "    assert_eq!(compound_raw.serialize_field(crate::raw::TOKEN, &\"raw_value\").is_ok(), true);",
                "    assert_eq!(compound_raw.serialize_field(\"other_key\", &\"raw_value\").is_err(), true);",
                "    ",
                "    let invalid_key = \"invalid_key\";",
                "    assert_eq!(compound.serialize_field(invalid_key, &42).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"raw_value\")]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::RawValue {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = crate::raw::TOKEN;",
                "    let value = \"raw_value\";",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compound.serialize_field(key, &value).is_ok(), true);",
                "    assert_eq!(compound.serialize_field(\"invalid_key\", &value).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &42).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &vec![1, 2, 3]).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &None::<String>).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &true).is_err(), true);"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::RawValue {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = crate::raw::TOKEN;",
                "    let value = \"raw_value\";",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "    assert_eq!(compound.serialize_field(key, &value).is_ok(), true);",
                "    assert_eq!(compound.serialize_field(\"invalid_key\", &value).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &42).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &vec![1, 2, 3]).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &None::<String>).is_err(), true);",
                "    assert_eq!(compound.serialize_field(key, &true).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"arbitrary_precision\")]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::Number {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = \"invalid_key\";",
                "    let value = 42;",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(compound.serialize_field(\"invalid_key\", &42).is_err(), true);",
                "    ",
                "    let key_valid = crate::number::TOKEN;",
                "    let value_valid = 42;",
                "    assert_eq!(compound.serialize_field(key_valid, &value_valid).is_ok(), true);",
                "    ",
                "    let key_invalid = \"another_invalid_key\";",
                "    let value_invalid = 3.14;",
                "    assert_eq!(compound.serialize_field(key_invalid, &value_invalid).is_err(), true);"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::Number {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = \"invalid_key\";",
                "    let value = 42;",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "    assert_eq!(compound.serialize_field(\"invalid_key\", &42).is_err(), true);",
                "    ",
                "    let key_valid = crate::number::TOKEN;",
                "    let value_valid = 42;",
                "    assert_eq!(compound.serialize_field(key_valid, &value_valid).is_ok(), true);",
                "    ",
                "    let key_invalid = \"another_invalid_key\";",
                "    let value_invalid = 3.14;",
                "    assert_eq!(compound.serialize_field(key_invalid, &value_invalid).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"raw_value\")]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::RawValue {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = \"invalid_key\";",
                "    let value = \"raw_value\";",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "}"
              ],
              "oracle": [
                "    let key: &'static str = crate::raw::TOKEN;",
                "    let value = \"valid_raw_value\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let key: &'static str = crate::number::TOKEN;",
                "    let value = \"invalid_number\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_err());",
                "    ",
                "    let key: &'static str = \"another_invalid_key\";",
                "    let value = \"some_value\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_err());",
                "    ",
                "    let key: &'static str = crate::raw::TOKEN;",
                "    let value = \"another_valid_raw_value\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let key: &'static str = crate::number::TOKEN;",
                "    let value = 42;",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    struct TestFormatter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let mut compound = Compound::RawValue {",
                "        ser: &mut Serializer {",
                "            writer,",
                "            formatter,",
                "        },",
                "    };",
                "    let key: &'static str = \"invalid_key\";",
                "    let value = \"raw_value\";",
                "",
                "    let _ = compound.serialize_field(key, &value);",
                "    let key: &'static str = crate::raw::TOKEN;",
                "    let value = \"valid_raw_value\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let key: &'static str = crate::number::TOKEN;",
                "    let value = \"invalid_number\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_err());",
                "    ",
                "    let key: &'static str = \"another_invalid_key\";",
                "    let value = \"some_value\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_err());",
                "    ",
                "    let key: &'static str = crate::raw::TOKEN;",
                "    let value = \"another_valid_raw_value\";",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let key: &'static str = crate::number::TOKEN;",
                "    let value = 42;",
                "    let result = compound.serialize_field(key, &value);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}