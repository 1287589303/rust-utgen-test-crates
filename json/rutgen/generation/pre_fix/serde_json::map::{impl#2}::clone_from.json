{
  "name": "serde_json::map::{impl#2}::clone_from",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:404:5:406:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a mutable reference to a Map<String, Value>, and source must be a reference to another Map<String, Value> that has been initialized with at least one entry for a non-empty clone; the test input values in `source` must not contain duplicate keys.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map1 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    let mut map2 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    ",
                "    map1.map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map1.map.insert(\"key2\".to_string(), Value::Number(Number::from(3.14)));",
                "",
                "    map2.clone_from(&map1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map2.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    assert_eq!(map2.map.get(\"key2\"), Some(&Value::Number(Number::from(3.14)));",
                "    assert_eq!(map1.map.len(), map2.map.len());",
                "    assert!(map1.map as *const _ != map2.map as *const _);",
                "    assert_eq!(map1.map[\"key1\"], map2.map[\"key1\"]);",
                "    assert_eq!(map1.map[\"key2\"], map2.map[\"key2\"]);"
              ],
              "code": [
                "{",
                "    let mut map1 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    let mut map2 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    ",
                "    map1.map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map1.map.insert(\"key2\".to_string(), Value::Number(Number::from(3.14)));",
                "",
                "    map2.clone_from(&map1);",
                "    assert_eq!(map2.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    assert_eq!(map2.map.get(\"key2\"), Some(&Value::Number(Number::from(3.14)));",
                "    assert_eq!(map1.map.len(), map2.map.len());",
                "    assert!(map1.map as *const _ != map2.map as *const _);",
                "    assert_eq!(map1.map[\"key1\"], map2.map[\"key1\"]);",
                "    assert_eq!(map1.map[\"key2\"], map2.map[\"key2\"]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map1 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    let mut map2 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    ",
                "    map1.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    map1.map.insert(\"key2\".to_string(), Value::Null);",
                "",
                "    map2.map.insert(\"key3\".to_string(), Value::Number(Number::from(42)));",
                "",
                "    map2.clone_from(&map1);",
                "}"
              ],
              "oracle": [
                "    let mut map1 = Map { map: BTreeMap::new() };",
                "    let mut map2 = Map { map: BTreeMap::new() };",
                "    map1.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    map1.map.insert(\"key2\".to_string(), Value::Null);",
                "    map2.map.insert(\"key3\".to_string(), Value::Number(Number::from(42)));",
                "    map2.clone_from(&map1);",
                "    assert_eq!(map2.map.get(\"key1\"), Some(&Value::String(\"value1\".to_string())));",
                "    assert_eq!(map2.map.get(\"key2\"), Some(&Value::Null));",
                "    assert_eq!(map2.map.get(\"key3\"), Some(&Value::Number(Number::from(42))));",
                "    assert_eq!(map2.map.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut map1 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    let mut map2 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    ",
                "    map1.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    map1.map.insert(\"key2\".to_string(), Value::Null);",
                "",
                "    map2.map.insert(\"key3\".to_string(), Value::Number(Number::from(42)));",
                "",
                "    map2.clone_from(&map1);",
                "    let mut map1 = Map { map: BTreeMap::new() };",
                "    let mut map2 = Map { map: BTreeMap::new() };",
                "    map1.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    map1.map.insert(\"key2\".to_string(), Value::Null);",
                "    map2.map.insert(\"key3\".to_string(), Value::Number(Number::from(42)));",
                "    map2.clone_from(&map1);",
                "    assert_eq!(map2.map.get(\"key1\"), Some(&Value::String(\"value1\".to_string())));",
                "    assert_eq!(map2.map.get(\"key2\"), Some(&Value::Null));",
                "    assert_eq!(map2.map.get(\"key3\"), Some(&Value::Number(Number::from(42))));",
                "    assert_eq!(map2.map.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map1 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    let mut map2 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "",
                "    map1.map.insert(\"keyA\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
                "    map1.map.insert(\"keyB\".to_string(), Value::Object(Map { map: BTreeMap::new() }));",
                "",
                "    map2.clone_from(&map1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map2.map.get(\"keyA\"), Some(&Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())])));",
                "    assert_eq!(map2.map.get(\"keyB\"), Some(&Value::Object(Map { map: BTreeMap::new() })));"
              ],
              "code": [
                "{",
                "    let mut map1 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "    let mut map2 = Map { ",
                "        map: BTreeMap::new() ",
                "    };",
                "",
                "    map1.map.insert(\"keyA\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
                "    map1.map.insert(\"keyB\".to_string(), Value::Object(Map { map: BTreeMap::new() }));",
                "",
                "    map2.clone_from(&map1);",
                "    assert_eq!(map2.map.get(\"keyA\"), Some(&Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())])));",
                "    assert_eq!(map2.map.get(\"keyB\"), Some(&Value::Object(Map { map: BTreeMap::new() })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}