{
  "name": "serde_json::value::ser::{impl#9}::serialize_field",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:700:5:706:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: to_value(value) matches core::result::Result::Err(err) at line 704 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "key: empty string or null; value: non-serializable type or trait object relying on an unsupported serialization format.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct NonSerializable;",
                "    ",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"variant\"),",
                "        map: Map::new(),",
                "    };",
                "    ",
                "    let result = variant.serialize_field(\"\", &NonSerializable);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().to_string(), \"Serialization error: NonSerializable type cannot be serialized.\");"
              ],
              "code": [
                "{",
                "    struct NonSerializable;",
                "    ",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"variant\"),",
                "        map: Map::new(),",
                "    };",
                "    ",
                "    let result = variant.serialize_field(\"\", &NonSerializable);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().to_string(), \"Serialization error: NonSerializable type cannot be serialized.\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct NonSerializable;",
                "    ",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"variant\"),",
                "        map: Map::new(),",
                "    };",
                "    ",
                "    let result = variant.serialize_field(std::ptr::null(), &NonSerializable);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().code(), ErrorCode::Serialization);"
              ],
              "code": [
                "{",
                "    struct NonSerializable;",
                "    ",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"variant\"),",
                "        map: Map::new(),",
                "    };",
                "    ",
                "    let result = variant.serialize_field(std::ptr::null(), &NonSerializable);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().code(), ErrorCode::Serialization);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    trait NonSerializableTrait {}",
                "    ",
                "    struct NonSerializableStruct;",
                "    impl NonSerializableTrait for NonSerializableStruct {}",
                "    ",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"variant\"),",
                "        map: Map::new(),",
                "    };",
                "    ",
                "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
                "}"
              ],
              "oracle": [
                "    let mut variant = SerializeStructVariant {",
                "    name: String::from(\"variant\"),",
                "    map: Map::new(),",
                "    };",
                "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    trait NonSerializableTrait {}",
                "    ",
                "    struct NonSerializableStruct;",
                "    impl NonSerializableTrait for NonSerializableStruct {}",
                "    ",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"variant\"),",
                "        map: Map::new(),",
                "    };",
                "    ",
                "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
                "    let mut variant = SerializeStructVariant {",
                "    name: String::from(\"variant\"),",
                "    map: Map::new(),",
                "    };",
                "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: to_value(value) matches core::result::Result::Ok(val) at line 704 is true\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "valid key: non-empty static string; valid value: serializable type (e.g., bool, number, string, array, or object); test when map is empty and when it already contains entries; check bounds with long key length and large value size; ensure failures with non-serializable types return an error or Result::Err\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"boolean_field\", &true).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    assert_eq!(variant.map.len(), 0);",
                "    variant.serialize_field(\"boolean_field\", &true).unwrap();",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert_eq!(variant.map.get(\"boolean_field\"), Some(&Value::Bool(true)));",
                "    assert!(variant.serialize_field(\"integer_field\", &42).is_ok());",
                "    assert_eq!(variant.map.get(\"integer_field\"), Some(&Value::Number(Number::from(42))));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"boolean_field\", &true).unwrap();",
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    assert_eq!(variant.map.len(), 0);",
                "    variant.serialize_field(\"boolean_field\", &true).unwrap();",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert_eq!(variant.map.get(\"boolean_field\"), Some(&Value::Bool(true)));",
                "    assert!(variant.serialize_field(\"integer_field\", &42).is_ok());",
                "    assert_eq!(variant.map.get(\"integer_field\"), Some(&Value::Number(Number::from(42))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"number_field\", &42).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert!(variant.map.contains_key(\"number_field\"));",
                "    assert!(matches!(variant.map.get(\"number_field\"), Some(Value::Number(Number::from(42)))));",
                "    assert_eq!(variant.serialize_field(\"string_field\", &\"Hello\").unwrap(), Ok(()));",
                "    assert_eq!(variant.map.len(), 2);",
                "    assert!(variant.map.contains_key(\"string_field\"));",
                "    assert!(matches!(variant.map.get(\"string_field\"), Some(Value::String(ref s)) if s == \"Hello\"));",
                "    assert_eq!(variant.serialize_field(\"bool_field\", &true).unwrap(), Ok(()));",
                "    assert!(variant.map.contains_key(\"bool_field\"));",
                "    assert!(matches!(variant.map.get(\"bool_field\"), Some(Value::Bool(true))));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"number_field\", &42).unwrap();",
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert!(variant.map.contains_key(\"number_field\"));",
                "    assert!(matches!(variant.map.get(\"number_field\"), Some(Value::Number(Number::from(42)))));",
                "    assert_eq!(variant.serialize_field(\"string_field\", &\"Hello\").unwrap(), Ok(()));",
                "    assert_eq!(variant.map.len(), 2);",
                "    assert!(variant.map.contains_key(\"string_field\"));",
                "    assert!(matches!(variant.map.get(\"string_field\"), Some(Value::String(ref s)) if s == \"Hello\"));",
                "    assert_eq!(variant.serialize_field(\"bool_field\", &true).unwrap(), Ok(()));",
                "    assert!(variant.map.contains_key(\"bool_field\"));",
                "    assert!(matches!(variant.map.get(\"bool_field\"), Some(Value::Bool(true))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"string_field\", &\"test\").unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    let result = variant.serialize_field(\"string_field\", &\"test\");",
                "    assert_eq!(result, Ok(()));",
                "    assert!(variant.map.contains_key(\"string_field\"));",
                "    assert_eq!(variant.map.get(\"string_field\"), Some(&Value::String(String::from(\"test\"))));",
                "    variant.map.clear();",
                "    assert!(variant.map.is_empty());",
                "    variant.serialize_field(\"boolean_field\", &true).unwrap();",
                "    assert!(variant.map.contains_key(\"boolean_field\"));",
                "    assert_eq!(variant.map.get(\"boolean_field\"), Some(&Value::Bool(true)));",
                "    variant.serialize_field(\"number_field\", &12.5).unwrap();",
                "    assert!(variant.map.contains_key(\"number_field\"));",
                "    assert_eq!(variant.map.get(\"number_field\"), Some(&Value::Number(Number::from(12.5))));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"string_field\", &\"test\").unwrap();",
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    let result = variant.serialize_field(\"string_field\", &\"test\");",
                "    assert_eq!(result, Ok(()));",
                "    assert!(variant.map.contains_key(\"string_field\"));",
                "    assert_eq!(variant.map.get(\"string_field\"), Some(&Value::String(String::from(\"test\"))));",
                "    variant.map.clear();",
                "    assert!(variant.map.is_empty());",
                "    variant.serialize_field(\"boolean_field\", &true).unwrap();",
                "    assert!(variant.map.contains_key(\"boolean_field\"));",
                "    assert_eq!(variant.map.get(\"boolean_field\"), Some(&Value::Bool(true)));",
                "    variant.serialize_field(\"number_field\", &12.5).unwrap();",
                "    assert!(variant.map.contains_key(\"number_field\"));",
                "    assert_eq!(variant.map.get(\"number_field\"), Some(&Value::Number(Number::from(12.5))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let array_value = vec![Value::Bool(true), Value::Number(Number::from(3.14))];",
                "    variant.serialize_field(\"array_field\", &array_value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(variant.map.len(), 1);",
                "    assert!(variant.map.contains_key(\"array_field\"));",
                "    assert_eq!(variant.map.get(\"array_field\").unwrap(), &Value::Array(vec![Value::Bool(true), Value::Number(Number::from(3.14))]));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let array_value = vec![Value::Bool(true), Value::Number(Number::from(3.14))];",
                "    variant.serialize_field(\"array_field\", &array_value).unwrap();",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert!(variant.map.contains_key(\"array_field\"));",
                "    assert_eq!(variant.map.get(\"array_field\").unwrap(), &Value::Array(vec![Value::Bool(true), Value::Number(Number::from(3.14))]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let object_map = Map::new();",
                "    variant.serialize_field(\"object_field\", &object_map).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(variant.map.contains_key(\"object_field\"));",
                "    assert_eq!(variant.map.get(\"object_field\").unwrap(), &to_value(object_map).unwrap());",
                "    assert!(variant.serialize_field(\"object_field\", &object_map).is_ok());",
                "    assert_eq!(variant.serialize_field(\"object_field_unexpected\", &object_map).unwrap_err().code(), ErrorCode::UnexpectedField);"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let object_map = Map::new();",
                "    variant.serialize_field(\"object_field\", &object_map).unwrap();",
                "    assert!(variant.map.contains_key(\"object_field\"));",
                "    assert_eq!(variant.map.get(\"object_field\").unwrap(), &to_value(object_map).unwrap());",
                "    assert!(variant.serialize_field(\"object_field\", &object_map).is_ok());",
                "    assert_eq!(variant.serialize_field(\"object_field_unexpected\", &object_map).unwrap_err().code(), ErrorCode::UnexpectedField);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let long_key = \"a\".repeat(100); // 100 character long key",
                "    variant.serialize_field(&long_key, &false).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(variant.map.get(\"a\".repeat(100)), Some(&Value::Bool(false)));",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert!(variant.map.contains_key(\"a\".repeat(100)));",
                "    assert!(!variant.map.is_empty());",
                "    assert_eq!(variant.serialize_field(\"another_key\", &true).unwrap(), ());",
                "    assert_eq!(variant.map.get(\"another_key\"), Some(&Value::Bool(true)));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let long_key = \"a\".repeat(100); // 100 character long key",
                "    variant.serialize_field(&long_key, &false).unwrap();",
                "    assert_eq!(variant.map.get(\"a\".repeat(100)), Some(&Value::Bool(false)));",
                "    assert_eq!(variant.map.len(), 1);",
                "    assert!(variant.map.contains_key(\"a\".repeat(100)));",
                "    assert!(!variant.map.is_empty());",
                "    assert_eq!(variant.serialize_field(\"another_key\", &true).unwrap(), ());",
                "    assert_eq!(variant.map.get(\"another_key\"), Some(&Value::Bool(true)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let large_value = \"x\".repeat(1000); // 1000 character long string",
                "    variant.serialize_field(\"large_value_field\", &large_value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(variant.map.get(\"large_value_field\").is_some(), true);",
                "    assert_eq!(variant.map.get(\"large_value_field\").unwrap(), &Value::String(large_value));",
                "    assert_eq!(variant.serialize_field(\"another_field\", &42).is_ok(), true);",
                "    assert_eq!(variant.map.len(), 2);",
                "    assert!(variant.map.contains_key(\"large_value_field\"));",
                "    assert!(variant.map.contains_key(\"another_field\"));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    let large_value = \"x\".repeat(1000); // 1000 character long string",
                "    variant.serialize_field(\"large_value_field\", &large_value).unwrap();",
                "    assert_eq!(variant.map.get(\"large_value_field\").is_some(), true);",
                "    assert_eq!(variant.map.get(\"large_value_field\").unwrap(), &Value::String(large_value));",
                "    assert_eq!(variant.serialize_field(\"another_field\", &42).is_ok(), true);",
                "    assert_eq!(variant.map.len(), 2);",
                "    assert!(variant.map.contains_key(\"large_value_field\"));",
                "    assert!(variant.map.contains_key(\"another_field\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"initial_field\", &\"initial\").unwrap();",
                "    variant.serialize_field(\"new_field\", &false).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    let result_initial = variant.serialize_field(\"initial_field\", &\"initial\");",
                "    assert_eq!(result_initial, Ok(()));",
                "    assert!(variant.map.contains_key(\"initial_field\"));",
                "    let result_new = variant.serialize_field(\"new_field\", &false);",
                "    assert_eq!(result_new, Ok(()));",
                "    assert!(variant.map.contains_key(\"new_field\"));"
              ],
              "code": [
                "{",
                "    let mut variant = SerializeStructVariant {",
                "        name: String::from(\"test_variant\"),",
                "        map: Map::new(),",
                "    };",
                "    variant.serialize_field(\"initial_field\", &\"initial\").unwrap();",
                "    variant.serialize_field(\"new_field\", &false).unwrap();",
                "    let mut variant = SerializeStructVariant { name: String::from(\"test_variant\"), map: Map::new() };",
                "    let result_initial = variant.serialize_field(\"initial_field\", &\"initial\");",
                "    assert_eq!(result_initial, Ok(()));",
                "    assert!(variant.map.contains_key(\"initial_field\"));",
                "    let result_new = variant.serialize_field(\"new_field\", &false);",
                "    assert_eq!(result_new, Ok(()));",
                "    assert!(variant.map.contains_key(\"new_field\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}