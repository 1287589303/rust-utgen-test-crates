{
  "name": "serde_json::map::{impl#0}::len",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:291:5:293:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: capacity values of 0 to N (including edge cases like 0 and largest defined value), insertion of multiple key-value pairs with unique and duplicate keys, checking len() after each operation, and ensuring correct behavior with both BTreeMap and IndexMap configurations.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map = Map::with_capacity(0);",
                "    let length = map.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let map = Map::with_capacity(0);",
                "    let length = map.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Null);",
                "    let length_after_insertion = map.len();",
                "    ",
                "    map.insert(\"key2\".to_string(), Value::Bool(true));",
                "    let length_after_insertion_two = map.len();",
                "}"
              ],
              "oracle": [
                "    length_after_insertion == 1",
                "    length_after_insertion_two == 2"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Null);",
                "    let length_after_insertion = map.len();",
                "    ",
                "    map.insert(\"key2\".to_string(), Value::Bool(true));",
                "    let length_after_insertion_two = map.len();",
                "    length_after_insertion == 1",
                "    length_after_insertion_two == 2",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Number(Number::from(10)));",
                "    map.insert(\"key1\".to_string(), Value::Number(Number::from(20))); // overwrite",
                "    let length = map.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Number(Number::from(10)));",
                "    map.insert(\"key1\".to_string(), Value::Number(Number::from(20))); // overwrite",
                "    let length = map.len();",
                "    assert_eq!(length, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::with_capacity(1000);",
                "    for i in 0..1000 {",
                "        map.insert(format!(\"key{}\", i), Value::Number(Number::from(i)));",
                "    }",
                "    let length = map.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1000);"
              ],
              "code": [
                "{",
                "    let mut map = Map::with_capacity(1000);",
                "    for i in 0..1000 {",
                "        map.insert(format!(\"key{}\", i), Value::Number(Number::from(i)));",
                "    }",
                "    let length = map.len();",
                "    assert_eq!(length, 1000);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::<String, Value>::new();",
                "    for i in 0..10 {",
                "        map.insert(format!(\"key{}\", i), Value::String(format!(\"value{}\", i)));",
                "        let curr_length = map.len();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    map.insert(\"key0\".to_string(), Value::String(\"value0\".to_string()));",
                "    assert_eq!(map.len(), 1);",
                "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    assert_eq!(map.len(), 2);",
                "    map.insert(\"key2\".to_string(), Value::String(\"value2\".to_string()));",
                "    assert_eq!(map.len(), 3);",
                "    map.insert(\"key3\".to_string(), Value::String(\"value3\".to_string()));",
                "    assert_eq!(map.len(), 4);",
                "    map.insert(\"key4\".to_string(), Value::String(\"value4\".to_string()));",
                "    assert_eq!(map.len(), 5);",
                "    map.insert(\"key5\".to_string(), Value::String(\"value5\".to_string()));",
                "    assert_eq!(map.len(), 6);",
                "    map.insert(\"key6\".to_string(), Value::String(\"value6\".to_string()));",
                "    assert_eq!(map.len(), 7);",
                "    map.insert(\"key7\".to_string(), Value::String(\"value7\".to_string()));",
                "    assert_eq!(map.len(), 8);",
                "    map.insert(\"key8\".to_string(), Value::String(\"value8\".to_string()));",
                "    assert_eq!(map.len(), 9);",
                "    map.insert(\"key9\".to_string(), Value::String(\"value9\".to_string()));",
                "    assert_eq!(map.len(), 10);"
              ],
              "code": [
                "{",
                "    let mut map = Map::<String, Value>::new();",
                "    for i in 0..10 {",
                "        map.insert(format!(\"key{}\", i), Value::String(format!(\"value{}\", i)));",
                "        let curr_length = map.len();",
                "    }",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(\"key0\".to_string(), Value::String(\"value0\".to_string()));",
                "    assert_eq!(map.len(), 1);",
                "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    assert_eq!(map.len(), 2);",
                "    map.insert(\"key2\".to_string(), Value::String(\"value2\".to_string()));",
                "    assert_eq!(map.len(), 3);",
                "    map.insert(\"key3\".to_string(), Value::String(\"value3\".to_string()));",
                "    assert_eq!(map.len(), 4);",
                "    map.insert(\"key4\".to_string(), Value::String(\"value4\".to_string()));",
                "    assert_eq!(map.len(), 5);",
                "    map.insert(\"key5\".to_string(), Value::String(\"value5\".to_string()));",
                "    assert_eq!(map.len(), 6);",
                "    map.insert(\"key6\".to_string(), Value::String(\"value6\".to_string()));",
                "    assert_eq!(map.len(), 7);",
                "    map.insert(\"key7\".to_string(), Value::String(\"value7\".to_string()));",
                "    assert_eq!(map.len(), 8);",
                "    map.insert(\"key8\".to_string(), Value::String(\"value8\".to_string()));",
                "    assert_eq!(map.len(), 9);",
                "    map.insert(\"key9\".to_string(), Value::String(\"value9\".to_string()));",
                "    assert_eq!(map.len(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}