{
  "name": "serde_json::value::ser::{impl#1}::serialize_tuple_variant",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:251:5:262:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(SerializeTupleVariant {\n            name: String::from(variant),\n            vec: Vec::with_capacity(len),\n        })\n"
      ],
      "input_infer": "_name: any valid static string, _variant_index: any non-negative integer, variant: any valid static string, len: 0 to 10^6 (or higher depending on reasonable assumptions about vector size)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let value = result.unwrap();",
                "    assert_eq!(value.name, String::from(\"test_variant\"));",
                "    assert_eq!(value.vec.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
                "    assert!(result.is_ok());",
                "    let value = result.unwrap();",
                "    assert_eq!(value.name, String::from(\"test_variant\"));",
                "    assert_eq!(value.vec.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 1);",
                "}"
              ],
              "oracle": [
                "    let expected = Ok(SerializeTupleVariant { name: String::from(\"test_variant\"), vec: Vec::with_capacity(1) });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 1);",
                "    let expected = Ok(SerializeTupleVariant { name: String::from(\"test_variant\"), vec: Vec::with_capacity(1) });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", 500);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let value = result.unwrap();",
                "    assert_eq!(value.name, String::from(\"test_variant\"));",
                "    assert_eq!(value.vec.capacity(), 500);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", 500);",
                "    assert!(result.is_ok());",
                "    let value = result.unwrap();",
                "    assert_eq!(value.name, String::from(\"test_variant\"));",
                "    assert_eq!(value.vec.capacity(), 500);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 3, \"test_variant\", 1000000);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let expected = SerializeTupleVariant {",
                "    name: String::from(\"test_variant\"),",
                "    vec: Vec::with_capacity(1000000),",
                "    };",
                "    assert_eq!(result.unwrap(), expected);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 3, \"test_variant\", 1000000);",
                "    assert!(result.is_ok());",
                "    let expected = SerializeTupleVariant {",
                "    name: String::from(\"test_variant\"),",
                "    vec: Vec::with_capacity(1000000),",
                "    };",
                "    assert_eq!(result.unwrap(), expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 4, \"test_variant\", usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SerializeTupleVariant { name: String::from(\"test_variant\"), vec: Vec::with_capacity(usize::MAX) }));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 4, \"test_variant\", usize::MAX);",
                "    assert_eq!(result, Ok(SerializeTupleVariant { name: String::from(\"test_variant\"), vec: Vec::with_capacity(usize::MAX) }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}