{
  "name": "serde_json::map::{impl#0}::retain",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:354:5:359:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "- Test with an empty map to verify that `retain` does not affect the map.\n- Test with a map containing several key-value pairs of varying `Value` types (Bool, Number, String, Array, Object) to check if `retain` correctly retains elements based on predicate.\n- Test with a map where all key-value pairs are removed by the predicate to ensure the map is empty afterward.\n- Test with a predicate that only retains pairs with specific keys, ensuring only those pairs remain.\n- Test with 0 and 10,000 elements in the map to evaluate performance and correctness at boundaries.\n- Test with keys containing special characters and keys with varying lengths (including empty string) to validate key handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.retain(|_k, _v| false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(map.keys().next().is_none());",
                "    assert!(map.values().next().is_none());",
                "    assert!(map.values_mut().next().is_none());",
                "    assert!(map.iter().next().is_none());",
                "    assert!(map.iter_mut().next().is_none());"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.retain(|_k, _v| false);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(map.keys().next().is_none());",
                "    assert!(map.values().next().is_none());",
                "    assert!(map.values_mut().next().is_none());",
                "    assert!(map.iter().next().is_none());",
                "    assert!(map.iter_mut().next().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"bool\".to_string(), Value::Bool(true));",
                "    map.insert(\"number\".to_string(), Value::Number(42.0.into()));",
                "    map.insert(\"string\".to_string(), Value::String(\"example\".to_string()));",
                "    map.insert(\"array\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
                "    map.insert(\"object\".to_string(), Value::Object(Map::new()));",
                "",
                "    map.retain(|k, v| {",
                "        if k == \"bool\" {",
                "            true",
                "        } else if let Value::Number(_) = v {",
                "            true",
                "        } else {",
                "            false",
                "        }",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(\"bool\"));",
                "    assert!(map.contains_key(\"number\"));",
                "    assert!(!map.contains_key(\"string\"));",
                "    assert!(!map.contains_key(\"array\"));",
                "    assert!(!map.contains_key(\"object\"));",
                "    assert_eq!(map.get(\"bool\"), Some(&Value::Bool(true)));",
                "    assert_eq!(map.get(\"number\"), Some(&Value::Number(42.0.into())));",
                "    assert_eq!(map.get(\"string\"), None);",
                "    assert_eq!(map.get(\"array\"), None);",
                "    assert_eq!(map.get(\"object\"), None);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"bool\".to_string(), Value::Bool(true));",
                "    map.insert(\"number\".to_string(), Value::Number(42.0.into()));",
                "    map.insert(\"string\".to_string(), Value::String(\"example\".to_string()));",
                "    map.insert(\"array\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
                "    map.insert(\"object\".to_string(), Value::Object(Map::new()));",
                "",
                "    map.retain(|k, v| {",
                "        if k == \"bool\" {",
                "            true",
                "        } else if let Value::Number(_) = v {",
                "            true",
                "        } else {",
                "            false",
                "        }",
                "    });",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(\"bool\"));",
                "    assert!(map.contains_key(\"number\"));",
                "    assert!(!map.contains_key(\"string\"));",
                "    assert!(!map.contains_key(\"array\"));",
                "    assert!(!map.contains_key(\"object\"));",
                "    assert_eq!(map.get(\"bool\"), Some(&Value::Bool(true)));",
                "    assert_eq!(map.get(\"number\"), Some(&Value::Number(42.0.into())));",
                "    assert_eq!(map.get(\"string\"), None);",
                "    assert_eq!(map.get(\"array\"), None);",
                "    assert_eq!(map.get(\"object\"), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"example\".to_string(), Value::Number(1.0.into()));",
                "    map.insert(\"test\".to_string(), Value::String(\"test\".to_string()));",
                "",
                "    map.retain(|_k, _v| false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.get(&\"example\".to_string()), None);",
                "    assert_eq!(map.get(&\"test\".to_string()), None);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"example\".to_string(), Value::Number(1.0.into()));",
                "    map.insert(\"test\".to_string(), Value::String(\"test\".to_string()));",
                "",
                "    map.retain(|_k, _v| false);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.get(&\"example\".to_string()), None);",
                "    assert_eq!(map.get(&\"test\".to_string()), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"keep\".to_string(), Value::Number(1.0.into()));",
                "    map.insert(\"remove\".to_string(), Value::String(\"test\".to_string()));",
                "",
                "    map.retain(|k, _v| k == \"keep\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(\"keep\"), Some(&Value::Number(1.0.into())));",
                "    assert_eq!(map.get(\"remove\"), None);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"keep\".to_string(), Value::Number(1.0.into()));",
                "    map.insert(\"remove\".to_string(), Value::String(\"test\".to_string()));",
                "",
                "    map.retain(|k, _v| k == \"keep\");",
                "    assert_eq!(map.get(\"keep\"), Some(&Value::Number(1.0.into())));",
                "    assert_eq!(map.get(\"remove\"), None);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.is_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::with_capacity(10_000);",
                "    for i in 0..10_000 {",
                "        map.insert(format!(\"key_{}\", i), Value::Number(i.into()));",
                "    }",
                "    map.retain(|k, _v| k.contains('_'));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 10_000);",
                "    for i in 0..10_000 {",
                "    if i % 2 == 0 {",
                "    assert!(map.contains_key(&format!(\"key_{}\", i)));",
                "    } else {",
                "    assert!(!map.contains_key(&format!(\"key_{}\", i)));",
                "    }",
                "    }"
              ],
              "code": [
                "{",
                "    let mut map = Map::with_capacity(10_000);",
                "    for i in 0..10_000 {",
                "        map.insert(format!(\"key_{}\", i), Value::Number(i.into()));",
                "    }",
                "    map.retain(|k, _v| k.contains('_'));",
                "    assert_eq!(map.len(), 10_000);",
                "    for i in 0..10_000 {",
                "    if i % 2 == 0 {",
                "    assert!(map.contains_key(&format!(\"key_{}\", i)));",
                "    } else {",
                "    assert!(!map.contains_key(&format!(\"key_{}\", i)));",
                "    }",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key_with_space\".to_string(), Value::String(\"value1\".to_string()));",
                "    map.insert(\"key$special!@#\".to_string(), Value::String(\"value2\".to_string()));",
                "",
                "    map.retain(|k, _v| k.contains('$'));",
                "}"
              ],
              "oracle": [
                "    let mut map = Map::new();",
                "    map.insert(\"key_with_space\".to_string(), Value::String(\"value1\".to_string()));",
                "    map.insert(\"key$special!@#\".to_string(), Value::String(\"value2\".to_string()));",
                "    assert_eq!(map.len(), 2);",
                "    map.retain(|k, _v| k.contains('$'));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(\"key$special!@#\"), Some(&Value::String(\"value2\".to_string())));",
                "    assert_eq!(map.get(\"key_with_space\"), None);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key_with_space\".to_string(), Value::String(\"value1\".to_string()));",
                "    map.insert(\"key$special!@#\".to_string(), Value::String(\"value2\".to_string()));",
                "",
                "    map.retain(|k, _v| k.contains('$'));",
                "    let mut map = Map::new();",
                "    map.insert(\"key_with_space\".to_string(), Value::String(\"value1\".to_string()));",
                "    map.insert(\"key$special!@#\".to_string(), Value::String(\"value2\".to_string()));",
                "    assert_eq!(map.len(), 2);",
                "    map.retain(|k, _v| k.contains('$'));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(\"key$special!@#\"), Some(&Value::String(\"value2\".to_string())));",
                "    assert_eq!(map.get(\"key_with_space\"), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}