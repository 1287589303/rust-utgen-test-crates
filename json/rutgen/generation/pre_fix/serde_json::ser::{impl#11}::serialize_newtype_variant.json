{
  "name": "serde_json::ser::{impl#11}::serialize_newtype_variant",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1077:5:1088:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "Value of _name: empty string or valid static string; value of _variant_index: 0 or any positive integer; value of _variant: empty string or valid static string; value of _value: any type that implements Serialize, including None or a type that leads to a serialization error (like a complex object without serialization support)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"\", 0, \"\", &\"test value\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"\", 0, \"\", &\"test value\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 1, \"valid_variant\", &42);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 1, \"valid_variant\", &42);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"\", 0, \"valid_variant\", &true);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"\", 0, \"valid_variant\", &true);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 1, \"\", &\"sample\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 1, \"\", &\"sample\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct NoSerialize;",
                "",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 0, \"valid_variant\", &NoSerialize);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), key_must_be_a_string().to_string());"
              ],
              "code": [
                "{",
                "    struct NoSerialize;",
                "",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 0, \"valid_variant\", &NoSerialize);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), key_must_be_a_string().to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 0, \"valid_variant\", &None::<String>);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err(), \"Expected an error but got: {:?}\", result);",
                "    assert_eq!(result.err().unwrap().kind(), ErrorCode::KeyMustBeAString);"
              ],
              "code": [
                "{",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: Vec::new(),",
                "            formatter: CompactFormatter {},",
                "        },",
                "    };",
                "    let result = serializer.serialize_newtype_variant(\"valid_name\", 0, \"valid_variant\", &None::<String>);",
                "    assert!(result.is_err(), \"Expected an error but got: {:?}\", result);",
                "    assert_eq!(result.err().unwrap().kind(), ErrorCode::KeyMustBeAString);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}