{
  "name": "serde_json::ser::to_writer_pretty",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2189:1:2196:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: writer should support io::Write implementation (e.g., File, Vec<u8>), value must be serializable (including valid UTF-8 strings, various data types such as maps with string keys, nested structures), check edge cases with large data sets, empty collections, and invalid structures like maps with non-string keys.\n",
      "answers": [
        {
          "uses": [
            "use std::collections::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = \"Hello, world!\";",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    to_writer_pretty(&mut Vec::new(), &\"Hello, world!\").unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &42).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &vec![1, 2, 3]).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &None::<String>).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &Some(\"Test\")).unwrap();",
                "    let erroneous_data = HashMap::<u32, String>::new();",
                "    let result = to_writer_pretty(&mut Vec::new(), &erroneous_data);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let data = \"Hello, world!\";",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &\"Hello, world!\").unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &42).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &vec![1, 2, 3]).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &None::<String>).unwrap();",
                "    to_writer_pretty(&mut Vec::new(), &Some(\"Test\")).unwrap();",
                "    let erroneous_data = HashMap::<u32, String>::new();",
                "    let result = to_writer_pretty(&mut Vec::new(), &erroneous_data);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = \"\";",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"\\\"\\\"\");",
                "    buffer.clear();",
                "    let data = \"Hello, World!\";",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"\\\"Hello, World!\\\"\");",
                "    buffer.clear();",
                "    let data = vec![1, 2, 3];",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[1,2,3]\");",
                "    buffer.clear();",
                "    let data = serde_json::json!({\"key\": \"value\"});",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"{\\n  \\\"key\\\": \\\"value\\\"\\n}\");"
              ],
              "code": [
                "{",
                "    let data = \"\";",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"\\\"\\\"\");",
                "    buffer.clear();",
                "    let data = \"Hello, World!\";",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"\\\"Hello, World!\\\"\");",
                "    buffer.clear();",
                "    let data = vec![1, 2, 3];",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[1,2,3]\");",
                "    buffer.clear();",
                "    let data = serde_json::json!({\"key\": \"value\"});",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"{\\n  \\\"key\\\": \\\"value\\\"\\n}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = 42;",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"{\\n  \\\"value\\\": 42,\\n}\");",
                "    assert!(to_writer_pretty(&mut buffer, &\"string\").is_ok());",
                "    assert!(to_writer_pretty(&mut buffer, &vec![1, 2, 3]).is_ok());",
                "    assert!(to_writer_pretty(&mut buffer, &HashMap::<String, i32>::from([(\"key\".to_string(), 1)])).is_ok());",
                "    assert!(to_writer_pretty(&mut buffer, &HashMap::<i32, i32>::from([(1, 2)])).is_err());"
              ],
              "code": [
                "{",
                "    let data = 42;",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(buffer, b\"{\\n  \\\"value\\\": 42,\\n}\");",
                "    assert!(to_writer_pretty(&mut buffer, &\"string\").is_ok());",
                "    assert!(to_writer_pretty(&mut buffer, &vec![1, 2, 3]).is_ok());",
                "    assert!(to_writer_pretty(&mut buffer, &HashMap::<String, i32>::from([(\"key\".to_string(), 1)])).is_ok());",
                "    assert!(to_writer_pretty(&mut buffer, &HashMap::<i32, i32>::from([(1, 2)])).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = 3.14;",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"{\\n  \\\"value\\\": 3.14\\n}\");"
              ],
              "code": [
                "{",
                "    let data = 3.14;",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(buffer, b\"{\\n  \\\"value\\\": 3.14\\n}\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = true;",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    let data = true;",
                "    let buffer = Vec::new();",
                "    let result = to_writer_pretty(&mut buffer, &data);",
                "    assert!(result.is_ok());",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"true\");"
              ],
              "code": [
                "{",
                "    let data = true;",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    let data = true;",
                "    let buffer = Vec::new();",
                "    let result = to_writer_pretty(&mut buffer, &data);",
                "    assert!(result.is_ok());",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"true\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: Vec<u8> = vec![];",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"[]\");",
                "    assert!(String::from_utf8_lossy(&buffer).contains(\"[]\"));",
                "    assert!(buffer.is_empty() == false);",
                "    assert!(buffer.len() > 0);"
              ],
              "code": [
                "{",
                "    let data: Vec<u8> = vec![];",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(buffer, b\"[]\");",
                "    assert!(String::from_utf8_lossy(&buffer).contains(\"[]\"));",
                "    assert!(buffer.is_empty() == false);",
                "    assert!(buffer.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = vec![1, 2, 3];",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, expected_output);",
                "    let buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).is_ok();",
                "    assert!(to_writer_pretty(&mut buffer, &data).is_ok());",
                "    let expected_output: Vec<u8> = vec![/* expected byte output for pretty JSON */];"
              ],
              "code": [
                "{",
                "    let data = vec![1, 2, 3];",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(buffer, expected_output);",
                "    let buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).is_ok();",
                "    assert!(to_writer_pretty(&mut buffer, &data).is_ok());",
                "    let expected_output: Vec<u8> = vec![/* expected byte output for pretty JSON */];",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::HashMap;",
                "    let data: HashMap<String, String> = HashMap::new();",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 2);",
                "    assert_eq!(buffer, b\"{}\");",
                "    assert!(String::from_utf8(buffer).is_ok());",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"{}\");"
              ],
              "code": [
                "{",
                "    use std::collections::HashMap;",
                "    let data: HashMap<String, String> = HashMap::new();",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(buffer.len(), 2);",
                "    assert_eq!(buffer, b\"{}\");",
                "    assert!(String::from_utf8(buffer).is_ok());",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"{}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::HashMap;",
                "    let mut data = HashMap::new();",
                "    data.insert(\"key\".to_string(), \"value\".to_string());",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.as_slice(), b\"{\\n  \\\"key\\\": \\\"value\\\"\\n}\");"
              ],
              "code": [
                "{",
                "    use std::collections::HashMap;",
                "    let mut data = HashMap::new();",
                "    data.insert(\"key\".to_string(), \"value\".to_string());",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    assert_eq!(buffer.as_slice(), b\"{\\n  \\\"key\\\": \\\"value\\\"\\n}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    use std::collections::HashMap;",
                "    let mut data: HashMap<i32, String> = HashMap::new();",
                "    data.insert(1, \"value\".to_string());",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    to_writer_pretty(&mut buffer, &data).unwrap(); // Should panic with non-string keys in HashMap",
                "    data.insert(2, \"another value\".to_string()); // Modify data to ensure panic occurs",
                "    to_writer_pretty(&mut buffer, &data).unwrap(); // Should still panic with non-string keys in HashMap",
                "    let empty_data: HashMap<i32, String> = HashMap::new(); // Test with empty HashMap",
                "    to_writer_pretty(&mut buffer, &empty_data).unwrap(); // Should panic with empty data structure",
                "    let valid_data: HashMap<String, String> = HashMap::from([(\"key\".to_string(), \"value\".to_string())]); // Valid map for serialization",
                "    to_writer_pretty(&mut buffer, &valid_data).unwrap(); // Should succeed with valid data structure"
              ],
              "code": [
                "{",
                "    use std::collections::HashMap;",
                "    let mut data: HashMap<i32, String> = HashMap::new();",
                "    data.insert(1, \"value\".to_string());",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    to_writer_pretty(&mut buffer, &data).unwrap(); // Should panic with non-string keys in HashMap",
                "    data.insert(2, \"another value\".to_string()); // Modify data to ensure panic occurs",
                "    to_writer_pretty(&mut buffer, &data).unwrap(); // Should still panic with non-string keys in HashMap",
                "    let empty_data: HashMap<i32, String> = HashMap::new(); // Test with empty HashMap",
                "    to_writer_pretty(&mut buffer, &empty_data).unwrap(); // Should panic with empty data structure",
                "    let valid_data: HashMap<String, String> = HashMap::from([(\"key\".to_string(), \"value\".to_string())]); // Valid map for serialization",
                "    to_writer_pretty(&mut buffer, &valid_data).unwrap(); // Should succeed with valid data structure",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: Vec<u8> = (0..1000).map(|i| i as u8).collect();",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "}"
              ],
              "oracle": [
                "    to_writer_pretty(&mut buffer, &data).unwrap()  // Valid serialization for a Vec<u8> with elements 0 to 999",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 999]\")  // Check if output is as expected",
                "    buffer.clear();  // Clear buffer for next test",
                "    ",
                "    let invalid_data: Vec<Vec<u8>> = vec![vec![1, 2, 3], vec![4, 5, 6]];  // Map with non-string keys",
                "    assert!(to_writer_pretty(&mut buffer, &invalid_data).is_err())  // Expect serialization to fail",
                "    ",
                "    let empty_data: Vec<u8> = Vec::new();  // Edge case: empty Vec<u8>",
                "    to_writer_pretty(&mut buffer, &empty_data).unwrap();  // Expect no error",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[]\")  // Check if output is empty JSON array",
                "    ",
                "    let non_utf8_data: &[u8] = &[0, 159, 146, 150];  // Non-UTF8 byte sequence",
                "    assert!(to_writer_pretty(&mut buffer, &non_utf8_data).is_err())  // Expect serialization to fail",
                "    ",
                "    let single_element: Vec<u8> = vec![42];  // Single element Vec<u8>",
                "    to_writer_pretty(&mut buffer, &single_element).unwrap();  // Expect no error",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[42]\")  // Check output for a single element",
                "    buffer.clear();  // Clear buffer for next test",
                "    ",
                "    let struct_data = MyStruct { field: \"value\" };  // Custom struct that implements Serialize",
                "    to_writer_pretty(&mut buffer, &struct_data).unwrap();  // Expect no error",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"{\\\"field\\\":\\\"value\\\"}\")  // Check expected output for struct"
              ],
              "code": [
                "{",
                "    let data: Vec<u8> = (0..1000).map(|i| i as u8).collect();",
                "    let mut buffer = Vec::new();",
                "    to_writer_pretty(&mut buffer, &data).unwrap();",
                "    to_writer_pretty(&mut buffer, &data).unwrap()  // Valid serialization for a Vec<u8> with elements 0 to 999",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..., 999]\")  // Check if output is as expected",
                "    buffer.clear();  // Clear buffer for next test",
                "    ",
                "    let invalid_data: Vec<Vec<u8>> = vec![vec![1, 2, 3], vec![4, 5, 6]];  // Map with non-string keys",
                "    assert!(to_writer_pretty(&mut buffer, &invalid_data).is_err())  // Expect serialization to fail",
                "    ",
                "    let empty_data: Vec<u8> = Vec::new();  // Edge case: empty Vec<u8>",
                "    to_writer_pretty(&mut buffer, &empty_data).unwrap();  // Expect no error",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[]\")  // Check if output is empty JSON array",
                "    ",
                "    let non_utf8_data: &[u8] = &[0, 159, 146, 150];  // Non-UTF8 byte sequence",
                "    assert!(to_writer_pretty(&mut buffer, &non_utf8_data).is_err())  // Expect serialization to fail",
                "    ",
                "    let single_element: Vec<u8> = vec![42];  // Single element Vec<u8>",
                "    to_writer_pretty(&mut buffer, &single_element).unwrap();  // Expect no error",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[42]\")  // Check output for a single element",
                "    buffer.clear();  // Clear buffer for next test",
                "    ",
                "    let struct_data = MyStruct { field: \"value\" };  // Custom struct that implements Serialize",
                "    to_writer_pretty(&mut buffer, &struct_data).unwrap();  // Expect no error",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"{\\\"field\\\":\\\"value\\\"}\")  // Check expected output for struct",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}