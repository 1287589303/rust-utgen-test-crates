{
  "name": "serde_json::value::ser::{impl#7}::serialize_u64",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:524:5:526:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(itoa::Buffer::new().format(value).to_owned())\n"
      ],
      "input_infer": "value: u64 ranging from 0 to 2^64-1, including edge cases 0 and 2^64-1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 0;",
                "    let _result = serializer.serialize_u64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 0;",
                "    let _result = serializer.serialize_u64(value);",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = u64::MAX; // which is 2^64 - 1",
                "    let _result = serializer.serialize_u64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(u64::MAX).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = u64::MAX; // which is 2^64 - 1",
                "    let _result = serializer.serialize_u64(value);",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(u64::MAX).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 1;",
                "    let _result = serializer.serialize_u64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(1).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 1;",
                "    let _result = serializer.serialize_u64(value);",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(1).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 123456789;",
                "    let _result = serializer.serialize_u64(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 123456789;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_u64(value), expected_result);",
                "    let value: u64 = 0;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_u64(value), expected_result);",
                "    let value: u64 = 18446744073709551615;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_u64(value), expected_result);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 123456789;",
                "    let _result = serializer.serialize_u64(value);",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 123456789;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_u64(value), expected_result);",
                "    let value: u64 = 0;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_u64(value), expected_result);",
                "    let value: u64 = 18446744073709551615;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_u64(value), expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 2_000_000_000;",
                "    let _result = serializer.serialize_u64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: u64 = 2_000_000_000;",
                "    let _result = serializer.serialize_u64(value);",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}