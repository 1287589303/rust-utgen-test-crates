{
  "name": "serde_json::map::{impl#0}::is_empty",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:297:5:299:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Map<K, V> instances with zero elements (empty map) and instances with one or more elements (non-empty map); key types as String and value types as Value; test conditions should include both the state of an empty map and a map with diverse values (e.g., Null, Bool, Number, String, Array, Object).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: Map<String, Value> = Map::new();",
                "    map.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.is_empty(), true);"
              ],
              "code": [
                "{",
                "    let map: Map<String, Value> = Map::new();",
                "    map.is_empty();",
                "    assert_eq!(map.is_empty(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: Map<String, Value> = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Null);",
                "    map.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.is_empty(), true);",
                "    map.insert(\"key1\".to_string(), Value::Null);",
                "    assert_eq!(map.is_empty(), false);"
              ],
              "code": [
                "{",
                "    let mut map: Map<String, Value> = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Null);",
                "    map.is_empty();",
                "    assert_eq!(map.is_empty(), true);",
                "    map.insert(\"key1\".to_string(), Value::Null);",
                "    assert_eq!(map.is_empty(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: Map<String, Value> = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(12.5)));",
                "    let _ = map.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.is_empty(), false);"
              ],
              "code": [
                "{",
                "    let mut map: Map<String, Value> = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(12.5)));",
                "    let _ = map.is_empty();",
                "    assert_eq!(map.is_empty(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: Map<String, Value> = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::String(\"test\".to_string()));",
                "    map.clear();",
                "    map.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.is_empty(), true);"
              ],
              "code": [
                "{",
                "    let mut map: Map<String, Value> = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::String(\"test\".to_string()));",
                "    map.clear();",
                "    map.is_empty();",
                "    assert_eq!(map.is_empty(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}