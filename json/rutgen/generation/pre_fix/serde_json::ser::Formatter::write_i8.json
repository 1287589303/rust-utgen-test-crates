{
  "name": "serde_json::ser::Formatter::write_i8",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1582:5:1589:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid inputs: -128 to 127 (inclusive) for i8 type; invalid inputs: values outside this range, null writer, non-writable writer scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -128;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"-128\");",
                "    writer.output.clear();",
                "    let value: i8 = 0;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    writer.output.clear();",
                "    let value: i8 = 127;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"127\");",
                "    writer.output.clear();",
                "    let value: i8 = -1;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-1\");",
                "    writer.output.clear();",
                "    let value: i8 = -123;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-123\");",
                "    writer.output.clear();",
                "    let value: i8 = 1;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    writer.output.clear();"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -128;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-128\");",
                "    writer.output.clear();",
                "    let value: i8 = 0;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    writer.output.clear();",
                "    let value: i8 = 127;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"127\");",
                "    writer.output.clear();",
                "    let value: i8 = -1;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-1\");",
                "    writer.output.clear();",
                "    let value: i8 = -123;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-123\");",
                "    writer.output.clear();",
                "    let value: i8 = 1;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    writer.output.clear();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 127;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    writer.output == b\"127\"",
                "    writer.output == b\"-128\"",
                "    writer.output == b\"0\"",
                "    writer.output == b\"1\"",
                "    writer.output == b\"-1\"",
                "    writer.output == b\"64\"",
                "    writer.output == b\"-64\"",
                "    writer.output == b\"63\"",
                "    writer.output == b\"-63\"",
                "    writer.output == b\"125\"",
                "    writer.output == b\"-125\"",
                "    writer.output == b\"126\"",
                "    writer.output == b\"-126\"",
                "    writer.output == b\"10\"",
                "    writer.output == b\"-10\""
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 127;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    writer.output == b\"127\"",
                "    writer.output == b\"-128\"",
                "    writer.output == b\"0\"",
                "    writer.output == b\"1\"",
                "    writer.output == b\"-1\"",
                "    writer.output == b\"64\"",
                "    writer.output == b\"-64\"",
                "    writer.output == b\"63\"",
                "    writer.output == b\"-63\"",
                "    writer.output == b\"125\"",
                "    writer.output == b\"-125\"",
                "    writer.output == b\"126\"",
                "    writer.output == b\"-126\"",
                "    writer.output == b\"10\"",
                "    writer.output == b\"-10\"",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -42;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"-42\");",
                "    let value: i8 = 0;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\\0\");",
                "    let value: i8 = 127;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\\0-127\");",
                "    let value: i8 = -128;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\\0-127\\0-128\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -42;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\");",
                "    let value: i8 = 0;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\\0\");",
                "    let value: i8 = 127;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\\0-127\");",
                "    let value: i8 = -128;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-42\\0-127\\0-128\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 42;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"42\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -128;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-128\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 0;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -1;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 127;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"127\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let result = formatter.write_i8(&writer, 42);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 42;",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"42\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -128;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-128\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 0;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -1;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"-1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 127;",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"127\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let result = formatter.write_i8(&writer, 42);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 128; // Out of bounds",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.write_i8(&mut writer, 127).is_ok(), true); // Valid input within bounds",
                "    assert_eq!(writer.output.is_empty(), true); // Output should remain empty after writing 127",
                "    assert!(formatter.write_i8(&mut writer, -128).is_ok()); // Valid negative input",
                "    assert_eq!(writer.output.is_empty(), true); // Output should remain empty after writing -128",
                "    assert_eq!(formatter.write_i8(&mut writer, 0).is_ok(), true); // Valid boundary value",
                "    assert_eq!(writer.output.is_empty(), true); // Output should remain empty after writing 0"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = 128; // Out of bounds",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert_eq!(formatter.write_i8(&mut writer, 127).is_ok(), true); // Valid input within bounds",
                "    assert_eq!(writer.output.is_empty(), true); // Output should remain empty after writing 127",
                "    assert!(formatter.write_i8(&mut writer, -128).is_ok()); // Valid negative input",
                "    assert_eq!(writer.output.is_empty(), true); // Output should remain empty after writing -128",
                "    assert_eq!(formatter.write_i8(&mut writer, 0).is_ok(), true); // Valid boundary value",
                "    assert_eq!(writer.output.is_empty(), true); // Output should remain empty after writing 0",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -129; // Out of bounds",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(formatter.write_i8(&mut writer, -128).is_ok()); // Edge case: minimum value for i8",
                "    assert!(formatter.write_i8(&mut writer, 127).is_ok()); // Edge case: maximum value for i8",
                "    assert_eq!(writer.output, b\"-128\"); // Output for minimum i8",
                "    writer.output.clear();",
                "    formatter.write_i8(&mut writer, 0).unwrap();",
                "    assert_eq!(writer.output, b\"0\"); // Output for zero value",
                "    writer.output.clear();",
                "    formatter.write_i8(&mut writer, 1).unwrap();",
                "    assert_eq!(writer.output, b\"1\"); // Output for positive value",
                "    writer.output.clear();",
                "    formatter.write_i8(&mut writer, -1).unwrap();",
                "    assert_eq!(writer.output, b\"-1\"); // Output for negative value"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: i8 = -129; // Out of bounds",
                "    let formatter = ();",
                "    formatter.write_i8(&mut writer, value).unwrap();",
                "    assert!(formatter.write_i8(&mut writer, -128).is_ok()); // Edge case: minimum value for i8",
                "    assert!(formatter.write_i8(&mut writer, 127).is_ok()); // Edge case: maximum value for i8",
                "    assert_eq!(writer.output, b\"-128\"); // Output for minimum i8",
                "    writer.output.clear();",
                "    formatter.write_i8(&mut writer, 0).unwrap();",
                "    assert_eq!(writer.output, b\"0\"); // Output for zero value",
                "    writer.output.clear();",
                "    formatter.write_i8(&mut writer, 1).unwrap();",
                "    assert_eq!(writer.output, b\"1\"); // Output for positive value",
                "    writer.output.clear();",
                "    formatter.write_i8(&mut writer, -1).unwrap();",
                "    assert_eq!(writer.output, b\"-1\"); // Output for negative value",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}