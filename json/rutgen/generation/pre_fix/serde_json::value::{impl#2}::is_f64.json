{
  "name": "serde_json::value::{impl#2}::is_f64",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:611:5:616:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Value::Number(n) at line 613 is false\n",
        "precondition: self matches _ at line 614 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Value::Null, Value::Bool(true), Value::String(String::from(\"test\")), Value::Array(Vec::new()), Value::Object(Map::new())\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Null;",
                "    value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.is_f64(), false);"
              ],
              "code": [
                "{",
                "    let value = Value::Null;",
                "    value.is_f64();",
                "    assert_eq!(value.is_f64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Bool(true);",
                "    value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert!(!value.is_f64());"
              ],
              "code": [
                "{",
                "    let value = Value::Bool(true);",
                "    value.is_f64();",
                "    assert!(!value.is_f64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::String(String::from(\"test\"));",
                "    value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.is_f64(), false);"
              ],
              "code": [
                "{",
                "    let value = Value::String(String::from(\"test\"));",
                "    value.is_f64();",
                "    assert_eq!(value.is_f64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Array(Vec::new());",
                "    value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value.is_f64(), false);"
              ],
              "code": [
                "{",
                "    let value = Value::Array(Vec::new());",
                "    value.is_f64();",
                "    assert_eq!(value.is_f64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Object(Map { map: MapImpl::new() });",
                "    value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert!(!value.is_f64());"
              ],
              "code": [
                "{",
                "    let value = Value::Object(Map { map: MapImpl::new() });",
                "    value.is_f64();",
                "    assert!(!value.is_f64());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Value::Number(n) at line 612 is true\n",
        "precondition: self matches Value::Number(n) at line 612 is true\n"
      ],
      "input_infer": "self is of type Value::Number with various numeric representations, including integers and floating-point numbers; test inputs should include a mix of valid f64 float values (e.g., 0.0, 1.0, -1.0, std::f64::MAX, std::f64::MIN), valid integers (e.g., 1, 2^31-1, -2^31), edge float values such as NaN and Infinity, as well as the corresponding numeric types checked by `is_i64` and `is_u64` methods.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let float_value = Value::Number(Number::from_f64(0.0).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(1.0).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(-1.0).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(std::f64::MAX).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(std::f64::MIN).unwrap());",
                "    float_value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert!(Value::Number(Number::from_f64(0.0).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(1.0).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(-1.0).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(std::f64::MAX).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(std::f64::MIN).unwrap()).is_f64());"
              ],
              "code": [
                "{",
                "    let float_value = Value::Number(Number::from_f64(0.0).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(1.0).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(-1.0).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(std::f64::MAX).unwrap());",
                "    float_value.is_f64();",
                "",
                "    let float_value = Value::Number(Number::from_f64(std::f64::MIN).unwrap());",
                "    float_value.is_f64();",
                "    assert!(Value::Number(Number::from_f64(0.0).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(1.0).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(-1.0).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(std::f64::MAX).unwrap()).is_f64());",
                "    assert!(Value::Number(Number::from_f64(std::f64::MIN).unwrap()).is_f64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let int_value = Value::Number(Number::from_i128(1).unwrap());",
                "    int_value.is_f64();",
                "",
                "    let int_value = Value::Number(Number::from_i128(2_147_483_647).unwrap());",
                "    int_value.is_f64();",
                "",
                "    let int_value = Value::Number(Number::from_i128(-2_147_483_648).unwrap());",
                "    int_value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert!(Value::Number(Number::from_i128(1).unwrap()).is_f64() == false);",
                "    assert!(Value::Number(Number::from_i128(2_147_483_647).unwrap()).is_f64() == false);",
                "    assert!(Value::Number(Number::from_i128(-2_147_483_648).unwrap()).is_f64() == false);"
              ],
              "code": [
                "{",
                "    let int_value = Value::Number(Number::from_i128(1).unwrap());",
                "    int_value.is_f64();",
                "",
                "    let int_value = Value::Number(Number::from_i128(2_147_483_647).unwrap());",
                "    int_value.is_f64();",
                "",
                "    let int_value = Value::Number(Number::from_i128(-2_147_483_648).unwrap());",
                "    int_value.is_f64();",
                "    assert!(Value::Number(Number::from_i128(1).unwrap()).is_f64() == false);",
                "    assert!(Value::Number(Number::from_i128(2_147_483_647).unwrap()).is_f64() == false);",
                "    assert!(Value::Number(Number::from_i128(-2_147_483_648).unwrap()).is_f64() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nan_value = Value::Number(Number::from_f64(std::f64::NAN).unwrap());",
                "    nan_value.is_f64();",
                "",
                "    let infinity_value = Value::Number(Number::from_f64(std::f64::INFINITY).unwrap());",
                "    infinity_value.is_f64();",
                "",
                "    let neg_infinity_value = Value::Number(Number::from_f64(std::f64::NEG_INFINITY).unwrap());",
                "    neg_infinity_value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert!(nan_value.is_f64() == false);",
                "    assert!(infinity_value.is_f64() == false);",
                "    assert!(neg_infinity_value.is_f64() == false);"
              ],
              "code": [
                "{",
                "    let nan_value = Value::Number(Number::from_f64(std::f64::NAN).unwrap());",
                "    nan_value.is_f64();",
                "",
                "    let infinity_value = Value::Number(Number::from_f64(std::f64::INFINITY).unwrap());",
                "    infinity_value.is_f64();",
                "",
                "    let neg_infinity_value = Value::Number(Number::from_f64(std::f64::NEG_INFINITY).unwrap());",
                "    neg_infinity_value.is_f64();",
                "    assert!(nan_value.is_f64() == false);",
                "    assert!(infinity_value.is_f64() == false);",
                "    assert!(neg_infinity_value.is_f64() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let int_value = Value::Number(Number::from_i64(64).unwrap());",
                "    int_value.is_f64();",
                "",
                "    let negative_int_value = Value::Number(Number::from_i64(-64).unwrap());",
                "    negative_int_value.is_f64();",
                "}"
              ],
              "oracle": [
                "    assert!(Value::Number(Number::from_f64(256.0).unwrap()).is_f64());",
                "    assert!(!Value::Number(Number::from_i64(64).unwrap()).is_f64());",
                "    assert!(!Value::Number(Number::from_i64(-64).unwrap()).is_f64());"
              ],
              "code": [
                "{",
                "    let int_value = Value::Number(Number::from_i64(64).unwrap());",
                "    int_value.is_f64();",
                "",
                "    let negative_int_value = Value::Number(Number::from_i64(-64).unwrap());",
                "    negative_int_value.is_f64();",
                "    assert!(Value::Number(Number::from_f64(256.0).unwrap()).is_f64());",
                "    assert!(!Value::Number(Number::from_i64(64).unwrap()).is_f64());",
                "    assert!(!Value::Number(Number::from_i64(-64).unwrap()).is_f64());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}