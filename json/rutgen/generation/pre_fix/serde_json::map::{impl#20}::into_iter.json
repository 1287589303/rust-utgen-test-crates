{
  "name": "serde_json::map::{impl#20}::into_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:1101:5:1105:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: IntoIter {\n            iter: self.map.into_iter(),\n        }\n"
      ],
      "input_infer": "K: {String}, V: {Value}, map: MapImpl<K, V> with 0 to N elements where N is an arbitrary positive integer, ensuring entries are both ordered and unordered based on the feature flag; V values can include Null, Bool, Number, String, Array, or Object types.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: Map<String, Value> = Map { map: MapImpl::<String, Value>::new() };",
                "    let iter = map.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.iter.len(), 0);"
              ],
              "code": [
                "{",
                "    let map: Map<String, Value> = Map { map: MapImpl::<String, Value>::new() };",
                "    let iter = map.into_iter();",
                "    assert_eq!(iter.iter.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "}"
              ],
              "oracle": [
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Bool(true))));",
                "    assert!(iter.iter.next().is_none());",
                "    assert_eq!(iter.iter.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Bool(true))));",
                "    assert!(iter.iter.next().is_none());",
                "    assert_eq!(iter.iter.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    map_impl.insert(String::from(\"key2\"), Value::Number(Number::from(42)));",
                "    map_impl.insert(String::from(\"key3\"), Value::String(String::from(\"value\")));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "}"
              ],
              "oracle": [
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    map_impl.insert(String::from(\"key2\"), Value::Number(Number::from(42)));",
                "    map_impl.insert(String::from(\"key3\"), Value::String(String::from(\"value\")));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Bool(true))));",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key2\"), Value::Number(Number::from(42)))));",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key3\"), Value::String(String::from(\"value\")))));",
                "    assert_eq!(iter.iter.next(), None);"
              ],
              "code": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    map_impl.insert(String::from(\"key2\"), Value::Number(Number::from(42)));",
                "    map_impl.insert(String::from(\"key3\"), Value::String(String::from(\"value\")));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Bool(true));",
                "    map_impl.insert(String::from(\"key2\"), Value::Number(Number::from(42)));",
                "    map_impl.insert(String::from(\"key3\"), Value::String(String::from(\"value\")));",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Bool(true))));",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key2\"), Value::Number(Number::from(42)))));",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key3\"), Value::String(String::from(\"value\")))));",
                "    assert_eq!(iter.iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Null);",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.iter.len(), 1);",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Null)));"
              ],
              "code": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    map_impl.insert(String::from(\"key1\"), Value::Null);",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert_eq!(iter.iter.len(), 1);",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Null)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    let array_value = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
                "    map_impl.insert(String::from(\"key1\"), array_value);",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(iter.iter.next().is_some());",
                "    assert_eq!(iter.iter.next().unwrap(), (String::from(\"key1\"), Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))])));",
                "    assert!(iter.iter.next().is_none());"
              ],
              "code": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    let array_value = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
                "    map_impl.insert(String::from(\"key1\"), array_value);",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert!(iter.iter.next().is_some());",
                "    assert_eq!(iter.iter.next().unwrap(), (String::from(\"key1\"), Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))])));",
                "    assert!(iter.iter.next().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    let mut nested_map_impl = MapImpl::<String, Value>::new();",
                "    nested_map_impl.insert(String::from(\"nestedKey1\"), Value::Number(Number::from(10)));",
                "    let object_value = Value::Object(Map { map: nested_map_impl });",
                "    map_impl.insert(String::from(\"key1\"), object_value);",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(iter, IntoIter { .. }));",
                "    assert!(iter.iter.is_some());",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Object(Map { map: map_impl }))));",
                "    assert_eq!(iter.iter.count(), 1);"
              ],
              "code": [
                "{",
                "    let mut map_impl = MapImpl::<String, Value>::new();",
                "    let mut nested_map_impl = MapImpl::<String, Value>::new();",
                "    nested_map_impl.insert(String::from(\"nestedKey1\"), Value::Number(Number::from(10)));",
                "    let object_value = Value::Object(Map { map: nested_map_impl });",
                "    map_impl.insert(String::from(\"key1\"), object_value);",
                "    let map = Map { map: map_impl };",
                "    let iter = map.into_iter();",
                "    assert!(matches!(iter, IntoIter { .. }));",
                "    assert!(iter.iter.is_some());",
                "    assert_eq!(iter.iter.next(), Some((String::from(\"key1\"), Value::Object(Map { map: map_impl }))));",
                "    assert_eq!(iter.iter.count(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}