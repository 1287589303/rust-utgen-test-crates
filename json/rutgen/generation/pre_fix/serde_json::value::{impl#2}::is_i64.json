{
  "name": "serde_json::value::{impl#2}::is_i64",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:560:5:565:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Value::Number(n) at line 562 is false\n",
        "precondition: self matches _ at line 563 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "The input conditions or ranges are: Value variants that are not Number (e.g., Value::Null, Value::Bool, Value::String, Value::Array, Value::Object)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Null;",
                "    v.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.is_i64(), false);"
              ],
              "code": [
                "{",
                "    let v = Value::Null;",
                "    v.is_i64();",
                "    assert_eq!(v.is_i64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_i64());"
              ],
              "code": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.is_i64();",
                "    assert!(!v.is_i64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::String(String::from(\"not a number\"));",
                "    v.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_i64());"
              ],
              "code": [
                "{",
                "    let v = Value::String(String::from(\"not a number\"));",
                "    v.is_i64();",
                "    assert!(!v.is_i64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Array(vec![Value::Number(Number::from_i64(10).unwrap()), Value::Number(Number::from_f64(10.5).unwrap())]);",
                "    v.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_i64());"
              ],
              "code": [
                "{",
                "    let v = Value::Array(vec![Value::Number(Number::from_i64(10).unwrap()), Value::Number(Number::from_f64(10.5).unwrap())]);",
                "    v.is_i64();",
                "    assert!(!v.is_i64());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut obj = Map::new();",
                "    obj.insert(String::from(\"key\"), Value::String(String::from(\"value\")));",
                "    let v = Value::Object(obj);",
                "    v.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.is_i64(), false);"
              ],
              "code": [
                "{",
                "    let mut obj = Map::new();",
                "    obj.insert(String::from(\"key\"), Value::String(String::from(\"value\")));",
                "    let v = Value::Object(obj);",
                "    v.is_i64();",
                "    assert_eq!(v.is_i64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Value::Number(n) at line 561 is true\n",
        "precondition: self matches Value::Number(n) at line 561 is true\n"
      ],
      "input_infer": "Value::Number(n) where n is an i64 within the range of i64::MIN (-9223372036854775808) to i64::MAX (9223372036854775807)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number::from_i128(9223372036854775807).unwrap(); // i64::MAX",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(value.is_i64());",
                "    assert!(value.as_i64().is_some());",
                "    assert_eq!(value.as_i64(), Some(9223372036854775807));"
              ],
              "code": [
                "{",
                "    let num = Number::from_i128(9223372036854775807).unwrap(); // i64::MAX",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "    assert!(value.is_i64());",
                "    assert!(value.as_i64().is_some());",
                "    assert_eq!(value.as_i64(), Some(9223372036854775807));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number::from_i128(-9223372036854775808).unwrap(); // i64::MIN",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(value.is_i64());",
                "    let num = Number::from_i128(9223372036854775807).unwrap(); // i64::MAX",
                "    let value = Value::Number(num);",
                "    assert!(value.is_i64());",
                "    let num = Number::from_u128(9223372036854775808).unwrap(); // Greater than i64::MAX",
                "    let value = Value::Number(num);",
                "    assert!(!value.is_i64());",
                "    let num = Number::from_f64(256.0).unwrap(); // Decimal number",
                "    let value = Value::Number(num);",
                "    assert!(!value.is_i64());"
              ],
              "code": [
                "{",
                "    let num = Number::from_i128(-9223372036854775808).unwrap(); // i64::MIN",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "    assert!(value.is_i64());",
                "    let num = Number::from_i128(9223372036854775807).unwrap(); // i64::MAX",
                "    let value = Value::Number(num);",
                "    assert!(value.is_i64());",
                "    let num = Number::from_u128(9223372036854775808).unwrap(); // Greater than i64::MAX",
                "    let value = Value::Number(num);",
                "    assert!(!value.is_i64());",
                "    let num = Number::from_f64(256.0).unwrap(); // Decimal number",
                "    let value = Value::Number(num);",
                "    assert!(!value.is_i64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number::from_i128(123456789).unwrap(); // a valid i64 value",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_i64(), Some(123456789));",
                "    ",
                "    let num = Number::from_i128(i64::MAX as i128).unwrap(); // a valid i64 value",
                "    let value = Value::Number(num);",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_i64(), Some(i64::MAX));",
                "    ",
                "    let num = Number::from_i128(i64::MIN as i128).unwrap(); // a valid i64 value",
                "    let value = Value::Number(num);",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_i64(), Some(i64::MIN));",
                "    ",
                "    let big_num = Number::from_u128(u64::MAX as u128 + 1).unwrap(); // not a valid i64 value",
                "    let value = Value::Number(big_num);",
                "    assert!(!value.is_i64());",
                "    ",
                "    let float_num = Number::from_f64(123456.789).unwrap(); // not a valid i64 value",
                "    let value = Value::Number(float_num);",
                "    assert!(!value.is_i64());",
                "    ",
                "    let null_value = Value::Null; // not a valid i64 value",
                "    assert!(!null_value.is_i64());"
              ],
              "code": [
                "{",
                "    let num = Number::from_i128(123456789).unwrap(); // a valid i64 value",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_i64(), Some(123456789));",
                "    ",
                "    let num = Number::from_i128(i64::MAX as i128).unwrap(); // a valid i64 value",
                "    let value = Value::Number(num);",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_i64(), Some(i64::MAX));",
                "    ",
                "    let num = Number::from_i128(i64::MIN as i128).unwrap(); // a valid i64 value",
                "    let value = Value::Number(num);",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_i64(), Some(i64::MIN));",
                "    ",
                "    let big_num = Number::from_u128(u64::MAX as u128 + 1).unwrap(); // not a valid i64 value",
                "    let value = Value::Number(big_num);",
                "    assert!(!value.is_i64());",
                "    ",
                "    let float_num = Number::from_f64(123456.789).unwrap(); // not a valid i64 value",
                "    let value = Value::Number(float_num);",
                "    assert!(!value.is_i64());",
                "    ",
                "    let null_value = Value::Null; // not a valid i64 value",
                "    assert!(!null_value.is_i64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number::from_i128(-123456789).unwrap(); // a valid negative i64 value",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(value.is_i64());",
                "    assert!(value.as_i64().is_some());",
                "    assert_eq!(value.as_i64(), Some(-123456789));"
              ],
              "code": [
                "{",
                "    let num = Number::from_i128(-123456789).unwrap(); // a valid negative i64 value",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "    assert!(value.is_i64());",
                "    assert!(value.as_i64().is_some());",
                "    assert_eq!(value.as_i64(), Some(-123456789));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number::from_i128(0).unwrap(); // zero is also a valid i64",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "}"
              ],
              "oracle": [
                "    assert!(value.is_i64());",
                "    let num_positive = Number::from_i128(i64::MAX as i128).unwrap();",
                "    let value_positive = Value::Number(num_positive);",
                "    assert!(value_positive.is_i64());",
                "    let num_negative = Number::from_i128(i64::MIN as i128).unwrap();",
                "    let value_negative = Value::Number(num_negative);",
                "    assert!(value_negative.is_i64());",
                "    let num_out_of_bounds = Number::from_u128(i64::MAX as u128 + 1).unwrap();",
                "    let value_out_of_bounds = Value::Number(num_out_of_bounds);",
                "    assert!(!value_out_of_bounds.is_i64());",
                "    let num_float = Number::from_f64(12.5).unwrap();",
                "    let value_float = Value::Number(num_float);",
                "    assert!(!value_float.is_i64());"
              ],
              "code": [
                "{",
                "    let num = Number::from_i128(0).unwrap(); // zero is also a valid i64",
                "    let value = Value::Number(num);",
                "    value.is_i64();",
                "    assert!(value.is_i64());",
                "    let num_positive = Number::from_i128(i64::MAX as i128).unwrap();",
                "    let value_positive = Value::Number(num_positive);",
                "    assert!(value_positive.is_i64());",
                "    let num_negative = Number::from_i128(i64::MIN as i128).unwrap();",
                "    let value_negative = Value::Number(num_negative);",
                "    assert!(value_negative.is_i64());",
                "    let num_out_of_bounds = Number::from_u128(i64::MAX as u128 + 1).unwrap();",
                "    let value_out_of_bounds = Value::Number(num_out_of_bounds);",
                "    assert!(!value_out_of_bounds.is_i64());",
                "    let num_float = Number::from_f64(12.5).unwrap();",
                "    let value_float = Value::Number(num_float);",
                "    assert!(!value_float.is_i64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}