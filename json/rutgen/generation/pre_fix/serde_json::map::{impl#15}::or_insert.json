{
  "name": "serde_json::map::{impl#15}::or_insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:679:5:684:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Entry::Occupied(entry) at line 680 is true\n",
        "expected return value/type: match self {\n            Entry::Vacant(entry) => entry.insert(default),\n            Entry::Occupied(entry) => entry.into_mut(),\n        }\n"
      ],
      "input_infer": "Entry::Occupied(entry) with a mutable reference to Value that corresponds to a pre-existing key, ensuring the map contains at least one key-value pair before calling or_insert\n\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key1\"), Value::Number(serde_json::Number::from(1)));",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key1\").unwrap() });",
                "    let result = entry.or_insert(Value::Number(serde_json::Number::from(2)));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Number(1));",
                "    assert_eq!(map.get(\"key1\").unwrap(), &Value::Number(1));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map[\"key1\"], Value::Number(1));"
              ],
              "code": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key1\"), Value::Number(serde_json::Number::from(1)));",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key1\").unwrap() });",
                "    let result = entry.or_insert(Value::Number(serde_json::Number::from(2)));",
                "    assert_eq!(result, &mut Value::Number(1));",
                "    assert_eq!(map.get(\"key1\").unwrap(), &Value::Number(1));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map[\"key1\"], Value::Number(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key2\"), Value::String(String::from(\"initial\")));",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
                "    let result = entry.or_insert(Value::String(String::from(\"default\")));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::String(String::from(\"initial\")));",
                "    assert_eq!(map.get(\"key2\"), Some(&Value::String(String::from(\"initial\"))));",
                "    assert_eq!(map.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key2\"), Value::String(String::from(\"initial\")));",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
                "    let result = entry.or_insert(Value::String(String::from(\"default\")));",
                "    assert_eq!(result, &mut Value::String(String::from(\"initial\")));",
                "    assert_eq!(map.get(\"key2\"), Some(&Value::String(String::from(\"initial\"))));",
                "    assert_eq!(map.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key3\"), Value::Bool(false));",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key3\").unwrap() });",
                "    let result = entry.or_insert(Value::Bool(true));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Bool(false));",
                "    assert_eq!(map[\"key3\"], Value::Bool(false));",
                "    assert!(map.contains_key(\"key3\"));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(entry.key(), \"key3\");"
              ],
              "code": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key3\"), Value::Bool(false));",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key3\").unwrap() });",
                "    let result = entry.or_insert(Value::Bool(true));",
                "    assert_eq!(result, &mut Value::Bool(false));",
                "    assert_eq!(map[\"key3\"], Value::Bool(false));",
                "    assert!(map.contains_key(\"key3\"));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(entry.key(), \"key3\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key4\"), Value::Null);",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key4\").unwrap() });",
                "    let result = entry.or_insert(Value::Null);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(map.get(\"key4\").unwrap(), &Value::Null);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(\"key4\"));"
              ],
              "code": [
                "{",
                "    let mut map = serde_json::Map::new();",
                "    map.insert(String::from(\"key4\"), Value::Null);",
                "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key4\").unwrap() });",
                "    let result = entry.or_insert(Value::Null);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(map.get(\"key4\").unwrap(), &Value::Null);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(\"key4\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Entry::Vacant(entry) at line 680 is true\n",
        "precondition: self matches Entry::Vacant(entry) at line 680 is true\n",
        "expected return value/type: match self {\n            Entry::Vacant(entry) => entry.insert(default),\n            Entry::Occupied(entry) => entry.into_mut(),\n        }\n"
      ],
      "input_infer": "self is Entry::Vacant with a defined key of type String and a default Value being any of Value::Null, Value::Bool(bool), Value::Number(Number), Value::String(String), Value::Array(Vec<Value>), or Value::Object(Map<String, Value>)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key1\");",
                "    let default_value = Value::Null;",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert_eq!(result, &Value::Null);",
                "    assert_eq!(map.get(&key), Some(&Value::Null));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(&key));",
                "    assert!(matches!(map.entry(key.clone()), Entry::Occupied(_)));",
                "    assert_eq!(map.entry(key.clone()).or_insert(Value::Bool(true)), &mut Value::Null);"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key1\");",
                "    let default_value = Value::Null;",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert_eq!(result, &Value::Null);",
                "    assert_eq!(map.get(&key), Some(&Value::Null));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(&key));",
                "    assert!(matches!(map.entry(key.clone()), Entry::Occupied(_)));",
                "    assert_eq!(map.entry(key.clone()).or_insert(Value::Bool(true)), &mut Value::Null);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key2\");",
                "    let default_value = Value::Bool(true);",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Bool(true));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key), Some(&Value::Bool(true)));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(matches!(map.entry(key), Entry::Occupied(_)));",
                "    assert!(matches!(map.entry(\"key2\"), Entry::Occupied(_)));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key2\");",
                "    let default_value = Value::Bool(true);",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::Bool(true));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key), Some(&Value::Bool(true)));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(matches!(map.entry(key), Entry::Occupied(_)));",
                "    assert!(matches!(map.entry(\"key2\"), Entry::Occupied(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key3\");",
                "    let default_value = Value::Number(Number::from(42)); ",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "}"
              ],
              "oracle": [
                "    let key = String::from(\"key3\");",
                "    let default_value = Value::Number(Number::from(42));",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::Number(Number::from(42)));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map[key], Value::Number(Number::from(42)));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key3\");",
                "    let default_value = Value::Number(Number::from(42)); ",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "    let key = String::from(\"key3\");",
                "    let default_value = Value::Number(Number::from(42));",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::Number(Number::from(42)));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map[key], Value::Number(Number::from(42)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key4\");",
                "    let default_value = Value::String(String::from(\"example\"));",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "}"
              ],
              "oracle": [
                "    let key = String::from(\"key4\");",
                "    let default_value = Value::String(String::from(\"example\"));",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    let result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::String(String::from(\"example\")));",
                "    assert_eq!(map.get(&key), Some(&Value::String(String::from(\"example\"))));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key4\");",
                "    let default_value = Value::String(String::from(\"example\"));",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "    let key = String::from(\"key4\");",
                "    let default_value = Value::String(String::from(\"example\"));",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    let result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::String(String::from(\"example\")));",
                "    assert_eq!(map.get(&key), Some(&Value::String(String::from(\"example\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key5\");",
                "    let default_value = Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]);",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key), Some(&Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))])));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map[key].key(), &key);",
                "    assert_eq!(result.key(), &key);",
                "    assert!(result == &mut map[key]);",
                "    assert!(map.entry(key.clone()).or_insert(Value::Null) == &mut Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key5\");",
                "    let default_value = Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]);",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key), Some(&Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))])));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map[key].key(), &key);",
                "    assert_eq!(result.key(), &key);",
                "    assert!(result == &mut map[key]);",
                "    assert!(map.entry(key.clone()).or_insert(Value::Null) == &mut Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key6\");",
                "    let mut object_value = MapImpl::new();",
                "    object_value.insert(String::from(\"inner_key\"), Value::String(String::from(\"inner_value\")));",
                "    let default_value = Value::Object(object_value);",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Object(object_value));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key).unwrap(), &Value::Object(object_value));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key6\");",
                "    let mut object_value = MapImpl::new();",
                "    object_value.insert(String::from(\"inner_key\"), Value::String(String::from(\"inner_value\")));",
                "    let default_value = Value::Object(object_value);",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let entry = map.entry(key.clone());",
                "    let mut result = entry.or_insert(default_value);",
                "    assert_eq!(result, &mut Value::Object(object_value));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key).unwrap(), &Value::Object(object_value));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}