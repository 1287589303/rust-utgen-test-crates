{
  "name": "serde_json::ser::Formatter::end_object",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1887:5:1892:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: Any writable type implementing io::Write, valid input for the writer such as a mutable buffer or file handle, and ensure the writer is not in an error state before calling end_object.\n",
      "answers": [
        {
          "uses": [
            "use std::fs::File;",
            "use std::io::Write;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buffer: Vec<u8> = Vec::new();",
                "    let mut formatter = TestFormatter;",
                "    formatter.end_object(&mut buffer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"}\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buffer: Vec<u8> = Vec::new();",
                "    let mut formatter = TestFormatter;",
                "    formatter.end_object(&mut buffer).unwrap();",
                "    assert_eq!(buffer, b\"}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buffer = String::new();",
                "    let mut formatter = TestFormatter;",
                "    formatter.end_object(&mut buffer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, \"}\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buffer = String::new();",
                "    let mut formatter = TestFormatter;",
                "    formatter.end_object(&mut buffer).unwrap();",
                "    assert_eq!(buffer, \"}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    use std::fs::File;",
                "    use std::io::Write;",
                "",
                "    let mut file = File::create(\"test_output.txt\").unwrap();",
                "    let mut formatter = TestFormatter;",
                "    formatter.end_object(&mut file).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(std::fs::read_to_string(\"test_output.txt\").unwrap() == \"}\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    use std::fs::File;",
                "    use std::io::Write;",
                "",
                "    let mut file = File::create(\"test_output.txt\").unwrap();",
                "    let mut formatter = TestFormatter;",
                "    formatter.end_object(&mut file).unwrap();",
                "    assert!(std::fs::read_to_string(\"test_output.txt\").unwrap() == \"}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}