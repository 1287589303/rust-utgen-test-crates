{
  "name": "serde_json::ser::to_string_pretty",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2256:1:2266:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: to_vec_pretty(value) matches core::result::Result::Err(err) at line 2260 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "Test input conditions or ranges: Test with a non-serializable type, a struct with non-string map keys, and verify with empty or malformed JSON inputs.\n",
      "answers": [
        {
          "uses": [
            "use serde::ser::Serialize;",
            "use std::collections::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct NonSerializable;",
                "    let value = NonSerializable;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serde_json::to_string_pretty(&NonSerializable), Err(Error::custom(\"Serialization failed\")));"
              ],
              "code": [
                "{",
                "    struct NonSerializable;",
                "    let value = NonSerializable;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert_eq!(serde_json::to_string_pretty(&NonSerializable), Err(Error::custom(\"Serialization failed\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use serde::ser::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    struct MyStruct {",
                "        map: HashMap<i32, String>,",
                "    }",
                "",
                "    let mut map = HashMap::new();",
                "    map.insert(1, \"value\".to_string());",
                "    let value = MyStruct { map };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().code(), ErrorCode::SerializationFailed);"
              ],
              "code": [
                "{",
                "    use serde::ser::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    struct MyStruct {",
                "        map: HashMap<i32, String>,",
                "    }",
                "",
                "    let mut map = HashMap::new();",
                "    map.insert(1, \"value\".to_string());",
                "    let value = MyStruct { map };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().code(), ErrorCode::SerializationFailed);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Option<String> = None;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().code(), ErrorCode::Serialization);"
              ],
              "code": [
                "{",
                "    let value: Option<String> = None;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().code(), ErrorCode::Serialization);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let malformed_str = \"Invalid JSON\";",
                "    let _result = serde_json::to_string_pretty(&malformed_str);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_err(), true);",
                "    assert!(matches!(_result, Err(_)));"
              ],
              "code": [
                "{",
                "    let malformed_str = \"Invalid JSON\";",
                "    let _result = serde_json::to_string_pretty(&malformed_str);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert!(matches!(_result, Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: to_vec_pretty(value) matches core::result::Result::Ok(val) at line 2260 is true\n",
        "expected return value/type: Ok(string)\n"
      ],
      "input_infer": "Input values should be valid data structures that implement the Serialize trait, including edge cases like empty data structures, serialization of nested structures, and large structures to test performance limits; ensure to include cases with valid non-string keys in maps and verify invalid scenarios that might cause serialization to fail (e.g., non-serializable types).\n",
      "answers": [
        {
          "uses": [
            "use serde::Serialize;",
            "use std::collections::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct EmptyStruct;",
                "",
                "    let value = EmptyStruct;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serde_json::to_string_pretty(&EmptyStruct), Ok(String::from(\"{}\")))"
              ],
              "code": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct EmptyStruct;",
                "",
                "    let value = EmptyStruct;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert_eq!(serde_json::to_string_pretty(&EmptyStruct), Ok(String::from(\"{}\")))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct SimpleStruct {",
                "        field1: String,",
                "        field2: u32,",
                "    }",
                "",
                "    let value = SimpleStruct {",
                "        field1: String::from(\"test\"),",
                "        field2: 42,",
                "    };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_ok());",
                "    let result_value = _result.unwrap();",
                "    assert_eq!(result_value, r#\"{ \"field1\": \"test\", \"field2\": 42 }\"#);"
              ],
              "code": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct SimpleStruct {",
                "        field1: String,",
                "        field2: u32,",
                "    }",
                "",
                "    let value = SimpleStruct {",
                "        field1: String::from(\"test\"),",
                "        field2: 42,",
                "    };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert!(_result.is_ok());",
                "    let result_value = _result.unwrap();",
                "    assert_eq!(result_value, r#\"{ \"field1\": \"test\", \"field2\": 42 }\"#);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct NestedStruct {",
                "        name: String,",
                "        age: u32,",
                "    }",
                "",
                "    #[derive(serde::Serialize)]",
                "    struct ParentStruct {",
                "        child: NestedStruct,",
                "    }",
                "",
                "    let value = ParentStruct {",
                "        child: NestedStruct {",
                "            name: String::from(\"child\"),",
                "            age: 5,",
                "        },",
                "    };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(r#\"{ \"child\": { \"name\": \"child\", \"age\": 5 } }\"#));"
              ],
              "code": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct NestedStruct {",
                "        name: String,",
                "        age: u32,",
                "    }",
                "",
                "    #[derive(serde::Serialize)]",
                "    struct ParentStruct {",
                "        child: NestedStruct,",
                "    }",
                "",
                "    let value = ParentStruct {",
                "        child: NestedStruct {",
                "            name: String::from(\"child\"),",
                "            age: 5,",
                "        },",
                "    };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert_eq!(_result, Ok(r#\"{ \"child\": { \"name\": \"child\", \"age\": 5 } }\"#));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use serde::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    let value: HashMap<String, String> = HashMap::new();",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    let value: HashMap<String, String> = HashMap::new();",
                "    let result = serde_json::to_string_pretty(&value);",
                "    assert_eq!(result, Ok(String::from(\"{}\")));"
              ],
              "code": [
                "{",
                "    use serde::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    let value: HashMap<String, String> = HashMap::new();",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    let value: HashMap<String, String> = HashMap::new();",
                "    let result = serde_json::to_string_pretty(&value);",
                "    assert_eq!(result, Ok(String::from(\"{}\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use serde::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    let mut value = HashMap::new();",
                "    value.insert(String::from(\"key1\"), String::from(\"value1\"));",
                "    value.insert(String::from(\"key2\"), String::from(\"value2\"));",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_ok());",
                "    assert_eq!(_result.unwrap(), r#\"{ \"key1\": \"value1\", \"key2\": \"value2\" }\"#);",
                "    assert!(_result.unwrap().contains(\"key1\"));",
                "    assert!(_result.unwrap().contains(\"value1\"));",
                "    assert!(_result.unwrap().contains(\"key2\"));",
                "    assert!(_result.unwrap().contains(\"value2\"));"
              ],
              "code": [
                "{",
                "    use serde::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    let mut value = HashMap::new();",
                "    value.insert(String::from(\"key1\"), String::from(\"value1\"));",
                "    value.insert(String::from(\"key2\"), String::from(\"value2\"));",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert!(_result.is_ok());",
                "    assert_eq!(_result.unwrap(), r#\"{ \"key1\": \"value1\", \"key2\": \"value2\" }\"#);",
                "    assert!(_result.unwrap().contains(\"key1\"));",
                "    assert!(_result.unwrap().contains(\"value1\"));",
                "    assert!(_result.unwrap().contains(\"key2\"));",
                "    assert!(_result.unwrap().contains(\"value2\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct LargeStruct {",
                "        data: Vec<u32>,",
                "    }",
                "",
                "    let value = LargeStruct {",
                "        data: (0..1000).collect(),",
                "    };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(matches!(_result, Ok(_)));",
                "    assert!(matches!(_result.unwrap(), String(_)));",
                "    assert!(!_result.unwrap().is_empty());",
                "    assert_eq!(_result.unwrap().lines().count() > 1, true);",
                "    assert_eq!(_result.unwrap().contains(\"\\n\"), true);"
              ],
              "code": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct LargeStruct {",
                "        data: Vec<u32>,",
                "    }",
                "",
                "    let value = LargeStruct {",
                "        data: (0..1000).collect(),",
                "    };",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(matches!(_result, Ok(_)));",
                "    assert!(matches!(_result.unwrap(), String(_)));",
                "    assert!(!_result.unwrap().is_empty());",
                "    assert_eq!(_result.unwrap().lines().count() > 1, true);",
                "    assert_eq!(_result.unwrap().contains(\"\\n\"), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct NonSerializable;",
                "",
                "    let value = NonSerializable;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(serde_json::to_string_pretty(&NonSerializable).is_err());"
              ],
              "code": [
                "{",
                "    struct NonSerializable;",
                "",
                "    let value = NonSerializable;",
                "    let _result = serde_json::to_string_pretty(&value);",
                "    assert!(serde_json::to_string_pretty(&NonSerializable).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}