{
  "name": "serde_json::value::ser::{impl#1}::serialize_i16",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:83:5:85:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "- Input value for `serialize_i16` should be within the range of -32,768 to 32,767 (inclusive), including edge cases -32,768 and 32,767 for boundary testing and also test with a zero value (0) and a negative value (-1) as edge scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(-32_768);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.unwrap(), Value::Number((-32_768i64).into()));",
                "    result = serializer.serialize_i16(0);",
                "    assert_eq!(result.unwrap(), Value::Number(0.into()));",
                "    result = serializer.serialize_i16(32_767);",
                "    assert_eq!(result.unwrap(), Value::Number(32_767i64.into()));",
                "    result = serializer.serialize_i16(1);",
                "    assert_eq!(result.unwrap(), Value::Number(1.into()));",
                "    result = serializer.serialize_i16(-1);",
                "    assert_eq!(result.unwrap(), Value::Number((-1i64).into()));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(-32_768);",
                "    assert_eq!(result.unwrap(), Value::Number((-32_768i64).into()));",
                "    result = serializer.serialize_i16(0);",
                "    assert_eq!(result.unwrap(), Value::Number(0.into()));",
                "    result = serializer.serialize_i16(32_767);",
                "    assert_eq!(result.unwrap(), Value::Number(32_767i64.into()));",
                "    result = serializer.serialize_i16(1);",
                "    assert_eq!(result.unwrap(), Value::Number(1.into()));",
                "    result = serializer.serialize_i16(-1);",
                "    assert_eq!(result.unwrap(), Value::Number((-1i64).into()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.unwrap(), Value::Number((-1i16 as i64).into()));",
                "    assert!(result.is_ok());",
                "    let result_zero = serializer.serialize_i16(0);",
                "    assert_eq!(result_zero.unwrap(), Value::Number(0i64.into()));",
                "    assert!(result_zero.is_ok());",
                "    let result_positive = serializer.serialize_i16(1);",
                "    assert_eq!(result_positive.unwrap(), Value::Number(1i64.into()));",
                "    assert!(result_positive.is_ok());",
                "    let result_max = serializer.serialize_i16(i16::MAX);",
                "    assert_eq!(result_max.unwrap(), Value::Number(i16::MAX as i64.into()));",
                "    assert!(result_max.is_ok());",
                "    let result_min = serializer.serialize_i16(i16::MIN);",
                "    assert_eq!(result_min.unwrap(), Value::Number(i16::MIN as i64.into()));",
                "    assert!(result_min.is_ok());"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result.unwrap(), Value::Number((-1i16 as i64).into()));",
                "    assert!(result.is_ok());",
                "    let result_zero = serializer.serialize_i16(0);",
                "    assert_eq!(result_zero.unwrap(), Value::Number(0i64.into()));",
                "    assert!(result_zero.is_ok());",
                "    let result_positive = serializer.serialize_i16(1);",
                "    assert_eq!(result_positive.unwrap(), Value::Number(1i64.into()));",
                "    assert!(result_positive.is_ok());",
                "    let result_max = serializer.serialize_i16(i16::MAX);",
                "    assert_eq!(result_max.unwrap(), Value::Number(i16::MAX as i64.into()));",
                "    assert!(result_max.is_ok());",
                "    let result_min = serializer.serialize_i16(i16::MIN);",
                "    assert_eq!(result_min.unwrap(), Value::Number(i16::MIN as i64.into()));",
                "    assert!(result_min.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(0.into()));",
                "    ",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(i16::MIN.into()));",
                "    ",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(i16::MAX.into()));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(0.into()));",
                "    ",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(i16::MIN.into()));",
                "    ",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(i16::MAX.into()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(1);",
                "}"
              ],
              "oracle": [
                "    let expected_result = Value::Number(1.into());",
                "    assert_eq!(result, Ok(expected_result));",
                "    let result_neg = serializer.serialize_i16(-1);",
                "    let expected_result_neg = Value::Number((-1i64).into());",
                "    assert_eq!(result_neg, Ok(expected_result_neg));",
                "    let result_min = serializer.serialize_i16(i16::MIN);",
                "    let expected_result_min = Value::Number((i16::MIN as i64).into());",
                "    assert_eq!(result_min, Ok(expected_result_min));",
                "    let result_max = serializer.serialize_i16(i16::MAX);",
                "    let expected_result_max = Value::Number((i16::MAX as i64).into());",
                "    assert_eq!(result_max, Ok(expected_result_max));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(1);",
                "    let expected_result = Value::Number(1.into());",
                "    assert_eq!(result, Ok(expected_result));",
                "    let result_neg = serializer.serialize_i16(-1);",
                "    let expected_result_neg = Value::Number((-1i64).into());",
                "    assert_eq!(result_neg, Ok(expected_result_neg));",
                "    let result_min = serializer.serialize_i16(i16::MIN);",
                "    let expected_result_min = Value::Number((i16::MIN as i64).into());",
                "    assert_eq!(result_min, Ok(expected_result_min));",
                "    let result_max = serializer.serialize_i16(i16::MAX);",
                "    let expected_result_max = Value::Number((i16::MAX as i64).into());",
                "    assert_eq!(result_max, Ok(expected_result_max));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(32_767);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(32_767.into()));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i16(32_767);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(32_767.into()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}