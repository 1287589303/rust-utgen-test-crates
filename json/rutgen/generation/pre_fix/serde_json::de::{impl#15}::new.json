{
  "name": "serde_json::de::{impl#15}::new",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": false,
  "loc": "src/de.rs:2093:5:2095:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: UnitVariantAccess { de }\n"
      ],
      "input_infer": "R: mutable reference to Deserializer type with valid read input and properly initialized Vec<u8>, depth <= 255, and without #[cfg] features causing a mismatch.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deserializer = Deserializer {",
                "        read: Vec::<u8>::new(), // or any type implementing R",
                "        scratch: Vec::new(),",
                "        remaining_depth: 255,",
                "        #[cfg(feature = \"float_roundtrip\")]",
                "        single_precision: false, // or true, depending on your context",
                "        #[cfg(feature = \"unbounded_depth\")]",
                "        disable_recursion_limit: false,",
                "    };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "}"
              ],
              "oracle": [
                "    let mut deserializer = Deserializer { read: Vec::<u8>::new(), scratch: Vec::new(), remaining_depth: 255 };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "    assert!(std::ptr::eq(unit_variant_access.de, &mut deserializer));",
                "    assert_eq!(unit_variant_access.de.remaining_depth, 255);",
                "    assert_eq!(unit_variant_access.de.scratch.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut deserializer = Deserializer {",
                "        read: Vec::<u8>::new(), // or any type implementing R",
                "        scratch: Vec::new(),",
                "        remaining_depth: 255,",
                "        #[cfg(feature = \"float_roundtrip\")]",
                "        single_precision: false, // or true, depending on your context",
                "        #[cfg(feature = \"unbounded_depth\")]",
                "        disable_recursion_limit: false,",
                "    };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "    let mut deserializer = Deserializer { read: Vec::<u8>::new(), scratch: Vec::new(), remaining_depth: 255 };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "    assert!(std::ptr::eq(unit_variant_access.de, &mut deserializer));",
                "    assert_eq!(unit_variant_access.de.remaining_depth, 255);",
                "    assert_eq!(unit_variant_access.de.scratch.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deserializer = Deserializer {",
                "        read: Vec::<u8>::new(), // empty read",
                "        scratch: Vec::new(),",
                "        remaining_depth: 10,",
                "        #[cfg(feature = \"float_roundtrip\")]",
                "        single_precision: false,",
                "        #[cfg(feature = \"unbounded_depth\")]",
                "        disable_recursion_limit: false,",
                "    };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit_variant_access.de, &mut deserializer);"
              ],
              "code": [
                "{",
                "    let mut deserializer = Deserializer {",
                "        read: Vec::<u8>::new(), // empty read",
                "        scratch: Vec::new(),",
                "        remaining_depth: 10,",
                "        #[cfg(feature = \"float_roundtrip\")]",
                "        single_precision: false,",
                "        #[cfg(feature = \"unbounded_depth\")]",
                "        disable_recursion_limit: false,",
                "    };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "    assert_eq!(unit_variant_access.de, &mut deserializer);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deserializer = Deserializer {",
                "        read: Vec::<u8>::new(),",
                "        scratch: Vec::new(),",
                "        remaining_depth: 255,",
                "        #[cfg(feature = \"float_roundtrip\")]",
                "        single_precision: false,",
                "        #[cfg(feature = \"unbounded_depth\")]",
                "        disable_recursion_limit: false,",
                "    };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "}"
              ],
              "oracle": [
                "    assert!(unit_variant_access.de as *const _ == &mut deserializer as *mut _);"
              ],
              "code": [
                "{",
                "    let mut deserializer = Deserializer {",
                "        read: Vec::<u8>::new(),",
                "        scratch: Vec::new(),",
                "        remaining_depth: 255,",
                "        #[cfg(feature = \"float_roundtrip\")]",
                "        single_precision: false,",
                "        #[cfg(feature = \"unbounded_depth\")]",
                "        disable_recursion_limit: false,",
                "    };",
                "    let unit_variant_access = UnitVariantAccess::new(&mut deserializer);",
                "    assert!(unit_variant_access.de as *const _ == &mut deserializer as *mut _);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}