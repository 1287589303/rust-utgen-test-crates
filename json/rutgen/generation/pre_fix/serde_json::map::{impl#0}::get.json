{
  "name": "serde_json::map::{impl#0}::get",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:73:5:79:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "key is a reference to a borrowed String, key matches existing keys in the map, key does not match any existing keys in the map, key is of types that are Ord, Eq, and Hash, key is an empty string, key is a non-empty string with characters or symbols, multiple keys of varying lengths and formats; capacity set to 0 or more in map initialization.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    let result = map.get(&\"key1\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(&Value::String(\"value1\".to_string())));"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    let result = map.get(&\"key1\");",
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(&Value::String(\"value1\".to_string())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key2\".to_string(), Value::String(\"value2\".to_string()));",
                "    let result = map.get(&\"key3\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key2\".to_string(), Value::String(\"value2\".to_string()));",
                "    let result = map.get(&\"key3\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"\".to_string(), Value::String(\"empty_value\".to_string()));",
                "    let result = map.get(&\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&Value::String(\"empty_value\".to_string())));"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"\".to_string(), Value::String(\"empty_value\".to_string()));",
                "    let result = map.get(&\"\");",
                "    assert_eq!(result, Some(&Value::String(\"empty_value\".to_string())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key_with_symbols!\".to_string(), Value::String(\"value_with_symbols\".to_string()));",
                "    let result = map.get(&\"key_with_symbols!\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&Value::String(\"value_with_symbols\".to_string())));"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key_with_symbols!\".to_string(), Value::String(\"value_with_symbols\".to_string()));",
                "    let result = map.get(&\"key_with_symbols!\");",
                "    assert_eq!(result, Some(&Value::String(\"value_with_symbols\".to_string())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::with_capacity(1);",
                "    map.insert(\"key4\".to_string(), Value::Bool(true));",
                "    let result = map.get(&\"key4\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&Value::Bool(true)));"
              ],
              "code": [
                "{",
                "    let mut map = Map::with_capacity(1);",
                "    map.insert(\"key4\".to_string(), Value::Bool(true));",
                "    let result = map.get(&\"key4\");",
                "    assert_eq!(result, Some(&Value::Bool(true)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"short\".to_string(), Value::String(\"short_value\".to_string()));",
                "    map.insert(\"longer_key\".to_string(), Value::Number(Number::from(10)));",
                "    let result1 = map.get(&\"short\");",
                "    let result2 = map.get(&\"longer_key\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result1, Some(&Value::String(\"short_value\".to_string())));",
                "    assert_eq!(result2, Some(&Value::Number(Number::from(10))));",
                "    assert_eq!(map.get(&\"non_existent_key\"), None);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"short\".to_string(), Value::String(\"short_value\".to_string()));",
                "    map.insert(\"longer_key\".to_string(), Value::Number(Number::from(10)));",
                "    let result1 = map.get(&\"short\");",
                "    let result2 = map.get(&\"longer_key\");",
                "    assert_eq!(result1, Some(&Value::String(\"short_value\".to_string())));",
                "    assert_eq!(result2, Some(&Value::Number(Number::from(10))));",
                "    assert_eq!(map.get(&\"non_existent_key\"), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}