{
  "name": "serde_json::value::index::{impl#1}::index_or_insert",
  "mod_info": {
    "name": "value::index",
    "loc": "src/value/mod.rs:929:1:929:11"
  },
  "visible": true,
  "loc": "src/value/index.rs:96:5:104:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Value::Null = v at line 97 is true\n",
        "precondition: v matches Value::Object(map) at line 100 is true\n",
        "precondition: v matches Value::Object(map) at line 100 is true\n",
        "expected return value/type: match v {\n            Value::Object(map) => map.entry(self.to_owned()).or_insert(Value::Null),\n            _ => panic!(\"cannot access key {:?} in JSON {}\", self, Type(v)),\n        }\n"
      ],
      "input_infer": "Value::Null, Value::Object(Map::new()), Value::Object(Map::with_capacity(0)), Value::Object(Map::with_capacity(1)), Value::Object(Map::with_capacity(5))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut v = Value::Null;",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v, Value::Object(Map::new()));",
                "    assert!(matches!(result, &mut Value::Null));"
              ],
              "code": [
                "{",
                "    let mut v = Value::Null;",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "    assert_eq!(v, Value::Object(Map::new()));",
                "    assert!(matches!(result, &mut Value::Null));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut v = Value::Object(Map::new());",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &Value::Null);",
                "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
                "    assert!(v.get(\"key1\").is_some());",
                "    assert_eq!(v.get(\"key1\"), Some(&Value::Null));",
                "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(\"key1\")));",
                "    assert!(matches!(v, Value::Object(ref map) if !map.is_empty()));",
                "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));"
              ],
              "code": [
                "{",
                "    let mut v = Value::Object(Map::new());",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "    assert_eq!(result, &Value::Null);",
                "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
                "    assert!(v.get(\"key1\").is_some());",
                "    assert_eq!(v.get(\"key1\"), Some(&Value::Null));",
                "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(\"key1\")));",
                "    assert!(matches!(v, Value::Object(ref map) if !map.is_empty()));",
                "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut v = Value::Object(Map::with_capacity(0));",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Object(ref map) if map.get(&key).is_some()));",
                "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));"
              ],
              "code": [
                "{",
                "    let mut v = Value::Object(Map::with_capacity(0));",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Object(ref map) if map.get(&key).is_some()));",
                "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut v = Value::Object(Map::with_capacity(1));",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Object(map) if map.len() == 1));",
                "    assert!(v.get(&String::from(\"key1\")).is_some());",
                "    assert_eq!(v.get(&String::from(\"key1\")).unwrap(), &Value::Null);",
                "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(&String::from(\"key1\"))));"
              ],
              "code": [
                "{",
                "    let mut v = Value::Object(Map::with_capacity(1));",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Object(map) if map.len() == 1));",
                "    assert!(v.get(&String::from(\"key1\")).is_some());",
                "    assert_eq!(v.get(&String::from(\"key1\")).unwrap(), &Value::Null);",
                "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(&String::from(\"key1\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut v = Value::Object(Map::with_capacity(5));",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    let mut v = Value::Null;",
                "    assert!(matches!(v, Value::Null));",
                "    v = Value::Object(Map::new());",
                "    let result = entry.index_or_insert(&mut v);",
                "    assert!(matches!(v, Value::Object(_)));",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(v.as_object().unwrap().contains_key(&key));",
                "    assert_eq!(v.as_object().unwrap().get(&key), Some(&Value::Null));"
              ],
              "code": [
                "{",
                "    let mut v = Value::Object(Map::with_capacity(5));",
                "    let key = String::from(\"key1\");",
                "    let entry = &key;",
                "    let result = entry.index_or_insert(&mut v);",
                "    let mut v = Value::Null;",
                "    assert!(matches!(v, Value::Null));",
                "    v = Value::Object(Map::new());",
                "    let result = entry.index_or_insert(&mut v);",
                "    assert!(matches!(v, Value::Object(_)));",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(v.as_object().unwrap().contains_key(&key));",
                "    assert_eq!(v.as_object().unwrap().get(&key), Some(&Value::Null));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Value::Null = v at line 97 is false\n",
        "precondition: v matches Value::Object(map) at line 101 is false\n",
        "precondition: v matches _ at line 102 is true\n"
      ],
      "input_infer": "test input conditions or ranges: v must not be Value::Null and must not be a Value::Object; v can be any other Value variant such as Value::Bool, Value::Number, Value::String, or Value::Array documenting the JSON data structure under test.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Bool(true);",
                "    let result = key.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Bool(true);",
                "    let result = key.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Bool(true)));",
                "    assert!(matches!(result, &mut Value::Null));",
                "    assert!(std::panic::catch_unwind(|| key.index_or_insert(&mut v)).is_err());"
              ],
              "code": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Bool(true);",
                "    let result = key.index_or_insert(&mut v);",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Bool(true);",
                "    let result = key.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Bool(true)));",
                "    assert!(matches!(result, &mut Value::Null));",
                "    assert!(std::panic::catch_unwind(|| key.index_or_insert(&mut v)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Number(Number::from(42));",
                "    let result = key.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, &mut Value::Number(Number::from(42))));",
                "    assert_eq!(v, Value::Number(Number::from(42)));",
                "    assert!(v.is_number());",
                "    assert!(matches!(v, Value::Number(_)));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Number(Number::from(42));",
                "    let result = key.index_or_insert(&mut v);",
                "    assert!(matches!(result, &mut Value::Number(Number::from(42))));",
                "    assert_eq!(v, Value::Number(Number::from(42)));",
                "    assert!(v.is_number());",
                "    assert!(matches!(v, Value::Number(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::String(String::from(\"test_value\"));",
                "    let result = key.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::String(_)));",
                "    assert!(v != Value::Null);",
                "    assert!(v.is_string());",
                "    assert!(v.to_string() == \"test_value\");"
              ],
              "code": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::String(String::from(\"test_value\"));",
                "    let result = key.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::String(_)));",
                "    assert!(v != Value::Null);",
                "    assert!(v.is_string());",
                "    assert!(v.to_string() == \"test_value\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
                "    let result = key.index_or_insert(&mut v);",
                "}"
              ],
              "oracle": [
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
                "    let result = key.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Array(_)));",
                "    assert!(v.is_empty());"
              ],
              "code": [
                "{",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
                "    let result = key.index_or_insert(&mut v);",
                "    let key = String::from(\"test_key\");",
                "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
                "    let result = key.index_or_insert(&mut v);",
                "    assert_eq!(result, &mut Value::Null);",
                "    assert!(matches!(v, Value::Array(_)));",
                "    assert!(v.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}