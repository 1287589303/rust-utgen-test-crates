{
  "name": "serde_json::value::ser::{impl#1}::serialize_seq",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:233:5:237:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(SerializeVec {\n            vec: Vec::with_capacity(len.unwrap_or(0)),\n        })\n"
      ],
      "input_infer": "len: None, len: Some(0), len: Some(1), len: Some(100), len: Some(std::usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(None);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Ok(SerializeVec { vec: Vec::with_capacity(0) }));",
                "    ",
                "    let result = serializer.serialize_seq(Some(5));",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Ok(SerializeVec { vec: Vec::with_capacity(5) }));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(None);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Ok(SerializeVec { vec: Vec::with_capacity(0) }));",
                "    ",
                "    let result = serializer.serialize_seq(Some(5));",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Ok(SerializeVec { vec: Vec::with_capacity(5) }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(0));",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Ok(SerializeVec { vec }) if vec.capacity() == 0));",
                "    assert!(matches!(serializer.serialize_seq(None), Ok(SerializeVec { vec }) if vec.capacity() == 0));",
                "    assert!(matches!(serializer.serialize_seq(Some(5)), Ok(SerializeVec { vec }) if vec.capacity() == 5));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(0));",
                "    assert!(matches!(result, Ok(SerializeVec { vec }) if vec.capacity() == 0));",
                "    assert!(matches!(serializer.serialize_seq(None), Ok(SerializeVec { vec }) if vec.capacity() == 0));",
                "    assert!(matches!(serializer.serialize_seq(Some(5)), Ok(SerializeVec { vec }) if vec.capacity() == 5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(1));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().vec.capacity(), 1);",
                "    assert_eq!(result.unwrap().vec.len(), 0);",
                "    ",
                "    let result_zero = serializer.serialize_seq(Some(0));",
                "    assert!(result_zero.is_ok());",
                "    assert_eq!(result_zero.unwrap().vec.capacity(), 0);",
                "    assert_eq!(result_zero.unwrap().vec.len(), 0);",
                "    ",
                "    let result_none = serializer.serialize_seq(None);",
                "    assert!(result_none.is_ok());",
                "    assert_eq!(result_none.unwrap().vec.capacity(), 0);",
                "    assert_eq!(result_none.unwrap().vec.len(), 0);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(1));",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().vec.capacity(), 1);",
                "    assert_eq!(result.unwrap().vec.len(), 0);",
                "    ",
                "    let result_zero = serializer.serialize_seq(Some(0));",
                "    assert!(result_zero.is_ok());",
                "    assert_eq!(result_zero.unwrap().vec.capacity(), 0);",
                "    assert_eq!(result_zero.unwrap().vec.len(), 0);",
                "    ",
                "    let result_none = serializer.serialize_seq(None);",
                "    assert!(result_none.is_ok());",
                "    assert_eq!(result_none.unwrap().vec.capacity(), 0);",
                "    assert_eq!(result_none.unwrap().vec.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(100));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialize_vec = result.unwrap();",
                "    assert_eq!(serialize_vec.vec.capacity(), 100);",
                "    assert_eq!(serialize_vec.vec.len(), 0);",
                "    ",
                "    let result_none = serializer.serialize_seq(None);",
                "    assert!(result_none.is_ok());",
                "    let serialize_vec_none = result_none.unwrap();",
                "    assert_eq!(serialize_vec_none.vec.capacity(), 0);",
                "    assert_eq!(serialize_vec_none.vec.len(), 0);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(100));",
                "    assert!(result.is_ok());",
                "    let serialize_vec = result.unwrap();",
                "    assert_eq!(serialize_vec.vec.capacity(), 100);",
                "    assert_eq!(serialize_vec.vec.len(), 0);",
                "    ",
                "    let result_none = serializer.serialize_seq(None);",
                "    assert!(result_none.is_ok());",
                "    let serialize_vec_none = result_none.unwrap();",
                "    assert_eq!(serialize_vec_none.vec.capacity(), 0);",
                "    assert_eq!(serialize_vec_none.vec.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(std::usize::MAX));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SerializeVec { vec: Vec::with_capacity(std::usize::MAX) }));",
                "    assert!(result.is_ok());",
                "    if let Ok(serialize_vec) = result {",
                "    assert_eq!(serialize_vec.vec.capacity(), std::usize::MAX);",
                "    }"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_seq(Some(std::usize::MAX));",
                "    assert_eq!(result, Ok(SerializeVec { vec: Vec::with_capacity(std::usize::MAX) }));",
                "    assert!(result.is_ok());",
                "    if let Ok(serialize_vec) = result {",
                "    assert_eq!(serialize_vec.vec.capacity(), std::usize::MAX);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}