{
  "name": "serde_json::value::from::{impl#13}::from",
  "mod_info": {
    "name": "value::from",
    "loc": "src/value/mod.rs:928:1:928:10"
  },
  "visible": true,
  "loc": "src/value/from.rs:269:5:271:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Value::Null\n"
      ],
      "input_infer": "Input: ()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u = ();",
                "    let x: Value = u.into();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(x, Value::Null);",
                "    assert!(matches!(x, Value::Null));",
                "    let y: Value = Value::from(());",
                "    assert_eq!(y, Value::Null);",
                "    assert!(matches!(Value::from(()), Value::Null));"
              ],
              "code": [
                "{",
                "    let u = ();",
                "    let x: Value = u.into();",
                "    assert_eq!(x, Value::Null);",
                "    assert!(matches!(x, Value::Null));",
                "    let y: Value = Value::from(());",
                "    assert_eq!(y, Value::Null);",
                "    assert!(matches!(Value::from(()), Value::Null));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    // No invalid test case for `()`, as there's only a valid case.",
                "    let u = ();",
                "    let x: Value = u.into();",
                "}"
              ],
              "oracle": [
                "    let u = ();",
                "    let x: Value = u.into();",
                "    assert_eq!(x, Value::Null);"
              ],
              "code": [
                "{",
                "    // No invalid test case for `()`, as there's only a valid case.",
                "    let u = ();",
                "    let x: Value = u.into();",
                "    let u = ();",
                "    let x: Value = u.into();",
                "    assert_eq!(x, Value::Null);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}