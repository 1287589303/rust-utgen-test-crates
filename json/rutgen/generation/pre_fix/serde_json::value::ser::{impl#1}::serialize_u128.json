{
  "name": "serde_json::value::ser::{impl#1}::serialize_u128",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:134:5:148:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: let Ok(value) = u64::try_from(value) at line 142 is true\n",
        "expected return value/type: Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))\n"
      ],
      "input_infer": "Test input conditions or ranges: value within 0 to 2^64-1 for successful case, value equal to 2^64 or greater for error case.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890; // within 0 to 2^64-1",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890;",
                "    let _result = serializer.serialize_u128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890; // within 0 to 2^64-1",
                "    let _result = serializer.serialize_u128(value);",
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890;",
                "    let _result = serializer.serialize_u128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616; // equal to 2^64, should trigger the error",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616;",
                "    let result = serializer.serialize_u128(value);",
                "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616; // equal to 2^64, should trigger the error",
                "    let _result = serializer.serialize_u128(value);",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616;",
                "    let result = serializer.serialize_u128(value);",
                "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = u128::MAX; // greater than 2^64-1, should trigger the error",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: u128 = u128::MAX;",
                "    let expected_error = Error::syntax(ErrorCode::NumberOutOfRange, 0, 0);",
                "    let result = serializer.serialize_u128(value);",
                "    assert_eq!(result, Err(expected_error));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = u128::MAX; // greater than 2^64-1, should trigger the error",
                "    let _result = serializer.serialize_u128(value);",
                "    let serializer = Serializer;",
                "    let value: u128 = u128::MAX;",
                "    let expected_error = Error::syntax(ErrorCode::NumberOutOfRange, 0, 0);",
                "    let result = serializer.serialize_u128(value);",
                "    assert_eq!(result, Err(expected_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Ok(value) = u64::try_from(value) at line 142 is false\n",
        "expected return value/type: Ok(Value::Number(value.into()))\n"
      ],
      "input_infer": "Input value must be greater than 2^64-1 (18446744073709551615), i.e., the input range is any u128 value between 18446744073709551616 and 340282366920938463463373607431768211455, inclusive.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616; // Just above the limit",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616;",
                "    let result = serializer.serialize_u128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616; // Just above the limit",
                "    let _result = serializer.serialize_u128(value);",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551616;",
                "    let result = serializer.serialize_u128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890; // A random value above the limit",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890; // Value exceeds u64 limit",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890; // A random value above the limit",
                "    let _result = serializer.serialize_u128(value);",
                "    let serializer = Serializer;",
                "    let value: u128 = 12345678901234567890; // Value exceeds u64 limit",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 340282366920938463463373607431768211455; // Maximum u128 value",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 340282366920938463463373607431768211455; // Maximum u128 value",
                "    let _result = serializer.serialize_u128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551617; // Slightly above the overflow limit",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551617;",
                "    let result = serializer.serialize_u128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551617; // Slightly above the overflow limit",
                "    let _result = serializer.serialize_u128(value);",
                "    let serializer = Serializer;",
                "    let value: u128 = 18446744073709551617;",
                "    let result = serializer.serialize_u128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 25000000000000000000; // Another random value above u64 max",
                "    let _result = serializer.serialize_u128(value);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(_result, Err(Error { err: Box { code: ErrorCode::NumberOutOfRange, .. }, .. })));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u128 = 25000000000000000000; // Another random value above u64 max",
                "    let _result = serializer.serialize_u128(value);",
                "    assert!(matches!(_result, Err(Error { err: Box { code: ErrorCode::NumberOutOfRange, .. }, .. })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}