{
  "name": "serde_json::value::ser::{impl#1}::serialize_i128",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:96:5:112:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: let Ok(value) = u64::try_from(value) at line 104 is true\n",
        "precondition: let Ok(value) = i64::try_from(value) at line 106 is true\n",
        "expected return value/type: Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))\n"
      ],
      "input_infer": "i128 values from 0 to 2^64 - 1 for successful serialization, i128 values from 2^64 to 2^127 - 1 for i64 range checks, and i128 values below -2^64 and above 2^127 - 1 for triggering Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = 0; // minimum value that passes u64::try_from",
                "    let _result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: i128 = 0;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    ",
                "    let value: i128 = u64::MAX as i128;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Ok(Value::Number(value.into())));",
                "    ",
                "    let value: i128 = i64::MAX as i128;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Ok(Value::Number(value.into())));",
                "    ",
                "    let value: i128 = i64::MAX as i128 + 1;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "    ",
                "    let value: i128 = i64::MIN as i128 - 1;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = 0; // minimum value that passes u64::try_from",
                "    let _result = serializer.serialize_i128(value);",
                "    let serializer = Serializer;",
                "    let value: i128 = 0;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    ",
                "    let value: i128 = u64::MAX as i128;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Ok(Value::Number(value.into())));",
                "    ",
                "    let value: i128 = i64::MAX as i128;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Ok(Value::Number(value.into())));",
                "    ",
                "    let value: i128 = i64::MAX as i128 + 1;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "    ",
                "    let value: i128 = i64::MIN as i128 - 1;",
                "    let _result = serializer.serialize_i128(value);",
                "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = i64::MAX as i128; // maximum value that passes i64::try_from",
                "    let _result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: i128 = i128::MAX;",
                "    let result = serializer.serialize_i128(value);",
                "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = i64::MAX as i128; // maximum value that passes i64::try_from",
                "    let _result = serializer.serialize_i128(value);",
                "    let serializer = Serializer;",
                "    let value: i128 = i128::MAX;",
                "    let result = serializer.serialize_i128(value);",
                "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = u128::MAX as i128; // value above the i64 range to trigger error",
                "    let _result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: i128 = u128::MAX as i128;",
                "    let result = serializer.serialize_i128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
                "    assert_eq!(result.err().unwrap().err.line, 0);",
                "    assert_eq!(result.err().unwrap().err.column, 0);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = u128::MAX as i128; // value above the i64 range to trigger error",
                "    let _result = serializer.serialize_i128(value);",
                "    let serializer = Serializer;",
                "    let value: i128 = u128::MAX as i128;",
                "    let result = serializer.serialize_i128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
                "    assert_eq!(result.err().unwrap().err.line, 0);",
                "    assert_eq!(result.err().unwrap().err.column, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = i128::MIN; // value below the u64 range to trigger error",
                "    let _result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);",
                "    assert_eq!(_result.unwrap_err().err.line, 0);",
                "    assert_eq!(_result.unwrap_err().err.column, 0);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = i128::MIN; // value below the u64 range to trigger error",
                "    let _result = serializer.serialize_i128(value);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);",
                "    assert_eq!(_result.unwrap_err().err.line, 0);",
                "    assert_eq!(_result.unwrap_err().err.column, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Ok(value) = u64::try_from(value) at line 104 is true\n",
        "precondition: let Ok(value) = i64::try_from(value) at line 106 is false\n",
        "expected return value/type: Ok(Value::Number(value.into()))\n"
      ],
      "input_infer": "Test input conditions or ranges: i128 values in the range [0, 2^64 - 1] and strictly positive, such that they cannot be converted to i64 (i.e., greater than 2^63 - 1).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = 9223372036854775808; // 2^63, the smallest value that cannot be converted to i64",
                "    let result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number(Number { n: 9223372036854775808u128.into() })));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = 9223372036854775808; // 2^63, the smallest value that cannot be converted to i64",
                "    let result = serializer.serialize_i128(value);",
                "    assert_eq!(result, Ok(Value::Number(Number { n: 9223372036854775808u128.into() })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = 18446744073709551615; // 2^64 - 1, the maximum value for u64",
                "    let result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let expected_value = Value::Number(value.into());",
                "    assert_eq!(result.unwrap(), expected_value);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: i128 = 18446744073709551615; // 2^64 - 1, the maximum value for u64",
                "    let result = serializer.serialize_i128(value);",
                "    assert!(result.is_ok());",
                "    let expected_value = Value::Number(value.into());",
                "    assert_eq!(result.unwrap(), expected_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Ok(value) = u64::try_from(value) at line 104 is false\n",
        "expected return value/type: Ok(Value::Number(value.into()))\n"
      ],
      "input_infer": "value: i128 values outside the range of u64 (0 to 18,446,744,073,709,551,615) and within the range of i64 (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = -9_223_372_036_854_775_809; // Below i64 min",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))));"
              ],
              "code": [
                "{",
                "    let value: i128 = -9_223_372_036_854_775_809; // Below i64 min",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "    assert!(matches!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = 18_446_744_073_709_551_616; // Above u64 max",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number(Number { n: value.into() })));"
              ],
              "code": [
                "{",
                "    let value: i128 = 18_446_744_073_709_551_616; // Above u64 max",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "    assert_eq!(result, Ok(Value::Number(Number { n: value.into() })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = -9_223_372_036_854_775_808; // i64 min",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);"
              ],
              "code": [
                "{",
                "    let value: i128 = -9_223_372_036_854_775_808; // i64 min",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: i128 = 9_223_372_036_854_775_807; // i64 max",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
              ],
              "code": [
                "{",
                "    let value: i128 = 9_223_372_036_854_775_807; // i64 max",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i128(value);",
                "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}