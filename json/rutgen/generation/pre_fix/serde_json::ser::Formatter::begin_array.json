{
  "name": "serde_json::ser::Formatter::begin_array",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1834:5:1839:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The writer must implement `io::Write`, accept any value, and test for success or failure of writing the byte array `[`, including checks for valid `io::Result` and edge cases like a null writer or invalid states.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        buffer: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.buffer.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { buffer: Vec::new() };",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut writer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.buffer, b\"[\");",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert!(!writer.buffer.is_empty());",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer[0], b'[');",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer.len(), 1);",
                "    assert_eq!(writer.buffer[0], b'[');",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert!(writer.buffer.contains(&b'['));"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        buffer: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.buffer.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { buffer: Vec::new() };",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert!(!writer.buffer.is_empty());",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer[0], b'[');",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer.len(), 1);",
                "    assert_eq!(writer.buffer[0], b'[');",
                "    ",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert!(writer.buffer.contains(&b'['));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut *(std::ptr::null_mut() as *mut dyn io::Write)).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut *(std::ptr::null_mut() as *mut dyn io::Write)).unwrap();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut *(std::ptr::null_mut() as *mut dyn io::Write)).unwrap();",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut *(std::ptr::null_mut() as *mut dyn io::Write)).unwrap();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyWriter;",
                "",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = EmptyWriter;",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut writer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.write_all(b\"[\"), Ok(()));"
              ],
              "code": [
                "{",
                "    struct EmptyWriter;",
                "",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = EmptyWriter;",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.write_all(b\"[\"), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CheckWriter {",
                "        buffer: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for CheckWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.buffer.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = CheckWriter { buffer: Vec::new() };",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");",
                "",
                "    // Reset buffer and call again to ensure consistent state",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.buffer, b\"[\");",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");"
              ],
              "code": [
                "{",
                "    struct CheckWriter {",
                "        buffer: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for CheckWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.buffer.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = CheckWriter { buffer: Vec::new() };",
                "    let mut formatter = TestFormatter;",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");",
                "",
                "    // Reset buffer and call again to ensure consistent state",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");",
                "    assert_eq!(writer.buffer, b\"[\");",
                "    writer.buffer.clear();",
                "    formatter.begin_array(&mut writer).unwrap();",
                "    assert_eq!(writer.buffer, b\"[\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}