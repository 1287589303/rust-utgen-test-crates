{
  "name": "serde_json::value::from::{impl#1}::from",
  "mod_info": {
    "name": "value::from",
    "loc": "src/value/mod.rs:928:1:928:10"
  },
  "visible": true,
  "loc": "src/value/from.rs:59:5:61:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "f64 values including NaN, positive infinity, negative infinity, very small numbers (close to 0), very large numbers (close to maximum f64), typical values (like 0.0, 1.0, -1.0, 12.34), edge cases like -0.0, and special values like f64::MIN, f64::MAX.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = f64::NAN;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    let f: f64 = f64::NAN;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = 0.0;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "    ",
                "    let f: f64 = 12.5;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "    ",
                "    let f: f64 = -13.37;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "    ",
                "    let f: f64 = 1.0;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));"
              ],
              "code": [
                "{",
                "    let f: f64 = f64::NAN;",
                "    let _x: Value = Value::from(f);",
                "    let f: f64 = f64::NAN;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = 0.0;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "    ",
                "    let f: f64 = 12.5;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "    ",
                "    let f: f64 = -13.37;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "    ",
                "    let f: f64 = 1.0;",
                "    assert!(matches!(Value::from(f), Value::Number(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = f64::INFINITY;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    Value::from(f64::INFINITY) == Value::Null",
                "    ",
                "    let f: f64 = f64::NEG_INFINITY; Value::from(f) == Value::Null",
                "    ",
                "    let f: f64 = f64::NAN; Value::from(f) == Value::Null",
                "    ",
                "    let f: f64 = 0.0; Value::from(f) == Value::Number(Number::from_f64(0.0).unwrap())",
                "    ",
                "    let f: f64 = 1.0; Value::from(f) == Value::Number(Number::from_f64(1.0).unwrap())",
                "    ",
                "    let f: f64 = -1.0; Value::from(f) == Value::Number(Number::from_f64(-1.0).unwrap())",
                "    ",
                "    let f: f64 = 13.37; Value::from(f) == Value::Number(Number::from_f64(13.37).unwrap())",
                "    ",
                "    let f: f64 = 1234567890.123456; Value::from(f) == Value::Number(Number::from_f64(1234567890.123456).unwrap())",
                "    ",
                "    let f: f64 = 1.7976931348623157e+308; Value::from(f) == Value::Number(Number::from_f64(1.7976931348623157e+308).unwrap())"
              ],
              "code": [
                "{",
                "    let f: f64 = f64::INFINITY;",
                "    let _x: Value = Value::from(f);",
                "    Value::from(f64::INFINITY) == Value::Null",
                "    ",
                "    let f: f64 = f64::NEG_INFINITY; Value::from(f) == Value::Null",
                "    ",
                "    let f: f64 = f64::NAN; Value::from(f) == Value::Null",
                "    ",
                "    let f: f64 = 0.0; Value::from(f) == Value::Number(Number::from_f64(0.0).unwrap())",
                "    ",
                "    let f: f64 = 1.0; Value::from(f) == Value::Number(Number::from_f64(1.0).unwrap())",
                "    ",
                "    let f: f64 = -1.0; Value::from(f) == Value::Number(Number::from_f64(-1.0).unwrap())",
                "    ",
                "    let f: f64 = 13.37; Value::from(f) == Value::Number(Number::from_f64(13.37).unwrap())",
                "    ",
                "    let f: f64 = 1234567890.123456; Value::from(f) == Value::Number(Number::from_f64(1234567890.123456).unwrap())",
                "    ",
                "    let f: f64 = 1.7976931348623157e+308; Value::from(f) == Value::Number(Number::from_f64(1.7976931348623157e+308).unwrap())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    let f: f64 = f64::NEG_INFINITY; assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::INFINITY; assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NAN; assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = 0.0; assert_eq!(Value::from(f), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    ",
                "    let f: f64 = 42.0; assert_eq!(Value::from(f), Value::Number(Number::from_f64(42.0).unwrap()));",
                "    ",
                "    let f: f64 = -13.37; assert_eq!(Value::from(f), Value::Number(Number::from_f64(-13.37).unwrap()));"
              ],
              "code": [
                "{",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    let _x: Value = Value::from(f);",
                "    let f: f64 = f64::NEG_INFINITY; assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::INFINITY; assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NAN; assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = 0.0; assert_eq!(Value::from(f), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    ",
                "    let f: f64 = 42.0; assert_eq!(Value::from(f), Value::Number(Number::from_f64(42.0).unwrap()));",
                "    ",
                "    let f: f64 = -13.37; assert_eq!(Value::from(f), Value::Number(Number::from_f64(-13.37).unwrap()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = 1e-10;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Value::from(1e-10), Value::Number(Number::from_f64(1e-10).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(42.0), Value::Number(Number::from_f64(42.0).unwrap()));",
                "    assert_eq!(Value::from(-3.14), Value::Number(Number::from_f64(-3.14).unwrap()));"
              ],
              "code": [
                "{",
                "    let f: f64 = 1e-10;",
                "    let _x: Value = Value::from(f);",
                "    assert_eq!(Value::from(1e-10), Value::Number(Number::from_f64(1e-10).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(42.0), Value::Number(Number::from_f64(42.0).unwrap()));",
                "    assert_eq!(Value::from(-3.14), Value::Number(Number::from_f64(-3.14).unwrap()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = -1e-10;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    Value::from(-1e-10) should be Value::Number(Number::from_f64(-1e-10).unwrap());",
                "    Value::from(f64::INFINITY) should be Value::Null;",
                "    Value::from(f64::NEG_INFINITY) should be Value::Null;",
                "    Value::from(f64::NAN) should be Value::Null;",
                "    Value::from(0.0) should be Value::Number(Number::from_f64(0.0).unwrap());",
                "    Value::from(13.37) should be Value::Number(Number::from_f64(13.37).unwrap());",
                "    Value::from(1.0) should be Value::Number(Number::from_f64(1.0).unwrap());",
                "    Value::from(-1.0) should be Value::Number(Number::from_f64(-1.0).unwrap());"
              ],
              "code": [
                "{",
                "    let f: f64 = -1e-10;",
                "    let _x: Value = Value::from(f);",
                "    Value::from(-1e-10) should be Value::Number(Number::from_f64(-1e-10).unwrap());",
                "    Value::from(f64::INFINITY) should be Value::Null;",
                "    Value::from(f64::NEG_INFINITY) should be Value::Null;",
                "    Value::from(f64::NAN) should be Value::Null;",
                "    Value::from(0.0) should be Value::Number(Number::from_f64(0.0).unwrap());",
                "    Value::from(13.37) should be Value::Number(Number::from_f64(13.37).unwrap());",
                "    Value::from(1.0) should be Value::Number(Number::from_f64(1.0).unwrap());",
                "    Value::from(-1.0) should be Value::Number(Number::from_f64(-1.0).unwrap());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = f64::MAX;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    Value::from(f64::MAX) == Value::Number(Number::from_f64(f64::MAX).unwrap())",
                "    Value::from(f64::INFINITY) == Value::Null",
                "    Value::from(f64::NEG_INFINITY) == Value::Null",
                "    Value::from(f64::NAN) == Value::Null",
                "    Value::from(0.0) == Value::Number(Number::from_f64(0.0).unwrap())",
                "    Value::from(13.37) == Value::Number(Number::from_f64(13.37).unwrap())"
              ],
              "code": [
                "{",
                "    let f: f64 = f64::MAX;",
                "    let _x: Value = Value::from(f);",
                "    Value::from(f64::MAX) == Value::Number(Number::from_f64(f64::MAX).unwrap())",
                "    Value::from(f64::INFINITY) == Value::Null",
                "    Value::from(f64::NEG_INFINITY) == Value::Null",
                "    Value::from(f64::NAN) == Value::Null",
                "    Value::from(0.0) == Value::Number(Number::from_f64(0.0).unwrap())",
                "    Value::from(13.37) == Value::Number(Number::from_f64(13.37).unwrap())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = -f64::MAX;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Value::from(-f64::MAX), Value::Number(Number::from_f64(-f64::MAX).unwrap()));",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(13.37), Value::Number(Number::from_f64(13.37).unwrap()));",
                "    assert_eq!(Value::from(-13.37), Value::Number(Number::from_f64(-13.37).unwrap()));",
                "    assert_eq!(Value::from(1.0e308), Value::Number(Number::from_f64(1.0e308).unwrap()));",
                "    assert_eq!(Value::from(-1.0e308), Value::Number(Number::from_f64(-1.0e308).unwrap()));"
              ],
              "code": [
                "{",
                "    let f: f64 = -f64::MAX;",
                "    let _x: Value = Value::from(f);",
                "    assert_eq!(Value::from(-f64::MAX), Value::Number(Number::from_f64(-f64::MAX).unwrap()));",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(13.37), Value::Number(Number::from_f64(13.37).unwrap()));",
                "    assert_eq!(Value::from(-13.37), Value::Number(Number::from_f64(-13.37).unwrap()));",
                "    assert_eq!(Value::from(1.0e308), Value::Number(Number::from_f64(1.0e308).unwrap()));",
                "    assert_eq!(Value::from(-1.0e308), Value::Number(Number::from_f64(-1.0e308).unwrap()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = 0.0;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(13.37), Value::Number(Number::from_f64(13.37).unwrap()));",
                "    assert_eq!(Value::from(-1.0), Value::Number(Number::from_f64(-1.0).unwrap()));"
              ],
              "code": [
                "{",
                "    let f: f64 = 0.0;",
                "    let _x: Value = Value::from(f);",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(13.37), Value::Number(Number::from_f64(13.37).unwrap()));",
                "    assert_eq!(Value::from(-1.0), Value::Number(Number::from_f64(-1.0).unwrap()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = -0.0;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    let f: f64 = -0.0;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(-0.0).unwrap()));",
                "    ",
                "    let f: f64 = 0.0;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    ",
                "    let f: f64 = 13.37;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(13.37).unwrap()));",
                "    ",
                "    let f: f64 = f64::INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NAN;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = 1.0e-100;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(1.0e-100).unwrap()));",
                "    ",
                "    let f: f64 = -1.0e100;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(-1.0e100).unwrap()));"
              ],
              "code": [
                "{",
                "    let f: f64 = -0.0;",
                "    let _x: Value = Value::from(f);",
                "    let f: f64 = -0.0;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(-0.0).unwrap()));",
                "    ",
                "    let f: f64 = 0.0;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    ",
                "    let f: f64 = 13.37;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(13.37).unwrap()));",
                "    ",
                "    let f: f64 = f64::INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NEG_INFINITY;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = f64::NAN;",
                "    assert_eq!(Value::from(f), Value::Null);",
                "    ",
                "    let f: f64 = 1.0e-100;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(1.0e-100).unwrap()));",
                "    ",
                "    let f: f64 = -1.0e100;",
                "    assert_eq!(Value::from(f), Value::Number(Number::from_f64(-1.0e100).unwrap()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = 12.34;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Value::from(12.34), Value::Number(Number::from_f64(12.34).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(-0.0), Value::Number(Number::from_f64(-0.0).unwrap()));",
                "    assert_eq!(Value::from(12.0), Value::Number(Number::from_f64(12.0).unwrap()));",
                "    assert_eq!(Value::from(-12.0), Value::Number(Number::from_f64(-12.0).unwrap()));",
                "    assert_eq!(Value::from(f64::MAX), Value::Number(Number::from_f64(f64::MAX).unwrap()));",
                "    assert_eq!(Value::from(f64::MIN), Value::Number(Number::from_f64(f64::MIN).unwrap()));"
              ],
              "code": [
                "{",
                "    let f: f64 = 12.34;",
                "    let _x: Value = Value::from(f);",
                "    assert_eq!(Value::from(12.34), Value::Number(Number::from_f64(12.34).unwrap()));",
                "    assert_eq!(Value::from(f64::INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NEG_INFINITY), Value::Null);",
                "    assert_eq!(Value::from(f64::NAN), Value::Null);",
                "    assert_eq!(Value::from(0.0), Value::Number(Number::from_f64(0.0).unwrap()));",
                "    assert_eq!(Value::from(-0.0), Value::Number(Number::from_f64(-0.0).unwrap()));",
                "    assert_eq!(Value::from(12.0), Value::Number(Number::from_f64(12.0).unwrap()));",
                "    assert_eq!(Value::from(-12.0), Value::Number(Number::from_f64(-12.0).unwrap()));",
                "    assert_eq!(Value::from(f64::MAX), Value::Number(Number::from_f64(f64::MAX).unwrap()));",
                "    assert_eq!(Value::from(f64::MIN), Value::Number(Number::from_f64(f64::MIN).unwrap()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f: f64 = -12.34;",
                "    let _x: Value = Value::from(f);",
                "}"
              ],
              "oracle": [
                "    Value::from(-12.34) == Value::Number(Number::from_f64(-12.34).unwrap())",
                "    Value::from(f64::NAN) == Value::Null",
                "    Value::from(f64::INFINITY) == Value::Null",
                "    Value::from(f64::NEG_INFINITY) == Value::Null",
                "    Value::from(0.0) == Value::Number(Number::from_f64(0.0).unwrap())",
                "    Value::from(1.0) == Value::Number(Number::from_f64(1.0).unwrap())"
              ],
              "code": [
                "{",
                "    let f: f64 = -12.34;",
                "    let _x: Value = Value::from(f);",
                "    Value::from(-12.34) == Value::Number(Number::from_f64(-12.34).unwrap())",
                "    Value::from(f64::NAN) == Value::Null",
                "    Value::from(f64::INFINITY) == Value::Null",
                "    Value::from(f64::NEG_INFINITY) == Value::Null",
                "    Value::from(0.0) == Value::Number(Number::from_f64(0.0).unwrap())",
                "    Value::from(1.0) == Value::Number(Number::from_f64(1.0).unwrap())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}