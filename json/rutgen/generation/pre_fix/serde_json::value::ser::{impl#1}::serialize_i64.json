{
  "name": "serde_json::value::ser::{impl#1}::serialize_i64",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:92:5:94:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Value::Number(value.into()))\n"
      ],
      "input_infer": "valid input: i64 values including min (-9223372036854775808), max (9223372036854775807), and edge cases (0, -1, 1, -9223372036854775807, 9223372036854775806)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(-9223372036854775808);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number((-9223372036854775808).into())));",
                "    assert_eq!(result.is_ok(), true);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(-9223372036854775808);",
                "    assert_eq!(result, Ok(Value::Number((-9223372036854775808).into())));",
                "    assert_eq!(result.is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(9223372036854775807);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number(9223372036854775807.into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(9223372036854775807);",
                "    assert_eq!(result, Ok(Value::Number(9223372036854775807.into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number(0.into())));",
                "    let result = serializer.serialize_i64(-1);",
                "    assert_eq!(result, Ok(Value::Number((-1).into())));",
                "    let result = serializer.serialize_i64(100);",
                "    assert_eq!(result, Ok(Value::Number(100.into())));",
                "    let result = serializer.serialize_i64(i64::MAX);",
                "    assert_eq!(result, Ok(Value::Number(i64::MAX.into())));",
                "    let result = serializer.serialize_i64(i64::MIN);",
                "    assert_eq!(result, Ok(Value::Number(i64::MIN.into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(0);",
                "    assert_eq!(result, Ok(Value::Number(0.into())));",
                "    let result = serializer.serialize_i64(-1);",
                "    assert_eq!(result, Ok(Value::Number((-1).into())));",
                "    let result = serializer.serialize_i64(100);",
                "    assert_eq!(result, Ok(Value::Number(100.into())));",
                "    let result = serializer.serialize_i64(i64::MAX);",
                "    assert_eq!(result, Ok(Value::Number(i64::MAX.into())));",
                "    let result = serializer.serialize_i64(i64::MIN);",
                "    assert_eq!(result, Ok(Value::Number(i64::MIN.into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number((-1).into())));",
                "    let result_zero = serializer.serialize_i64(0);",
                "    assert_eq!(result_zero, Ok(Value::Number(0.into())));",
                "    let result_positive = serializer.serialize_i64(1);",
                "    assert_eq!(result_positive, Ok(Value::Number(1.into())));",
                "    let result_max = serializer.serialize_i64(i64::MAX);",
                "    assert_eq!(result_max, Ok(Value::Number(i64::MAX.into())));",
                "    let result_min = serializer.serialize_i64(i64::MIN);",
                "    assert_eq!(result_min, Ok(Value::Number(i64::MIN.into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(-1);",
                "    assert_eq!(result, Ok(Value::Number((-1).into())));",
                "    let result_zero = serializer.serialize_i64(0);",
                "    assert_eq!(result_zero, Ok(Value::Number(0.into())));",
                "    let result_positive = serializer.serialize_i64(1);",
                "    assert_eq!(result_positive, Ok(Value::Number(1.into())));",
                "    let result_max = serializer.serialize_i64(i64::MAX);",
                "    assert_eq!(result_max, Ok(Value::Number(i64::MAX.into())));",
                "    let result_min = serializer.serialize_i64(i64::MIN);",
                "    assert_eq!(result_min, Ok(Value::Number(i64::MIN.into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number(1.into())));",
                "    let result = serializer.serialize_i64(-1);",
                "    assert_eq!(result, Ok(Value::Number((-1).into())));",
                "    let result = serializer.serialize_i64(0);",
                "    assert_eq!(result, Ok(Value::Number(0.into())));",
                "    let result = serializer.serialize_i64(i64::MAX);",
                "    assert_eq!(result, Ok(Value::Number(i64::MAX.into())));",
                "    let result = serializer.serialize_i64(i64::MIN);",
                "    assert_eq!(result, Ok(Value::Number(i64::MIN.into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(1);",
                "    assert_eq!(result, Ok(Value::Number(1.into())));",
                "    let result = serializer.serialize_i64(-1);",
                "    assert_eq!(result, Ok(Value::Number((-1).into())));",
                "    let result = serializer.serialize_i64(0);",
                "    assert_eq!(result, Ok(Value::Number(0.into())));",
                "    let result = serializer.serialize_i64(i64::MAX);",
                "    assert_eq!(result, Ok(Value::Number(i64::MAX.into())));",
                "    let result = serializer.serialize_i64(i64::MIN);",
                "    assert_eq!(result, Ok(Value::Number(i64::MIN.into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(-9223372036854775807);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number((-9223372036854775807).into()));",
                "    ",
                "    let result = serializer.serialize_i64(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(0.into()));",
                "    ",
                "    let result = serializer.serialize_i64(9223372036854775807);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(9223372036854775807.into()));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(-9223372036854775807);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number((-9223372036854775807).into()));",
                "    ",
                "    let result = serializer.serialize_i64(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(0.into()));",
                "    ",
                "    let result = serializer.serialize_i64(9223372036854775807);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::Number(9223372036854775807.into()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(9223372036854775806);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::Number(9223372036854775806.into()));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_i64(9223372036854775806);",
                "    assert_eq!(result, Ok(Value::Number(9223372036854775806.into()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}