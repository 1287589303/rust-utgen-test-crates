{
  "name": "serde_json::ser::{impl#11}::serialize_f32",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1019:5:1038:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value.is_finite() at line 1020 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .begin_string(&mut self.ser.writer)\n            .map_err(Error::io) matches core::result::Result::Err(err) at line 1024 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "Test input conditions or ranges: value = any non-finite f32 (e.g., NaN, positive infinity, negative infinity) and self.ser.formatter.begin_string(&mut self.ser.writer) returns Err variant.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    struct TestFormatter;",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "",
                "    let _ = serializer.serialize_f32(f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_f32(f32::NAN), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0)));",
                "    assert!(matches!(serializer.serialize_f32(f32::NAN).err(), Some(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    struct TestFormatter;",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "",
                "    let _ = serializer.serialize_f32(f32::NAN);",
                "    assert_eq!(serializer.serialize_f32(f32::NAN), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0)));",
                "    assert!(matches!(serializer.serialize_f32(f32::NAN).err(), Some(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    struct TestFormatter;",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "",
                "    let _ = serializer.serialize_f32(f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_f32(f32::INFINITY), Err(float_key_must_be_finite()));",
                "    assert!(matches!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
                "    assert!(matches!(serializer.serialize_f32(f32::INFINITY), Err(_)));",
                "    assert!(!f32::INFINITY.is_finite());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    struct TestFormatter;",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "",
                "    let _ = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(serializer.serialize_f32(f32::INFINITY), Err(float_key_must_be_finite()));",
                "    assert!(matches!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
                "    assert!(matches!(serializer.serialize_f32(f32::INFINITY), Err(_)));",
                "    assert!(!f32::INFINITY.is_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    struct TestFormatter;",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "",
                "    let _ = serializer.serialize_f32(f32::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_f32(f32::NEG_INFINITY), Err(float_key_must_be_finite()));",
                "    assert!(matches!(serializer.serialize_f32(f32::NEG_INFINITY), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    struct TestFormatter;",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
                "        }",
                "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "",
                "    let _ = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert_eq!(serializer.serialize_f32(f32::NEG_INFINITY), Err(float_key_must_be_finite()));",
                "    assert!(matches!(serializer.serialize_f32(f32::NEG_INFINITY), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value.is_finite() at line 1020 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .begin_string(&mut self.ser.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val) at line 1024 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .write_f32(&mut self.ser.writer, value)\n            .map_err(Error::io) matches core::result::Result::Ok(val) at line 1029 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .write_f32(&mut self.ser.writer, value)\n            .map_err(Error::io) matches core::result::Result::Err(err) at line 1029 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "value: any finite f32 value; also test with NaN and infinity for error return scenarios; self.ser.formatter.begin_string() must succeed; simulate writer failures to test error handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(3.14);",
                "}"
              ],
              "oracle": [
                "    let result = map_key_serializer.serialize_f32(3.14); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(f32::INFINITY); assert!(result.is_err());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(f32::NAN); assert!(result.is_err());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(-3.14); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(0.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(1.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(-1.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(1000.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(-1000.0); assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(3.14);",
                "    let result = map_key_serializer.serialize_f32(3.14); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(f32::INFINITY); assert!(result.is_err());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(f32::NAN); assert!(result.is_err());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(-3.14); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(0.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(1.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(-1.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(1000.0); assert!(result.is_ok());",
                "    ",
                "    let result = map_key_serializer.serialize_f32(-1000.0); assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map_key_serializer.serialize_f32(1.0_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(3.14_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::INFINITY), Err(float_key_must_be_finite()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::NEG_INFINITY), Err(float_key_must_be_finite()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::NAN), Err(float_key_must_be_finite()));"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(f32::NAN);",
                "    assert_eq!(map_key_serializer.serialize_f32(1.0_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(3.14_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::INFINITY), Err(float_key_must_be_finite()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::NEG_INFINITY), Err(float_key_must_be_finite()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::NAN), Err(float_key_must_be_finite()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map_key_serializer.serialize_f32(1.0_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(0.0_f32), Ok(()));",
                "    assert_ne!(map_key_serializer.serialize_f32(f32::NAN), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(-1.0_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::MAX), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::MIN), Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, _value: f32) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(map_key_serializer.serialize_f32(1.0_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(0.0_f32), Ok(()));",
                "    assert_ne!(map_key_serializer.serialize_f32(f32::NAN), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(-1.0_f32), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::MAX), Ok(()));",
                "    assert_eq!(map_key_serializer.serialize_f32(f32::MIN), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::CustomError, 0, 0))",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, _value: f32) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::CustomError, 0, 0))",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(3.14);",
                "}"
              ],
              "oracle": [
                "    assert!(map_key_serializer.serialize_f32(3.14).is_ok());",
                "    assert!(map_key_serializer.serialize_f32(f32::INFINITY).is_err());",
                "    assert!(map_key_serializer.serialize_f32(f32::NAN).is_err());",
                "    ",
                "    let input_value = 3.14;",
                "    let result = map_key_serializer.serialize_f32(input_value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let result_with_custom_error = {",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    map_key_serializer.serialize_f32(input_value)",
                "    };",
                "    assert!(result_with_custom_error.is_err());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Err(Error::syntax(ErrorCode::CustomError, 0, 0))",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestFormatter;",
                "",
                "    impl Formatter for TestFormatter {",
                "        fn begin_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f32(&mut self, _writer: &mut TestWriter, _value: f32) -> Result<()> {",
                "            Err(Error::syntax(ErrorCode::CustomError, 0, 0))",
                "        }",
                "",
                "        fn end_string(&mut self, _writer: &mut TestWriter) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f32(3.14);",
                "    assert!(map_key_serializer.serialize_f32(3.14).is_ok());",
                "    assert!(map_key_serializer.serialize_f32(f32::INFINITY).is_err());",
                "    assert!(map_key_serializer.serialize_f32(f32::NAN).is_err());",
                "    ",
                "    let input_value = 3.14;",
                "    let result = map_key_serializer.serialize_f32(input_value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let result_with_custom_error = {",
                "    let mut writer = TestWriter;",
                "    let formatter = TestFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    map_key_serializer.serialize_f32(input_value)",
                "    };",
                "    assert!(result_with_custom_error.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: value.is_finite() at line 1020 is false\n",
        "expected return value/type: Err(float_key_must_be_finite())\n"
      ],
      "input_infer": "value: any non-finite f32 (e.g., NaN, positive infinity, negative infinity)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f32(f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f32(f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f32(f32::INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f32(f32::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}