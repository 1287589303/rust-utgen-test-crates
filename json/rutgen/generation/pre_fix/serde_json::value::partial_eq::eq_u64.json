{
  "name": "serde_json::value::partial_eq::eq_u64",
  "mod_info": {
    "name": "value::partial_eq",
    "loc": "src/value/mod.rs:930:1:930:16"
  },
  "visible": false,
  "loc": "src/value/partial_eq.rs:8:1:10:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Value must be of type Value containing either a Number with a valid u64 representation or any other type, with the other parameter being a valid u64 (e.g., 0, 1, 2, maximum u64 value 18446744073709551615).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from(42u64));",
                "    let result = eq_u64(&value, 42);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(100u64));",
                "    let result = eq_u64(&value, 99);",
                "    assert_eq!(result, false);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::String(\"test\".to_string());",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Array(vec![]);",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from(42u64));",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(100u64));",
                "    let result = eq_u64(&value, 99);",
                "    assert_eq!(result, false);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::String(\"test\".to_string());",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Array(vec![]);",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from(43u64));",
                "    let result = eq_u64(&value, 42);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(43u64));",
                "    let result = eq_u64(&value, 43);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::String(String::from(\"test\"));",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from(43u64));",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(43u64));",
                "    let result = eq_u64(&value, 43);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "    let value = Value::String(String::from(\"test\"));",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::String(String::from(\"test\"));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::String(String::from(\"test\"));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from(18446744073709551615u64));",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(42u64));",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 2);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::String(String::from(\"not a number\"));",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Array(vec![Value::Number(Number::from(10u64))]);",
                "    let result = eq_u64(&value, 10);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from(18446744073709551615u64));",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(42u64));",
                "    let result = eq_u64(&value, 42);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 2);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::String(String::from(\"not a number\"));",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Array(vec![Value::Number(Number::from(10u64))]);",
                "    let result = eq_u64(&value, 10);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 18446744073709551615);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(0));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(5));",
                "    let result = eq_u64(&value, 5);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(10));",
                "    let result = eq_u64(&value, 5);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::String(String::from(\"test\"));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Array(vec![Value::Number(Number::from(1)), Value::Number(Number::from(2))]);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(0));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(5));",
                "    let result = eq_u64(&value, 5);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(10));",
                "    let result = eq_u64(&value, 5);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::String(String::from(\"test\"));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Array(vec![Value::Number(Number::from(1)), Value::Number(Number::from(2))]);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(2u64));",
                "    let result = eq_u64(&value, 2);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(2u64));",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(u64::MAX));",
                "    let result = eq_u64(&value, u64::MAX);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(u64::MAX));",
                "    let result = eq_u64(&value, u64::MAX - 1);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(2u64));",
                "    let result = eq_u64(&value, 2);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(2u64));",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(u64::MAX));",
                "    let result = eq_u64(&value, u64::MAX);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(u64::MAX));",
                "    let result = eq_u64(&value, u64::MAX - 1);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::String(String::from(\"some string\"));",
                "    let result = eq_u64(&value, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Array(vec![Value::Number(Number::from(0u64))]);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::String(String::from(\"some string\"));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Array(vec![Value::Number(Number::from(0u64))]);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Array(vec![Value::Number(Number::from(10u64))]);",
                "    let result = eq_u64(&value, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let value = Value::Array(vec![Value::Number(Number::from(10u64))]);",
                "    let result = eq_u64(&value, 10);",
                "    assert_eq!(result, true);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(u64::MAX));",
                "    let result = eq_u64(&value, u64::MAX);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let value = Value::Array(vec![Value::Number(Number::from(10u64))]);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Array(vec![Value::Number(Number::from(10u64))]);",
                "    let result = eq_u64(&value, 10);",
                "    assert_eq!(result, true);",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(0u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    let value = Value::Number(Number::from(1u64));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    let value = Value::Number(Number::from(u64::MAX));",
                "    let result = eq_u64(&value, u64::MAX);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(0));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(1));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(100));",
                "    let result = eq_u64(&value, 100);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value = Value::Object(Map::new());",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(0));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Number(Number::from(1));",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Number(Number::from(100));",
                "    let result = eq_u64(&value, 100);",
                "    assert_eq!(result, true);",
                "    ",
                "    let value = Value::Null;",
                "    let result = eq_u64(&value, 0);",
                "    assert_eq!(result, false);",
                "    ",
                "    let value = Value::Bool(true);",
                "    let result = eq_u64(&value, 1);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}