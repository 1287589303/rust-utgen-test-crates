{
  "name": "serde_json::map::{impl#0}::values_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:335:5:339:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ValuesMut {\n            iter: self.map.values_mut(),\n        }\n"
      ],
      "input_infer": "valid input values for `self` include 0 to N map entries for `self.map` (where N is a non-negative integer) containing values of type `Value`, tested with and without the \"preserve_order\" feature enabled\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    let values_mut = map.values_mut();",
                "}"
              ],
              "oracle": [
                "    let mut map = Map::new();",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(std::mem::variant_count::<ValuesMut>(), 1);",
                "    assert_eq!(values_mut.iter, map.map.values_mut());",
                "    assert!(values_mut.iter.is_fused());",
                "    assert_eq!(values_mut.iter.len(), map.len());",
                "    assert!(values_mut.iter.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    let values_mut = map.values_mut();",
                "    let mut map = Map::new();",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(std::mem::variant_count::<ValuesMut>(), 1);",
                "    assert_eq!(values_mut.iter, map.map.values_mut());",
                "    assert!(values_mut.iter.is_fused());",
                "    assert_eq!(values_mut.iter.len(), map.len());",
                "    assert!(values_mut.iter.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::with_capacity(10);",
                "    let values_mut = map.values_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(values_mut.iter.len(), 0);",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 1);",
                "    assert!(values_mut.iter.next().is_some());",
                "    map.insert(\"key2\".to_string(), Value::Bool(false));",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 2);",
                "    assert!(values_mut.iter.next().is_some());",
                "    map.clear();",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut map = Map::with_capacity(10);",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 0);",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 1);",
                "    assert!(values_mut.iter.next().is_some());",
                "    map.insert(\"key2\".to_string(), Value::Bool(false));",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 2);",
                "    assert!(values_mut.iter.next().is_some());",
                "    map.clear();",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    let values_mut = map.values_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(values_mut.iter.count(), 1);",
                "    assert!(matches!(values_mut.iter.next(), Some(Value::Bool(true))));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(!map.is_empty());",
                "    values_mut.iter.next(); // Consume the iterator",
                "    assert_eq!(values_mut.iter.count(), 0);"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    let values_mut = map.values_mut();",
                "    assert_eq!(values_mut.iter.count(), 1);",
                "    assert!(matches!(values_mut.iter.next(), Some(Value::Bool(true))));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(!map.is_empty());",
                "    values_mut.iter.next(); // Consume the iterator",
                "    assert_eq!(values_mut.iter.count(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(5)));",
                "    let values_mut = map.values_mut();",
                "}"
              ],
              "oracle": [
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(5)));",
                "    let values_mut = map.values_mut();",
                "    assert!(values_mut.iter.len() == 2);",
                "    assert!(values_mut.iter.next().unwrap() == &mut Value::Bool(true) || values_mut.iter.next().unwrap() == &mut Value::Number(Number::from(5)));",
                "    assert!(values_mut.iter.next().unwrap() == &mut Value::Number(Number::from(5)) || values_mut.iter.next().unwrap() == &mut Value::Bool(true));"
              ],
              "code": [
                "{",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(5)));",
                "    let values_mut = map.values_mut();",
                "    let mut map = Map::new();",
                "    map.insert(\"key1\".to_string(), Value::Bool(true));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(5)));",
                "    let values_mut = map.values_mut();",
                "    assert!(values_mut.iter.len() == 2);",
                "    assert!(values_mut.iter.next().unwrap() == &mut Value::Bool(true) || values_mut.iter.next().unwrap() == &mut Value::Number(Number::from(5)));",
                "    assert!(values_mut.iter.next().unwrap() == &mut Value::Number(Number::from(5)) || values_mut.iter.next().unwrap() == &mut Value::Bool(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[cfg(feature = \"preserve_order\")]",
                "    {",
                "        let mut map = Map::new();",
                "        map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "        map.insert(\"key2\".to_string(), Value::Array(vec![Value::Null]));",
                "        let values_mut = map.values_mut();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(values_mut.iter.len(), 2);",
                "    assert_eq!(values_mut.iter.next(), Some(&mut Value::String(\"value1\".to_string())));",
                "    assert_eq!(values_mut.iter.next(), Some(&mut Value::Array(vec![Value::Null])));",
                "    values_mut.iter.next(); // Consume the iterator fully",
                "    assert_eq!(values_mut.iter.next(), None);"
              ],
              "code": [
                "{",
                "    #[cfg(feature = \"preserve_order\")]",
                "    {",
                "        let mut map = Map::new();",
                "        map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "        map.insert(\"key2\".to_string(), Value::Array(vec![Value::Null]));",
                "        let values_mut = map.values_mut();",
                "    }",
                "    assert_eq!(values_mut.iter.len(), 2);",
                "    assert_eq!(values_mut.iter.next(), Some(&mut Value::String(\"value1\".to_string())));",
                "    assert_eq!(values_mut.iter.next(), Some(&mut Value::Array(vec![Value::Null])));",
                "    values_mut.iter.next(); // Consume the iterator fully",
                "    assert_eq!(values_mut.iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[cfg(feature = \"preserve_order\")]",
                "    {",
                "        let mut map = Map::with_capacity(5);",
                "        map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "        map.insert(\"key2\".to_string(), Value::Number(Number::from(10)));",
                "        let values_mut = map.values_mut();",
                "    }",
                "}"
              ],
              "oracle": [
                "    let mut map = Map::with_capacity(5);",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(10)));",
                "    let values_mut = map.values_mut();",
                "    assert!(!values_mut.iter.is_empty());",
                "    assert_eq!(values_mut.iter.len(), 2);"
              ],
              "code": [
                "{",
                "    #[cfg(feature = \"preserve_order\")]",
                "    {",
                "        let mut map = Map::with_capacity(5);",
                "        map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "        map.insert(\"key2\".to_string(), Value::Number(Number::from(10)));",
                "        let values_mut = map.values_mut();",
                "    }",
                "    let mut map = Map::with_capacity(5);",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    map.insert(\"key2\".to_string(), Value::Number(Number::from(10)));",
                "    let values_mut = map.values_mut();",
                "    assert!(!values_mut.iter.is_empty());",
                "    assert_eq!(values_mut.iter.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}