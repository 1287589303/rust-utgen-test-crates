{
  "name": "serde_json::ser::to_string",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2237:1:2247:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: to_vec(value) matches core::result::Result::Err(err) at line 2241 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "value: any type that implements Serialize and contains non-string keys in a map, or a type with a failing Serialize implementation\n",
      "answers": [
        {
          "uses": [
            "use serde::Serialize;",
            "use serde::ser::Serializer;",
            "use std::collections::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use serde::ser::Serializer;",
                "    use serde::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    struct NonStringKey;",
                "",
                "    impl Serialize for NonStringKey {",
                "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            Err(ser::Error::custom(\"failed to serialize NonStringKey\"))",
                "        }",
                "    }",
                "",
                "    let mut data: HashMap<NonStringKey, String> = HashMap::new();",
                "    data.insert(NonStringKey, \"value\".to_string());",
                "",
                "    let _result: Result<String> = to_string(&data);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(_result, Err(_)));",
                "    assert!(matches!(_result.unwrap_err().to_string(), \"failed to serialize NonStringKey\"));",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.is_ok(), false);",
                "    assert!(std::panic::catch_unwind(|| { let _ = to_string(&data); }).is_err());"
              ],
              "code": [
                "{",
                "    use serde::ser::Serializer;",
                "    use serde::Serialize;",
                "    use std::collections::HashMap;",
                "",
                "    struct NonStringKey;",
                "",
                "    impl Serialize for NonStringKey {",
                "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            Err(ser::Error::custom(\"failed to serialize NonStringKey\"))",
                "        }",
                "    }",
                "",
                "    let mut data: HashMap<NonStringKey, String> = HashMap::new();",
                "    data.insert(NonStringKey, \"value\".to_string());",
                "",
                "    let _result: Result<String> = to_string(&data);",
                "    assert!(matches!(_result, Err(_)));",
                "    assert!(matches!(_result.unwrap_err().to_string(), \"failed to serialize NonStringKey\"));",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.is_ok(), false);",
                "    assert!(std::panic::catch_unwind(|| { let _ = to_string(&data); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use serde::ser::Serializer;",
                "    use serde::Serialize;",
                "",
                "    struct FailingSerialization;",
                "",
                "    impl Serialize for FailingSerialization {",
                "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            Err(ser::Error::custom(\"serialization failed\"))",
                "        }",
                "    }",
                "",
                "    let value = FailingSerialization;",
                "",
                "    let _result: Result<String> = to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.err().unwrap().to_string(), \"serialization failed\");"
              ],
              "code": [
                "{",
                "    use serde::ser::Serializer;",
                "    use serde::Serialize;",
                "",
                "    struct FailingSerialization;",
                "",
                "    impl Serialize for FailingSerialization {",
                "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            Err(ser::Error::custom(\"serialization failed\"))",
                "        }",
                "    }",
                "",
                "    let value = FailingSerialization;",
                "",
                "    let _result: Result<String> = to_string(&value);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.err().unwrap().to_string(), \"serialization failed\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: to_vec(value) matches core::result::Result::Ok(val) at line 2241 is true\n",
        "expected return value/type: Ok(string)\n"
      ],
      "input_infer": "Test input conditions/ranges: Non-empty data structures that implement Serialize and contain valid UTF-8 characters, including boundary cases like empty strings, maps with string keys, collections of valid types, and primitive values like integers and booleans.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = \"\";",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    let value = \"\";",
                "    let result = serde_json::to_string(&value);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), \"\");"
              ],
              "code": [
                "{",
                "    let value = \"\";",
                "    let _ = serde_json::to_string(&value);",
                "    let value = \"\";",
                "    let result = serde_json::to_string(&value);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = \"example\";",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serde_json::to_string(&\"example\"), Ok(String::from(r#\"\"example\"\"#)));"
              ],
              "code": [
                "{",
                "    let value = \"example\";",
                "    let _ = serde_json::to_string(&value);",
                "    assert_eq!(serde_json::to_string(&\"example\"), Ok(String::from(r#\"\"example\"\"#)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = 42;",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(serde_json::to_string(&42).is_ok());",
                "    assert_eq!(serde_json::to_string(&42).unwrap(), \"42\");",
                "    assert!(serde_json::to_string(&\"test string\").is_ok());",
                "    assert_eq!(serde_json::to_string(&\"test string\").unwrap(), \"\\\"test string\\\"\");",
                "    assert!(serde_json::to_string(&vec![1, 2, 3]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![1, 2, 3]).unwrap(), \"[1,2,3]\");",
                "    assert!(serde_json::to_string(&true).is_ok());",
                "    assert_eq!(serde_json::to_string(&true).unwrap(), \"true\");",
                "    assert!(serde_json::to_string(&false).is_ok());",
                "    assert_eq!(serde_json::to_string(&false).unwrap(), \"false\");",
                "    assert!(serde_json::to_string(&None::<String>).is_ok());",
                "    assert_eq!(serde_json::to_string(&None::<String>).unwrap(), \"null\");",
                "    assert!(serde_json::to_string(&Some(\"some value\")).is_ok());",
                "    assert_eq!(serde_json::to_string(&Some(\"some value\")).unwrap(), \"\\\"some value\\\"\");",
                "    assert!(serde_json::to_string(&vec![\"key1\", \"key2\"]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![\"key1\", \"key2\"]).unwrap(), \"[\\\"key1\\\",\\\"key2\\\"]\");",
                "    assert!(serde_json::to_string(&{\"key\": \"value\"}).is_ok());",
                "    assert_eq!(serde_json::to_string(&{\"key\": \"value\"}).unwrap(), \"{\\\"key\\\":\\\"value\\\"}\");",
                "    assert!(serde_json::to_string(&[(\"key\", \"value\"), (\"key2\", \"value2\")]).is_ok());",
                "    assert_eq!(serde_json::to_string(&[(\"key\", \"value\"), (\"key2\", \"value2\")]).unwrap(), \"[{\\\"key\\\":\\\"value\\\"},{\\\"key2\\\":\\\"value2\\\"}]\");"
              ],
              "code": [
                "{",
                "    let value = 42;",
                "    let _ = serde_json::to_string(&value);",
                "    assert!(serde_json::to_string(&42).is_ok());",
                "    assert_eq!(serde_json::to_string(&42).unwrap(), \"42\");",
                "    assert!(serde_json::to_string(&\"test string\").is_ok());",
                "    assert_eq!(serde_json::to_string(&\"test string\").unwrap(), \"\\\"test string\\\"\");",
                "    assert!(serde_json::to_string(&vec![1, 2, 3]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![1, 2, 3]).unwrap(), \"[1,2,3]\");",
                "    assert!(serde_json::to_string(&true).is_ok());",
                "    assert_eq!(serde_json::to_string(&true).unwrap(), \"true\");",
                "    assert!(serde_json::to_string(&false).is_ok());",
                "    assert_eq!(serde_json::to_string(&false).unwrap(), \"false\");",
                "    assert!(serde_json::to_string(&None::<String>).is_ok());",
                "    assert_eq!(serde_json::to_string(&None::<String>).unwrap(), \"null\");",
                "    assert!(serde_json::to_string(&Some(\"some value\")).is_ok());",
                "    assert_eq!(serde_json::to_string(&Some(\"some value\")).unwrap(), \"\\\"some value\\\"\");",
                "    assert!(serde_json::to_string(&vec![\"key1\", \"key2\"]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![\"key1\", \"key2\"]).unwrap(), \"[\\\"key1\\\",\\\"key2\\\"]\");",
                "    assert!(serde_json::to_string(&{\"key\": \"value\"}).is_ok());",
                "    assert_eq!(serde_json::to_string(&{\"key\": \"value\"}).unwrap(), \"{\\\"key\\\":\\\"value\\\"}\");",
                "    assert!(serde_json::to_string(&[(\"key\", \"value\"), (\"key2\", \"value2\")]).is_ok());",
                "    assert_eq!(serde_json::to_string(&[(\"key\", \"value\"), (\"key2\", \"value2\")]).unwrap(), \"[{\\\"key\\\":\\\"value\\\"},{\\\"key2\\\":\\\"value2\\\"}]\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = true;",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(serde_json::to_string(&true).is_ok());",
                "    assert_eq!(serde_json::to_string(&true).unwrap(), \"true\");",
                "    assert!(serde_json::to_string(&42).is_ok());",
                "    assert_eq!(serde_json::to_string(&42).unwrap(), \"42\");",
                "    assert!(serde_json::to_string(&\"hello\").is_ok());",
                "    assert_eq!(serde_json::to_string(&\"hello\").unwrap(), \"\\\"hello\\\"\");",
                "    assert!(serde_json::to_string(&vec![1, 2, 3]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![1, 2, 3]).unwrap(), \"[1,2,3]\");",
                "    assert!(serde_json::to_string(&Some(\"test\")).is_ok());",
                "    assert_eq!(serde_json::to_string(&Some(\"test\")).unwrap(), \"\\\"test\\\"\");",
                "    assert!(serde_json::to_string(&None::<&str>).is_ok());",
                "    assert_eq!(serde_json::to_string(&None::<&str>).unwrap(), \"null\");",
                "    assert!(serde_json::to_string(&vec![\"a\", \"b\", \"c\"]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![\"a\", \"b\", \"c\"]).unwrap(), \"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\");"
              ],
              "code": [
                "{",
                "    let value = true;",
                "    let _ = serde_json::to_string(&value);",
                "    assert!(serde_json::to_string(&true).is_ok());",
                "    assert_eq!(serde_json::to_string(&true).unwrap(), \"true\");",
                "    assert!(serde_json::to_string(&42).is_ok());",
                "    assert_eq!(serde_json::to_string(&42).unwrap(), \"42\");",
                "    assert!(serde_json::to_string(&\"hello\").is_ok());",
                "    assert_eq!(serde_json::to_string(&\"hello\").unwrap(), \"\\\"hello\\\"\");",
                "    assert!(serde_json::to_string(&vec![1, 2, 3]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![1, 2, 3]).unwrap(), \"[1,2,3]\");",
                "    assert!(serde_json::to_string(&Some(\"test\")).is_ok());",
                "    assert_eq!(serde_json::to_string(&Some(\"test\")).unwrap(), \"\\\"test\\\"\");",
                "    assert!(serde_json::to_string(&None::<&str>).is_ok());",
                "    assert_eq!(serde_json::to_string(&None::<&str>).unwrap(), \"null\");",
                "    assert!(serde_json::to_string(&vec![\"a\", \"b\", \"c\"]).is_ok());",
                "    assert_eq!(serde_json::to_string(&vec![\"a\", \"b\", \"c\"]).unwrap(), \"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = std::collections::HashMap::<String, String>::from([",
                "        (\"key1\".to_string(), \"value1\".to_string()),",
                "        (\"key2\".to_string(), \"value2\".to_string()),",
                "    ]);",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_ , Ok(\"{\"key1\":\"value1\",\"key2\":\"value2\"}\".to_string()));"
              ],
              "code": [
                "{",
                "    let value = std::collections::HashMap::<String, String>::from([",
                "        (\"key1\".to_string(), \"value1\".to_string()),",
                "        (\"key2\".to_string(), \"value2\".to_string()),",
                "    ]);",
                "    let _ = serde_json::to_string(&value);",
                "    assert_eq!(_ , Ok(\"{\"key1\":\"value1\",\"key2\":\"value2\"}\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = vec![1, 2, 3, 4, 5];",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serde_json::to_string(&vec![1, 2, 3, 4, 5]).is_ok(), true);",
                "    assert!(serde_json::to_string(&vec![1, 2, 3, 4, 5]).unwrap() == \"[1,2,3,4,5]\");",
                "    assert!(serde_json::to_string(&vec![1, 2, 3, 4, 5]).unwrap_err().is_none());"
              ],
              "code": [
                "{",
                "    let value = vec![1, 2, 3, 4, 5];",
                "    let _ = serde_json::to_string(&value);",
                "    assert_eq!(serde_json::to_string(&vec![1, 2, 3, 4, 5]).is_ok(), true);",
                "    assert!(serde_json::to_string(&vec![1, 2, 3, 4, 5]).unwrap() == \"[1,2,3,4,5]\");",
                "    assert!(serde_json::to_string(&vec![1, 2, 3, 4, 5]).unwrap_err().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = vec![\"string\", 123, true];",
                "    let _ = serde_json::to_string(&value);",
                "}"
              ],
              "oracle": [
                "    assert!(serde_json::to_string(&vec![\"string\", 123, true]).is_ok());"
              ],
              "code": [
                "{",
                "    let value = vec![\"string\", 123, true];",
                "    let _ = serde_json::to_string(&value);",
                "    assert!(serde_json::to_string(&vec![\"string\", 123, true]).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}