{
  "name": "serde_json::read::{impl#12}::parse_str_raw",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": true,
  "loc": "src/read.rs:794:5:799:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a mutable reference to an instance of a type implementing Read, and scratch must be a mutable reference to a non-empty Vec<u8> containing valid byte data; expect Result to be Ok(Reference) on valid input or an Error type on invalid input.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct ValidReader {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl<'de> Read<'de> for ValidReader {",
                "        const should_early_return_if_failed: bool = false;",
                "",
                "        fn next(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                self.position += 1;",
                "                Ok(Some(self.data[self.position - 1]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn peek(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                Ok(Some(self.data[self.position]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn discard(&mut self) {}",
                "",
                "        fn position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn peek_position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn byte_offset(&self) -> usize {",
                "            self.position",
                "        }",
                "",
                "        fn parse_str<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, str>> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn parse_str_raw<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, [u8]>> {",
                "            Ok(Reference::Borrowed(&scratch[..]))",
                "        }",
                "",
                "        fn ignore_str(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn decode_hex_escape(&mut self) -> Result<u16> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn set_failed(&mut self, _: &mut bool) {}",
                "    }",
                "",
                "    let mut reader = ValidReader {",
                "        data: b\"valid input\".to_vec(),",
                "        position: 0,",
                "    };",
                "    let mut scratch = vec![b'a', b'b', b'c'];",
                "",
                "    let _result = reader.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reader.position(), Position::default());",
                "    assert_eq!(reader.byte_offset(), 0);",
                "    assert!(reader.parse_str_raw(&mut scratch).is_ok());",
                "    assert_eq!(reader.byte_offset(), 0);",
                "    assert_eq!(reader.peek().unwrap().unwrap(), b'v');",
                "    assert_eq!(reader.next().unwrap().unwrap(), b'v');",
                "    assert_eq!(reader.byte_offset(), 1);",
                "    assert!(reader.peek().unwrap().is_some());",
                "    assert_eq!(reader.peek().unwrap().unwrap(), b'a');",
                "    assert!(reader.next().is_ok());",
                "    assert_eq!(reader.byte_offset(), 2);",
                "    assert!(reader.next().is_ok());",
                "    assert_eq!(reader.byte_offset(), 3);"
              ],
              "code": [
                "{",
                "    struct ValidReader {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl<'de> Read<'de> for ValidReader {",
                "        const should_early_return_if_failed: bool = false;",
                "",
                "        fn next(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                self.position += 1;",
                "                Ok(Some(self.data[self.position - 1]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn peek(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                Ok(Some(self.data[self.position]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn discard(&mut self) {}",
                "",
                "        fn position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn peek_position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn byte_offset(&self) -> usize {",
                "            self.position",
                "        }",
                "",
                "        fn parse_str<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, str>> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn parse_str_raw<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, [u8]>> {",
                "            Ok(Reference::Borrowed(&scratch[..]))",
                "        }",
                "",
                "        fn ignore_str(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn decode_hex_escape(&mut self) -> Result<u16> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn set_failed(&mut self, _: &mut bool) {}",
                "    }",
                "",
                "    let mut reader = ValidReader {",
                "        data: b\"valid input\".to_vec(),",
                "        position: 0,",
                "    };",
                "    let mut scratch = vec![b'a', b'b', b'c'];",
                "",
                "    let _result = reader.parse_str_raw(&mut scratch);",
                "    assert_eq!(reader.position(), Position::default());",
                "    assert_eq!(reader.byte_offset(), 0);",
                "    assert!(reader.parse_str_raw(&mut scratch).is_ok());",
                "    assert_eq!(reader.byte_offset(), 0);",
                "    assert_eq!(reader.peek().unwrap().unwrap(), b'v');",
                "    assert_eq!(reader.next().unwrap().unwrap(), b'v');",
                "    assert_eq!(reader.byte_offset(), 1);",
                "    assert!(reader.peek().unwrap().is_some());",
                "    assert_eq!(reader.peek().unwrap().unwrap(), b'a');",
                "    assert!(reader.next().is_ok());",
                "    assert_eq!(reader.byte_offset(), 2);",
                "    assert!(reader.next().is_ok());",
                "    assert_eq!(reader.byte_offset(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InvalidReader {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl<'de> Read<'de> for InvalidReader {",
                "        const should_early_return_if_failed: bool = false;",
                "",
                "        fn next(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                self.position += 1;",
                "                Ok(Some(self.data[self.position - 1]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn peek(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                Ok(Some(self.data[self.position]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn discard(&mut self) {}",
                "",
                "        fn position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn peek_position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn byte_offset(&self) -> usize {",
                "            self.position",
                "        }",
                "",
                "        fn parse_str<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, str>> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn parse_str_raw<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, [u8]>> {",
                "            Err(Error::custom(\"Scratch vector is empty\"))",
                "        }",
                "",
                "        fn ignore_str(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn decode_hex_escape(&mut self) -> Result<u16> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn set_failed(&mut self, _: &mut bool) {}",
                "    }",
                "",
                "    let mut reader = InvalidReader {",
                "        data: b\"invalid input\".to_vec(),",
                "        position: 0,",
                "    };",
                "    let mut scratch = vec![];",
                "",
                "    let _result = reader.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"Scratch vector is empty\");"
              ],
              "code": [
                "{",
                "    struct InvalidReader {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl<'de> Read<'de> for InvalidReader {",
                "        const should_early_return_if_failed: bool = false;",
                "",
                "        fn next(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                self.position += 1;",
                "                Ok(Some(self.data[self.position - 1]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn peek(&mut self) -> Result<Option<u8>> {",
                "            if self.position < self.data.len() {",
                "                Ok(Some(self.data[self.position]))",
                "            } else {",
                "                Ok(None)",
                "            }",
                "        }",
                "",
                "        fn discard(&mut self) {}",
                "",
                "        fn position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn peek_position(&self) -> Position {",
                "            Position::default()",
                "        }",
                "",
                "        fn byte_offset(&self) -> usize {",
                "            self.position",
                "        }",
                "",
                "        fn parse_str<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, str>> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn parse_str_raw<'s>(",
                "            &'s mut self,",
                "            scratch: &'s mut Vec<u8>,",
                "        ) -> Result<Reference<'de, 's, [u8]>> {",
                "            Err(Error::custom(\"Scratch vector is empty\"))",
                "        }",
                "",
                "        fn ignore_str(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn decode_hex_escape(&mut self) -> Result<u16> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn set_failed(&mut self, _: &mut bool) {}",
                "    }",
                "",
                "    let mut reader = InvalidReader {",
                "        data: b\"invalid input\".to_vec(),",
                "        position: 0,",
                "    };",
                "    let mut scratch = vec![];",
                "",
                "    let _result = reader.parse_str_raw(&mut scratch);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().to_string(), \"Scratch vector is empty\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}