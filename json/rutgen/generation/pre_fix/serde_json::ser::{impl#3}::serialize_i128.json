{
  "name": "serde_json::ser::{impl#3}::serialize_i128",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:112:5:116:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid i128 values from -2^127 to 2^127 - 1, and values including boundary cases like -2^127, -1, 0, 1, and 2^127 - 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(i128::MIN);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_i128(i128::MIN), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(i128::MAX), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(0), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(1234567890123456789i128), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(-1234567890123456789i128), Ok(()));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(i128::MIN);",
                "    assert_eq!(serializer.serialize_i128(i128::MIN), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(i128::MAX), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(0), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(1234567890123456789i128), Ok(()));",
                "    assert_eq!(serializer.serialize_i128(-1234567890123456789i128), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(-1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer, DummyWriter);",
                "    assert!(serializer.serialize_i128(-1).is_ok());",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert!(serializer.formatter.write_i128(&mut serializer.writer, -1).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MIN).is_ok());",
                "    assert!(serializer.serialize_i128(0).is_ok());",
                "    assert!(serializer.serialize_i128(1234567890123456789).is_ok());",
                "    assert!(!serializer.serialize_i128(i128::from_str_radix(\"123456789012345678901\", 10).is_err()));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(-1);",
                "    assert_eq!(serializer.writer, DummyWriter);",
                "    assert!(serializer.serialize_i128(-1).is_ok());",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert!(serializer.formatter.write_i128(&mut serializer.writer, -1).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MIN).is_ok());",
                "    assert!(serializer.serialize_i128(0).is_ok());",
                "    assert!(serializer.serialize_i128(1234567890123456789).is_ok());",
                "    assert!(!serializer.serialize_i128(i128::from_str_radix(\"123456789012345678901\", 10).is_err()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer.write(&[0; 16]).unwrap(), 16);",
                "    assert!(serializer.serialize_i128(0).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MIN).is_ok());",
                "    assert!(serializer.serialize_i128(1234567890123456789).is_ok());",
                "    assert!(serializer.serialize_i128(-1234567890123456789).is_ok());"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(0);",
                "    assert_eq!(serializer.writer.write(&[0; 16]).unwrap(), 16);",
                "    assert!(serializer.serialize_i128(0).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MIN).is_ok());",
                "    assert!(serializer.serialize_i128(1234567890123456789).is_ok());",
                "    assert!(serializer.serialize_i128(-1234567890123456789).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));",
                "    assert_eq!(serializer.writer.flush(), Ok(()));",
                "    assert_eq!(serializer.writer.write(&[0; 16]), Ok(16));",
                "    assert!(matches!(serializer.serialize_i128(i128::MAX), Ok(())));",
                "    assert!(matches!(serializer.serialize_i128(i128::MIN), Ok(())));",
                "    assert!(matches!(serializer.serialize_i128(0), Ok(())));",
                "    assert!(matches!(serializer.serialize_i128(-1), Ok(())));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(1);",
                "    assert_eq!(_result, Ok(()));",
                "    assert_eq!(serializer.writer.flush(), Ok(()));",
                "    assert_eq!(serializer.writer.write(&[0; 16]), Ok(16));",
                "    assert!(matches!(serializer.serialize_i128(i128::MAX), Ok(())));",
                "    assert!(matches!(serializer.serialize_i128(i128::MIN), Ok(())));",
                "    assert!(matches!(serializer.serialize_i128(0), Ok(())));",
                "    assert!(matches!(serializer.serialize_i128(-1), Ok(())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(i128::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer.write(b\"i128 max value serialized\"), Ok(39));",
                "    assert!(serializer.formatter.write_i128(&mut serializer.writer, i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MIN).is_ok());",
                "    assert!(serializer.serialize_i128(0).is_ok());",
                "    assert!(serializer.serialize_i128(1234567890123456789).is_ok());",
                "    assert!(serializer.serialize_i128(-1234567890123456789).is_ok());"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(_buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _ = serializer.serialize_i128(i128::MAX);",
                "    assert_eq!(serializer.writer.write(b\"i128 max value serialized\"), Ok(39));",
                "    assert!(serializer.formatter.write_i128(&mut serializer.writer, i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MAX).is_ok());",
                "    assert!(serializer.serialize_i128(i128::MIN).is_ok());",
                "    assert!(serializer.serialize_i128(0).is_ok());",
                "    assert!(serializer.serialize_i128(1234567890123456789).is_ok());",
                "    assert!(serializer.serialize_i128(-1234567890123456789).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}