{
  "name": "serde_json::ser::{impl#3}::serialize_bytes",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:193:5:197:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: non-empty byte arrays of size from 1 to 64 bytes, edge case of empty byte array, valid UTF-8 byte sequences, byte arrays with all zeroes, byte arrays filled with maximum byte values (255), and arrays with special characters including escape sequences.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[1, 2, 3, 4, 5];",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"[1,2,3,4,5]\");",
                "    assert!(!buffer.is_empty());",
                "    assert_eq!(serializer.writer.byte_offset(), 8);",
                "    assert_eq!(buffer.len(), 8);",
                "    assert!(serializer.serialize_bytes(&[]).is_ok());",
                "    assert!(serializer.serialize_bytes(&[255]).is_ok());",
                "    assert!(serializer.serialize_bytes(&[0]).is_ok());"
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[1, 2, 3, 4, 5];",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer, b\"[1,2,3,4,5]\");",
                "    assert!(!buffer.is_empty());",
                "    assert_eq!(serializer.writer.byte_offset(), 8);",
                "    assert_eq!(buffer.len(), 8);",
                "    assert!(serializer.serialize_bytes(&[]).is_ok());",
                "    assert!(serializer.serialize_bytes(&[255]).is_ok());",
                "    assert!(serializer.serialize_bytes(&[0]).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[];",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"[]\");",
                "    assert!(!buffer.is_empty());",
                "    assert!(buffer.len() > 0);",
                "    assert!(buffer[0] == b'[');",
                "    assert!(buffer[buffer.len() - 1] == b']');"
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[];",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer, b\"[]\");",
                "    assert!(!buffer.is_empty());",
                "    assert!(buffer.len() > 0);",
                "    assert!(buffer[0] == b'[');",
                "    assert!(buffer[buffer.len() - 1] == b']');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[255; 64];",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 64);",
                "    assert_eq!(buffer[0], 255);",
                "    assert_eq!(buffer[1], 255);",
                "    assert_eq!(buffer[2], 255);",
                "    assert_eq!(buffer[63], 255);",
                "    assert!(buffer.iter().all(|&byte| byte == 255));"
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[255; 64];",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer.len(), 64);",
                "    assert_eq!(buffer[0], 255);",
                "    assert_eq!(buffer[1], 255);",
                "    assert_eq!(buffer[2], 255);",
                "    assert_eq!(buffer[63], 255);",
                "    assert!(buffer.iter().all(|&byte| byte == 255));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = b\"Hello, world!\";",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"Hello, world!\");",
                "    assert!(buffer.len() > 0);",
                "    assert!(buffer.contains(&b'H'));",
                "    assert!(buffer.contains(&b'e'));",
                "    assert!(buffer.contains(&b'l'));",
                "    assert!(buffer.contains(&b'o'));",
                "    assert!(buffer.contains(&b','));",
                "    assert!(buffer.contains(&b' '));",
                "    assert!(buffer.contains(&b'w'));",
                "    assert!(buffer.contains(&b'o'));",
                "    assert!(buffer.contains(&b'r'));",
                "    assert!(buffer.contains(&b'l'));",
                "    assert!(buffer.contains(&b'd'));",
                "    assert!(buffer.contains(&b'!'));"
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = b\"Hello, world!\";",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer, b\"Hello, world!\");",
                "    assert!(buffer.len() > 0);",
                "    assert!(buffer.contains(&b'H'));",
                "    assert!(buffer.contains(&b'e'));",
                "    assert!(buffer.contains(&b'l'));",
                "    assert!(buffer.contains(&b'o'));",
                "    assert!(buffer.contains(&b','));",
                "    assert!(buffer.contains(&b' '));",
                "    assert!(buffer.contains(&b'w'));",
                "    assert!(buffer.contains(&b'o'));",
                "    assert!(buffer.contains(&b'r'));",
                "    assert!(buffer.contains(&b'l'));",
                "    assert!(buffer.contains(&b'd'));",
                "    assert!(buffer.contains(&b'!'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[0; 64];",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 64);",
                "    assert_eq!(&buffer, &[0; 64]);",
                "    assert!(serializer.writer.is_empty());"
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[0; 64];",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer.len(), 64);",
                "    assert_eq!(&buffer, &[0; 64]);",
                "    assert!(serializer.writer.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = b\"Special characters: \\n \\t \\\\ \\\" \";",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"Special characters: \\n \\t \\\\ \\\" \");",
                "    assert!(buffer.len() > 0);",
                "    assert!(buffer.contains(&b'S'));",
                "    assert!(buffer.contains(&b' '));",
                "    assert!(buffer.contains(&b'\"'));",
                "    assert!(buffer.contains(&b'\\\\'));",
                "    assert!(buffer.contains(&b'\\t'));",
                "    assert!(buffer.contains(&b'\\n'));"
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = b\"Special characters: \\n \\t \\\\ \\\" \";",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer, b\"Special characters: \\n \\t \\\\ \\\" \");",
                "    assert!(buffer.len() > 0);",
                "    assert!(buffer.contains(&b'S'));",
                "    assert!(buffer.contains(&b' '));",
                "    assert!(buffer.contains(&b'\"'));",
                "    assert!(buffer.contains(&b'\\\\'));",
                "    assert!(buffer.contains(&b'\\t'));",
                "    assert!(buffer.contains(&b'\\n'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[128; 64]; // Using a mid-range byte value",
                "    serializer.serialize_bytes(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 128); // Check that the length of the written buffer is correct.",
                "    assert_eq!(buffer[0], 0x80); // Verify the first byte is the expected mid-range value.",
                "    assert_eq!(buffer[63], 0x80); // Verify the byte at position 63 is the expected mid-range value.",
                "    assert!(buffer.iter().all(|&b| b == 0x80)); // Ensure all bytes are the expected mid-range value."
              ],
              "code": [
                "{",
                "    let mut buffer = vec![];",
                "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
                "    let value: &[u8] = &[128; 64]; // Using a mid-range byte value",
                "    serializer.serialize_bytes(value).unwrap();",
                "    assert_eq!(buffer.len(), 128); // Check that the length of the written buffer is correct.",
                "    assert_eq!(buffer[0], 0x80); // Verify the first byte is the expected mid-range value.",
                "    assert_eq!(buffer[63], 0x80); // Verify the byte at position 63 is the expected mid-range value.",
                "    assert!(buffer.iter().all(|&b| b == 0x80)); // Ensure all bytes are the expected mid-range value.",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}