{
  "name": "serde_json::ser::{impl#11}::serialize_tuple_struct",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1109:5:1115:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "_len: any integer value (0 or greater)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    ",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = CompactFormatter;",
                "    ",
                "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
                "    let _result = serializer.serialize_tuple_struct(\"tuple_struct_name\", 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    ",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = CompactFormatter;",
                "    ",
                "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
                "    let _result = serializer.serialize_tuple_struct(\"tuple_struct_name\", 0);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    ",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = CompactFormatter;",
                "    ",
                "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
                "    let _result = serializer.serialize_tuple_struct(\"tuple_struct_name\", 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    ",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = CompactFormatter;",
                "    ",
                "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
                "    let _result = serializer.serialize_tuple_struct(\"tuple_struct_name\", 1);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    ",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = CompactFormatter;",
                "    ",
                "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
                "    let _result = serializer.serialize_tuple_struct(\"tuple_struct_name\", 100);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.err().unwrap(), key_must_be_a_string());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    ",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter;",
                "    let formatter = CompactFormatter;",
                "    ",
                "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
                "    let _result = serializer.serialize_tuple_struct(\"tuple_struct_name\", 100);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.err().unwrap(), key_must_be_a_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}