{
  "name": "serde_json::read::{impl#10}::parse_str_raw",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": true,
  "loc": "src/read.rs:718:5:723:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.delegate must be initialized and contain valid input data, scratch must be a mutable reference to a Vec<u8> with at least 0 to 256 bytes available for storage.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"\";",
                "    let mut scratch: Vec<u8> = Vec::new();",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().is_borrowed());",
                "    assert_eq!(scratch.len(), 0);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"\";",
                "    let mut scratch: Vec<u8> = Vec::new();",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().is_borrowed());",
                "    assert_eq!(scratch.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"Hello, World!\";",
                "    let mut scratch: Vec<u8> = vec![0; 16];",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let reference = result.unwrap();",
                "    assert!(matches!(reference, Reference::Borrowed(_)));",
                "    assert_eq!(reference.borrowed().len(), 13);",
                "    assert_eq!(reference.borrowed(), b\"Hello, World!\");",
                "    assert!(scratch.iter().all(|&x| x == 0));"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"Hello, World!\";",
                "    let mut scratch: Vec<u8> = vec![0; 16];",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "    assert!(result.is_ok());",
                "    let reference = result.unwrap();",
                "    assert!(matches!(reference, Reference::Borrowed(_)));",
                "    assert_eq!(reference.borrowed().len(), 13);",
                "    assert_eq!(reference.borrowed(), b\"Hello, World!\");",
                "    assert!(scratch.iter().all(|&x| x == 0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"Exact Size Test\";",
                "    let mut scratch: Vec<u8> = vec![0; 15];",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let reference = result.unwrap();",
                "    assert!(matches!(reference, Reference::Borrowed(_) | Reference::Copied(_)));",
                "    assert_eq!(scratch.len(), 15);",
                "    assert_eq!(scratch, &b\"Exact Size Test\"[..]);",
                "    assert_eq!(str_read.delegate.index, 15);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"Exact Size Test\";",
                "    let mut scratch: Vec<u8> = vec![0; 15];",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "    assert!(result.is_ok());",
                "    let reference = result.unwrap();",
                "    assert!(matches!(reference, Reference::Borrowed(_) | Reference::Copied(_)));",
                "    assert_eq!(scratch.len(), 15);",
                "    assert_eq!(scratch, &b\"Exact Size Test\"[..]);",
                "    assert_eq!(str_read.delegate.index, 15);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"Large Scratch Test For Parsing\";",
                "    let mut scratch: Vec<u8> = vec![0; 256];",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(scratch.len(), 256);",
                "    assert!(matches!(result.unwrap(), Reference::Borrowed(_)));",
                "    assert!(!scratch.is_empty());",
                "    assert_eq!(str_read.delegate.index, 0);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"Large Scratch Test For Parsing\";",
                "    let mut scratch: Vec<u8> = vec![0; 256];",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(scratch.len(), 256);",
                "    assert!(matches!(result.unwrap(), Reference::Borrowed(_)));",
                "    assert!(!scratch.is_empty());",
                "    assert_eq!(str_read.delegate.index, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"Boundary Scratch Test\";",
                "    let mut scratch: Vec<u8> = Vec::with_capacity(256);",
                "    scratch.resize(256, 0);",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().borrowed(), &b\"Boundary Scratch Test\"[..]);",
                "    assert!(scratch.iter().all(|&byte| byte == 0));"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"Boundary Scratch Test\";",
                "    let mut scratch: Vec<u8> = Vec::with_capacity(256);",
                "    scratch.resize(256, 0);",
                "    let delegate = SliceRead { slice, index: 0 };",
                "    let mut str_read = StrRead { delegate };",
                "",
                "    let result = str_read.parse_str_raw(&mut scratch);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().borrowed(), &b\"Boundary Scratch Test\"[..]);",
                "    assert!(scratch.iter().all(|&byte| byte == 0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}