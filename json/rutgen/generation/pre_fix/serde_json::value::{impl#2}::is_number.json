{
  "name": "serde_json::value::{impl#2}::is_number",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:511:5:516:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches Value::Number(_) at line 513 is false\n",
        "precondition: *self matches _ at line 514 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: Value::Null, Value::Bool(true), Value::String(String::from(\"test\")), Value::Array(Vec::new()), Value::Object(Map::new())\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Null;",
                "    v.is_number();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_number());"
              ],
              "code": [
                "{",
                "    let v = Value::Null;",
                "    v.is_number();",
                "    assert!(!v.is_number());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.is_number();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.is_number(), false);"
              ],
              "code": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.is_number();",
                "    assert_eq!(v.is_number(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::String(String::from(\"test\"));",
                "    v.is_number();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_number());"
              ],
              "code": [
                "{",
                "    let v = Value::String(String::from(\"test\"));",
                "    v.is_number();",
                "    assert!(!v.is_number());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Array(Vec::new());",
                "    v.is_number();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_number());"
              ],
              "code": [
                "{",
                "    let v = Value::Array(Vec::new());",
                "    v.is_number();",
                "    assert!(!v.is_number());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Object(Map { map: MapImpl::new() });",
                "    v.is_number();",
                "}"
              ],
              "oracle": [
                "    assert!(!v.is_number());"
              ],
              "code": [
                "{",
                "    let v = Value::Object(Map { map: MapImpl::new() });",
                "    v.is_number();",
                "    assert!(!v.is_number());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Value::Number(_) at line 512 is true\n",
        "precondition: *self matches Value::Number(_) at line 512 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "test input conditions or ranges: Value::Number(Number) where Number can be any valid integer or floating point representation\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from(42));",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "oracle": [
                "    assert!(number_value.is_number());"
              ],
              "code": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from(42));",
                "    assert!(number_value.is_number());",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from_f64(3.14).unwrap());",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "oracle": [
                "    assert!(number_value.is_number());"
              ],
              "code": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from_f64(3.14).unwrap());",
                "    assert!(number_value.is_number());",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from(999999999999999999));",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number_value.is_number(), true);"
              ],
              "code": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from(999999999999999999));",
                "    assert!(number_value.is_number());",
                "    assert_eq!(number_value.is_number(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from(-100));",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "oracle": [
                "    assert!(number_value.is_number());"
              ],
              "code": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from(-100));",
                "    assert!(number_value.is_number());",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from_f64(-2.718).unwrap());",
                "    assert!(number_value.is_number());",
                "}"
              ],
              "oracle": [
                "    assert!(number_value.is_number() == true);"
              ],
              "code": [
                "{",
                "    let number_value = serde_json::Value::Number(serde_json::Number::from_f64(-2.718).unwrap());",
                "    assert!(number_value.is_number());",
                "    assert!(number_value.is_number() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}