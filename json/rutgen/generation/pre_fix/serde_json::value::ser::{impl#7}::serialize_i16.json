{
  "name": "serde_json::value::ser::{impl#7}::serialize_i16",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:496:5:498:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(itoa::Buffer::new().format(value).to_owned())\n"
      ],
      "input_infer": "Test input conditions or ranges: i16 values within the range of -32,768 to 32,767, including boundary cases -32,768, -1, 0, 1, and 32,767.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = -32_768;",
                "    let result = serializer.serialize_i16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(-32_768).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = -32_768;",
                "    let result = serializer.serialize_i16(value);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(-32_768).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = -1;",
                "    let result = serializer.serialize_i16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(-1).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = -1;",
                "    let result = serializer.serialize_i16(value);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(-1).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = 0;",
                "    let result = serializer.serialize_i16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = 0;",
                "    let result = serializer.serialize_i16(value);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = 1;",
                "    let result = serializer.serialize_i16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = 1;",
                "    let result = serializer.serialize_i16(value);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = 32_767;",
                "    let result = serializer.serialize_i16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i16 = 32_767;",
                "    let result = serializer.serialize_i16(value);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}