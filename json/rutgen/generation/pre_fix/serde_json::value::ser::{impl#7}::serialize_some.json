{
  "name": "serde_json::value::ser::{impl#7}::serialize_some",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:591:5:596:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "Input value of any type T that is non-string and Serializable (e.g., numbers, booleans, or structs), as well as edge cases like null or empty values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &true;",
                "    let _ = serializer.serialize_some(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_some(value), Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &true;",
                "    let _ = serializer.serialize_some(value);",
                "    assert_eq!(serializer.serialize_some(value), Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &42i32;",
                "    let _ = serializer.serialize_some(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value = &42i32;",
                "    let result = serializer.serialize_some(value);",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &42i32;",
                "    let _ = serializer.serialize_some(value);",
                "    let serializer = MapKeySerializer;",
                "    let value = &42i32;",
                "    let result = serializer.serialize_some(value);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &3.14f64;",
                "    let _ = serializer.serialize_some(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value = &3.14f64;",
                "    let result = serializer.serialize_some(value);",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &3.14f64;",
                "    let _ = serializer.serialize_some(value);",
                "    let serializer = MapKeySerializer;",
                "    let value = &3.14f64;",
                "    let result = serializer.serialize_some(value);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct StructExample;",
                "    impl Serialize for StructExample {",
                "        fn serialize<S>(&self, _: S) -> Result<String>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            Ok(\"example\".to_string())",
                "        }",
                "    }",
                "",
                "    let serializer = MapKeySerializer;",
                "    let value = &StructExample;",
                "    let _ = serializer.serialize_some(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_some(value), Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct StructExample;",
                "    impl Serialize for StructExample {",
                "        fn serialize<S>(&self, _: S) -> Result<String>",
                "        where",
                "            S: Serializer,",
                "        {",
                "            Ok(\"example\".to_string())",
                "        }",
                "    }",
                "",
                "    let serializer = MapKeySerializer;",
                "    let value = &StructExample;",
                "    let _ = serializer.serialize_some(value);",
                "    assert_eq!(serializer.serialize_some(value), Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: Option<&str> = None;",
                "    let _ = serializer.serialize_some(&value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value: Option<&str> = None;",
                "    let result = serializer.serialize_some(&value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), key_must_be_a_string());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: Option<&str> = None;",
                "    let _ = serializer.serialize_some(&value);",
                "    let serializer = MapKeySerializer;",
                "    let value: Option<&str> = None;",
                "    let result = serializer.serialize_some(&value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), key_must_be_a_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &\"\";",
                "    let _ = serializer.serialize_some(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_some(value), Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = &\"\";",
                "    let _ = serializer.serialize_some(value);",
                "    assert_eq!(serializer.serialize_some(value), Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}