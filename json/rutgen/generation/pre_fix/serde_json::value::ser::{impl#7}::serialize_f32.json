{
  "name": "serde_json::value::ser::{impl#7}::serialize_f32",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:532:5:538:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value.is_finite() at line 533 is true\n",
        "expected return value/type: Ok(ryu::Buffer::new().format_finite(value).to_owned())\n"
      ],
      "input_infer": "f32 values in the range (-3.4028235e38, 3.4028235e38) excluding NaN and infinite values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 1.0_f32; // A positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.0).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 1.0_f32; // A positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.0).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = -1.0_f32; // A negative finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_ok());",
                "    assert_eq!(_result.unwrap(), ryu::Buffer::new().format_finite(-1.0_f32).to_owned());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = -1.0_f32; // A negative finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    assert!(_result.is_ok());",
                "    assert_eq!(_result.unwrap(), ryu::Buffer::new().format_finite(-1.0_f32).to_owned());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 1.17549435e-38_f32; // A small positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.17549435e-38_f32).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 1.17549435e-38_f32; // A small positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.17549435e-38_f32).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 3.4028235e38_f32; // The largest positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_ok());",
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(3.4028235e38_f32).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 3.4028235e38_f32; // The largest positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    assert!(_result.is_ok());",
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(3.4028235e38_f32).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 3.4028234e38_f32; // A value just below the largest positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_ok());",
                "    let expected = ryu::Buffer::new().format_finite(value).to_owned();",
                "    assert_eq!(_result.unwrap(), expected);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 3.4028234e38_f32; // A value just below the largest positive finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    assert!(_result.is_ok());",
                "    let expected = ryu::Buffer::new().format_finite(value).to_owned();",
                "    assert_eq!(_result.unwrap(), expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = -1.17549435e-38_f32; // A small negative finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value = -1.17549435e-38_f32;",
                "    let expected_result = Ok(ryu::Buffer::new().format_finite(value).to_owned());",
                "    assert_eq!(_result, expected_result);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = -1.17549435e-38_f32; // A small negative finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    let serializer = MapKeySerializer;",
                "    let value = -1.17549435e-38_f32;",
                "    let expected_result = Ok(ryu::Buffer::new().format_finite(value).to_owned());",
                "    assert_eq!(_result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 0.0_f32; // Zero is a finite value",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(0.0_f32).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = 0.0_f32; // Zero is a finite value",
                "    let _result = serializer.serialize_f32(value);",
                "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(0.0_f32).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value.is_finite() at line 533 is false\n",
        "expected return value/type: Err(float_key_must_be_finite())\n"
      ],
      "input_infer": "value = f32::NAN or value = f32::INFINITY or value = f32::NEG_INFINITY\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::NAN;",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result, Err(float_key_must_be_finite()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::NAN;",
                "    let _result = serializer.serialize_f32(value);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result, Err(float_key_must_be_finite()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::INFINITY;",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value = f32::INFINITY;",
                "    let result = serializer.serialize_f32(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(float_key_must_be_finite()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::INFINITY;",
                "    let _result = serializer.serialize_f32(value);",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::INFINITY;",
                "    let result = serializer.serialize_f32(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(float_key_must_be_finite()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::NEG_INFINITY;",
                "    let _result = serializer.serialize_f32(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value = f32::NEG_INFINITY;",
                "    let result = serializer.serialize_f32(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(float_key_must_be_finite()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::NEG_INFINITY;",
                "    let _result = serializer.serialize_f32(value);",
                "    let serializer = MapKeySerializer;",
                "    let value = f32::NEG_INFINITY;",
                "    let result = serializer.serialize_f32(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(float_key_must_be_finite()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}