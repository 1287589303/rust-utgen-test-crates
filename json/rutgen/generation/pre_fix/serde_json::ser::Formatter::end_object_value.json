{
  "name": "serde_json::ser::Formatter::end_object_value",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1931:5:1936:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "Test input conditions or ranges: any writable object implementing io::Write, including an empty buffer or stream.\n",
      "answers": [
        {
          "uses": [
            "use std::fs::File;",
            "use std::io::Write;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyWriter;",
                "    ",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "        ",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = EmptyWriter;",
                "    let mut formatter = ();",
                "    formatter.end_object_value(&mut writer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.end_object_value(&mut writer), Ok(()));"
              ],
              "code": [
                "{",
                "    struct EmptyWriter;",
                "    ",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "        ",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = EmptyWriter;",
                "    let mut formatter = ();",
                "    formatter.end_object_value(&mut writer).unwrap();",
                "    assert_eq!(formatter.end_object_value(&mut writer), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    ",
                "    struct VecWriter<'a>(&'a mut Vec<u8>);",
                "    ",
                "    impl io::Write for VecWriter<'_> {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = VecWriter(&mut buffer);",
                "    let mut formatter = ();",
                "    formatter.end_object_value(&mut writer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.end_object_value(&mut writer), Ok(()));",
                "    buffer.clear();",
                "    assert!(formatter.end_object_value(&mut writer).is_ok());",
                "    assert_eq!(buffer.len(), 0);",
                "    assert!(formatter.end_object_value(&mut writer).unwrap().is_ok());"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    ",
                "    struct VecWriter<'a>(&'a mut Vec<u8>);",
                "    ",
                "    impl io::Write for VecWriter<'_> {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        ",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "    ",
                "    let mut writer = VecWriter(&mut buffer);",
                "    let mut formatter = ();",
                "    formatter.end_object_value(&mut writer).unwrap();",
                "    assert_eq!(formatter.end_object_value(&mut writer), Ok(()));",
                "    buffer.clear();",
                "    assert!(formatter.end_object_value(&mut writer).is_ok());",
                "    assert_eq!(buffer.len(), 0);",
                "    assert!(formatter.end_object_value(&mut writer).unwrap().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fs::File;",
                "    use std::io::Write;",
                "",
                "    let file = File::create(\"test_output.txt\").unwrap();",
                "    let mut writer = file;",
                "    let mut formatter = ();",
                "    formatter.end_object_value(&mut writer).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.end_object_value(&mut writer).unwrap(), Ok(()));"
              ],
              "code": [
                "{",
                "    use std::fs::File;",
                "    use std::io::Write;",
                "",
                "    let file = File::create(\"test_output.txt\").unwrap();",
                "    let mut writer = file;",
                "    let mut formatter = ();",
                "    formatter.end_object_value(&mut writer).unwrap();",
                "    assert_eq!(formatter.end_object_value(&mut writer).unwrap(), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}