{
  "name": "serde_json::ser::Formatter::end_string",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1762:5:1767:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "W: ?Sized + io::Write with valid buffered and unbuffered writer instances.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BufferedWriter {",
                "        buffer: Vec<u8>,",
                "    }",
                "    ",
                "    impl io::Write for BufferedWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.buffer.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = BufferedWriter { buffer: Vec::new() };",
                "    let result = writer.end_string(&mut writer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(writer.buffer, b\"\\\"\");"
              ],
              "code": [
                "{",
                "    struct BufferedWriter {",
                "        buffer: Vec<u8>,",
                "    }",
                "    ",
                "    impl io::Write for BufferedWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.buffer.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = BufferedWriter { buffer: Vec::new() };",
                "    let result = writer.end_string(&mut writer);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(writer.buffer, b\"\\\"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct UnbufferedWriter {",
                "        output: Vec<u8>,",
                "    }",
                "    ",
                "    impl io::Write for UnbufferedWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.push(buf[0]);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = UnbufferedWriter { output: Vec::new() };",
                "    let result = writer.end_string(&mut writer);",
                "}"
              ],
              "oracle": [
                "    let mut writer = UnbufferedWriter { output: Vec::new() };",
                "    assert_eq!(writer.output.len(), 0);",
                "    let result = writer.end_string(&mut writer);",
                "    assert!(result.is_ok());",
                "    assert_eq!(writer.output, b\"\\\"\");"
              ],
              "code": [
                "{",
                "    struct UnbufferedWriter {",
                "        output: Vec<u8>,",
                "    }",
                "    ",
                "    impl io::Write for UnbufferedWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.push(buf[0]);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = UnbufferedWriter { output: Vec::new() };",
                "    let result = writer.end_string(&mut writer);",
                "    let mut writer = UnbufferedWriter { output: Vec::new() };",
                "    assert_eq!(writer.output.len(), 0);",
                "    let result = writer.end_string(&mut writer);",
                "    assert!(result.is_ok());",
                "    assert_eq!(writer.output, b\"\\\"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyWriter;",
                "    ",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = EmptyWriter;",
                "    let result = writer.end_string(&mut writer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(writer.write(&[b'\"']), Ok(0));",
                "    assert_eq!(writer.flush(), Ok(()));"
              ],
              "code": [
                "{",
                "    struct EmptyWriter;",
                "    ",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
                "            Ok(0)",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = EmptyWriter;",
                "    let result = writer.end_string(&mut writer);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(writer.write(&[b'\"']), Ok(0));",
                "    assert_eq!(writer.flush(), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}