{
  "name": "serde_json::ser::Formatter::write_null",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1559:5:1564:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "writer: any implementor of `io::Write`, valid pointer to writable buffer or stream, check for null pointer; expected return type: `io::Result<()>`\n",
      "answers": [
        {
          "uses": [
            "use std::fs::File;",
            "use std::io;",
            "use std::io::Write;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buf: Vec<u8> = Vec::new();",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null(&mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, b\"null\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buf: Vec<u8> = Vec::new();",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null(&mut buf);",
                "    assert_eq!(buf, b\"null\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buf = String::new();",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null(&mut buf);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, \"null\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut buf = String::new();",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null(&mut buf);",
                "    assert_eq!(buf, \"null\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fs::File;",
                "    use std::io::{self, Write};",
                "",
                "    struct TestFormatter;",
                "",
                "    let temp_file = \"test_write_null.tmp\";",
                "    let mut file = File::create(temp_file).unwrap();",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null(&mut file);",
                "    let _ = std::fs::remove_file(temp_file);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.write_all(b\"null\"), Ok(()));",
                "    assert_eq!(std::fs::metadata(temp_file).is_ok(), true);",
                "    assert_eq!(read_file_content(temp_file), \"null\");",
                "    assert_eq!(formatter.write_null(&mut file).is_ok(), true);",
                "    assert_eq!(std::fs::remove_file(temp_file).is_ok(), true);"
              ],
              "code": [
                "{",
                "    use std::fs::File;",
                "    use std::io::{self, Write};",
                "",
                "    struct TestFormatter;",
                "",
                "    let temp_file = \"test_write_null.tmp\";",
                "    let mut file = File::create(temp_file).unwrap();",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null(&mut file);",
                "    let _ = std::fs::remove_file(temp_file);",
                "    assert_eq!(writer.write_all(b\"null\"), Ok(()));",
                "    assert_eq!(std::fs::metadata(temp_file).is_ok(), true);",
                "    assert_eq!(read_file_content(temp_file), \"null\");",
                "    assert_eq!(formatter.write_null(&mut file).is_ok(), true);",
                "    assert_eq!(std::fs::remove_file(temp_file).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null::<&mut dyn io::Write>(std::ptr::null_mut()).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(formatter.write_null::<&mut dyn io::Write>(std::ptr::null_mut()).is_err());"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let mut formatter = TestFormatter;",
                "",
                "    let _ = formatter.write_null::<&mut dyn io::Write>(std::ptr::null_mut()).unwrap();",
                "    assert!(formatter.write_null::<&mut dyn io::Write>(std::ptr::null_mut()).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}