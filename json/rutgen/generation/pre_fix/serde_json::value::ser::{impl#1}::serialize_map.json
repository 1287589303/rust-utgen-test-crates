{
  "name": "serde_json::value::ser::{impl#1}::serialize_map",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:264:5:269:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(SerializeMap::Map {\n            map: Map::with_capacity(len.unwrap_or(0)),\n            next_key: None,\n        })\n"
      ],
      "input_infer": "len: None, len: 0, len: 1, len: 10, len: 100, len: usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));",
                "    let result_with_capacity = serializer.serialize_map(Some(5));",
                "    assert_eq!(result_with_capacity, Ok(SerializeMap::Map { map: Map::with_capacity(5), next_key: None }));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(None);",
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));",
                "    let result_with_capacity = serializer.serialize_map(Some(5));",
                "    assert_eq!(result_with_capacity, Ok(SerializeMap::Map { map: Map::with_capacity(5), next_key: None }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));",
                "    let result = serializer.serialize_map(Some(10));",
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(10), next_key: None }));",
                "    let result = serializer.serialize_map(None);",
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(0));",
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));",
                "    let result = serializer.serialize_map(Some(10));",
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(10), next_key: None }));",
                "    let result = serializer.serialize_map(None);",
                "    assert_eq!(result, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(1));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialized_map = result.unwrap();",
                "    assert!(matches!(serialized_map, SerializeMap::Map { .. }));",
                "    assert_eq!(serialized_map.map.len(), 1);",
                "    assert_eq!(serialized_map.next_key, None);",
                "    ",
                "    let result = serializer.serialize_map(None);",
                "    assert!(result.is_ok());",
                "    let serialized_map = result.unwrap();",
                "    assert!(matches!(serialized_map, SerializeMap::Map { .. }));",
                "    assert_eq!(serialized_map.map.len(), 0);",
                "    assert_eq!(serialized_map.next_key, None);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(1));",
                "    assert!(result.is_ok());",
                "    let serialized_map = result.unwrap();",
                "    assert!(matches!(serialized_map, SerializeMap::Map { .. }));",
                "    assert_eq!(serialized_map.map.len(), 1);",
                "    assert_eq!(serialized_map.next_key, None);",
                "    ",
                "    let result = serializer.serialize_map(None);",
                "    assert!(result.is_ok());",
                "    let serialized_map = result.unwrap();",
                "    assert!(matches!(serialized_map, SerializeMap::Map { .. }));",
                "    assert_eq!(serialized_map.map.len(), 0);",
                "    assert_eq!(serialized_map.next_key, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(10));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialize_map_result = result.unwrap();",
                "    assert_eq!(serialize_map_result.next_key, None);",
                "    assert_eq!(serialize_map_result.map.len(), 0);",
                "    let expected_map = Map::with_capacity(10);",
                "    assert_eq!(serialize_map_result.map, expected_map);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(10));",
                "    assert!(result.is_ok());",
                "    let serialize_map_result = result.unwrap();",
                "    assert_eq!(serialize_map_result.next_key, None);",
                "    assert_eq!(serialize_map_result.map.len(), 0);",
                "    let expected_map = Map::with_capacity(10);",
                "    assert_eq!(serialize_map_result.map, expected_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(100));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let serialize_map = result.unwrap();",
                "    match serialize_map {",
                "    SerializeMap::Map { map, next_key } => {",
                "    assert_eq!(next_key, None);",
                "    assert_eq!(map.len(), 0);",
                "    },",
                "    _ => panic!(\"Expected SerializeMap::Map variant\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(100));",
                "    assert!(result.is_ok());",
                "    let serialize_map = result.unwrap();",
                "    match serialize_map {",
                "    SerializeMap::Map { map, next_key } => {",
                "    assert_eq!(next_key, None);",
                "    assert_eq!(map.len(), 0);",
                "    },",
                "    _ => panic!(\"Expected SerializeMap::Map variant\"),",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(usize::MAX));",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.len() == usize::MAX));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.is_empty() == false));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.capacity() == usize::MAX));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None })));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_map(Some(usize::MAX));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.len() == usize::MAX));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.is_empty() == false));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.capacity() == usize::MAX));",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}