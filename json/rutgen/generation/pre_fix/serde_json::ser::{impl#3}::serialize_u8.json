{
  "name": "serde_json::ser::{impl#3}::serialize_u8",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:119:5:123:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "value: u8 in the range 0 to 255, including edge cases 0 and 255.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(127);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(64);",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(0);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(127);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_u8(64);",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(serializer.writer.write(&[1]), Ok(1));",
                "    assert_eq!(serializer.formatter.write_u8(&mut serializer.writer, 1), Ok(1));",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert!(serializer.formatter.write_u8(&mut serializer.writer, 0).is_ok());",
                "    assert!(serializer.serialize_u8(255).is_ok());",
                "    assert!(serializer.serialize_u8(128).is_ok());",
                "    assert!(serializer.serialize_u8(0).is_ok());",
                "    assert!(serializer.serialize_u8(u8::MAX).is_ok());",
                "    assert!(serializer.serialize_u8(u8::MIN).is_ok());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(serializer.writer.write(&[1]), Ok(1));",
                "    assert_eq!(serializer.formatter.write_u8(&mut serializer.writer, 1), Ok(1));",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert!(serializer.formatter.write_u8(&mut serializer.writer, 0).is_ok());",
                "    assert!(serializer.serialize_u8(255).is_ok());",
                "    assert!(serializer.serialize_u8(128).is_ok());",
                "    assert!(serializer.serialize_u8(0).is_ok());",
                "    assert!(serializer.serialize_u8(u8::MAX).is_ok());",
                "    assert!(serializer.serialize_u8(u8::MIN).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(writer.write_called_count, 1);",
                "    assert_eq!(formatter.write_u8_called_with_value, 255);"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(writer.write_called_count, 1);",
                "    assert_eq!(formatter.write_u8_called_with_value, 255);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(result.unwrap_err(), Error::io(1));",
                "    let result_zero = serializer.serialize_u8(0);",
                "    assert_eq!(result_zero, Ok(()));",
                "    let result_max = serializer.serialize_u8(u8::MAX);",
                "    assert!(result_max.is_ok());",
                "    let result_negative = serializer.serialize_u8(255);",
                "    assert!(result_negative.is_err());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    struct MockFormatter;",
                "    impl MockFormatter {",
                "        fn write_u8(&mut self, _writer: &mut MockWriter, _value: u8) -> Result<usize> { Ok(1) }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let mut formatter = MockFormatter;",
                "    let serializer = &mut Serializer { writer, formatter };",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(result.unwrap_err(), Error::io(1));",
                "    let result_zero = serializer.serialize_u8(0);",
                "    assert_eq!(result_zero, Ok(()));",
                "    let result_max = serializer.serialize_u8(u8::MAX);",
                "    assert!(result_max.is_ok());",
                "    let result_negative = serializer.serialize_u8(255);",
                "    assert!(result_negative.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}