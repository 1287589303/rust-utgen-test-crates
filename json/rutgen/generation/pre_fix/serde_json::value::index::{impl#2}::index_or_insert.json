{
  "name": "serde_json::value::index::{impl#2}::index_or_insert",
  "mod_info": {
    "name": "value::index",
    "loc": "src/value/mod.rs:929:1:929:11"
  },
  "visible": true,
  "loc": "src/value/index.rs:114:5:116:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self[..].index_or_insert(v)\n"
      ],
      "input_infer": "self as a non-empty String and v as a mutable Value that is either Array, Object, or Null\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Array(vec![Value::Bool(true)]);",
                "    key.index_or_insert(&mut value);",
                "}"
              ],
              "oracle": [
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Array(vec![Value::Bool(true)]);",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(map) if map.contains_key(\"key\")));",
                "    assert!(matches!(value, Value::Object(map) if !map.is_empty()));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Array(vec![Value::Bool(true)]);",
                "    key.index_or_insert(&mut value);",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Array(vec![Value::Bool(true)]);",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(map) if map.contains_key(\"key\")));",
                "    assert!(matches!(value, Value::Object(map) if !map.is_empty()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Object(Map::new());",
                "    key.index_or_insert(&mut value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(_)));",
                "    assert!(matches!(value, Value::Object(map) if map.contains_key(\"key\")));",
                "    assert_eq!(value.get(\"key\"), Some(&Value::Null));",
                "    value.index_or_insert(&mut Value::Number(Number::from(42)));",
                "    assert!(matches!(value, Value::Object(map) if map.get(\"key\") == Some(&Value::Number(Number::from(42)))));",
                "    assert!(value.index_into(&value).is_some());",
                "    assert!(value.index_into_mut(&mut value).is_some());"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Object(Map::new());",
                "    key.index_or_insert(&mut value);",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(_)));",
                "    assert!(matches!(value, Value::Object(map) if map.contains_key(\"key\")));",
                "    assert_eq!(value.get(\"key\"), Some(&Value::Null));",
                "    value.index_or_insert(&mut Value::Number(Number::from(42)));",
                "    assert!(matches!(value, Value::Object(map) if map.get(\"key\") == Some(&Value::Number(Number::from(42)))));",
                "    assert!(value.index_into(&value).is_some());",
                "    assert!(value.index_into_mut(&mut value).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Null;",
                "    key.index_or_insert(&mut value);",
                "}"
              ],
              "oracle": [
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Null;",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(ref map) if map.contains_key(\"key\")));",
                "    value = Value::Object(Map::new());",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(ref map) if map.contains_key(\"key\")));",
                "    value = Value::Array(vec![]);",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(ref map) if map.contains_key(\"key\")));"
              ],
              "code": [
                "{",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Null;",
                "    key.index_or_insert(&mut value);",
                "    let key = String::from(\"key\");",
                "    let mut value = Value::Null;",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(ref map) if map.contains_key(\"key\")));",
                "    value = Value::Object(Map::new());",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(ref map) if map.contains_key(\"key\")));",
                "    value = Value::Array(vec![]);",
                "    assert_eq!(key.index_or_insert(&mut value), &mut value);",
                "    assert!(matches!(value, Value::Object(ref map) if map.contains_key(\"key\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}