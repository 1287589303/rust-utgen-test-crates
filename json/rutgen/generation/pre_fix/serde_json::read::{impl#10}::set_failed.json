{
  "name": "serde_json::read::{impl#10}::set_failed",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": true,
  "loc": "src/read.rs:753:5:755:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "failed: a mutable reference to a boolean variable (valid address of bool in memory); delegate: an instance of SliceRead (slice containing bytes and valid index range).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut failed = false;",
                "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
                "    let delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(failed, true);",
                "    assert_eq!(reader.delegate.index, 0);",
                "    assert_eq!(reader.delegate.slice, &[1, 2, 3, 4, 5]);",
                "    assert!(reader.delegate.raw_buffering_start_index == 0);"
              ],
              "code": [
                "{",
                "    let mut failed = false;",
                "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
                "    let delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    assert_eq!(reader.delegate.index, 0);",
                "    assert_eq!(reader.delegate.slice, &[1, 2, 3, 4, 5]);",
                "    assert!(reader.delegate.raw_buffering_start_index == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut failed = true;",
                "    let slice: &[u8] = &[6, 7, 8, 9, 10];",
                "    let delegate = SliceRead {",
                "        slice,",
                "        index: 1,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(failed, true);",
                "    assert_eq!(reader.delegate.index, 1);",
                "    assert_eq!(reader.delegate.slice, &[6, 7, 8, 9, 10]);",
                "    assert_eq!(reader.delegate.raw_buffering_start_index, 0);",
                "    assert!(reader.data.is_empty());"
              ],
              "code": [
                "{",
                "    let mut failed = true;",
                "    let slice: &[u8] = &[6, 7, 8, 9, 10];",
                "    let delegate = SliceRead {",
                "        slice,",
                "        index: 1,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    assert_eq!(reader.delegate.index, 1);",
                "    assert_eq!(reader.delegate.slice, &[6, 7, 8, 9, 10]);",
                "    assert_eq!(reader.delegate.raw_buffering_start_index, 0);",
                "    assert!(reader.data.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut failed = false;",
                "    let slice: &[u8] = &[];",
                "    let delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(failed, true);",
                "    failed = false;",
                "    let slice: &[u8] = &[1, 2, 3];",
                "    let delegate = SliceRead {",
                "    slice,",
                "    index: 0,",
                "    #[cfg(feature = \"raw_value\")]",
                "    raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    failed = false;",
                "    let slice: &[u8] = &[0];",
                "    let delegate = SliceRead {",
                "    slice,",
                "    index: 1,",
                "    #[cfg(feature = \"raw_value\")]",
                "    raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    failed = false;",
                "    let slice: &[u8] = &[0];",
                "    let delegate = SliceRead {",
                "    slice,",
                "    index: 0,",
                "    #[cfg(feature = \"raw_value\")]",
                "    raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, false);"
              ],
              "code": [
                "{",
                "    let mut failed = false;",
                "    let slice: &[u8] = &[];",
                "    let delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    failed = false;",
                "    let slice: &[u8] = &[1, 2, 3];",
                "    let delegate = SliceRead {",
                "    slice,",
                "    index: 0,",
                "    #[cfg(feature = \"raw_value\")]",
                "    raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    failed = false;",
                "    let slice: &[u8] = &[0];",
                "    let delegate = SliceRead {",
                "    slice,",
                "    index: 1,",
                "    #[cfg(feature = \"raw_value\")]",
                "    raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, true);",
                "    failed = false;",
                "    let slice: &[u8] = &[0];",
                "    let delegate = SliceRead {",
                "    slice,",
                "    index: 0,",
                "    #[cfg(feature = \"raw_value\")]",
                "    raw_buffering_start_index: 0,",
                "    };",
                "    let mut reader = StrRead { delegate, data: \"\" };",
                "    reader.set_failed(&mut failed);",
                "    assert_eq!(failed, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}