{
  "name": "serde_json::ser::{impl#11}::serialize_f64",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1040:5:1059:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value.is_finite() at line 1041 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .begin_string(&mut self.ser.writer)\n            .map_err(Error::io) matches core::result::Result::Err(err) at line 1045 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "value: any non-finite f64 (NaN, positive infinity, or negative infinity), and self.ser.formatter.begin_string must consistently fail with a Result::Err for at least one specific input test case.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = std::f64::NAN;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _result = map_key_serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    let value: f64 = std::f64::NAN;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer { writer, formatter };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f64(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    let value: f64 = std::f64::NAN;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _result = map_key_serializer.serialize_f64(value);",
                "    let value: f64 = std::f64::NAN;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer { writer, formatter };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f64(value);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = std::f64::INFINITY;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _result = map_key_serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().code(), ErrorCode::FloatKeyMustBeFinite);"
              ],
              "code": [
                "{",
                "    let value: f64 = std::f64::INFINITY;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _result = map_key_serializer.serialize_f64(value);",
                "    assert_eq!(_result.is_err(), true);",
                "    assert_eq!(_result.unwrap_err().code(), ErrorCode::FloatKeyMustBeFinite);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: f64 = std::f64::NEG_INFINITY;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _result = map_key_serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    let value: f64 = std::f64::NEG_INFINITY;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer { writer, formatter };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f64(value);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let value: f64 = std::f64::NEG_INFINITY;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _result = map_key_serializer.serialize_f64(value);",
                "    let value: f64 = std::f64::NEG_INFINITY;",
                "    let mut writer = Vec::new();",
                "    let formatter = CompactFormatter {};",
                "    let serializer = Serializer { writer, formatter };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    let result = map_key_serializer.serialize_f64(value);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value.is_finite() at line 1041 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .begin_string(&mut self.ser.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val) at line 1045 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .write_f64(&mut self.ser.writer, value)\n            .map_err(Error::io) matches core::result::Result::Ok(val) at line 1050 is true\n",
        "precondition: self\n            .ser\n            .formatter\n            .write_f64(&mut self.ser.writer, value)\n            .map_err(Error::io) matches core::result::Result::Err(err) at line 1050 is true\n",
        "expected return value/type: core::result::Result::Err(err)\n"
      ],
      "input_infer": "value: f64 within finite range (excluding NaN, positive/negative infinity), writer must be able to write data successfully and simulate an error case for writing f64 (e.g., unwriteable stream)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        data: Vec<u8>,",
                "        should_error: bool,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> core::result::Result<usize, std::io::Error> {",
                "            if self.should_error {",
                "                Err(std::io::Error::new(std::io::ErrorKind::Other, \"write error\"))",
                "            } else {",
                "                self.data.extend_from_slice(buf);",
                "                Ok(buf.len())",
                "            }",
                "        }",
                "",
                "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut buf = Vec::new();",
                "    let writer = MockWriter { data: buf, should_error: false };",
                "    let formatter = CompactFormatter;  // Assuming CompactFormatter is defined elsewhere",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f64(123.456);",
                "}"
              ],
              "oracle": [
                "    let mut buf = Vec::new();",
                "    let writer = MockWriter { data: buf, should_error: false };",
                "    let formatter = CompactFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    ",
                "    let result = map_key_serializer.serialize_f64(123.456);",
                "    assert!(result.is_ok());",
                "    ",
                "    map_key_serializer.ser.writer.should_error = true;",
                "    let result = map_key_serializer.serialize_f64(123.456);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        data: Vec<u8>,",
                "        should_error: bool,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> core::result::Result<usize, std::io::Error> {",
                "            if self.should_error {",
                "                Err(std::io::Error::new(std::io::ErrorKind::Other, \"write error\"))",
                "            } else {",
                "                self.data.extend_from_slice(buf);",
                "                Ok(buf.len())",
                "            }",
                "        }",
                "",
                "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut buf = Vec::new();",
                "    let writer = MockWriter { data: buf, should_error: false };",
                "    let formatter = CompactFormatter;  // Assuming CompactFormatter is defined elsewhere",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f64(123.456);",
                "    let mut buf = Vec::new();",
                "    let writer = MockWriter { data: buf, should_error: false };",
                "    let formatter = CompactFormatter;",
                "    let serializer = Serializer { writer, formatter };",
                "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "    ",
                "    let result = map_key_serializer.serialize_f64(123.456);",
                "    assert!(result.is_ok());",
                "    ",
                "    map_key_serializer.ser.writer.should_error = true;",
                "    let result = map_key_serializer.serialize_f64(123.456);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        should_error: bool,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> core::result::Result<usize, std::io::Error> {",
                "            if self.should_error {",
                "                Err(std::io::Error::new(std::io::ErrorKind::Other, \"write error\"))",
                "            } else {",
                "                Ok(0)",
                "            }",
                "        }",
                "",
                "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter { should_error: true };",
                "    let formatter = CompactFormatter;  // Assuming CompactFormatter is defined elsewhere",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f64(123.456);",
                "}"
              ],
              "oracle": [
                "    assert!(map_key_serializer.serialize_f64(123.456).is_err());",
                "    assert!(map_key_serializer.serialize_f64(f64::INFINITY).is_err());",
                "    assert!(map_key_serializer.serialize_f64(f64::NEG_INFINITY).is_err());",
                "    assert!(map_key_serializer.serialize_f64(f64::NAN).is_err());",
                "    assert!(map_key_serializer.serialize_f64(0.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(-0.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(1.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(-1.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(1.7976931348623157E308).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(-1.7976931348623157E308).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(1.0e-10).is_ok());"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        should_error: bool,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> core::result::Result<usize, std::io::Error> {",
                "            if self.should_error {",
                "                Err(std::io::Error::new(std::io::ErrorKind::Other, \"write error\"))",
                "            } else {",
                "                Ok(0)",
                "            }",
                "        }",
                "",
                "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter { should_error: true };",
                "    let formatter = CompactFormatter;  // Assuming CompactFormatter is defined elsewhere",
                "    let serializer = Serializer { writer, formatter };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let _ = map_key_serializer.serialize_f64(123.456);",
                "    assert!(map_key_serializer.serialize_f64(123.456).is_err());",
                "    assert!(map_key_serializer.serialize_f64(f64::INFINITY).is_err());",
                "    assert!(map_key_serializer.serialize_f64(f64::NEG_INFINITY).is_err());",
                "    assert!(map_key_serializer.serialize_f64(f64::NAN).is_err());",
                "    assert!(map_key_serializer.serialize_f64(0.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(-0.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(1.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(-1.0).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(1.7976931348623157E308).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(-1.7976931348623157E308).is_ok());",
                "    assert!(map_key_serializer.serialize_f64(1.0e-10).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: value.is_finite() at line 1041 is false\n",
        "expected return value/type: Err(float_key_must_be_finite())\n"
      ],
      "input_infer": "value = NaN, value = Infinity, value = -Infinity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let result = map_key_serializer.serialize_f64(f64::NAN);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let result = map_key_serializer.serialize_f64(f64::NAN);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let result = map_key_serializer.serialize_f64(f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let result = map_key_serializer.serialize_f64(f64::INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let result = map_key_serializer.serialize_f64(f64::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter;",
                "    let formatter = MockFormatter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter,",
                "    };",
                "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
                "",
                "    let result = map_key_serializer.serialize_f64(f64::NEG_INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}