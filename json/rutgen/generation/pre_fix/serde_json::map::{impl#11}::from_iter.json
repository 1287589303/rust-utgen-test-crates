{
  "name": "serde_json::map::{impl#11}::from_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:550:5:557:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Map {\n            map: FromIterator::from_iter(iter),\n        }\n"
      ],
      "input_infer": "iter must be an IntoIterator that contains 0 to N items, where each item is a tuple of a String key and a Value type (including variants: Null, Bool, Number, String, Array, and Object)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<(String, Value)> = Vec::new();",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.map.len(), 0);",
                "    assert!(result.map.is_empty());",
                "    let iter: Vec<(String, Value)> = vec![(\"key1\".to_string(), Value::Bool(true))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    let iter: Vec<(String, Value)> = vec![(\"key2\".to_string(), Value::Number(Number::from(42)))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
                "    let iter: Vec<(String, Value)> = vec![(\"key3\".to_string(), Value::String(\"value\".to_string()))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key3\"), Some(&Value::String(\"value\".to_string())));",
                "    let iter: Vec<(String, Value)> = vec![(\"key4\".to_string(), Value::Object(Map::from_iter(vec![(\"inner_key\".to_string(), Value::Null)])))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    if let Value::Object(ref obj) = result.map.get(\"key4\").unwrap() {",
                "    assert_eq!(obj.map.len(), 1);",
                "    assert_eq!(obj.map.get(\"inner_key\"), Some(&Value::Null));",
                "    } else { panic!(\"Expected Value::Object\"); }"
              ],
              "code": [
                "{",
                "    let iter: Vec<(String, Value)> = Vec::new();",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "    assert_eq!(result.map.len(), 0);",
                "    assert!(result.map.is_empty());",
                "    let iter: Vec<(String, Value)> = vec![(\"key1\".to_string(), Value::Bool(true))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    let iter: Vec<(String, Value)> = vec![(\"key2\".to_string(), Value::Number(Number::from(42)))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
                "    let iter: Vec<(String, Value)> = vec![(\"key3\".to_string(), Value::String(\"value\".to_string()))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key3\"), Some(&Value::String(\"value\".to_string())));",
                "    let iter: Vec<(String, Value)> = vec![(\"key4\".to_string(), Value::Object(Map::from_iter(vec![(\"inner_key\".to_string(), Value::Null)])))];",
                "    let result: Map<String, Value> = Map::from_iter(iter.clone());",
                "    assert_eq!(result.map.len(), 1);",
                "    if let Value::Object(ref obj) = result.map.get(\"key4\").unwrap() {",
                "    assert_eq!(obj.map.len(), 1);",
                "    assert_eq!(obj.map.get(\"inner_key\"), Some(&Value::Null));",
                "    } else { panic!(\"Expected Value::Object\"); }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::String(String::from(\"value1\"))),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::String(String::from(\"value1\"))));",
                "    assert_eq!(result.map.contains_key(\"key1\"), true);",
                "    assert_eq!(result.map.contains_key(\"non_existent_key\"), false);",
                "    assert_eq!(result.map.is_empty(), false);",
                "    assert_eq!(result.map.get(\"key2\"), None);"
              ],
              "code": [
                "{",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::String(String::from(\"value1\"))),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::String(String::from(\"value1\"))));",
                "    assert_eq!(result.map.contains_key(\"key1\"), true);",
                "    assert_eq!(result.map.contains_key(\"non_existent_key\"), false);",
                "    assert_eq!(result.map.is_empty(), false);",
                "    assert_eq!(result.map.get(\"key2\"), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::Bool(true)),",
                "        (String::from(\"key2\"), Value::Number(Number::from(42))),",
                "        (String::from(\"key3\"), Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))])),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.map.len(), 3);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    assert_eq!(result.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
                "    assert_eq!(result.map.get(\"key3\"), Some(&Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))])));",
                "    assert!(result.map.contains_key(\"key1\"));",
                "    assert!(result.map.contains_key(\"key2\"));",
                "    assert!(result.map.contains_key(\"key3\"));",
                "    assert!(!result.map.contains_key(\"key4\"));"
              ],
              "code": [
                "{",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::Bool(true)),",
                "        (String::from(\"key2\"), Value::Number(Number::from(42))),",
                "        (String::from(\"key3\"), Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))])),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "    assert_eq!(result.map.len(), 3);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    assert_eq!(result.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
                "    assert_eq!(result.map.get(\"key3\"), Some(&Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))])));",
                "    assert!(result.map.contains_key(\"key1\"));",
                "    assert!(result.map.contains_key(\"key2\"));",
                "    assert!(result.map.contains_key(\"key3\"));",
                "    assert!(!result.map.contains_key(\"key4\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::Null),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::Null));",
                "    assert_eq!(result.map.get(\"non_existing_key\"), None);",
                "    let iter_empty: Vec<(String, Value)> = vec![];",
                "    let result_empty: Map<String, Value> = Map::from_iter(iter_empty);",
                "    assert_eq!(result_empty.map.len(), 0);",
                "    let iter_multiple: Vec<(String, Value)> = vec![",
                "    (String::from(\"key1\"), Value::Bool(true)),",
                "    (String::from(\"key2\"), Value::Number(Number::from(42))),",
                "    ];",
                "    let result_multiple: Map<String, Value> = Map::from_iter(iter_multiple);",
                "    assert_eq!(result_multiple.map.len(), 2);",
                "    assert_eq!(result_multiple.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    assert_eq!(result_multiple.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));"
              ],
              "code": [
                "{",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::Null),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "    assert_eq!(result.map.len(), 1);",
                "    assert_eq!(result.map.get(\"key1\"), Some(&Value::Null));",
                "    assert_eq!(result.map.get(\"non_existing_key\"), None);",
                "    let iter_empty: Vec<(String, Value)> = vec![];",
                "    let result_empty: Map<String, Value> = Map::from_iter(iter_empty);",
                "    assert_eq!(result_empty.map.len(), 0);",
                "    let iter_multiple: Vec<(String, Value)> = vec![",
                "    (String::from(\"key1\"), Value::Bool(true)),",
                "    (String::from(\"key2\"), Value::Number(Number::from(42))),",
                "    ];",
                "    let result_multiple: Map<String, Value> = Map::from_iter(iter_multiple);",
                "    assert_eq!(result_multiple.map.len(), 2);",
                "    assert_eq!(result_multiple.map.get(\"key1\"), Some(&Value::Bool(true)));",
                "    assert_eq!(result_multiple.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner_iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"inner_key1\"), Value::Bool(false)),",
                "    ];",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::Object(Map::from_iter(inner_iter))),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.map.get(\"key1\").unwrap(), &Value::Object(Map::from_iter(inner_iter)));",
                "    assert!(result.map.contains_key(\"key1\"));",
                "    assert_eq!(result.map.len(), 1);",
                "    assert!(result.map.get(\"non_existent_key\").is_none());"
              ],
              "code": [
                "{",
                "    let inner_iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"inner_key1\"), Value::Bool(false)),",
                "    ];",
                "    let iter: Vec<(String, Value)> = vec![",
                "        (String::from(\"key1\"), Value::Object(Map::from_iter(inner_iter))),",
                "    ];",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "    assert_eq!(result.map.get(\"key1\").unwrap(), &Value::Object(Map::from_iter(inner_iter)));",
                "    assert!(result.map.contains_key(\"key1\"));",
                "    assert_eq!(result.map.len(), 1);",
                "    assert!(result.map.get(\"non_existent_key\").is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Vec<(String, Value)> = (0..1000).map(|i| {",
                "        (format!(\"key{}\", i), Value::Number(Number::from(i)))",
                "    }).collect();",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.map.len(), 1000);",
                "    assert_eq!(result.map.get(\"key0\"), Some(&Value::Number(Number::from(0))));",
                "    assert_eq!(result.map.get(\"key999\"), Some(&Value::Number(Number::from(999))));",
                "    assert!(result.map.contains_key(\"key500\"));",
                "    assert!(result.map.contains_key(\"key250\"));",
                "    assert!(result.map.contains_key(\"key750\"));"
              ],
              "code": [
                "{",
                "    let iter: Vec<(String, Value)> = (0..1000).map(|i| {",
                "        (format!(\"key{}\", i), Value::Number(Number::from(i)))",
                "    }).collect();",
                "    let result: Map<String, Value> = Map::from_iter(iter);",
                "    assert_eq!(result.map.len(), 1000);",
                "    assert_eq!(result.map.get(\"key0\"), Some(&Value::Number(Number::from(0))));",
                "    assert_eq!(result.map.get(\"key999\"), Some(&Value::Number(Number::from(999))));",
                "    assert!(result.map.contains_key(\"key500\"));",
                "    assert!(result.map.contains_key(\"key250\"));",
                "    assert!(result.map.contains_key(\"key750\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}