{
  "name": "serde_json::ser::{impl#11}::serialize_tuple",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1105:5:1107:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "_len: 0, 1, 2, ..., n (where n is any positive integer, including edge cases such as 2^31-1 for usize)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(0);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(1);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(2);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct DummyWriter;",
                "    impl io::Write for DummyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = DummyWriter;",
                "    let serializer = Serializer { writer, formatter: CompactFormatter };",
                "    let _result = serializer.serialize_tuple(usize::MAX);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}