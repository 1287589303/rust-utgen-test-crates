{
  "name": "serde_json::ser::{impl#1}::pretty",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:37:5:39:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "W must be a type that implements io::Write, and should handle valid outputs; test input conditions include valid writer instances, various buffer sizes (e.g., empty, small, large), and edge cases like non-ASCII characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyWriter;",
                "    ",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = EmptyWriter;",
                "    let serializer = Serializer::pretty(writer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer, writer);",
                "    assert!(serializer.formatter.has_value == false);",
                "    assert_eq!(serializer.formatter.current_indent, 0);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");"
              ],
              "code": [
                "{",
                "    struct EmptyWriter;",
                "    ",
                "    impl io::Write for EmptyWriter {",
                "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = EmptyWriter;",
                "    let serializer = Serializer::pretty(writer);",
                "    assert_eq!(serializer.writer, writer);",
                "    assert!(serializer.formatter.has_value == false);",
                "    assert_eq!(serializer.formatter.current_indent, 0);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SmallWriter(Vec<u8>);",
                "    ",
                "    impl io::Write for SmallWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = SmallWriter(Vec::new());",
                "    let serializer = Serializer::pretty(writer);",
                "}"
              ],
              "oracle": [
                "    assert!(serializer.writer.0.is_empty());",
                "    assert_eq!(serializer.formatter.current_indent, 0);",
                "    assert!(!serializer.formatter.has_value);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");"
              ],
              "code": [
                "{",
                "    struct SmallWriter(Vec<u8>);",
                "    ",
                "    impl io::Write for SmallWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = SmallWriter(Vec::new());",
                "    let serializer = Serializer::pretty(writer);",
                "    assert!(serializer.writer.0.is_empty());",
                "    assert_eq!(serializer.formatter.current_indent, 0);",
                "    assert!(!serializer.formatter.has_value);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LargeWriter(Vec<u8>);",
                "    ",
                "    impl io::Write for LargeWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = LargeWriter(Vec::new());",
                "    let serializer = Serializer::pretty(writer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer.0.len(), 0);",
                "    assert!(serializer.formatter.has_value == false);",
                "    assert_eq!(serializer.formatter.current_indent, 0);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");",
                "    assert!(serializer.formatter.indent.len() > 0);",
                "    assert!(serializer.formatter.indent[0] == b' ');",
                "    assert!(serializer.formatter.indent[1] == b' ');"
              ],
              "code": [
                "{",
                "    struct LargeWriter(Vec<u8>);",
                "    ",
                "    impl io::Write for LargeWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = LargeWriter(Vec::new());",
                "    let serializer = Serializer::pretty(writer);",
                "    assert_eq!(serializer.writer.0.len(), 0);",
                "    assert!(serializer.formatter.has_value == false);",
                "    assert_eq!(serializer.formatter.current_indent, 0);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");",
                "    assert!(serializer.formatter.indent.len() > 0);",
                "    assert!(serializer.formatter.indent[0] == b' ');",
                "    assert!(serializer.formatter.indent[1] == b' ');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct NonAsciiWriter(Vec<u8>);",
                "    ",
                "    impl io::Write for NonAsciiWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = NonAsciiWriter(Vec::new());",
                "    let serializer = Serializer::pretty(writer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer.0.len(), 0);",
                "    assert!(serializer.formatter.current_indent == 0);",
                "    assert!(!serializer.formatter.has_value);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");"
              ],
              "code": [
                "{",
                "    struct NonAsciiWriter(Vec<u8>);",
                "    ",
                "    impl io::Write for NonAsciiWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.0.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = NonAsciiWriter(Vec::new());",
                "    let serializer = Serializer::pretty(writer);",
                "    assert_eq!(serializer.writer.0.len(), 0);",
                "    assert!(serializer.formatter.current_indent == 0);",
                "    assert!(!serializer.formatter.has_value);",
                "    assert_eq!(serializer.formatter.indent, b\"  \");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}