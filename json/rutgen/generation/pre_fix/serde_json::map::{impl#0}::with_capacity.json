{
  "name": "serde_json::map::{impl#0}::with_capacity",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:49:5:60:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Map {\n            #[cfg(not(feature = \"preserve_order\"))]\n            map: {\n                // does not support with_capacity\n                let _ = capacity;\n                BTreeMap::new()\n            },\n            #[cfg(feature = \"preserve_order\")]\n            map: IndexMap::with_capacity(capacity),\n        }\n"
      ],
      "input_infer": "capacity: 0 to any positive integer, including edge cases at 0, 1, and the maximum usize value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 0;",
                "    let map = Map::with_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity = 0;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    ",
                "    ",
                "    let capacity = 10;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    ",
                "    ",
                "    #[cfg(feature = \"preserve_order\")]",
                "    let capacity = 5;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.map.capacity(), 5);",
                "    ",
                "    ",
                "    #[cfg(not(feature = \"preserve_order\")]",
                "    let capacity = 5;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let capacity = 0;",
                "    let map = Map::with_capacity(capacity);",
                "    let capacity = 0;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    ",
                "    ",
                "    let capacity = 10;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    ",
                "    ",
                "    #[cfg(feature = \"preserve_order\")]",
                "    let capacity = 5;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.map.capacity(), 5);",
                "    ",
                "    ",
                "    #[cfg(not(feature = \"preserve_order\")]",
                "    let capacity = 5;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.map.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 1;",
                "    let map = Map::with_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.is_empty());",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert_eq!(map.map.capacity(), capacity);",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.is_empty());"
              ],
              "code": [
                "{",
                "    let capacity = 1;",
                "    let map = Map::with_capacity(capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.is_empty());",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert_eq!(map.map.capacity(), capacity);",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 10;",
                "    let map = Map::with_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity = 10;",
                "    let map = Map::with_capacity(capacity);",
                "    assert!(map.len() == 0);",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.is_empty());",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.capacity() == 0);",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.capacity() >= capacity);",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.len() == 0);"
              ],
              "code": [
                "{",
                "    let capacity = 10;",
                "    let map = Map::with_capacity(capacity);",
                "    let capacity = 10;",
                "    let map = Map::with_capacity(capacity);",
                "    assert!(map.len() == 0);",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.is_empty());",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.capacity() == 0);",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.capacity() >= capacity);",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.len() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = std::usize::MAX;",
                "    let map = Map::with_capacity(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity = std::usize::MAX;",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(not(feature = \"preserve_order\"))] BTreeMap::new()));",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(feature = \"preserve_order\")] IndexMap::with_capacity(capacity)));",
                "    assert_eq!(map.map.capacity(), capacity);",
                "    let map = Map::with_capacity(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(not(feature = \"preserve_order\"))] BTreeMap::new()));",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(feature = \"preserve_order\")] IndexMap::with_capacity(0)));"
              ],
              "code": [
                "{",
                "    let capacity = std::usize::MAX;",
                "    let map = Map::with_capacity(capacity);",
                "    let capacity = std::usize::MAX;",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(not(feature = \"preserve_order\"))] BTreeMap::new()));",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(feature = \"preserve_order\")] IndexMap::with_capacity(capacity)));",
                "    assert_eq!(map.map.capacity(), capacity);",
                "    let map = Map::with_capacity(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(not(feature = \"preserve_order\"))] BTreeMap::new()));",
                "    assert!(matches!(map.map, MapImpl::<_, Value>::[cfg(feature = \"preserve_order\")] IndexMap::with_capacity(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}