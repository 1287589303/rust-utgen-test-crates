{
  "name": "serde_json::ser::Formatter::write_i16",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1593:5:1600:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions or ranges: value between -32,768 and 32,767 for i16, including boundary values such as -32,768, -1, 0, 1, 32,767\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = -32_768;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    let mut writer = Vec::new();",
                "    let value: i16 = -32_768;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"-32768\");",
                "    writer.clear();",
                "    let value: i16 = -1;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"-1\");",
                "    writer.clear();",
                "    let value: i16 = 0;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"0\");",
                "    writer.clear();",
                "    let value: i16 = 1;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"1\");",
                "    writer.clear();",
                "    let value: i16 = 32_767;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"32767\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = -32_768;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    let mut writer = Vec::new();",
                "    let value: i16 = -32_768;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"-32768\");",
                "    writer.clear();",
                "    let value: i16 = -1;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"-1\");",
                "    writer.clear();",
                "    let value: i16 = 0;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"0\");",
                "    writer.clear();",
                "    let value: i16 = 1;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"1\");",
                "    writer.clear();",
                "    let value: i16 = 32_767;",
                "    assert_eq!(formatter.write_i16(&mut writer, value), Ok(()));",
                "    assert_eq!(writer, b\"32767\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = -1;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"-1\");",
                "    assert!(formatter.write_i16(&mut writer, 0).is_ok());",
                "    assert!(formatter.write_i16(&mut writer, 123).is_ok());",
                "    assert!(formatter.write_i16(&mut writer, i16::MIN).is_ok());",
                "    assert!(formatter.write_i16(&mut writer, i16::MAX).is_ok());",
                "    writer.clear();",
                "    assert!(formatter.write_i16(&mut writer, -123).is_ok());",
                "    assert_eq!(writer, b\"-123\");",
                "    writer.clear();"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = -1;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"-1\");",
                "    assert!(formatter.write_i16(&mut writer, 0).is_ok());",
                "    assert!(formatter.write_i16(&mut writer, 123).is_ok());",
                "    assert!(formatter.write_i16(&mut writer, i16::MIN).is_ok());",
                "    assert!(formatter.write_i16(&mut writer, i16::MAX).is_ok());",
                "    writer.clear();",
                "    assert!(formatter.write_i16(&mut writer, -123).is_ok());",
                "    assert_eq!(writer, b\"-123\");",
                "    writer.clear();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = 0;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"0\");",
                "    let value: i16 = -123;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-123\");",
                "    let value: i16 = 12345;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345\");",
                "    let value: i16 = i16::MIN;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345-32768\");",
                "    let value: i16 = i16::MAX;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345-3276832767\");",
                "    let value: i16 = -1;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345-32768-1\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = 0;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0\");",
                "    let value: i16 = -123;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-123\");",
                "    let value: i16 = 12345;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345\");",
                "    let value: i16 = i16::MIN;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345-32768\");",
                "    let value: i16 = i16::MAX;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345-3276832767\");",
                "    let value: i16 = -1;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"0-12312345-32768-1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = 1;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"1\");",
                "    assert!(formatter.write_i16(&mut writer, -123).is_ok());",
                "    assert_eq!(writer, b\"1-123\");",
                "    assert!(formatter.write_i16(&mut writer, 0).is_ok());",
                "    assert_eq!(writer, b\"1-1230\");",
                "    assert!(formatter.write_i16(&mut writer, 32767).is_ok());",
                "    assert_eq!(writer, b\"1-123032767\");",
                "    assert!(formatter.write_i16(&mut writer, -32768).is_ok());",
                "    assert_eq!(writer, b\"1-123032767-32768\");",
                "    assert!(formatter.write_i16(&mut writer, 1000).is_ok());",
                "    assert_eq!(writer, b\"1-123032767-327681000\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = 1;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"1\");",
                "    assert!(formatter.write_i16(&mut writer, -123).is_ok());",
                "    assert_eq!(writer, b\"1-123\");",
                "    assert!(formatter.write_i16(&mut writer, 0).is_ok());",
                "    assert_eq!(writer, b\"1-1230\");",
                "    assert!(formatter.write_i16(&mut writer, 32767).is_ok());",
                "    assert_eq!(writer, b\"1-123032767\");",
                "    assert!(formatter.write_i16(&mut writer, -32768).is_ok());",
                "    assert_eq!(writer, b\"1-123032767-32768\");",
                "    assert!(formatter.write_i16(&mut writer, 1000).is_ok());",
                "    assert_eq!(writer, b\"1-123032767-327681000\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = 32_767;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"32767\");",
                "    let value: i16 = -32_768;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"32767-32768\");",
                "    let value: i16 = 0;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"32767-327680\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut writer = Vec::new();",
                "    let value: i16 = 32_767;",
                "    let mut formatter = TestFormatter;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"32767\");",
                "    let value: i16 = -32_768;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"32767-32768\");",
                "    let value: i16 = 0;",
                "    let _ = formatter.write_i16(&mut writer, value);",
                "    assert_eq!(writer, b\"32767-327680\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}