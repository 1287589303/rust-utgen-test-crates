{
  "name": "serde_json::map::{impl#17}::get",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:838:5:840:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.occupied.get()\n"
      ],
      "input_infer": "Map contains an entry with key \"serde\" and a value of type Value, specifically a number (e.g., json!(12)), testing both with and without the \"preserve_order\" feature.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::Number(Number::from(12)));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &Value::Number(Number::from(12)));"
              ],
              "code": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::Number(Number::from(12)));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "    assert_eq!(value, &Value::Number(Number::from(12)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::Bool(true));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &Value::Bool(true));"
              ],
              "code": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::Bool(true));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "    assert_eq!(value, &Value::Bool(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::String(\"test\".to_owned()));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &Value::String(\"test\".to_owned()));"
              ],
              "code": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::String(\"test\".to_owned()));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "    assert_eq!(value, &Value::String(\"test\".to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::Array(vec![Value::String(\"item\".to_owned())]));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &Value::Array(vec![Value::String(\"item\".to_owned())]));"
              ],
              "code": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    map.insert(\"serde\".to_owned(), Value::Array(vec![Value::String(\"item\".to_owned())]));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "    assert_eq!(value, &Value::Array(vec![Value::String(\"item\".to_owned())]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let mut inner_map = MapImpl::new();",
                "    inner_map.insert(\"key\".to_owned(), Value::Number(Number::from(10)));",
                "    map.insert(\"serde\".to_owned(), Value::Object(inner_map));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &Value::Object(inner_map));"
              ],
              "code": [
                "{",
                "    let mut map: MapImpl<String, Value> = MapImpl::new();",
                "    let mut inner_map = MapImpl::new();",
                "    inner_map.insert(\"key\".to_owned(), Value::Number(Number::from(10)));",
                "    map.insert(\"serde\".to_owned(), Value::Object(inner_map));",
                "    ",
                "    match map.entry(\"serde\") {",
                "        OccupiedEntry { occupied } => {",
                "            let value = occupied.get();",
                "        }",
                "        _ => {}",
                "    }",
                "    assert_eq!(value, &Value::Object(inner_map));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}