{
  "name": "serde_json::ser::{impl#11}::serialize_unit_variant",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:807:5:814:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "(variant is a non-empty string; _variant_index is a valid non-negative integer; _name is a valid static string)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"test_name\";",
                "    let variant_index = 0;",
                "    let variant = \"test_variant\";",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.ser.last_serialized, \"test_variant\");",
                "    assert!(serializer.serialize_unit_variant(name, variant_index, \"\").is_err());",
                "    assert!(serializer.serialize_unit_variant(\"\", variant_index, variant).is_ok());",
                "    assert!(serializer.serialize_unit_variant(name, u32::MAX, variant).is_err());",
                "    assert!(serializer.serialize_unit_variant(name, variant_index, \"invalid_variant\").is_ok());"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"test_name\";",
                "    let variant_index = 0;",
                "    let variant = \"test_variant\";",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "    assert_eq!(serializer.ser.last_serialized, \"test_variant\");",
                "    assert!(serializer.serialize_unit_variant(name, variant_index, \"\").is_err());",
                "    assert!(serializer.serialize_unit_variant(\"\", variant_index, variant).is_ok());",
                "    assert!(serializer.serialize_unit_variant(name, u32::MAX, variant).is_err());",
                "    assert!(serializer.serialize_unit_variant(name, variant_index, \"invalid_variant\").is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"non_empty_name\";",
                "    let variant_index = 1;",
                "    let variant = \"non_empty_variant\";",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.ser.serialize_str(\"non_empty_variant\").is_ok(), true);",
                "    assert_eq!(variant_index, 1);",
                "    assert_eq!(name, \"non_empty_name\");"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"non_empty_name\";",
                "    let variant_index = 1;",
                "    let variant = \"non_empty_variant\";",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "    assert_eq!(serializer.ser.serialize_str(\"non_empty_variant\").is_ok(), true);",
                "    assert_eq!(variant_index, 1);",
                "    assert_eq!(name, \"non_empty_name\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"boundary_name\";",
                "    let variant_index = std::u32::MAX; // Testing maximum valid index",
                "    let variant = \"boundary_variant\";",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_unit_variant(\"boundary_name\", std::u32::MAX, \"boundary_variant\"), Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"boundary_name\";",
                "    let variant_index = std::u32::MAX; // Testing maximum valid index",
                "    let variant = \"boundary_variant\";",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "    assert_eq!(serializer.serialize_unit_variant(\"boundary_name\", std::u32::MAX, \"boundary_variant\"), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"empty_variant_name\";",
                "    let variant_index = 2;",
                "    let variant = \"\"; // Testing empty string variant which is a boundary case",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_unit_variant(\"empty_variant_name\", 2, \"\"), Ok(()));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    let mut serializer = MapKeySerializer { ser: &mut TestSerializer };",
                "    let name = \"empty_variant_name\";",
                "    let variant_index = 2;",
                "    let variant = \"\"; // Testing empty string variant which is a boundary case",
                "    serializer.serialize_unit_variant(name, variant_index, variant).unwrap();",
                "    assert_eq!(serializer.serialize_unit_variant(\"empty_variant_name\", 2, \"\"), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}