{
  "name": "serde_json::value::ser::{impl#7}::serialize_u8",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:512:5:514:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(itoa::Buffer::new().format(value).to_owned())\n"
      ],
      "input_infer": "Test input conditions or ranges: u8 values from 0 to 255 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(0);",
                "}"
              ],
              "oracle": [
                "    let expected = Ok(itoa::Buffer::new().format(0).to_owned());",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(0);",
                "    let expected = Ok(itoa::Buffer::new().format(0).to_owned());",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(\"1\".to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(\"1\".to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(128).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(128).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(255).to_owned()));",
                "    let result = serializer.serialize_u8(0);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(0).to_owned()));",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(1).to_owned()));",
                "    let result = serializer.serialize_u8(127);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(127).to_owned()));",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(128).to_owned()));",
                "    let result = serializer.serialize_u8(200);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(200).to_owned()));",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(255).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(255).to_owned()));",
                "    let result = serializer.serialize_u8(0);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(0).to_owned()));",
                "    let result = serializer.serialize_u8(1);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(1).to_owned()));",
                "    let result = serializer.serialize_u8(127);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(127).to_owned()));",
                "    let result = serializer.serialize_u8(128);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(128).to_owned()));",
                "    let result = serializer.serialize_u8(200);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(200).to_owned()));",
                "    let result = serializer.serialize_u8(255);",
                "    assert_eq!(result, Ok(itoa::Buffer::new().format(255).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}