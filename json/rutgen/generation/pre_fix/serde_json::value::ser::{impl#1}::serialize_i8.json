{
  "name": "serde_json::value::ser::{impl#1}::serialize_i8",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:78:5:80:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: i8 values from -128 to 127, including boundary values and the special case of serialization behavior for edge cases like zero, minimum and maximum values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let _result = serializer.serialize_i8(-128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(Value::Number((-128i64).into())));",
                "    ",
                "    let _result = serializer.serialize_i8(0);",
                "    ",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    ",
                "    let _result = serializer.serialize_i8(127);",
                "    ",
                "    assert_eq!(_result, Ok(Value::Number(127i64.into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let _result = serializer.serialize_i8(-128);",
                "    assert_eq!(_result, Ok(Value::Number((-128i64).into())));",
                "    ",
                "    let _result = serializer.serialize_i8(0);",
                "    ",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    ",
                "    let _result = serializer.serialize_i8(127);",
                "    ",
                "    assert_eq!(_result, Ok(Value::Number(127i64.into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let _result = serializer.serialize_i8(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    let _result = serializer.serialize_i8(-1);",
                "    assert_eq!(_result, Ok(Value::Number((-1).into())));",
                "    let _result = serializer.serialize_i8(127);",
                "    assert_eq!(_result, Ok(Value::Number(127.into())));",
                "    let _result = serializer.serialize_i8(-128);",
                "    assert_eq!(_result, Ok(Value::Number((-128).into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let _result = serializer.serialize_i8(0);",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    let _result = serializer.serialize_i8(-1);",
                "    assert_eq!(_result, Ok(Value::Number((-1).into())));",
                "    let _result = serializer.serialize_i8(127);",
                "    assert_eq!(_result, Ok(Value::Number(127.into())));",
                "    let _result = serializer.serialize_i8(-128);",
                "    assert_eq!(_result, Ok(Value::Number((-128).into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let _result = serializer.serialize_i8(127);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(Value::Number(127.into())));",
                "    let _result = serializer.serialize_i8(-128);",
                "    assert_eq!(_result, Ok(Value::Number((-128).into())));",
                "    let _result = serializer.serialize_i8(0);",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    let _result = serializer.serialize_i8(64);",
                "    assert_eq!(_result, Ok(Value::Number(64.into())));",
                "    let _result = serializer.serialize_i8(-1);",
                "    assert_eq!(_result, Ok(Value::Number((-1).into())));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let _result = serializer.serialize_i8(127);",
                "    assert_eq!(_result, Ok(Value::Number(127.into())));",
                "    let _result = serializer.serialize_i8(-128);",
                "    assert_eq!(_result, Ok(Value::Number((-128).into())));",
                "    let _result = serializer.serialize_i8(0);",
                "    assert_eq!(_result, Ok(Value::Number(0.into())));",
                "    let _result = serializer.serialize_i8(64);",
                "    assert_eq!(_result, Ok(Value::Number(64.into())));",
                "    let _result = serializer.serialize_i8(-1);",
                "    assert_eq!(_result, Ok(Value::Number((-1).into())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}