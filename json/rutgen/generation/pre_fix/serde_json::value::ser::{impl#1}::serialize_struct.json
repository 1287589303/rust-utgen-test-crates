{
  "name": "serde_json::value::ser::{impl#1}::serialize_struct",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:271:5:279:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "name: a static string that matches either \"arbitrary_precision\" or \"raw_value\" for specific configs, or any other string; len: any non-negative integer value including 0, covering edge case of 0 to test behavior with empty struct\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[cfg(feature = \"arbitrary_precision\")]",
                "    {",
                "        let serializer = Serializer;",
                "        let result = serializer.serialize_struct(crate::number::TOKEN, 0);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SerializeMap::Number { out_value: None }));"
              ],
              "code": [
                "{",
                "    #[cfg(feature = \"arbitrary_precision\")]",
                "    {",
                "        let serializer = Serializer;",
                "        let result = serializer.serialize_struct(crate::number::TOKEN, 0);",
                "    }",
                "    assert_eq!(result, Ok(SerializeMap::Number { out_value: None }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[cfg(feature = \"raw_value\")]",
                "    {",
                "        let serializer = Serializer;",
                "        let result = serializer.serialize_struct(crate::raw::TOKEN, 0);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SerializeMap::RawValue { out_value: None }));",
                "    ",
                "    #[cfg(feature = \"arbitrary_precision\")]",
                "    assert_eq!(result, Ok(SerializeMap::Number { out_value: None }));",
                "    ",
                "    #[cfg(not(feature = \"raw_value\"))]",
                "    assert!(result.is_err());",
                "    ",
                "    #[cfg(not(feature = \"arbitrary_precision\"))]",
                "    assert!(result.is_err());",
                "    ",
                "    let result_with_non_matching_name = serializer.serialize_struct(\"other_name\", 0);",
                "    assert_eq!(result_with_non_matching_name, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));"
              ],
              "code": [
                "{",
                "    #[cfg(feature = \"raw_value\")]",
                "    {",
                "        let serializer = Serializer;",
                "        let result = serializer.serialize_struct(crate::raw::TOKEN, 0);",
                "    }",
                "    assert_eq!(result, Ok(SerializeMap::RawValue { out_value: None }));",
                "    ",
                "    #[cfg(feature = \"arbitrary_precision\")]",
                "    assert_eq!(result, Ok(SerializeMap::Number { out_value: None }));",
                "    ",
                "    #[cfg(not(feature = \"raw_value\"))]",
                "    assert!(result.is_err());",
                "    ",
                "    #[cfg(not(feature = \"arbitrary_precision\"))]",
                "    assert!(result.is_err());",
                "    ",
                "    let result_with_non_matching_name = serializer.serialize_struct(\"other_name\", 0);",
                "    assert_eq!(result_with_non_matching_name, Ok(SerializeMap::Map { map: Map::with_capacity(0), next_key: None }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_struct(\"some_other_name\", 0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SerializeMap::Map { map: Map::with_capacity(0), next_key: None });",
                "    ",
                "    let result_with_arbitrary_precision = serializer.serialize_struct(crate::number::TOKEN, 0);",
                "    assert!(result_with_arbitrary_precision.is_ok());",
                "    assert_eq!(result_with_arbitrary_precision.unwrap(), SerializeMap::Number { out_value: None });",
                "    ",
                "    let result_with_raw_value = serializer.serialize_struct(crate::raw::TOKEN, 0);",
                "    assert!(result_with_raw_value.is_ok());",
                "    assert_eq!(result_with_raw_value.unwrap(), SerializeMap::RawValue { out_value: None });"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_struct(\"some_other_name\", 0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SerializeMap::Map { map: Map::with_capacity(0), next_key: None });",
                "    ",
                "    let result_with_arbitrary_precision = serializer.serialize_struct(crate::number::TOKEN, 0);",
                "    assert!(result_with_arbitrary_precision.is_ok());",
                "    assert_eq!(result_with_arbitrary_precision.unwrap(), SerializeMap::Number { out_value: None });",
                "    ",
                "    let result_with_raw_value = serializer.serialize_struct(crate::raw::TOKEN, 0);",
                "    assert!(result_with_raw_value.is_ok());",
                "    assert_eq!(result_with_raw_value.unwrap(), SerializeMap::RawValue { out_value: None });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_struct(\"some_other_name\", 5);",
                "}"
              ],
              "oracle": [
                "    let expected_result = serializer.serialize_map(Some(5));",
                "    assert_eq!(result, expected_result);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().map.len(), 5);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_struct(\"some_other_name\", 5);",
                "    let expected_result = serializer.serialize_map(Some(5));",
                "    assert_eq!(result, expected_result);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().map.len(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_struct(\"some_other_name\", 1000);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.capacity() == 1000));",
                "    assert_eq!(result.is_ok(), true);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_struct(\"some_other_name\", 1000);",
                "    assert!(matches!(result, Ok(SerializeMap::Map { map, next_key: None }) if map.capacity() == 1000));",
                "    assert_eq!(result.is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}