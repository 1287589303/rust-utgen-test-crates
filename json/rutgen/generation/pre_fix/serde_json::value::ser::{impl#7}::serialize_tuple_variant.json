{
  "name": "serde_json::value::ser::{impl#7}::serialize_tuple_variant",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:614:5:622:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "_len: any usize value including 0; _variant_index: any u32 value including 0; _name: any valid static str; _variant: any valid static str\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let expected_error = key_must_be_a_string();",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
                "    assert_eq!(result, Err(expected_error));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
                "    let serializer = MapKeySerializer;",
                "    let expected_error = key_must_be_a_string();",
                "    let result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
                "    assert_eq!(result, Err(expected_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX);",
                "}"
              ],
              "oracle": [
                "    _err = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX); assert_eq!(_result, Err(key_must_be_a_string()));",
                "    _err = serializer.serialize_tuple_variant(\"\", 0, \"\", 0); assert_eq!(_result, Err(key_must_be_a_string()));",
                "    _err = serializer.serialize_tuple_variant(\"example_name\", 1, \"example_variant\", 10); assert_eq!(_result, Err(key_must_be_a_string()));",
                "    _err = serializer.serialize_tuple_variant(\"name_with_special_chars!@#\", 3, \"variant_with_special_chars&*()\", 5); assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX);",
                "    _err = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX); assert_eq!(_result, Err(key_must_be_a_string()));",
                "    _err = serializer.serialize_tuple_variant(\"\", 0, \"\", 0); assert_eq!(_result, Err(key_must_be_a_string()));",
                "    _err = serializer.serialize_tuple_variant(\"example_name\", 1, \"example_variant\", 10); assert_eq!(_result, Err(key_must_be_a_string()));",
                "    _err = serializer.serialize_tuple_variant(\"name_with_special_chars!@#\", 3, \"variant_with_special_chars&*()\", 5); assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"\", 0, \"test_variant\", 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"\", 0, \"test_variant\", 0);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"\", 0);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err(), key_must_be_a_string());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"\", 0);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err(), key_must_be_a_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", u32::MAX, \"test_variant\", 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let _result = serializer.serialize_tuple_variant(\"test_name\", u32::MAX, \"test_variant\", 0);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}