{
  "name": "serde_json::ser::Formatter::write_u128",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1681:5:1688:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions: writer must implement io::Write, value should be a valid u128 integer in the range [0, 2^128-1], include edge cases: 0, 1, 2^128-1, and random large values to test performance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 0;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"0\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"1\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 12345678901234567890;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"12345678901234567890\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = u128::MAX;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"340282366920938463463374607431768211455\");"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 0;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"0\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"1\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 12345678901234567890;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"12345678901234567890\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = u128::MAX;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer.output).unwrap(), \"340282366920938463463374607431768211455\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 123456789012345678901234567890;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"123456789012345678901234567890\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 0;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = u128::MAX;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"340282366920938463463374607431768211455\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 999999999999999999999999999999999999999999999999;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"999999999999999999999999999999999999999999999999\");"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 123456789012345678901234567890;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"123456789012345678901234567890\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 0;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = u128::MAX;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"340282366920938463463374607431768211455\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 999999999999999999999999999999999999999999999999;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"999999999999999999999999999999999999999999999999\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = u128::MAX;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 0;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1234567890123456789012345678901234567890;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1234567890123456789012345678901234567890\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 10;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"10\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 18446744073709551615; // max value for u128-1",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"18446744073709551615\");"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = u128::MAX;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 0;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1234567890123456789012345678901234567890;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1234567890123456789012345678901234567890\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 1;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 10;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"10\");",
                "    ",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 18446744073709551615; // max value for u128-1",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"18446744073709551615\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 123456789012345678901234567890123456;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"123456789012345678901234567890123456\");",
                "    assert!(writer.output.len() > 0);",
                "    assert!(writer.output.iter().all(|&x| x.is_ascii()));",
                "    assert!(writer.output.iter().collect::<Vec<_>>().windows(2).all(|w| w[0] != b'0' || w[1] == b'\\n'));",
                "    assert!(std::str::from_utf8(&writer.output).is_ok());",
                "    assert!(writer.output.starts_with(b\"1\"));",
                "    assert!(writer.output.ends_with(b\"6\"));",
                "    assert_eq!(writer.output.len(), 39);",
                "    assert!(writer.output.iter().any(|&x| x == b'7'));",
                "    assert!(writer.output.iter().any(|&x| x == b'8'));"
              ],
              "code": [
                "{",
                "    struct MockWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter { output: Vec::new() };",
                "    let value: u128 = 123456789012345678901234567890123456;",
                "    writer.write_u128(&mut writer, value).unwrap();",
                "    assert_eq!(writer.output, b\"123456789012345678901234567890123456\");",
                "    assert!(writer.output.len() > 0);",
                "    assert!(writer.output.iter().all(|&x| x.is_ascii()));",
                "    assert!(writer.output.iter().collect::<Vec<_>>().windows(2).all(|w| w[0] != b'0' || w[1] == b'\\n'));",
                "    assert!(std::str::from_utf8(&writer.output).is_ok());",
                "    assert!(writer.output.starts_with(b\"1\"));",
                "    assert!(writer.output.ends_with(b\"6\"));",
                "    assert_eq!(writer.output.len(), 39);",
                "    assert!(writer.output.iter().any(|&x| x == b'7'));",
                "    assert!(writer.output.iter().any(|&x| x == b'8'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}