[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from(42u64));",
          "    let _result = value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from(42u64)));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from(42u64));",
          "    let _result = value.as_number();",
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from(42u64)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from(-42i64));",
          "    let _result = value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from(-42i64)));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from(-42i64));",
          "    let _result = value.as_number();",
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from(-42i64)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from_f64(3.14).unwrap());",
          "    let _result = value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from_f64(3.14).unwrap()));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from_f64(3.14).unwrap());",
          "    let _result = value.as_number();",
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from_f64(3.14).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from_f64(-1.5).unwrap());",
          "    let _result = value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from_f64(-1.5).unwrap()));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from_f64(-1.5).unwrap());",
          "    let _result = value.as_number();",
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from_f64(-1.5).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from(0u64));",
          "    let _result = value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from(0u64)));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from(0u64));",
          "    let _result = value.as_number();",
          "    assert_eq!(value.as_number(), Some(&serde_json::Number::from(0u64)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from_f64(0.0).unwrap());",
          "    let _result = value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(&serde_json::Number::from_f64(0.0).unwrap()));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Number(serde_json::Number::from_f64(0.0).unwrap());",
          "    let _result = value.as_number();",
          "    assert_eq!(_result, Some(&serde_json::Number::from_f64(0.0).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]