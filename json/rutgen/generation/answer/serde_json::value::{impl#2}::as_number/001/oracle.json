[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    value.as_number();",
          "    assert_eq!(value.as_number(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    value.as_number();",
          "    assert_eq!(value.as_number(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(false);",
          "    value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(false);",
          "    value.as_number();",
          "    assert_eq!(value.as_number(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"test string\"));",
          "    value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"test string\"));",
          "    value.as_number();",
          "    assert_eq!(value.as_number(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array = vec![Value::Number(Number::from(1)), Value::Number(Number::from(2))];",
          "    let value = Value::Array(array);",
          "    value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), None);"
        ],
        "code": [
          "{",
          "    let array = vec![Value::Number(Number::from(1)), Value::Number(Number::from(2))];",
          "    let value = Value::Array(array);",
          "    value.as_number();",
          "    assert_eq!(value.as_number(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = Map {",
          "        map: alloc::collections::BTreeMap::new(),",
          "    };",
          "    let value = Value::Object(map);",
          "    value.as_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_number(), None);"
        ],
        "code": [
          "{",
          "    let map = Map {",
          "        map: alloc::collections::BTreeMap::new(),",
          "    };",
          "    let value = Value::Object(map);",
          "    value.as_number();",
          "    assert_eq!(value.as_number(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]