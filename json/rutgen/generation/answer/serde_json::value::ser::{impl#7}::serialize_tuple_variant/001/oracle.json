[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_tuple_variant(\"test_name\", 0, \"test_variant\", 0);",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let expected_error = key_must_be_a_string();",
          "    let result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
          "    assert_eq!(result, Err(expected_error));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
          "    let serializer = MapKeySerializer;",
          "    let expected_error = key_must_be_a_string();",
          "    let result = serializer.serialize_tuple_variant(\"test_name\", 1, \"test_variant\", 5);",
          "    assert_eq!(result, Err(expected_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX);",
          "}"
        ],
        "oracle": [
          "    _err = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX); assert_eq!(_result, Err(key_must_be_a_string()));",
          "    _err = serializer.serialize_tuple_variant(\"\", 0, \"\", 0); assert_eq!(_result, Err(key_must_be_a_string()));",
          "    _err = serializer.serialize_tuple_variant(\"example_name\", 1, \"example_variant\", 10); assert_eq!(_result, Err(key_must_be_a_string()));",
          "    _err = serializer.serialize_tuple_variant(\"name_with_special_chars!@#\", 3, \"variant_with_special_chars&*()\", 5); assert_eq!(_result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX);",
          "    _err = serializer.serialize_tuple_variant(\"test_name\", 2, \"test_variant\", usize::MAX); assert_eq!(_result, Err(key_must_be_a_string()));",
          "    _err = serializer.serialize_tuple_variant(\"\", 0, \"\", 0); assert_eq!(_result, Err(key_must_be_a_string()));",
          "    _err = serializer.serialize_tuple_variant(\"example_name\", 1, \"example_variant\", 10); assert_eq!(_result, Err(key_must_be_a_string()));",
          "    _err = serializer.serialize_tuple_variant(\"name_with_special_chars!@#\", 3, \"variant_with_special_chars&*()\", 5); assert_eq!(_result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"\", 0, \"test_variant\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"\", 0, \"test_variant\", 0);",
          "    assert_eq!(_result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"\", 0);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), key_must_be_a_string());"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", 0, \"\", 0);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), key_must_be_a_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", u32::MAX, \"test_variant\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let _result = serializer.serialize_tuple_variant(\"test_name\", u32::MAX, \"test_variant\", 0);",
          "    assert_eq!(_result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]