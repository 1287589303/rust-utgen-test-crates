[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: &[&str] = &[];",
          "    let x: Value = v.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Array(vec![]));",
          "    ",
          "    let v: &[&str] = &[\"lorem\", \"ipsum\", \"dolor\"];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![Value::String(\"lorem\".to_owned()), Value::String(\"ipsum\".to_owned()), Value::String(\"dolor\".to_owned())]));"
        ],
        "code": [
          "{",
          "    let v: &[&str] = &[];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![]));",
          "    ",
          "    let v: &[&str] = &[\"lorem\", \"ipsum\", \"dolor\"];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![Value::String(\"lorem\".to_owned()), Value::String(\"ipsum\".to_owned()), Value::String(\"dolor\".to_owned())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: &[&str] = &[\"string1\", \"string2\"];",
          "    let x: Value = v.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Array(vec![Value::String(\"string1\".to_owned()), Value::String(\"string2\".to_owned())]));"
        ],
        "code": [
          "{",
          "    let v: &[&str] = &[\"string1\", \"string2\"];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![Value::String(\"string1\".to_owned()), Value::String(\"string2\".to_owned())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: &[&str] = &[\"single\"];",
          "    let x: Value = v.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Array(vec![Value::String(\"single\".to_owned())]));",
          "    ",
          "    let v_empty: &[&str] = &[];",
          "    let x_empty: Value = v_empty.into();",
          "    assert_eq!(x_empty, Value::Array(vec![]));",
          "    ",
          "    let v_multiple: &[&str] = &[\"one\", \"two\", \"three\"];",
          "    let x_multiple: Value = v_multiple.into();",
          "    assert_eq!(x_multiple, Value::Array(vec![",
          "    Value::String(\"one\".to_owned()),",
          "    Value::String(\"two\".to_owned()),",
          "    Value::String(\"three\".to_owned())",
          "    ]));"
        ],
        "code": [
          "{",
          "    let v: &[&str] = &[\"single\"];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![Value::String(\"single\".to_owned())]));",
          "    ",
          "    let v_empty: &[&str] = &[];",
          "    let x_empty: Value = v_empty.into();",
          "    assert_eq!(x_empty, Value::Array(vec![]));",
          "    ",
          "    let v_multiple: &[&str] = &[\"one\", \"two\", \"three\"];",
          "    let x_multiple: Value = v_multiple.into();",
          "    assert_eq!(x_multiple, Value::Array(vec![",
          "    Value::String(\"one\".to_owned()),",
          "    Value::String(\"two\".to_owned()),",
          "    Value::String(\"three\".to_owned())",
          "    ]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: &[&str] = &[\"first\", \"second\", \"third\"];",
          "    let x: Value = v.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned()), Value::String(\"third\".to_owned())]));"
        ],
        "code": [
          "{",
          "    let v: &[&str] = &[\"first\", \"second\", \"third\"];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned()), Value::String(\"third\".to_owned())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: &[&str] = &[\"!@#$%^&*()\"];",
          "    let x: Value = v.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Array(vec![Value::String(String::from(\"!@#$%^&*()\"))]));"
        ],
        "code": [
          "{",
          "    let v: &[&str] = &[\"!@#$%^&*()\"];",
          "    let x: Value = v.into();",
          "    assert_eq!(x, Value::Array(vec![Value::String(String::from(\"!@#$%^&*()\"))]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]