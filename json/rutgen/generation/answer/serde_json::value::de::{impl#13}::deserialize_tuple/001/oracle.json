[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"an empty tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(0, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(0, visitor).is_ok(), true);",
          "    assert_eq!(value.deserialize_tuple(0, visitor).unwrap(), ());",
          "    assert!(matches!(value.deserialize_tuple(0, visitor), Ok(_)));",
          "    assert!(value.deserialize_tuple(0, visitor).is_ok());",
          "    assert!(value.deserialize_tuple(0, visitor).unwrap_err().is::<Error>());"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"an empty tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(0, visitor);",
          "    assert_eq!(value.deserialize_tuple(0, visitor).is_ok(), true);",
          "    assert_eq!(value.deserialize_tuple(0, visitor).unwrap(), ());",
          "    assert!(matches!(value.deserialize_tuple(0, visitor), Ok(_)));",
          "    assert!(value.deserialize_tuple(0, visitor).is_ok());",
          "    assert!(value.deserialize_tuple(0, visitor).unwrap_err().is::<Error>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String,);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a single tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok((String::new(),))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string())]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(1, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(1, visitor).unwrap(), (String::new(),));",
          "    assert!(value.deserialize_tuple(2, visitor).is_err());",
          "    assert!(value.deserialize_tuple(0, visitor).is_err());",
          "    assert!(value.deserialize_tuple(1, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(0, VisitorImpl).is_err());",
          "    let value_empty = Value::Array(vec![]);",
          "    assert!(value_empty.deserialize_tuple(1, visitor).is_err());",
          "    assert!(value_empty.deserialize_tuple(0, visitor).is_ok());"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String,);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a single tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok((String::new(),))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string())]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(1, visitor);",
          "    assert_eq!(value.deserialize_tuple(1, visitor).unwrap(), (String::new(),));",
          "    assert!(value.deserialize_tuple(2, visitor).is_err());",
          "    assert!(value.deserialize_tuple(0, visitor).is_err());",
          "    assert!(value.deserialize_tuple(1, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(0, VisitorImpl).is_err());",
          "    let value_empty = Value::Array(vec![]);",
          "    assert!(value_empty.deserialize_tuple(1, visitor).is_err());",
          "    assert!(value_empty.deserialize_tuple(0, visitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String, bool);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a two-element tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok((String::new(), true))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![",
          "        Value::String(\"test\".to_string()),",
          "        Value::Bool(true),",
          "    ]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(2, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(2, visitor).unwrap(), (String::from(\"test\"), true));",
          "    assert!(value.deserialize_tuple(3, visitor).is_err());",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(0, visitor).is_err());",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl).unwrap(), (String::from(\"test\"), true));",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(1, visitor).is_err());"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String, bool);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a two-element tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok((String::new(), true))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![",
          "        Value::String(\"test\".to_string()),",
          "        Value::Bool(true),",
          "    ]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(2, visitor);",
          "    assert_eq!(value.deserialize_tuple(2, visitor).unwrap(), (String::from(\"test\"), true));",
          "    assert!(value.deserialize_tuple(3, visitor).is_err());",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(0, visitor).is_err());",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl).unwrap(), (String::from(\"test\"), true));",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(1, visitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (u32, u32);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a larger tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok((0, 0))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![",
          "        Value::Number(Number::from(1)),",
          "        Value::Number(Number::from(2)),",
          "    ]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(2, visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(2, visitor), Ok((0, 0)));",
          "    assert_eq!(value.deserialize_tuple(1, visitor).is_err(), true);",
          "    assert_eq!(value.deserialize_tuple(0, visitor).is_err(), true);",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl).is_ok(), true);",
          "    assert!(matches!(value.deserialize_tuple(2, visitor), Ok((x, y)) if x == 0 && y == 0));",
          "    assert!(value.deserialize_tuple(3, visitor).is_err());"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (u32, u32);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a larger tuple\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok((0, 0))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![",
          "        Value::Number(Number::from(1)),",
          "        Value::Number(Number::from(2)),",
          "    ]);",
          "    let visitor = VisitorImpl;",
          "    let _ = value.deserialize_tuple(2, visitor);",
          "    assert_eq!(value.deserialize_tuple(2, visitor), Ok((0, 0)));",
          "    assert_eq!(value.deserialize_tuple(1, visitor).is_err(), true);",
          "    assert_eq!(value.deserialize_tuple(0, visitor).is_err(), true);",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl).is_ok(), true);",
          "    assert!(matches!(value.deserialize_tuple(2, visitor), Ok((x, y)) if x == 0 && y == 0));",
          "    assert!(value.deserialize_tuple(3, visitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]