[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                let byte = self.data[self.pos];",
          "                self.pos += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                Ok(Some(self.data[self.pos]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.pos",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn begin_raw_buffering(&mut self) {}",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn end_raw_buffering<V>(&mut self, _: V) -> Result<V::Value>",
          "        where",
          "            V: Visitor<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut reader = TestRead {",
          "        data: vec![b'h', b'e', b'l', b'l', b'o', b'\\\\', b'\"'],",
          "        pos: 0,",
          "    };",
          "",
          "    let validate = true;",
          "    ",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "        Ok(())",
          "    });",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert!(reader.peek().unwrap() == Some(b'h'));",
          "    assert!(reader.next().unwrap() == Some(b'h'));",
          "    assert!(scratch.len() == 0);",
          "    assert!(reader.next().unwrap() == Some(b'e'));",
          "    assert!(reader.next().unwrap() == Some(b'l'));",
          "    assert!(reader.next().unwrap() == Some(b'l'));",
          "    assert!(reader.next().unwrap() == Some(b'o'));",
          "    assert!(reader.next().unwrap() == Some(b'\\\\'));",
          "    assert!(reader.next().unwrap() == Some(b'\"'));",
          "    assert!(reader.byte_offset() == 7);",
          "    assert!(scratch.len() == 5);",
          "    assert!(scratch == vec![b'h', b'e', b'l', b'l', b'o']);",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "    Ok(())",
          "    });",
          "    assert!(result.is_ok());",
          "    assert!(scratch.len() == 5);",
          "    assert!(reader.byte_offset() == 7);",
          "    assert!(reader.next().is_ok());",
          "    assert!(reader.peek().unwrap().is_none());",
          "    assert!(reader.byte_offset() == 8);"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                let byte = self.data[self.pos];",
          "                self.pos += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                Ok(Some(self.data[self.pos]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.pos",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn begin_raw_buffering(&mut self) {}",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn end_raw_buffering<V>(&mut self, _: V) -> Result<V::Value>",
          "        where",
          "            V: Visitor<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut reader = TestRead {",
          "        data: vec![b'h', b'e', b'l', b'l', b'o', b'\\\\', b'\"'],",
          "        pos: 0,",
          "    };",
          "",
          "    let validate = true;",
          "    ",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "        Ok(())",
          "    });",
          "    assert!(result.is_ok());",
          "    assert!(reader.peek().unwrap() == Some(b'h'));",
          "    assert!(reader.next().unwrap() == Some(b'h'));",
          "    assert!(scratch.len() == 0);",
          "    assert!(reader.next().unwrap() == Some(b'e'));",
          "    assert!(reader.next().unwrap() == Some(b'l'));",
          "    assert!(reader.next().unwrap() == Some(b'l'));",
          "    assert!(reader.next().unwrap() == Some(b'o'));",
          "    assert!(reader.next().unwrap() == Some(b'\\\\'));",
          "    assert!(reader.next().unwrap() == Some(b'\"'));",
          "    assert!(reader.byte_offset() == 7);",
          "    assert!(scratch.len() == 5);",
          "    assert!(scratch == vec![b'h', b'e', b'l', b'l', b'o']);",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "    Ok(())",
          "    });",
          "    assert!(result.is_ok());",
          "    assert!(scratch.len() == 5);",
          "    assert!(reader.byte_offset() == 7);",
          "    assert!(reader.next().is_ok());",
          "    assert!(reader.peek().unwrap().is_none());",
          "    assert!(reader.byte_offset() == 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                let byte = self.data[self.pos];",
          "                self.pos += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                Ok(Some(self.data[self.pos]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.pos",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn begin_raw_buffering(&mut self) {}",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn end_raw_buffering<V>(&mut self, _: V) -> Result<V::Value>",
          "        where",
          "            V: Visitor<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut reader = TestRead {",
          "        data: vec![b'h', b'e', b'l', b'l', b'o', b'\"'],",
          "        pos: 0,",
          "    };",
          "",
          "    let validate = true;",
          "",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "        Ok(())",
          "    });",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert!(parse_escape(&mut reader, validate, &mut scratch).is_ok());",
          "    assert!(next_or_eof(&mut reader).unwrap().is_some());",
          "    assert!(is_escape(b'\\\\', true));",
          "    assert_eq!(reader.data[reader.pos], b'\\\\');",
          "    assert_eq!(reader.data[reader.pos], b'\"');",
          "    assert!(validate);",
          "    assert!(reader.data[reader.pos] == b'h' || reader.data[reader.pos] == b'e' || reader.data[reader.pos] == b'l' || reader.data[reader.pos] == b'o');"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                let byte = self.data[self.pos];",
          "                self.pos += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                Ok(Some(self.data[self.pos]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.pos",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn begin_raw_buffering(&mut self) {}",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn end_raw_buffering<V>(&mut self, _: V) -> Result<V::Value>",
          "        where",
          "            V: Visitor<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut reader = TestRead {",
          "        data: vec![b'h', b'e', b'l', b'l', b'o', b'\"'],",
          "        pos: 0,",
          "    };",
          "",
          "    let validate = true;",
          "",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "        Ok(())",
          "    });",
          "    assert!(result.is_ok());",
          "    assert!(parse_escape(&mut reader, validate, &mut scratch).is_ok());",
          "    assert!(next_or_eof(&mut reader).unwrap().is_some());",
          "    assert!(is_escape(b'\\\\', true));",
          "    assert_eq!(reader.data[reader.pos], b'\\\\');",
          "    assert_eq!(reader.data[reader.pos], b'\"');",
          "    assert!(validate);",
          "    assert!(reader.data[reader.pos] == b'h' || reader.data[reader.pos] == b'e' || reader.data[reader.pos] == b'l' || reader.data[reader.pos] == b'o');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                let byte = self.data[self.pos];",
          "                self.pos += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                Ok(Some(self.data[self.pos]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.pos",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn begin_raw_buffering(&mut self) {}",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn end_raw_buffering<V>(&mut self, _: V) -> Result<V::Value>",
          "        where",
          "            V: Visitor<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut reader = TestRead {",
          "        data: vec![b'h', b'e', b'l', b'l', b'o', b'\\x1F'],",
          "        pos: 0,",
          "    };",
          "",
          "    let validate = true;",
          "",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "        Ok(())",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'h')));",
          "    assert!(is_escape(b'h', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'e')));",
          "    assert!(is_escape(b'e', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'l')));",
          "    assert!(is_escape(b'l', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'l')));",
          "    assert!(is_escape(b'l', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'o')));",
          "    assert!(is_escape(b'o', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'\\x1F')));",
          "    assert!(is_escape(b'\\x1F', true));",
          "    scratch.push(b'h');",
          "    scratch.push(b'e');",
          "    scratch.push(b'l');",
          "    scratch.push(b'l');",
          "    scratch.push(b'o');",
          "    let ch = b'\\x1F';",
          "    if ch == b'\\\\' {",
          "    tri!(parse_escape(&mut reader, validate, &mut scratch));",
          "    }",
          "    assert!(validate);",
          "    assert_eq!(result, Err(ErrorCode::ControlCharacterWhileParsingString));"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                let byte = self.data[self.pos];",
          "                self.pos += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.pos < self.data.len() {",
          "                Ok(Some(self.data[self.pos]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.pos",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn begin_raw_buffering(&mut self) {}",
          "",
          "        #[cfg(feature = \"raw_value\")]",
          "        fn end_raw_buffering<V>(&mut self, _: V) -> Result<V::Value>",
          "        where",
          "            V: Visitor<'de>,",
          "        {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut reader = TestRead {",
          "        data: vec![b'h', b'e', b'l', b'l', b'o', b'\\x1F'],",
          "        pos: 0,",
          "    };",
          "",
          "    let validate = true;",
          "",
          "    let result = reader.parse_str_bytes(&mut scratch, validate, |_, _| {",
          "        Ok(())",
          "    });",
          "    assert!(result.is_err());",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'h')));",
          "    assert!(is_escape(b'h', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'e')));",
          "    assert!(is_escape(b'e', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'l')));",
          "    assert!(is_escape(b'l', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'l')));",
          "    assert!(is_escape(b'l', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'o')));",
          "    assert!(is_escape(b'o', true));",
          "    assert_eq!(next_or_eof(&mut reader), Ok(Some(b'\\x1F')));",
          "    assert!(is_escape(b'\\x1F', true));",
          "    scratch.push(b'h');",
          "    scratch.push(b'e');",
          "    scratch.push(b'l');",
          "    scratch.push(b'l');",
          "    scratch.push(b'o');",
          "    let ch = b'\\x1F';",
          "    if ch == b'\\\\' {",
          "    tri!(parse_escape(&mut reader, validate, &mut scratch));",
          "    }",
          "    assert!(validate);",
          "    assert_eq!(result, Err(ErrorCode::ControlCharacterWhileParsingString));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]