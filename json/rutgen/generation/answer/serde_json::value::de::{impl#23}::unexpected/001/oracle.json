[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![(\"key1\".to_string(), Value::Null)].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![(\"key1\".to_string(), Value::Null)].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "    assert_eq!(result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![(\"single_key\".to_string(), Value::Bool(true))].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![(\"single_key\".to_string(), Value::Bool(true))].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "    assert_eq!(result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![",
          "            (\"key1\".to_string(), Value::Number(Number { n: 1 })),",
          "            (\"key2\".to_string(), Value::String(\"value\".to_string())),",
          "        ].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![",
          "            (\"key1\".to_string(), Value::Number(Number { n: 1 })),",
          "            (\"key2\".to_string(), Value::String(\"value\".to_string())),",
          "        ].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "    assert_eq!(result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![(\"\".to_string(), Value::Array(vec![]))].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Unexpected::Map);"
        ],
        "code": [
          "{",
          "    let obj = Value::Object(Map {",
          "        map: vec![(\"\".to_string(), Value::Array(vec![]))].into_iter().collect(),",
          "    });",
          "    let result = obj.unexpected();",
          "    assert_eq!(result, Unexpected::Map);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]