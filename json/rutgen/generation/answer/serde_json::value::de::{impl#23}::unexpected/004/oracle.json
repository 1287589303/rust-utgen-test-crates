[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct IntegerNumber;",
          "    impl Number for IntegerNumber {}",
          "    ",
          "    let number_instance = IntegerNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value_instance.unexpected(), Unexpected::Other(\"number\"));"
        ],
        "code": [
          "{",
          "    struct IntegerNumber;",
          "    impl Number for IntegerNumber {}",
          "    ",
          "    let number_instance = IntegerNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "    assert_eq!(value_instance.unexpected(), Unexpected::Other(\"number\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatNumber;",
          "    impl Number for FloatNumber {}",
          "    ",
          "    let number_instance = FloatNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value_instance.unexpected(), Unexpected::Other(\"number\"));"
        ],
        "code": [
          "{",
          "    struct FloatNumber;",
          "    impl Number for FloatNumber {}",
          "    ",
          "    let number_instance = FloatNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "    assert_eq!(value_instance.unexpected(), Unexpected::Other(\"number\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NegativeNumber;",
          "    impl Number for NegativeNumber {}",
          "    ",
          "    let number_instance = NegativeNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "}"
        ],
        "oracle": [
          "    let value_instance = Value::Number(NegativeNumber);",
          "    let result = value_instance.unexpected();",
          "    assert_eq!(result, Unexpected::Other(\"number\"));"
        ],
        "code": [
          "{",
          "    struct NegativeNumber;",
          "    impl Number for NegativeNumber {}",
          "    ",
          "    let number_instance = NegativeNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "    let value_instance = Value::Number(NegativeNumber);",
          "    let result = value_instance.unexpected();",
          "    assert_eq!(result, Unexpected::Other(\"number\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NaNNumber;",
          "    impl Number for NaNNumber {}",
          "    ",
          "    let number_instance = NaNNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "}"
        ],
        "oracle": [
          "    let number_instance = NaNNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    let result = value_instance.unexpected();",
          "    assert!(matches!(result, Unexpected::Other(\"number\")));"
        ],
        "code": [
          "{",
          "    struct NaNNumber;",
          "    impl Number for NaNNumber {}",
          "    ",
          "    let number_instance = NaNNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "    let number_instance = NaNNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    let result = value_instance.unexpected();",
          "    assert!(matches!(result, Unexpected::Other(\"number\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InfinityNumber;",
          "    impl Number for InfinityNumber {}",
          "    ",
          "    let number_instance = InfinityNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value_instance.unexpected(), Unexpected::Other(\"number\"));"
        ],
        "code": [
          "{",
          "    struct InfinityNumber;",
          "    impl Number for InfinityNumber {}",
          "    ",
          "    let number_instance = InfinityNumber;",
          "    let value_instance = Value::Number(number_instance);",
          "    value_instance.unexpected();",
          "    assert_eq!(value_instance.unexpected(), Unexpected::Other(\"number\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]