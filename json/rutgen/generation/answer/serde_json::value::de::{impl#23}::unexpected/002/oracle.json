[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let _result = value.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.unexpected(), Unexpected::Seq);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let _result = value.unexpected();",
          "    assert_eq!(value.unexpected(), Unexpected::Seq);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let _result = value.unexpected();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Unexpected::Seq);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let _result = value.unexpected();",
          "    assert_eq!(_result, Unexpected::Seq);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Null, Value::String(\"test\".to_owned()), Value::Number(Number { n: 0 })]);",
          "    let _result = value.unexpected();",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Null, Value::String(\"test\".to_owned()), Value::Number(Number { n: 0 })]);",
          "    let result = value.unexpected();",
          "    assert_eq!(result, Unexpected::Seq);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Null, Value::String(\"test\".to_owned()), Value::Number(Number { n: 0 })]);",
          "    let _result = value.unexpected();",
          "    let value = Value::Array(vec![Value::Null, Value::String(\"test\".to_owned()), Value::Number(Number { n: 0 })]);",
          "    let result = value.unexpected();",
          "    assert_eq!(result, Unexpected::Seq);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]