[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.iter.clone().count() == 1);",
          "    assert!(matches!(deserializer.iter.next(), Some(Value::Bool(true))));",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(deserializer.next_element_seed(seed).unwrap() == Some(()));",
          "    assert!(deserializer.iter.clone().count() == 0);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "    assert!(deserializer.iter.clone().count() == 1);",
          "    assert!(matches!(deserializer.iter.next(), Some(Value::Bool(true))));",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(deserializer.next_element_seed(seed).unwrap() == Some(()));",
          "    assert!(deserializer.iter.clone().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from(42));",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(Some(_))));",
          "    assert!(matches!(deserializer.iter.next(), Some(Value::Number(Number::from(42)))));",
          "    assert_eq!(deserializer.iter.len(), 0);",
          "    assert!(deserializer.next_element_seed(seed).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from(42));",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(Some(_))));",
          "    assert!(matches!(deserializer.iter.next(), Some(Value::Number(Number::from(42)))));",
          "    assert_eq!(deserializer.iter.len(), 0);",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(\"test\".to_string());",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "}"
        ],
        "oracle": [
          "    let value = Value::String(\"test\".to_string());",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let result = deserializer.next_element_seed(seed);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().is_some(), true);",
          "    assert_eq!(result.unwrap().unwrap(), seed.deserialize(&value).unwrap());"
        ],
        "code": [
          "{",
          "    let value = Value::String(\"test\".to_string());",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "    let value = Value::String(\"test\".to_string());",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let result = deserializer.next_element_seed(seed);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().is_some(), true);",
          "    assert_eq!(result.unwrap().unwrap(), seed.deserialize(&value).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(false)]);",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.iter.next().is_some(), true);",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(Some(_))));",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(None)));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(false)]);",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "    assert_eq!(deserializer.iter.next().is_some(), true);",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(Some(_))));",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(None)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map::new());",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.iter.len(), 1);",
          "    assert!(deserializer.iter.next().is_some());",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(Some(_))));",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(None)));",
          "    assert!(deserializer.iter.len() == 0);"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map::new());",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "    assert_eq!(deserializer.iter.len(), 1);",
          "    assert!(deserializer.iter.next().is_some());",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(Some(_))));",
          "    assert!(matches!(deserializer.next_element_seed(seed), Ok(None)));",
          "    assert!(deserializer.iter.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.iter.len(), 1);",
          "    assert_eq!(deserializer.iter.next(), Some(&Value::Null));",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(deserializer.next_element_seed(seed).unwrap().is_none());"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let values = vec![value];",
          "    let mut deserializer = SeqRefDeserializer { iter: values.iter() };",
          "    let seed = serde::de::seed::IgnoredAny;",
          "    let _ = deserializer.next_element_seed(seed);",
          "    assert_eq!(deserializer.iter.len(), 1);",
          "    assert_eq!(deserializer.iter.next(), Some(&Value::Null));",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(deserializer.next_element_seed(seed).is_ok());",
          "    assert!(deserializer.next_element_seed(seed).unwrap().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]