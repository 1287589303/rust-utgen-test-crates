[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let _ = value.is_u64();",
          "}"
        ],
        "oracle": [
          "    assert!(!value.is_u64());"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let _ = value.is_u64();",
          "    assert!(!value.is_u64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(false);",
          "    let _ = value.is_u64();",
          "}"
        ],
        "oracle": [
          "    assert!(!value.is_u64());"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(false);",
          "    let _ = value.is_u64();",
          "    assert!(!value.is_u64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"not a number\"));",
          "    let _ = value.is_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_u64(), false);"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"not a number\"));",
          "    let _ = value.is_u64();",
          "    assert_eq!(value.is_u64(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element\"))]);",
          "    let _ = value.is_u64();",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::String(String::from(\"element\"))]);",
          "    assert_eq!(value.is_u64(), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element\"))]);",
          "    let _ = value.is_u64();",
          "    let value = Value::Array(vec![Value::String(String::from(\"element\"))]);",
          "    assert_eq!(value.is_u64(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: std::collections::BTreeMap::new() });",
          "    let _ = value.is_u64();",
          "}"
        ],
        "oracle": [
          "    assert!(!value.is_u64());"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: std::collections::BTreeMap::new() });",
          "    let _ = value.is_u64();",
          "    assert!(!value.is_u64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]