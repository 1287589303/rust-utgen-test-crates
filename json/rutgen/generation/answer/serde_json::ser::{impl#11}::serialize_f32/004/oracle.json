[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    struct MockFormatter;",
          "",
          "    let mut writer = MockWriter;",
          "    let formatter = MockFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f32(f32::NAN);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    struct MockFormatter;",
          "",
          "    let mut writer = MockWriter;",
          "    let formatter = MockFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f32(f32::NAN);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    struct MockFormatter;",
          "",
          "    let mut writer = MockWriter;",
          "    let formatter = MockFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f32(f32::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    struct MockFormatter;",
          "",
          "    let mut writer = MockWriter;",
          "    let formatter = MockFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f32(f32::INFINITY);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    struct MockFormatter;",
          "",
          "    let mut writer = MockWriter;",
          "    let formatter = MockFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f32(f32::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    struct MockFormatter;",
          "",
          "    let mut writer = MockWriter;",
          "    let formatter = MockFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f32(f32::NEG_INFINITY);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), float_key_must_be_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]