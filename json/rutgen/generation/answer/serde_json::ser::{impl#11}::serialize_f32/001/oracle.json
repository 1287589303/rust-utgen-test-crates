[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let _ = serializer.serialize_f32(f32::NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f32(f32::NAN), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0)));",
          "    assert!(matches!(serializer.serialize_f32(f32::NAN).err(), Some(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let _ = serializer.serialize_f32(f32::NAN);",
          "    assert_eq!(serializer.serialize_f32(f32::NAN), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0)));",
          "    assert!(matches!(serializer.serialize_f32(f32::NAN).err(), Some(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let _ = serializer.serialize_f32(f32::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f32(f32::INFINITY), Err(float_key_must_be_finite()));",
          "    assert!(matches!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
          "    assert!(matches!(serializer.serialize_f32(f32::INFINITY), Err(_)));",
          "    assert!(!f32::INFINITY.is_finite());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let _ = serializer.serialize_f32(f32::INFINITY);",
          "    assert_eq!(serializer.serialize_f32(f32::INFINITY), Err(float_key_must_be_finite()));",
          "    assert!(matches!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
          "    assert!(matches!(serializer.serialize_f32(f32::INFINITY), Err(_)));",
          "    assert!(!f32::INFINITY.is_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let _ = serializer.serialize_f32(f32::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_f32(f32::NEG_INFINITY), Err(float_key_must_be_finite()));",
          "    assert!(matches!(serializer.serialize_f32(f32::NEG_INFINITY), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))",
          "        }",
          "        fn write_f32(&mut self, _writer: &mut dyn io::Write, _value: f32) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        fn end_string(&mut self, _writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let _ = serializer.serialize_f32(f32::NEG_INFINITY);",
          "    assert_eq!(serializer.serialize_f32(f32::NEG_INFINITY), Err(float_key_must_be_finite()));",
          "    assert!(matches!(serializer.serialize_f32(f32::NEG_INFINITY), Err(Error::syntax(ErrorCode::FloatKeyMustBeFinite, 0, 0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]