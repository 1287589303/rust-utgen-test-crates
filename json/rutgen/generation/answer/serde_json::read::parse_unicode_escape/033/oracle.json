[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead {",
          "        hex_value: Option<u16>,",
          "        can_peek: bool,",
          "    }",
          "    ",
          "    impl MockRead {",
          "        fn new(hex_value: u16, can_peek: bool) -> Self {",
          "            Self {",
          "                hex_value: Some(hex_value),",
          "                can_peek,",
          "            }",
          "        }",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead {",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            self.hex_value.take().ok_or(Error::new(ErrorCode::InvalidNumber))",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.can_peek {",
          "                Ok(Some(b'\\\\'))",
          "            } else {",
          "                Err(Error::new(ErrorCode::EofWhileParsingString))",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut read = MockRead::new(0xD800, false);",
          "    let result = parse_unicode_escape(&mut read, false, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err().err == Error::new(ErrorCode::UnexpectedEndOfHexEscape);",
          "    result.unwrap_err().err == Error::new(ErrorCode::EofWhileParsingString);",
          "    result.unwrap_err().err == Error::new(ErrorCode::LoneLeadingSurrogateInHexEscape);",
          "    scratch.is_empty();",
          "    scratch.len() == 0;",
          "    scratch.capacity() == 0;"
        ],
        "code": [
          "{",
          "    struct MockRead {",
          "        hex_value: Option<u16>,",
          "        can_peek: bool,",
          "    }",
          "    ",
          "    impl MockRead {",
          "        fn new(hex_value: u16, can_peek: bool) -> Self {",
          "            Self {",
          "                hex_value: Some(hex_value),",
          "                can_peek,",
          "            }",
          "        }",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead {",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            self.hex_value.take().ok_or(Error::new(ErrorCode::InvalidNumber))",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.can_peek {",
          "                Ok(Some(b'\\\\'))",
          "            } else {",
          "                Err(Error::new(ErrorCode::EofWhileParsingString))",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut read = MockRead::new(0xD800, false);",
          "    let result = parse_unicode_escape(&mut read, false, &mut scratch);",
          "    result.unwrap_err().err == Error::new(ErrorCode::UnexpectedEndOfHexEscape);",
          "    result.unwrap_err().err == Error::new(ErrorCode::EofWhileParsingString);",
          "    result.unwrap_err().err == Error::new(ErrorCode::LoneLeadingSurrogateInHexEscape);",
          "    scratch.is_empty();",
          "    scratch.len() == 0;",
          "    scratch.capacity() == 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead {",
          "        hex_value: Option<u16>,",
          "        can_peek: bool,",
          "    }",
          "    ",
          "    impl MockRead {",
          "        fn new(hex_value: u16, can_peek: bool) -> Self {",
          "            Self {",
          "                hex_value: Some(hex_value),",
          "                can_peek,",
          "            }",
          "        }",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead {",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            self.hex_value.take().ok_or(Error::new(ErrorCode::InvalidNumber))",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.can_peek {",
          "                Ok(Some(b'\\\\'))",
          "            } else {",
          "                Err(Error::new(ErrorCode::EofWhileParsingString))",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut read = MockRead::new(0xDBFF, false);",
          "    let result = parse_unicode_escape(&mut read, false, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    let mock_read = MockRead::new(0xD800, false);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "    let mock_read = MockRead::new(0xDBFF, false);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "    let mock_read = MockRead::new(0xD800, true);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "    let mock_read = MockRead::new(0xDBFF, true);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);"
        ],
        "code": [
          "{",
          "    struct MockRead {",
          "        hex_value: Option<u16>,",
          "        can_peek: bool,",
          "    }",
          "    ",
          "    impl MockRead {",
          "        fn new(hex_value: u16, can_peek: bool) -> Self {",
          "            Self {",
          "                hex_value: Some(hex_value),",
          "                can_peek,",
          "            }",
          "        }",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead {",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            self.hex_value.take().ok_or(Error::new(ErrorCode::InvalidNumber))",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.can_peek {",
          "                Ok(Some(b'\\\\'))",
          "            } else {",
          "                Err(Error::new(ErrorCode::EofWhileParsingString))",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "    }",
          "",
          "    let mut scratch = Vec::new();",
          "    let mut read = MockRead::new(0xDBFF, false);",
          "    let result = parse_unicode_escape(&mut read, false, &mut scratch);",
          "    let mock_read = MockRead::new(0xD800, false);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "    let mock_read = MockRead::new(0xDBFF, false);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "    let mock_read = MockRead::new(0xD800, true);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "    let mock_read = MockRead::new(0xDBFF, true);",
          "    let result = parse_unicode_escape(&mut mock_read, false, &mut scratch);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code, ErrorCode::UnexpectedEndOfHexEscape);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]