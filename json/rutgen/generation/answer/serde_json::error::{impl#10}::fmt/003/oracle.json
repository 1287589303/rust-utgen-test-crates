[
  {
    "uses": [
      "use serde::de;",
      "use core::fmt;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "    use core::fmt;",
          "    ",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let float_values: [f64; 5] = [0.0, -1.0, 1.0, f64::INFINITY, f64::NAN];",
          "",
          "    for &value in &float_values {",
          "        let unexpected_float = de::Unexpected::Float(value);",
          "        let json_unexpected = JsonUnexpected(unexpected_float);",
          "        let mut formatter = TestFormatter;",
          "",
          "        json_unexpected.fmt(&mut formatter);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write_str(\"floating point `0.0`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `-1.0`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `1.0`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `inf`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `nan`\").is_ok(), true);"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "    use core::fmt;",
          "    ",
          "    struct TestFormatter;",
          "",
          "    impl fmt::Write for TestFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let float_values: [f64; 5] = [0.0, -1.0, 1.0, f64::INFINITY, f64::NAN];",
          "",
          "    for &value in &float_values {",
          "        let unexpected_float = de::Unexpected::Float(value);",
          "        let json_unexpected = JsonUnexpected(unexpected_float);",
          "        let mut formatter = TestFormatter;",
          "",
          "        json_unexpected.fmt(&mut formatter);",
          "    }",
          "    assert_eq!(formatter.write_str(\"floating point `0.0`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `-1.0`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `1.0`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `inf`\").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"floating point `nan`\").is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]