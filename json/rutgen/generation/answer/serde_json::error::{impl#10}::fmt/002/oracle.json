[
  {
    "uses": [
      "use serde::de;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Unit;",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"null\");",
          "    assert!(formatter.flags().is_empty());",
          "    assert!(formatter.precision().is_none());",
          "    assert!(formatter.alternate());",
          "    assert_eq!(formatter.width(), None);"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Unit;",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"null\");",
          "    assert!(formatter.flags().is_empty());",
          "    assert!(formatter.precision().is_none());",
          "    assert!(formatter.alternate());",
          "    assert_eq!(formatter.width(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(0.0);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"floating point `0.0`\");",
          "    assert!(formatter.write_str(\"null\").is_ok());",
          "    assert!(formatter.write_str(\"floating point `1.23`\").is_ok());",
          "    let unexpected = de::Unexpected::Unit;",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    assert!(json_unexpected.fmt(&mut formatter).is_ok());"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(0.0);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `0.0`\");",
          "    assert!(formatter.write_str(\"null\").is_ok());",
          "    assert!(formatter.write_str(\"floating point `1.23`\").is_ok());",
          "    let unexpected = de::Unexpected::Unit;",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    assert!(json_unexpected.fmt(&mut formatter).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(3.14);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"floating point `3.14`\");",
          "    assert!(formatter.write_str(\"null\").is_ok());",
          "    assert!(formatter.write_str(\"\").is_ok());",
          "    assert!(formatter.write_str(\"random string\").is_ok());",
          "    assert!(formatter.write_str(\"null\").is_ok());"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(3.14);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `3.14`\");",
          "    assert!(formatter.write_str(\"null\").is_ok());",
          "    assert!(formatter.write_str(\"\").is_ok());",
          "    assert!(formatter.write_str(\"random string\").is_ok());",
          "    assert!(formatter.write_str(\"null\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(-2.71);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"floating point `-2.710000`\");",
          "    assert!(formatter.error().is_none());",
          "    assert!(formatter.is_empty());",
          "    assert_eq!(formatter.to_string(), \"floating point `-2.710000`\");",
          "    formatter.clear();"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(-2.71);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"floating point `-2.710000`\");",
          "    assert!(formatter.error().is_none());",
          "    assert!(formatter.is_empty());",
          "    assert_eq!(formatter.to_string(), \"floating point `-2.710000`\");",
          "    formatter.clear();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(f32::NAN);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_unexpected.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.to_string(), \"floating point `NaN`\");",
          "    assert!(formatter.error().is_none());",
          "    assert_eq!(formatter.capacity(), expected_capacity);",
          "    assert!(formatter.flags().contains(expected_flags));"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(f32::NAN);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert_eq!(json_unexpected.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.to_string(), \"floating point `NaN`\");",
          "    assert!(formatter.error().is_none());",
          "    assert_eq!(formatter.capacity(), expected_capacity);",
          "    assert!(formatter.flags().contains(expected_flags));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(f32::INFINITY);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"floating point `Infinity`\");",
          "    assert!(formatter.buffer().is_empty());",
          "    assert!(formatter.write_str(\"dummy\").is_err());",
          "    assert!(formatter.write_str(\"null\").is_err());",
          "    assert!(formatter.write_str(\"\").is_ok());"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(f32::INFINITY);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"floating point `Infinity`\");",
          "    assert!(formatter.buffer().is_empty());",
          "    assert!(formatter.write_str(\"dummy\").is_err());",
          "    assert!(formatter.write_str(\"null\").is_err());",
          "    assert!(formatter.write_str(\"\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(f32::NEG_INFINITY);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(formatter.to_string() == \"floating point `-âˆž`\");",
          "    assert!(json_unexpected.fmt(&mut formatter).is_ok());"
        ],
        "code": [
          "{",
          "    use serde::de;",
          "",
          "    let unexpected = de::Unexpected::Float(f32::NEG_INFINITY);",
          "    let json_unexpected = JsonUnexpected(unexpected);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = json_unexpected.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"floating point `-âˆž`\");",
          "    assert!(json_unexpected.fmt(&mut formatter).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]