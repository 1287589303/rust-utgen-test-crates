[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"test_variant\");",
          "    let vec = vec![",
          "        Value::Null,",
          "        Value::Bool(true),",
          "        Value::Number(Number::from(12.5)),",
          "        Value::String(String::from(\"a string\")),",
          "        Value::Array(vec![Value::String(String::from(\"element\"))]),",
          "        Value::Object(Map::new()),",
          "    ];",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Object(Map::new().insert(\"test_variant\".to_string(), Value::Array(vec![",
          "    Value::Null,",
          "    Value::Bool(true),",
          "    Value::Number(Number::from(12.5)),",
          "    Value::String(\"a string\".to_string()),",
          "    Value::Array(vec![Value::String(\"element\".to_string())]),",
          "    Value::Object(Map::new()),",
          "    ])))));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"test_variant\");",
          "    let vec = vec![",
          "        Value::Null,",
          "        Value::Bool(true),",
          "        Value::Number(Number::from(12.5)),",
          "        Value::String(String::from(\"a string\")),",
          "        Value::Array(vec![Value::String(String::from(\"element\"))]),",
          "        Value::Object(Map::new()),",
          "    ];",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "    assert_eq!(_result, Ok(Value::Object(Map::new().insert(\"test_variant\".to_string(), Value::Array(vec![",
          "    Value::Null,",
          "    Value::Bool(true),",
          "    Value::Number(Number::from(12.5)),",
          "    Value::String(\"a string\".to_string()),",
          "    Value::Array(vec![Value::String(\"element\".to_string())]),",
          "    Value::Object(Map::new()),",
          "    ])))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"large_variant\");",
          "    let vec = (0..10_000).map(|_| Value::String(String::from(\"large_element\"))).collect();",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap(), Value::Object(Map::new().insert(\"large_variant\".to_string(), Value::Array(vec![Value::String(\"large_element\".to_string()); 10_000]))));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"large_variant\");",
          "    let vec = (0..10_000).map(|_| Value::String(String::from(\"large_element\"))).collect();",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap(), Value::Object(Map::new().insert(\"large_variant\".to_string(), Value::Array(vec![Value::String(\"large_element\".to_string()); 10_000]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"null_variant\");",
          "    let vec = vec![Value::Null];",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Object(Map::new().insert(\"null_variant\".to_string(), Value::Array(vec![Value::Null])))));",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(Value::Object(_))));",
          "    assert_eq!(_result.unwrap(), Value::Object(Map::new().insert(\"null_variant\".to_string(), Value::Array(vec![Value::Null]))));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"null_variant\");",
          "    let vec = vec![Value::Null];",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "    assert_eq!(_result, Ok(Value::Object(Map::new().insert(\"null_variant\".to_string(), Value::Array(vec![Value::Null])))));",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(Value::Object(_))));",
          "    assert_eq!(_result.unwrap(), Value::Object(Map::new().insert(\"null_variant\".to_string(), Value::Array(vec![Value::Null]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"mixed_variant\");",
          "    let vec = vec![",
          "        Value::Null,",
          "        Value::Bool(false),",
          "        Value::Number(Number::from(42)),",
          "        Value::String(String::from(\"test\")),",
          "        Value::Array(vec![Value::Bool(true)]),",
          "        Value::Object(Map::new()),",
          "    ];",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Object(Map::new().insert(\"mixed_variant\".to_string(), Value::Array(vec![",
          "    Value::Null,",
          "    Value::Bool(false),",
          "    Value::Number(Number::from(42)),",
          "    Value::String(\"test\".to_string()),",
          "    Value::Array(vec![Value::Bool(true)]),",
          "    Value::Object(Map::new())",
          "    ])))));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"mixed_variant\");",
          "    let vec = vec![",
          "        Value::Null,",
          "        Value::Bool(false),",
          "        Value::Number(Number::from(42)),",
          "        Value::String(String::from(\"test\")),",
          "        Value::Array(vec![Value::Bool(true)]),",
          "        Value::Object(Map::new()),",
          "    ];",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "    assert_eq!(_result, Ok(Value::Object(Map::new().insert(\"mixed_variant\".to_string(), Value::Array(vec![",
          "    Value::Null,",
          "    Value::Bool(false),",
          "    Value::Number(Number::from(42)),",
          "    Value::String(\"test\".to_string()),",
          "    Value::Array(vec![Value::Bool(true)]),",
          "    Value::Object(Map::new())",
          "    ])))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"empty_variant\");",
          "    let vec: Vec<Value> = Vec::new();",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Object(Map::new())));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"empty_variant\");",
          "    let vec: Vec<Value> = Vec::new();",
          "    let variant = SerializeTupleVariant { name, vec };",
          "    let _result = variant.end();",
          "    assert_eq!(_result, Ok(Value::Object(Map::new())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]