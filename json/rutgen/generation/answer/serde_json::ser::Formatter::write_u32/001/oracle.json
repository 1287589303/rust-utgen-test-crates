[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let value: u32 = 0;",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.buffer, b\"0\");",
          "    let value: u32 = 123;",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"0123\");",
          "    let value: u32 = 4294967295; // maximum u32 value",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"01234294967295\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let value: u32 = 0;",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"0\");",
          "    let value: u32 = 123;",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"0123\");",
          "    let value: u32 = 4294967295; // maximum u32 value",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"01234294967295\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let value: u32 = 2147483648; // mid-range value",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.buffer, b\"2147483648\");",
          "    assert!(formatter.write_u32(&mut writer, 0).is_ok());",
          "    assert!(formatter.write_u32(&mut writer, 1).is_ok());",
          "    assert!(formatter.write_u32(&mut writer, u32::MAX).is_ok());",
          "    assert!(formatter.write_u32(&mut writer, 4294967295).is_ok());",
          "    assert!(writer.buffer.len() > 0);",
          "    assert!(writer.buffer.iter().all(|&b| b.is_ascii_digit()));"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let value: u32 = 2147483648; // mid-range value",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"2147483648\");",
          "    assert!(formatter.write_u32(&mut writer, 0).is_ok());",
          "    assert!(formatter.write_u32(&mut writer, 1).is_ok());",
          "    assert!(formatter.write_u32(&mut writer, u32::MAX).is_ok());",
          "    assert!(formatter.write_u32(&mut writer, 4294967295).is_ok());",
          "    assert!(writer.buffer.len() > 0);",
          "    assert!(writer.buffer.iter().all(|&b| b.is_ascii_digit()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let value: u32 = 4294967295; // max value",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.buffer, b\"4294967295\");",
          "    let value_zero: u32 = 0;",
          "    let _ = formatter.write_u32(&mut writer, value_zero);",
          "    assert_eq!(writer.buffer, b\"4294967295\\0\");",
          "    let value_mid: u32 = 123456;",
          "    let _ = formatter.write_u32(&mut writer, value_mid);",
          "    assert_eq!(writer.buffer, b\"4294967295\\0123456\");",
          "    let value_negative: u32 = 0xFFFFFFFF; // For testing wrap-around logic",
          "    let _ = formatter.write_u32(&mut writer, value_negative);",
          "    assert_eq!(writer.buffer, b\"4294967295\\0123456\\0\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let value: u32 = 4294967295; // max value",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = formatter.write_u32(&mut writer, value);",
          "    assert_eq!(writer.buffer, b\"4294967295\");",
          "    let value_zero: u32 = 0;",
          "    let _ = formatter.write_u32(&mut writer, value_zero);",
          "    assert_eq!(writer.buffer, b\"4294967295\\0\");",
          "    let value_mid: u32 = 123456;",
          "    let _ = formatter.write_u32(&mut writer, value_mid);",
          "    assert_eq!(writer.buffer, b\"4294967295\\0123456\");",
          "    let value_negative: u32 = 0xFFFFFFFF; // For testing wrap-around logic",
          "    let _ = formatter.write_u32(&mut writer, value_negative);",
          "    assert_eq!(writer.buffer, b\"4294967295\\0123456\\0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let values = [0, 1, 2, 4294967294, 4294967295];",
          "    let mut formatter = DummyFormatter;",
          "",
          "    for &value in &values {",
          "        let _ = formatter.write_u32(&mut writer, value);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.buffer, b\"01242949672944294967295\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 0).expect(\"Failed to write 0\");",
          "    assert_eq!(writer.buffer, b\"0\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 1).expect(\"Failed to write 1\");",
          "    assert_eq!(writer.buffer, b\"1\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 2).expect(\"Failed to write 2\");",
          "    assert_eq!(writer.buffer, b\"2\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 4294967294).expect(\"Failed to write 4294967294\");",
          "    assert_eq!(writer.buffer, b\"4294967294\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 4294967295).expect(\"Failed to write 4294967295\");",
          "    assert_eq!(writer.buffer, b\"4294967295\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for MockWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { buffer: Vec::new() };",
          "    let values = [0, 1, 2, 4294967294, 4294967295];",
          "    let mut formatter = DummyFormatter;",
          "",
          "    for &value in &values {",
          "        let _ = formatter.write_u32(&mut writer, value);",
          "    }",
          "    assert_eq!(writer.buffer, b\"01242949672944294967295\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 0).expect(\"Failed to write 0\");",
          "    assert_eq!(writer.buffer, b\"0\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 1).expect(\"Failed to write 1\");",
          "    assert_eq!(writer.buffer, b\"1\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 2).expect(\"Failed to write 2\");",
          "    assert_eq!(writer.buffer, b\"2\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 4294967294).expect(\"Failed to write 4294967294\");",
          "    assert_eq!(writer.buffer, b\"4294967294\");",
          "    writer.buffer.clear();",
          "    formatter.write_u32(&mut writer, 4294967295).expect(\"Failed to write 4294967295\");",
          "    assert_eq!(writer.buffer, b\"4294967295\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]