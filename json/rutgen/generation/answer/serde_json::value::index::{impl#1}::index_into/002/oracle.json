[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_owned(), Value::String(\"value\".to_owned()));",
          "    let value = Value::Object(map);",
          "",
          "    key.index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key.index_into(&value), Some(&Value::String(\"value\".to_owned())));",
          "    assert_eq!(key.index_into(&Value::Null), None);",
          "    assert_eq!(key.index_into(&Value::Bool(true)), None);",
          "    assert_eq!(key.index_into(&Value::Number(Number::from(12.5))), None);",
          "    assert_eq!(key.index_into(&Value::Array(vec![Value::String(\"item\".to_owned())])), None);"
        ],
        "code": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_owned(), Value::String(\"value\".to_owned()));",
          "    let value = Value::Object(map);",
          "",
          "    key.index_into(&value);",
          "    assert_eq!(key.index_into(&value), Some(&Value::String(\"value\".to_owned())));",
          "    assert_eq!(key.index_into(&Value::Null), None);",
          "    assert_eq!(key.index_into(&Value::Bool(true)), None);",
          "    assert_eq!(key.index_into(&Value::Number(Number::from(12.5))), None);",
          "    assert_eq!(key.index_into(&Value::Array(vec![Value::String(\"item\".to_owned())])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let mut map = Map::new();",
          "    map.insert(\"another_key\".to_owned(), Value::String(\"value\".to_owned()));",
          "    let value = Value::Object(map);",
          "",
          "    key.index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(key.index_into(&value).is_some());",
          "    assert_eq!(key.index_into(&value), None);",
          "    assert_eq!(key.index_into(&value).unwrap(), &Value::String(\"value\".to_owned()));"
        ],
        "code": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let mut map = Map::new();",
          "    map.insert(\"another_key\".to_owned(), Value::String(\"value\".to_owned()));",
          "    let value = Value::Object(map);",
          "",
          "    key.index_into(&value);",
          "    assert!(key.index_into(&value).is_some());",
          "    assert_eq!(key.index_into(&value), None);",
          "    assert_eq!(key.index_into(&value).unwrap(), &Value::String(\"value\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let value = Value::Object(Map::new());",
          "",
          "    key.index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key.index_into(&value), None);  // when map is empty",
          "    let mut map = Map::new();",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true)); // insert key-value pair",
          "    let value_with_entry = Value::Object(map);",
          "    assert_eq!(key.index_into(&value_with_entry), None); // key does not exist",
          "    let key = \"test_key\".to_string();  // create key for lookup",
          "    assert_eq!(key.index_into(&value_with_entry), Some(&Value::Bool(true)));  // key exists in the map"
        ],
        "code": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let value = Value::Object(Map::new());",
          "",
          "    key.index_into(&value);",
          "    assert_eq!(key.index_into(&value), None);  // when map is empty",
          "    let mut map = Map::new();",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true)); // insert key-value pair",
          "    let value_with_entry = Value::Object(map);",
          "    assert_eq!(key.index_into(&value_with_entry), None); // key does not exist",
          "    let key = \"test_key\".to_string();  // create key for lookup",
          "    assert_eq!(key.index_into(&value_with_entry), Some(&Value::Bool(true)));  // key exists in the map",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let value = Value::Array(vec![Value::String(\"element\".to_owned())]);",
          "",
          "    key.index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key.index_into(&Value::Object(Map::new())), None);",
          "    assert_eq!(key.index_into(&Value::Object(Map::from([(String::from(\"key\"), Value::String(\"value\".to_owned()))]))), Some(&Value::String(\"value\".to_owned())));"
        ],
        "code": [
          "{",
          "    struct Key;",
          "    impl Index for Key {}",
          "",
          "    let key = Key;",
          "    let value = Value::Array(vec![Value::String(\"element\".to_owned())]);",
          "",
          "    key.index_into(&value);",
          "    assert_eq!(key.index_into(&Value::Object(Map::new())), None);",
          "    assert_eq!(key.index_into(&Value::Object(Map::from([(String::from(\"key\"), Value::String(\"value\".to_owned()))]))), Some(&Value::String(\"value\".to_owned())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]