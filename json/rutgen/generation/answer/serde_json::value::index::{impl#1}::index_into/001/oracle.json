[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Null;",
          "",
          "    let result = (&key).index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Null;",
          "",
          "    let result = (&key).index_into(&value);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Bool(true);",
          "",
          "    let result = (&key).index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Bool(true);",
          "",
          "    let result = (&key).index_into(&value);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Number(Number::from(42));",
          "",
          "    let result = (&key).index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Number(Number::from(42));",
          "",
          "    let result = (&key).index_into(&value);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::String(String::from(\"test string\"));",
          "",
          "    let result = (&key).index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::String(String::from(\"test string\"));",
          "",
          "    let result = (&key).index_into(&value);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "",
          "    let result = (&key).index_into(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct Key;",
          "",
          "    let key = Key;",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "",
          "    let result = (&key).index_into(&value);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]