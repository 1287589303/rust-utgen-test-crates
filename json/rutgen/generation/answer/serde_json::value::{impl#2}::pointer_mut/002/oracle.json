[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    value.as_object_mut().unwrap().insert(\"foo\".to_string(), Value::Number(Number { n: 1 }));",
          "    value.pointer_mut(\"/foo\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.pointer_mut(\"/foo\").is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/foo\").unwrap(), &mut Value::Number(Number { n: 1 }));",
          "    assert_eq!(value.pointer_mut(\"/bar\").is_none(), true);",
          "    assert_eq!(value.pointer_mut(\"\").is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/\").is_none(), true);"
        ],
        "code": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    value.as_object_mut().unwrap().insert(\"foo\".to_string(), Value::Number(Number { n: 1 }));",
          "    value.pointer_mut(\"/foo\");",
          "    assert_eq!(value.pointer_mut(\"/foo\").is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/foo\").unwrap(), &mut Value::Number(Number { n: 1 }));",
          "    assert_eq!(value.pointer_mut(\"/bar\").is_none(), true);",
          "    assert_eq!(value.pointer_mut(\"\").is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/\").is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    value.as_object_mut().unwrap().insert(\"a\".to_string(), Value::Object(Map::new()));",
          "    if let Value::Object(ref mut obj) = value.pointer_mut(\"/a\").unwrap() {",
          "        obj.insert(\"b\".to_string(), Value::Number(Number { n: 2 }));",
          "    }",
          "    value.pointer_mut(\"/a/b\");",
          "}"
        ],
        "oracle": [
          "    assert!(value.pointer_mut(\"/a\").is_some());",
          "    assert!(value.pointer_mut(\"/a/b\").is_some());",
          "    assert_eq!(value.pointer(\"/a/b\"), Some(&Value::Number(Number { n: 2 })));",
          "    assert!(value.pointer_mut(\"/a/c\").is_none());",
          "    assert!(value.pointer_mut(\"\").is_some());",
          "    assert!(value.pointer_mut(\"invalid/pointer\").is_none());"
        ],
        "code": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    value.as_object_mut().unwrap().insert(\"a\".to_string(), Value::Object(Map::new()));",
          "    if let Value::Object(ref mut obj) = value.pointer_mut(\"/a\").unwrap() {",
          "        obj.insert(\"b\".to_string(), Value::Number(Number { n: 2 }));",
          "    }",
          "    value.pointer_mut(\"/a/b\");",
          "    assert!(value.pointer_mut(\"/a\").is_some());",
          "    assert!(value.pointer_mut(\"/a/b\").is_some());",
          "    assert_eq!(value.pointer(\"/a/b\"), Some(&Value::Number(Number { n: 2 })));",
          "    assert!(value.pointer_mut(\"/a/c\").is_none());",
          "    assert!(value.pointer_mut(\"\").is_some());",
          "    assert!(value.pointer_mut(\"invalid/pointer\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Array(Vec::new());",
          "    value.as_array_mut().unwrap().push(Value::Number(Number { n: 3 }));",
          "    value.pointer_mut(\"/0\");",
          "}"
        ],
        "oracle": [
          "    assert!(value.pointer_mut(\"/0\").is_some());",
          "    assert_eq!(value.pointer_mut(\"/0\").unwrap().as_number(), Some(&Number { n: 3 }));",
          "    assert!(value.pointer_mut(\"/1\").is_none());",
          "    assert!(value.pointer_mut(\"\").is_some());",
          "    assert!(value.pointer_mut(\"/nonexistent\").is_none());"
        ],
        "code": [
          "{",
          "    let mut value = Value::Array(Vec::new());",
          "    value.as_array_mut().unwrap().push(Value::Number(Number { n: 3 }));",
          "    value.pointer_mut(\"/0\");",
          "    assert!(value.pointer_mut(\"/0\").is_some());",
          "    assert_eq!(value.pointer_mut(\"/0\").unwrap().as_number(), Some(&Number { n: 3 }));",
          "    assert!(value.pointer_mut(\"/1\").is_none());",
          "    assert!(value.pointer_mut(\"\").is_some());",
          "    assert!(value.pointer_mut(\"/nonexistent\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    value.as_object_mut().unwrap().insert(\"foo/bar\".to_string(), Value::Number(Number { n: 4 }));",
          "    value.pointer_mut(\"/foo~1bar\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.pointer_mut(\"/foo~1bar\").map(|v| v.as_number().unwrap().n), Some(4));",
          "    assert_eq!(value.pointer_mut(\"/foo/bar\"), None);",
          "    assert_eq!(value.pointer_mut(\"/foo~0bar\").map(|v| v.as_number().unwrap().n), None);",
          "    assert_eq!(value.pointer_mut(\"/nonexistent\"), None);",
          "    assert_eq!(value.pointer_mut(\"/\").map(|v| v.is_object()), Some(true));"
        ],
        "code": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    value.as_object_mut().unwrap().insert(\"foo/bar\".to_string(), Value::Number(Number { n: 4 }));",
          "    value.pointer_mut(\"/foo~1bar\");",
          "    assert_eq!(value.pointer_mut(\"/foo~1bar\").map(|v| v.as_number().unwrap().n), Some(4));",
          "    assert_eq!(value.pointer_mut(\"/foo/bar\"), None);",
          "    assert_eq!(value.pointer_mut(\"/foo~0bar\").map(|v| v.as_number().unwrap().n), None);",
          "    assert_eq!(value.pointer_mut(\"/nonexistent\"), None);",
          "    assert_eq!(value.pointer_mut(\"/\").map(|v| v.is_object()), Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    {",
          "        let obj = value.as_object_mut().unwrap();",
          "        obj.insert(\"outer\".to_string(), Value::Object(Map::new()));",
          "        if let Value::Object(ref mut inner) = obj.get_mut(\"outer\").unwrap() {",
          "            inner.insert(\"inner\".to_string(), Value::Number(Number { n: 5 }));",
          "        }",
          "    }",
          "    value.pointer_mut(\"/outer/inner\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.pointer_mut(\"/outer/inner\").is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/outer/not_exist\"), None);",
          "    assert_eq!(value.pointer_mut(\"/\"), Some(&mut value));",
          "    assert_eq!(value.pointer_mut(\"/nonexistent\"), None);",
          "    assert_eq!(value.pointer_mut(\"/outer\").map(Value::as_object_mut).is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/outer/inner\").map(Value::as_number).unwrap().n, 5);",
          "    assert_eq!(value.pointer_mut(\"/outer/inner\").map(Value::take).is_some(), true);"
        ],
        "code": [
          "{",
          "    let mut value = Value::Object(Map::new());",
          "    {",
          "        let obj = value.as_object_mut().unwrap();",
          "        obj.insert(\"outer\".to_string(), Value::Object(Map::new()));",
          "        if let Value::Object(ref mut inner) = obj.get_mut(\"outer\").unwrap() {",
          "            inner.insert(\"inner\".to_string(), Value::Number(Number { n: 5 }));",
          "        }",
          "    }",
          "    value.pointer_mut(\"/outer/inner\");",
          "    assert_eq!(value.pointer_mut(\"/outer/inner\").is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/outer/not_exist\"), None);",
          "    assert_eq!(value.pointer_mut(\"/\"), Some(&mut value));",
          "    assert_eq!(value.pointer_mut(\"/nonexistent\"), None);",
          "    assert_eq!(value.pointer_mut(\"/outer\").map(Value::as_object_mut).is_some(), true);",
          "    assert_eq!(value.pointer_mut(\"/outer/inner\").map(Value::as_number).unwrap().n, 5);",
          "    assert_eq!(value.pointer_mut(\"/outer/inner\").map(Value::take).is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]