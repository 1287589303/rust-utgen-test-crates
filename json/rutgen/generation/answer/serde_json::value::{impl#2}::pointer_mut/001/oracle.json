[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = serde_json::Value::Null;",
          "",
          "    let result = value.pointer_mut(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&mut value));"
        ],
        "code": [
          "{",
          "    let mut value = serde_json::Value::Null;",
          "",
          "    let result = value.pointer_mut(\"\");",
          "    assert_eq!(result, Some(&mut value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = serde_json::Value::Object(serde_json::Map::new());",
          "",
          "    let result = value.pointer_mut(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&mut value));"
        ],
        "code": [
          "{",
          "    let mut value = serde_json::Value::Object(serde_json::Map::new());",
          "",
          "    let result = value.pointer_mut(\"\");",
          "    assert_eq!(result, Some(&mut value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = serde_json::Value::Array(vec![]);",
          "",
          "    let result = value.pointer_mut(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&mut value));"
        ],
        "code": [
          "{",
          "    let mut value = serde_json::Value::Array(vec![]);",
          "",
          "    let result = value.pointer_mut(\"\");",
          "    assert_eq!(result, Some(&mut value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]