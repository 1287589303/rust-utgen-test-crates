[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut failed = false;",
          "    let slice = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "",
          "    reader.set_failed(&mut failed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.slice, &[1, 2, 3]);",
          "    assert_eq!(reader.index, 0);",
          "    assert!(!failed);"
        ],
        "code": [
          "{",
          "    let mut failed = false;",
          "    let slice = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[1, 2, 3]);",
          "    assert_eq!(reader.index, 0);",
          "    assert!(!failed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut failed = false;",
          "    let slice = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: slice.len() };",
          "",
          "    reader.set_failed(&mut failed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.slice, &[1, 2, 3]);",
          "    assert_eq!(reader.index, slice.len());",
          "    assert!(failed == false);"
        ],
        "code": [
          "{",
          "    let mut failed = false;",
          "    let slice = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: slice.len() };",
          "",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[1, 2, 3]);",
          "    assert_eq!(reader.index, slice.len());",
          "    assert!(failed == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut failed = false;",
          "    let slice = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 2 };",
          "",
          "    reader.set_failed(&mut failed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.slice, &[1, 2]);",
          "    assert_eq!(failed, false);",
          "    reader.index = 0;",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[]);",
          "    assert_eq!(failed, false);",
          "    reader.index = 3;",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[1, 2, 3]);",
          "    assert_eq!(failed, false);"
        ],
        "code": [
          "{",
          "    let mut failed = false;",
          "    let slice = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 2 };",
          "",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[1, 2]);",
          "    assert_eq!(failed, false);",
          "    reader.index = 0;",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[]);",
          "    assert_eq!(failed, false);",
          "    reader.index = 3;",
          "    reader.set_failed(&mut failed);",
          "    assert_eq!(reader.slice, &[1, 2, 3]);",
          "    assert_eq!(failed, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]