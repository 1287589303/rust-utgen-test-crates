[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_serialize_u16_overflow() {",
      "    struct DummyWriter;",
      "    impl io::Write for DummyWriter {",
      "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
      "        fn flush(&mut self) -> Result<()> { Ok(()) }",
      "    }",
      "    let mut writer = DummyWriter;",
      "    let formatter = CompactFormatter; ",
      "    let serializer = Serializer { writer, formatter };",
      "    let _ = serializer.serialize_u16(65536);",
      "}",
      "",
      "#[should_panic]",
      "fn test_serialize_u16_negative() {",
      "    struct DummyWriter;",
      "    impl io::Write for DummyWriter {",
      "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
      "        fn flush(&mut self) -> Result<()> { Ok(()) }",
      "    }",
      "    let mut writer = DummyWriter;",
      "    let formatter = CompactFormatter; ",
      "    let serializer = Serializer { writer, formatter };",
      "    let _ = serializer.serialize_u16(u16::from(-1));",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(0);",
          "}"
        ],
        "oracle": [
          "    assert_panics!(serializer.serialize_u16(65536));",
          "    assert_panics!(serializer.serialize_u16(u16::from(-1)));",
          "    serialize_u16_result_eq!(serializer.serialize_u16(0), Ok(()));"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(0);",
          "    assert_panics!(serializer.serialize_u16(65536));",
          "    assert_panics!(serializer.serialize_u16(u16::from(-1)));",
          "    serialize_u16_result_eq!(serializer.serialize_u16(0), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(1);",
          "}"
        ],
        "oracle": [
          "    let _ = serializer.serialize_u16(65536); // should panic due to overflow",
          "    let _ = serializer.serialize_u16(u16::from(-1)); // should panic due to negative value",
          "    let _ = serializer.serialize_u16(1); // should succeed with valid input"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(1);",
          "    let _ = serializer.serialize_u16(65536); // should panic due to overflow",
          "    let _ = serializer.serialize_u16(u16::from(-1)); // should panic due to negative value",
          "    let _ = serializer.serialize_u16(1); // should succeed with valid input",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(32767);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(65536), Err(Error::io()));",
          "    assert_eq!(serializer.serialize_u16(u16::from(-1)), Err(Error::io()));",
          "    assert_eq!(serializer.serialize_u16(32767), Ok(()));"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(32767);",
          "    assert_eq!(serializer.serialize_u16(65536), Err(Error::io()));",
          "    assert_eq!(serializer.serialize_u16(u16::from(-1)), Err(Error::io()));",
          "    assert_eq!(serializer.serialize_u16(32767), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(65535);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(65536).is_err(), true);",
          "    assert_eq!(serializer.serialize_u16(u16::from(-1)).is_err(), true);",
          "    assert!(serializer.serialize_u16(65535).is_ok());"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "    let mut writer = DummyWriter;",
          "    let formatter = CompactFormatter; ",
          "    let serializer = Serializer { writer, formatter };",
          "    let _ = serializer.serialize_u16(65535);",
          "    assert_eq!(serializer.serialize_u16(65536).is_err(), true);",
          "    assert_eq!(serializer.serialize_u16(u16::from(-1)).is_err(), true);",
          "    assert!(serializer.serialize_u16(65535).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]