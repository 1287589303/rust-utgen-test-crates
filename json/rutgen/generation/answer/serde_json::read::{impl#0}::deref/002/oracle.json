[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 10;",
          "    let reference = Reference::Borrowed(&value);",
          "    let _result = reference.deref(); // Test for Reference::Borrowed",
          "}"
        ],
        "oracle": [
          "    let value: i32 = 10;",
          "    let reference = Reference::Borrowed(&value);",
          "    let result = reference.deref();",
          "    assert_eq!(result, &10);",
          "    assert!(matches!(reference, Reference::Borrowed(_)));",
          "    assert!(!matches!(reference, Reference::Copied(_)));"
        ],
        "code": [
          "{",
          "    let value: i32 = 10;",
          "    let reference = Reference::Borrowed(&value);",
          "    let _result = reference.deref(); // Test for Reference::Borrowed",
          "    let value: i32 = 10;",
          "    let reference = Reference::Borrowed(&value);",
          "    let result = reference.deref();",
          "    assert_eq!(result, &10);",
          "    assert!(matches!(reference, Reference::Borrowed(_)));",
          "    assert!(!matches!(reference, Reference::Copied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 10;",
          "    let reference = Reference::Copied(&value);",
          "    let _result = reference.deref(); // Test for Reference::Copied",
          "}"
        ],
        "oracle": [
          "    let value: i32 = 20;",
          "    let reference = Reference::Borrowed(&value);",
          "    let result = reference.deref();",
          "    assert_eq!(*result, 20);",
          "    let reference = Reference::Copied(&value);",
          "    let result = reference.deref();",
          "    assert_eq!(*result, 20);"
        ],
        "code": [
          "{",
          "    let value: i32 = 10;",
          "    let reference = Reference::Copied(&value);",
          "    let _result = reference.deref(); // Test for Reference::Copied",
          "    let value: i32 = 20;",
          "    let reference = Reference::Borrowed(&value);",
          "    let result = reference.deref();",
          "    assert_eq!(*result, 20);",
          "    let reference = Reference::Copied(&value);",
          "    let result = reference.deref();",
          "    assert_eq!(*result, 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]