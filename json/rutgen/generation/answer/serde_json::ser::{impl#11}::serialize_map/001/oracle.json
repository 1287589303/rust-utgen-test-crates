[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer {",
          "        ser: &mut Serializer {",
          "            writer: Vec::new(),",
          "            formatter: CompactFormatter,",
          "        },",
          "    };",
          "    let result = serializer.serialize_map(None);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(key_must_be_a_string())));"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer {",
          "        ser: &mut Serializer {",
          "            writer: Vec::new(),",
          "            formatter: CompactFormatter,",
          "        },",
          "    };",
          "    let result = serializer.serialize_map(None);",
          "    assert!(matches!(result, Err(key_must_be_a_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer {",
          "        ser: &mut Serializer {",
          "            writer: Vec::new(),",
          "            formatter: CompactFormatter,",
          "        },",
          "    };",
          "    let result = serializer.serialize_map(Some(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer {",
          "        ser: &mut Serializer {",
          "            writer: Vec::new(),",
          "            formatter: CompactFormatter,",
          "        },",
          "    };",
          "    let result = serializer.serialize_map(Some(0));",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer {",
          "        ser: &mut Serializer {",
          "            writer: Vec::new(),",
          "            formatter: CompactFormatter,",
          "        },",
          "    };",
          "    let result = serializer.serialize_map(Some(5));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer {",
          "        ser: &mut Serializer {",
          "            writer: Vec::new(),",
          "            formatter: CompactFormatter,",
          "        },",
          "    };",
          "    let result = serializer.serialize_map(Some(5));",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]