[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::new());",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    assert!(Value::String(String::from(\"test\")).is_string());",
          "    assert!(!Value::Bool(false).is_string());",
          "    assert!(!Value::Null.is_string());",
          "    assert!(!Value::Number(Number { n: 0 }).is_string());",
          "    assert!(!Value::Object(Map::new()).is_string());",
          "    assert!(!Value::Array(Vec::new()).is_string());"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::new());",
          "    let result = value.is_string();",
          "    assert!(result);",
          "    assert!(Value::String(String::from(\"test\")).is_string());",
          "    assert!(!Value::Bool(false).is_string());",
          "    assert!(!Value::Null.is_string());",
          "    assert!(!Value::Number(Number { n: 0 }).is_string());",
          "    assert!(!Value::Object(Map::new()).is_string());",
          "    assert!(!Value::Array(Vec::new()).is_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"Hello, World!\"));",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Number(Number { n: 0 });",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Array(vec![Value::String(String::from(\"Array Item\"))]);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"Hello, World!\"));",
          "    let result = value.is_string();",
          "    assert!(result);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Number(Number { n: 0 });",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Array(vec![Value::String(String::from(\"Array Item\"))]);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::String(String::from(\"some string\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    ",
          "    let value = Value::Number(Number { n: N });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"array element\"))]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::String(String::from(\"some string\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    ",
          "    let value = Value::Number(Number { n: N });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"array element\"))]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(false);",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(false);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: 42 });",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let value = Value::String(String::from(\"hello\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(Vec::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: 42 });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::String(String::from(\"hello\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(Vec::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: 3.14 });",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let value = Value::String(String::from(\"example\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(vec![Value::String(String::from(\"array item\"))]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: 3.14 });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::String(String::from(\"example\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(vec![Value::String(String::from(\"array item\"))]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::String(String::from(\"item1\")),",
          "        Value::Number(Number { n: 1 }),",
          "    ]);",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::String(String::from(\"item1\")),",
          "        Value::Number(Number { n: 1 }),",
          "    ]);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let value = Value::String(String::from(\"test string\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Number(Number { n: 42 });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(vec![]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::String(String::from(\"test string\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Number(Number { n: 42 });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(vec![]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map { map: MapImpl::new() };",
          "    map.map.insert(String::from(\"key\"), Value::String(String::from(\"value\")));",
          "    let value = Value::Object(map);",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let mut map = Map { map: MapImpl::new() };",
          "    map.map.insert(String::from(\"key\"), Value::String(String::from(\"value\")));",
          "    let value = Value::Object(map);",
          "    let result = value.is_string();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(value.is_null());",
          "    ",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_boolean());",
          "    ",
          "    let value = Value::Number(Number { n: 10 });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_number());",
          "    ",
          "    let value = Value::String(String::from(\"Hello, world!\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    assert_eq!(value.as_str(), Some(\"Hello, world!\"));",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"Hello\")), Value::Number(Number { n: 5 })]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_array());"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_null());",
          "    ",
          "    let value = Value::Bool(true);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_boolean());",
          "    ",
          "    let value = Value::Number(Number { n: 10 });",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_number());",
          "    ",
          "    let value = Value::String(String::from(\"Hello, world!\"));",
          "    let result = value.is_string();",
          "    assert_eq!(result, true);",
          "    assert_eq!(value.as_str(), Some(\"Hello, world!\"));",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"Hello\")), Value::Number(Number { n: 5 })]);",
          "    let result = value.is_string();",
          "    assert_eq!(result, false);",
          "    assert!(value.is_array());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"!@#$%^&*()_+\"));",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    assert!(value.as_str().is_some());",
          "    assert_eq!(value.as_str(), Some(\"!@#$%^&*()_+\"));",
          "    ",
          "    let value_non_string = Value::Number(Number { n: 0 });",
          "    let result_non_string = value_non_string.is_string();",
          "    assert!(!result_non_string);",
          "    assert!(value_non_string.as_str().is_none());"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"!@#$%^&*()_+\"));",
          "    let result = value.is_string();",
          "    assert!(result);",
          "    assert!(value.as_str().is_some());",
          "    assert_eq!(value.as_str(), Some(\"!@#$%^&*()_+\"));",
          "    ",
          "    let value_non_string = Value::Number(Number { n: 0 });",
          "    let result_non_string = value_non_string.is_string();",
          "    assert!(!result_non_string);",
          "    assert!(value_non_string.as_str().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let long_string = String::from(\"a\".repeat(1000)); // 1000 characters long",
          "    let value = Value::String(long_string);",
          "    let result = value.is_string();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    let empty_string = String::from(\"\");",
          "    let value = Value::String(empty_string);",
          "    let result = value.is_string();",
          "    assert!(result);",
          "    let non_string_value = Value::Bool(true);",
          "    let result = non_string_value.is_string();",
          "    assert!(!result);",
          "    let null_value = Value::Null;",
          "    let result = null_value.is_string();",
          "    assert!(!result);",
          "    let number_value = Value::Number(Number { n: 5 });",
          "    let result = number_value.is_string();",
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let long_string = String::from(\"a\".repeat(1000)); // 1000 characters long",
          "    let value = Value::String(long_string);",
          "    let result = value.is_string();",
          "    assert!(result);",
          "    let empty_string = String::from(\"\");",
          "    let value = Value::String(empty_string);",
          "    let result = value.is_string();",
          "    assert!(result);",
          "    let non_string_value = Value::Bool(true);",
          "    let result = non_string_value.is_string();",
          "    assert!(!result);",
          "    let null_value = Value::Null;",
          "    let result = null_value.is_string();",
          "    assert!(!result);",
          "    let number_value = Value::Number(Number { n: 5 });",
          "    let result = number_value.is_string();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map { map: MapImpl::new() };",
          "    map.map.insert(String::from(\"string\"), Value::String(String::from(\"text\")));",
          "    map.map.insert(String::from(\"number\"), Value::Number(Number { n: 1 }));",
          "    let value = Value::Object(map);",
          "    let result1 = value.is_string(); // Test if the object itself is string",
          "    let result2 = value.as_object().unwrap().get(&String::from(\"string\")).unwrap().is_string(); // Test a specific entry",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, false); // The object itself should not be a string",
          "    assert_eq!(result2, true);  // The specific entry \"string\" should be a string"
        ],
        "code": [
          "{",
          "    let mut map = Map { map: MapImpl::new() };",
          "    map.map.insert(String::from(\"string\"), Value::String(String::from(\"text\")));",
          "    map.map.insert(String::from(\"number\"), Value::Number(Number { n: 1 }));",
          "    let value = Value::Object(map);",
          "    let result1 = value.is_string(); // Test if the object itself is string",
          "    let result2 = value.as_object().unwrap().get(&String::from(\"string\")).unwrap().is_string(); // Test a specific entry",
          "    assert_eq!(result1, false); // The object itself should not be a string",
          "    assert_eq!(result2, true);  // The specific entry \"string\" should be a string",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::String(String::from(\"text\")),",
          "        Value::Number(Number { n: 2 }),",
          "        Value::Bool(false),",
          "    ]);",
          "    let result1 = value.is_string(); // Test if the array itself is string",
          "    let result2 = value.as_array().unwrap()[0].is_string(); // Test the first entry",
          "}"
        ],
        "oracle": [
          "    assert!(!result1); // The array is not a string",
          "    assert!(result2); // The first entry (string \"text\") is indeed a string"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::String(String::from(\"text\")),",
          "        Value::Number(Number { n: 2 }),",
          "        Value::Bool(false),",
          "    ]);",
          "    let result1 = value.is_string(); // Test if the array itself is string",
          "    let result2 = value.as_array().unwrap()[0].is_string(); // Test the first entry",
          "    assert!(!result1); // The array is not a string",
          "    assert!(result2); // The first entry (string \"text\") is indeed a string",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]