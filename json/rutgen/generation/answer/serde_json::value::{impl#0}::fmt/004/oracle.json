[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value = Value::Array(Vec::new());",
          "    value.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Array []\");",
          "    assert!(formatter.is_ready_for_output());",
          "    assert!(formatter.has_written());"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value = Value::Array(Vec::new());",
          "    value.fmt(formatter);",
          "    assert_eq!(formatter.to_string(), \"Array []\");",
          "    assert!(formatter.is_ready_for_output());",
          "    assert!(formatter.has_written());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    value.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"Array \") == core::result::Result::Ok(())",
          "    value matches Value::Array(vec![Value::Bool(true)])",
          "    formatter.write_str(\"Array \") has been called"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    value.fmt(formatter);",
          "    formatter.write_str(\"Array \") == core::result::Result::Ok(())",
          "    value matches Value::Array(vec![Value::Bool(true)])",
          "    formatter.write_str(\"Array \") has been called",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value = Value::Array(vec![",
          "        Value::Bool(true),",
          "        Value::Number(Number { n: 1 }),",
          "        Value::String(String::from(\"example\")),",
          "        Value::Null,",
          "    ]);",
          "    value.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"Array \") == core::result::Result::Ok(val)",
          "    value matches Value::Array(vec![Value::Bool(true), Value::Number(Number { n: 1 }), Value::String(String::from(\"example\")), Value::Null])",
          "    Debug::fmt(vec, formatter) == core::result::Result::Ok(val)"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value = Value::Array(vec![",
          "        Value::Bool(true),",
          "        Value::Number(Number { n: 1 }),",
          "        Value::String(String::from(\"example\")),",
          "        Value::Null,",
          "    ]);",
          "    value.fmt(formatter);",
          "    formatter.write_str(\"Array \") == core::result::Result::Ok(val)",
          "    value matches Value::Array(vec![Value::Bool(true), Value::Number(Number { n: 1 }), Value::String(String::from(\"example\")), Value::Null])",
          "    Debug::fmt(vec, formatter) == core::result::Result::Ok(val)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value_empty = Value::Array(Vec::new());",
          "    value_empty.fmt(formatter);",
          "    ",
          "    let value_max = Value::Array((0..1000).map(|_| Value::Number(Number { n: 0 })).collect());",
          "    value_max.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    formatter.write_str(\"Array \").unwrap();",
          "    formatter.write_str(\"Array \").unwrap();",
          "    assert_eq!(formatter.yellow_color.wrap(\"Array \"), Ok(()));",
          "    assert_eq!(formatter.red_color.wrap(\"Array \"), Err(Error::InvalidColor));",
          "    assert_eq!(formatter.write_str(\"Array \").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"Array \").err().is_none(), true);",
          "    assert_eq!(formatter.write_str(\"Array \").unwrap(), \"Array \");",
          "    assert_eq!(formatter.write_str(\"Array \").into_result().is_ok(), true);",
          "    assert!(formatter.write_str(\"Array \").is_ok());",
          "    assert!(formatter.write_str(\"Array \").is_err() == false);",
          "    assert!(matches!(value_empty, Value::Array(_)));",
          "    assert!(matches!(value_max, Value::Array(_)));",
          "    assert!(formatter.write_str(\"Array \").is_ok());",
          "    assert!(formatter.write_str(\"Array \").unwrap()).to_string() == \"Array \".to_string();",
          "    assert!(formatter.write_str(\"Array \").into_result().is_ok());"
        ],
        "code": [
          "{",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let value_empty = Value::Array(Vec::new());",
          "    value_empty.fmt(formatter);",
          "    ",
          "    let value_max = Value::Array((0..1000).map(|_| Value::Number(Number { n: 0 })).collect());",
          "    value_max.fmt(formatter);",
          "    formatter.write_str(\"Array \").unwrap();",
          "    formatter.write_str(\"Array \").unwrap();",
          "    assert_eq!(formatter.yellow_color.wrap(\"Array \"), Ok(()));",
          "    assert_eq!(formatter.red_color.wrap(\"Array \"), Err(Error::InvalidColor));",
          "    assert_eq!(formatter.write_str(\"Array \").is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"Array \").err().is_none(), true);",
          "    assert_eq!(formatter.write_str(\"Array \").unwrap(), \"Array \");",
          "    assert_eq!(formatter.write_str(\"Array \").into_result().is_ok(), true);",
          "    assert!(formatter.write_str(\"Array \").is_ok());",
          "    assert!(formatter.write_str(\"Array \").is_err() == false);",
          "    assert!(matches!(value_empty, Value::Array(_)));",
          "    assert!(matches!(value_max, Value::Array(_)));",
          "    assert!(formatter.write_str(\"Array \").is_ok());",
          "    assert!(formatter.write_str(\"Array \").unwrap()).to_string() == \"Array \".to_string();",
          "    assert!(formatter.write_str(\"Array \").into_result().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]