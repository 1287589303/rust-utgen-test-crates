[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: Default::default() });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Value::Object(Map { map: Default::default() }));",
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "    assert!(formatter.write_str(\"Array \").is_ok());",
          "    assert!(formatter.write_str(\"String({:?})\").is_ok());",
          "    assert!(formatter.write_str(\"Bool({})\").is_ok());",
          "    assert!(formatter.write_str(\"Null\").is_ok());",
          "    assert!(formatter.write_str(\"Number({})\").is_ok());",
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "    assert!(Debug::fmt(&value, &mut formatter).is_ok());",
          "    assert!(formatter.write_str(\"Object \").is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: Default::default() });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(value, Value::Object(Map { map: Default::default() }));",
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "    assert!(formatter.write_str(\"Array \").is_ok());",
          "    assert!(formatter.write_str(\"String({:?})\").is_ok());",
          "    assert!(formatter.write_str(\"Bool({})\").is_ok());",
          "    assert!(formatter.write_str(\"Null\").is_ok());",
          "    assert!(formatter.write_str(\"Number({})\").is_ok());",
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "    assert!(Debug::fmt(&value, &mut formatter).is_ok());",
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map { map: Default::default() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let value = Value::Object(map);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "    assert_eq!(formatter.buffer(), \"Object \");",
          "    assert!(formatter.write_str(\"Array \").is_err());",
          "    assert!(formatter.write_str(\"Null\").is_err());",
          "    assert!(formatter.write_str(\"Bool(true)\").is_err());",
          "    assert!(formatter.write_str(\"String(\\\"value1\\\")\").is_err());",
          "    assert!(formatter.write_str(\"Number(42)\").is_err());"
        ],
        "code": [
          "{",
          "    let mut map = Map { map: Default::default() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let value = Value::Object(map);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert!(formatter.write_str(\"Object \").is_ok());",
          "    assert_eq!(formatter.buffer(), \"Object \");",
          "    assert!(formatter.write_str(\"Array \").is_err());",
          "    assert!(formatter.write_str(\"Null\").is_err());",
          "    assert!(formatter.write_str(\"Bool(true)\").is_err());",
          "    assert!(formatter.write_str(\"String(\\\"value1\\\")\").is_err());",
          "    assert!(formatter.write_str(\"Number(42)\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map { map: Default::default() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    map.map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let value = Value::Object(map);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"Object \");",
          "    assert!(formatter.is_finished());",
          "    assert!(matches!(value, Value::Object(_)));",
          "    assert!(matches!(value, Value::Object(map) if map.map.len() == 2));",
          "    assert!(matches!(map.map.get(\"key1\"), Some(Value::String(ref s)) if s == \"value1\"));",
          "    assert!(matches!(map.map.get(\"key2\"), Some(Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let mut map = Map { map: Default::default() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    map.map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let value = Value::Object(map);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"Object \");",
          "    assert!(formatter.is_finished());",
          "    assert!(matches!(value, Value::Object(_)));",
          "    assert!(matches!(value, Value::Object(map) if map.map.len() == 2));",
          "    assert!(matches!(map.map.get(\"key1\"), Some(Value::String(ref s)) if s == \"value1\"));",
          "    assert!(matches!(map.map.get(\"key2\"), Some(Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner_map = Map {",
          "        map: vec![(\"inner_key\".to_string(), Value::Number(Number { n: 42 }))].into_iter().collect(),",
          "    };",
          "    let mut outer_map = Map { map: Default::default() };",
          "    outer_map.map.insert(\"outer_key\".to_string(), Value::Object(inner_map));",
          "    let value = Value::Object(outer_map);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write_str(\"Object \"), Ok(()));",
          "    assert!(formatter.buffer().contains(\"outer_key\"));",
          "    assert!(formatter.buffer().contains(\"inner_key\"));",
          "    assert!(formatter.buffer().contains(\"Number(42)\"));",
          "    assert!(formatter.buffer().chars().count() > 0);",
          "    assert!(formatter.buffer().contains(\"Object \"));"
        ],
        "code": [
          "{",
          "    let inner_map = Map {",
          "        map: vec![(\"inner_key\".to_string(), Value::Number(Number { n: 42 }))].into_iter().collect(),",
          "    };",
          "    let mut outer_map = Map { map: Default::default() };",
          "    outer_map.map.insert(\"outer_key\".to_string(), Value::Object(inner_map));",
          "    let value = Value::Object(outer_map);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = value.fmt(&mut formatter);",
          "    assert_eq!(formatter.write_str(\"Object \"), Ok(()));",
          "    assert!(formatter.buffer().contains(\"outer_key\"));",
          "    assert!(formatter.buffer().contains(\"inner_key\"));",
          "    assert!(formatter.buffer().contains(\"Number(42)\"));",
          "    assert!(formatter.buffer().chars().count() > 0);",
          "    assert!(formatter.buffer().contains(\"Object \"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]