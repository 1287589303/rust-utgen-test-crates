[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"Null\");",
          "    assert!(formatter.is_empty());"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"Null\");",
          "    assert!(formatter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write_str(\"Null\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"Bool(true)\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"String(\\\"a string\\\")\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"Array \"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"Object \"), Ok(()));",
          "    assert!(matches!(value, Value::Null));",
          "    assert!(matches!(value, Value::Bool(_)));",
          "    assert!(matches!(value, Value::String(_)));",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert!(matches!(value, Value::Object(_)));"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.write_str(\"Null\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"Bool(true)\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"String(\\\"a string\\\")\"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"Array \"), Ok(()));",
          "    assert_eq!(formatter.write_str(\"Object \"), Ok(()));",
          "    assert!(matches!(value, Value::Null));",
          "    assert!(matches!(value, Value::Bool(_)));",
          "    assert!(matches!(value, Value::String(_)));",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert!(matches!(value, Value::Object(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: 12 };",
          "    let value = Value::Number(number);",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Number(12)\");",
          "    value = Value::Null;",
          "    assert_eq!(formatter.to_string(), \"Null\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: 12 };",
          "    let value = Value::Number(number);",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Number(12)\");",
          "    value = Value::Null;",
          "    assert_eq!(formatter.to_string(), \"Null\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"a string\"));",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"String(\\\"a string\\\")\");",
          "    let value_null = Value::Null;",
          "    let mut formatter_null = fmt::Formatter::new();",
          "    assert!(value_null.fmt(&mut formatter_null).is_ok());",
          "    assert_eq!(formatter_null.to_string(), \"Null\");",
          "    let value_bool = Value::Bool(true);",
          "    let mut formatter_bool = fmt::Formatter::new();",
          "    assert!(value_bool.fmt(&mut formatter_bool).is_ok());",
          "    assert_eq!(formatter_bool.to_string(), \"Bool(true)\");",
          "    let value_number = Value::Number(Number { n: 12.5 });",
          "    let mut formatter_number = fmt::Formatter::new();",
          "    assert!(value_number.fmt(&mut formatter_number).is_ok());",
          "    assert_eq!(formatter_number.to_string(), \"Number(12.5)\");",
          "    let value_array = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
          "    let mut formatter_array = fmt::Formatter::new();",
          "    assert!(value_array.fmt(&mut formatter_array).is_ok());",
          "    assert_eq!(formatter_array.to_string(), \"Array [String(\\\"element1\\\"), String(\\\"element2\\\")]\");",
          "    let value_object = Value::Object(Map::from_iter(vec![(String::from(\"key1\"), Value::String(String::from(\"value1\")))]));",
          "    let mut formatter_object = fmt::Formatter::new();",
          "    assert!(value_object.fmt(&mut formatter_object).is_ok());",
          "    assert_eq!(formatter_object.to_string(), \"Object {\\\"key1\\\": String(\\\"value1\\\")}\");"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"a string\"));",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"String(\\\"a string\\\")\");",
          "    let value_null = Value::Null;",
          "    let mut formatter_null = fmt::Formatter::new();",
          "    assert!(value_null.fmt(&mut formatter_null).is_ok());",
          "    assert_eq!(formatter_null.to_string(), \"Null\");",
          "    let value_bool = Value::Bool(true);",
          "    let mut formatter_bool = fmt::Formatter::new();",
          "    assert!(value_bool.fmt(&mut formatter_bool).is_ok());",
          "    assert_eq!(formatter_bool.to_string(), \"Bool(true)\");",
          "    let value_number = Value::Number(Number { n: 12.5 });",
          "    let mut formatter_number = fmt::Formatter::new();",
          "    assert!(value_number.fmt(&mut formatter_number).is_ok());",
          "    assert_eq!(formatter_number.to_string(), \"Number(12.5)\");",
          "    let value_array = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
          "    let mut formatter_array = fmt::Formatter::new();",
          "    assert!(value_array.fmt(&mut formatter_array).is_ok());",
          "    assert_eq!(formatter_array.to_string(), \"Array [String(\\\"element1\\\"), String(\\\"element2\\\")]\");",
          "    let value_object = Value::Object(Map::from_iter(vec![(String::from(\"key1\"), Value::String(String::from(\"value1\")))]));",
          "    let mut formatter_object = fmt::Formatter::new();",
          "    assert!(value_object.fmt(&mut formatter_object).is_ok());",
          "    assert_eq!(formatter_object.to_string(), \"Object {\\\"key1\\\": String(\\\"value1\\\")}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Array []\");"
        ],
        "code": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Array []\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.as_str(), \"Object \");",
          "    assert!(formatter.is_ok());",
          "    formatter.reset();",
          "    let value_null = Value::Null;",
          "    value_null.fmt(&mut formatter);",
          "    assert_eq!(formatter.as_str(), \"Null\");",
          "    assert!(formatter.is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let mut formatter = fmt::Formatter::new();",
          "    value.fmt(&mut formatter);",
          "    assert_eq!(formatter.as_str(), \"Object \");",
          "    assert!(formatter.is_ok());",
          "    formatter.reset();",
          "    let value_null = Value::Null;",
          "    value_null.fmt(&mut formatter);",
          "    assert_eq!(formatter.as_str(), \"Null\");",
          "    assert!(formatter.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]