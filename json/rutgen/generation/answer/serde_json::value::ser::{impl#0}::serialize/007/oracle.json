[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 42 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value, Value::Number(Number { n: 42 }));",
          "    assert!(serializer.has_serialized_value());",
          "    assert_eq!(serializer.get_last_serialized_value(), 42);",
          "    assert!(number_value.serialize(serializer).is_ok());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 42 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    assert_eq!(number_value, Value::Number(Number { n: 42 }));",
          "    assert!(serializer.has_serialized_value());",
          "    assert_eq!(serializer.get_last_serialized_value(), 42);",
          "    assert!(number_value.serialize(serializer).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: -42 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.serialize(serializer), Ok(()));",
          "    assert!(number_value.serialize(serializer).is_ok());",
          "    assert!(matches!(number_value.serialize(serializer), Ok(_)));",
          "    assert!(number_value.serialize(serializer).unwrap().is_success());",
          "    assert_eq!(number_value.serialize(serializer).unwrap().outcome, expected_outcome);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: -42 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    assert_eq!(number_value.serialize(serializer), Ok(()));",
          "    assert!(number_value.serialize(serializer).is_ok());",
          "    assert!(matches!(number_value.serialize(serializer), Ok(_)));",
          "    assert!(number_value.serialize(serializer).unwrap().is_success());",
          "    assert_eq!(number_value.serialize(serializer).unwrap().outcome, expected_outcome);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 0 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.serialize(serializer).unwrap(), expected_value);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 0 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 3.14 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    let number_value = Value::Number(Number { n: 3.14 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    assert!(number_value.serialize(serializer).is_ok());",
          "    let result = number_value.serialize(serializer).unwrap();",
          "    assert_eq!(result, expected_serialization_output);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 3.14 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    let number_value = Value::Number(Number { n: 3.14 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    assert!(number_value.serialize(serializer).is_ok());",
          "    let result = number_value.serialize(serializer).unwrap();",
          "    assert_eq!(result, expected_serialization_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 1e30 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.serialize(serializer).unwrap(), expected_serialized_output);",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert!(serializer.serialize_number(1e30).is_ok());",
          "    assert!(serializer.is_valid());",
          "    assert!(number_value.len() > 0);",
          "    assert!(number_value.is_empty() == false);",
          "    assert!(number_value.contains_key(&\"n\".to_string()));",
          "    assert_eq!(number_value.get_key_value(&\"n\".to_string()), Some((&\"n\".to_string(), &Value::Number(Number { n: 1e30 })));",
          "    assert!(serializer.serialize(&Value::Number(Number { n: 1e30 })).is_ok());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 1e30 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), expected_serialized_output);",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert!(serializer.serialize_number(1e30).is_ok());",
          "    assert!(serializer.is_valid());",
          "    assert!(number_value.len() > 0);",
          "    assert!(number_value.is_empty() == false);",
          "    assert!(number_value.contains_key(&\"n\".to_string()));",
          "    assert_eq!(number_value.get_key_value(&\"n\".to_string()), Some((&\"n\".to_string(), &Value::Number(Number { n: 1e30 })));",
          "    assert!(serializer.serialize(&Value::Number(Number { n: 1e30 })).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: -1.5 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value, Value::Number(Number { n: -1.5 }));",
          "    assert!(number_value.serialize(serializer).is_ok());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: -1.5 });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    assert_eq!(number_value, Value::Number(Number { n: -1.5 }));",
          "    assert!(number_value.serialize(serializer).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    let number_value_nan = Value::Number(Number { n: f64::NAN });",
          "    let serializer_nan = // Initialize an appropriate serializer here",
          "    assert!(number_value_nan.serialize(serializer_nan).is_err());",
          "    ",
          "    let number_value_infinity = Value::Number(Number { n: f64::INFINITY });",
          "    let serializer_infinity = // Initialize an appropriate serializer here",
          "    assert!(number_value_infinity.serialize(serializer_infinity).is_err());",
          "    ",
          "    let number_value_negative_infinity = Value::Number(Number { n: f64::NEG_INFINITY });",
          "    let serializer_negative_infinity = // Initialize an appropriate serializer here",
          "    assert!(number_value_negative_infinity.serialize(serializer_negative_infinity).is_err());",
          "    ",
          "    let number_value_positive = Value::Number(Number { n: 12.5 });",
          "    let serializer_positive = // Initialize an appropriate serializer here",
          "    assert!(number_value_positive.serialize(serializer_positive).is_ok());",
          "    ",
          "    let number_value_integer = Value::Number(Number { n: 10.0 });",
          "    let serializer_integer = // Initialize an appropriate serializer here",
          "    assert!(number_value_integer.serialize(serializer_integer).is_ok());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    let number_value_nan = Value::Number(Number { n: f64::NAN });",
          "    let serializer_nan = // Initialize an appropriate serializer here",
          "    assert!(number_value_nan.serialize(serializer_nan).is_err());",
          "    ",
          "    let number_value_infinity = Value::Number(Number { n: f64::INFINITY });",
          "    let serializer_infinity = // Initialize an appropriate serializer here",
          "    assert!(number_value_infinity.serialize(serializer_infinity).is_err());",
          "    ",
          "    let number_value_negative_infinity = Value::Number(Number { n: f64::NEG_INFINITY });",
          "    let serializer_negative_infinity = // Initialize an appropriate serializer here",
          "    assert!(number_value_negative_infinity.serialize(serializer_negative_infinity).is_err());",
          "    ",
          "    let number_value_positive = Value::Number(Number { n: 12.5 });",
          "    let serializer_positive = // Initialize an appropriate serializer here",
          "    assert!(number_value_positive.serialize(serializer_positive).is_ok());",
          "    ",
          "    let number_value_integer = Value::Number(Number { n: 10.0 });",
          "    let serializer_integer = // Initialize an appropriate serializer here",
          "    assert!(number_value_integer.serialize(serializer_integer).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for infinity serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for NaN serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: -0.0 });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for negative zero serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: 0.0 });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for zero serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: 42.0 });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for the number 42 serialization */);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for infinity serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for NaN serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: -0.0 });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for negative zero serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: 0.0 });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for zero serialization */);",
          "    ",
          "    let number_value = Value::Number(Number { n: 42.0 });",
          "    assert_eq!(number_value.serialize(serializer).unwrap(), /* expected result for the number 42 serialization */);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NEG_INFINITY });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value, Value::Number(Number { n: f64::NEG_INFINITY }));",
          "    assert!(serializer.serialize_bool(false).is_ok());",
          "    assert!(serializer.serialize_str(\"test\").is_ok());",
          "    assert!(serializer.serialize_unit().is_ok());",
          "    assert!(serializer.serialize_map(Some(1)).is_ok());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NEG_INFINITY });",
          "    let serializer = // Initialize an appropriate serializer here",
          "    number_value.serialize(serializer).unwrap();",
          "    assert_eq!(number_value, Value::Number(Number { n: f64::NEG_INFINITY }));",
          "    assert!(serializer.serialize_bool(false).is_ok());",
          "    assert!(serializer.serialize_str(\"test\").is_ok());",
          "    assert!(serializer.serialize_unit().is_ok());",
          "    assert!(serializer.serialize_map(Some(1)).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]