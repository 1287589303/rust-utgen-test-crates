[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![]);",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Value::Array(vec![]));",
          "    assert!(serializer.is_empty());",
          "    assert!(serializer.serialize_map_called);",
          "    assert_eq!(serializer.map_len(), 0);",
          "    assert!(!value.is_empty());",
          "    assert!(value.iter().next().is_none());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![]);",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "    assert_eq!(value, Value::Array(vec![]));",
          "    assert!(serializer.is_empty());",
          "    assert!(serializer.serialize_map_called);",
          "    assert_eq!(serializer.map_len(), 0);",
          "    assert!(!value.is_empty());",
          "    assert!(value.iter().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.serialize(serializer).is_ok(), true);",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert_eq!(value.len(), 1);",
          "    assert!(matches!(value[0], Value::Bool(true)));",
          "    assert!(serializer.into_inner().len() > 0);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "    assert_eq!(value.serialize(serializer).is_ok(), true);",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert_eq!(value.len(), 1);",
          "    assert!(matches!(value[0], Value::Bool(true)));",
          "    assert!(serializer.into_inner().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Null,",
          "        Value::Bool(false),",
          "        Value::Number(Number { n: 5 }),",
          "        Value::String(\"test\".to_string()),",
          "        Value::Array(vec![Value::Bool(true), Value::Null]),",
          "    ]);",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Value::Array(vec![",
          "    Value::Null,",
          "    Value::Bool(false),",
          "    Value::Number(Number { n: 5 }),",
          "    Value::String(\"test\".to_string()),",
          "    Value::Array(vec![Value::Bool(true), Value::Null]),",
          "    ]));",
          "    ",
          "    assert!(value.is_array());",
          "    ",
          "    assert_eq!(value.len(), 5);",
          "    ",
          "    for v in value.iter() {",
          "    match v {",
          "    Value::Null => assert!(true),",
          "    Value::Bool(_) => assert!(true),",
          "    Value::Number(_) => assert!(true),",
          "    Value::String(_) => assert!(true),",
          "    Value::Array(_) => assert!(true),",
          "    _ => panic!(\"Unexpected value type\"),",
          "    }",
          "    }",
          "    ",
          "    assert!(matches!(value, Value::Array(_)));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Null,",
          "        Value::Bool(false),",
          "        Value::Number(Number { n: 5 }),",
          "        Value::String(\"test\".to_string()),",
          "        Value::Array(vec![Value::Bool(true), Value::Null]),",
          "    ]);",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "    assert_eq!(value, Value::Array(vec![",
          "    Value::Null,",
          "    Value::Bool(false),",
          "    Value::Number(Number { n: 5 }),",
          "    Value::String(\"test\".to_string()),",
          "    Value::Array(vec![Value::Bool(true), Value::Null]),",
          "    ]));",
          "    ",
          "    assert!(value.is_array());",
          "    ",
          "    assert_eq!(value.len(), 5);",
          "    ",
          "    for v in value.iter() {",
          "    match v {",
          "    Value::Null => assert!(true),",
          "    Value::Bool(_) => assert!(true),",
          "    Value::Number(_) => assert!(true),",
          "    Value::String(_) => assert!(true),",
          "    Value::Array(_) => assert!(true),",
          "    _ => panic!(\"Unexpected value type\"),",
          "    }",
          "    }",
          "    ",
          "    assert!(matches!(value, Value::Array(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array((0..1000).map(|n| Value::Number(Number { n })).collect());",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Value::Array((0..1000).map(|n| Value::Number(Number { n })).collect()));",
          "    assert!(serializer.is_empty());",
          "    assert!(serializer.serialize_map(Some(1000)).is_ok());",
          "    assert!(serializer.serialize_entry(\"0\", &Value::Number(Number { n: 0 })).is_ok());",
          "    assert!(serializer.serialize_entry(\"999\", &Value::Number(Number { n: 999 })).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Array((0..1000).map(|n| Value::Number(Number { n })).collect());",
          "    let serializer = serde_json::Serializer::new(vec![]);",
          "    let _ = value.serialize(serializer);",
          "    assert_eq!(value, Value::Array((0..1000).map(|n| Value::Number(Number { n })).collect()));",
          "    assert!(serializer.is_empty());",
          "    assert!(serializer.serialize_map(Some(1000)).is_ok());",
          "    assert!(serializer.serialize_entry(\"0\", &Value::Number(Number { n: 0 })).is_ok());",
          "    assert!(serializer.serialize_entry(\"999\", &Value::Number(Number { n: 999 })).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]