[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"key1\", Value::Bool(true)),",
          "        (\"key2\", Value::Number(Number { n: 42 })),",
          "        (\"key3\", Value::String(\"value\".to_string())),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_x, Value::Object(map!{",
          "    String::from(\"key1\") => Value::Bool(true),",
          "    String::from(\"key2\") => Value::Number(Number { n: 42 }),",
          "    String::from(\"key3\") => Value::String(\"value\".to_string())",
          "    }));"
        ],
        "code": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"key1\", Value::Bool(true)),",
          "        (\"key2\", Value::Number(Number { n: 42 })),",
          "        (\"key3\", Value::String(\"value\".to_string())),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "    assert_eq!(_x, Value::Object(map!{",
          "    String::from(\"key1\") => Value::Bool(true),",
          "    String::from(\"key2\") => Value::Number(Number { n: 42 }),",
          "    String::from(\"key3\") => Value::String(\"value\".to_string())",
          "    }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"\", Value::Bool(false)),",
          "        (\"key2\", Value::Number(Number { n: 0 })),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    let v: Vec<(&str, Value)> = vec![(\"\", Value::Bool(false)), (\"key2\", Value::Number(Number { n: 0 }))];",
          "    let expected = Value::Object(Map::from_iter(vec![(\"\", Value::Bool(false)), (\"key2\", Value::Number(Number { n: 0 }))]));",
          "    assert_eq!(_x, expected);",
          "    assert!(matches!(_x, Value::Object(_)));",
          "    assert_eq!(_x, Value::Object(Map::from_iter(vec![(\"\", Value::Bool(false)), (\"key2\", Value::Number(Number { n: 0 }))])));",
          "    assert!(!matches!(_x, Value::Null));",
          "    assert!(!matches!(_x, Value::Array(_)));",
          "    assert!(matches!(_x, Value::Object(_)) && if let Value::Object(map) = _x { !map.is_empty() } else { false });"
        ],
        "code": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"\", Value::Bool(false)),",
          "        (\"key2\", Value::Number(Number { n: 0 })),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "    let v: Vec<(&str, Value)> = vec![(\"\", Value::Bool(false)), (\"key2\", Value::Number(Number { n: 0 }))];",
          "    let expected = Value::Object(Map::from_iter(vec![(\"\", Value::Bool(false)), (\"key2\", Value::Number(Number { n: 0 }))]));",
          "    assert_eq!(_x, expected);",
          "    assert!(matches!(_x, Value::Object(_)));",
          "    assert_eq!(_x, Value::Object(Map::from_iter(vec![(\"\", Value::Bool(false)), (\"key2\", Value::Number(Number { n: 0 }))])));",
          "    assert!(!matches!(_x, Value::Null));",
          "    assert!(!matches!(_x, Value::Array(_)));",
          "    assert!(matches!(_x, Value::Object(_)) && if let Value::Object(map) = _x { !map.is_empty() } else { false });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"max\", Value::Number(Number { n: std::i64::MAX })),",
          "        (\"min\", Value::Number(Number { n: std::i64::MIN })),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_x, Value::Object(vec![",
          "    (\"max\".to_string(), Value::Number(Number { n: std::i64::MAX })),",
          "    (\"min\".to_string(), Value::Number(Number { n: std::i64::MIN })),",
          "    ].into_iter().collect()));"
        ],
        "code": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"max\", Value::Number(Number { n: std::i64::MAX })),",
          "        (\"min\", Value::Number(Number { n: std::i64::MIN })),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "    assert_eq!(_x, Value::Object(vec![",
          "    (\"max\".to_string(), Value::Number(Number { n: std::i64::MAX })),",
          "    (\"min\".to_string(), Value::Number(Number { n: std::i64::MIN })),",
          "    ].into_iter().collect()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"bool\", Value::Bool(true)),",
          "        (\"number\", Value::Number(Number { n: 3.14 })),",
          "        (\"string\", Value::String(\"text\".to_owned())),",
          "        (\"array\", Value::Array(vec![Value::Bool(false), Value::Number(Number { n: 5 })])),",
          "        (\"object\", Value::Object(Map::new())),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_x, Value::Object(Map::new()));",
          "    assert_eq!(_x, Value::Object(",
          "    vec![",
          "    (\"bool\".to_owned(), Value::Bool(true)),",
          "    (\"number\".to_owned(), Value::Number(Number { n: 3.14 })),",
          "    (\"string\".to_owned(), Value::String(\"text\".to_owned())),",
          "    (\"array\".to_owned(), Value::Array(vec![Value::Bool(false), Value::Number(Number { n: 5 })])),",
          "    (\"object\".to_owned(), Value::Object(Map::new()))",
          "    ].into_iter().collect()",
          "    ));"
        ],
        "code": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![",
          "        (\"bool\", Value::Bool(true)),",
          "        (\"number\", Value::Number(Number { n: 3.14 })),",
          "        (\"string\", Value::String(\"text\".to_owned())),",
          "        (\"array\", Value::Array(vec![Value::Bool(false), Value::Number(Number { n: 5 })])),",
          "        (\"object\", Value::Object(Map::new())),",
          "    ];",
          "    let _x: Value = v.into_iter().collect();",
          "    assert_eq!(_x, Value::Object(Map::new()));",
          "    assert_eq!(_x, Value::Object(",
          "    vec![",
          "    (\"bool\".to_owned(), Value::Bool(true)),",
          "    (\"number\".to_owned(), Value::Number(Number { n: 3.14 })),",
          "    (\"string\".to_owned(), Value::String(\"text\".to_owned())),",
          "    (\"array\".to_owned(), Value::Array(vec![Value::Bool(false), Value::Number(Number { n: 5 })])),",
          "    (\"object\".to_owned(), Value::Object(Map::new()))",
          "    ].into_iter().collect()",
          "    ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![];",
          "    let _x: Value = v.into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_.is_object(), true);",
          "    assert_eq!(_.as_object().unwrap().len(), 0);",
          "    ",
          "    let v: Vec<(&str, Value)> = vec![(\"key1\", Value::Number(Number { n: 1 })), (\"key2\", Value::String(\"value\".to_string()))];",
          "    let _x: Value = v.into_iter().collect();",
          "    assert_eq!(_x.as_object().unwrap().len(), 2);",
          "    assert_eq!(_x.as_object().unwrap().get(\"key1\"), Some(&Value::Number(Number { n: 1 })));",
          "    assert_eq!(_x.as_object().unwrap().get(\"key2\"), Some(&Value::String(\"value\".to_string())));"
        ],
        "code": [
          "{",
          "    let v: Vec<(&str, Value)> = vec![];",
          "    let _x: Value = v.into_iter().collect();",
          "    assert_eq!(_.is_object(), true);",
          "    assert_eq!(_.as_object().unwrap().len(), 0);",
          "    ",
          "    let v: Vec<(&str, Value)> = vec![(\"key1\", Value::Number(Number { n: 1 })), (\"key2\", Value::String(\"value\".to_string()))];",
          "    let _x: Value = v.into_iter().collect();",
          "    assert_eq!(_x.as_object().unwrap().len(), 2);",
          "    assert_eq!(_x.as_object().unwrap().get(\"key1\"), Some(&Value::Number(Number { n: 1 })));",
          "    assert_eq!(_x.as_object().unwrap().get(\"key2\"), Some(&Value::String(\"value\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]