[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "    }",
          "",
          "    let io_error = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(io::ErrorKind::Other, \"IO Error\")),",
          "    };",
          "",
          "    let error = Error {",
          "        err: Box::new(io_error),",
          "    };",
          "",
          "    let _result: io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    let io_error = ErrorImpl { code: ErrorCode::Io(io::Error::new(io::ErrorKind::Other, \"IO Error\")) };",
          "    let error = Error { err: Box::new(io_error) };",
          "    assert_eq!(error.classify(), Category::Io);",
          "    let _result: io::Error = error.into();",
          "    assert_eq!(_result.kind(), io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().unwrap().to_string(), \"IO Error\");",
          "    assert!(error.is_io());",
          "    assert!(!error.is_syntax());",
          "    assert!(!error.is_data());",
          "    assert!(!error.is_eof());"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "    }",
          "",
          "    let io_error = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(io::ErrorKind::Other, \"IO Error\")),",
          "    };",
          "",
          "    let error = Error {",
          "        err: Box::new(io_error),",
          "    };",
          "",
          "    let _result: io::Error = error.into();",
          "    let io_error = ErrorImpl { code: ErrorCode::Io(io::Error::new(io::ErrorKind::Other, \"IO Error\")) };",
          "    let error = Error { err: Box::new(io_error) };",
          "    assert_eq!(error.classify(), Category::Io);",
          "    let _result: io::Error = error.into();",
          "    assert_eq!(_result.kind(), io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().unwrap().to_string(), \"IO Error\");",
          "    assert!(error.is_io());",
          "    assert!(!error.is_syntax());",
          "    assert!(!error.is_data());",
          "    assert!(!error.is_eof());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "    }",
          "",
          "    let eof_error = ErrorImpl {",
          "        code: ErrorCode::EofWhileParsingValue,",
          "    };",
          "",
          "    let error = Error {",
          "        err: Box::new(eof_error),",
          "    };",
          "",
          "    let _result: io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    let error_code = ErrorCode::EofWhileParsingValue;",
          "    let expected_io_error_kind = ErrorKind::UnexpectedEof;",
          "    let error_classification = Category::Eof;",
          "    let result_io_error = error.into();",
          "    assert_eq!(result_io_error.kind(), expected_io_error_kind);",
          "    assert!(result_io_error.description().contains(\"Unexpected EOF\"));"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "    }",
          "",
          "    let eof_error = ErrorImpl {",
          "        code: ErrorCode::EofWhileParsingValue,",
          "    };",
          "",
          "    let error = Error {",
          "        err: Box::new(eof_error),",
          "    };",
          "",
          "    let _result: io::Error = error.into();",
          "    let error_code = ErrorCode::EofWhileParsingValue;",
          "    let expected_io_error_kind = ErrorKind::UnexpectedEof;",
          "    let error_classification = Category::Eof;",
          "    let result_io_error = error.into();",
          "    assert_eq!(result_io_error.kind(), expected_io_error_kind);",
          "    assert!(result_io_error.description().contains(\"Unexpected EOF\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]