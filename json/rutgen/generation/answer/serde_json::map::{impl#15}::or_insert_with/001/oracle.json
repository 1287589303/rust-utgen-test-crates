[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"test\".to_string(), Value::Bool(true));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"test\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::Bool(false));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"test\"], Value::Bool(true));",
          "    assert_eq!(_ , &mut Value::Bool(true));",
          "    assert!(!map.contains_key(\"new_key\"));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"test\".to_string(), Value::Bool(true));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"test\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::Bool(false));",
          "    assert_eq!(map[\"test\"], Value::Bool(true));",
          "    assert_eq!(_ , &mut Value::Bool(true));",
          "    assert!(!map.contains_key(\"new_key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key\".to_string(), Value::String(\"initial\".to_string()));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::String(\"new value\".to_string()));",
          "}"
        ],
        "oracle": [
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key\".to_string(), Value::String(\"initial\".to_string()));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key\").unwrap() });",
          "    let result = entry.or_insert_with(|| Value::String(\"new value\".to_string()));",
          "    assert_eq!(result, &Value::String(\"initial\".to_string()));",
          "    assert_eq!(map.get(\"key\").unwrap(), &Value::String(\"initial\".to_string()));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key\".to_string(), Value::String(\"initial\".to_string()));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::String(\"new value\".to_string()));",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key\".to_string(), Value::String(\"initial\".to_string()));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key\").unwrap() });",
          "    let result = entry.or_insert_with(|| Value::String(\"new value\".to_string()));",
          "    assert_eq!(result, &Value::String(\"initial\".to_string()));",
          "    assert_eq!(map.get(\"key\").unwrap(), &Value::String(\"initial\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"number\".to_string(), Value::Number(Number::from(100)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"number\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::Number(Number::from(200)));",
          "}"
        ],
        "oracle": [
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"number\".to_string(), Value::Number(Number::from(100)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"number\").unwrap() });",
          "    let result = entry.or_insert_with(|| Value::Number(Number::from(200)));",
          "    assert_eq!(result, &mut Value::Number(Number::from(100)));",
          "    assert_eq!(map[\"number\"], Value::Number(Number::from(100)));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"number\".to_string(), Value::Number(Number::from(100)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"number\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::Number(Number::from(200)));",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"number\".to_string(), Value::Number(Number::from(100)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"number\").unwrap() });",
          "    let result = entry.or_insert_with(|| Value::Number(Number::from(200)));",
          "    assert_eq!(result, &mut Value::Number(Number::from(100)));",
          "    assert_eq!(map[\"number\"], Value::Number(Number::from(100)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"null_key\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::String(\"should not replace\".to_string()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.get(), &Value::Null);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(\"null_key\"), Some(&Value::Null));",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"null_key\").unwrap() });",
          "    let _ = entry.or_insert_with(|| Value::String(\"should not replace\".to_string()));",
          "    assert_eq!(entry.get(), &Value::Null);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(\"null_key\"), Some(&Value::Null));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]