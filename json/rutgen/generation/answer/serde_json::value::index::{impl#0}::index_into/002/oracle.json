[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_array = Value::Array(vec![Value::Bool(true)]);",
          "    let index = 0;",
          "    let result = index_into(&index, &value_array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let value_array = Value::Array(vec![Value::Bool(true)]);",
          "    let index = 0;",
          "    let result = index_into(&index, &value_array);",
          "    assert_eq!(result, Some(&Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_array = Value::Array(vec![Value::Bool(true), Value::Number(Number::from(10))]);",
          "    let index = 1;",
          "    let result = index_into(&index, &value_array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&Value::Number(Number::from(10))));"
        ],
        "code": [
          "{",
          "    let value_array = Value::Array(vec![Value::Bool(true), Value::Number(Number::from(10))]);",
          "    let index = 1;",
          "    let result = index_into(&index, &value_array);",
          "    assert_eq!(result, Some(&Value::Number(Number::from(10))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_array = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    let index = 0;",
          "    let result = index_into(&index, &value_array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&Value::String(String::from(\"test\"))));"
        ],
        "code": [
          "{",
          "    let value_array = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    let index = 0;",
          "    let result = index_into(&index, &value_array);",
          "    assert_eq!(result, Some(&Value::String(String::from(\"test\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_array = Value::Array(vec![Value::Null]);",
          "    let index = 1;",
          "    let result = index_into(&index, &value_array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let value_array = Value::Array(vec![Value::Null]);",
          "    let index = 1;",
          "    let result = index_into(&index, &value_array);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]