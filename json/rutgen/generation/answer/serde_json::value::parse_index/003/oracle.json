[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"1\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(1));"
        ],
        "code": [
          "{",
          "    let input = \"1\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"2\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"0\";",
          "    let expected = Some(0);",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"1\";",
          "    let expected = Some(1);",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"01\";",
          "    let expected = None;",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"+2\";",
          "    let expected = None;",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"002\";",
          "    let expected = None;",
          "    assert_eq!(parse_index(input), expected);"
        ],
        "code": [
          "{",
          "    let input = \"2\";",
          "    let result = parse_index(input);",
          "    let input = \"0\";",
          "    let expected = Some(0);",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"1\";",
          "    let expected = Some(1);",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"01\";",
          "    let expected = None;",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"+2\";",
          "    let expected = None;",
          "    assert_eq!(parse_index(input), expected);",
          "    ",
          "    let input = \"002\";",
          "    let expected = None;",
          "    assert_eq!(parse_index(input), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"3\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"3\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"4\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"4\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"5\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(0));",
          "    let input = \"00\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    let input = \"5\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(5));",
          "    let input = \"+5\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input = \"5\";",
          "    let result = parse_index(input);",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(0));",
          "    let input = \"00\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    let input = \"5\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(5));",
          "    let input = \"+5\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"6\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    let expected = Some(6);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = \"6\";",
          "    let result = parse_index(input);",
          "    let expected = Some(6);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"7\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"01\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"00\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(0));",
          "    ",
          "    let input = \"7\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(7));"
        ],
        "code": [
          "{",
          "    let input = \"7\";",
          "    let result = parse_index(input);",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"01\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"00\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(0));",
          "    ",
          "    let input = \"7\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"8\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"01\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"8\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(8));",
          "    ",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(0));"
        ],
        "code": [
          "{",
          "    let input = \"8\";",
          "    let result = parse_index(input);",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"01\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input = \"8\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(8));",
          "    ",
          "    let input = \"0\";",
          "    let result = parse_index(input);",
          "    assert_eq!(result, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"9\";",
          "    let result = parse_index(input);",
          "}"
        ],
        "oracle": [
          "    let expected_result: Option<usize> = Some(9);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let input = \"9\";",
          "    let result = parse_index(input);",
          "    let expected_result: Option<usize> = Some(9);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]