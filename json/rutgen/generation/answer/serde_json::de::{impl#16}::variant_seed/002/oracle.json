[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for ValidSeed {",
          "        type Value = String;",
          "        ",
          "        fn deserialize<D>(self, deserializer: D) -> Result<String>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            let s = String::from(\"valid_variant\");",
          "            Ok(s)",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = ValidSeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.unwrap().0, \"valid_variant\");",
          "    assert!(matches!(_result, Ok(_)));"
        ],
        "code": [
          "{",
          "    struct ValidSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for ValidSeed {",
          "        type Value = String;",
          "        ",
          "        fn deserialize<D>(self, deserializer: D) -> Result<String>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            let s = String::from(\"valid_variant\");",
          "            Ok(s)",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = ValidSeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "    assert_eq!(_result.unwrap().0, \"valid_variant\");",
          "    assert!(matches!(_result, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptySeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for EmptySeed {",
          "        type Value = String;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<String>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            Ok(String::from(\"\")) // returns an empty string",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = EmptySeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok((String::from(\"\"), variant_access)));",
          "    assert!(deserializer.remaining_depth == 0);",
          "    assert!(deserializer.scratch.is_empty());"
        ],
        "code": [
          "{",
          "    struct EmptySeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for EmptySeed {",
          "        type Value = String;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<String>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            Ok(String::from(\"\")) // returns an empty string",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = EmptySeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "    assert_eq!(_result, Ok((String::from(\"\"), variant_access)));",
          "    assert!(deserializer.remaining_depth == 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct FailingSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for FailingSeed {",
          "        type Value = String;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<String>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            Err(Error) // force an error",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = FailingSeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seed.deserialize(&mut *variant_access.de), Err(Error));",
          "    assert!(matches!(_result, Err(Error)));",
          "    assert!(variant_access.de.remaining_depth == 0);",
          "    assert!(variant_access.de.scratch.is_empty());",
          "    assert!(variant_access.de.read.byte_offset() == 0);"
        ],
        "code": [
          "{",
          "    struct FailingSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for FailingSeed {",
          "        type Value = String;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<String>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            Err(Error) // force an error",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = FailingSeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "    assert_eq!(seed.deserialize(&mut *variant_access.de), Err(Error));",
          "    assert!(matches!(_result, Err(Error)));",
          "    assert!(variant_access.de.remaining_depth == 0);",
          "    assert!(variant_access.de.scratch.is_empty());",
          "    assert!(variant_access.de.read.byte_offset() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct IntSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for IntSeed {",
          "        type Value = i32;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<i32>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            Ok(42) // returns a valid integer",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = IntSeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok((42, variant_access)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(matches!(_result, Ok((val, _)) if val == 42));",
          "    assert!(deserializer.remaining_depth == 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert!(variant_access.de.read.byte_offset() == 0);"
        ],
        "code": [
          "{",
          "    struct IntSeed;",
          "",
          "    impl<'de> de::DeserializeSeed<'de> for IntSeed {",
          "        type Value = i32;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<i32>",
          "        where",
          "            D: de::Deserializer<'de>,",
          "        {",
          "            Ok(42) // returns a valid integer",
          "        }",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: SliceRead::new(&[]),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let variant_access = UnitVariantAccess { de: &mut deserializer };",
          "    let seed = IntSeed;",
          "",
          "    let _result = variant_access.variant_seed(seed);",
          "    assert_eq!(_result, Ok((42, variant_access)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(matches!(_result, Ok((val, _)) if val == 42));",
          "    assert!(deserializer.remaining_depth == 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert!(variant_access.de.read.byte_offset() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]