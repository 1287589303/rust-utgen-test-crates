[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 2",
          "    scratch[0] == 0b1100_0000",
          "    scratch[1] == 0b1000_0000",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x7FF, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0xFFFF, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x10000, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x110000, &mut scratch);",
          "    }"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "    scratch.len() == 2",
          "    scratch[0] == 0b1100_0000",
          "    scratch[1] == 0b1000_0000",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x7FF, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0xFFFF, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x10000, &mut scratch);",
          "    }",
          "    ",
          "    #[test]",
          "    fn test() {",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x110000, &mut scratch);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x7FF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 2",
          "    scratch[0] == 0b1100_0000 | ((0x7FF >> 6) & 0b0001_1111) as u8",
          "    scratch[1] == 0b1000_0000 | (0x7FF & 0b0011_1111) as u8"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x7FF, &mut scratch);",
          "    scratch.len() == 2",
          "    scratch[0] == 0b1100_0000 | ((0x7FF >> 6) & 0b0001_1111) as u8",
          "    scratch[1] == 0b1000_0000 | (0x7FF & 0b0011_1111) as u8",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b1110_0000",
          "    scratch[1] == 0b1000_0000",
          "    scratch[2] == 0b1000_0000",
          "    scratch.len() == 3"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b1110_0000",
          "    scratch[1] == 0b1000_0000",
          "    scratch[2] == 0b1000_0000",
          "    scratch.len() == 3",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0xFFFF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 2",
          "    scratch[0] == 0xEF",
          "    scratch[1] == 0xBF",
          "    scratch[2] == 0xBF",
          "    scratch.len() == 3",
          "    scratch[0] == 0xE0",
          "    scratch[1] == 0x9F",
          "    scratch[2] == 0xBF",
          "    scratch.len() == 4",
          "    scratch[0] == 0xF4",
          "    scratch[1] == 0x8F",
          "    scratch[2] == 0xBF",
          "    scratch[3] == 0xBF"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0xFFFF, &mut scratch);",
          "    scratch.len() == 2",
          "    scratch[0] == 0xEF",
          "    scratch[1] == 0xBF",
          "    scratch[2] == 0xBF",
          "    scratch.len() == 3",
          "    scratch[0] == 0xE0",
          "    scratch[1] == 0x9F",
          "    scratch[2] == 0xBF",
          "    scratch.len() == 4",
          "    scratch[0] == 0xF4",
          "    scratch[1] == 0x8F",
          "    scratch[2] == 0xBF",
          "    scratch[3] == 0xBF",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x10000, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0xF0 | ((0x10000 >> 18) & 0b0000_0111));",
          "    assert_eq!(scratch[1], 0x80 | ((0x10000 >> 12) & 0b0011_1111));",
          "    assert_eq!(scratch[2], 0x80 | ((0x10000 >> 6) & 0b0011_1111));",
          "    assert_eq!(scratch[3], 0x80 | (0x10000 & 0b0011_1111));"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x10000, &mut scratch);",
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0xF0 | ((0x10000 >> 18) & 0b0000_0111));",
          "    assert_eq!(scratch[1], 0x80 | ((0x10000 >> 12) & 0b0011_1111));",
          "    assert_eq!(scratch[2], 0x80 | ((0x10000 >> 6) & 0b0011_1111));",
          "    assert_eq!(scratch[3], 0x80 | (0x10000 & 0b0011_1111));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x10FFFF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b11110000",
          "    scratch[1] == 0b10011111",
          "    scratch[2] == 0b10011000",
          "    scratch[3] == 0b10000000",
          "    scratch.len() == 4"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x10FFFF, &mut scratch);",
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b11110000",
          "    scratch[1] == 0b10011111",
          "    scratch[2] == 0b10011000",
          "    scratch[3] == 0b10000000",
          "    scratch.len() == 4",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x110000, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 0",
          "    scratch.is_empty() == true",
          "    scratch.capacity() >= 4",
          "    scratch.push(0x80 as u8) == false",
          "    scratch.push(0xC0) == true",
          "    scratch.push(0x80) == true",
          "    scratch.len() == 4",
          "    scratch[0] == 0b11110000",
          "    scratch[1] == 0b10000000",
          "    scratch[2] == 0b10000000",
          "    scratch[3] == 0b10000000",
          "    Error occurs due to invalid codepoint 0x110000",
          "    result.is_err() == true"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    push_wtf8_codepoint(0x110000, &mut scratch);",
          "    scratch.len() == 0",
          "    scratch.is_empty() == true",
          "    scratch.capacity() >= 4",
          "    scratch.push(0x80 as u8) == false",
          "    scratch.push(0xC0) == true",
          "    scratch.push(0x80) == true",
          "    scratch.len() == 4",
          "    scratch[0] == 0b11110000",
          "    scratch[1] == 0b10000000",
          "    scratch[2] == 0b10000000",
          "    scratch[3] == 0b10000000",
          "    Error occurs due to invalid codepoint 0x110000",
          "    result.is_err() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]