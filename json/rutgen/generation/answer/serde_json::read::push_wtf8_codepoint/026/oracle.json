[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 2);",
          "    assert_eq!(scratch[0], 0b1100_0000 | (0x80 >> 6) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | (0x80 & 0b0011_1111) as u8);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "    assert_eq!(scratch.len(), 2);",
          "    assert_eq!(scratch[0], 0b1100_0000 | (0x80 >> 6) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | (0x80 & 0b0011_1111) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x1FF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "    assert_eq!(scratch.len(), 2);",
          "    assert_eq!(scratch[0], 0b1100_0000 | (0x80 >> 6) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | (0x80 & 0b0011_1111) as u8);",
          "    assert_eq!(scratch, vec![0b1100_0000 | (0x80 >> 6) as u8, 0b1000_0000 | (0x80 & 0b0011_1111) as u8]);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x1FF, &mut scratch);",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x80, &mut scratch);",
          "    assert_eq!(scratch.len(), 2);",
          "    assert_eq!(scratch[0], 0b1100_0000 | (0x80 >> 6) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | (0x80 & 0b0011_1111) as u8);",
          "    assert_eq!(scratch, vec![0b1100_0000 | (0x80 >> 6) as u8, 0b1000_0000 | (0x80 & 0b0011_1111) as u8]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x7FF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 2);",
          "    assert_eq!(scratch[0], 0b1100_0011);",
          "    assert_eq!(scratch[1], 0b1000_0001);",
          "    assert_eq!(scratch.capacity(), 4);",
          "    assert!(scratch[0] & 0b1100_0000 == 0b1100_0000);",
          "    assert!(scratch[1] & 0b1000_0000 == 0b1000_0000);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x7FF, &mut scratch);",
          "    assert_eq!(scratch.len(), 2);",
          "    assert_eq!(scratch[0], 0b1100_0011);",
          "    assert_eq!(scratch[1], 0b1000_0001);",
          "    assert_eq!(scratch.capacity(), 4);",
          "    assert!(scratch[0] & 0b1100_0000 == 0b1100_0000);",
          "    assert!(scratch[1] & 0b1000_0000 == 0b1000_0000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]