[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x10000; // The first valid codepoint in the range",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0xF0);",
          "    assert_eq!(scratch[1], 0x90);",
          "    assert_eq!(scratch[2], 0x80);",
          "    assert_eq!(scratch[3], 0x80);",
          "    assert!(scratch.capacity() >= 4);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x10000; // The first valid codepoint in the range",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0xF0);",
          "    assert_eq!(scratch[1], 0x90);",
          "    assert_eq!(scratch[2], 0x80);",
          "    assert_eq!(scratch[3], 0x80);",
          "    assert!(scratch.capacity() >= 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x20000; // A codepoint in the middle of the range",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x20000;",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0b11110000 | ((n >> 18) & 0b00000111) as u8);",
          "    assert_eq!(scratch[1], 0b10000000 | ((n >> 12) & 0b00111111) as u8);",
          "    assert_eq!(scratch[2], 0b10000000 | ((n >> 6) & 0b00111111) as u8);",
          "    assert_eq!(scratch[3], 0b10000000 | (n & 0b00111111) as u8);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x20000; // A codepoint in the middle of the range",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x20000;",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0b11110000 | ((n >> 18) & 0b00000111) as u8);",
          "    assert_eq!(scratch[1], 0b10000000 | ((n >> 12) & 0b00111111) as u8);",
          "    assert_eq!(scratch[2], 0b10000000 | ((n >> 6) & 0b00111111) as u8);",
          "    assert_eq!(scratch[3], 0b10000000 | (n & 0b00111111) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x10FFFF; // The last valid codepoint in the range",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0b11110000 | ((n >> 18) & 0b0000_0111) as u8);",
          "    assert_eq!(scratch[1], 0b10000000 | ((n >> 12) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[2], 0b10000000 | ((n >> 6) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[3], 0b10000000 | (n & 0b0011_1111) as u8);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x10FFFF; // The last valid codepoint in the range",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    assert_eq!(scratch.len(), 4);",
          "    assert_eq!(scratch[0], 0b11110000 | ((n >> 18) & 0b0000_0111) as u8);",
          "    assert_eq!(scratch[1], 0b10000000 | ((n >> 12) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[2], 0b10000000 | ((n >> 6) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[3], 0b10000000 | (n & 0b0011_1111) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]