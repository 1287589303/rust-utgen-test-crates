[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x11_0000; // Minimum value that matches the precondition for unsuccessful encoding.",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b11110000",
          "    scratch[1] == 0b10000000",
          "    scratch[2] == 0b10000000",
          "    scratch[3] == 0b10000000",
          "    scratch.len() == 4",
          "    scratch[0..4] == [0b11110000, 0b10000000, 0b10000000, 0b10000000]"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x11_0000; // Minimum value that matches the precondition for unsuccessful encoding.",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b11110000",
          "    scratch[1] == 0b10000000",
          "    scratch[2] == 0b10000000",
          "    scratch[3] == 0b10000000",
          "    scratch.len() == 4",
          "    scratch[0..4] == [0b11110000, 0b10000000, 0b10000000, 0b10000000]",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x10_FFFFFF; // Maximum value that matches the precondition for unsuccessful encoding.",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b1111_0000",
          "    scratch[1] == 0b1000_0000",
          "    scratch[2] == 0b1000_0000",
          "    scratch[3] == 0b1000_0000",
          "    scratch.len() == 4"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x10_FFFFFF; // Maximum value that matches the precondition for unsuccessful encoding.",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    scratch.len() == 0",
          "    scratch.capacity() >= 4",
          "    scratch[0] == 0b1111_0000",
          "    scratch[1] == 0b1000_0000",
          "    scratch[2] == 0b1000_0000",
          "    scratch[3] == 0b1000_0000",
          "    scratch.len() == 4",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x20_0000; // A value just above 0x10_FFFF to ensure encoding is still not valid.",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 0);  // Expecting no bytes in scratch since input is out of valid range",
          "    assert!(scratch.is_empty());     // The scratch buffer should still be empty after the call",
          "    assert!(matches!(std::panic::catch_unwind(|| push_wtf8_codepoint(0x11_0000, &mut scratch)), Err(_))); // Should panic for n >= 0x11_0000"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::new();",
          "    let n: u32 = 0x20_0000; // A value just above 0x10_FFFF to ensure encoding is still not valid.",
          "    push_wtf8_codepoint(n, &mut scratch);",
          "    assert_eq!(scratch.len(), 0);  // Expecting no bytes in scratch since input is out of valid range",
          "    assert!(scratch.is_empty());     // The scratch buffer should still be empty after the call",
          "    assert!(matches!(std::panic::catch_unwind(|| push_wtf8_codepoint(0x11_0000, &mut scratch)), Err(_))); // Should panic for n >= 0x11_0000",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]