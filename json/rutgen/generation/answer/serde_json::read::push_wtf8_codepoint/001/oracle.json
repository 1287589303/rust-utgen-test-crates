[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    for n in 0..=127 {",
          "        push_wtf8_codepoint(n, &mut scratch);",
          "    }",
          "}"
        ],
        "oracle": [
          "    scratch.len() == 128",
          "    scratch[0..128] == (0..=127).map(|x| x as u8).collect::<Vec<u8>>()"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    for n in 0..=127 {",
          "        push_wtf8_codepoint(n, &mut scratch);",
          "    }",
          "    scratch.len() == 128",
          "    scratch[0..128] == (0..=127).map(|x| x as u8).collect::<Vec<u8>>()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 1);",
          "    assert_eq!(scratch[0], 0);",
          "    assert_eq!(scratch.capacity(), 4);",
          "    assert!(scratch.is_empty() == false);",
          "    assert_eq!(scratch, vec![0]);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0, &mut scratch);",
          "    assert_eq!(scratch.len(), 1);",
          "    assert_eq!(scratch[0], 0);",
          "    assert_eq!(scratch.capacity(), 4);",
          "    assert!(scratch.is_empty() == false);",
          "    assert_eq!(scratch, vec![0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(127, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 1);",
          "    assert_eq!(scratch[0], 127);",
          "    assert_eq!(scratch.capacity(), 4);",
          "    assert!(scratch.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(127, &mut scratch);",
          "    assert_eq!(scratch.len(), 1);",
          "    assert_eq!(scratch[0], 127);",
          "    assert_eq!(scratch.capacity(), 4);",
          "    assert!(scratch.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]