[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0000 | ((0x800 >> 12) & 0b0000_1111) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | ((0x800 >> 6) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[2], 0b1000_0000 | (0x800 & 0b0011_1111) as u8);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0x800, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0000 | ((0x800 >> 12) & 0b0000_1111) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | ((0x800 >> 6) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[2], 0b1000_0000 | (0x800 & 0b0011_1111) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xFFFF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0000 | ((0xFFFF >> 12) & 0b0000_1111) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | ((0xFFFF >> 6) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[2], 0b1000_0000 | (0xFFFF & 0b0011_1111) as u8);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xFFFF, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0000 | ((0xFFFF >> 12) & 0b0000_1111) as u8);",
          "    assert_eq!(scratch[1], 0b1000_0000 | ((0xFFFF >> 6) & 0b0011_1111) as u8);",
          "    assert_eq!(scratch[2], 0b1000_0000 | (0xFFFF & 0b0011_1111) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xCFFF, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xCFFF, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0011);",
          "    assert_eq!(scratch[1], 0b1000_1111);",
          "    assert_eq!(scratch[2], 0b1000_1111);"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xCFFF, &mut scratch);",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xCFFF, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0011);",
          "    assert_eq!(scratch[1], 0b1000_1111);",
          "    assert_eq!(scratch[2], 0b1000_1111);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xD800, &mut scratch);",
          "}"
        ],
        "oracle": [
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xD800, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0010);",
          "    assert_eq!(scratch[1], 0b1000_0000 | ((0xD800 >> 12) & 0b0011_1111));",
          "    assert_eq!(scratch[2], 0b1000_0000 | ((0xD800 >> 6) & 0b0011_1111));",
          "    assert_eq!(scratch[3], 0b1000_0000 | (0xD800 & 0b0011_1111));"
        ],
        "code": [
          "{",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xD800, &mut scratch);",
          "    let mut scratch = Vec::with_capacity(4);",
          "    push_wtf8_codepoint(0xD800, &mut scratch);",
          "    assert_eq!(scratch.len(), 3);",
          "    assert_eq!(scratch[0], 0b1110_0010);",
          "    assert_eq!(scratch[1], 0b1000_0000 | ((0xD800 >> 12) & 0b0011_1111));",
          "    assert_eq!(scratch[2], 0b1000_0000 | ((0xD800 >> 6) & 0b0011_1111));",
          "    assert_eq!(scratch[3], 0b1000_0000 | (0xD800 & 0b0011_1111));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]