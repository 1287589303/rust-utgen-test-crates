[
  {
    "uses": [
      "use serde::ser::Serialize;",
      "use std::collections::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonSerializable;",
          "    let value = NonSerializable;",
          "    let _result = serde_json::to_string_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serde_json::to_string_pretty(&NonSerializable), Err(Error::custom(\"Serialization failed\")));"
        ],
        "code": [
          "{",
          "    struct NonSerializable;",
          "    let value = NonSerializable;",
          "    let _result = serde_json::to_string_pretty(&value);",
          "    assert_eq!(serde_json::to_string_pretty(&NonSerializable), Err(Error::custom(\"Serialization failed\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::ser::Serialize;",
          "    use std::collections::HashMap;",
          "",
          "    struct MyStruct {",
          "        map: HashMap<i32, String>,",
          "    }",
          "",
          "    let mut map = HashMap::new();",
          "    map.insert(1, \"value\".to_string());",
          "    let value = MyStruct { map };",
          "    let _result = serde_json::to_string_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().code(), ErrorCode::SerializationFailed);"
        ],
        "code": [
          "{",
          "    use serde::ser::Serialize;",
          "    use std::collections::HashMap;",
          "",
          "    struct MyStruct {",
          "        map: HashMap<i32, String>,",
          "    }",
          "",
          "    let mut map = HashMap::new();",
          "    map.insert(1, \"value\".to_string());",
          "    let value = MyStruct { map };",
          "    let _result = serde_json::to_string_pretty(&value);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().code(), ErrorCode::SerializationFailed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Option<String> = None;",
          "    let _result = serde_json::to_string_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().code(), ErrorCode::Serialization);"
        ],
        "code": [
          "{",
          "    let value: Option<String> = None;",
          "    let _result = serde_json::to_string_pretty(&value);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().code(), ErrorCode::Serialization);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let malformed_str = \"Invalid JSON\";",
          "    let _result = serde_json::to_string_pretty(&malformed_str);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(_)));"
        ],
        "code": [
          "{",
          "    let malformed_str = \"Invalid JSON\";",
          "    let _result = serde_json::to_string_pretty(&malformed_str);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]