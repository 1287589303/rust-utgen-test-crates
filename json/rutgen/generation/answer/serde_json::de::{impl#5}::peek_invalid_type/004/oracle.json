[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "        ",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "        ",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'n'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeIdent);",
          "    ",
          "    let input = vec![b't'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeIdent);",
          "    ",
          "    let input = vec![b'f'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeIdent);",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).code, ErrorCode::ExpectedSomeValue);",
          "    ",
          "    let input = vec![b'-'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::InvalidNumber);",
          "    ",
          "    let input = vec![b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeValue);",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).code, ErrorCode::ExpectedSomeValue);",
          "    ",
          "    let input = vec![b'0'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::InvalidNumber);"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "        ",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "        ",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'n'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeIdent);",
          "    ",
          "    let input = vec![b't'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeIdent);",
          "    ",
          "    let input = vec![b'f'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeIdent);",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).code, ErrorCode::ExpectedSomeValue);",
          "    ",
          "    let input = vec![b'-'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::InvalidNumber);",
          "    ",
          "    let input = vec![b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::ExpectedSomeValue);",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).code, ErrorCode::ExpectedSomeValue);",
          "    ",
          "    let input = vec![b'0'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any).err().unwrap().code, ErrorCode::InvalidNumber);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b't'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    let input = vec![b'n'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'f'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert_eq!(result, de::Error::invalid_type(Unexpected::Seq, &Expected::Any));",
          "    ",
          "    let input = vec![b'-'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b't'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert_eq!(result, de::Error::invalid_type(Unexpected::Map, &Expected::Any));",
          "    ",
          "    let input = vec![b'0'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'9'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b't'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    let input = vec![b'n'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'f'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert_eq!(result, de::Error::invalid_type(Unexpected::Seq, &Expected::Any));",
          "    ",
          "    let input = vec![b'-'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b't'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert_eq!(result, de::Error::invalid_type(Unexpected::Map, &Expected::Any));",
          "    ",
          "    let input = vec![b'0'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "    ",
          "    let input = vec![b'9'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer.peek_invalid_type(&Expected::Any).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'f'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Bool(false), &Expected::Any));",
          "    let input_n = vec![b'n'];",
          "    let mut reader_n = TestRead { input: input_n, position: 0 };",
          "    let mut deserializer_n = Deserializer { read: reader_n, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_n.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Unit, &Expected::Any));",
          "    let input_t = vec![b't'];",
          "    let mut reader_t = TestRead { input: input_t, position: 0 };",
          "    let mut deserializer_t = Deserializer { read: reader_t, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_t.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Bool(true), &Expected::Any));",
          "    let input_seq = vec![b'['];",
          "    let mut reader_seq = TestRead { input: input_seq, position: 0 };",
          "    let mut deserializer_seq = Deserializer { read: reader_seq, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_seq.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Seq, &Expected::Any));",
          "    let input_minus = vec![b'-'];",
          "    let mut reader_minus = TestRead { input: input_minus, position: 0 };",
          "    let mut deserializer_minus = Deserializer { read: reader_minus, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer_minus.peek_invalid_type(&Expected::Any).is_err());",
          "    let input_str = vec![b'\"'];",
          "    let mut reader_str = TestRead { input: input_str, position: 0 };",
          "    let mut deserializer_str = Deserializer { read: reader_str, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer_str.peek_invalid_type(&Expected::Any).is_err());",
          "    let input_lbrace = vec![b'{'];",
          "    let mut reader_lbrace = TestRead { input: input_lbrace, position: 0 };",
          "    let mut deserializer_lbrace = Deserializer { read: reader_lbrace, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_lbrace.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Map, &Expected::Any));",
          "    let input_digit = vec![b'0'];",
          "    let mut reader_digit = TestRead { input: input_digit, position: 0 };",
          "    let mut deserializer_digit = Deserializer { read: reader_digit, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer_digit.peek_invalid_type(&Expected::Any).is_err());"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'f'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    assert_eq!(deserializer.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Bool(false), &Expected::Any));",
          "    let input_n = vec![b'n'];",
          "    let mut reader_n = TestRead { input: input_n, position: 0 };",
          "    let mut deserializer_n = Deserializer { read: reader_n, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_n.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Unit, &Expected::Any));",
          "    let input_t = vec![b't'];",
          "    let mut reader_t = TestRead { input: input_t, position: 0 };",
          "    let mut deserializer_t = Deserializer { read: reader_t, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_t.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Bool(true), &Expected::Any));",
          "    let input_seq = vec![b'['];",
          "    let mut reader_seq = TestRead { input: input_seq, position: 0 };",
          "    let mut deserializer_seq = Deserializer { read: reader_seq, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_seq.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Seq, &Expected::Any));",
          "    let input_minus = vec![b'-'];",
          "    let mut reader_minus = TestRead { input: input_minus, position: 0 };",
          "    let mut deserializer_minus = Deserializer { read: reader_minus, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer_minus.peek_invalid_type(&Expected::Any).is_err());",
          "    let input_str = vec![b'\"'];",
          "    let mut reader_str = TestRead { input: input_str, position: 0 };",
          "    let mut deserializer_str = Deserializer { read: reader_str, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer_str.peek_invalid_type(&Expected::Any).is_err());",
          "    let input_lbrace = vec![b'{'];",
          "    let mut reader_lbrace = TestRead { input: input_lbrace, position: 0 };",
          "    let mut deserializer_lbrace = Deserializer { read: reader_lbrace, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_lbrace.peek_invalid_type(&Expected::Any), de::Error::invalid_type(Unexpected::Map, &Expected::Any));",
          "    let input_digit = vec![b'0'];",
          "    let mut reader_digit = TestRead { input: input_digit, position: 0 };",
          "    let mut deserializer_digit = Deserializer { read: reader_digit, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert!(deserializer_digit.peek_invalid_type(&Expected::Any).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'-'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    let input = vec![b'n', b'u', b'll'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Unit, &_)));",
          "    ",
          "    let input = vec![b't', b'r', b'u', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Bool(true), &_)));",
          "    ",
          "    let input = vec![b'f', b'a', b'l', b's', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Bool(false), &_)));",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Seq, &_)));",
          "    ",
          "    let input = vec![b'-', b'1'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(_, _)));",
          "    ",
          "    let input = vec![b'\"', b'm', b'o', b'c', b'k', b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Str(\"mock\"), &_)));",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Map, &_)));"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'-'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    let input = vec![b'n', b'u', b'll'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Unit, &_)));",
          "    ",
          "    let input = vec![b't', b'r', b'u', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Bool(true), &_)));",
          "    ",
          "    let input = vec![b'f', b'a', b'l', b's', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Bool(false), &_)));",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Seq, &_)));",
          "    ",
          "    let input = vec![b'-', b'1'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(_, _)));",
          "    ",
          "    let input = vec![b'\"', b'm', b'o', b'c', b'k', b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Str(\"mock\"), &_)));",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, de::Error::invalid_type(Unexpected::Map, &_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    let input_n = vec![b'n', b'u', b'll'];",
          "    let mut reader_n = TestRead { input: input_n, position: 0 };",
          "    let mut deserializer_n = Deserializer { read: reader_n, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_n = deserializer_n.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_n, de::Error::invalid_type(Unexpected::Unit, _)));",
          "    ",
          "    let input_t = vec![b't', b'r', b'u', b'e'];",
          "    let mut reader_t = TestRead { input: input_t, position: 0 };",
          "    let mut deserializer_t = Deserializer { read: reader_t, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_t = deserializer_t.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_t, de::Error::invalid_type(Unexpected::Bool(true), _)));",
          "    ",
          "    let input_f = vec![b'f', b'a', b'l', b's', b'e'];",
          "    let mut reader_f = TestRead { input: input_f, position: 0 };",
          "    let mut deserializer_f = Deserializer { read: reader_f, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_f = deserializer_f.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_f, de::Error::invalid_type(Unexpected::Bool(false), _)));",
          "    ",
          "    let input_sq = vec![b'['];",
          "    let mut reader_sq = TestRead { input: input_sq, position: 0 };",
          "    let mut deserializer_sq = Deserializer { read: reader_sq, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_sq = deserializer_sq.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_sq, de::Error::invalid_type(Unexpected::Seq, _)));",
          "    ",
          "    let input_ob = vec![b'{'];",
          "    let mut reader_ob = TestRead { input: input_ob, position: 0 };",
          "    let mut deserializer_ob = Deserializer { read: reader_ob, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_ob = deserializer_ob.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_ob, de::Error::invalid_type(Unexpected::Map, _)));",
          "    ",
          "    let input_neg = vec![b'-', b'1'];",
          "    let mut reader_neg = TestRead { input: input_neg, position: 0 };",
          "    let mut deserializer_neg = Deserializer { read: reader_neg, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_neg = deserializer_neg.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_neg, de::Error::invalid_type(_, _)));",
          "    ",
          "    let input_digit = vec![b'1'];",
          "    let mut reader_digit = TestRead { input: input_digit, position: 0 };",
          "    let mut deserializer_digit = Deserializer { read: reader_digit, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_digit = deserializer_digit.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_digit, de::Error::invalid_type(_, _)));"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    let input_n = vec![b'n', b'u', b'll'];",
          "    let mut reader_n = TestRead { input: input_n, position: 0 };",
          "    let mut deserializer_n = Deserializer { read: reader_n, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_n = deserializer_n.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_n, de::Error::invalid_type(Unexpected::Unit, _)));",
          "    ",
          "    let input_t = vec![b't', b'r', b'u', b'e'];",
          "    let mut reader_t = TestRead { input: input_t, position: 0 };",
          "    let mut deserializer_t = Deserializer { read: reader_t, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_t = deserializer_t.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_t, de::Error::invalid_type(Unexpected::Bool(true), _)));",
          "    ",
          "    let input_f = vec![b'f', b'a', b'l', b's', b'e'];",
          "    let mut reader_f = TestRead { input: input_f, position: 0 };",
          "    let mut deserializer_f = Deserializer { read: reader_f, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_f = deserializer_f.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_f, de::Error::invalid_type(Unexpected::Bool(false), _)));",
          "    ",
          "    let input_sq = vec![b'['];",
          "    let mut reader_sq = TestRead { input: input_sq, position: 0 };",
          "    let mut deserializer_sq = Deserializer { read: reader_sq, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_sq = deserializer_sq.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_sq, de::Error::invalid_type(Unexpected::Seq, _)));",
          "    ",
          "    let input_ob = vec![b'{'];",
          "    let mut reader_ob = TestRead { input: input_ob, position: 0 };",
          "    let mut deserializer_ob = Deserializer { read: reader_ob, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_ob = deserializer_ob.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_ob, de::Error::invalid_type(Unexpected::Map, _)));",
          "    ",
          "    let input_neg = vec![b'-', b'1'];",
          "    let mut reader_neg = TestRead { input: input_neg, position: 0 };",
          "    let mut deserializer_neg = Deserializer { read: reader_neg, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_neg = deserializer_neg.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_neg, de::Error::invalid_type(_, _)));",
          "    ",
          "    let input_digit = vec![b'1'];",
          "    let mut reader_digit = TestRead { input: input_digit, position: 0 };",
          "    let mut deserializer_digit = Deserializer { read: reader_digit, scratch: Vec::new(), remaining_depth: 0 };",
          "    let result_digit = deserializer_digit.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(result_digit, de::Error::invalid_type(_, _)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    let input = vec![b'n', b'u', b'l', b'l'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Unit, &Expected::Any)));",
          "    ",
          "    let input = vec![b't', b'r', b'u', b'e'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Bool(true), &Expected::Any)));",
          "    ",
          "    let input = vec![b'f', b'a', b'l', b's', b'e'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Bool(false), &Expected::Any)));",
          "    ",
          "    let input = vec![b'-', b'1'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(any), &Expected::Any));",
          "    ",
          "    let input = vec![b'\"', b'm', b'o', b'c', b'k', b'\"'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Str(&\"mock\"), &Expected::Any)));",
          "    ",
          "    let input = vec![b'['];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Seq, &Expected::Any)));",
          "    ",
          "    let input = vec![b'{'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Map, &Expected::Any)));"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    let input = vec![b'n', b'u', b'l', b'l'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Unit, &Expected::Any)));",
          "    ",
          "    let input = vec![b't', b'r', b'u', b'e'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Bool(true), &Expected::Any)));",
          "    ",
          "    let input = vec![b'f', b'a', b'l', b's', b'e'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Bool(false), &Expected::Any)));",
          "    ",
          "    let input = vec![b'-', b'1'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(any), &Expected::Any));",
          "    ",
          "    let input = vec![b'\"', b'm', b'o', b'c', b'k', b'\"'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Str(&\"mock\"), &Expected::Any)));",
          "    ",
          "    let input = vec![b'['];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Seq, &Expected::Any)));",
          "    ",
          "    let input = vec![b'{'];",
          "    assert!(matches!(deserializer.peek_invalid_type(&Expected::Any), Error::invalid_type(Unexpected::Map, &Expected::Any)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "}"
        ],
        "oracle": [
          "    deserializer.peek_invalid_type(&Expected::Any);",
          "    assert_eq!(deserializer.read.position, 0);",
          "    assert!(matches!(deserializer.peek_or_null().unwrap(), b'{'));",
          "    assert!(deserializer.peek_error(ErrorCode::ExpectedSomeValue).is_err());",
          "    ",
          "    let input = vec![b'n', b'u', b'l', b'l'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Unit)));",
          "    ",
          "    let input = vec![b't', b'r', b'u', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Bool(true))));",
          "    ",
          "    let input = vec![b'f', b'a', b'l', b's', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Bool(false))));",
          "    ",
          "    let input = vec![b'-', b'1'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(_)));",
          "    ",
          "    let input = vec![b'0'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(_)));",
          "    ",
          "    let input = vec![b'\"', b't', b'e', b's', b't', b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Str(\"test\"))));",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Seq)));",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Map)));"
        ],
        "code": [
          "{",
          "    struct TestRead {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestRead {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) { self.position += 1; }",
          "",
          "        fn position(&self) -> Position { Position::default() }",
          "",
          "        fn peek_position(&self) -> Position { Position::default() }",
          "",
          "        fn byte_offset(&self) -> usize { self.position }",
          "",
          "        fn parse_str<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            Ok(Reference::Borrowed(\"mock\"))",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            Ok(Reference::Borrowed(b\"mock\"))",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> { Ok(()) }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> { Ok(0) }",
          "",
          "        fn set_failed(&mut self, _: &mut bool) {}",
          "    }",
          "",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    deserializer.peek_invalid_type(&Expected::Any)",
          "    deserializer.peek_invalid_type(&Expected::Any);",
          "    assert_eq!(deserializer.read.position, 0);",
          "    assert!(matches!(deserializer.peek_or_null().unwrap(), b'{'));",
          "    assert!(deserializer.peek_error(ErrorCode::ExpectedSomeValue).is_err());",
          "    ",
          "    let input = vec![b'n', b'u', b'l', b'l'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Unit)));",
          "    ",
          "    let input = vec![b't', b'r', b'u', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Bool(true))));",
          "    ",
          "    let input = vec![b'f', b'a', b'l', b's', b'e'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Bool(false))));",
          "    ",
          "    let input = vec![b'-', b'1'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(_)));",
          "    ",
          "    let input = vec![b'0'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(_)));",
          "    ",
          "    let input = vec![b'\"', b't', b'e', b's', b't', b'\"'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Str(\"test\"))));",
          "    ",
          "    let input = vec![b'['];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Seq)));",
          "    ",
          "    let input = vec![b'{'];",
          "    let mut reader = TestRead { input, position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let err = deserializer.peek_invalid_type(&Expected::Any);",
          "    assert!(matches!(err, Error::InvalidType(Unexpected::Map)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]