[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'n'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::unit());",
          "}"
        ],
        "oracle": [
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'n'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Unit, _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b't'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Bool(true), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'f'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Bool(false), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'0'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Unsigned(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'1'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Unsigned(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'\"'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Str(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'['], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Seq, _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'{'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Map, _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'-'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(_, _)));"
        ],
        "code": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'n'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::unit());",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'n'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Unit, _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b't'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Bool(true), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'f'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Bool(false), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'0'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Unsigned(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'1'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Unsigned(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'\"'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Str(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'['], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Seq, _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'{'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(Unexpected::Map, _)));",
          "    ",
          "    let mut deserializer = Deserializer { read: MockRead { data: &[b'-'], position: 0 }, scratch: Vec::new(), remaining_depth: 0, single_precision: false, disable_recursion_limit: false };",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::invalid_type(_, _)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b't'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(true));",
          "}"
        ],
        "oracle": [
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'n'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Unit, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b't'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Bool(true), _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'f'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::bool(false));",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Bool(false), _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'-'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'0'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'1'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'9'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'\"'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::str());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Str(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'['], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::seq());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Seq, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'{'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::map());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Map, _)));"
        ],
        "code": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b't'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'n'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Unit, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b't'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Bool(true), _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'f'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::bool(false));",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Bool(false), _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'-'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'0'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'1'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'9'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(result, Error::InvalidType(_, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'\"'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::str());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Str(_), _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'['], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::seq());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Seq, _)));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'{'], position: 0 },",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let result = deserializer.peek_invalid_type(&Expected::map());",
          "    assert!(matches!(result, Error::InvalidType(Unexpected::Map, _)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'f'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(false));",
          "}"
        ],
        "oracle": [
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Unit, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Bool(true), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::sequence());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Seq, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Number, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::string());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Str(_), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::bool(false));",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Bool(false), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::map());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Map, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::is_some());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Some, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::boolean());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Bool(_), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::float());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Float(_), _)));"
        ],
        "code": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'f'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(false));",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Unit, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Bool(true), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::sequence());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Seq, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::number());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Number, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::string());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Str(_), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::bool(false));",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Bool(false), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::map());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Map, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::is_some());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Some, _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::boolean());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Bool(_), _)));",
          "    ",
          "    let peek_invalid_type_result = deserializer.peek_invalid_type(&Expected::float());",
          "    assert!(matches!(peek_invalid_type_result, de::Error::InvalidType(Unexpected::Float(_), _)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'['], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::seq());",
          "}"
        ],
        "oracle": [
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'n'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::unit());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'f'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'['], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::seq());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'-'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::any());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'\"'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::str());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b't'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'{'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::map());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'1'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::any());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'0'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::any());"
        ],
        "code": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'['], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::seq());",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'n'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::unit());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'f'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'['], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::seq());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'-'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::any());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'\"'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::str());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b't'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::bool(true));",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'{'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::map());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'1'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::any());",
          "    ",
          "    let mut deserializer = Deserializer {",
          "    read: MockRead { data: &[b'0'], position: 0 },",
          "    // Other initializations...",
          "    };",
          "    let _ = deserializer.peek_invalid_type(&Expected::any());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'-'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::float());",
          "}"
        ],
        "oracle": [
          "    let deserializer = Deserializer { read: MockRead { data: &[b'n'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::unit()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeIdent));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'f'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::bool(true)); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeIdent));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'['], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::seq()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeValue));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'-'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::float()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::InvalidNumber));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'\"'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::str()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedDoubleQuote));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b't'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::bool(false)); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeIdent));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'{'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::map()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeValue));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'1'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::float()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::InvalidNumber));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'0'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::float()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::InvalidNumber));"
        ],
        "code": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'-'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::float());",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'n'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::unit()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeIdent));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'f'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::bool(true)); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeIdent));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'['], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::seq()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeValue));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'-'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::float()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::InvalidNumber));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'\"'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::str()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedDoubleQuote));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b't'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::bool(false)); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeIdent));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'{'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::map()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::ExpectedSomeValue));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'1'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::float()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::InvalidNumber));",
          "    ",
          "    let deserializer = Deserializer { read: MockRead { data: &[b'0'], position: 0 }, scratch: Vec::new(), remaining_depth: 0 }; let result = deserializer.peek_invalid_type(&Expected::float()); assert!(result.is_err() && matches!(result.unwrap_err().code(), ErrorCode::InvalidNumber));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'0'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::float());",
          "}"
        ],
        "oracle": [
          "    let mock_read_n = MockRead { data: &[b'n'], position: 0 };",
          "    let mut deserializer_n = Deserializer {",
          "    read: mock_read_n,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_n = deserializer_n.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(err_n, Error::InvalidType(Unexpected::Unit, _)));",
          "    ",
          "    let mock_read_t = MockRead { data: &[b't'], position: 0 };",
          "    let mut deserializer_t = Deserializer {",
          "    read: mock_read_t,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_t = deserializer_t.peek_invalid_type(&Expected::bool());",
          "    assert!(matches!(err_t, Error::InvalidType(Unexpected::Bool(true), _)));",
          "    ",
          "    let mock_read_f = MockRead { data: &[b'f'], position: 0 };",
          "    let mut deserializer_f = Deserializer {",
          "    read: mock_read_f,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_f = deserializer_f.peek_invalid_type(&Expected::bool());",
          "    assert!(matches!(err_f, Error::InvalidType(Unexpected::Bool(false), _)));",
          "    ",
          "    let mock_read_dash = MockRead { data: &[b'-'], position: 0 };",
          "    let mut deserializer_dash = Deserializer {",
          "    read: mock_read_dash,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_dash = deserializer_dash.peek_invalid_type(&Expected::number());",
          "    assert!(err_dash.is_err());",
          "    ",
          "    let mock_read_quote = MockRead { data: &[b'\"'], position: 0 };",
          "    let mut deserializer_quote = Deserializer {",
          "    read: mock_read_quote,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_quote = deserializer_quote.peek_invalid_type(&Expected::str());",
          "    assert!(matches!(err_quote, Error::InvalidType(Unexpected::Str(_), _)));",
          "    ",
          "    let mock_read_zero = MockRead { data: &[b'0'], position: 0 };",
          "    let mut deserializer_zero = Deserializer {",
          "    read: mock_read_zero,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let result_zero = deserializer_zero.peek_invalid_type(&Expected::number());",
          "    assert!(result_zero.is_err());",
          "    ",
          "    let mock_read_open_bracket = MockRead { data: &[b'['], position: 0 };",
          "    let mut deserializer_open_bracket = Deserializer {",
          "    read: mock_read_open_bracket,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_open_bracket = deserializer_open_bracket.peek_invalid_type(&Expected::seq());",
          "    assert!(matches!(err_open_bracket, Error::InvalidType(Unexpected::Seq, _)));",
          "    ",
          "    let mock_read_open_brace = MockRead { data: &[b'{'], position: 0 };",
          "    let mut deserializer_open_brace = Deserializer {",
          "    read: mock_read_open_brace,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_open_brace = deserializer_open_brace.peek_invalid_type(&Expected::map());",
          "    assert!(matches!(err_open_brace, Error::InvalidType(Unexpected::Map, _)));"
        ],
        "code": [
          "{",
          "    struct MockRead<'de> {",
          "        data: &'de [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for MockRead<'de> {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position::default()",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: MockRead { data: &[b'0'], position: 0 },",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let _ = deserializer.peek_invalid_type(&Expected::float());",
          "    let mock_read_n = MockRead { data: &[b'n'], position: 0 };",
          "    let mut deserializer_n = Deserializer {",
          "    read: mock_read_n,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_n = deserializer_n.peek_invalid_type(&Expected::unit());",
          "    assert!(matches!(err_n, Error::InvalidType(Unexpected::Unit, _)));",
          "    ",
          "    let mock_read_t = MockRead { data: &[b't'], position: 0 };",
          "    let mut deserializer_t = Deserializer {",
          "    read: mock_read_t,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_t = deserializer_t.peek_invalid_type(&Expected::bool());",
          "    assert!(matches!(err_t, Error::InvalidType(Unexpected::Bool(true), _)));",
          "    ",
          "    let mock_read_f = MockRead { data: &[b'f'], position: 0 };",
          "    let mut deserializer_f = Deserializer {",
          "    read: mock_read_f,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_f = deserializer_f.peek_invalid_type(&Expected::bool());",
          "    assert!(matches!(err_f, Error::InvalidType(Unexpected::Bool(false), _)));",
          "    ",
          "    let mock_read_dash = MockRead { data: &[b'-'], position: 0 };",
          "    let mut deserializer_dash = Deserializer {",
          "    read: mock_read_dash,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_dash = deserializer_dash.peek_invalid_type(&Expected::number());",
          "    assert!(err_dash.is_err());",
          "    ",
          "    let mock_read_quote = MockRead { data: &[b'\"'], position: 0 };",
          "    let mut deserializer_quote = Deserializer {",
          "    read: mock_read_quote,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_quote = deserializer_quote.peek_invalid_type(&Expected::str());",
          "    assert!(matches!(err_quote, Error::InvalidType(Unexpected::Str(_), _)));",
          "    ",
          "    let mock_read_zero = MockRead { data: &[b'0'], position: 0 };",
          "    let mut deserializer_zero = Deserializer {",
          "    read: mock_read_zero,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let result_zero = deserializer_zero.peek_invalid_type(&Expected::number());",
          "    assert!(result_zero.is_err());",
          "    ",
          "    let mock_read_open_bracket = MockRead { data: &[b'['], position: 0 };",
          "    let mut deserializer_open_bracket = Deserializer {",
          "    read: mock_read_open_bracket,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_open_bracket = deserializer_open_bracket.peek_invalid_type(&Expected::seq());",
          "    assert!(matches!(err_open_bracket, Error::InvalidType(Unexpected::Seq, _)));",
          "    ",
          "    let mock_read_open_brace = MockRead { data: &[b'{'], position: 0 };",
          "    let mut deserializer_open_brace = Deserializer {",
          "    read: mock_read_open_brace,",
          "    scratch: Vec::new(),",
          "    remaining_depth: 0,",
          "    #[cfg(feature = \"float_roundtrip\")]",
          "    single_precision: false,",
          "    #[cfg(feature = \"unbounded_depth\")]",
          "    disable_recursion_limit: false,",
          "    };",
          "    let err_open_brace = deserializer_open_brace.peek_invalid_type(&Expected::map());",
          "    assert!(matches!(err_open_brace, Error::InvalidType(Unexpected::Map, _)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]