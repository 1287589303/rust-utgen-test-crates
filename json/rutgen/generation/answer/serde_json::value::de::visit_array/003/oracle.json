[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"an array\")",
          "        }",
          "        ",
          "        fn visit_seq<A>(self, _seq: A) -> Result<Self::Value, Error>",
          "        where",
          "            A: SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = vec![Value::Bool(true)];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    let _ = result.unwrap(); // Only testing the successful path; ignore the result.",
          "}"
        ],
        "oracle": [
          "    let input = vec![Value::Bool(true), Value::Bool(false)];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(2, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = Vec::new(); // empty array",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(0, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::String(\"test\".to_string())];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::Number(Number::from(10))];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::Array(vec![Value::Bool(true)])];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::Object(Map::new())];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"an array\")",
          "        }",
          "        ",
          "        fn visit_seq<A>(self, _seq: A) -> Result<Self::Value, Error>",
          "        where",
          "            A: SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = vec![Value::Bool(true)];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    let _ = result.unwrap(); // Only testing the successful path; ignore the result.",
          "    let input = vec![Value::Bool(true), Value::Bool(false)];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(2, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = Vec::new(); // empty array",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(0, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::String(\"test\".to_string())];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::Number(Number::from(10))];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::Array(vec![Value::Bool(true)])];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "    ",
          "    ",
          "    let input = vec![Value::Object(Map::new())];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_length(1, &\"fewer elements in array\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"an array\")",
          "        }",
          "        ",
          "        fn visit_seq<A>(self, _seq: A) -> Result<Self::Value, Error>",
          "        where",
          "            A: SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = vec![Value::Bool(true), Value::Bool(false)];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    let _ = result.unwrap_err(); // This should trigger the error for invalid length.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visit_array(vec![Value::Bool(true)], TestVisitor), Err(Error::invalid_length(1, \"fewer elements in array\")));",
          "    assert_eq!(visit_array(vec![], TestVisitor), Err(Error::invalid_length(0, \"fewer elements in array\")));",
          "    assert_eq!(visit_array(vec![Value::Bool(true), Value::Bool(false)], TestVisitor), Err(Error::invalid_length(2, \"fewer elements in array\")));",
          "    assert_eq!(visit_array(vec![Value::Number(Number::from(42))], TestVisitor), Err(Error::invalid_length(1, \"fewer elements in array\")));"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "",
          "    impl<'de> Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"an array\")",
          "        }",
          "        ",
          "        fn visit_seq<A>(self, _seq: A) -> Result<Self::Value, Error>",
          "        where",
          "            A: SeqAccess<'de>,",
          "        {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = vec![Value::Bool(true), Value::Bool(false)];",
          "    let visitor = TestVisitor;",
          "    let result = visit_array(input, visitor);",
          "    let _ = result.unwrap_err(); // This should trigger the error for invalid length.",
          "    assert_eq!(visit_array(vec![Value::Bool(true)], TestVisitor), Err(Error::invalid_length(1, \"fewer elements in array\")));",
          "    assert_eq!(visit_array(vec![], TestVisitor), Err(Error::invalid_length(0, \"fewer elements in array\")));",
          "    assert_eq!(visit_array(vec![Value::Bool(true), Value::Bool(false)], TestVisitor), Err(Error::invalid_length(2, \"fewer elements in array\")));",
          "    assert_eq!(visit_array(vec![Value::Number(Number::from(42))], TestVisitor), Err(Error::invalid_length(1, \"fewer elements in array\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]