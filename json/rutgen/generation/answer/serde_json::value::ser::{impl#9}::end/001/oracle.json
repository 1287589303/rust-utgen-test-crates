[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"variant_name\");",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::Bool(true));",
          "    let variant = SerializeStructVariant { name, map };",
          "    let result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let value = result.unwrap();",
          "    assert_matches!(value, Value::Object(_));",
          "    let object = if let Value::Object(obj) = value { obj } else { panic!(\"Expected Value::Object\") };",
          "    assert_eq!(object.len(), 1);",
          "    assert!(object.contains_key(\"variant_name\"));",
          "    assert_matches!(object.get(\"variant_name\").unwrap(), Value::Object(ref inner_map));",
          "    assert_eq!(inner_map.len(), 1);",
          "    assert!(inner_map.contains_key(\"key1\"));",
          "    assert_matches!(inner_map.get(\"key1\").unwrap(), Value::Bool(true));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"variant_name\");",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::Bool(true));",
          "    let variant = SerializeStructVariant { name, map };",
          "    let result = variant.end();",
          "    assert!(result.is_ok());",
          "    let value = result.unwrap();",
          "    assert_matches!(value, Value::Object(_));",
          "    let object = if let Value::Object(obj) = value { obj } else { panic!(\"Expected Value::Object\") };",
          "    assert_eq!(object.len(), 1);",
          "    assert!(object.contains_key(\"variant_name\"));",
          "    assert_matches!(object.get(\"variant_name\").unwrap(), Value::Object(ref inner_map));",
          "    assert_eq!(inner_map.len(), 1);",
          "    assert!(inner_map.contains_key(\"key1\"));",
          "    assert_matches!(inner_map.get(\"key1\").unwrap(), Value::Bool(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"single_entry\");",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::Number(Number::from(42)));",
          "    let variant = SerializeStructVariant { name, map };",
          "    let result = variant.end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::Object(Map::new().insert(\"single_entry\".to_string(), Value::Object(map)));));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"single_entry\");",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::Number(Number::from(42)));",
          "    let variant = SerializeStructVariant { name, map };",
          "    let result = variant.end();",
          "    assert_eq!(result, Ok(Value::Object(Map::new().insert(\"single_entry\".to_string(), Value::Object(map)));));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = String::from(\"multiple_entries\");",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::String(String::from(\"value1\")));",
          "    map.insert(String::from(\"key2\"), Value::Array(vec![Value::Bool(false)]));",
          "    let variant = SerializeStructVariant { name, map };",
          "    let result = variant.end();",
          "}"
        ],
        "oracle": [
          "    let expected_value = Value::Object(Map::new().insert(String::from(\"multiple_entries\"), Value::Object(map.clone())));",
          "    assert_eq!(result, Ok(expected_value));"
        ],
        "code": [
          "{",
          "    let name = String::from(\"multiple_entries\");",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::String(String::from(\"value1\")));",
          "    map.insert(String::from(\"key2\"), Value::Array(vec![Value::Bool(false)]));",
          "    let variant = SerializeStructVariant { name, map };",
          "    let result = variant.end();",
          "    let expected_value = Value::Object(Map::new().insert(String::from(\"multiple_entries\"), Value::Object(map.clone())));",
          "    assert_eq!(result, Ok(expected_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]