[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(-1.0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Value::from(-1.0));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Value::from(-1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(0.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(3.14159);",
          "    assert_eq!(result, Ok(Value::from(3.14159)));",
          "    let result = serializer.serialize_f64(-2.71828);",
          "    assert_eq!(result, Ok(Value::from(-2.71828)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(Value::Number(_))));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(3.14159);",
          "    assert_eq!(result, Ok(Value::from(3.14159)));",
          "    let result = serializer.serialize_f64(-2.71828);",
          "    assert_eq!(result, Ok(Value::from(-2.71828)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(Value::Number(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::from(1.0)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert_eq!(result, Ok(Value::from(-1.0)));",
          "    let result = serializer.serialize_f64(3.14);",
          "    assert_eq!(result, Ok(Value::from(3.14)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(1.0);",
          "    assert_eq!(result, Ok(Value::from(1.0)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert_eq!(result, Ok(Value::from(-1.0)));",
          "    let result = serializer.serialize_f64(3.14);",
          "    assert_eq!(result, Ok(Value::from(3.14)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::MAX);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::MAX);",
          "    assert_eq!(result, Ok(Value::from(f64::MAX)));",
          "    let result = serializer.serialize_f64(f64::MIN);",
          "    assert_eq!(result, Ok(Value::from(f64::MIN)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert_eq!(result, Ok(Value::from(-1.0)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_ok() && result.unwrap() == Value::from(f64::NAN));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::MAX);",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::MAX);",
          "    assert_eq!(result, Ok(Value::from(f64::MAX)));",
          "    let result = serializer.serialize_f64(f64::MIN);",
          "    assert_eq!(result, Ok(Value::from(f64::MIN)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert_eq!(result, Ok(Value::from(-1.0)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_ok() && result.unwrap() == Value::from(f64::NAN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::MIN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::from(f64::MIN)));",
          "    let result = serializer.serialize_f64(f64::MAX);",
          "    assert_eq!(result, Ok(Value::from(f64::MAX)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert_eq!(result, Ok(Value::from(-1.0)));",
          "    let result = serializer.serialize_f64(12.34);",
          "    assert_eq!(result, Ok(Value::from(12.34)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::MIN);",
          "    assert_eq!(result, Ok(Value::from(f64::MIN)));",
          "    let result = serializer.serialize_f64(f64::MAX);",
          "    assert_eq!(result, Ok(Value::from(f64::MAX)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-1.0);",
          "    assert_eq!(result, Ok(Value::from(-1.0)));",
          "    let result = serializer.serialize_f64(12.34);",
          "    assert_eq!(result, Ok(Value::from(12.34)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    result = serializer.serialize_f64(12.34);",
          "    assert_eq!(result, Ok(Value::from(12.34)));",
          "    result = serializer.serialize_f64(-12.34);",
          "    assert_eq!(result, Ok(Value::from(-12.34)));",
          "    result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    result = serializer.serialize_f64(12.34);",
          "    assert_eq!(result, Ok(Value::from(12.34)));",
          "    result = serializer.serialize_f64(-12.34);",
          "    assert_eq!(result, Ok(Value::from(-12.34)));",
          "    result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-0.0);",
          "    assert_eq!(result, Ok(Value::from(-0.0)));",
          "    let result = serializer.serialize_f64(12.34);",
          "    assert_eq!(result, Ok(Value::from(12.34)));",
          "    let result = serializer.serialize_f64(-56.78);",
          "    assert_eq!(result, Ok(Value::from(-56.78)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::NEG_INFINITY)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(-0.0);",
          "    assert_eq!(result, Ok(Value::from(-0.0)));",
          "    let result = serializer.serialize_f64(12.34);",
          "    assert_eq!(result, Ok(Value::from(12.34)));",
          "    let result = serializer.serialize_f64(-56.78);",
          "    assert_eq!(result, Ok(Value::from(-56.78)));",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::from(f64::NAN)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(-f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(-f64::INFINITY)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(12.5);",
          "    assert_eq!(result, Ok(Value::from(12.5)));",
          "    let result = serializer.serialize_f64(-12.5);",
          "    assert_eq!(result, Ok(Value::from(-12.5)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_f64(f64::NAN);",
          "    assert_eq!(result, Ok(Value::from(f64::NAN)));",
          "    let result = serializer.serialize_f64(f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(f64::INFINITY)));",
          "    let result = serializer.serialize_f64(-f64::INFINITY);",
          "    assert_eq!(result, Ok(Value::from(-f64::INFINITY)));",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(Value::from(0.0)));",
          "    let result = serializer.serialize_f64(12.5);",
          "    assert_eq!(result, Ok(Value::from(12.5)));",
          "    let result = serializer.serialize_f64(-12.5);",
          "    assert_eq!(result, Ok(Value::from(-12.5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]