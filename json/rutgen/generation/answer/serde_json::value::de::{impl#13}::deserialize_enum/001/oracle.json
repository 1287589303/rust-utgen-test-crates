[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "}"
        ],
        "oracle": [
          "    let value = Value::Null;",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), serde::de::Error::invalid_type(Value::Null.unexpected(), &\"string or map\"));"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    let value = Value::Null;",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), serde::de::Error::invalid_type(Value::Null.unexpected(), &\"string or map\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "}"
        ],
        "oracle": [
          "    let value = Value::Bool(true);",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_type(value.unexpected(), &\"string or map\"));"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    let value = Value::Bool(true);",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_type(value.unexpected(), &\"string or map\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from(42));",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().unexpected(), value.unexpected());",
          "    assert_eq!(result.unwrap_err().expected(), \"string or map\");"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from(42));",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().unexpected(), value.unexpected());",
          "    assert_eq!(result.unwrap_err().expected(), \"string or map\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::String(\"item\".to_owned())]);",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(serde::de::Error::invalid_type(_, _))));",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type: sequence, expected string or map\");"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::String(\"item\".to_owned())]);",
          "    let result = value.deserialize_enum(\"TestEnum\", &[\"Variant1\", \"Variant2\"], ());",
          "    assert!(matches!(result, Err(serde::de::Error::invalid_type(_, _))));",
          "    assert_eq!(result.unwrap_err().to_string(), \"invalid type: sequence, expected string or map\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]