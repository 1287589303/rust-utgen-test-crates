[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    struct DummyFormatter;",
          "",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
          "",
          "    let _result = serializer.serialize_unit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    struct DummyFormatter;",
          "",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
          "",
          "    let _result = serializer.serialize_unit();",
          "    assert_eq!(_result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    struct DummyFormatter;",
          "",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
          "",
          "    let result = serializer.serialize_unit();",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_unit();",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    struct DummyFormatter;",
          "",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(0) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter } };",
          "",
          "    let result = serializer.serialize_unit();",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "    let result = serializer.serialize_unit();",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]