[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonSerializable;",
          "    ",
          "    let mut variant = SerializeStructVariant {",
          "        name: String::from(\"variant\"),",
          "        map: Map::new(),",
          "    };",
          "    ",
          "    let result = variant.serialize_field(\"\", &NonSerializable);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"Serialization error: NonSerializable type cannot be serialized.\");"
        ],
        "code": [
          "{",
          "    struct NonSerializable;",
          "    ",
          "    let mut variant = SerializeStructVariant {",
          "        name: String::from(\"variant\"),",
          "        map: Map::new(),",
          "    };",
          "    ",
          "    let result = variant.serialize_field(\"\", &NonSerializable);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"Serialization error: NonSerializable type cannot be serialized.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonSerializable;",
          "    ",
          "    let mut variant = SerializeStructVariant {",
          "        name: String::from(\"variant\"),",
          "        map: Map::new(),",
          "    };",
          "    ",
          "    let result = variant.serialize_field(std::ptr::null(), &NonSerializable);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::Serialization);"
        ],
        "code": [
          "{",
          "    struct NonSerializable;",
          "    ",
          "    let mut variant = SerializeStructVariant {",
          "        name: String::from(\"variant\"),",
          "        map: Map::new(),",
          "    };",
          "    ",
          "    let result = variant.serialize_field(std::ptr::null(), &NonSerializable);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::Serialization);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    trait NonSerializableTrait {}",
          "    ",
          "    struct NonSerializableStruct;",
          "    impl NonSerializableTrait for NonSerializableStruct {}",
          "    ",
          "    let mut variant = SerializeStructVariant {",
          "        name: String::from(\"variant\"),",
          "        map: Map::new(),",
          "    };",
          "    ",
          "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
          "}"
        ],
        "oracle": [
          "    let mut variant = SerializeStructVariant {",
          "    name: String::from(\"variant\"),",
          "    map: Map::new(),",
          "    };",
          "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    trait NonSerializableTrait {}",
          "    ",
          "    struct NonSerializableStruct;",
          "    impl NonSerializableTrait for NonSerializableStruct {}",
          "    ",
          "    let mut variant = SerializeStructVariant {",
          "        name: String::from(\"variant\"),",
          "        map: Map::new(),",
          "    };",
          "    ",
          "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
          "    let mut variant = SerializeStructVariant {",
          "    name: String::from(\"variant\"),",
          "    map: Map::new(),",
          "    };",
          "    let result = variant.serialize_field(\"key\", &NonSerializableStruct as &dyn NonSerializableTrait);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]