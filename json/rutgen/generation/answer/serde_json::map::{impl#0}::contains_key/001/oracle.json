[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = Map::new();",
          "    let key: &str = \"test_key\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(&key), false);"
        ],
        "code": [
          "{",
          "    let map = Map::new();",
          "    let key: &str = \"test_key\";",
          "    map.contains_key(&key);",
          "    assert_eq!(map.contains_key(&key), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true));",
          "    let key: &str = \"test_key\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(&key), true);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true));",
          "    let key: &str = \"test_key\";",
          "    map.contains_key(&key);",
          "    assert_eq!(map.contains_key(&key), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true));",
          "    let key: &str = \"absent_key\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(\"test_key\"), true);",
          "    assert_eq!(map.contains_key(\"absent_key\"), false);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true));",
          "    let key: &str = \"absent_key\";",
          "    map.contains_key(&key);",
          "    assert_eq!(map.contains_key(\"test_key\"), true);",
          "    assert_eq!(map.contains_key(\"absent_key\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"\".to_string(), Value::Null);",
          "    let key: &str = \"\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(&key), true);",
          "    assert_eq!(map.contains_key(&\"non_existing_key\"), false);",
          "    map.clear();",
          "    assert_eq!(map.contains_key(&key), false);",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true));",
          "    assert_eq!(map.contains_key(&\"test_key\"), true);",
          "    assert_eq!(map.contains_key(&\"test_key_not_found\"), false);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"\".to_string(), Value::Null);",
          "    let key: &str = \"\";",
          "    map.contains_key(&key);",
          "    assert_eq!(map.contains_key(&key), true);",
          "    assert_eq!(map.contains_key(&\"non_existing_key\"), false);",
          "    map.clear();",
          "    assert_eq!(map.contains_key(&key), false);",
          "    map.insert(\"test_key\".to_string(), Value::Bool(true));",
          "    assert_eq!(map.contains_key(&\"test_key\"), true);",
          "    assert_eq!(map.contains_key(&\"test_key_not_found\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let long_key = \"a\".repeat(1000);",
          "    map.insert(long_key.clone(), Value::Bool(true));",
          "    let key: &str = &long_key;",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert!(map.contains_key(&long_key));",
          "    assert!(!map.contains_key(\"non_existent_key\"));",
          "    assert!(map.contains_key(&key));",
          "    assert!(map.contains_key(&String::from(long_key.clone())));",
          "    assert!(!map.contains_key(&\"\"));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let long_key = \"a\".repeat(1000);",
          "    map.insert(long_key.clone(), Value::Bool(true));",
          "    let key: &str = &long_key;",
          "    map.contains_key(&key);",
          "    assert!(map.contains_key(&long_key));",
          "    assert!(!map.contains_key(\"non_existent_key\"));",
          "    assert!(map.contains_key(&key));",
          "    assert!(map.contains_key(&String::from(long_key.clone())));",
          "    assert!(!map.contains_key(&\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"!@#$%^&*()\".to_string(), Value::Bool(true));",
          "    let key: &str = \"!@#$%^&*()\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(&key), true);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"!@#$%^&*()\".to_string(), Value::Bool(true));",
          "    let key: &str = \"!@#$%^&*()\";",
          "    map.contains_key(&key);",
          "    assert_eq!(map.contains_key(&key), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let non_ascii_key = \"キー\".to_string();",
          "    map.insert(non_ascii_key.clone(), Value::Bool(true));",
          "    let key: &str = &non_ascii_key;",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert!(map.contains_key(&key));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let non_ascii_key = \"キー\".to_string();",
          "    map.insert(non_ascii_key.clone(), Value::Bool(true));",
          "    let key: &str = &non_ascii_key;",
          "    map.contains_key(&key);",
          "    assert!(map.contains_key(&key));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Bool(false));",
          "    let key: &str = \"key1\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(&\"key1\"), true);",
          "    assert_eq!(map.contains_key(&\"key2\"), true);",
          "    assert_eq!(map.contains_key(&\"non_existent_key\"), false);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Bool(false));",
          "    let key: &str = \"key1\";",
          "    map.contains_key(&key);",
          "    assert_eq!(map.contains_key(&\"key1\"), true);",
          "    assert_eq!(map.contains_key(&\"key2\"), true);",
          "    assert_eq!(map.contains_key(&\"non_existent_key\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"borrowed_key\".to_string(), Value::Bool(true));",
          "    let key: &String = &\"borrowed_key\".to_string();",
          "    map.contains_key(key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.contains_key(\"borrowed_key\"), true);",
          "    assert_eq!(map.contains_key(&\"borrowed_key\".to_string()), true);",
          "    assert_eq!(map.contains_key(\"non_existent_key\"), false);",
          "    assert_eq!(map.contains_key(&\"non_existent_key\".to_string()), false);",
          "    assert_eq!(map.contains_key(&String::from(\"borrowed_key\")), true);",
          "    assert_eq!(map.contains_key(&String::from(\"non_existent_key\")), false);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"borrowed_key\".to_string(), Value::Bool(true));",
          "    let key: &String = &\"borrowed_key\".to_string();",
          "    map.contains_key(key);",
          "    assert_eq!(map.contains_key(\"borrowed_key\"), true);",
          "    assert_eq!(map.contains_key(&\"borrowed_key\".to_string()), true);",
          "    assert_eq!(map.contains_key(\"non_existent_key\"), false);",
          "    assert_eq!(map.contains_key(&\"non_existent_key\".to_string()), false);",
          "    assert_eq!(map.contains_key(&String::from(\"borrowed_key\")), true);",
          "    assert_eq!(map.contains_key(&String::from(\"non_existent_key\")), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"slice_key\".to_string(), Value::Bool(true));",
          "    let key: &str = \"slice_key\";",
          "    map.contains_key(&key);",
          "}"
        ],
        "oracle": [
          "    assert!(map.contains_key(&key));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"slice_key\".to_string(), Value::Bool(true));",
          "    let key: &str = \"slice_key\";",
          "    map.contains_key(&key);",
          "    assert!(map.contains_key(&key));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]