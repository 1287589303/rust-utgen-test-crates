[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(-1),",
          "    };",
          "    let _ = number.is_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.is_i64(), true);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(-1),",
          "    };",
          "    let _ = number.is_i64();",
          "    assert_eq!(number.is_i64(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(i64::MIN),",
          "    };",
          "    let _ = number.is_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.is_i64(), true);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(i64::MIN),",
          "    };",
          "    let _ = number.is_i64();",
          "    assert_eq!(number.is_i64(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(-100),",
          "    };",
          "    let _ = number.is_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.is_i64(), true);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(-100),",
          "    };",
          "    let _ = number.is_i64();",
          "    assert_eq!(number.is_i64(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(-i64::MAX),",
          "    };",
          "    let _ = number.is_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.is_i64(), true);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::NegInt(-i64::MAX),",
          "    };",
          "    let _ = number.is_i64();",
          "    assert_eq!(number.is_i64(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]