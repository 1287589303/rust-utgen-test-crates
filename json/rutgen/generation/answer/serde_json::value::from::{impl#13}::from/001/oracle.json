[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let u = ();",
          "    let x: Value = u.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Null);",
          "    assert!(matches!(x, Value::Null));",
          "    let y: Value = Value::from(());",
          "    assert_eq!(y, Value::Null);",
          "    assert!(matches!(Value::from(()), Value::Null));"
        ],
        "code": [
          "{",
          "    let u = ();",
          "    let x: Value = u.into();",
          "    assert_eq!(x, Value::Null);",
          "    assert!(matches!(x, Value::Null));",
          "    let y: Value = Value::from(());",
          "    assert_eq!(y, Value::Null);",
          "    assert!(matches!(Value::from(()), Value::Null));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    // No invalid test case for `()`, as there's only a valid case.",
          "    let u = ();",
          "    let x: Value = u.into();",
          "}"
        ],
        "oracle": [
          "    let u = ();",
          "    let x: Value = u.into();",
          "    assert_eq!(x, Value::Null);"
        ],
        "code": [
          "{",
          "    // No invalid test case for `()`, as there's only a valid case.",
          "    let u = ();",
          "    let x: Value = u.into();",
          "    let u = ();",
          "    let x: Value = u.into();",
          "    assert_eq!(x, Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]