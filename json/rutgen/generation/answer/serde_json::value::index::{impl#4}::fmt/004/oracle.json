[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(0));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(0));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(42));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(42));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(-42));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(-42));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::MAX));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::MAX));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::MIN));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::MIN));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::NAN));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::NAN));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::INFINITY));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from(f64::INFINITY));",
          "    let type_instance = Type(&number_value);",
          "    let mut output = String::new();",
          "    let _ = type_instance.fmt(&mut output);",
          "    assert_eq!(output, \"number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]