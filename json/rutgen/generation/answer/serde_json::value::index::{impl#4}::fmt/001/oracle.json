[
  {
    "uses": [
      "use crate::map::Map;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::map::Map;",
          "    ",
          "    let object = Value::Object(Map::from_iter(vec![",
          "        (String::from(\"key1\"), Value::String(String::from(\"value1\"))),",
          "        (String::from(\"key2\"), Value::Bool(true)),",
          "    ]));",
          "    ",
          "    let type_instance = Type(&object);",
          "    let mut output = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut output);",
          "    let _ = type_instance.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"object\");"
        ],
        "code": [
          "{",
          "    use crate::map::Map;",
          "    ",
          "    let object = Value::Object(Map::from_iter(vec![",
          "        (String::from(\"key1\"), Value::String(String::from(\"value1\"))),",
          "        (String::from(\"key2\"), Value::Bool(true)),",
          "    ]));",
          "    ",
          "    let type_instance = Type(&object);",
          "    let mut output = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut output);",
          "    let _ = type_instance.fmt(formatter);",
          "    assert_eq!(output, \"object\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::map::Map;",
          "    ",
          "    let inner_object = Value::Object(Map::from_iter(vec![",
          "        (String::from(\"innerKey1\"), Value::Number(Number::from(1))),",
          "    ]));",
          "    ",
          "    let object = Value::Object(Map::from_iter(vec![",
          "        (String::from(\"outerKey\"), inner_object),",
          "    ]));",
          "    ",
          "    let type_instance = Type(&object);",
          "    let mut output = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut output);",
          "    let _ = type_instance.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"object\");"
        ],
        "code": [
          "{",
          "    use crate::map::Map;",
          "    ",
          "    let inner_object = Value::Object(Map::from_iter(vec![",
          "        (String::from(\"innerKey1\"), Value::Number(Number::from(1))),",
          "    ]));",
          "    ",
          "    let object = Value::Object(Map::from_iter(vec![",
          "        (String::from(\"outerKey\"), inner_object),",
          "    ]));",
          "    ",
          "    let type_instance = Type(&object);",
          "    let mut output = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut output);",
          "    let _ = type_instance.fmt(formatter);",
          "    assert_eq!(output, \"object\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::map::Map;",
          "    ",
          "    let object = Value::Object(Map::new());",
          "    ",
          "    let type_instance = Type(&object);",
          "    let mut output = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut output);",
          "    let _ = type_instance.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"object\");"
        ],
        "code": [
          "{",
          "    use crate::map::Map;",
          "    ",
          "    let object = Value::Object(Map::new());",
          "    ",
          "    let type_instance = Type(&object);",
          "    let mut output = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut output);",
          "    let _ = type_instance.fmt(formatter);",
          "    assert_eq!(output, \"object\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]