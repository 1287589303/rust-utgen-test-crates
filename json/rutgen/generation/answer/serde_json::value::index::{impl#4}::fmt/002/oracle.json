[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"array\");"
        ],
        "code": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.value, \"array\");"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "    assert_eq!(formatter.value, \"array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Number(Number::from(42)), Value::String(\"test\".to_string())]);",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"array\");"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Number(Number::from(42)), Value::String(\"test\".to_string())]);",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"array\");"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "    let typ = Type(&value);",
          "    let mut formatter = fmt::Formatter::default();",
          "    let _ = typ.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]