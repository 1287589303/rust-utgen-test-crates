[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_i128(-123).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(-123));"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_i128(-123).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, Some(-123));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_i128(i128::MAX).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(i64::MAX));",
          "    let value = Value::Number(Number::from_u128(10).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, Some(10));",
          "    let value = Value::Number(Number::from_f64(10.5).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_i128(i128::MAX).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, Some(i64::MAX));",
          "    let value = Value::Number(Number::from_u128(10).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, Some(10));",
          "    let value = Value::Number(Number::from_f64(10.5).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_u128(100).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(100));",
          "    assert_eq!(value.is_number(), true);",
          "    assert!(value.as_number().is_some());",
          "    assert!(value.is_i64());",
          "    assert_eq!(value.as_u64(), Some(100));",
          "    assert_eq!(value.as_f64(), Some(100.0));"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_u128(100).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, Some(100));",
          "    assert_eq!(value.is_number(), true);",
          "    assert!(value.as_number().is_some());",
          "    assert!(value.is_i64());",
          "    assert_eq!(value.as_u64(), Some(100));",
          "    assert_eq!(value.as_f64(), Some(100.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_f64(1234.56).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(1234));"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_f64(1234.56).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, Some(1234));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
          "    let result = value.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
          "    let result = value.as_i64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]