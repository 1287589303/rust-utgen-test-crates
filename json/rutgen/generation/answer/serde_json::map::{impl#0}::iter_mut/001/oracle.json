[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    let _iterator = map.iter_mut();",
          "}"
        ],
        "oracle": [
          "    let mut map: Map<String, Value> = Map::new();",
          "    let iterator = map.iter_mut();",
          "    assert!(std::mem::discriminant(&iterator) == std::mem::discriminant(&IterMut { iter: map.map.iter_mut() }));"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    let _iterator = map.iter_mut();",
          "    let mut map: Map<String, Value> = Map::new();",
          "    let iterator = map.iter_mut();",
          "    assert!(std::mem::discriminant(&iterator) == std::mem::discriminant(&IterMut { iter: map.map.iter_mut() }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let _iterator = map.iter_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iterator.iter.size_hint().0, 1);",
          "    assert!(_iterator.iter.next().is_some());",
          "    assert_eq!(_iterator.iter.next(), None);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.get(\"key1\"), Some(&Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let _iterator = map.iter_mut();",
          "    assert_eq!(_iterator.iter.size_hint().0, 1);",
          "    assert!(_iterator.iter.next().is_some());",
          "    assert_eq!(_iterator.iter.next(), None);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.get(\"key1\"), Some(&Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let _iterator = map.iter_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 10);",
          "    assert!(map.contains_key(\"key0\"));",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert!(map.contains_key(\"key2\"));",
          "    assert!(map.contains_key(\"key3\"));",
          "    assert!(map.contains_key(\"key4\"));",
          "    assert!(map.contains_key(\"key5\"));",
          "    assert!(map.contains_key(\"key6\"));",
          "    assert!(map.contains_key(\"key7\"));",
          "    assert!(map.contains_key(\"key8\"));",
          "    assert!(map.contains_key(\"key9\"));",
          "    let mut iter = map.iter_mut();",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.len(), 10);",
          "    assert!(map.values_mut().any(|v| matches!(v, Value::Number(n) if *n == 5)));",
          "    assert!(iter.next().is_some());",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.len(), 8);"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let _iterator = map.iter_mut();",
          "    assert_eq!(map.len(), 10);",
          "    assert!(map.contains_key(\"key0\"));",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert!(map.contains_key(\"key2\"));",
          "    assert!(map.contains_key(\"key3\"));",
          "    assert!(map.contains_key(\"key4\"));",
          "    assert!(map.contains_key(\"key5\"));",
          "    assert!(map.contains_key(\"key6\"));",
          "    assert!(map.contains_key(\"key7\"));",
          "    assert!(map.contains_key(\"key8\"));",
          "    assert!(map.contains_key(\"key9\"));",
          "    let mut iter = map.iter_mut();",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.len(), 10);",
          "    assert!(map.values_mut().any(|v| matches!(v, Value::Number(n) if *n == 5)));",
          "    assert!(iter.next().is_some());",
          "    assert!(iter.next().is_some());",
          "    assert_eq!(iter.len(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    map.insert(\"bool_key\".to_string(), Value::Bool(false));",
          "    map.insert(\"number_key\".to_string(), Value::Number(100.into()));",
          "    map.insert(\"string_key\".to_string(), Value::String(\"a string\".to_string()));",
          "    map.insert(\"array_key\".to_string(), Value::Array(vec![Value::String(\"elem\".to_string())]));",
          "    map.insert(\"object_key\".to_string(), Value::Object(Map::new()));",
          "    let _iterator = map.iter_mut();",
          "}"
        ],
        "oracle": [
          "    let map: Map<String, Value> = Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    map.insert(\"bool_key\".to_string(), Value::Bool(false));",
          "    map.insert(\"number_key\".to_string(), Value::Number(100.into()));",
          "    map.insert(\"string_key\".to_string(), Value::String(\"a string\".to_string()));",
          "    map.insert(\"array_key\".to_string(), Value::Array(vec![Value::String(\"elem\".to_string())]));",
          "    map.insert(\"object_key\".to_string(), Value::Object(Map::new()));",
          "    let iterator = map.iter_mut();",
          "    assert_eq!(iterator.iter.count(), 6);",
          "    assert!(iterator.iter_mut().next().is_some());",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Null);",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Bool(false));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Number(100.into()));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::String(\"a string\".to_string()));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Array(vec![Value::String(\"elem\".to_string())]));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Object(Map::new()));"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    map.insert(\"bool_key\".to_string(), Value::Bool(false));",
          "    map.insert(\"number_key\".to_string(), Value::Number(100.into()));",
          "    map.insert(\"string_key\".to_string(), Value::String(\"a string\".to_string()));",
          "    map.insert(\"array_key\".to_string(), Value::Array(vec![Value::String(\"elem\".to_string())]));",
          "    map.insert(\"object_key\".to_string(), Value::Object(Map::new()));",
          "    let _iterator = map.iter_mut();",
          "    let map: Map<String, Value> = Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    map.insert(\"bool_key\".to_string(), Value::Bool(false));",
          "    map.insert(\"number_key\".to_string(), Value::Number(100.into()));",
          "    map.insert(\"string_key\".to_string(), Value::String(\"a string\".to_string()));",
          "    map.insert(\"array_key\".to_string(), Value::Array(vec![Value::String(\"elem\".to_string())]));",
          "    map.insert(\"object_key\".to_string(), Value::Object(Map::new()));",
          "    let iterator = map.iter_mut();",
          "    assert_eq!(iterator.iter.count(), 6);",
          "    assert!(iterator.iter_mut().next().is_some());",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Null);",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Bool(false));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Number(100.into()));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::String(\"a string\".to_string()));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Array(vec![Value::String(\"elem\".to_string())]));",
          "    assert!(iterator.iter_mut().any(|(_, v)| *v == Value::Object(Map::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::with_capacity(100);",
          "    for i in 0..100 {",
          "        map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let _iterator = map.iter_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iterator.iter.len(), 100);",
          "    assert_eq!(_iterator.iter_mut().next().unwrap(), (&\"key0\".to_string(), &Value::Number(0.into())));",
          "    assert_eq!(_iterator.iter_mut().nth(1).unwrap(), (&\"key1\".to_string(), &Value::Number(1.into())));",
          "    assert_eq!(_iterator.iter_mut().nth(99).unwrap(), (&\"key99\".to_string(), &Value::Number(99.into())));",
          "    assert!(_iterator.iter_mut().next().is_some());",
          "    assert!(!_iterator.iter_mut().next_back().is_none());"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::with_capacity(100);",
          "    for i in 0..100 {",
          "        map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let _iterator = map.iter_mut();",
          "    assert_eq!(_iterator.iter.len(), 100);",
          "    assert_eq!(_iterator.iter_mut().next().unwrap(), (&\"key0\".to_string(), &Value::Number(0.into())));",
          "    assert_eq!(_iterator.iter_mut().nth(1).unwrap(), (&\"key1\".to_string(), &Value::Number(1.into())));",
          "    assert_eq!(_iterator.iter_mut().nth(99).unwrap(), (&\"key99\".to_string(), &Value::Number(99.into())));",
          "    assert!(_iterator.iter_mut().next().is_some());",
          "    assert!(!_iterator.iter_mut().next_back().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]