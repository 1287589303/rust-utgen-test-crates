[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 42 });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), expected_value);",
          "    assert!(matches!(number_value.deserialize_any(visitor), Ok(V::Number(_))));",
          "    assert!(number_value.deserialize_any(visitor).is_ok());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 42 });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), expected_value);",
          "    assert!(matches!(number_value.deserialize_any(visitor), Ok(V::Number(_))));",
          "    assert!(number_value.deserialize_any(visitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: -42 });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), expected_value);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: -42 });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 0 });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert!(matches!(number_value.deserialize_any(visitor), Ok(_)));",
          "    assert!(matches!(number_value.deserialize_any(visitor), Err(_)) == false);",
          "    assert!(visitor.is_called_on_bool() == false);",
          "    assert!(visitor.is_called_on_unit() == false);",
          "    assert!(visitor.is_called_on_string() == false);",
          "    assert!(visitor.is_called_on_array() == false);",
          "    assert!(visitor.is_called_on_object() == false);",
          "    assert!(visitor.visit_number_called_once() == true);",
          "    assert!(visitor.visit_number_args() == (Number { n: 0 },));"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 0 });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert!(matches!(number_value.deserialize_any(visitor), Ok(_)));",
          "    assert!(matches!(number_value.deserialize_any(visitor), Err(_)) == false);",
          "    assert!(visitor.is_called_on_bool() == false);",
          "    assert!(visitor.is_called_on_unit() == false);",
          "    assert!(visitor.is_called_on_string() == false);",
          "    assert!(visitor.is_called_on_array() == false);",
          "    assert!(visitor.is_called_on_object() == false);",
          "    assert!(visitor.visit_number_called_once() == true);",
          "    assert!(visitor.visit_number_args() == (Number { n: 0 },));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: 12.5 });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert!(matches!(number_value.deserialize_any(visitor).unwrap(), V::Value));",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(Number { n: 12.5 }).unwrap());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: 12.5 });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor).is_ok(), true);",
          "    assert!(matches!(number_value.deserialize_any(visitor).unwrap(), V::Value));",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(Number { n: 12.5 }).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: -12.5 });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_bool(false));",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_string(\"\"));",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_unit());",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_seq(&mut SeqDeserializer::new(vec![])));",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_string(\"non-empty\"));"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: -12.5 });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_bool(false));",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_string(\"\"));",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_unit());",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_seq(&mut SeqDeserializer::new(vec![])));",
          "    assert_eq!(number_value.deserialize_any(visitor), visitor.visit_string(\"non-empty\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    visitor.visit_bool(any_value);",
          "    visitor.visit_unit();",
          "    visitor.visit_string(any_string);",
          "    visit_array(any_array, visitor);",
          "    v.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap(), expected_value);",
          "    assert!(result.is_err());",
          "    assert_eq!(error_code, ErrorCode::InvalidInput);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    number_value.deserialize_any(visitor);",
          "    visitor.visit_bool(any_value);",
          "    visitor.visit_unit();",
          "    visitor.visit_string(any_string);",
          "    visit_array(any_array, visitor);",
          "    v.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap(), expected_value);",
          "    assert!(result.is_err());",
          "    assert_eq!(error_code, ErrorCode::InvalidInput);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap_err().code(), ErrorCode::Invalid);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap_err().to_string(), \"invalid value: Infinity, expected a valid number\");"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap_err().code(), ErrorCode::Invalid);",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap_err().to_string(), \"invalid value: Infinity, expected a valid number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NEG_INFINITY });",
          "    number_value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true); // Expect error for NEG_INFINITY",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true); // Expect error for INFINITY",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true); // Expect error for NaN",
          "    let number_value = Value::Number(Number { n: 0.0 });",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(0.0)); // Expect successful visit with 0.0",
          "    let number_value = Value::Number(Number { n: 12.5 });",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(12.5)); // Expect successful visit with 12.5",
          "    let number_value = Value::Number(Number { n: -12.5 });",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(-12.5)); // Expect successful visit with -12.5"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number { n: f64::NEG_INFINITY });",
          "    number_value.deserialize_any(visitor);",
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true); // Expect error for NEG_INFINITY",
          "    let number_value = Value::Number(Number { n: f64::INFINITY });",
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true); // Expect error for INFINITY",
          "    let number_value = Value::Number(Number { n: f64::NAN });",
          "    assert_eq!(number_value.deserialize_any(visitor).is_err(), true); // Expect error for NaN",
          "    let number_value = Value::Number(Number { n: 0.0 });",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(0.0)); // Expect successful visit with 0.0",
          "    let number_value = Value::Number(Number { n: 12.5 });",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(12.5)); // Expect successful visit with 12.5",
          "    let number_value = Value::Number(Number { n: -12.5 });",
          "    assert_eq!(number_value.deserialize_any(visitor).unwrap(), visitor.visit_number(-12.5)); // Expect successful visit with -12.5",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]