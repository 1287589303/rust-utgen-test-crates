[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MyVisitor;",
      "",
      "impl<'de> Visitor<'de> for MyVisitor {",
      "    type Value = ();",
      "",
      "    fn visit_unit(self) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_bool(self, _: bool) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_string(self, _: String) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_seq<V>(self, _: &mut V) -> Result<Self::Value, Error>",
      "    where",
      "        V: SeqAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_map<V>(self, _: &mut V) -> Result<Self::Value, Error>",
      "    where",
      "        V: MapAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(Vec::new());",
          "    let _ = value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(true)]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Number(Number { n: 1 })]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string())]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Object(Map::new())]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Null])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Number(Number { n: 2 })])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::String(\"nested\".to_string())])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());"
        ],
        "code": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(Vec::new());",
          "    let _ = value.deserialize_any(visitor);",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(true)]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Number(Number { n: 1 })]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string())]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Object(Map::new())]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Null])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Number(Number { n: 2 })])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    let value = Value::Array(vec![Value::Array(vec![Value::String(\"nested\".to_string())])]);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let _ = value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(value.deserialize_any(MyVisitor {}).is_ok());",
          "    assert_eq!(visitor.visit_seq(&mut SeqDeserializer::new(vec![Value::Bool(true)])), Ok(()));",
          "    assert!(matches!(value, Value::Array(_)));"
        ],
        "code": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let _ = value.deserialize_any(visitor);",
          "    assert!(value.deserialize_any(MyVisitor {}).is_ok());",
          "    assert_eq!(visitor.visit_seq(&mut SeqDeserializer::new(vec![Value::Bool(true)])), Ok(()));",
          "    assert!(matches!(value, Value::Array(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![",
          "        Value::Null,",
          "        Value::Bool(false),",
          "        Value::Number(Number { n: 42 }),",
          "        Value::String(String::from(\"test\")),",
          "    ]);",
          "    let _ = value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MyVisitor {};",
          "    let value_array = Value::Array(vec![Value::Null, Value::Bool(false), Value::Number(Number { n: 42 }), Value::String(String::from(\"test\"))]);",
          "    assert_eq!(value_array.deserialize_any(visitor).is_ok(), true);",
          "    let visitor = MyVisitor {};",
          "    let value_empty_array = Value::Array(vec![]);",
          "    assert_eq!(value_empty_array.deserialize_any(visitor).is_err(), true);",
          "    let visitor = MyVisitor {};",
          "    let value_with_nested_array = Value::Array(vec![Value::Array(vec![Value::Bool(true)])]);",
          "    assert_eq!(value_with_nested_array.deserialize_any(visitor).is_ok(), true);",
          "    let visitor = MyVisitor {};",
          "    let value_with_object = Value::Array(vec![Value::Object(Map::new())]);",
          "    assert_eq!(value_with_object.deserialize_any(visitor).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![",
          "        Value::Null,",
          "        Value::Bool(false),",
          "        Value::Number(Number { n: 42 }),",
          "        Value::String(String::from(\"test\")),",
          "    ]);",
          "    let _ = value.deserialize_any(visitor);",
          "    let visitor = MyVisitor {};",
          "    let value_array = Value::Array(vec![Value::Null, Value::Bool(false), Value::Number(Number { n: 42 }), Value::String(String::from(\"test\"))]);",
          "    assert_eq!(value_array.deserialize_any(visitor).is_ok(), true);",
          "    let visitor = MyVisitor {};",
          "    let value_empty_array = Value::Array(vec![]);",
          "    assert_eq!(value_empty_array.deserialize_any(visitor).is_err(), true);",
          "    let visitor = MyVisitor {};",
          "    let value_with_nested_array = Value::Array(vec![Value::Array(vec![Value::Bool(true)])]);",
          "    assert_eq!(value_with_nested_array.deserialize_any(visitor).is_ok(), true);",
          "    let visitor = MyVisitor {};",
          "    let value_with_object = Value::Array(vec![Value::Object(Map::new())]);",
          "    assert_eq!(value_with_object.deserialize_any(visitor).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![",
          "        Value::Array(vec![Value::Bool(true)]),",
          "        Value::Array(vec![Value::Number(Number { n: 3.14 })]),",
          "    ]);",
          "    let _ = value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)])]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Number(Number { n: 3.14 })])]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Object(Map::new())]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Null]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![",
          "        Value::Array(vec![Value::Bool(true)]),",
          "        Value::Array(vec![Value::Number(Number { n: 3.14 })]),",
          "    ]);",
          "    let _ = value.deserialize_any(visitor);",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)])]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Number(Number { n: 3.14 })])]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Object(Map::new())]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array(vec![Value::Null]);",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array((0..1000).map(|_| Value::Number(Number { n: 1 })).collect());",
          "    let _ = value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(value.deserialize_any(MyVisitor {}).is_ok());",
          "    assert_eq!(value.deserialize_any(MyVisitor {}).unwrap(), ());",
          "    let value_obj = Value::Array(vec![Value::Number(Number { n: 1 }), Value::Number(Number { n: 2 })]);",
          "    assert!(value_obj.deserialize_any(MyVisitor {}).is_ok());",
          "    let value_empty = Value::Array(vec![]);",
          "    assert!(value_empty.deserialize_any(MyVisitor {}).is_ok());",
          "    let value_mixed = Value::Array(vec![Value::Bool(true), Value::String(\"test\".to_string())]);",
          "    assert!(value_mixed.deserialize_any(MyVisitor {}).is_ok());"
        ],
        "code": [
          "{",
          "    let visitor = MyVisitor {};",
          "    let value = Value::Array((0..1000).map(|_| Value::Number(Number { n: 1 })).collect());",
          "    let _ = value.deserialize_any(visitor);",
          "    assert!(value.deserialize_any(MyVisitor {}).is_ok());",
          "    assert_eq!(value.deserialize_any(MyVisitor {}).unwrap(), ());",
          "    let value_obj = Value::Array(vec![Value::Number(Number { n: 1 }), Value::Number(Number { n: 2 })]);",
          "    assert!(value_obj.deserialize_any(MyVisitor {}).is_ok());",
          "    let value_empty = Value::Array(vec![]);",
          "    assert!(value_empty.deserialize_any(MyVisitor {}).is_ok());",
          "    let value_mixed = Value::Array(vec![Value::Bool(true), Value::String(\"test\".to_string())]);",
          "    assert!(value_mixed.deserialize_any(MyVisitor {}).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]