[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MyVisitor;",
      "",
      "impl<'de> Visitor<'de> for MyVisitor {",
      "    type Value = ();",
      "    ",
      "    fn visit_unit(self) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "    ",
      "    fn visit_bool(self, _: bool) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "    ",
      "    fn visit_borrowed_str(self, _: &'de str) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_seq<V>(self, _: V) -> Result<Self::Value, Error>",
      "    where",
      "        V: SeqAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "    ",
      "    fn visit_map<V>(self, _: V) -> Result<Self::Value, Error>",
      "    where",
      "        V: MapAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_i64(42).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_i64(0).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_i64(-1).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_i64(100).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_f64(42.5).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_i64(42).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_i64(0).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_i64(-1).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_i64(100).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "    let value = Value::Number(Number { n: N::from_f64(42.5).unwrap() });",
          "    assert_eq!(value.deserialize_any(visitor), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(3.14).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Number(Number { n: N::from_f64(3.14).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(-1.23).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NEG_INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(3.14).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    let value = Value::Number(Number { n: N::from_f64(3.14).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(-1.23).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NEG_INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_i64(0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_any(visitor).is_ok(), true);",
          "    assert!(matches!(value, Value::Number(_)));",
          "    assert!(matches!(visitor.visit_bool(true), Ok(())));",
          "    assert!(matches!(visitor.visit_borrowed_str(\"test\"), Ok(())));",
          "    assert!(matches!(visitor.visit_seq(&mut seq), Ok(())));",
          "    assert!(matches!(visitor.visit_map(&mut map), Ok(())));",
          "    assert!(visitor.visit_unit().is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_i64(0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    assert_eq!(value.deserialize_any(visitor).is_ok(), true);",
          "    assert!(matches!(value, Value::Number(_)));",
          "    assert!(matches!(visitor.visit_bool(true), Ok(())));",
          "    assert!(matches!(visitor.visit_borrowed_str(\"test\"), Ok(())));",
          "    assert!(matches!(visitor.visit_seq(&mut seq), Ok(())));",
          "    assert!(matches!(visitor.visit_map(&mut map), Ok(())));",
          "    assert!(visitor.visit_unit().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(-42.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    assert_eq!(value.deserialize_any(visitor).unwrap(), ());",
          "    let number_value = Value::Number(Number { n: N::from_f64(-42.0).unwrap() });",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert!(visitor.visit_bool(false).is_ok());",
          "    assert!(visitor.visit_borrowed_str(\"test\").is_ok());",
          "    assert!(visitor.visit_unit().is_ok());",
          "    assert!(visitor.visit_seq(MySeqAccess).is_ok());",
          "    assert!(visitor.visit_map(MyMapAccess).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(-42.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    assert_eq!(value.deserialize_any(visitor).unwrap(), ());",
          "    let number_value = Value::Number(Number { n: N::from_f64(-42.0).unwrap() });",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert!(visitor.visit_bool(false).is_ok());",
          "    assert!(visitor.visit_borrowed_str(\"test\").is_ok());",
          "    assert!(visitor.visit_unit().is_ok());",
          "    assert!(visitor.visit_seq(MySeqAccess).is_ok());",
          "    assert!(visitor.visit_map(MyMapAccess).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_err());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(-42.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(3.14).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_err());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(-42.0).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(3.14).unwrap() });",
          "    let visitor = MyVisitor;",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NEG_INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(12.34).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(-12.34).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NEG_INFINITY).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(12.34).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "    ",
          "    let value = Value::Number(Number { n: N::from_f64(-12.34).unwrap() });",
          "    assert!(value.deserialize_any(visitor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(-f64::INFINITY).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(123.456).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let visitor = MyVisitor;",
          "    value.deserialize_any(visitor);",
          "    let value = Value::Number(Number { n: N::from_f64(f64::NAN).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(f64::INFINITY).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(-f64::INFINITY).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(0.0).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Number(Number { n: N::from_f64(123.456).unwrap() });",
          "    let result = value.deserialize_any(visitor);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]