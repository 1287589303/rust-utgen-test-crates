[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct TestVisitor;",
      "",
      "impl TestVisitor {",
      "    fn new() -> Self {",
      "        TestVisitor",
      "    }",
      "}",
      "",
      "impl<'de> serde::de::Visitor<'de> for TestVisitor {",
      "    type Value = ();",
      "",
      "    fn visit_unit(self) -> Result<Self::Value, serde::de::Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_bool(self, _: bool) -> Result<Self::Value, serde::de::Error> {",
      "        unreachable!()",
      "    }",
      "",
      "    fn visit_borrowed_str(self, _: &'de str) -> Result<Self::Value, serde::de::Error> {",
      "        unreachable!()",
      "    }",
      "",
      "    fn visit_seq<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
      "    where",
      "        V: serde::de::SeqAccess<'de>,",
      "    {",
      "        unreachable!()",
      "    }",
      "",
      "    fn visit_map<V>(self, _: V) -> Result<Self::Value, serde::de::Error>",
      "    where",
      "        V: serde::de::MapAccess<'de>,",
      "    {",
      "        unreachable!()",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = serde_json::Value::Null;",
          "    let visitor = TestVisitor::new();",
          "    let result = value.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let value = serde_json::Value::Null;",
          "    let visitor = TestVisitor::new();",
          "    let result = value.deserialize_any(visitor);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]