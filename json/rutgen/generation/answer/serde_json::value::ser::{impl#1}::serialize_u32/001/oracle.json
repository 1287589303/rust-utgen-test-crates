[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serialize_u32(0).unwrap(), Value::Number(0.into()));",
          "    assert!(serialize_u32(u32::MAX).is_ok());",
          "    assert_eq!(serialize_u32(1).unwrap(), Value::Number(1.into()));",
          "    assert_eq!(serialize_u32(4294967295).unwrap(), Value::Number(4294967295.into()));",
          "    assert!(serialize_u32(5).is_ok());",
          "    assert_eq!(serialize_u32(123).unwrap(), Value::Number(123.into()));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(0);",
          "    assert_eq!(serialize_u32(0).unwrap(), Value::Number(0.into()));",
          "    assert!(serialize_u32(u32::MAX).is_ok());",
          "    assert_eq!(serialize_u32(1).unwrap(), Value::Number(1.into()));",
          "    assert_eq!(serialize_u32(4294967295).unwrap(), Value::Number(4294967295.into()));",
          "    assert!(serialize_u32(5).is_ok());",
          "    assert_eq!(serialize_u32(123).unwrap(), Value::Number(123.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(1);",
          "}"
        ],
        "oracle": [
          "    let result = serializer.serialize_u32(1); assert!(result.is_ok()); let value = result.unwrap(); assert_eq!(value, Value::Number(1.into())); let result = serializer.serialize_u32(0); assert!(result.is_ok()); let value = result.unwrap(); assert_eq!(value, Value::Number(0.into())); let result = serializer.serialize_u32(u32::MAX); assert!(result.is_ok()); let value = result.unwrap(); assert_eq!(value, Value::Number(u32::MAX.into()));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(1);",
          "    let result = serializer.serialize_u32(1); assert!(result.is_ok()); let value = result.unwrap(); assert_eq!(value, Value::Number(1.into())); let result = serializer.serialize_u32(0); assert!(result.is_ok()); let value = result.unwrap(); assert_eq!(value, Value::Number(0.into())); let result = serializer.serialize_u32(u32::MAX); assert!(result.is_ok()); let value = result.unwrap(); assert_eq!(value, Value::Number(u32::MAX.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(4_294_967_295);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u32(4_294_967_295).unwrap(), Value::Number(4_294_967_295.into()));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(4_294_967_295);",
          "    assert_eq!(serializer.serialize_u32(4_294_967_295).unwrap(), Value::Number(4_294_967_295.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(2_147_483_647);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u32(2_147_483_647).unwrap(), Value::Number(2_147_483_647u64.into()));",
          "    assert!(serializer.serialize_u32(0).is_ok());",
          "    assert!(serializer.serialize_u32(1).is_ok());",
          "    assert!(serializer.serialize_u32(u32::MAX).is_ok());"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _ = serializer.serialize_u32(2_147_483_647);",
          "    assert_eq!(serializer.serialize_u32(2_147_483_647).unwrap(), Value::Number(2_147_483_647u64.into()));",
          "    assert!(serializer.serialize_u32(0).is_ok());",
          "    assert!(serializer.serialize_u32(1).is_ok());",
          "    assert!(serializer.serialize_u32(u32::MAX).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]