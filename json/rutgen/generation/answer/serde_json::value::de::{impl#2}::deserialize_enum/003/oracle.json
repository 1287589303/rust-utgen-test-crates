[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MockVisitor;",
      "",
      "impl<'de> Visitor<'de> for MockVisitor {",
      "    type Value = ();",
      "",
      "    fn visit_enum<V>(",
      "        self,",
      "        _: V,",
      "    ) -> Result<Self::Value, serde::de::Error>",
      "    where",
      "        V: VariantAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "    ",
      "    forward_to_deserialize_any!{",
      "        bool",
      "        i8",
      "        i16",
      "        i32",
      "        i64",
      "        u8",
      "        u16",
      "        u32",
      "        u64",
      "        f32",
      "        f64",
      "        char",
      "        str",
      "        string",
      "        bytes",
      "        byte_buf",
      "        option",
      "        seq",
      "        map",
      "        struct",
      "        unit",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    let visitor = MockVisitor;",
          "    let _result = empty_map.deserialize_enum(\"test\", &[\"variant1\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    let visitor = MockVisitor;",
          "    let result = empty_map.deserialize_enum(\"test\", &[\"variant1\"], visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));"
        ],
        "code": [
          "{",
          "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    let visitor = MockVisitor;",
          "    let _result = empty_map.deserialize_enum(\"test\", &[\"variant1\"], visitor);",
          "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    let visitor = MockVisitor;",
          "    let result = empty_map.deserialize_enum(\"test\", &[\"variant1\"], visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let single_entry_map: Map<String, Value> = Map {",
          "        map: MapImpl::from_iter(vec![(String::from(\"variant1\"), Value::Bool(true))]),",
          "    };",
          "    let visitor = MockVisitor;",
          "    let _result = single_entry_map.deserialize_enum(\"test\", &[\"variant1\"], visitor);",
          "}"
        ],
        "oracle": [
          "    single_entry_map.deserialize_enum(\"test\", &[\"variant1\"], visitor).unwrap_err() == serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\")"
        ],
        "code": [
          "{",
          "    let single_entry_map: Map<String, Value> = Map {",
          "        map: MapImpl::from_iter(vec![(String::from(\"variant1\"), Value::Bool(true))]),",
          "    };",
          "    let visitor = MockVisitor;",
          "    let _result = single_entry_map.deserialize_enum(\"test\", &[\"variant1\"], visitor);",
          "    single_entry_map.deserialize_enum(\"test\", &[\"variant1\"], visitor).unwrap_err() == serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]