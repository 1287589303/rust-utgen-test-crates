[
  {
    "uses": [
      "use crate::value::Value;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::value::Value;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::String(\"value1\".to_owned()));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    ",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::String(\"value1\".to_owned()));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    let result = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));"
        ],
        "code": [
          "{",
          "    use crate::value::Value;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::String(\"value1\".to_owned()));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    ",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::String(\"value1\".to_owned()));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    let result = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::value::Value;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    map.insert(\"key2\".to_owned(), Value::Number(Number::from(10)));",
          "",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    map.insert(\"key2\".to_owned(), Value::Number(Number::from(10)));",
          "    let result = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "    let mut map_single_key = Map::new();",
          "    map_single_key.insert(\"variant\".to_owned(), Value::Bool(true));",
          "    let result_single = map_single_key.deserialize_enum(\"SingleKeyEnum\", &[\"variant\"], TestVisitor);",
          "    assert!(result_single.is_err());",
          "    assert_eq!(result_single.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "    let result_empty = Map::new().deserialize_enum(\"EmptyEnum\", &[], TestVisitor);",
          "    assert!(result_empty.is_err());",
          "    assert_eq!(result_empty.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));"
        ],
        "code": [
          "{",
          "    use crate::value::Value;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    map.insert(\"key2\".to_owned(), Value::Number(Number::from(10)));",
          "",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    map.insert(\"key2\".to_owned(), Value::Number(Number::from(10)));",
          "    let result = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "    let mut map_single_key = Map::new();",
          "    map_single_key.insert(\"variant\".to_owned(), Value::Bool(true));",
          "    let result_single = map_single_key.deserialize_enum(\"SingleKeyEnum\", &[\"variant\"], TestVisitor);",
          "    assert!(result_single.is_err());",
          "    assert_eq!(result_single.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "    let result_empty = Map::new().deserialize_enum(\"EmptyEnum\", &[], TestVisitor);",
          "    assert!(result_empty.is_err());",
          "    assert_eq!(result_empty.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::value::Value;",
          "",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Null);",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    ",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Null);",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));"
        ],
        "code": [
          "{",
          "    use crate::value::Value;",
          "",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Null);",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    ",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Null);",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value2\".to_owned()));",
          "    let result: Result<(), _> = map.deserialize_enum(\"TestEnum\", &[\"key1\", \"key2\"], TestVisitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), serde::de::Error::invalid_value(Unexpected::Map, &\"map with a single key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]