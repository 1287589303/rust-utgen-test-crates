[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = std::f64::NAN;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _result = map_key_serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    let value: f64 = std::f64::NAN;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer { writer, formatter };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f64(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
        ],
        "code": [
          "{",
          "    let value: f64 = std::f64::NAN;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _result = map_key_serializer.serialize_f64(value);",
          "    let value: f64 = std::f64::NAN;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer { writer, formatter };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f64(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = std::f64::INFINITY;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _result = map_key_serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().code(), ErrorCode::FloatKeyMustBeFinite);"
        ],
        "code": [
          "{",
          "    let value: f64 = std::f64::INFINITY;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _result = map_key_serializer.serialize_f64(value);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().code(), ErrorCode::FloatKeyMustBeFinite);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: f64 = std::f64::NEG_INFINITY;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _result = map_key_serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    let value: f64 = std::f64::NEG_INFINITY;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer { writer, formatter };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f64(value);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let value: f64 = std::f64::NEG_INFINITY;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _result = map_key_serializer.serialize_f64(value);",
          "    let value: f64 = std::f64::NEG_INFINITY;",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter {};",
          "    let serializer = Serializer { writer, formatter };",
          "    let mut map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "    let result = map_key_serializer.serialize_f64(value);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]