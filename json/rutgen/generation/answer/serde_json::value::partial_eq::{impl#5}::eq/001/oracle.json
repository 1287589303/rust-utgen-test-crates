[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let string_value = String::from(\"equal string\");",
          "    let other_value = Value::String(String::from(\"equal string\"));",
          "    string_value.eq(&other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string_value.eq(&other_value), true);"
        ],
        "code": [
          "{",
          "    let string_value = String::from(\"equal string\");",
          "    let other_value = Value::String(String::from(\"equal string\"));",
          "    string_value.eq(&other_value);",
          "    assert_eq!(string_value.eq(&other_value), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let string_value = String::from(\"not equal\");",
          "    let other_value = Value::String(String::from(\"different string\"));",
          "    string_value.eq(&other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string_value.eq(&other_value), false);"
        ],
        "code": [
          "{",
          "    let string_value = String::from(\"not equal\");",
          "    let other_value = Value::String(String::from(\"different string\"));",
          "    string_value.eq(&other_value);",
          "    assert_eq!(string_value.eq(&other_value), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let string_value = String::from(\"special!@#$%^&*()\");",
          "    let other_value = Value::String(String::from(\"special!@#$%^&*()\"));",
          "    string_value.eq(&other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string_value.eq(&Value::String(String::from(\"special!@#$%^&*()\"))), true);"
        ],
        "code": [
          "{",
          "    let string_value = String::from(\"special!@#$%^&*()\");",
          "    let other_value = Value::String(String::from(\"special!@#$%^&*()\"));",
          "    string_value.eq(&other_value);",
          "    assert_eq!(string_value.eq(&Value::String(String::from(\"special!@#$%^&*()\"))), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let string_value = String::from(\" leading and trailing \");",
          "    let other_value = Value::String(String::from(\" leading and trailing \"));",
          "    string_value.eq(&other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string_value.eq(&other_value), true);",
          "    assert_eq!(string_value.as_str(), \" leading and trailing \");",
          "    assert_eq!(other_value, Value::String(String::from(\" leading and trailing \")));",
          "    assert_eq!(string_value.eq(&Value::String(String::from(\" different string \"))), false);",
          "    assert_eq!(string_value.eq(&Value::Null), false);",
          "    assert_eq!(string_value.eq(&Value::Bool(true)), false);",
          "    assert_eq!(string_value.eq(&Value::Number(Number::from(12))), false);",
          "    assert_eq!(string_value.eq(&Value::Array(vec![Value::String(String::from(\"item\"))])), false);",
          "    assert_eq!(string_value.eq(&Value::Object(Map::new())), false);"
        ],
        "code": [
          "{",
          "    let string_value = String::from(\" leading and trailing \");",
          "    let other_value = Value::String(String::from(\" leading and trailing \"));",
          "    string_value.eq(&other_value);",
          "    assert_eq!(string_value.eq(&other_value), true);",
          "    assert_eq!(string_value.as_str(), \" leading and trailing \");",
          "    assert_eq!(other_value, Value::String(String::from(\" leading and trailing \")));",
          "    assert_eq!(string_value.eq(&Value::String(String::from(\" different string \"))), false);",
          "    assert_eq!(string_value.eq(&Value::Null), false);",
          "    assert_eq!(string_value.eq(&Value::Bool(true)), false);",
          "    assert_eq!(string_value.eq(&Value::Number(Number::from(12))), false);",
          "    assert_eq!(string_value.eq(&Value::Array(vec![Value::String(String::from(\"item\"))])), false);",
          "    assert_eq!(string_value.eq(&Value::Object(Map::new())), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let string_value = String::from(\"non-empty\");",
          "    let other_value = Value::String(String::from(\"\"));",
          "    string_value.eq(&other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string_value.eq(&other_value), false);"
        ],
        "code": [
          "{",
          "    let string_value = String::from(\"non-empty\");",
          "    let other_value = Value::String(String::from(\"\"));",
          "    string_value.eq(&other_value);",
          "    assert_eq!(string_value.eq(&other_value), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let string_value = String::from(\"valid utf-8\");",
          "    let other_value = Value::String(String::from_utf8_lossy(&[0xff]).to_string());",
          "    string_value.eq(&other_value);",
          "}"
        ],
        "oracle": [
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"valid utf-8\");",
          "    let other_value = Value::String(String::from(\"valid utf-8\"));",
          "    assert!(string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"\");",
          "    let other_value = Value::String(String::from(\"\"));",
          "    assert!(string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"another string\");",
          "    let other_value = Value::String(String::from(\"different string\"));",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Null;",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Bool(true);",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Number(Number::from(1));",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Object(BTreeMap::new());",
          "    assert!(!string_value.eq(&other_value));"
        ],
        "code": [
          "{",
          "    let string_value = String::from(\"valid utf-8\");",
          "    let other_value = Value::String(String::from_utf8_lossy(&[0xff]).to_string());",
          "    string_value.eq(&other_value);",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"valid utf-8\");",
          "    let other_value = Value::String(String::from(\"valid utf-8\"));",
          "    assert!(string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"\");",
          "    let other_value = Value::String(String::from(\"\"));",
          "    assert!(string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"another string\");",
          "    let other_value = Value::String(String::from(\"different string\"));",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Null;",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Bool(true);",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Number(Number::from(1));",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    assert!(!string_value.eq(&other_value));",
          "    ",
          "    let string_value = String::from(\"test\");",
          "    let other_value = Value::Object(BTreeMap::new());",
          "    assert!(!string_value.eq(&other_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]