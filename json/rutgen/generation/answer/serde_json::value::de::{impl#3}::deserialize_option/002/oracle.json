[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct TestVisitor {}",
      "",
      "impl<'de> Visitor<'de> for TestVisitor {",
      "    type Value = ();",
      "    ",
      "    fn visit_none(self) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_some<T>(self, _: T) -> Result<Self::Value, Error> {",
      "        panic!(\"Expected visit_none instead of visit_some\");",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let visitor = TestVisitor {};",
          "    let _result = value.deserialize_option(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(()));",
          "    assert!(matches!(value, Value::Null));",
          "    assert!(std::panic::catch_unwind(|| { value.deserialize_option(visitor); }).is_ok());",
          "    assert!(std::panic::catch_unwind(|| { visitor.visit_some(Value::Null); }).is_err());",
          "    assert_eq!(visitor.visit_none(), Ok(()));"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let visitor = TestVisitor {};",
          "    let _result = value.deserialize_option(visitor);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(matches!(value, Value::Null));",
          "    assert!(std::panic::catch_unwind(|| { value.deserialize_option(visitor); }).is_ok());",
          "    assert!(std::panic::catch_unwind(|| { visitor.visit_some(Value::Null); }).is_err());",
          "    assert_eq!(visitor.visit_none(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]