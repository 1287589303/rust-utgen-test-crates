[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number(0u64.into())));",
          "    let _result = serializer.serialize_u8(255);",
          "    assert_eq!(_result, Ok(Value::Number(255u64.into())));",
          "    let _result = serializer.serialize_u8(1);",
          "    assert_eq!(_result, Ok(Value::Number(1u64.into())));",
          "    let _result = serializer.serialize_u8(128);",
          "    assert_eq!(_result, Ok(Value::Number(128u64.into())));",
          "    let _result = serializer.serialize_u8(100);",
          "    assert_eq!(_result, Ok(Value::Number(100u64.into())));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(0);",
          "    assert_eq!(_result, Ok(Value::Number(0u64.into())));",
          "    let _result = serializer.serialize_u8(255);",
          "    assert_eq!(_result, Ok(Value::Number(255u64.into())));",
          "    let _result = serializer.serialize_u8(1);",
          "    assert_eq!(_result, Ok(Value::Number(1u64.into())));",
          "    let _result = serializer.serialize_u8(128);",
          "    assert_eq!(_result, Ok(Value::Number(128u64.into())));",
          "    let _result = serializer.serialize_u8(100);",
          "    assert_eq!(_result, Ok(Value::Number(100u64.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number(255.into())));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(255);",
          "    assert_eq!(_result, Ok(Value::Number(255.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number(128.into())));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(128);",
          "    assert_eq!(_result, Ok(Value::Number(128.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(1);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u8(1);",
          "    assert!(result.is_ok());",
          "    let value = result.unwrap();",
          "    assert_eq!(value, Value::Number(1u64.into()));",
          "    let result_zero = serializer.serialize_u8(0);",
          "    assert!(result_zero.is_ok());",
          "    let value_zero = result_zero.unwrap();",
          "    assert_eq!(value_zero, Value::Number(0u64.into()));",
          "    let result_max = serializer.serialize_u8(u8::MAX);",
          "    assert!(result_max.is_ok());",
          "    let value_max = result_max.unwrap();",
          "    assert_eq!(value_max, Value::Number(u8::MAX as u64.into()));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(1);",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u8(1);",
          "    assert!(result.is_ok());",
          "    let value = result.unwrap();",
          "    assert_eq!(value, Value::Number(1u64.into()));",
          "    let result_zero = serializer.serialize_u8(0);",
          "    assert!(result_zero.is_ok());",
          "    let value_zero = result_zero.unwrap();",
          "    assert_eq!(value_zero, Value::Number(0u64.into()));",
          "    let result_max = serializer.serialize_u8(u8::MAX);",
          "    assert!(result_max.is_ok());",
          "    let value_max = result_max.unwrap();",
          "    assert_eq!(value_max, Value::Number(u8::MAX as u64.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(254);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number(254.into())));",
          "    let result_zero = serializer.serialize_u8(0);",
          "    assert_eq!(result_zero, Ok(Value::Number(0.into())));",
          "    let result_one = serializer.serialize_u8(1);",
          "    assert_eq!(result_one, Ok(Value::Number(1.into())));",
          "    let result_max = serializer.serialize_u8(u8::MAX);",
          "    assert_eq!(result_max, Ok(Value::Number(u8::MAX.into())));",
          "    let result_invalid = serializer.serialize_u8(256);",
          "    assert!(result_invalid.is_err());"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_u8(254);",
          "    assert_eq!(_result, Ok(Value::Number(254.into())));",
          "    let result_zero = serializer.serialize_u8(0);",
          "    assert_eq!(result_zero, Ok(Value::Number(0.into())));",
          "    let result_one = serializer.serialize_u8(1);",
          "    assert_eq!(result_one, Ok(Value::Number(1.into())));",
          "    let result_max = serializer.serialize_u8(u8::MAX);",
          "    assert_eq!(result_max, Ok(Value::Number(u8::MAX.into())));",
          "    let result_invalid = serializer.serialize_u8(256);",
          "    assert!(result_invalid.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]