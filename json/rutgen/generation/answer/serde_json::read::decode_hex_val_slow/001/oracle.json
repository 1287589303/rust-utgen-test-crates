[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'0';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    let expected = Some(val - b'0');",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'0';",
          "    let _result = decode_hex_val_slow(val);",
          "    let expected = Some(val - b'0');",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'1';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    let val: u8 = b'1';",
          "    let expected: Option<u8> = Some(val - b'0');",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'1';",
          "    let _result = decode_hex_val_slow(val);",
          "    let val: u8 = b'1';",
          "    let expected: Option<u8> = Some(val - b'0');",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'2';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(2));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'2';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'3';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    _result.unwrap() == Some(val - b'0')"
        ],
        "code": [
          "{",
          "    let val: u8 = b'3';",
          "    let _result = decode_hex_val_slow(val);",
          "    _result.unwrap() == Some(val - b'0')",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'4';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    let val: u8 = b'4';",
          "    let expected: Option<u8> = Some(val - b'0');",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'4';",
          "    let _result = decode_hex_val_slow(val);",
          "    let val: u8 = b'4';",
          "    let expected: Option<u8> = Some(val - b'0');",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'5';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(5));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'5';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'6';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(6));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'6';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'7';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(7));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'7';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'8';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    _result.assert_eq(Some(val - b'0'));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'8';",
          "    let _result = decode_hex_val_slow(val);",
          "    _result.assert_eq(Some(val - b'0'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'9';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(b'9' - b'0'));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'9';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(b'9' - b'0'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]