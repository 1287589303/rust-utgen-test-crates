[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'A';",
          "    let result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() >= 10);",
          "    assert!(result.unwrap() <= 15);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'A';",
          "    let result = decode_hex_val_slow(val);",
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() >= 10);",
          "    assert!(result.unwrap() <= 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'B';",
          "    let result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(b'B' - b'A' + 10));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'B';",
          "    let result = decode_hex_val_slow(val);",
          "    assert_eq!(result, Some(b'B' - b'A' + 10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'C';",
          "    let result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    let expected = Some(val - b'A' + 10);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'C';",
          "    let result = decode_hex_val_slow(val);",
          "    let expected = Some(val - b'A' + 10);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'D';",
          "    let result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() >= 10 && result.unwrap() <= 15);",
          "    assert_eq!(result, Some(13));",
          "    assert!(matches!(result, Some(_)));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'D';",
          "    let result = decode_hex_val_slow(val);",
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() >= 10 && result.unwrap() <= 15);",
          "    assert_eq!(result, Some(13));",
          "    assert!(matches!(result, Some(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'E';",
          "    let result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert_eq!(result, Some(14));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(_)));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'E';",
          "    let result = decode_hex_val_slow(val);",
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert_eq!(result, Some(14));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'F';",
          "    let result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert_eq!(result, Some(15));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 15);",
          "    assert!(result.is_some() && result.unwrap() >= 0 && result.unwrap() <= 15);",
          "    assert_eq!(decode_hex_val_slow(b'G'), None);",
          "    assert_eq!(decode_hex_val_slow(b'a'), None);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'F';",
          "    let result = decode_hex_val_slow(val);",
          "    assert_eq!(result, Some(val - b'A' + 10));",
          "    assert_eq!(result, Some(15));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 15);",
          "    assert!(result.is_some() && result.unwrap() >= 0 && result.unwrap() <= 15);",
          "    assert_eq!(decode_hex_val_slow(b'G'), None);",
          "    assert_eq!(decode_hex_val_slow(b'a'), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]