[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'a';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    let val: u8 = b'a';",
          "    let expected: Option<u8> = Some(val - b'a' + 10);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let val: u8 = b'a';",
          "    let _result = decode_hex_val_slow(val);",
          "    let val: u8 = b'a';",
          "    let expected: Option<u8> = Some(val - b'a' + 10);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'b';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(val - b'a' + 10));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'b';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(val - b'a' + 10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'c';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(_result, Some(val - b'a' + 10));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'c';",
          "    let _result = decode_hex_val_slow(val);",
          "    plaintext",
          "    assert_eq!(_result, Some(val - b'a' + 10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'd';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(val - b'a' + 10));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'd';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(val - b'a' + 10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'e';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(val - b'a' + 10));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'e';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(val - b'a' + 10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val: u8 = b'f';",
          "    let _result = decode_hex_val_slow(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(15));"
        ],
        "code": [
          "{",
          "    let val: u8 = b'f';",
          "    let _result = decode_hex_val_slow(val);",
          "    assert_eq!(_result, Some(15));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]