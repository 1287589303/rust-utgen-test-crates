[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "        ",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            todo!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            todo!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            todo!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            todo!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {",
          "            todo!()",
          "        }",
          "    }",
          "",
          "    let data = b\" -12345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678\";",
          "",
          "    let mut reader = TestReader { data: data.to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    deserializer.do_deserialize_i128(Visitor {});",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.parse_whitespace(), Ok(Some(b'-')));",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    assert_eq!(buf.parse::<i128>(), Err(_));",
          "    assert_eq!(deserializer.do_deserialize_i128(visitor), Err(deserializer.error(ErrorCode::NumberOutOfRange)));"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "        ",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            todo!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            todo!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            todo!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            todo!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {",
          "            todo!()",
          "        }",
          "    }",
          "",
          "    let data = b\" -12345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678912345678\";",
          "",
          "    let mut reader = TestReader { data: data.to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    deserializer.do_deserialize_i128(Visitor {});",
          "    assert_eq!(deserializer.parse_whitespace(), Ok(Some(b'-')));",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    assert_eq!(buf.parse::<i128>(), Err(_));",
          "    assert_eq!(deserializer.do_deserialize_i128(visitor), Err(deserializer.error(ErrorCode::NumberOutOfRange)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "        ",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            todo!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            todo!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            todo!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            todo!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {",
          "            todo!()",
          "        }",
          "    }",
          "",
          "    let data = b\" -123\";",
          "",
          "    let mut reader = TestReader { data: data.to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    deserializer.do_deserialize_i128(Visitor {});",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.parse_whitespace(), Ok(Some(b'-')));",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    assert_eq!(buf.parse::<i128>(), Err(_));",
          "    assert_eq!(deserializer.do_deserialize_i128(visitor), Err(deserializer.error(ErrorCode::NumberOutOfRange)));"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "        ",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                let byte = self.data[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.data.len() {",
          "                Ok(Some(self.data[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 1, column: self.position as u32 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            todo!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&'s mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            todo!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            todo!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            todo!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {",
          "            todo!()",
          "        }",
          "    }",
          "",
          "    let data = b\" -123\";",
          "",
          "    let mut reader = TestReader { data: data.to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    deserializer.do_deserialize_i128(Visitor {});",
          "    assert_eq!(deserializer.parse_whitespace(), Ok(Some(b'-')));",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    assert_eq!(buf.parse::<i128>(), Err(_));",
          "    assert_eq!(deserializer.do_deserialize_i128(visitor), Err(deserializer.error(ErrorCode::NumberOutOfRange)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]