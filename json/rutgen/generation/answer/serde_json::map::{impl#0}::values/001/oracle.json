[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = Map::<String, Value>::new();",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    let map = Map::<String, Value>::new();",
          "    let values = map.values();",
          "    assert_eq!(values.iter, map.map.values());"
        ],
        "code": [
          "{",
          "    let map = Map::<String, Value>::new();",
          "    let values = map.values();",
          "    let map = Map::<String, Value>::new();",
          "    let values = map.values();",
          "    assert_eq!(values.iter, map.map.values());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Null));"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    let values = map.values();",
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Null));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::<String, Value>::new();",
          "    let result = map.values();",
          "    assert_eq!(result.iter.count(), 0);",
          "    map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let result_after_insert = map.values();",
          "    assert_eq!(result_after_insert.iter.count(), 1);",
          "    assert_eq!(result_after_insert.iter.next(), Some(&Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let values = map.values();",
          "    let mut map = Map::<String, Value>::new();",
          "    let result = map.values();",
          "    assert_eq!(result.iter.count(), 0);",
          "    map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let result_after_insert = map.values();",
          "    assert_eq!(result_after_insert.iter.count(), 1);",
          "    assert_eq!(result_after_insert.iter.next(), Some(&Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key3\".to_string(), Value::Number(serde_json::Number::from(42)));",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Number(serde_json::Number::from(42))));",
          "    assert!(values.iter.next().is_some());",
          "    assert!(values.iter.next().is_none());",
          "    assert_eq!(values.iter.count(), 1);",
          "    assert!(!values.iter.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key3\".to_string(), Value::Number(serde_json::Number::from(42)));",
          "    let values = map.values();",
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Number(serde_json::Number::from(42))));",
          "    assert!(values.iter.next().is_some());",
          "    assert!(values.iter.next().is_none());",
          "    assert_eq!(values.iter.count(), 1);",
          "    assert!(!values.iter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key4\".to_string(), Value::String(\"a string\".to_string()));",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    assert!(values.iter.count() == 1);",
          "    assert!(matches!(values.iter.next(), Some(&Value::String(ref s)) if s == \"a string\"));"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key4\".to_string(), Value::String(\"a string\".to_string()));",
          "    let values = map.values();",
          "    assert!(values.iter.count() == 1);",
          "    assert!(matches!(values.iter.next(), Some(&Value::String(ref s)) if s == \"a string\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key5\".to_string(), Value::Array(vec![Value::String(\"element\".to_string())]));",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    let map = Map::<String, Value>::new();",
          "    assert_eq!(map.values().iter.len(), 0);",
          "    map.insert(\"key5\".to_string(), Value::Array(vec![Value::String(\"element\".to_string())]));",
          "    let values = map.values();",
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Array(vec![Value::String(\"element\".to_string())])));"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    map.insert(\"key5\".to_string(), Value::Array(vec![Value::String(\"element\".to_string())]));",
          "    let values = map.values();",
          "    let map = Map::<String, Value>::new();",
          "    assert_eq!(map.values().iter.len(), 0);",
          "    map.insert(\"key5\".to_string(), Value::Array(vec![Value::String(\"element\".to_string())]));",
          "    let values = map.values();",
          "    assert_eq!(values.iter.len(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Array(vec![Value::String(\"element\".to_string())])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    let mut object_map = Map::<String, Value>::new();",
          "    object_map.insert(\"inner_key\".to_string(), Value::String(\"inner_value\".to_string()));",
          "    map.insert(\"key6\".to_string(), Value::Object(object_map));",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    let values = map.values();",
          "    assert_eq!(values.iter.count(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Object(object_map)));",
          "    assert!(matches!(values.iter.clone().next(), Some(Value::Object(_))));",
          "    assert!(values.iter.clone().last().is_some());",
          "    assert!(values.iter.count() > 0);",
          "    assert!(values.iter.len() == 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Object(object_map)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::new();",
          "    let mut object_map = Map::<String, Value>::new();",
          "    object_map.insert(\"inner_key\".to_string(), Value::String(\"inner_value\".to_string()));",
          "    map.insert(\"key6\".to_string(), Value::Object(object_map));",
          "    let values = map.values();",
          "    let values = map.values();",
          "    assert_eq!(values.iter.count(), 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Object(object_map)));",
          "    assert!(matches!(values.iter.clone().next(), Some(Value::Object(_))));",
          "    assert!(values.iter.clone().last().is_some());",
          "    assert!(values.iter.count() > 0);",
          "    assert!(values.iter.len() == 1);",
          "    assert_eq!(values.iter.next(), Some(&Value::Object(object_map)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"preserve_order\")]"
        ],
        "prefix": [
          "{",
          "    let mut map = Map::<String, Value>::with_capacity(5);",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(3.14)));",
          "    let values = map.values();",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::<String, Value>::with_capacity(5);",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(3.14)));",
          "    let values = map.values();",
          "    assert_eq!(values.iter.count(), 2);",
          "    assert_eq!(values.iter.next(), Some(&Value::Bool(true)));",
          "    assert_eq!(values.iter.next(), Some(&Value::Number(serde_json::Number::from(3.14))));"
        ],
        "code": [
          "{",
          "    let mut map = Map::<String, Value>::with_capacity(5);",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(3.14)));",
          "    let values = map.values();",
          "    let mut map = Map::<String, Value>::with_capacity(5);",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(3.14)));",
          "    let values = map.values();",
          "    assert_eq!(values.iter.count(), 2);",
          "    assert_eq!(values.iter.next(), Some(&Value::Bool(true)));",
          "    assert_eq!(values.iter.next(), Some(&Value::Number(serde_json::Number::from(3.14))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]