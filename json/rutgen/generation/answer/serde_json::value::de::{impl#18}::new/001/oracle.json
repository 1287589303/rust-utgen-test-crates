[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_map = Map { map: MapImpl::new() };",
          "    let deserializer = MapRefDeserializer::new(&empty_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.iter, empty_map.into_iter());",
          "    assert!(deserializer.value.is_none());"
        ],
        "code": [
          "{",
          "    let empty_map = Map { map: MapImpl::new() };",
          "    let deserializer = MapRefDeserializer::new(&empty_map);",
          "    assert_eq!(deserializer.iter, empty_map.into_iter());",
          "    assert!(deserializer.value.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let single_entry_map = Map { ",
          "        map: MapImpl::from_iter(vec![(\"key1\".to_string(), Value::Null)]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&single_entry_map);",
          "}"
        ],
        "oracle": [
          "    let single_entry_map = Map { map: MapImpl::from_iter(vec![(\"key1\".to_string(), Value::Null)]) };",
          "    let deserializer = MapRefDeserializer::new(&single_entry_map);",
          "    assert_eq!(deserializer.value, None);",
          "    assert!(deserializer.iter.len() == 1);",
          "    assert!(matches!(deserializer.iter.next(), Some((key, Value::Null)) if key == \"key1\"));"
        ],
        "code": [
          "{",
          "    let single_entry_map = Map { ",
          "        map: MapImpl::from_iter(vec![(\"key1\".to_string(), Value::Null)]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&single_entry_map);",
          "    let single_entry_map = Map { map: MapImpl::from_iter(vec![(\"key1\".to_string(), Value::Null)]) };",
          "    let deserializer = MapRefDeserializer::new(&single_entry_map);",
          "    assert_eq!(deserializer.value, None);",
          "    assert!(deserializer.iter.len() == 1);",
          "    assert!(matches!(deserializer.iter.next(), Some((key, Value::Null)) if key == \"key1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let multiple_entries_map = Map { ",
          "        map: MapImpl::from_iter(vec![",
          "            (\"key1\".to_string(), Value::Bool(true)), ",
          "            (\"key2\".to_string(), Value::Number(Number::from(10))), ",
          "            (\"key3\".to_string(), Value::String(\"test\".to_string()))",
          "        ]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&multiple_entries_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.iter.len(), 3);",
          "    assert!(deserializer.value.is_none());",
          "    assert_eq!(deserializer.iter.next(), Some((&\"key1\".to_string(), &Value::Bool(true))));",
          "    assert_eq!(deserializer.iter.next(), Some((&\"key2\".to_string(), &Value::Number(Number::from(10)))));",
          "    assert_eq!(deserializer.iter.next(), Some((&\"key3\".to_string(), &Value::String(\"test\".to_string()))));"
        ],
        "code": [
          "{",
          "    let multiple_entries_map = Map { ",
          "        map: MapImpl::from_iter(vec![",
          "            (\"key1\".to_string(), Value::Bool(true)), ",
          "            (\"key2\".to_string(), Value::Number(Number::from(10))), ",
          "            (\"key3\".to_string(), Value::String(\"test\".to_string()))",
          "        ]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&multiple_entries_map);",
          "    assert_eq!(deserializer.iter.len(), 3);",
          "    assert!(deserializer.value.is_none());",
          "    assert_eq!(deserializer.iter.next(), Some((&\"key1\".to_string(), &Value::Bool(true))));",
          "    assert_eq!(deserializer.iter.next(), Some((&\"key2\".to_string(), &Value::Number(Number::from(10)))));",
          "    assert_eq!(deserializer.iter.next(), Some((&\"key3\".to_string(), &Value::String(\"test\".to_string()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array_value_map = Map { ",
          "        map: MapImpl::from_iter(vec![",
          "            (\"key1\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]))",
          "        ]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&array_value_map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.value, None);",
          "    assert!(deserializer.iter.len() == 1);",
          "    assert!(matches!(deserializer.iter.next(), Some((key, Value::Array(_))) if key == \"key1\"));"
        ],
        "code": [
          "{",
          "    let array_value_map = Map { ",
          "        map: MapImpl::from_iter(vec![",
          "            (\"key1\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]))",
          "        ]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&array_value_map);",
          "    assert_eq!(deserializer.value, None);",
          "    assert!(deserializer.iter.len() == 1);",
          "    assert!(matches!(deserializer.iter.next(), Some((key, Value::Array(_))) if key == \"key1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let object_value_map = Map { ",
          "        map: MapImpl::from_iter(vec![",
          "            (\"key1\".to_string(), Value::Object(Map::from_iter(vec![",
          "                (\"nested_key\".to_string(), Value::Number(Number::from(2)))",
          "            ])))",
          "        ]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&object_value_map);",
          "}"
        ],
        "oracle": [
          "    let object_value_map = Map { map: MapImpl::from_iter(vec![(\"key1\".to_string(), Value::Object(Map::from_iter(vec![(\"nested_key\".to_string(), Value::Number(Number::from(2)))].into_iter())))])) };",
          "    let deserializer = MapRefDeserializer::new(&object_value_map);",
          "    assert_eq!(deserializer.value, None);",
          "    assert!(deserializer.iter.len() > 0);",
          "    assert_eq!(deserializer.iter.next().unwrap().0, \"key1\");",
          "    assert!(matches!(deserializer.iter.next().unwrap().1, Value::Object(_)));"
        ],
        "code": [
          "{",
          "    let object_value_map = Map { ",
          "        map: MapImpl::from_iter(vec![",
          "            (\"key1\".to_string(), Value::Object(Map::from_iter(vec![",
          "                (\"nested_key\".to_string(), Value::Number(Number::from(2)))",
          "            ])))",
          "        ]) ",
          "    };",
          "    let deserializer = MapRefDeserializer::new(&object_value_map);",
          "    let object_value_map = Map { map: MapImpl::from_iter(vec![(\"key1\".to_string(), Value::Object(Map::from_iter(vec![(\"nested_key\".to_string(), Value::Number(Number::from(2)))].into_iter())))])) };",
          "    let deserializer = MapRefDeserializer::new(&object_value_map);",
          "    assert_eq!(deserializer.value, None);",
          "    assert!(deserializer.iter.len() > 0);",
          "    assert_eq!(deserializer.iter.next().unwrap().0, \"key1\");",
          "    assert!(matches!(deserializer.iter.next().unwrap().1, Value::Object(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]