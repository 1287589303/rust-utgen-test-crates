[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = Map::new();",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), serializer.serialize_map(Some(0)).unwrap());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(result.unwrap_err(), None);"
        ],
        "code": [
          "{",
          "    let map = Map::new();",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), serializer.serialize_map(Some(0)).unwrap());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(result.unwrap_err(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(42)));",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"expected serializable value\");",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(42)));",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"expected serializable value\");",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_string(), Value::Null);",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), serde_json::json!({\"key\": null}));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key\"));",
          "    assert!(map.get(\"key\").is_some());",
          "    assert_eq!(map.get(\"key\").unwrap(), &Value::Null);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_string(), Value::Null);",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), serde_json::json!({\"key\": null}));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key\"));",
          "    assert!(map.get(\"key\").is_some());",
          "    assert_eq!(map.get(\"key\").unwrap(), &Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_string(), Value::String(\"value\".to_string()));",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap_err(), serde_json::ser::Error::custom(\"No entries to serialize.\"));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_string(), Value::String(\"value\".to_string()));",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap_err(), serde_json::ser::Error::custom(\"No entries to serialize.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), serde_json::to_string(&map).unwrap());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(\"key\").unwrap(), &Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key\".to_string(), Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
          "    let serializer = serde_json::Serializer::new(serde_json::ser::PrettyFormatter::new());",
          "    let result = map.serialize(serializer);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), serde_json::to_string(&map).unwrap());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(\"key\").unwrap(), &Value::Array(vec![Value::String(\"item1\".to_string()), Value::String(\"item2\".to_string())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]