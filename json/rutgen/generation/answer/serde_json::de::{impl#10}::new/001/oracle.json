[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let read_data: Vec<u8> = vec![10, 20, 30];",
          "    let deserializer = Deserializer {",
          "        read: read_data,",
          "        scratch: vec![],",
          "        remaining_depth: 5,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let mut deserializer_ref = deserializer;",
          "    let map_access = MapAccess::new(&mut deserializer_ref);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_access.first, true);",
          "    assert_eq!(map_access.de.read, read_data);",
          "    assert!(map_access.de.scratch.is_empty());",
          "    assert_eq!(map_access.de.remaining_depth, 5);",
          "    #[cfg(feature = \"float_roundtrip\")] assert_eq!(map_access.de.single_precision, false);",
          "    #[cfg(feature = \"unbounded_depth\")] assert_eq!(map_access.de.disable_recursion_limit, false);"
        ],
        "code": [
          "{",
          "    let read_data: Vec<u8> = vec![10, 20, 30];",
          "    let deserializer = Deserializer {",
          "        read: read_data,",
          "        scratch: vec![],",
          "        remaining_depth: 5,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "    ",
          "    let mut deserializer_ref = deserializer;",
          "    let map_access = MapAccess::new(&mut deserializer_ref);",
          "    assert_eq!(map_access.first, true);",
          "    assert_eq!(map_access.de.read, read_data);",
          "    assert!(map_access.de.scratch.is_empty());",
          "    assert_eq!(map_access.de.remaining_depth, 5);",
          "    #[cfg(feature = \"float_roundtrip\")] assert_eq!(map_access.de.single_precision, false);",
          "    #[cfg(feature = \"unbounded_depth\")] assert_eq!(map_access.de.disable_recursion_limit, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let read_data: Vec<u8> = vec![1, 2, 3];",
          "    let deserializer = Deserializer {",
          "        read: read_data,",
          "        scratch: vec![],",
          "        remaining_depth: 1,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let mut deserializer_ref = deserializer;",
          "    let map_access = MapAccess::new(&mut deserializer_ref);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_access.de, &mut deserializer_ref);",
          "    assert!(map_access.first);",
          "    assert!(std::mem::size_of_val(&map_access) > 0);"
        ],
        "code": [
          "{",
          "    let read_data: Vec<u8> = vec![1, 2, 3];",
          "    let deserializer = Deserializer {",
          "        read: read_data,",
          "        scratch: vec![],",
          "        remaining_depth: 1,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let mut deserializer_ref = deserializer;",
          "    let map_access = MapAccess::new(&mut deserializer_ref);",
          "    assert_eq!(map_access.de, &mut deserializer_ref);",
          "    assert!(map_access.first);",
          "    assert!(std::mem::size_of_val(&map_access) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let read_data: Vec<u8> = vec![4, 5, 6];",
          "    let deserializer = Deserializer {",
          "        read: read_data,",
          "        scratch: vec![],",
          "        remaining_depth: 255,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let mut deserializer_ref = deserializer;",
          "    let map_access = MapAccess::new(&mut deserializer_ref);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_access.first, true);",
          "    assert!(std::ptr::eq(map_access.de, &mut deserializer_ref));"
        ],
        "code": [
          "{",
          "    let read_data: Vec<u8> = vec![4, 5, 6];",
          "    let deserializer = Deserializer {",
          "        read: read_data,",
          "        scratch: vec![],",
          "        remaining_depth: 255,",
          "        #[cfg(feature = \"float_roundtrip\")]",
          "        single_precision: false,",
          "        #[cfg(feature = \"unbounded_depth\")]",
          "        disable_recursion_limit: false,",
          "    };",
          "",
          "    let mut deserializer_ref = deserializer;",
          "    let map_access = MapAccess::new(&mut deserializer_ref);",
          "    assert_eq!(map_access.first, true);",
          "    assert!(std::ptr::eq(map_access.de, &mut deserializer_ref));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]