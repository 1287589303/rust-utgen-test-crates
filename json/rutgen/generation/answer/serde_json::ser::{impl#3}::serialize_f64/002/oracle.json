[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "    impl TestFormatter {",
          "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        writer: Vec<u8>,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl TestSerializer {",
          "        fn new() -> Self {",
          "            Self {",
          "                writer: Vec::new(),",
          "                formatter: TestFormatter,",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::NAN;",
          "    let _ = serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::INFINITY;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    ",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::NAN;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "    impl TestFormatter {",
          "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        writer: Vec<u8>,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl TestSerializer {",
          "        fn new() -> Self {",
          "            Self {",
          "                writer: Vec::new(),",
          "                formatter: TestFormatter,",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::NAN;",
          "    let _ = serializer.serialize_f64(value);",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::INFINITY;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    ",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::NAN;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "    impl TestFormatter {",
          "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        writer: Vec<u8>,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl TestSerializer {",
          "        fn new() -> Self {",
          "            Self {",
          "                writer: Vec::new(),",
          "                formatter: TestFormatter,",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::INFINITY;",
          "    let _ = serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    let value = f64::INFINITY;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "    ",
          "    let value = f64::NAN;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "    ",
          "    let value = 1.0;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    assert!(serializer.writer.len() > 0);"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "    impl TestFormatter {",
          "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        writer: Vec<u8>,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl TestSerializer {",
          "        fn new() -> Self {",
          "            Self {",
          "                writer: Vec::new(),",
          "                formatter: TestFormatter,",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::INFINITY;",
          "    let _ = serializer.serialize_f64(value);",
          "    let value = f64::INFINITY;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "    ",
          "    let value = f64::NAN;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "    ",
          "    let value = 1.0;",
          "    let result = serializer.serialize_f64(value);",
          "    assert!(result.is_ok());",
          "    assert!(serializer.writer.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "    impl TestFormatter {",
          "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        writer: Vec<u8>,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl TestSerializer {",
          "        fn new() -> Self {",
          "            Self {",
          "                writer: Vec::new(),",
          "                formatter: TestFormatter,",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::NEG_INFINITY;",
          "    let _ = serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.writer.len(), 0); // Check writer is empty after processing -INFINITY",
          "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for -INFINITY",
          "    let value = f64::INFINITY;",
          "    let _ = serializer.serialize_f64(value);",
          "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing INFINITY",
          "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for INFINITY",
          "    let value = f64::NAN;",
          "    let _ = serializer.serialize_f64(value);",
          "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing NaN",
          "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for NaN"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "    impl TestFormatter {",
          "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer {",
          "        writer: Vec<u8>,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl TestSerializer {",
          "        fn new() -> Self {",
          "            Self {",
          "                writer: Vec::new(),",
          "                formatter: TestFormatter,",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer::new();",
          "    let value = f64::NEG_INFINITY;",
          "    let _ = serializer.serialize_f64(value);",
          "    assert_eq!(serializer.writer.len(), 0); // Check writer is empty after processing -INFINITY",
          "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for -INFINITY",
          "    let value = f64::INFINITY;",
          "    let _ = serializer.serialize_f64(value);",
          "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing INFINITY",
          "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for INFINITY",
          "    let value = f64::NAN;",
          "    let _ = serializer.serialize_f64(value);",
          "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing NaN",
          "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for NaN",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]