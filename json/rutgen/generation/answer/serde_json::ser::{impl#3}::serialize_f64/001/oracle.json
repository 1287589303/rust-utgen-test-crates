[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = -123.456;",
          "    serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer, expected_writer_output);",
          "    assert!(formatter.write_f64_called);",
          "    assert_eq!(formatter.last_written_value, value);"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = -123.456;",
          "    serializer.serialize_f64(value);",
          "    assert_eq!(writer, expected_writer_output);",
          "    assert!(formatter.write_f64_called);",
          "    assert_eq!(formatter.last_written_value, value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = 0.0;",
          "    serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.len(), 0);",
          "    assert!(writer.is_empty());",
          "    assert!(formatter.write_f64_called());",
          "    assert_eq!(formatter.write_f64_value(), 0.0);",
          "    assert!(formatter.write_null_called() == false);"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = 0.0;",
          "    serializer.serialize_f64(value);",
          "    assert_eq!(writer.len(), 0);",
          "    assert!(writer.is_empty());",
          "    assert!(formatter.write_f64_called());",
          "    assert_eq!(formatter.write_f64_value(), 0.0);",
          "    assert!(formatter.write_null_called() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = 123.456;",
          "    serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.len(), expected_length_after_serialization);",
          "    assert_eq!(formatter.calls, expected_formatter_calls);",
          "    assert!(writer.starts_with(&expected_output));",
          "    assert!(formatter.last_written_value.is_some());",
          "    assert_eq!(formatter.last_written_value.unwrap(), value);",
          "    assert!(formatter.last_write_success);",
          "    assert_eq!(serializer.writer.byte_offset(), expected_byte_offset);",
          "    assert!(!serializer.writer.has_error());",
          "    assert!(serializer.remaining_depth < MAX_DEPTH);"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = 123.456;",
          "    serializer.serialize_f64(value);",
          "    assert_eq!(writer.len(), expected_length_after_serialization);",
          "    assert_eq!(formatter.calls, expected_formatter_calls);",
          "    assert!(writer.starts_with(&expected_output));",
          "    assert!(formatter.last_written_value.is_some());",
          "    assert_eq!(formatter.last_written_value.unwrap(), value);",
          "    assert!(formatter.last_write_success);",
          "    assert_eq!(serializer.writer.byte_offset(), expected_byte_offset);",
          "    assert!(!serializer.writer.has_error());",
          "    assert!(serializer.remaining_depth < MAX_DEPTH);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = 1.7976931348623157E+308; // MAX value",
          "    serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.len(), 0);",
          "    assert!(formatter.write_f64_called);",
          "    assert!(formatter.last_written_value.is_some());",
          "    assert!((formatter.last_written_value.unwrap() - 1.7976931348623157E+308).abs() < f64::EPSILON);"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = 1.7976931348623157E+308; // MAX value",
          "    serializer.serialize_f64(value);",
          "    assert_eq!(writer.len(), 0);",
          "    assert!(formatter.write_f64_called);",
          "    assert!(formatter.last_written_value.is_some());",
          "    assert!((formatter.last_written_value.unwrap() - 1.7976931348623157E+308).abs() < f64::EPSILON);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = -1.7976931348623157E+308; // MIN value",
          "    serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.len(), expected_length);",
          "    assert_eq!(formatter.has_written_null(), false);",
          "    assert_eq!(formatter.last_written_f64(), Some(-1.7976931348623157E+308));"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut formatter = MockFormatter::new();",
          "    let serializer = Serializer { writer: &mut writer, formatter };",
          "",
          "    let value: f64 = -1.7976931348623157E+308; // MIN value",
          "    serializer.serialize_f64(value);",
          "    assert_eq!(writer.len(), expected_length);",
          "    assert_eq!(formatter.has_written_null(), false);",
          "    assert_eq!(formatter.last_written_f64(), Some(-1.7976931348623157E+308));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]