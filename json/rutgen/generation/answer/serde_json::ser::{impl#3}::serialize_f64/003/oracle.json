[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value = f64::NAN;",
          "",
          "    let _ = serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value_nan = f64::NAN;",
          "    let value_infinite = f64::INFINITY;",
          "    let result_nan = serializer.serialize_f64(value_nan);",
          "    let result_infinite = serializer.serialize_f64(value_infinite);",
          "    assert!(result_nan.is_ok());",
          "    assert!(result_infinite.is_ok());",
          "    assert_eq!(serializer.writer.len(), 0);"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value = f64::NAN;",
          "",
          "    let _ = serializer.serialize_f64(value);",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value_nan = f64::NAN;",
          "    let value_infinite = f64::INFINITY;",
          "    let result_nan = serializer.serialize_f64(value_nan);",
          "    let result_infinite = serializer.serialize_f64(value_infinite);",
          "    assert!(result_nan.is_ok());",
          "    assert!(result_infinite.is_ok());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value = f64::INFINITY;",
          "",
          "    let _ = serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.writer.is_empty());",
          "    assert_eq!(_err, Some(expected_error));",
          "    assert!(serializer.writer.is_empty());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "    let value_nan = f64::NAN;",
          "    let value_infinity = f64::INFINITY;",
          "    let value_neg_infinity = f64::NEG_INFINITY;",
          "    let _ = serializer.serialize_f64(value_nan);",
          "    assert_eq!(serializer.writer.len(), expected_length_after_nan);",
          "    let _ = serializer.serialize_f64(value_infinity);",
          "    assert_eq!(serializer.writer.len(), expected_length_after_infinity);",
          "    let _ = serializer.serialize_f64(value_neg_infinity);",
          "    assert_eq!(serializer.writer.len(), expected_length_after_neg_infinity);"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value = f64::INFINITY;",
          "",
          "    let _ = serializer.serialize_f64(value);",
          "    assert!(serializer.writer.is_empty());",
          "    assert_eq!(_err, Some(expected_error));",
          "    assert!(serializer.writer.is_empty());",
          "    assert_eq!(serializer.writer.len(), 0);",
          "    let value_nan = f64::NAN;",
          "    let value_infinity = f64::INFINITY;",
          "    let value_neg_infinity = f64::NEG_INFINITY;",
          "    let _ = serializer.serialize_f64(value_nan);",
          "    assert_eq!(serializer.writer.len(), expected_length_after_nan);",
          "    let _ = serializer.serialize_f64(value_infinity);",
          "    assert_eq!(serializer.writer.len(), expected_length_after_infinity);",
          "    let _ = serializer.serialize_f64(value_neg_infinity);",
          "    assert_eq!(serializer.writer.len(), expected_length_after_neg_infinity);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value = f64::NEG_INFINITY;",
          "",
          "    let _ = serializer.serialize_f64(value);",
          "}"
        ],
        "oracle": [
          "    assert!(serializer.writer.is_empty());",
          "    assert!(matches!(serializer.formatter.write_null(&mut serializer.writer), Ok(())));",
          "    assert!(serializer.writer.is_empty()); // Check that no data is written for NaN or Infinite value."
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let formatter = CompactFormatter::new();",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let value = f64::NEG_INFINITY;",
          "",
          "    let _ = serializer.serialize_f64(value);",
          "    assert!(serializer.writer.is_empty());",
          "    assert!(matches!(serializer.formatter.write_null(&mut serializer.writer), Ok(())));",
          "    assert!(serializer.writer.is_empty()); // Check that no data is written for NaN or Infinite value.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]