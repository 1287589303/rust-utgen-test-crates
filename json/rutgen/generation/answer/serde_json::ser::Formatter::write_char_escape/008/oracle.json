[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {}",
          "",
          "    let mut writer: Vec<u8> = Vec::new();",
          "    let mut formatter = TestFormatter;",
          "",
          "    formatter.write_char_escape(&mut writer, CharEscape::ReverseSolidus).unwrap();",
          "",
          "    // Actual invocation without check",
          "}"
        ],
        "oracle": [
          "    writer.push(b'\\\\');",
          "    writer.push(b'\\\\');"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {}",
          "",
          "    let mut writer: Vec<u8> = Vec::new();",
          "    let mut formatter = TestFormatter;",
          "",
          "    formatter.write_char_escape(&mut writer, CharEscape::ReverseSolidus).unwrap();",
          "",
          "    // Actual invocation without check",
          "    writer.push(b'\\\\');",
          "    writer.push(b'\\\\');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {}",
          "",
          "    let mut writer: Vec<u8> = Vec::new();",
          "    let mut formatter = TestFormatter;",
          "",
          "    formatter.write_char_escape(&mut writer, CharEscape::ReverseSolidus).unwrap();",
          "",
          "    // Actual invocation without check",
          "}"
        ],
        "oracle": [
          "    writer.push(b'\\\\').unwrap();",
          "    writer.push(b'\\\\').unwrap();"
        ],
        "code": [
          "{",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {}",
          "",
          "    let mut writer: Vec<u8> = Vec::new();",
          "    let mut formatter = TestFormatter;",
          "",
          "    formatter.write_char_escape(&mut writer, CharEscape::ReverseSolidus).unwrap();",
          "",
          "    // Actual invocation without check",
          "    writer.push(b'\\\\').unwrap();",
          "    writer.push(b'\\\\').unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]