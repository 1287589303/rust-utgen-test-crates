[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: Vec::new() };",
          "    let mut formatter = FormatterImpl; // assume FormatterImpl implements Formatter",
          "",
          "    let char_escape = CharEscape::Backspace;",
          "",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.buffer, b\"\\\\b\");",
          "    ",
          "    let char_escape = CharEscape::Quote;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[4..], b\"\\\\\\\"\");",
          "    ",
          "    let char_escape = CharEscape::ReverseSolidus;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[6..], b\"\\\\\\\\\");",
          "    ",
          "    let char_escape = CharEscape::Solidus;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[8..], b\"\\\\/\");",
          "    ",
          "    let char_escape = CharEscape::FormFeed;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[10..], b\"\\\\f\");",
          "    ",
          "    let char_escape = CharEscape::LineFeed;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[12..], b\"\\\\n\");",
          "    ",
          "    let char_escape = CharEscape::CarriageReturn;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[14..], b\"\\\\r\");",
          "    ",
          "    let char_escape = CharEscape::Tab;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[16..], b\"\\\\t\");",
          "    ",
          "    let char_escape = CharEscape::AsciiControl(0x01);",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[18..], b\"\\\\u0001\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: Vec::new() };",
          "    let mut formatter = FormatterImpl; // assume FormatterImpl implements Formatter",
          "",
          "    let char_escape = CharEscape::Backspace;",
          "",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer, b\"\\\\b\");",
          "    ",
          "    let char_escape = CharEscape::Quote;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[4..], b\"\\\\\\\"\");",
          "    ",
          "    let char_escape = CharEscape::ReverseSolidus;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[6..], b\"\\\\\\\\\");",
          "    ",
          "    let char_escape = CharEscape::Solidus;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[8..], b\"\\\\/\");",
          "    ",
          "    let char_escape = CharEscape::FormFeed;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[10..], b\"\\\\f\");",
          "    ",
          "    let char_escape = CharEscape::LineFeed;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[12..], b\"\\\\n\");",
          "    ",
          "    let char_escape = CharEscape::CarriageReturn;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[14..], b\"\\\\r\");",
          "    ",
          "    let char_escape = CharEscape::Tab;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[16..], b\"\\\\t\");",
          "    ",
          "    let char_escape = CharEscape::AsciiControl(0x01);",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    assert_eq!(writer.buffer[18..], b\"\\\\u0001\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]