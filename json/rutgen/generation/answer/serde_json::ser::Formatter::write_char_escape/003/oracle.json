[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct TestFormatter; ",
      "",
      "impl Formatter for TestFormatter {}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.output.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Vec::new() };",
          "    let mut formatter = TestFormatter {};",
          "",
          "    let char_escape = CharEscape::CarriageReturn;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "}"
        ],
        "oracle": [
          "    writer.output == b\"\\\\r\"",
          "    writer.output.len() == 2",
          "    writer.output[0] == b'\\\\'",
          "    writer.output[1] == b'r'"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: Vec<u8>,",
          "    }",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
          "            self.output.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Vec::new() };",
          "    let mut formatter = TestFormatter {};",
          "",
          "    let char_escape = CharEscape::CarriageReturn;",
          "    let _ = formatter.write_char_escape(&mut writer, char_escape);",
          "    writer.output == b\"\\\\r\"",
          "    writer.output.len() == 2",
          "    writer.output[0] == b'\\\\'",
          "    writer.output[1] == b'r'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]