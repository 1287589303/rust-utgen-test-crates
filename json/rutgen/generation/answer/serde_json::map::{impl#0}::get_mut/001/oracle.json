[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let result = map.get_mut(\"key1\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), &mut Value::Bool(true));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let result = map.get_mut(\"key1\");",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), &mut Value::Bool(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let result = map.get_mut(\"key2\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let result = map.get_mut(\"key2\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let result = map.get_mut(\"key1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let result = map.get_mut(\"key1\");",
          "    assert!(result.is_some());",
          "    assert_eq!(result.as_ref().unwrap(), &Value::String(\"value1\".to_string()));",
          "    *result.unwrap() = Value::String(\"value2\".to_string());",
          "    let result = map.get(\"key1\");",
          "    assert_eq!(result, Some(&Value::String(\"value2\".to_string())));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let result = map.get_mut(\"key1\");",
          "    assert_eq!(result, None);",
          "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let result = map.get_mut(\"key1\");",
          "    assert!(result.is_some());",
          "    assert_eq!(result.as_ref().unwrap(), &Value::String(\"value1\".to_string()));",
          "    *result.unwrap() = Value::String(\"value2\".to_string());",
          "    let result = map.get(\"key1\");",
          "    assert_eq!(result, Some(&Value::String(\"value2\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::with_capacity(1);",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(42)));",
          "    let result = map.get_mut(\"key1\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), &mut Value::Number(Number::from(42)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::with_capacity(1);",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(42)));",
          "    let result = map.get_mut(\"key1\");",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), &mut Value::Number(Number::from(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(format!(\"key{}\", i), Value::Number(Number::from(i)));",
          "    }",
          "    let result = map.get_mut(\"key9\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), &mut Value::Number(Number::from(9)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(format!(\"key{}\", i), Value::Number(Number::from(i)));",
          "    }",
          "    let result = map.get_mut(\"key9\");",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), &mut Value::Number(Number::from(9)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]