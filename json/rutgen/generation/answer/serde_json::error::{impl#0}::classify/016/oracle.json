[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::Message(\"Test message\".to_string()),",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    let error = Error { err: Box::new(ErrorImpl { code: ErrorCode::ExpectedSomeIdent, line: 1, column: 1 }) };",
          "    let category = error.classify();",
          "    assert_eq!(category, Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::Message(\"Test message\".to_string()),",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "    let error = Error { err: Box::new(ErrorImpl { code: ErrorCode::ExpectedSomeIdent, line: 1, column: 1 }) };",
          "    let category = error.classify();",
          "    assert_eq!(category, Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::Io(\"Test IO error\".to_string()),",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.classify(), Category::Io);",
          "    ",
          "    error.err.code = ErrorCode::Message(\"Test message error\".to_string());",
          "    assert_eq!(error.classify(), Category::Data);",
          "    ",
          "    error.err.code = ErrorCode::EofWhileParsingList;",
          "    assert_eq!(error.classify(), Category::Eof);",
          "    ",
          "    error.err.code = ErrorCode::ExpectedSomeIdent;",
          "    assert_eq!(error.classify(), Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::Io(\"Test IO error\".to_string()),",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "    assert_eq!(error.classify(), Category::Io);",
          "    ",
          "    error.err.code = ErrorCode::Message(\"Test message error\".to_string());",
          "    assert_eq!(error.classify(), Category::Data);",
          "    ",
          "    error.err.code = ErrorCode::EofWhileParsingList;",
          "    assert_eq!(error.classify(), Category::Eof);",
          "    ",
          "    error.err.code = ErrorCode::ExpectedSomeIdent;",
          "    assert_eq!(error.classify(), Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::EofWhileParsingList,",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    let error = Error { err: Box::new(ErrorImpl { code: ErrorCode::ExpectedSomeIdent, line: 0, column: 0 }) };",
          "    let category = error.classify();",
          "    assert_eq!(category, Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::EofWhileParsingList,",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "    let error = Error { err: Box::new(ErrorImpl { code: ErrorCode::ExpectedSomeIdent, line: 0, column: 0 }) };",
          "    let category = error.classify();",
          "    assert_eq!(category, Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::ExpectedSomeIdent,",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    _error.classify() == Category::Syntax_"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::ExpectedSomeIdent,",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "    _error.classify() == Category::Syntax_",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::InvalidNumber,",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    let error = Error { err: Box::new(ErrorImpl { code: ErrorCode::ExpectedSomeIdent, line: 0, column: 0 }) };",
          "    assert_eq!(error.classify(), Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "    ",
          "    let error = Error {",
          "        err: Box::new(ErrorImpl {",
          "            code: ErrorCode::InvalidNumber,",
          "            line: 1,",
          "            column: 1,",
          "        }),",
          "    };",
          "    ",
          "    let _category = error.classify();",
          "    let error = Error { err: Box::new(ErrorImpl { code: ErrorCode::ExpectedSomeIdent, line: 0, column: 0 }) };",
          "    assert_eq!(error.classify(), Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]