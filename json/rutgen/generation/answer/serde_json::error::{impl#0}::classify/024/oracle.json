[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    enum ErrorCode {",
          "        Io(String),",
          "    }",
          "",
          "    let err_impl = ErrorImpl {",
          "        code: ErrorCode::Io(String::from(\"IO error example\")),",
          "        line: 0,",
          "        column: 0,",
          "    };",
          "    ",
          "    let error = Error {",
          "        err: Box::new(err_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    let err_impl = ErrorImpl { code: ErrorCode::Io(String::from(\"IO error example\")), line: 0, column: 0 };",
          "    let error = Error { err: Box::new(err_impl) };",
          "    assert_eq!(error.classify(), Category::Io);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    enum ErrorCode {",
          "        Io(String),",
          "    }",
          "",
          "    let err_impl = ErrorImpl {",
          "        code: ErrorCode::Io(String::from(\"IO error example\")),",
          "        line: 0,",
          "        column: 0,",
          "    };",
          "    ",
          "    let error = Error {",
          "        err: Box::new(err_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "    let err_impl = ErrorImpl { code: ErrorCode::Io(String::from(\"IO error example\")), line: 0, column: 0 };",
          "    let error = Error { err: Box::new(err_impl) };",
          "    assert_eq!(error.classify(), Category::Io);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    enum ErrorCode {",
          "        Io(String),",
          "    }",
          "",
          "    let err_impl = ErrorImpl {",
          "        code: ErrorCode::Io(String::from(\"Another IO error\")),",
          "        line: 1,",
          "        column: 2,",
          "    };",
          "",
          "    let error = Error {",
          "        err: Box::new(err_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.classify(), Category::Io);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    enum ErrorCode {",
          "        Io(String),",
          "    }",
          "",
          "    let err_impl = ErrorImpl {",
          "        code: ErrorCode::Io(String::from(\"Another IO error\")),",
          "        line: 1,",
          "        column: 2,",
          "    };",
          "",
          "    let error = Error {",
          "        err: Box::new(err_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "    assert_eq!(error.classify(), Category::Io);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]