[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct TestError {",
          "        err: Box<TestErrorImpl>,",
          "    }",
          "",
          "    impl TestError {",
          "        fn new(code: ErrorCode, line: usize, column: usize) -> Self {",
          "            TestError {",
          "                err: Box::new(TestErrorImpl { code, line, column }),",
          "            }",
          "        }",
          "",
          "        fn classify(&self) -> Category {",
          "            match self.err.code {",
          "                ErrorCode::Message(_) => Category::Data,",
          "                ErrorCode::Io(_) => Category::Io,",
          "                ErrorCode::EofWhileParsingList",
          "                | ErrorCode::EofWhileParsingObject",
          "                | ErrorCode::EofWhileParsingString",
          "                | ErrorCode::EofWhileParsingValue => Category::Eof,",
          "                ErrorCode::ExpectedColon",
          "                | ErrorCode::ExpectedListCommaOrEnd",
          "                | ErrorCode::ExpectedObjectCommaOrEnd",
          "                | ErrorCode::ExpectedSomeIdent",
          "                | ErrorCode::ExpectedSomeValue",
          "                | ErrorCode::ExpectedDoubleQuote",
          "                | ErrorCode::InvalidEscape",
          "                | ErrorCode::InvalidNumber",
          "                | ErrorCode::NumberOutOfRange",
          "                | ErrorCode::InvalidUnicodeCodePoint",
          "                | ErrorCode::ControlCharacterWhileParsingString",
          "                | ErrorCode::KeyMustBeAString",
          "                | ErrorCode::ExpectedNumericKey",
          "                | ErrorCode::FloatKeyMustBeFinite",
          "                | ErrorCode::LoneLeadingSurrogateInHexEscape",
          "                | ErrorCode::TrailingComma",
          "                | ErrorCode::TrailingCharacters",
          "                | ErrorCode::UnexpectedEndOfHexEscape",
          "                | ErrorCode::RecursionLimitExceeded => Category::Syntax,",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let test_error = TestError::new(ErrorCode::TrailingComma, 1, 1);",
          "    test_error.classify();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_error.classify(), Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct TestErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct TestError {",
          "        err: Box<TestErrorImpl>,",
          "    }",
          "",
          "    impl TestError {",
          "        fn new(code: ErrorCode, line: usize, column: usize) -> Self {",
          "            TestError {",
          "                err: Box::new(TestErrorImpl { code, line, column }),",
          "            }",
          "        }",
          "",
          "        fn classify(&self) -> Category {",
          "            match self.err.code {",
          "                ErrorCode::Message(_) => Category::Data,",
          "                ErrorCode::Io(_) => Category::Io,",
          "                ErrorCode::EofWhileParsingList",
          "                | ErrorCode::EofWhileParsingObject",
          "                | ErrorCode::EofWhileParsingString",
          "                | ErrorCode::EofWhileParsingValue => Category::Eof,",
          "                ErrorCode::ExpectedColon",
          "                | ErrorCode::ExpectedListCommaOrEnd",
          "                | ErrorCode::ExpectedObjectCommaOrEnd",
          "                | ErrorCode::ExpectedSomeIdent",
          "                | ErrorCode::ExpectedSomeValue",
          "                | ErrorCode::ExpectedDoubleQuote",
          "                | ErrorCode::InvalidEscape",
          "                | ErrorCode::InvalidNumber",
          "                | ErrorCode::NumberOutOfRange",
          "                | ErrorCode::InvalidUnicodeCodePoint",
          "                | ErrorCode::ControlCharacterWhileParsingString",
          "                | ErrorCode::KeyMustBeAString",
          "                | ErrorCode::ExpectedNumericKey",
          "                | ErrorCode::FloatKeyMustBeFinite",
          "                | ErrorCode::LoneLeadingSurrogateInHexEscape",
          "                | ErrorCode::TrailingComma",
          "                | ErrorCode::TrailingCharacters",
          "                | ErrorCode::UnexpectedEndOfHexEscape",
          "                | ErrorCode::RecursionLimitExceeded => Category::Syntax,",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let test_error = TestError::new(ErrorCode::TrailingComma, 1, 1);",
          "    test_error.classify();",
          "    assert_eq!(test_error.classify(), Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]