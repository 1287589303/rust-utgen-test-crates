[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    enum ErrorCode {",
          "        Message(String),",
          "        Io(std::io::Error),",
          "        EofWhileParsingList,",
          "        EofWhileParsingObject,",
          "        EofWhileParsingString,",
          "        EofWhileParsingValue,",
          "        ExpectedColon,",
          "        ExpectedListCommaOrEnd,",
          "        ExpectedObjectCommaOrEnd,",
          "        ExpectedSomeIdent,",
          "        ExpectedSomeValue,",
          "        ExpectedDoubleQuote,",
          "        InvalidEscape,",
          "        InvalidNumber,",
          "        NumberOutOfRange,",
          "        InvalidUnicodeCodePoint,",
          "        ControlCharacterWhileParsingString,",
          "        KeyMustBeAString,",
          "        ExpectedNumericKey,",
          "        FloatKeyMustBeFinite,",
          "        LoneLeadingSurrogateInHexEscape,",
          "        TrailingComma,",
          "        TrailingCharacters,",
          "        UnexpectedEndOfHexEscape,",
          "        RecursionLimitExceeded,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::RecursionLimitExceeded,",
          "        line: 0,",
          "        column: 0,",
          "    };",
          "    ",
          "    let error = Error {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.classify(), Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    enum ErrorCode {",
          "        Message(String),",
          "        Io(std::io::Error),",
          "        EofWhileParsingList,",
          "        EofWhileParsingObject,",
          "        EofWhileParsingString,",
          "        EofWhileParsingValue,",
          "        ExpectedColon,",
          "        ExpectedListCommaOrEnd,",
          "        ExpectedObjectCommaOrEnd,",
          "        ExpectedSomeIdent,",
          "        ExpectedSomeValue,",
          "        ExpectedDoubleQuote,",
          "        InvalidEscape,",
          "        InvalidNumber,",
          "        NumberOutOfRange,",
          "        InvalidUnicodeCodePoint,",
          "        ControlCharacterWhileParsingString,",
          "        KeyMustBeAString,",
          "        ExpectedNumericKey,",
          "        FloatKeyMustBeFinite,",
          "        LoneLeadingSurrogateInHexEscape,",
          "        TrailingComma,",
          "        TrailingCharacters,",
          "        UnexpectedEndOfHexEscape,",
          "        RecursionLimitExceeded,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::RecursionLimitExceeded,",
          "        line: 0,",
          "        column: 0,",
          "    };",
          "    ",
          "    let error = Error {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "    assert_eq!(error.classify(), Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]