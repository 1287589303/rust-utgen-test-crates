[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    #[derive(Copy, Clone, PartialEq, Eq, Debug)]",
          "    enum ErrorCode {",
          "        UnexpectedEndOfHexEscape,",
          "        // other variants omitted for brevity",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::UnexpectedEndOfHexEscape,",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "    ",
          "    let error = Error {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_category, Category::Syntax);"
        ],
        "code": [
          "{",
          "    struct ErrorImpl {",
          "        code: ErrorCode,",
          "        line: usize,",
          "        column: usize,",
          "    }",
          "",
          "    struct Error {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    #[derive(Copy, Clone, PartialEq, Eq, Debug)]",
          "    enum ErrorCode {",
          "        UnexpectedEndOfHexEscape,",
          "        // other variants omitted for brevity",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::UnexpectedEndOfHexEscape,",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "    ",
          "    let error = Error {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _category = error.classify();",
          "    assert_eq!(_category, Category::Syntax);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]