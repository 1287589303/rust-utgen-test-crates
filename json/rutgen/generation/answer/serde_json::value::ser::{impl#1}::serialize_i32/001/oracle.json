[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(i32::MIN);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_.is_ok(), true);",
          "    assert_eq!(_.unwrap(), Value::Number(i32::MIN.into()));",
          "    assert_eq!(_.err(), None);"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(i32::MIN);",
          "    assert_eq!(_.is_ok(), true);",
          "    assert_eq!(_.unwrap(), Value::Number(i32::MIN.into()));",
          "    assert_eq!(_.err(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number(0.into())));",
          "    let _result = serializer.serialize_i32(-1);",
          "    assert_eq!(_result, Ok(Value::Number((-1i64).into())));",
          "    let _result = serializer.serialize_i32(2147483647);",
          "    assert_eq!(_result, Ok(Value::Number(2147483647i64.into())));",
          "    let _result = serializer.serialize_i32(-2147483648);",
          "    assert_eq!(_result, Ok(Value::Number((-2147483648i64).into())));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(0);",
          "    assert_eq!(_result, Ok(Value::Number(0.into())));",
          "    let _result = serializer.serialize_i32(-1);",
          "    assert_eq!(_result, Ok(Value::Number((-1i64).into())));",
          "    let _result = serializer.serialize_i32(2147483647);",
          "    assert_eq!(_result, Ok(Value::Number(2147483647i64.into())));",
          "    let _result = serializer.serialize_i32(-2147483648);",
          "    assert_eq!(_result, Ok(Value::Number((-2147483648i64).into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(i32::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number(i32::MAX as i64)));",
          "    assert!(_result.is_ok());",
          "    assert!(_result.is_err() == false);",
          "    assert!(_result.unwrap() == Value::Number(i32::MAX as i64));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(i32::MAX);",
          "    assert_eq!(_result, Ok(Value::Number(i32::MAX as i64)));",
          "    assert!(_result.is_ok());",
          "    assert!(_result.is_err() == false);",
          "    assert!(_result.unwrap() == Value::Number(i32::MAX as i64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(-42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Value::Number((-42_i64).into())));",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(Value::Number(n)) if n.to_i64() == Some(-42)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(-42);",
          "    assert_eq!(_result, Ok(Value::Number((-42_i64).into())));",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(Value::Number(n)) if n.to_i64() == Some(-42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap(), Value::Number(42.into()));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let _result = serializer.serialize_i32(42);",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap(), Value::Number(42.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]