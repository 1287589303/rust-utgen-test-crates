[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _: &[u8]) -> core::result::Result<usize, std::io::Error> {",
          "            Ok(0)",
          "        }",
          "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct DummyFormatter;",
          "    impl Formatter for DummyFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> {",
          "            Err(Error)",
          "        }",
          "",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _ = map_key_serializer.serialize_i128(-2_i128.pow(127));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_key_serializer.ser.formatter.begin_string(&mut map_key_serializer.ser.writer), Ok(()));",
          "    assert_eq!(map_key_serializer.ser.formatter.write_i128(&mut map_key_serializer.ser.writer, -2_i128.pow(127)), Err(Error));",
          "    assert_eq!(map_key_serializer.ser.formatter.end_string(&mut map_key_serializer.ser.writer), Ok(()));"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _: &[u8]) -> core::result::Result<usize, std::io::Error> {",
          "            Ok(0)",
          "        }",
          "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct DummyFormatter;",
          "    impl Formatter for DummyFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> {",
          "            Err(Error)",
          "        }",
          "",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _ = map_key_serializer.serialize_i128(-2_i128.pow(127));",
          "    assert_eq!(map_key_serializer.ser.formatter.begin_string(&mut map_key_serializer.ser.writer), Ok(()));",
          "    assert_eq!(map_key_serializer.ser.formatter.write_i128(&mut map_key_serializer.ser.writer, -2_i128.pow(127)), Err(Error));",
          "    assert_eq!(map_key_serializer.ser.formatter.end_string(&mut map_key_serializer.ser.writer), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _: &[u8]) -> core::result::Result<usize, std::io::Error> {",
          "            Ok(0)",
          "        }",
          "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct DummyFormatter;",
          "    impl Formatter for DummyFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> {",
          "            Err(Error)",
          "        }",
          "",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _ = map_key_serializer.serialize_i128(2_i128.pow(127) - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map_key_serializer.ser.formatter.begin_string(&mut map_key_serializer.ser.writer).map_err(Error::io), Ok(()));",
          "    assert_eq!(map_key_serializer.ser.formatter.write_i128(&mut map_key_serializer.ser.writer, 2_i128.pow(127) - 1).map_err(Error::io), Err(Error));",
          "    assert_eq!(map_key_serializer.ser.formatter.end_string(&mut map_key_serializer.ser.writer).map_err(Error::io), Ok(()));"
        ],
        "code": [
          "{",
          "    struct DummyWriter;",
          "    impl io::Write for DummyWriter {",
          "        fn write(&mut self, _: &[u8]) -> core::result::Result<usize, std::io::Error> {",
          "            Ok(0)",
          "        }",
          "        fn flush(&mut self) -> core::result::Result<(), std::io::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct DummyFormatter;",
          "    impl Formatter for DummyFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> {",
          "            Err(Error)",
          "        }",
          "",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = DummyWriter;",
          "    let formatter = DummyFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    let map_key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    let _ = map_key_serializer.serialize_i128(2_i128.pow(127) - 1);",
          "    assert_eq!(map_key_serializer.ser.formatter.begin_string(&mut map_key_serializer.ser.writer).map_err(Error::io), Ok(()));",
          "    assert_eq!(map_key_serializer.ser.formatter.write_i128(&mut map_key_serializer.ser.writer, 2_i128.pow(127) - 1).map_err(Error::io), Err(Error));",
          "    assert_eq!(map_key_serializer.ser.formatter.end_string(&mut map_key_serializer.ser.writer).map_err(Error::io), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]