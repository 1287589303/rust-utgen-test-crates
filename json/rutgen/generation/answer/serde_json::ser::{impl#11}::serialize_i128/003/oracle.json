[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(i128::MIN).unwrap();",
          "}"
        ],
        "oracle": [
          "    serializer.serialize_i128(i128::MIN).unwrap();",
          "    serializer.serialize_i128(i128::MAX).unwrap();",
          "    serializer.serialize_i128(0).unwrap();",
          "    serializer.serialize_i128(-1).unwrap();",
          "    serializer.serialize_i128(1).unwrap();",
          "    serializer.serialize_i128(1234567890123456789).unwrap();",
          "    serializer.serialize_i128(-1234567890123456789).unwrap();",
          "    serializer.serialize_i128(i128::from_ne_bytes([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).unwrap();",
          "    serializer.serialize_i128(i128::from_le_bytes([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).unwrap();",
          "    serializer.serialize_i128(i128::from_be_bytes([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).unwrap();"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(i128::MIN).unwrap();",
          "    serializer.serialize_i128(i128::MIN).unwrap();",
          "    serializer.serialize_i128(i128::MAX).unwrap();",
          "    serializer.serialize_i128(0).unwrap();",
          "    serializer.serialize_i128(-1).unwrap();",
          "    serializer.serialize_i128(1).unwrap();",
          "    serializer.serialize_i128(1234567890123456789).unwrap();",
          "    serializer.serialize_i128(-1234567890123456789).unwrap();",
          "    serializer.serialize_i128(i128::from_ne_bytes([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).unwrap();",
          "    serializer.serialize_i128(i128::from_le_bytes([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).unwrap();",
          "    serializer.serialize_i128(i128::from_be_bytes([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(0).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_i128(0).is_ok(), true);",
          "    assert_eq!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io).is_ok(), true);",
          "    assert_eq!(self.ser.formatter.write_i128(&mut self.ser.writer, 0).map_err(Error::io).is_ok(), true);",
          "    assert_eq!(self.ser.formatter.end_string(&mut self.ser.writer).map_err(Error::io).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(0).unwrap();",
          "    assert_eq!(serializer.serialize_i128(0).is_ok(), true);",
          "    assert_eq!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io).is_ok(), true);",
          "    assert_eq!(self.ser.formatter.write_i128(&mut self.ser.writer, 0).map_err(Error::io).is_ok(), true);",
          "    assert_eq!(self.ser.formatter.end_string(&mut self.ser.writer).map_err(Error::io).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(i128::MAX).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.ser.formatter.begin_string(&mut serializer.ser.writer).map_err(Error::io), Ok(()));",
          "    assert_eq!(serializer.ser.formatter.write_i128(&mut serializer.ser.writer, i128::MAX).map_err(Error::io), Ok(()));",
          "    assert_eq!(serializer.ser.formatter.end_string(&mut serializer.ser.writer).map_err(Error::io), Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(i128::MAX).unwrap();",
          "    assert_eq!(serializer.ser.formatter.begin_string(&mut serializer.ser.writer).map_err(Error::io), Ok(()));",
          "    assert_eq!(serializer.ser.formatter.write_i128(&mut serializer.ser.writer, i128::MAX).map_err(Error::io), Ok(()));",
          "    assert_eq!(serializer.ser.formatter.end_string(&mut serializer.ser.writer).map_err(Error::io), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(-1).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io).is_ok());",
          "    assert!(self.ser.formatter.write_i128(&mut self.ser.writer, -1).map_err(Error::io).is_ok());",
          "    assert!(self.ser.formatter.end_string(&mut self.ser.writer).map_err(Error::io).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
          "        fn flush(&mut self) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "        fn write_i128(&mut self, _writer: &mut impl io::Write, _value: i128) -> Result<()> { Ok(()) }",
          "        fn end_string(&mut self, _writer: &mut impl io::Write) -> Result<()> { Ok(()) }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let serializer = Serializer { writer, formatter };",
          "",
          "    serializer.serialize_i128(-1).unwrap();",
          "    assert!(self.ser.formatter.begin_string(&mut self.ser.writer).map_err(Error::io).is_ok());",
          "    assert!(self.ser.formatter.write_i128(&mut self.ser.writer, -1).map_err(Error::io).is_ok());",
          "    assert!(self.ser.formatter.end_string(&mut self.ser.writer).map_err(Error::io).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]