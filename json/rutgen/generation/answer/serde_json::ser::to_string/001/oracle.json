[
  {
    "uses": [
      "use serde::Serialize;",
      "use serde::ser::Serializer;",
      "use std::collections::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::ser::Serializer;",
          "    use serde::Serialize;",
          "    use std::collections::HashMap;",
          "",
          "    struct NonStringKey;",
          "",
          "    impl Serialize for NonStringKey {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(ser::Error::custom(\"failed to serialize NonStringKey\"))",
          "        }",
          "    }",
          "",
          "    let mut data: HashMap<NonStringKey, String> = HashMap::new();",
          "    data.insert(NonStringKey, \"value\".to_string());",
          "",
          "    let _result: Result<String> = to_string(&data);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_result, Err(_)));",
          "    assert!(matches!(_result.unwrap_err().to_string(), \"failed to serialize NonStringKey\"));",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.is_ok(), false);",
          "    assert!(std::panic::catch_unwind(|| { let _ = to_string(&data); }).is_err());"
        ],
        "code": [
          "{",
          "    use serde::ser::Serializer;",
          "    use serde::Serialize;",
          "    use std::collections::HashMap;",
          "",
          "    struct NonStringKey;",
          "",
          "    impl Serialize for NonStringKey {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(ser::Error::custom(\"failed to serialize NonStringKey\"))",
          "        }",
          "    }",
          "",
          "    let mut data: HashMap<NonStringKey, String> = HashMap::new();",
          "    data.insert(NonStringKey, \"value\".to_string());",
          "",
          "    let _result: Result<String> = to_string(&data);",
          "    assert!(matches!(_result, Err(_)));",
          "    assert!(matches!(_result.unwrap_err().to_string(), \"failed to serialize NonStringKey\"));",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.is_ok(), false);",
          "    assert!(std::panic::catch_unwind(|| { let _ = to_string(&data); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde::ser::Serializer;",
          "    use serde::Serialize;",
          "",
          "    struct FailingSerialization;",
          "",
          "    impl Serialize for FailingSerialization {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(ser::Error::custom(\"serialization failed\"))",
          "        }",
          "    }",
          "",
          "    let value = FailingSerialization;",
          "",
          "    let _result: Result<String> = to_string(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.err().unwrap().to_string(), \"serialization failed\");"
        ],
        "code": [
          "{",
          "    use serde::ser::Serializer;",
          "    use serde::Serialize;",
          "",
          "    struct FailingSerialization;",
          "",
          "    impl Serialize for FailingSerialization {",
          "        fn serialize<S>(&self, _serializer: S) -> Result<S::Ok, S::Error>",
          "        where",
          "            S: Serializer,",
          "        {",
          "            Err(ser::Error::custom(\"serialization failed\"))",
          "        }",
          "    }",
          "",
          "    let value = FailingSerialization;",
          "",
          "    let _result: Result<String> = to_string(&value);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.err().unwrap().to_string(), \"serialization failed\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]