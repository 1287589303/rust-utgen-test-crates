[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key1\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::Bool(v) = e {",
          "            *v = false;",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.get(), &Value::Bool(false));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert_eq!(map[\"key1\"], Value::Bool(false));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key1\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::Bool(v) = e {",
          "            *v = false;",
          "        }",
          "    });",
          "    assert_eq!(entry.get(), &Value::Bool(false));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert_eq!(map[\"key1\"], Value::Bool(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(12)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::Number(v) = e {",
          "            *v = serde_json::Number::from(20);",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"key2\"], Value::Number(serde_json::Number::from(20)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
          "    let original_value = entry.get();",
          "    assert_eq!(original_value, &Value::Number(serde_json::Number::from(20)));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key2\".to_string(), Value::Number(serde_json::Number::from(12)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::Number(v) = e {",
          "            *v = serde_json::Number::from(20);",
          "        }",
          "    });",
          "    assert_eq!(map[\"key2\"], Value::Number(serde_json::Number::from(20)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
          "    let original_value = entry.get();",
          "    assert_eq!(original_value, &Value::Number(serde_json::Number::from(20)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key3\".to_string(), Value::String(\"test\".to_string()));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key3\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::String(v) = e {",
          "            *v = \"modified\".to_string();",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry.and_modify(|e| *e = Value::String(\"modified\".to_string())), Entry::Occupied(_)));",
          "    assert_eq!(map.get(\"key3\"), Some(&Value::String(\"modified\".to_string())));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key3\"));",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key3\".to_string(), Value::String(\"test\".to_string()));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key3\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::String(v) = e {",
          "            *v = \"modified\".to_string();",
          "        }",
          "    });",
          "    assert!(matches!(entry.and_modify(|e| *e = Value::String(\"modified\".to_string())), Entry::Occupied(_)));",
          "    assert_eq!(map.get(\"key3\"), Some(&Value::String(\"modified\".to_string())));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key3\"));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key4\".to_string(), Value::Array(vec![Value::Bool(false)]));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key4\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::Array(v) = e {",
          "            v.push(Value::Bool(true));",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(if let Entry::Occupied(occupied) = entry { occupied.get() } else { &Value::Null }, &Value::Array(vec![Value::Bool(false), Value::Bool(true)]));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"key4\".to_string(), Value::Array(vec![Value::Bool(false)]));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key4\").unwrap() });",
          "    ",
          "    entry.and_modify(|e| {",
          "        if let Value::Array(v) = e {",
          "            v.push(Value::Bool(true));",
          "        }",
          "    });",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(if let Entry::Occupied(occupied) = entry { occupied.get() } else { &Value::Null }, &Value::Array(vec![Value::Bool(false), Value::Bool(true)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]