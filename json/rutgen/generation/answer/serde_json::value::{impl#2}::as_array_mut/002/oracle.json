[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Array(Vec::new());",
          "    let result = value.as_array_mut();",
          "}"
        ],
        "oracle": [
          "    let mut value = Value::Array(Vec::new());",
          "    let result = value.as_array_mut();",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap(), &mut Vec::new());",
          "    assert_eq!(value.as_array_mut().unwrap().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut value = Value::Array(Vec::new());",
          "    let result = value.as_array_mut();",
          "    let mut value = Value::Array(Vec::new());",
          "    let result = value.as_array_mut();",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap(), &mut Vec::new());",
          "    assert_eq!(value.as_array_mut().unwrap().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Array(vec![Value::Bool(true)]);",
          "    let result = value.as_array_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().len(), 1);",
          "    assert_eq!(result.unwrap()[0], Value::Bool(true));"
        ],
        "code": [
          "{",
          "    let mut value = Value::Array(vec![Value::Bool(true)]);",
          "    let result = value.as_array_mut();",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().len(), 1);",
          "    assert_eq!(result.unwrap()[0], Value::Bool(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Array(vec![Value::Bool(true), Value::Number(Number { n: 5 }), Value::String(String::from(\"test\"))]);",
          "    let result = value.as_array_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&mut vec![Value::Bool(true), Value::Number(Number { n: 5 }), Value::String(String::from(\"test\"))]));"
        ],
        "code": [
          "{",
          "    let mut value = Value::Array(vec![Value::Bool(true), Value::Number(Number { n: 5 }), Value::String(String::from(\"test\"))]);",
          "    let result = value.as_array_mut();",
          "    assert_eq!(result, Some(&mut vec![Value::Bool(true), Value::Number(Number { n: 5 }), Value::String(String::from(\"test\"))]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = Value::Array(vec![Value::Null, Value::String(String::from(\"test\"))]);",
          "    let result = value.as_array_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().len(), 2);",
          "    assert_eq!(result.unwrap()[0], Value::Null);",
          "    assert_eq!(result.unwrap()[1], Value::String(String::from(\"test\")));"
        ],
        "code": [
          "{",
          "    let mut value = Value::Array(vec![Value::Null, Value::String(String::from(\"test\"))]);",
          "    let result = value.as_array_mut();",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().len(), 2);",
          "    assert_eq!(result.unwrap()[0], Value::Null);",
          "    assert_eq!(result.unwrap()[1], Value::String(String::from(\"test\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]