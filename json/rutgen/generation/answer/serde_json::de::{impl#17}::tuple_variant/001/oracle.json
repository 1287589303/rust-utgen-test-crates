[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any value\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> result::Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut de = Deserializer {",
          "        read: (),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "    ",
          "    let result = de.tuple_variant(0, TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let expected_error = Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"));",
          "    assert_eq!(result, expected_error);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any value\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> result::Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut de = Deserializer {",
          "        read: (),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "    ",
          "    let result = de.tuple_variant(0, TestVisitor);",
          "    let expected_error = Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"));",
          "    assert_eq!(result, expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any value\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> result::Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut de = Deserializer {",
          "        read: (),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let result = de.tuple_variant(1, TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let expected_error = Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"));",
          "    assert_eq!(result, expected_error);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(de::Error::invalid_type(Unexpected::UnitVariant, _))));",
          "    assert_eq!(result.unwrap_err(), expected_error.unwrap_err());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any value\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> result::Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut de = Deserializer {",
          "        read: (),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let result = de.tuple_variant(1, TestVisitor);",
          "    let expected_error = Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"));",
          "    assert_eq!(result, expected_error);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(de::Error::invalid_type(Unexpected::UnitVariant, _))));",
          "    assert_eq!(result.unwrap_err(), expected_error.unwrap_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any value\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> result::Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut de = Deserializer {",
          "        read: (),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let result = de.tuple_variant(10, TestVisitor);",
          "}"
        ],
        "oracle": [
          "    let expected_error = Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"));",
          "    assert_eq!(result, expected_error);"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl<'de> de::Visitor<'de> for TestVisitor {",
          "        type Value = ();",
          "        ",
          "        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            formatter.write_str(\"any value\")",
          "        }",
          "",
          "        fn visit_unit<E>(self) -> result::Result<Self::Value, E> where E: de::Error {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut de = Deserializer {",
          "        read: (),",
          "        scratch: Vec::new(),",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let result = de.tuple_variant(10, TestVisitor);",
          "    let expected_error = Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"tuple variant\"));",
          "    assert_eq!(result, expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]