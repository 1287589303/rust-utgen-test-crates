[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
          "            Err(io::Error::new(io::ErrorKind::Other, \"write error\"))",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string<W: io::Write>(&mut self, _writer: &mut W) -> io::Result<()> {",
          "            Err(Error::new(ErrorCode::Other))",
          "        }",
          "",
          "        fn end_string<W: io::Write>(&mut self, _writer: &mut W) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_string_fragment<W: io::Write>(&mut self, _writer: &mut W, _fragment: &str) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_char_escape<W: io::Write>(&mut self, _writer: &mut W, _escape: CharEscape) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let mut formatter = TestFormatter;",
          "    let value = r#\"{\"key\": \"value with \\\"escaped\\\" characters\"}\"#;",
          "",
          "    format_escaped_str(&mut writer, &mut formatter, value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(format_escaped_str(&mut writer, &mut formatter, value).is_err());",
          "    assert_eq!(format_escaped_str(&mut writer, &mut formatter, value).unwrap_err().kind(), io::ErrorKind::Other);",
          "    assert_eq!(format_escaped_str(&mut writer, &mut formatter, value).unwrap_err().to_string(), \"write error\");",
          "    assert!(formatter.begin_string(&mut writer).is_err());",
          "    assert_eq!(formatter.begin_string(&mut writer).unwrap_err().to_string(), \"Other\");",
          "    assert!(formatter.end_string(&mut writer).is_ok());",
          "    assert!(formatter.write_string_fragment(&mut writer, \"test fragment\").is_ok());",
          "    assert!(formatter.write_char_escape(&mut writer, CharEscape::default()).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {",
          "            Err(io::Error::new(io::ErrorKind::Other, \"write error\"))",
          "        }",
          "",
          "        fn flush(&mut self) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_string<W: io::Write>(&mut self, _writer: &mut W) -> io::Result<()> {",
          "            Err(Error::new(ErrorCode::Other))",
          "        }",
          "",
          "        fn end_string<W: io::Write>(&mut self, _writer: &mut W) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_string_fragment<W: io::Write>(&mut self, _writer: &mut W, _fragment: &str) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn write_char_escape<W: io::Write>(&mut self, _writer: &mut W, _escape: CharEscape) -> io::Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter;",
          "    let mut formatter = TestFormatter;",
          "    let value = r#\"{\"key\": \"value with \\\"escaped\\\" characters\"}\"#;",
          "",
          "    format_escaped_str(&mut writer, &mut formatter, value).unwrap();",
          "    assert!(format_escaped_str(&mut writer, &mut formatter, value).is_err());",
          "    assert_eq!(format_escaped_str(&mut writer, &mut formatter, value).unwrap_err().kind(), io::ErrorKind::Other);",
          "    assert_eq!(format_escaped_str(&mut writer, &mut formatter, value).unwrap_err().to_string(), \"write error\");",
          "    assert!(formatter.begin_string(&mut writer).is_err());",
          "    assert_eq!(formatter.begin_string(&mut writer).unwrap_err().to_string(), \"Other\");",
          "    assert!(formatter.end_string(&mut writer).is_ok());",
          "    assert!(formatter.write_string_fragment(&mut writer, \"test fragment\").is_ok());",
          "    assert!(formatter.write_char_escape(&mut writer, CharEscape::default()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]