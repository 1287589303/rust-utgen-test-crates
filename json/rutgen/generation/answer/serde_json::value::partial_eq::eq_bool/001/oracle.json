[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(\"test\".to_string()), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), true), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(\"test\".to_string()), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(false);",
          "    let other = false;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), false), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"false\")), false), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), false), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), false), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(false);",
          "    let other = false;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), false), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"false\")), false), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), false), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let other = false;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::String(\"test\".to_string()), false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(42)), false), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), false), false);",
          "    assert_eq!(eq_bool(&Value::Object(BTreeMap::new()), false), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let other = false;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::String(\"test\".to_string()), false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(42)), false), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), false), false);",
          "    assert_eq!(eq_bool(&Value::Object(BTreeMap::new()), false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"some string\"));",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(0)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"some string\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![Value::Bool(true)]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(BTreeMap::new()), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"some string\"));",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(0)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"some string\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![Value::Bool(true)]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(BTreeMap::new()), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number::from(1)); // Assuming a Number type constructor",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"true\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number::from(1)); // Assuming a Number type constructor",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"true\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(false)]);",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"test\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), true), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(false)]);",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"test\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Map::new()), true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Default::default()); // Assuming a default empty Map",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"true\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Default::default()), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(0)), false), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"false\")), false), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), false), false);",
          "    assert_eq!(eq_bool(&Value::Object(Default::default()), false), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Default::default()); // Assuming a default empty Map",
          "    let other = true;",
          "    eq_bool(&value, other);",
          "    assert_eq!(eq_bool(&Value::Bool(true), true), true);",
          "    assert_eq!(eq_bool(&Value::Bool(false), true), false);",
          "    assert_eq!(eq_bool(&Value::Null, true), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(1)), true), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"true\")), true), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), true), false);",
          "    assert_eq!(eq_bool(&Value::Object(Default::default()), true), false);",
          "    assert_eq!(eq_bool(&Value::Bool(true), false), false);",
          "    assert_eq!(eq_bool(&Value::Bool(false), false), true);",
          "    assert_eq!(eq_bool(&Value::Null, false), false);",
          "    assert_eq!(eq_bool(&Value::Number(Number::from(0)), false), false);",
          "    assert_eq!(eq_bool(&Value::String(String::from(\"false\")), false), false);",
          "    assert_eq!(eq_bool(&Value::Array(vec![]), false), false);",
          "    assert_eq!(eq_bool(&Value::Object(Default::default()), false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]