[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(1.0),",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), Some(1.0));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(1.0),",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), Some(1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-1.0),",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), Some(-1.0_f32));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-1.0),",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), Some(-1.0_f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f32::MAX as f64), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), Some(f32::MAX));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f32::MAX as f64), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), Some(f32::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-f32::MAX as f64), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Some(-f32::MAX));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-f32::MAX as f64), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(_ , Some(-f32::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f32::MIN as f64), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), Some(f32::MIN));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f32::MIN as f64), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), Some(f32::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-(f32::MIN as f64)), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), Some(-(f32::MIN as f32)));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-(f32::MIN as f64)), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), Some(-(f32::MIN as f32)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f64::INFINITY), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), None);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f64::INFINITY), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f64::NEG_INFINITY), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), None);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f64::NEG_INFINITY), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f64::NAN), ",
          "    };",
          "    let _ = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f32(), None);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(f64::NAN), ",
          "    };",
          "    let _ = number.as_f32();",
          "    assert_eq!(number.as_f32(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]