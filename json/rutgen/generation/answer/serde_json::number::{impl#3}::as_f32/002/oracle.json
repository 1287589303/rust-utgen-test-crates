[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let _result = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-1.0_f32));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let _result = number.as_f32();",
          "    assert_eq!(_result, Some(-1.0_f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-2147483648) };",
          "    let _result = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-2147483648.0_f32));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-2147483648) };",
          "    let _result = number.as_f32();",
          "    assert_eq!(_result, Some(-2147483648.0_f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-1000) };",
          "    let _result = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-1000.0_f32));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-1000) };",
          "    let _result = number.as_f32();",
          "    assert_eq!(_result, Some(-1000.0_f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-100) };",
          "    let _result = number.as_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-100.0f32));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-100) };",
          "    let _result = number.as_f32();",
          "    assert_eq!(_result, Some(-100.0f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]