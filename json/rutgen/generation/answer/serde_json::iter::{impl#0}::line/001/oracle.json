[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'H'), Ok(b'e'), Ok(b'l'), Ok(b'l'), Ok(b'o'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    lci.next();",
          "    lci.next();",
          "    lci.next();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);"
        ],
        "code": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'H'), Ok(b'e'), Ok(b'l'), Ok(b'l'), Ok(b'o'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    lci.next();",
          "    lci.next();",
          "    lci.next();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n'),",
          "                    Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "}"
        ],
        "oracle": [
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n')], index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2')] , index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2')] , index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'\\n'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'3')] , index: 0 });",
          "    assert_eq!(lci.line(), 2);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2')] , index: 0 });",
          "    assert_eq!(lci.line(), 1);"
        ],
        "code": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n'),",
          "                    Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n')], index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2')] , index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2')] , index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'\\n'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'3')] , index: 0 });",
          "    assert_eq!(lci.line(), 2);",
          "    ",
          "    let lci = LineColIterator::new(SimpleIterator { data: vec![Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'1'), Ok(b'\\n'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'2')] , index: 0 });",
          "    assert_eq!(lci.line(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'\\n'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'3'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lci.line(), 1);",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);"
        ],
        "code": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'\\n'), Ok(b'\\n'), Ok(b'L'), Ok(b'i'), Ok(b'n'), Ok(b'e'), Ok(b'3'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "    assert_eq!(lci.line(), 1);",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 1);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    lci.next();",
          "    assert_eq!(lci.line(), 2);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "    lci.next();",
          "    assert_eq!(lci.line(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'#'), Ok(b'@'), Ok(b'&'), Ok(b'\\n'), ",
          "                    Ok(b'F'), Ok(b'o'), Ok(b'o'), Ok(b' '), Ok(b'B'), Ok(b'a'), Ok(b'r'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lci.line(), 1);",
          "    assert_eq!(lci.line(), 1);",
          "    let _ = lci.col();",
          "    let _ = lci.byte_offset();"
        ],
        "code": [
          "{",
          "    struct SimpleIterator {",
          "        data: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SimpleIterator {",
          "        type Item = io::Result<u8>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index].clone();",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let data = vec![Ok(b'#'), Ok(b'@'), Ok(b'&'), Ok(b'\\n'), ",
          "                    Ok(b'F'), Ok(b'o'), Ok(b'o'), Ok(b' '), Ok(b'B'), Ok(b'a'), Ok(b'r'), Ok(b'\\n')];",
          "    let iter = SimpleIterator { data, index: 0 };",
          "    let lci = LineColIterator::new(iter);",
          "",
          "    let _ = lci.line();",
          "    assert_eq!(lci.line(), 1);",
          "    assert_eq!(lci.line(), 1);",
          "    let _ = lci.col();",
          "    let _ = lci.byte_offset();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]