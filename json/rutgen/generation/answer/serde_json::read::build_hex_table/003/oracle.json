[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 0;",
          "    let result = build_hex_table(shift);",
          "}"
        ],
        "oracle": [
          "    let shift = 0;",
          "    let result = build_hex_table(256);",
          "    assert_eq!(result, [-1; 256]);"
        ],
        "code": [
          "{",
          "    let shift = 0;",
          "    let result = build_hex_table(shift);",
          "    let shift = 0;",
          "    let result = build_hex_table(256);",
          "    assert_eq!(result, [-1; 256]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 1;",
          "    let result = build_hex_table(shift);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 256);",
          "    assert_eq!(result[256], 0);  // This should not exist, as indexes should only be 0-255.",
          "    assert!(result.iter().all(|&val| val >= -1));  // All values should be -1 or greater.",
          "    assert!(result.iter().take(10).all(|&val| val == 0));  // First ten values should correspond to '0'-'9'.",
          "    assert!(result.iter().skip(10).take(6).all(|&val| val == 10));  // Values for 'A'-'F' should all be 10.",
          "    assert!(result.iter().skip(16).take(6).all(|&val| val == 10));  // Values for 'a'-'f' should also all be 10.",
          "    assert_eq!(result[256], 0);  // Check should not include out of bounds (index error)."
        ],
        "code": [
          "{",
          "    let shift = 1;",
          "    let result = build_hex_table(shift);",
          "    assert_eq!(result.len(), 256);",
          "    assert_eq!(result[256], 0);  // This should not exist, as indexes should only be 0-255.",
          "    assert!(result.iter().all(|&val| val >= -1));  // All values should be -1 or greater.",
          "    assert!(result.iter().take(10).all(|&val| val == 0));  // First ten values should correspond to '0'-'9'.",
          "    assert!(result.iter().skip(10).take(6).all(|&val| val == 10));  // Values for 'A'-'F' should all be 10.",
          "    assert!(result.iter().skip(16).take(6).all(|&val| val == 10));  // Values for 'a'-'f' should also all be 10.",
          "    assert_eq!(result[256], 0);  // Check should not include out of bounds (index error).",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 2;",
          "    let result = build_hex_table(shift);",
          "}"
        ],
        "oracle": [
          "    let shift = 2;",
          "    let result = build_hex_table(256);",
          "    assert_eq!(result, [0; 256]);",
          "    assert_eq!(result[0], 0);",
          "    assert_eq!(result[1], 0);",
          "    assert_eq!(result[255], 0);",
          "    assert!(result.iter().all(|&x| x == 0));"
        ],
        "code": [
          "{",
          "    let shift = 2;",
          "    let result = build_hex_table(shift);",
          "    let shift = 2;",
          "    let result = build_hex_table(256);",
          "    assert_eq!(result, [0; 256]);",
          "    assert_eq!(result[0], 0);",
          "    assert_eq!(result[1], 0);",
          "    assert_eq!(result[255], 0);",
          "    assert!(result.iter().all(|&x| x == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 5;",
          "    let result = build_hex_table(shift);",
          "}"
        ],
        "oracle": [
          "    let shift = 5;",
          "    let result = build_hex_table(shift);",
          "    assert_eq!(result.len(), 256);",
          "    assert_eq!(result[0], 0);",
          "    assert_eq!(result[1], 0);",
          "    assert_eq!(result[2], 0);",
          "    assert_eq!(result[3], 0);",
          "    assert_eq!(result[4], 0);",
          "    assert_eq!(result[5], 0);",
          "    assert_eq!(result[10], 32);",
          "    assert_eq!(result[15], 48);",
          "    assert_eq!(result[16], 32);",
          "    assert_eq!(result[255], -1);"
        ],
        "code": [
          "{",
          "    let shift = 5;",
          "    let result = build_hex_table(shift);",
          "    let shift = 5;",
          "    let result = build_hex_table(shift);",
          "    assert_eq!(result.len(), 256);",
          "    assert_eq!(result[0], 0);",
          "    assert_eq!(result[1], 0);",
          "    assert_eq!(result[2], 0);",
          "    assert_eq!(result[3], 0);",
          "    assert_eq!(result[4], 0);",
          "    assert_eq!(result[5], 0);",
          "    assert_eq!(result[10], 32);",
          "    assert_eq!(result[15], 48);",
          "    assert_eq!(result[16], 32);",
          "    assert_eq!(result[255], -1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 10;",
          "    let result = build_hex_table(shift);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [0; 256]);"
        ],
        "code": [
          "{",
          "    let shift = 10;",
          "    let result = build_hex_table(shift);",
          "    assert_eq!(result, [0; 256]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]