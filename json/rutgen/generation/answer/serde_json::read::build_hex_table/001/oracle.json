[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 0;",
          "    let table = build_hex_table(shift);",
          "    assert_eq!(table[0], 0);",
          "    assert_eq!(table[1], 1);",
          "    assert_eq!(table[2], 2);",
          "    assert_eq!(table[3], 3);",
          "    assert_eq!(table[10], 10);",
          "    assert_eq!(table[15], 15);",
          "    assert_eq!(table[16], 16);",
          "    assert_eq!(table[255], -1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(build_hex_table(0)[0], 0);",
          "    assert_eq!(build_hex_table(0)[1], 1);",
          "    assert_eq!(build_hex_table(0)[2], 2);",
          "    assert_eq!(build_hex_table(0)[3], 3);",
          "    assert_eq!(build_hex_table(0)[10], 10);",
          "    assert_eq!(build_hex_table(0)[15], 15);",
          "    assert_eq!(build_hex_table(0)[16], 16);",
          "    assert_eq!(build_hex_table(0)[255], -1);",
          "    assert_eq!(build_hex_table(1)[0], 0);",
          "    assert_eq!(build_hex_table(1)[1], 2);",
          "    assert_eq!(build_hex_table(1)[2], 4);",
          "    assert_eq!(build_hex_table(1)[3], 6);",
          "    assert_eq!(build_hex_table(1)[10], 20);",
          "    assert_eq!(build_hex_table(1)[15], 30);",
          "    assert_eq!(build_hex_table(1)[16], 32);",
          "    assert_eq!(build_hex_table(1)[255], -2);",
          "    assert_eq!(build_hex_table(4)[0], 0);",
          "    assert_eq!(build_hex_table(4)[1], 16);",
          "    assert_eq!(build_hex_table(4)[2], 32);",
          "    assert_eq!(build_hex_table(4)[3], 48);",
          "    assert_eq!(build_hex_table(4)[10], 160);",
          "    assert_eq!(build_hex_table(4)[15], 240);",
          "    assert_eq!(build_hex_table(4)[16], 256);",
          "    assert_eq!(build_hex_table(4)[255], -16);",
          "    assert_eq!(build_hex_table(0)[256], out_of_bounds_value);",
          "    assert_eq!(build_hex_table(0)[257], out_of_bounds_value);",
          "    assert_eq!(build_hex_table(0)[-1], out_of_bounds_value);"
        ],
        "code": [
          "{",
          "    let shift = 0;",
          "    let table = build_hex_table(shift);",
          "    assert_eq!(table[0], 0);",
          "    assert_eq!(table[1], 1);",
          "    assert_eq!(table[2], 2);",
          "    assert_eq!(table[3], 3);",
          "    assert_eq!(table[10], 10);",
          "    assert_eq!(table[15], 15);",
          "    assert_eq!(table[16], 16);",
          "    assert_eq!(table[255], -1);",
          "    assert_eq!(build_hex_table(0)[0], 0);",
          "    assert_eq!(build_hex_table(0)[1], 1);",
          "    assert_eq!(build_hex_table(0)[2], 2);",
          "    assert_eq!(build_hex_table(0)[3], 3);",
          "    assert_eq!(build_hex_table(0)[10], 10);",
          "    assert_eq!(build_hex_table(0)[15], 15);",
          "    assert_eq!(build_hex_table(0)[16], 16);",
          "    assert_eq!(build_hex_table(0)[255], -1);",
          "    assert_eq!(build_hex_table(1)[0], 0);",
          "    assert_eq!(build_hex_table(1)[1], 2);",
          "    assert_eq!(build_hex_table(1)[2], 4);",
          "    assert_eq!(build_hex_table(1)[3], 6);",
          "    assert_eq!(build_hex_table(1)[10], 20);",
          "    assert_eq!(build_hex_table(1)[15], 30);",
          "    assert_eq!(build_hex_table(1)[16], 32);",
          "    assert_eq!(build_hex_table(1)[255], -2);",
          "    assert_eq!(build_hex_table(4)[0], 0);",
          "    assert_eq!(build_hex_table(4)[1], 16);",
          "    assert_eq!(build_hex_table(4)[2], 32);",
          "    assert_eq!(build_hex_table(4)[3], 48);",
          "    assert_eq!(build_hex_table(4)[10], 160);",
          "    assert_eq!(build_hex_table(4)[15], 240);",
          "    assert_eq!(build_hex_table(4)[16], 256);",
          "    assert_eq!(build_hex_table(4)[255], -16);",
          "    assert_eq!(build_hex_table(0)[256], out_of_bounds_value);",
          "    assert_eq!(build_hex_table(0)[257], out_of_bounds_value);",
          "    assert_eq!(build_hex_table(0)[-1], out_of_bounds_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 4;",
          "    let table = build_hex_table(shift);",
          "    assert_eq!(table[0], 0 << 4);",
          "    assert_eq!(table[1], 1 << 4);",
          "    assert_eq!(table[2], 2 << 4);",
          "    assert_eq!(table[3], 3 << 4);",
          "    assert_eq!(table[10], 10 << 4);",
          "    assert_eq!(table[15], 15 << 4);",
          "    assert_eq!(table[16], 16 << 4);",
          "    assert_eq!(table[255], -1 << 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table[0], 0 << 4);",
          "    assert_eq!(table[1], 1 << 4);",
          "    assert_eq!(table[2], 2 << 4);",
          "    assert_eq!(table[3], 3 << 4);",
          "    assert_eq!(table[10], 10 << 4);",
          "    assert_eq!(table[15], 15 << 4);",
          "    assert_eq!(table[16], 16 << 4);",
          "    assert_eq!(table[255], -1 << 4);"
        ],
        "code": [
          "{",
          "    let shift = 4;",
          "    let table = build_hex_table(shift);",
          "    assert_eq!(table[0], 0 << 4);",
          "    assert_eq!(table[1], 1 << 4);",
          "    assert_eq!(table[2], 2 << 4);",
          "    assert_eq!(table[3], 3 << 4);",
          "    assert_eq!(table[10], 10 << 4);",
          "    assert_eq!(table[15], 15 << 4);",
          "    assert_eq!(table[16], 16 << 4);",
          "    assert_eq!(table[255], -1 << 4);",
          "    assert_eq!(table[0], 0 << 4);",
          "    assert_eq!(table[1], 1 << 4);",
          "    assert_eq!(table[2], 2 << 4);",
          "    assert_eq!(table[3], 3 << 4);",
          "    assert_eq!(table[10], 10 << 4);",
          "    assert_eq!(table[15], 15 << 4);",
          "    assert_eq!(table[16], 16 << 4);",
          "    assert_eq!(table[255], -1 << 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shift = 0;",
          "    let table = build_hex_table(shift);",
          "    assert_eq!(table[256], -1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(build_hex_table(0)[0], 0);",
          "    assert_eq!(build_hex_table(0)[1], 1);",
          "    assert_eq!(build_hex_table(0)[2], 2);",
          "    assert_eq!(build_hex_table(0)[3], 3);",
          "    assert_eq!(build_hex_table(0)[4], 4);",
          "    assert_eq!(build_hex_table(0)[5], 5);",
          "    assert_eq!(build_hex_table(0)[6], 6);",
          "    assert_eq!(build_hex_table(0)[7], 7);",
          "    assert_eq!(build_hex_table(0)[8], 8);",
          "    assert_eq!(build_hex_table(0)[9], 9);",
          "    assert_eq!(build_hex_table(0)[10], 10);",
          "    assert_eq!(build_hex_table(0)[11], 11);",
          "    assert_eq!(build_hex_table(0)[12], 12);",
          "    assert_eq!(build_hex_table(0)[13], 13);",
          "    assert_eq!(build_hex_table(0)[14], 14);",
          "    assert_eq!(build_hex_table(0)[15], 15);",
          "    assert_eq!(build_hex_table(0)[16], -1);",
          "    assert_eq!(build_hex_table(0)[255], -1);"
        ],
        "code": [
          "{",
          "    let shift = 0;",
          "    let table = build_hex_table(shift);",
          "    assert_eq!(table[256], -1);",
          "    assert_eq!(build_hex_table(0)[0], 0);",
          "    assert_eq!(build_hex_table(0)[1], 1);",
          "    assert_eq!(build_hex_table(0)[2], 2);",
          "    assert_eq!(build_hex_table(0)[3], 3);",
          "    assert_eq!(build_hex_table(0)[4], 4);",
          "    assert_eq!(build_hex_table(0)[5], 5);",
          "    assert_eq!(build_hex_table(0)[6], 6);",
          "    assert_eq!(build_hex_table(0)[7], 7);",
          "    assert_eq!(build_hex_table(0)[8], 8);",
          "    assert_eq!(build_hex_table(0)[9], 9);",
          "    assert_eq!(build_hex_table(0)[10], 10);",
          "    assert_eq!(build_hex_table(0)[11], 11);",
          "    assert_eq!(build_hex_table(0)[12], 12);",
          "    assert_eq!(build_hex_table(0)[13], 13);",
          "    assert_eq!(build_hex_table(0)[14], 14);",
          "    assert_eq!(build_hex_table(0)[15], 15);",
          "    assert_eq!(build_hex_table(0)[16], -1);",
          "    assert_eq!(build_hex_table(0)[255], -1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]