[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"test_key\";",
          "    let value = \"test_value\"; // String implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "}"
        ],
        "oracle": [
          "    assert!(compound.state == State::Empty);",
          "    assert!(matches!(compound, Compound::Map { .. }));",
          "    assert_eq!(key, \"test_key\");",
          "    assert_eq!(value.to_string(), \"test_value\");",
          "    assert!(compound.ser.writer.is_available());",
          "    assert!(compound.ser.formatter.is_initialized());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"test_key\";",
          "    let value = \"test_value\"; // String implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "    assert!(compound.state == State::Empty);",
          "    assert!(matches!(compound, Compound::Map { .. }));",
          "    assert_eq!(key, \"test_key\");",
          "    assert_eq!(value.to_string(), \"test_value\");",
          "    assert!(compound.ser.writer.is_available());",
          "    assert!(compound.ser.formatter.is_initialized());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidType;",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"invalid_key\";",
          "    let value = InvalidType; // InvalidType doesn't implement Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(compound.serialize_field(\"invalid_key\", &InvalidType), Err(Error)));"
        ],
        "code": [
          "{",
          "    struct InvalidType;",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"invalid_key\";",
          "    let value = InvalidType; // InvalidType doesn't implement Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "    assert!(matches!(compound.serialize_field(\"invalid_key\", &InvalidType), Err(Error)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Number { ser: &mut serializer };",
          "    let key = \"numeric_key\";",
          "    let value = 42; // Integer implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compound.serialize_field(\"numeric_key\", &42).is_err(), true);",
          "    assert_eq!(compound.serialize_field(\"another_key\", &3.14).is_err(), true);",
          "    assert_eq!(compound.serialize_field(\"string_key\", &\"Hello\").is_err(), true);",
          "    assert_eq!(compound.serialize_field(\"boolean_key\", &true).is_err(), true);",
          "    assert!(matches!(compound, Compound::Number { .. }));",
          "    assert!(matches!(serializer.writer, TestWriter));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Number { ser: &mut serializer };",
          "    let key = \"numeric_key\";",
          "    let value = 42; // Integer implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "    assert_eq!(compound.serialize_field(\"numeric_key\", &42).is_err(), true);",
          "    assert_eq!(compound.serialize_field(\"another_key\", &3.14).is_err(), true);",
          "    assert_eq!(compound.serialize_field(\"string_key\", &\"Hello\").is_err(), true);",
          "    assert_eq!(compound.serialize_field(\"boolean_key\", &true).is_err(), true);",
          "    assert!(matches!(compound, Compound::Number { .. }));",
          "    assert!(matches!(serializer.writer, TestWriter));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::RawValue { ser: &mut serializer };",
          "    let key = \"raw_key\";",
          "    let value = \"raw_value\"; // String implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compound.end(), Ok(()));",
          "    let key_invalid = \"invalid_key\";",
          "    let value_invalid = 42; // non-serializable type for the test",
          "    assert!(compound.serialize_field(key_invalid, &value_invalid).is_err());",
          "    let uninitialized_compound = Compound::Number { ser: &mut serializer };",
          "    assert!(uninitialized_compound.serialize_field(key, &value).is_err());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::RawValue { ser: &mut serializer };",
          "    let key = \"raw_key\";",
          "    let value = \"raw_value\"; // String implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "    assert_eq!(compound.end(), Ok(()));",
          "    let key_invalid = \"invalid_key\";",
          "    let value_invalid = 42; // non-serializable type for the test",
          "    assert!(compound.serialize_field(key_invalid, &value_invalid).is_err());",
          "    let uninitialized_compound = Compound::Number { ser: &mut serializer };",
          "    assert!(uninitialized_compound.serialize_field(key, &value).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"\"; // Empty string key, should not be valid",
          "    let value = \"test_value\"; ",
          "    let _ = compound.serialize_field(key, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compound.serialize_field(\"\", &\"test_value\"), Err(Error::from(ErrorCode::InvalidKey)));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"\"; // Empty string key, should not be valid",
          "    let value = \"test_value\"; ",
          "    let _ = compound.serialize_field(key, &value);",
          "    assert_eq!(compound.serialize_field(\"\", &\"test_value\"), Err(Error::from(ErrorCode::InvalidKey)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Serialize)]",
          "    struct Nested {",
          "        field: String,",
          "    }",
          "",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"nested_key\";",
          "    let value = Nested { field: String::from(\"nested_value\") }; // Nested struct implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compound.state, State::Empty);",
          "    assert!(compound.next_key.is_none());",
          "    assert!(writer.buffer.is_empty());",
          "    assert!(matches!(compound.ser.writer, TestWriter));",
          "    assert!(matches!(compound.ser.formatter, CompactFormatter));",
          "    assert!(matches!(compound, Compound::Map { .. }));",
          "    assert!(matches!(value, Nested { field: String::from(\"nested_value\") }));",
          "    assert!(compound.serialize_field(key, &value).is_ok());"
        ],
        "code": [
          "{",
          "    #[derive(Serialize)]",
          "    struct Nested {",
          "        field: String,",
          "    }",
          "",
          "    struct TestWriter;",
          "    let mut writer = TestWriter;",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let mut compound = Compound::Map { ser: &mut serializer, state: State::Empty };",
          "    let key = \"nested_key\";",
          "    let value = Nested { field: String::from(\"nested_value\") }; // Nested struct implements Serialize",
          "    let _ = compound.serialize_field(key, &value);",
          "    assert_eq!(compound.state, State::Empty);",
          "    assert!(compound.next_key.is_none());",
          "    assert!(writer.buffer.is_empty());",
          "    assert!(matches!(compound.ser.writer, TestWriter));",
          "    assert!(matches!(compound.ser.formatter, CompactFormatter));",
          "    assert!(matches!(compound, Compound::Map { .. }));",
          "    assert!(matches!(value, Nested { field: String::from(\"nested_value\") }));",
          "    assert!(compound.serialize_field(key, &value).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]