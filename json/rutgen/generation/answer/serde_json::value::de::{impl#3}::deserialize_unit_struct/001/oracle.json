[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BoolVisitor;",
          "    impl<'de> Visitor<'de> for BoolVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Bool(true);",
          "    let visitor = BoolVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyUnitStruct\", visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Bool(true);",
          "    let visitor = BoolVisitor;",
          "    let result = value.deserialize_unit_struct(\"MyUnitStruct\", visitor);",
          "    assert!(result.is_ok());",
          "    let _ = value.deserialize_unit_struct(\"MyUnitStruct\", visitor);",
          "    let expected_value = ();",
          "    assert_eq!(result.unwrap(), expected_value);"
        ],
        "code": [
          "{",
          "    struct BoolVisitor;",
          "    impl<'de> Visitor<'de> for BoolVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Bool(true);",
          "    let visitor = BoolVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyUnitStruct\", visitor);",
          "    let value = Value::Bool(true);",
          "    let visitor = BoolVisitor;",
          "    let result = value.deserialize_unit_struct(\"MyUnitStruct\", visitor);",
          "    assert!(result.is_ok());",
          "    let _ = value.deserialize_unit_struct(\"MyUnitStruct\", visitor);",
          "    let expected_value = ();",
          "    assert_eq!(result.unwrap(), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NullVisitor;",
          "    impl<'de> Visitor<'de> for NullVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Null;",
          "    let visitor = NullVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor).is_ok(), true);",
          "    assert_eq!(value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor).unwrap(), ());",
          "    let result = value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(())));",
          "    assert!(value.deserialize_unit_struct(\"InvalidName\", visitor).unwrap_err().is::<Error>());"
        ],
        "code": [
          "{",
          "    struct NullVisitor;",
          "    impl<'de> Visitor<'de> for NullVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Null;",
          "    let visitor = NullVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor);",
          "    assert_eq!(value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor).is_ok(), true);",
          "    assert_eq!(value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor).unwrap(), ());",
          "    let result = value.deserialize_unit_struct(\"MyNullUnitStruct\", visitor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(())));",
          "    assert!(value.deserialize_unit_struct(\"InvalidName\", visitor).unwrap_err().is::<Error>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NumberVisitor;",
          "    impl<'de> Visitor<'de> for NumberVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Number(Number { n: 0 });",
          "    let visitor = NumberVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor), Ok(()));",
          "    assert!(value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_ok());",
          "    let result = value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(())));",
          "    assert_ne!(value.deserialize_unit_struct(\"OtherStruct\", visitor), Err(Error));",
          "    let empty_value = Value::Null;",
          "    assert!(empty_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let bool_value = Value::Bool(true);",
          "    assert!(bool_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let string_value = Value::String(\"test\".to_string());",
          "    assert!(string_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let array_value = Value::Array(vec![]);",
          "    assert!(array_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let object_value = Value::Object(Map::new());",
          "    assert!(object_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());"
        ],
        "code": [
          "{",
          "    struct NumberVisitor;",
          "    impl<'de> Visitor<'de> for NumberVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Number(Number { n: 0 });",
          "    let visitor = NumberVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor);",
          "    assert_eq!(value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor), Ok(()));",
          "    assert!(value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_ok());",
          "    let result = value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(())));",
          "    assert_ne!(value.deserialize_unit_struct(\"OtherStruct\", visitor), Err(Error));",
          "    let empty_value = Value::Null;",
          "    assert!(empty_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let bool_value = Value::Bool(true);",
          "    assert!(bool_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let string_value = Value::String(\"test\".to_string());",
          "    assert!(string_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let array_value = Value::Array(vec![]);",
          "    assert!(array_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "    let object_value = Value::Object(Map::new());",
          "    assert!(object_value.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StringVisitor;",
          "    impl<'de> Visitor<'de> for StringVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::String(String::from(\"example\"));",
          "    let visitor = StringVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyStringUnitStruct\", visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_unit_struct(\"MyStringUnitStruct\", visitor), Err(Error));",
          "    assert_eq!(value.deserialize_unit_struct(\"\", visitor), Err(Error));",
          "    let value_null = Value::Null;",
          "    assert_eq!(value_null.deserialize_unit_struct(\"MyNullUnitStruct\", visitor), Err(Error));",
          "    let value_bool = Value::Bool(true);",
          "    assert_eq!(value_bool.deserialize_unit_struct(\"MyBoolUnitStruct\", visitor), Err(Error));",
          "    let value_number = Value::Number(Number { n: N });",
          "    assert_eq!(value_number.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor), Err(Error));",
          "    let value_array = Value::Array(vec![]);",
          "    assert_eq!(value_array.deserialize_unit_struct(\"MyArrayUnitStruct\", visitor), Err(Error));",
          "    let value_object = Value::Object(Map::new());",
          "    assert_eq!(value_object.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor), Err(Error));"
        ],
        "code": [
          "{",
          "    struct StringVisitor;",
          "    impl<'de> Visitor<'de> for StringVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::String(String::from(\"example\"));",
          "    let visitor = StringVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyStringUnitStruct\", visitor);",
          "    assert_eq!(value.deserialize_unit_struct(\"MyStringUnitStruct\", visitor), Err(Error));",
          "    assert_eq!(value.deserialize_unit_struct(\"\", visitor), Err(Error));",
          "    let value_null = Value::Null;",
          "    assert_eq!(value_null.deserialize_unit_struct(\"MyNullUnitStruct\", visitor), Err(Error));",
          "    let value_bool = Value::Bool(true);",
          "    assert_eq!(value_bool.deserialize_unit_struct(\"MyBoolUnitStruct\", visitor), Err(Error));",
          "    let value_number = Value::Number(Number { n: N });",
          "    assert_eq!(value_number.deserialize_unit_struct(\"MyNumberUnitStruct\", visitor), Err(Error));",
          "    let value_array = Value::Array(vec![]);",
          "    assert_eq!(value_array.deserialize_unit_struct(\"MyArrayUnitStruct\", visitor), Err(Error));",
          "    let value_object = Value::Object(Map::new());",
          "    assert_eq!(value_object.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor), Err(Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ObjectVisitor;",
          "    impl<'de> Visitor<'de> for ObjectVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let visitor = ObjectVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor), Ok(()));",
          "    assert!(value.deserialize_unit_struct(\"\", visitor).is_ok());",
          "    assert!(value.deserialize_unit_struct(\"AnotherObject\", ObjectVisitor).is_ok());",
          "    assert!(value.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor).is_ok());",
          "    assert!(value.deserialize_unit_struct(\"UnitStructName\", visitor).is_ok());",
          "    assert_eq!(value.deserialize_unit_struct(\"test_unit_struct\", visitor).unwrap(), ());"
        ],
        "code": [
          "{",
          "    struct ObjectVisitor;",
          "    impl<'de> Visitor<'de> for ObjectVisitor {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a unit struct\")",
          "        }",
          "        fn visit_unit(self) -> Result<Self::Value, Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let visitor = ObjectVisitor;",
          "    let _ = value.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor);",
          "    assert_eq!(value.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor), Ok(()));",
          "    assert!(value.deserialize_unit_struct(\"\", visitor).is_ok());",
          "    assert!(value.deserialize_unit_struct(\"AnotherObject\", ObjectVisitor).is_ok());",
          "    assert!(value.deserialize_unit_struct(\"MyObjectUnitStruct\", visitor).is_ok());",
          "    assert!(value.deserialize_unit_struct(\"UnitStructName\", visitor).is_ok());",
          "    assert_eq!(value.deserialize_unit_struct(\"test_unit_struct\", visitor).unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]