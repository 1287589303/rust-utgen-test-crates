[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let num = Number::from_u128(0).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_number(), true);",
          "    assert_eq!(value.as_u64(), Some(0));",
          "    assert_eq!(value.is_i64(), false);",
          "    assert_eq!(value.is_u64(), true);",
          "    assert_eq!(value.is_f64(), false);",
          "    assert_eq!(value.is_boolean(), false);",
          "    assert_eq!(value.is_null(), false);",
          "    assert_eq!(value.as_i64(), None);",
          "    assert_eq!(value.as_f64(), None);",
          "    assert_eq!(value.as_bool(), None);",
          "    assert_eq!(value.as_null(), None);"
        ],
        "code": [
          "{",
          "    let num = Number::from_u128(0).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "    assert_eq!(value.is_number(), true);",
          "    assert_eq!(value.as_u64(), Some(0));",
          "    assert_eq!(value.is_i64(), false);",
          "    assert_eq!(value.is_u64(), true);",
          "    assert_eq!(value.is_f64(), false);",
          "    assert_eq!(value.is_boolean(), false);",
          "    assert_eq!(value.is_null(), false);",
          "    assert_eq!(value.as_i64(), None);",
          "    assert_eq!(value.as_f64(), None);",
          "    assert_eq!(value.as_bool(), None);",
          "    assert_eq!(value.as_null(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let num = Number::from_u128(42).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_u64(), Some(42));"
        ],
        "code": [
          "{",
          "    let num = Number::from_u128(42).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "    assert_eq!(value.as_u64(), Some(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let num = Number::from_u128(u64::MAX as u128).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_u64(), Some(u64::MAX));"
        ],
        "code": [
          "{",
          "    let num = Number::from_u128(u64::MAX as u128).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "    assert_eq!(value.as_u64(), Some(u64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let num = Number::from_u128(u64::MAX as u128 + 1).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_u64(), None);"
        ],
        "code": [
          "{",
          "    let num = Number::from_u128(u64::MAX as u128 + 1).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "    assert_eq!(value.as_u64(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let num = Number::from_u128(u64::MAX as u128).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_u64(), Some(u64::MAX));"
        ],
        "code": [
          "{",
          "    let num = Number::from_u128(u64::MAX as u128).unwrap();",
          "    let value = Value::Number(num);",
          "    value.as_u64();",
          "    assert_eq!(value.as_u64(), Some(u64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]