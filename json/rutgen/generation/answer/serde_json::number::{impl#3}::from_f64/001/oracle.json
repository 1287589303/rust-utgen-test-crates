[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(256.0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(256.0) });"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(256.0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(256.0) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(-256.0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-256.0));",
          "    assert!(result.unwrap().is_i64());",
          "    assert_eq!(result.unwrap().as_i64(), Some(-256));",
          "    assert!(result.unwrap().is_u64() == false);",
          "    assert!(result.unwrap().is_f64());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-256.0));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(-256.0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-256.0));",
          "    assert!(result.unwrap().is_i64());",
          "    assert_eq!(result.unwrap().as_i64(), Some(-256));",
          "    assert!(result.unwrap().is_u64() == false);",
          "    assert!(result.unwrap().is_f64());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-256.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(std::f64::MIN_POSITIVE);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    match result {",
          "    Some(num) => {",
          "    assert!(num.is_f64());",
          "    assert_eq!(num.as_f64(), Some(std::f64::MIN_POSITIVE));",
          "    }",
          "    None => panic!(\"Expected Some(Number), but got None\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(std::f64::MIN_POSITIVE);",
          "    assert!(result.is_some());",
          "    match result {",
          "    Some(num) => {",
          "    assert!(num.is_f64());",
          "    assert_eq!(num.as_f64(), Some(std::f64::MIN_POSITIVE));",
          "    }",
          "    None => panic!(\"Expected Some(Number), but got None\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(1.0e-10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert!(matches!(result, Some(Number { n: N::Float(1.0e-10) })));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(1.0e-10);",
          "    assert_eq!(result.is_some(), true);",
          "    assert!(matches!(result, Some(Number { n: N::Float(1.0e-10) })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(1.0e10);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(1.0e10));",
          "    ",
          "    let result = Number::from_f64(0.0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(0.0));",
          "    ",
          "    let result = Number::from_f64(-3.14);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-3.14));",
          "    ",
          "    let result = Number::from_f64(2.2250738585072014e-308); // smallest positive f64",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(2.2250738585072014e-308));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(1.0e10);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(1.0e10));",
          "    ",
          "    let result = Number::from_f64(0.0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(0.0));",
          "    ",
          "    let result = Number::from_f64(-3.14);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-3.14));",
          "    ",
          "    let result = Number::from_f64(2.2250738585072014e-308); // smallest positive f64",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(2.2250738585072014e-308));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(-0.1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.as_f64(), Some(-0.1));",
          "    assert_eq!(result.as_i64(), None);",
          "    assert_eq!(result.as_u64(), None);",
          "    assert_eq!(result.as_str(), None);",
          "    assert_eq!(result.as_i128(), None);",
          "    assert_eq!(result.as_u128(), None);",
          "    assert_eq!(result.as_f32(), Some(-0.1_f32));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(-0.1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.as_f64(), Some(-0.1));",
          "    assert_eq!(result.as_i64(), None);",
          "    assert_eq!(result.as_u64(), None);",
          "    assert_eq!(result.as_str(), None);",
          "    assert_eq!(result.as_i128(), None);",
          "    assert_eq!(result.as_u128(), None);",
          "    assert_eq!(result.as_f32(), Some(-0.1_f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f64(-1.0e10);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-1.0e10));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f64(-1.0e10);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-1.0e10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]