[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Str(\"unexpected string value\");",
          "    let exp: &dyn de::Expected = &\"integer\"; // example of a valid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    Error::invalid_type(de::Unexpected::Str(\"unexpected string value\"), &\"integer\"); // expected result: Error with message containing \"invalid type: unexpected string value, expected integer\"",
          "    Error::invalid_type(de::Unexpected::Signed(42), &\"boolean\"); // expected result: Error with message containing \"invalid type: unexpected signed value, expected boolean\"",
          "    Error::invalid_type(de::Unexpected::Seq, &\"map\"); // expected result: Error with message containing \"invalid type: unexpected sequence, expected map\""
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Str(\"unexpected string value\");",
          "    let exp: &dyn de::Expected = &\"integer\"; // example of a valid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "    Error::invalid_type(de::Unexpected::Str(\"unexpected string value\"), &\"integer\"); // expected result: Error with message containing \"invalid type: unexpected string value, expected integer\"",
          "    Error::invalid_type(de::Unexpected::Signed(42), &\"boolean\"); // expected result: Error with message containing \"invalid type: unexpected signed value, expected boolean\"",
          "    Error::invalid_type(de::Unexpected::Seq, &\"map\"); // expected result: Error with message containing \"invalid type: unexpected sequence, expected map\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Signed(42);",
          "    let exp: &dyn de::Expected = &\"string\"; // example of an invalid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(42), &\"string\").to_string(), \"invalid type: Signed(42), expected string\");",
          "    assert!(Error::invalid_type(de::Unexpected::Other(\"unexpected\"), &\"string\").to_string().contains(\"invalid type: Other(\\\"unexpected\\\"), expected string\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Map, &\"object\").to_string().contains(\"invalid type: Map, expected object\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Seq, &\"array\").to_string().starts_with(\"invalid type: Seq, expected array\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Bool, &\"boolean\").to_string().ends_with(\"expected boolean\"));"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Signed(42);",
          "    let exp: &dyn de::Expected = &\"string\"; // example of an invalid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(42), &\"string\").to_string(), \"invalid type: Signed(42), expected string\");",
          "    assert!(Error::invalid_type(de::Unexpected::Other(\"unexpected\"), &\"string\").to_string().contains(\"invalid type: Other(\\\"unexpected\\\"), expected string\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Map, &\"object\").to_string().contains(\"invalid type: Map, expected object\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Seq, &\"array\").to_string().starts_with(\"invalid type: Seq, expected array\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Bool, &\"boolean\").to_string().ends_with(\"expected boolean\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Bool(true);",
          "    let exp: &dyn de::Expected = &\"array\"; // example of a valid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert!(Error::invalid_type(de::Unexpected::Bool(true), &\"array\").to_string() == \"invalid type: Bool(true), expected array\");"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Bool(true);",
          "    let exp: &dyn de::Expected = &\"array\"; // example of a valid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "    assert!(Error::invalid_type(de::Unexpected::Bool(true), &\"array\").to_string() == \"invalid type: Bool(true), expected array\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Unit;",
          "    let exp: &dyn de::Expected = &\"object\"; // example of a valid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Error::invalid_type(de::Unexpected::Unit, &\"object\").to_string(), \"invalid type: unit, expected object\");",
          "    assert!(matches!(Error::invalid_type(de::Unexpected::Str(\"test\"), &\"string\"), Error));",
          "    assert!(Error::invalid_type(de::Unexpected::Signed(42), &\"number\").to_string().contains(\"invalid type: signed, expected number\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Map, &\"object\").to_string().contains(\"invalid type: map, expected object\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Seq, &\"array\").to_string().contains(\"invalid type: seq, expected array\"));"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Unit;",
          "    let exp: &dyn de::Expected = &\"object\"; // example of a valid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Unit, &\"object\").to_string(), \"invalid type: unit, expected object\");",
          "    assert!(matches!(Error::invalid_type(de::Unexpected::Str(\"test\"), &\"string\"), Error));",
          "    assert!(Error::invalid_type(de::Unexpected::Signed(42), &\"number\").to_string().contains(\"invalid type: signed, expected number\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Map, &\"object\").to_string().contains(\"invalid type: map, expected object\"));",
          "    assert!(Error::invalid_type(de::Unexpected::Seq, &\"array\").to_string().contains(\"invalid type: seq, expected array\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Float(3.14);",
          "    let exp: &dyn de::Expected = &\"string\"; // example of an invalid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Error::invalid_type(de::Unexpected::Float(3.14), &\"string\").to_string(), \"invalid type: Float(3.14), expected string\");"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Float(3.14);",
          "    let exp: &dyn de::Expected = &\"string\"; // example of an invalid expected type",
          "    Error::invalid_type(unexpected, exp);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Float(3.14), &\"string\").to_string(), \"invalid type: Float(3.14), expected string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Str(\"unexpected string\");",
          "    let exp: &dyn de::Expected = &\"number\";",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Error::invalid_type(de::Unexpected::Str(\"unexpected string\"), &\"number\").to_string(), \"invalid type: unexpected string, expected number\");"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Str(\"unexpected string\");",
          "    let exp: &dyn de::Expected = &\"number\";",
          "    Error::invalid_type(unexpected, exp);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Str(\"unexpected string\"), &\"number\").to_string(), \"invalid type: unexpected string, expected number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Signed(1000);",
          "    let exp: &dyn de::Expected = &\"boolean\"; ",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\"), Error {}));",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\").err.code, ErrorCode::InvalidType);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\").err.line, 0);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\").err.column, 0);"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Signed(1000);",
          "    let exp: &dyn de::Expected = &\"boolean\"; ",
          "    Error::invalid_type(unexpected, exp);",
          "    assert!(matches!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\"), Error {}));",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\").err.code, ErrorCode::InvalidType);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\").err.line, 0);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Signed(1000), &\"boolean\").err.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unexpected = de::Unexpected::Float(500.0);",
          "    let exp: &dyn de::Expected = &\"null\"; ",
          "    Error::invalid_type(unexpected, exp);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Error::invalid_type(de::Unexpected::Float(500.0), &\"null\").to_string(), \"invalid type: Float(500.0), expected null\");"
        ],
        "code": [
          "{",
          "    let unexpected = de::Unexpected::Float(500.0);",
          "    let exp: &dyn de::Expected = &\"null\"; ",
          "    Error::invalid_type(unexpected, exp);",
          "    assert_eq!(Error::invalid_type(de::Unexpected::Float(500.0), &\"null\").to_string(), \"invalid type: Float(500.0), expected null\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]