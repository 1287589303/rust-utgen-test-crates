[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::NumberOutOfRange;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = error_code.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer, \"number out of range\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::NumberOutOfRange;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = error_code.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer, \"number out of range\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::EofWhileParsingValue;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = error_code.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"EOF while parsing a value\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::EofWhileParsingValue;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = error_code.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"EOF while parsing a value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::InvalidNumber;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = error_code.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_code.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.str(), \"invalid number\");",
          "    error_code = ErrorCode::NumberOutOfRange;",
          "    assert_eq!(error_code.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.str(), \"number out of range\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::InvalidNumber;",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = error_code.fmt(&mut formatter);",
          "    assert_eq!(error_code.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.str(), \"invalid number\");",
          "    error_code = ErrorCode::NumberOutOfRange;",
          "    assert_eq!(error_code.fmt(&mut formatter), Ok(()));",
          "    assert_eq!(formatter.str(), \"number out of range\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]