[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::ControlCharacterWhileParsingString;",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", error_code);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::ControlCharacterWhileParsingString;",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", error_code);",
          "    assert_eq!(buffer, \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::ControlCharacterWhileParsingString;",
          "    let _ = error_code.fmt(&mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_code.fmt(&mut fmt::Formatter::new()).unwrap(), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::ControlCharacterWhileParsingString;",
          "    let _ = error_code.fmt(&mut fmt::Formatter::new());",
          "    assert_eq!(error_code.fmt(&mut fmt::Formatter::new()).unwrap(), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]