[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let msg = Box::<str>::from(\"An error occurred\");",
          "    let error_code = ErrorCode::Message(msg);",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    f.write_str(\"An error occurred\");"
        ],
        "code": [
          "{",
          "    let msg = Box::<str>::from(\"An error occurred\");",
          "    let error_code = ErrorCode::Message(msg);",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "    f.write_str(\"An error occurred\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::EofWhileParsingList;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing a list\");",
          "    error_code = ErrorCode::EofWhileParsingObject;",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing an object\");",
          "    error_code = ErrorCode::EofWhileParsingString;",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing a string\");",
          "    error_code = ErrorCode::EofWhileParsingValue;",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing a value\");",
          "    error_code = ErrorCode::ExpectedColon;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `:`\");",
          "    error_code = ErrorCode::ExpectedListCommaOrEnd;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `,` or `]`\");",
          "    error_code = ErrorCode::ExpectedObjectCommaOrEnd;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `,` or `}`\");",
          "    error_code = ErrorCode::ExpectedSomeIdent;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected ident\");",
          "    error_code = ErrorCode::ExpectedSomeValue;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected value\");",
          "    error_code = ErrorCode::ExpectedDoubleQuote;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `\\\"`\");",
          "    error_code = ErrorCode::InvalidEscape;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid escape\");",
          "    error_code = ErrorCode::InvalidNumber;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid number\");",
          "    error_code = ErrorCode::NumberOutOfRange;",
          "    assert_eq!(error_code.fmt(&mut f), \"number out of range\");",
          "    error_code = ErrorCode::InvalidUnicodeCodePoint;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid unicode code point\");",
          "    error_code = ErrorCode::ControlCharacterWhileParsingString;",
          "    assert_eq!(error_code.fmt(&mut f), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    error_code = ErrorCode::KeyMustBeAString;",
          "    assert_eq!(error_code.fmt(&mut f), \"key must be a string\");",
          "    error_code = ErrorCode::ExpectedNumericKey;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid value: expected key to be a number in quotes\");",
          "    error_code = ErrorCode::FloatKeyMustBeFinite;",
          "    assert_eq!(error_code.fmt(&mut f), \"float key must be finite (got NaN or +/-inf)\");",
          "    error_code = ErrorCode::LoneLeadingSurrogateInHexEscape;",
          "    assert_eq!(error_code.fmt(&mut f), \"lone leading surrogate in hex escape\");",
          "    error_code = ErrorCode::TrailingComma;",
          "    assert_eq!(error_code.fmt(&mut f), \"trailing comma\");",
          "    error_code = ErrorCode::TrailingCharacters;",
          "    assert_eq!(error_code.fmt(&mut f), \"trailing characters\");",
          "    error_code = ErrorCode::UnexpectedEndOfHexEscape;",
          "    assert_eq!(error_code.fmt(&mut f), \"unexpected end of hex escape\");",
          "    error_code = ErrorCode::RecursionLimitExceeded;",
          "    assert_eq!(error_code.fmt(&mut f), \"recursion limit exceeded\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::EofWhileParsingList;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing a list\");",
          "    error_code = ErrorCode::EofWhileParsingObject;",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing an object\");",
          "    error_code = ErrorCode::EofWhileParsingString;",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing a string\");",
          "    error_code = ErrorCode::EofWhileParsingValue;",
          "    assert_eq!(error_code.fmt(&mut f), \"EOF while parsing a value\");",
          "    error_code = ErrorCode::ExpectedColon;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `:`\");",
          "    error_code = ErrorCode::ExpectedListCommaOrEnd;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `,` or `]`\");",
          "    error_code = ErrorCode::ExpectedObjectCommaOrEnd;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `,` or `}`\");",
          "    error_code = ErrorCode::ExpectedSomeIdent;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected ident\");",
          "    error_code = ErrorCode::ExpectedSomeValue;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected value\");",
          "    error_code = ErrorCode::ExpectedDoubleQuote;",
          "    assert_eq!(error_code.fmt(&mut f), \"expected `\\\"`\");",
          "    error_code = ErrorCode::InvalidEscape;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid escape\");",
          "    error_code = ErrorCode::InvalidNumber;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid number\");",
          "    error_code = ErrorCode::NumberOutOfRange;",
          "    assert_eq!(error_code.fmt(&mut f), \"number out of range\");",
          "    error_code = ErrorCode::InvalidUnicodeCodePoint;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid unicode code point\");",
          "    error_code = ErrorCode::ControlCharacterWhileParsingString;",
          "    assert_eq!(error_code.fmt(&mut f), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    error_code = ErrorCode::KeyMustBeAString;",
          "    assert_eq!(error_code.fmt(&mut f), \"key must be a string\");",
          "    error_code = ErrorCode::ExpectedNumericKey;",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid value: expected key to be a number in quotes\");",
          "    error_code = ErrorCode::FloatKeyMustBeFinite;",
          "    assert_eq!(error_code.fmt(&mut f), \"float key must be finite (got NaN or +/-inf)\");",
          "    error_code = ErrorCode::LoneLeadingSurrogateInHexEscape;",
          "    assert_eq!(error_code.fmt(&mut f), \"lone leading surrogate in hex escape\");",
          "    error_code = ErrorCode::TrailingComma;",
          "    assert_eq!(error_code.fmt(&mut f), \"trailing comma\");",
          "    error_code = ErrorCode::TrailingCharacters;",
          "    assert_eq!(error_code.fmt(&mut f), \"trailing characters\");",
          "    error_code = ErrorCode::UnexpectedEndOfHexEscape;",
          "    assert_eq!(error_code.fmt(&mut f), \"unexpected end of hex escape\");",
          "    error_code = ErrorCode::RecursionLimitExceeded;",
          "    assert_eq!(error_code.fmt(&mut f), \"recursion limit exceeded\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::EofWhileParsingObject;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    let error_code = ErrorCode::EofWhileParsingList; assert_eq!(error_code.to_string(), \"EOF while parsing a list\");",
          "    let error_code = ErrorCode::EofWhileParsingObject; assert_eq!(error_code.to_string(), \"EOF while parsing an object\");",
          "    let error_code = ErrorCode::EofWhileParsingString; assert_eq!(error_code.to_string(), \"EOF while parsing a string\");",
          "    let error_code = ErrorCode::EofWhileParsingValue; assert_eq!(error_code.to_string(), \"EOF while parsing a value\");",
          "    let error_code = ErrorCode::ExpectedColon; assert_eq!(error_code.to_string(), \"expected `:`\");",
          "    let error_code = ErrorCode::ExpectedListCommaOrEnd; assert_eq!(error_code.to_string(), \"expected `,` or `]`\");",
          "    let error_code = ErrorCode::ExpectedObjectCommaOrEnd; assert_eq!(error_code.to_string(), \"expected `,` or `}`\");",
          "    let error_code = ErrorCode::ExpectedSomeIdent; assert_eq!(error_code.to_string(), \"expected ident\");",
          "    let error_code = ErrorCode::ExpectedSomeValue; assert_eq!(error_code.to_string(), \"expected value\");",
          "    let error_code = ErrorCode::ExpectedDoubleQuote; assert_eq!(error_code.to_string(), \"expected `\\\"`\");",
          "    let error_code = ErrorCode::InvalidEscape; assert_eq!(error_code.to_string(), \"invalid escape\");",
          "    let error_code = ErrorCode::InvalidNumber; assert_eq!(error_code.to_string(), \"invalid number\");",
          "    let error_code = ErrorCode::NumberOutOfRange; assert_eq!(error_code.to_string(), \"number out of range\");",
          "    let error_code = ErrorCode::InvalidUnicodeCodePoint; assert_eq!(error_code.to_string(), \"invalid unicode code point\");",
          "    let error_code = ErrorCode::ControlCharacterWhileParsingString; assert_eq!(error_code.to_string(), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    let error_code = ErrorCode::KeyMustBeAString; assert_eq!(error_code.to_string(), \"key must be a string\");",
          "    let error_code = ErrorCode::ExpectedNumericKey; assert_eq!(error_code.to_string(), \"invalid value: expected key to be a number in quotes\");",
          "    let error_code = ErrorCode::FloatKeyMustBeFinite; assert_eq!(error_code.to_string(), \"float key must be finite (got NaN or +/-inf)\");",
          "    let error_code = ErrorCode::LoneLeadingSurrogateInHexEscape; assert_eq!(error_code.to_string(), \"lone leading surrogate in hex escape\");",
          "    let error_code = ErrorCode::TrailingComma; assert_eq!(error_code.to_string(), \"trailing comma\");",
          "    let error_code = ErrorCode::TrailingCharacters; assert_eq!(error_code.to_string(), \"trailing characters\");",
          "    let error_code = ErrorCode::UnexpectedEndOfHexEscape; assert_eq!(error_code.to_string(), \"unexpected end of hex escape\");",
          "    let error_code = ErrorCode::RecursionLimitExceeded; assert_eq!(error_code.to_string(), \"recursion limit exceeded\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::EofWhileParsingObject;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "    let error_code = ErrorCode::EofWhileParsingList; assert_eq!(error_code.to_string(), \"EOF while parsing a list\");",
          "    let error_code = ErrorCode::EofWhileParsingObject; assert_eq!(error_code.to_string(), \"EOF while parsing an object\");",
          "    let error_code = ErrorCode::EofWhileParsingString; assert_eq!(error_code.to_string(), \"EOF while parsing a string\");",
          "    let error_code = ErrorCode::EofWhileParsingValue; assert_eq!(error_code.to_string(), \"EOF while parsing a value\");",
          "    let error_code = ErrorCode::ExpectedColon; assert_eq!(error_code.to_string(), \"expected `:`\");",
          "    let error_code = ErrorCode::ExpectedListCommaOrEnd; assert_eq!(error_code.to_string(), \"expected `,` or `]`\");",
          "    let error_code = ErrorCode::ExpectedObjectCommaOrEnd; assert_eq!(error_code.to_string(), \"expected `,` or `}`\");",
          "    let error_code = ErrorCode::ExpectedSomeIdent; assert_eq!(error_code.to_string(), \"expected ident\");",
          "    let error_code = ErrorCode::ExpectedSomeValue; assert_eq!(error_code.to_string(), \"expected value\");",
          "    let error_code = ErrorCode::ExpectedDoubleQuote; assert_eq!(error_code.to_string(), \"expected `\\\"`\");",
          "    let error_code = ErrorCode::InvalidEscape; assert_eq!(error_code.to_string(), \"invalid escape\");",
          "    let error_code = ErrorCode::InvalidNumber; assert_eq!(error_code.to_string(), \"invalid number\");",
          "    let error_code = ErrorCode::NumberOutOfRange; assert_eq!(error_code.to_string(), \"number out of range\");",
          "    let error_code = ErrorCode::InvalidUnicodeCodePoint; assert_eq!(error_code.to_string(), \"invalid unicode code point\");",
          "    let error_code = ErrorCode::ControlCharacterWhileParsingString; assert_eq!(error_code.to_string(), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    let error_code = ErrorCode::KeyMustBeAString; assert_eq!(error_code.to_string(), \"key must be a string\");",
          "    let error_code = ErrorCode::ExpectedNumericKey; assert_eq!(error_code.to_string(), \"invalid value: expected key to be a number in quotes\");",
          "    let error_code = ErrorCode::FloatKeyMustBeFinite; assert_eq!(error_code.to_string(), \"float key must be finite (got NaN or +/-inf)\");",
          "    let error_code = ErrorCode::LoneLeadingSurrogateInHexEscape; assert_eq!(error_code.to_string(), \"lone leading surrogate in hex escape\");",
          "    let error_code = ErrorCode::TrailingComma; assert_eq!(error_code.to_string(), \"trailing comma\");",
          "    let error_code = ErrorCode::TrailingCharacters; assert_eq!(error_code.to_string(), \"trailing characters\");",
          "    let error_code = ErrorCode::UnexpectedEndOfHexEscape; assert_eq!(error_code.to_string(), \"unexpected end of hex escape\");",
          "    let error_code = ErrorCode::RecursionLimitExceeded; assert_eq!(error_code.to_string(), \"recursion limit exceeded\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::InvalidNumber;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_code.fmt(&mut f), \"invalid number\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::InvalidNumber;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "    assert_eq!(error_code.fmt(&mut f), \"invalid number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::TrailingCharacters;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_code.fmt(&mut f), fmt::Result::Ok);",
          "    assert_eq!(f.as_str(), \"trailing characters\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::TrailingCharacters;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "    assert_eq!(error_code.fmt(&mut f), fmt::Result::Ok);",
          "    assert_eq!(f.as_str(), \"trailing characters\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_code = ErrorCode::RecursionLimitExceeded;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    error_code.fmt(&mut f); assert_eq!(f.to_string(), \"recursion limit exceeded\");",
          "    error_code = ErrorCode::Message(Box::from(\"An error occurred\")); error_code.fmt(&mut f); assert_eq!(f.to_string(), \"An error occurred\");",
          "    error_code = ErrorCode::EofWhileParsingList; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing a list\");",
          "    error_code = ErrorCode::EofWhileParsingObject; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing an object\");",
          "    error_code = ErrorCode::EofWhileParsingString; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing a string\");",
          "    error_code = ErrorCode::EofWhileParsingValue; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing a value\");",
          "    error_code = ErrorCode::ExpectedColon; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `:`\");",
          "    error_code = ErrorCode::ExpectedListCommaOrEnd; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `,` or `]`\");",
          "    error_code = ErrorCode::ExpectedObjectCommaOrEnd; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `,` or `}`\");",
          "    error_code = ErrorCode::ExpectedSomeIdent; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected ident\");",
          "    error_code = ErrorCode::ExpectedSomeValue; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected value\");",
          "    error_code = ErrorCode::ExpectedDoubleQuote; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `\\\"`\");",
          "    error_code = ErrorCode::InvalidEscape; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid escape\");",
          "    error_code = ErrorCode::InvalidNumber; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid number\");",
          "    error_code = ErrorCode::NumberOutOfRange; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"number out of range\");",
          "    error_code = ErrorCode::InvalidUnicodeCodePoint; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid unicode code point\");",
          "    error_code = ErrorCode::ControlCharacterWhileParsingString; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    error_code = ErrorCode::KeyMustBeAString; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"key must be a string\");",
          "    error_code = ErrorCode::ExpectedNumericKey; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid value: expected key to be a number in quotes\");",
          "    error_code = ErrorCode::FloatKeyMustBeFinite; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"float key must be finite (got NaN or +/-inf)\");",
          "    error_code = ErrorCode::LoneLeadingSurrogateInHexEscape; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"lone leading surrogate in hex escape\");",
          "    error_code = ErrorCode::TrailingComma; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"trailing comma\");",
          "    error_code = ErrorCode::TrailingCharacters; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"trailing characters\");",
          "    error_code = ErrorCode::UnexpectedEndOfHexEscape; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"unexpected end of hex escape\");"
        ],
        "code": [
          "{",
          "    let error_code = ErrorCode::RecursionLimitExceeded;",
          "    let mut f = fmt::Formatter::default();",
          "    error_code.fmt(&mut f);",
          "    error_code.fmt(&mut f); assert_eq!(f.to_string(), \"recursion limit exceeded\");",
          "    error_code = ErrorCode::Message(Box::from(\"An error occurred\")); error_code.fmt(&mut f); assert_eq!(f.to_string(), \"An error occurred\");",
          "    error_code = ErrorCode::EofWhileParsingList; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing a list\");",
          "    error_code = ErrorCode::EofWhileParsingObject; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing an object\");",
          "    error_code = ErrorCode::EofWhileParsingString; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing a string\");",
          "    error_code = ErrorCode::EofWhileParsingValue; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"EOF while parsing a value\");",
          "    error_code = ErrorCode::ExpectedColon; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `:`\");",
          "    error_code = ErrorCode::ExpectedListCommaOrEnd; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `,` or `]`\");",
          "    error_code = ErrorCode::ExpectedObjectCommaOrEnd; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `,` or `}`\");",
          "    error_code = ErrorCode::ExpectedSomeIdent; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected ident\");",
          "    error_code = ErrorCode::ExpectedSomeValue; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected value\");",
          "    error_code = ErrorCode::ExpectedDoubleQuote; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"expected `\\\"`\");",
          "    error_code = ErrorCode::InvalidEscape; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid escape\");",
          "    error_code = ErrorCode::InvalidNumber; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid number\");",
          "    error_code = ErrorCode::NumberOutOfRange; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"number out of range\");",
          "    error_code = ErrorCode::InvalidUnicodeCodePoint; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid unicode code point\");",
          "    error_code = ErrorCode::ControlCharacterWhileParsingString; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    error_code = ErrorCode::KeyMustBeAString; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"key must be a string\");",
          "    error_code = ErrorCode::ExpectedNumericKey; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"invalid value: expected key to be a number in quotes\");",
          "    error_code = ErrorCode::FloatKeyMustBeFinite; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"float key must be finite (got NaN or +/-inf)\");",
          "    error_code = ErrorCode::LoneLeadingSurrogateInHexEscape; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"lone leading surrogate in hex escape\");",
          "    error_code = ErrorCode::TrailingComma; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"trailing comma\");",
          "    error_code = ErrorCode::TrailingCharacters; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"trailing characters\");",
          "    error_code = ErrorCode::UnexpectedEndOfHexEscape; error_code.fmt(&mut f); assert_eq!(f.to_string(), \"unexpected end of hex escape\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]