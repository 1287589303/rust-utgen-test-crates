[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Formatter for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            fmt::Result::Ok(())",
          "        }",
          "    }",
          "",
          "    let error_code = ErrorCode::InvalidUnicodeCodePoint;",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = error_code.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_code.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"invalid unicode code point\").is_ok(), true);",
          "    assert_eq!(error_code.to_string(), \"invalid unicode code point\");"
        ],
        "code": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Formatter for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            fmt::Result::Ok(())",
          "        }",
          "    }",
          "",
          "    let error_code = ErrorCode::InvalidUnicodeCodePoint;",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = error_code.fmt(&mut formatter);",
          "    assert_eq!(error_code.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.write_str(\"invalid unicode code point\").is_ok(), true);",
          "    assert_eq!(error_code.to_string(), \"invalid unicode code point\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Formatter for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            fmt::Result::Ok(())",
          "        }",
          "    }",
          "",
          "    let error_code = ErrorCode::Message(Box::from(\"Test message\"));",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = error_code.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingList), \"EOF while parsing a list\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingObject), \"EOF while parsing an object\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingString), \"EOF while parsing a string\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingValue), \"EOF while parsing a value\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedColon), \"expected `:`\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedListCommaOrEnd), \"expected `,` or `]\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedObjectCommaOrEnd), \"expected `,` or `}`\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedSomeIdent), \"expected ident\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedSomeValue), \"expected value\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedDoubleQuote), \"expected `\\\"`\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::InvalidEscape), \"invalid escape\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::InvalidNumber), \"invalid number\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::NumberOutOfRange), \"number out of range\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::InvalidUnicodeCodePoint), \"invalid unicode code point\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ControlCharacterWhileParsingString), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::KeyMustBeAString), \"key must be a string\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedNumericKey), \"invalid value: expected key to be a number in quotes\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::FloatKeyMustBeFinite), \"float key must be finite (got NaN or +/-inf)\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::LoneLeadingSurrogateInHexEscape), \"lone leading surrogate in hex escape\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::TrailingComma), \"trailing comma\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::TrailingCharacters), \"trailing characters\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::UnexpectedEndOfHexEscape), \"unexpected end of hex escape\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::RecursionLimitExceeded), \"recursion limit exceeded\");"
        ],
        "code": [
          "{",
          "    struct DummyFormatter;",
          "",
          "    impl fmt::Formatter for DummyFormatter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            fmt::Result::Ok(())",
          "        }",
          "    }",
          "",
          "    let error_code = ErrorCode::Message(Box::from(\"Test message\"));",
          "    let mut formatter = DummyFormatter;",
          "",
          "    let _ = error_code.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingList), \"EOF while parsing a list\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingObject), \"EOF while parsing an object\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingString), \"EOF while parsing a string\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::EofWhileParsingValue), \"EOF while parsing a value\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedColon), \"expected `:`\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedListCommaOrEnd), \"expected `,` or `]\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedObjectCommaOrEnd), \"expected `,` or `}`\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedSomeIdent), \"expected ident\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedSomeValue), \"expected value\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedDoubleQuote), \"expected `\\\"`\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::InvalidEscape), \"invalid escape\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::InvalidNumber), \"invalid number\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::NumberOutOfRange), \"number out of range\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::InvalidUnicodeCodePoint), \"invalid unicode code point\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ControlCharacterWhileParsingString), \"control character (\\\\u0000-\\\\u001F) found while parsing a string\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::KeyMustBeAString), \"key must be a string\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::ExpectedNumericKey), \"invalid value: expected key to be a number in quotes\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::FloatKeyMustBeFinite), \"float key must be finite (got NaN or +/-inf)\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::LoneLeadingSurrogateInHexEscape), \"lone leading surrogate in hex escape\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::TrailingComma), \"trailing comma\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::TrailingCharacters), \"trailing characters\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::UnexpectedEndOfHexEscape), \"unexpected end of hex escape\");",
          "    assert_eq!(format!(\"{}\", ErrorCode::RecursionLimitExceeded), \"recursion limit exceeded\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]