[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = -128i8;",
          "    let _result = serializer.serialize_i8(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = -128i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 0i8;",
          "    let _result = serializer.serialize_i8(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(0i8).to_owned()));",
          "    let value = 1i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(1i8).to_owned()));",
          "    let value = -1i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(-1i8).to_owned()));",
          "    let value = 127i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(127i8).to_owned()));",
          "    let value = -128i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(-128i8).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 0i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(0i8).to_owned()));",
          "    let value = 1i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(1i8).to_owned()));",
          "    let value = -1i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(-1i8).to_owned()));",
          "    let value = 127i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(127i8).to_owned()));",
          "    let value = -128i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(-128i8).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 127i8;",
          "    let _result = serializer.serialize_i8(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 127i8;",
          "    let _result = serializer.serialize_i8(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]