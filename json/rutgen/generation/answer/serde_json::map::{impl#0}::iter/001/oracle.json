[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = Map::new();",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    let map = Map::new();",
          "    let iter = map.iter();",
          "    assert!(iter.iter == map.map.iter());"
        ],
        "code": [
          "{",
          "    let map = Map::new();",
          "    let iter = map.iter();",
          "    let map = Map::new();",
          "    let iter = map.iter();",
          "    assert!(iter.iter == map.map.iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter, map.map.iter());",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::Bool(true))));",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_none());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let iter = map.iter();",
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter, map.map.iter());",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::Bool(true))));",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_none());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(42)));",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.iter().count() == 2);",
          "    assert_eq!(iter.iter().next().unwrap().0, \"key1\");",
          "    assert_eq!(iter.iter().nth(1).unwrap().0, \"key2\");",
          "    assert_eq!(iter.iter().next().unwrap().1, &Value::Bool(true));",
          "    assert_eq!(iter.iter().nth(1).unwrap().1, &Value::Number(Number::from(42)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(42)));",
          "    let iter = map.iter();",
          "    assert!(iter.iter().count() == 2);",
          "    assert_eq!(iter.iter().next().unwrap().0, \"key1\");",
          "    assert_eq!(iter.iter().nth(1).unwrap().0, \"key2\");",
          "    assert_eq!(iter.iter().next().unwrap().1, &Value::Bool(true));",
          "    assert_eq!(iter.iter().nth(1).unwrap().1, &Value::Number(Number::from(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    map.insert(\"key2\".to_string(), Value::Bool(false));",
          "    map.insert(\"key3\".to_string(), Value::Number(Number::from(3.14)));",
          "    map.insert(\"key4\".to_string(), Value::String(\"example\".to_string()));",
          "    map.insert(\"key5\".to_string(), Value::Array(vec![Value::String(\"item\".to_string())]));",
          "    map.insert(\"key6\".to_string(), Value::Object(Map::new()));",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.len(), 6);",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::Null)));",
          "    assert_eq!(iter.iter.next(), Some((&\"key2\".to_string(), &Value::Bool(false))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key3\".to_string(), &Value::Number(Number::from(3.14)))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key4\".to_string(), &Value::String(\"example\".to_string()))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key5\".to_string(), &Value::Array(vec![Value::String(\"item\".to_string())]))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key6\".to_string(), &Value::Object(Map::new()))));",
          "    assert_eq!(iter.iter.next(), None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    map.insert(\"key2\".to_string(), Value::Bool(false));",
          "    map.insert(\"key3\".to_string(), Value::Number(Number::from(3.14)));",
          "    map.insert(\"key4\".to_string(), Value::String(\"example\".to_string()));",
          "    map.insert(\"key5\".to_string(), Value::Array(vec![Value::String(\"item\".to_string())]));",
          "    map.insert(\"key6\".to_string(), Value::Object(Map::new()));",
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter.len(), 6);",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::Null)));",
          "    assert_eq!(iter.iter.next(), Some((&\"key2\".to_string(), &Value::Bool(false))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key3\".to_string(), &Value::Number(Number::from(3.14)))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key4\".to_string(), &Value::String(\"example\".to_string()))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key5\".to_string(), &Value::Array(vec![Value::String(\"item\".to_string())]))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key6\".to_string(), &Value::Object(Map::new()))));",
          "    assert_eq!(iter.iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::with_capacity(10);",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::with_capacity(10);",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
          "    let iter = map.iter();",
          "    assert!(!iter.iter.is_empty());",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key1\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &Value::Number(Number::from(1)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::with_capacity(10);",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
          "    let iter = map.iter();",
          "    let mut map = Map::with_capacity(10);",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
          "    let iter = map.iter();",
          "    assert!(!iter.iter.is_empty());",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key1\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &Value::Number(Number::from(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"preserve_order\")]"
        ],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::Bool(true))));",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_none());",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.len() == 1);",
          "    drop(iter);",
          "    map.clear();",
          "    assert!(map.is_empty() == true);",
          "    assert!(map.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::Bool(true))));",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert!(iter.iter.next().is_some());",
          "    assert!(iter.iter.next().is_none());",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.len() == 1);",
          "    drop(iter);",
          "    map.clear();",
          "    assert!(map.is_empty() == true);",
          "    assert!(map.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"preserve_order\")]"
        ],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(24)));",
          "    map.insert(\"key1\".to_string(), Value::String(\"first\".to_string()));",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.len(), 2);",
          "    assert_eq!(iter.iter.next(), Some((&\"key2\".to_string(), &Value::Number(Number::from(24)))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::String(\"first\".to_string()))));",
          "    assert_eq!(iter.iter.next(), None);",
          "    assert_eq!(iter.iter.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(24)));",
          "    map.insert(\"key1\".to_string(), Value::String(\"first\".to_string()));",
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter.len(), 2);",
          "    assert_eq!(iter.iter.next(), Some((&\"key2\".to_string(), &Value::Number(Number::from(24)))));",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::String(\"first\".to_string()))));",
          "    assert_eq!(iter.iter.next(), None);",
          "    assert_eq!(iter.iter.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"first\".to_string()));",
          "    map.insert(\"key1\".to_string(), Value::String(\"second\".to_string())); // This should overwrite the first",
          "    let iter = map.iter();",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"first\".to_string()));",
          "    map.insert(\"key1\".to_string(), Value::String(\"second\".to_string()));",
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::String(\"second\".to_string()))));",
          "    assert!(iter.iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"first\".to_string()));",
          "    map.insert(\"key1\".to_string(), Value::String(\"second\".to_string())); // This should overwrite the first",
          "    let iter = map.iter();",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"first\".to_string()));",
          "    map.insert(\"key1\".to_string(), Value::String(\"second\".to_string()));",
          "    let iter = map.iter();",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &Value::String(\"second\".to_string()))));",
          "    assert!(iter.iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]