[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let float_value = Value::Number(Number::from_f64(0.0).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(1.0).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(-1.0).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(std::f64::MAX).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(std::f64::MIN).unwrap());",
          "    float_value.is_f64();",
          "}"
        ],
        "oracle": [
          "    assert!(Value::Number(Number::from_f64(0.0).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(1.0).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(-1.0).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(std::f64::MAX).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(std::f64::MIN).unwrap()).is_f64());"
        ],
        "code": [
          "{",
          "    let float_value = Value::Number(Number::from_f64(0.0).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(1.0).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(-1.0).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(std::f64::MAX).unwrap());",
          "    float_value.is_f64();",
          "",
          "    let float_value = Value::Number(Number::from_f64(std::f64::MIN).unwrap());",
          "    float_value.is_f64();",
          "    assert!(Value::Number(Number::from_f64(0.0).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(1.0).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(-1.0).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(std::f64::MAX).unwrap()).is_f64());",
          "    assert!(Value::Number(Number::from_f64(std::f64::MIN).unwrap()).is_f64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let int_value = Value::Number(Number::from_i128(1).unwrap());",
          "    int_value.is_f64();",
          "",
          "    let int_value = Value::Number(Number::from_i128(2_147_483_647).unwrap());",
          "    int_value.is_f64();",
          "",
          "    let int_value = Value::Number(Number::from_i128(-2_147_483_648).unwrap());",
          "    int_value.is_f64();",
          "}"
        ],
        "oracle": [
          "    assert!(Value::Number(Number::from_i128(1).unwrap()).is_f64() == false);",
          "    assert!(Value::Number(Number::from_i128(2_147_483_647).unwrap()).is_f64() == false);",
          "    assert!(Value::Number(Number::from_i128(-2_147_483_648).unwrap()).is_f64() == false);"
        ],
        "code": [
          "{",
          "    let int_value = Value::Number(Number::from_i128(1).unwrap());",
          "    int_value.is_f64();",
          "",
          "    let int_value = Value::Number(Number::from_i128(2_147_483_647).unwrap());",
          "    int_value.is_f64();",
          "",
          "    let int_value = Value::Number(Number::from_i128(-2_147_483_648).unwrap());",
          "    int_value.is_f64();",
          "    assert!(Value::Number(Number::from_i128(1).unwrap()).is_f64() == false);",
          "    assert!(Value::Number(Number::from_i128(2_147_483_647).unwrap()).is_f64() == false);",
          "    assert!(Value::Number(Number::from_i128(-2_147_483_648).unwrap()).is_f64() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nan_value = Value::Number(Number::from_f64(std::f64::NAN).unwrap());",
          "    nan_value.is_f64();",
          "",
          "    let infinity_value = Value::Number(Number::from_f64(std::f64::INFINITY).unwrap());",
          "    infinity_value.is_f64();",
          "",
          "    let neg_infinity_value = Value::Number(Number::from_f64(std::f64::NEG_INFINITY).unwrap());",
          "    neg_infinity_value.is_f64();",
          "}"
        ],
        "oracle": [
          "    assert!(nan_value.is_f64() == false);",
          "    assert!(infinity_value.is_f64() == false);",
          "    assert!(neg_infinity_value.is_f64() == false);"
        ],
        "code": [
          "{",
          "    let nan_value = Value::Number(Number::from_f64(std::f64::NAN).unwrap());",
          "    nan_value.is_f64();",
          "",
          "    let infinity_value = Value::Number(Number::from_f64(std::f64::INFINITY).unwrap());",
          "    infinity_value.is_f64();",
          "",
          "    let neg_infinity_value = Value::Number(Number::from_f64(std::f64::NEG_INFINITY).unwrap());",
          "    neg_infinity_value.is_f64();",
          "    assert!(nan_value.is_f64() == false);",
          "    assert!(infinity_value.is_f64() == false);",
          "    assert!(neg_infinity_value.is_f64() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let int_value = Value::Number(Number::from_i64(64).unwrap());",
          "    int_value.is_f64();",
          "",
          "    let negative_int_value = Value::Number(Number::from_i64(-64).unwrap());",
          "    negative_int_value.is_f64();",
          "}"
        ],
        "oracle": [
          "    assert!(Value::Number(Number::from_f64(256.0).unwrap()).is_f64());",
          "    assert!(!Value::Number(Number::from_i64(64).unwrap()).is_f64());",
          "    assert!(!Value::Number(Number::from_i64(-64).unwrap()).is_f64());"
        ],
        "code": [
          "{",
          "    let int_value = Value::Number(Number::from_i64(64).unwrap());",
          "    int_value.is_f64();",
          "",
          "    let negative_int_value = Value::Number(Number::from_i64(-64).unwrap());",
          "    negative_int_value.is_f64();",
          "    assert!(Value::Number(Number::from_f64(256.0).unwrap()).is_f64());",
          "    assert!(!Value::Number(Number::from_i64(64).unwrap()).is_f64());",
          "    assert!(!Value::Number(Number::from_i64(-64).unwrap()).is_f64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]