[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(0).to_owned()));",
          "    let result = serializer.serialize_u128(1);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(1).to_owned()));",
          "    let result = serializer.serialize_u128(12345678901234567890);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(12345678901234567890).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(0);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(0).to_owned()));",
          "    let result = serializer.serialize_u128(1);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(1).to_owned()));",
          "    let result = serializer.serialize_u128(12345678901234567890);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(12345678901234567890).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(1);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(1);",
          "    assert_eq!(result, Ok(\"1\".to_owned()));",
          "    let result = serializer.serialize_u128(0);",
          "    assert_eq!(result, Ok(\"0\".to_owned()));",
          "    let result = serializer.serialize_u128(12345678901234567890);",
          "    assert_eq!(result, Ok(\"12345678901234567890\".to_owned()));",
          "    let result = serializer.serialize_u128(u128::MAX);",
          "    assert_eq!(result, Ok(\"340282366920938463463374607431768211455\".to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(1);",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(1);",
          "    assert_eq!(result, Ok(\"1\".to_owned()));",
          "    let result = serializer.serialize_u128(0);",
          "    assert_eq!(result, Ok(\"0\".to_owned()));",
          "    let result = serializer.serialize_u128(12345678901234567890);",
          "    assert_eq!(result, Ok(\"12345678901234567890\".to_owned()));",
          "    let result = serializer.serialize_u128(u128::MAX);",
          "    assert_eq!(result, Ok(\"340282366920938463463374607431768211455\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(u128::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(u128::MAX).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(u128::MAX);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(u128::MAX).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(u128::MAX / 2);",
          "}"
        ],
        "oracle": [
          "    let expected = Ok(itoa::Buffer::new().format(u128::MAX / 2).to_owned());",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(u128::MAX / 2);",
          "    let expected = Ok(itoa::Buffer::new().format(u128::MAX / 2).to_owned());",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(123456789123456789123456789123456789);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(123456789123456789123456789123456789).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_u128(123456789123456789123456789123456789);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(123456789123456789123456789123456789).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]