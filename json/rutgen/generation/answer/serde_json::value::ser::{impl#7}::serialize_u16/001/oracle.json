[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 0;",
          "    let _result = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 0;",
          "    let _result = serializer.serialize_u16(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 1;",
          "    let _result = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(1), Ok(itoa::Buffer::new().format(1).to_owned()));",
          "    assert_eq!(serializer.serialize_u16(0), Ok(itoa::Buffer::new().format(0).to_owned()));",
          "    assert_eq!(serializer.serialize_u16(u16::MAX), Ok(itoa::Buffer::new().format(u16::MAX).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 1;",
          "    let _result = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(1), Ok(itoa::Buffer::new().format(1).to_owned()));",
          "    assert_eq!(serializer.serialize_u16(0), Ok(itoa::Buffer::new().format(0).to_owned()));",
          "    assert_eq!(serializer.serialize_u16(u16::MAX), Ok(itoa::Buffer::new().format(u16::MAX).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 32768;",
          "    let _result = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(32768).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 32768;",
          "    let _result = serializer.serialize_u16(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(32768).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 65535;",
          "    let _result = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 65535;",
          "    let _result = serializer.serialize_u16(value);",
          "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 10000;",
          "    let _result = serializer.serialize_u16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.serialize_u16(10000), Ok(itoa::Buffer::new().format(10000).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: u16 = 10000;",
          "    let _result = serializer.serialize_u16(value);",
          "    assert_eq!(serializer.serialize_u16(10000), Ok(itoa::Buffer::new().format(10000).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]