[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = b\"a\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 0;  // Start at the first byte",
          "    let position = reader.position();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 0);"
        ],
        "code": [
          "{",
          "    let slice = b\"a\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 0;  // Start at the first byte",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = b\"hello\\nworld\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 5;  // Position between 'hello' and '\\n'",
          "    let position = reader.position();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 5);",
          "    ",
          "    reader.index = 6;  // Position on the '\\n'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 0);",
          "    ",
          "    reader.index = 7;  // Position on the 'w' of 'world'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 1);",
          "    ",
          "    reader.index = 11;  // Position beyond 'world'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 5);"
        ],
        "code": [
          "{",
          "    let slice = b\"hello\\nworld\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 5;  // Position between 'hello' and '\\n'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 5);",
          "    ",
          "    reader.index = 6;  // Position on the '\\n'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 0);",
          "    ",
          "    reader.index = 7;  // Position on the 'w' of 'world'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 1);",
          "    ",
          "    reader.index = 11;  // Position beyond 'world'",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = b\"first line\\nsecond line\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 10;  // Position at the start of the second line",
          "    let position = reader.position();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position.line, 2);  // Ensure the line number is correct",
          "    assert_eq!(position.column, 0);  // Ensure the column number is correct for the start of the second line",
          "    ",
          "    reader.index = 0;  // Position at the start of the first line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 1);  // Check that line number is 1",
          "    assert_eq!(position.column, 0);  // Check that column number is 0 at the start of the first line",
          "    ",
          "    reader.index = 5;  // Position somewhere in the first line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 1);  // Should still be line 1",
          "    assert_eq!(position.column, 5);  // Column should be 5",
          "    ",
          "    reader.index = 18;  // Position beyond the second line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);  // Should still be line 2",
          "    assert_eq!(position.column, 6);  // Column should reflect position on second line",
          "    ",
          "    reader.index = 22;  // Position after the end of the input slice",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);  // Check that line number remains 2 as this is still in second line",
          "    assert_eq!(position.column, 10);  // Column reflects position after end of second line"
        ],
        "code": [
          "{",
          "    let slice = b\"first line\\nsecond line\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 10;  // Position at the start of the second line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);  // Ensure the line number is correct",
          "    assert_eq!(position.column, 0);  // Ensure the column number is correct for the start of the second line",
          "    ",
          "    reader.index = 0;  // Position at the start of the first line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 1);  // Check that line number is 1",
          "    assert_eq!(position.column, 0);  // Check that column number is 0 at the start of the first line",
          "    ",
          "    reader.index = 5;  // Position somewhere in the first line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 1);  // Should still be line 1",
          "    assert_eq!(position.column, 5);  // Column should be 5",
          "    ",
          "    reader.index = 18;  // Position beyond the second line",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);  // Should still be line 2",
          "    assert_eq!(position.column, 6);  // Column should reflect position on second line",
          "    ",
          "    reader.index = 22;  // Position after the end of the input slice",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 2);  // Check that line number remains 2 as this is still in second line",
          "    assert_eq!(position.column, 10);  // Column reflects position after end of second line",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = b\"line1\\nline2\\nline3\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 12;  // Position at the start of 'line3'",
          "    let position = reader.position();",
          "}"
        ],
        "oracle": [
          "    let slice = b\"line1\\nline2\\nline3\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 12;",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 3);",
          "    assert_eq!(position.column, 0);"
        ],
        "code": [
          "{",
          "    let slice = b\"line1\\nline2\\nline3\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 12;  // Position at the start of 'line3'",
          "    let position = reader.position();",
          "    let slice = b\"line1\\nline2\\nline3\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 12;",
          "    let position = reader.position();",
          "    assert_eq!(position.line, 3);",
          "    assert_eq!(position.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = b\"\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 0;  // Position is at index 0 for an empty slice",
          "    let position = reader.position();",
          "}"
        ],
        "oracle": [
          "    let expected_position = Position { line: 1, column: 0 };",
          "    assert_eq!(position, expected_position);"
        ],
        "code": [
          "{",
          "    let slice = b\"\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 0;  // Position is at index 0 for an empty slice",
          "    let position = reader.position();",
          "    let expected_position = Position { line: 1, column: 0 };",
          "    assert_eq!(position, expected_position);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = b\"line1\\nline2\\nline3\\nline4\\nline5\\nline6\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 25;  // Position in the middle of the 4th line",
          "    let position = reader.position();",
          "}"
        ],
        "oracle": [
          "    let expected_line = 4;",
          "    let expected_column = 0;",
          "    assert_eq!(position.line, expected_line);",
          "    assert_eq!(position.column, expected_column);"
        ],
        "code": [
          "{",
          "    let slice = b\"line1\\nline2\\nline3\\nline4\\nline5\\nline6\";",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = 25;  // Position in the middle of the 4th line",
          "    let position = reader.position();",
          "    let expected_line = 4;",
          "    let expected_column = 0;",
          "    assert_eq!(position.line, expected_line);",
          "    assert_eq!(position.column, expected_column);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]