[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let empty_iter: Vec<(String, Value)> = Vec::new();",
          "    map.extend(empty_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.map.len(), 0);",
          "    assert!(map.map.is_empty());",
          "    let filled_iter: Vec<(String, Value)> = vec![(\"key1\".to_string(), Value::Bool(true))];",
          "    map.extend(filled_iter);",
          "    assert_eq!(map.map.len(), 1);",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::Bool(true)));",
          "    let multi_iter: Vec<(String, Value)> = vec![(\"key2\".to_string(), Value::Number(Number::from(42))), (\"key3\".to_string(), Value::String(\"value\".to_string()))];",
          "    map.extend(multi_iter);",
          "    assert_eq!(map.map.len(), 3);",
          "    assert_eq!(map.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
          "    assert_eq!(map.map.get(\"key3\"), Some(&Value::String(\"value\".to_string())));",
          "    let iter_with_duplicate_keys: Vec<(String, Value)> = vec![(\"key1\".to_string(), Value::Null), (\"key1\".to_string(), Value::String(\"updated\".to_string()))];",
          "    map.extend(iter_with_duplicate_keys);",
          "    assert_eq!(map.map.len(), 3);",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::String(\"updated\".to_string())));"
        ],
        "code": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let empty_iter: Vec<(String, Value)> = Vec::new();",
          "    map.extend(empty_iter);",
          "    assert_eq!(map.map.len(), 0);",
          "    assert!(map.map.is_empty());",
          "    let filled_iter: Vec<(String, Value)> = vec![(\"key1\".to_string(), Value::Bool(true))];",
          "    map.extend(filled_iter);",
          "    assert_eq!(map.map.len(), 1);",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::Bool(true)));",
          "    let multi_iter: Vec<(String, Value)> = vec![(\"key2\".to_string(), Value::Number(Number::from(42))), (\"key3\".to_string(), Value::String(\"value\".to_string()))];",
          "    map.extend(multi_iter);",
          "    assert_eq!(map.map.len(), 3);",
          "    assert_eq!(map.map.get(\"key2\"), Some(&Value::Number(Number::from(42))));",
          "    assert_eq!(map.map.get(\"key3\"), Some(&Value::String(\"value\".to_string())));",
          "    let iter_with_duplicate_keys: Vec<(String, Value)> = vec![(\"key1\".to_string(), Value::Null), (\"key1\".to_string(), Value::String(\"updated\".to_string()))];",
          "    map.extend(iter_with_duplicate_keys);",
          "    assert_eq!(map.map.len(), 3);",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::String(\"updated\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let single_entry = vec![(String::from(\"key1\"), Value::Bool(true))];",
          "    map.extend(single_entry);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let single_entry = vec![(String::from(\"key1\"), Value::Bool(true))];",
          "    map.extend(single_entry);",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let multiple_entries = vec![",
          "        (String::from(\"key1\"), Value::Number(12.into())),",
          "        (String::from(\"key2\"), Value::Null),",
          "        (String::from(\"key3\"), Value::String(String::from(\"text\"))),",
          "    ];",
          "    map.extend(multiple_entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.map.len(), 3);",
          "    assert!(map.map.contains_key(\"key1\"));",
          "    assert!(map.map.contains_key(\"key2\"));",
          "    assert!(map.map.contains_key(\"key3\"));",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::Number(12.into())));",
          "    assert_eq!(map.map.get(\"key2\"), Some(&Value::Null));",
          "    assert_eq!(map.map.get(\"key3\"), Some(&Value::String(String::from(\"text\"))));"
        ],
        "code": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let multiple_entries = vec![",
          "        (String::from(\"key1\"), Value::Number(12.into())),",
          "        (String::from(\"key2\"), Value::Null),",
          "        (String::from(\"key3\"), Value::String(String::from(\"text\"))),",
          "    ];",
          "    map.extend(multiple_entries);",
          "    assert_eq!(map.map.len(), 3);",
          "    assert!(map.map.contains_key(\"key1\"));",
          "    assert!(map.map.contains_key(\"key2\"));",
          "    assert!(map.map.contains_key(\"key3\"));",
          "    assert_eq!(map.map.get(\"key1\"), Some(&Value::Number(12.into())));",
          "    assert_eq!(map.map.get(\"key2\"), Some(&Value::Null));",
          "    assert_eq!(map.map.get(\"key3\"), Some(&Value::String(String::from(\"text\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let diverse_entries = vec![",
          "        (String::from(\"null_key\"), Value::Null),",
          "        (String::from(\"bool_key\"), Value::Bool(false)),",
          "        (String::from(\"number_key\"), Value::Number(10.5.into())),",
          "        (String::from(\"string_key\"), Value::String(String::from(\"example\"))),",
          "        (String::from(\"array_key\"), Value::Array(vec![Value::Number(1.into()), Value::Number(2.into())])),",
          "        (String::from(\"object_key\"), Value::Object(Map { map: MapImpl::new() })),",
          "    ];",
          "    map.extend(diverse_entries);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.map.len(), 6);",
          "    assert!(map.map.contains_key(\"null_key\"));",
          "    assert!(map.map.contains_key(\"bool_key\"));",
          "    assert!(map.map.contains_key(\"number_key\"));",
          "    assert!(map.map.contains_key(\"string_key\"));",
          "    assert!(map.map.contains_key(\"array_key\"));",
          "    assert!(map.map.contains_key(\"object_key\"));",
          "    assert_eq!(map.map[\"null_key\"], Value::Null);",
          "    assert_eq!(map.map[\"bool_key\"], Value::Bool(false));",
          "    assert_eq!(map.map[\"number_key\"], Value::Number(10.5.into()));",
          "    assert_eq!(map.map[\"string_key\"], Value::String(String::from(\"example\")));",
          "    assert_eq!(map.map[\"array_key\"], Value::Array(vec![Value::Number(1.into()), Value::Number(2.into())]));",
          "    assert_eq!(map.map[\"object_key\"], Value::Object(Map { map: MapImpl::new() }));"
        ],
        "code": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    let diverse_entries = vec![",
          "        (String::from(\"null_key\"), Value::Null),",
          "        (String::from(\"bool_key\"), Value::Bool(false)),",
          "        (String::from(\"number_key\"), Value::Number(10.5.into())),",
          "        (String::from(\"string_key\"), Value::String(String::from(\"example\"))),",
          "        (String::from(\"array_key\"), Value::Array(vec![Value::Number(1.into()), Value::Number(2.into())])),",
          "        (String::from(\"object_key\"), Value::Object(Map { map: MapImpl::new() })),",
          "    ];",
          "    map.extend(diverse_entries);",
          "    assert_eq!(map.map.len(), 6);",
          "    assert!(map.map.contains_key(\"null_key\"));",
          "    assert!(map.map.contains_key(\"bool_key\"));",
          "    assert!(map.map.contains_key(\"number_key\"));",
          "    assert!(map.map.contains_key(\"string_key\"));",
          "    assert!(map.map.contains_key(\"array_key\"));",
          "    assert!(map.map.contains_key(\"object_key\"));",
          "    assert_eq!(map.map[\"null_key\"], Value::Null);",
          "    assert_eq!(map.map[\"bool_key\"], Value::Bool(false));",
          "    assert_eq!(map.map[\"number_key\"], Value::Number(10.5.into()));",
          "    assert_eq!(map.map[\"string_key\"], Value::String(String::from(\"example\")));",
          "    assert_eq!(map.map[\"array_key\"], Value::Array(vec![Value::Number(1.into()), Value::Number(2.into())]));",
          "    assert_eq!(map.map[\"object_key\"], Value::Object(Map { map: MapImpl::new() }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]