[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let _ = reader.byte_offset();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.byte_offset(), 0);",
          "    let slice: &[u8] = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 3 };",
          "    assert_eq!(reader.byte_offset(), 3);",
          "    let slice: &[u8] = &[4, 5, 6, 7, 8];",
          "    let mut reader = SliceRead { slice, index: 1 };",
          "    assert_eq!(reader.byte_offset(), 1);",
          "    let slice: &[u8] = &[9];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    assert_eq!(reader.byte_offset(), 0);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let _ = reader.byte_offset();",
          "    assert_eq!(reader.byte_offset(), 0);",
          "    let slice: &[u8] = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 3 };",
          "    assert_eq!(reader.byte_offset(), 3);",
          "    let slice: &[u8] = &[4, 5, 6, 7, 8];",
          "    let mut reader = SliceRead { slice, index: 1 };",
          "    assert_eq!(reader.byte_offset(), 1);",
          "    let slice: &[u8] = &[9];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    assert_eq!(reader.byte_offset(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let _ = reader.byte_offset();",
          "    ",
          "    reader.index = 1;",
          "    let _ = reader.byte_offset();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.byte_offset(), 0);",
          "    reader.index = 1;",
          "    assert_eq!(reader.byte_offset(), 1);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let _ = reader.byte_offset();",
          "    ",
          "    reader.index = 1;",
          "    let _ = reader.byte_offset();",
          "    assert_eq!(reader.byte_offset(), 0);",
          "    reader.index = 1;",
          "    assert_eq!(reader.byte_offset(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let _ = reader.byte_offset();",
          "    ",
          "    for i in 0..slice.len() {",
          "        reader.index = i;",
          "        let _ = reader.byte_offset();",
          "    }",
          "    ",
          "    reader.index = slice.len();",
          "    let _ = reader.byte_offset();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.byte_offset(), 0);",
          "    assert_eq!(reader.byte_offset(), 1);",
          "    assert_eq!(reader.byte_offset(), 2);",
          "    assert_eq!(reader.byte_offset(), 3);",
          "    assert_eq!(reader.byte_offset(), 4);",
          "    assert_eq!(reader.byte_offset(), 5);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let _ = reader.byte_offset();",
          "    ",
          "    for i in 0..slice.len() {",
          "        reader.index = i;",
          "        let _ = reader.byte_offset();",
          "    }",
          "    ",
          "    reader.index = slice.len();",
          "    let _ = reader.byte_offset();",
          "    assert_eq!(reader.byte_offset(), 0);",
          "    assert_eq!(reader.byte_offset(), 1);",
          "    assert_eq!(reader.byte_offset(), 2);",
          "    assert_eq!(reader.byte_offset(), 3);",
          "    assert_eq!(reader.byte_offset(), 4);",
          "    assert_eq!(reader.byte_offset(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 3 };",
          "    let _ = reader.byte_offset();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.byte_offset(), 3);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3];",
          "    let mut reader = SliceRead { slice, index: 3 };",
          "    let _ = reader.byte_offset();",
          "    assert_eq!(reader.byte_offset(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]