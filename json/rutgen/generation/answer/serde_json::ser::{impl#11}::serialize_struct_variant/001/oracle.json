[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = 0;",
          "    let variant = \"test_variant\";",
          "    let len = 10;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err() == key_must_be_a_string()"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = 0;",
          "    let variant = \"test_variant\";",
          "    let len = 10;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "    result.unwrap_err() == key_must_be_a_string()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = u32::MAX;",
          "    let variant = \"test_variant\";",
          "    let len = 20;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = u32::MAX;",
          "    let variant = \"test_variant\";",
          "    let len = 20;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = 1;",
          "    let variant = \"test_variant\";",
          "    let len = 0;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), key_must_be_a_string());"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = 1;",
          "    let variant = \"test_variant\";",
          "    let len = 0;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), key_must_be_a_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = 2;",
          "    let variant = \"test_variant\";",
          "    let len = u64::MAX;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"test_name\";",
          "    let variant_index = 2;",
          "    let variant = \"test_variant\";",
          "    let len = u64::MAX;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"\";",
          "    let variant_index = 0;",
          "    let variant = \"\";",
          "    let len = 5;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(key_must_be_a_string()));"
        ],
        "code": [
          "{",
          "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer: Vec::new(), formatter: CompactFormatter } };",
          "    let name = \"\";",
          "    let variant_index = 0;",
          "    let variant = \"\";",
          "    let len = 5;",
          "",
          "    let result = serializer.serialize_struct_variant(name, variant_index, variant, len);",
          "    assert_eq!(result, Err(key_must_be_a_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]