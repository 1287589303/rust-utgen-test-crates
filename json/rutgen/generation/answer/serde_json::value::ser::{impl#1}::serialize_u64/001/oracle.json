[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u64(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::Number(0.into())));",
          "    result = serializer.serialize_u64(1);",
          "    assert_eq!(result, Ok(Value::Number(1.into())));",
          "    result = serializer.serialize_u64(123456789);",
          "    assert_eq!(result, Ok(Value::Number(123456789.into())));",
          "    result = serializer.serialize_u64(u64::MAX);",
          "    assert_eq!(result, Ok(Value::Number(u64::MAX.into())));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u64(0);",
          "    assert_eq!(result, Ok(Value::Number(0.into())));",
          "    result = serializer.serialize_u64(1);",
          "    assert_eq!(result, Ok(Value::Number(1.into())));",
          "    result = serializer.serialize_u64(123456789);",
          "    assert_eq!(result, Ok(Value::Number(123456789.into())));",
          "    result = serializer.serialize_u64(u64::MAX);",
          "    assert_eq!(result, Ok(Value::Number(u64::MAX.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u64(1_000_000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::Number(1_000_000.into()));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u64(1_000_000);",
          "    assert_eq!(result, Ok(Value::Number(1_000_000.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u64(u64::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Value::Number(u64::MAX.into())));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let result = serializer.serialize_u64(u64::MAX);",
          "    assert_eq!(result, Ok(Value::Number(u64::MAX.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]