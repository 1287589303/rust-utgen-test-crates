[
  {
    "uses": [
      "use std::collections::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct EmptyStruct;",
          "",
          "    let value = EmptyStruct;",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), vec![]);"
        ],
        "code": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct EmptyStruct;",
          "",
          "    let value = EmptyStruct;",
          "    let result = to_vec_pretty(&value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct TestStruct {",
          "        name: String,",
          "        value: i32,",
          "    }",
          "",
          "    let value = TestStruct {",
          "        name: String::from(\"test\"),",
          "        value: 42,",
          "    };",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let writer = result.unwrap();",
          "    assert_eq!(writer, br#\"{\"name\":\"test\",\"value\":42}\"#);"
        ],
        "code": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct TestStruct {",
          "        name: String,",
          "        value: i32,",
          "    }",
          "",
          "    let value = TestStruct {",
          "        name: String::from(\"test\"),",
          "        value: 42,",
          "    };",
          "    let result = to_vec_pretty(&value);",
          "    assert!(result.is_ok());",
          "    let writer = result.unwrap();",
          "    assert_eq!(writer, br#\"{\"name\":\"test\",\"value\":42}\"#);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Vec<i32> = Vec::new();",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Vec::new()));",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_empty());",
          "    assert_eq!(result.unwrap_err(), None);"
        ],
        "code": [
          "{",
          "    let value: Vec<i32> = Vec::new();",
          "    let result = to_vec_pretty(&value);",
          "    assert_eq!(result, Ok(Vec::new()));",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_empty());",
          "    assert_eq!(result.unwrap_err(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = vec![1, 2, 3];",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), b\"[\\n  1,\\n  2,\\n  3\\n]\");"
        ],
        "code": [
          "{",
          "    let value = vec![1, 2, 3];",
          "    let result = to_vec_pretty(&value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), b\"[\\n  1,\\n  2,\\n  3\\n]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "",
          "    let value: HashMap<String, String> = HashMap::new();",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap().len(), 0);",
          "    assert!(result.unwrap().is_empty());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(result.unwrap().contains(&b'{'));"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "",
          "    let value: HashMap<String, String> = HashMap::new();",
          "    let result = to_vec_pretty(&value);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap().len(), 0);",
          "    assert!(result.unwrap().is_empty());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(result.unwrap().contains(&b'{'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashMap;",
          "",
          "    let mut value = HashMap::new();",
          "    value.insert(String::from(\"key1\"), String::from(\"value1\"));",
          "    value.insert(String::from(\"key2\"), String::from(\"value2\"));",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let writer = result.unwrap();",
          "    assert_eq!(writer, b\"{\\n  \\\"key1\\\": \\\"value1\\\",\\n  \\\"key2\\\": \\\"value2\\\"\\n}\");"
        ],
        "code": [
          "{",
          "    use std::collections::HashMap;",
          "",
          "    let mut value = HashMap::new();",
          "    value.insert(String::from(\"key1\"), String::from(\"value1\"));",
          "    value.insert(String::from(\"key2\"), String::from(\"value2\"));",
          "    let result = to_vec_pretty(&value);",
          "    assert!(result.is_ok());",
          "    let writer = result.unwrap();",
          "    assert_eq!(writer, b\"{\\n  \\\"key1\\\": \\\"value1\\\",\\n  \\\"key2\\\": \\\"value2\\\"\\n}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct InnerStruct {",
          "        inner_value: String,",
          "    }",
          "",
          "    #[derive(serde::Serialize)]",
          "    struct OuterStruct {",
          "        inner: InnerStruct,",
          "        outer_value: i32,",
          "    }",
          "",
          "    let value = OuterStruct {",
          "        inner: InnerStruct {",
          "            inner_value: String::from(\"inner\"),",
          "        },",
          "        outer_value: 100,",
          "    };",
          "    let result = to_vec_pretty(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let expected_output = br#\"{ \"inner\": { \"inner_value\": \"inner\" }, \"outer_value\": 100 }\"#;",
          "    assert_eq!(result.unwrap(), expected_output.to_vec());"
        ],
        "code": [
          "{",
          "    #[derive(serde::Serialize)]",
          "    struct InnerStruct {",
          "        inner_value: String,",
          "    }",
          "",
          "    #[derive(serde::Serialize)]",
          "    struct OuterStruct {",
          "        inner: InnerStruct,",
          "        outer_value: i32,",
          "    }",
          "",
          "    let value = OuterStruct {",
          "        inner: InnerStruct {",
          "            inner_value: String::from(\"inner\"),",
          "        },",
          "        outer_value: 100,",
          "    };",
          "    let result = to_vec_pretty(&value);",
          "    assert!(result.is_ok());",
          "    let expected_output = br#\"{ \"inner\": { \"inner_value\": \"inner\" }, \"outer_value\": 100 }\"#;",
          "    assert_eq!(result.unwrap(), expected_output.to_vec());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]