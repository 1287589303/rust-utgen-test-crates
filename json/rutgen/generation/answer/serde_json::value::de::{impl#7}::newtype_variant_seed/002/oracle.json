[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Seed;",
          "",
          "    impl<'de> DeserializeSeed<'de> for Seed {",
          "        type Value = ();",
          "        fn deserialize<D>(self, _: D) -> Result<Self::Value, Error>",
          "        where",
          "            D: Deserializer<'de>,",
          "        {",
          "            // Implementation not needed for this test",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantDeserializer { value: None };",
          "    let seed = Seed;",
          "    let _result = deserializer.newtype_variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(serde::de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\")));"
        ],
        "code": [
          "{",
          "    struct Seed;",
          "",
          "    impl<'de> DeserializeSeed<'de> for Seed {",
          "        type Value = ();",
          "        fn deserialize<D>(self, _: D) -> Result<Self::Value, Error>",
          "        where",
          "            D: Deserializer<'de>,",
          "        {",
          "            // Implementation not needed for this test",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let deserializer = VariantDeserializer { value: None };",
          "    let seed = Seed;",
          "    let _result = deserializer.newtype_variant_seed(seed);",
          "    assert_eq!(_result, Err(serde::de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]