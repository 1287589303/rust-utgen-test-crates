[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![(\"key\".to_owned(), Value::String(\"value\".to_owned()))]) ",
          "    });",
          "",
          "    let _ = json_object[\"key\"];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_object[\"key\"], Value::String(\"value\".to_owned()));",
          "    assert_eq!(json_object[\"non_existing_key\"], Value::Null);",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"subkey\"], Value::Null);"
        ],
        "code": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![(\"key\".to_owned(), Value::String(\"value\".to_owned()))]) ",
          "    });",
          "",
          "    let _ = json_object[\"key\"];",
          "    assert_eq!(json_object[\"key\"], Value::String(\"value\".to_owned()));",
          "    assert_eq!(json_object[\"non_existing_key\"], Value::Null);",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"subkey\"], Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![(\"key\".to_owned(), Value::String(\"value\".to_owned()))]) ",
          "    });",
          "",
          "    let _ = json_object[\"invalid_key\"];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_object[\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"], Value::String(\"value\".to_owned()));",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"invalid_subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][1], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"key\"], Value::Null);"
        ],
        "code": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![(\"key\".to_owned(), Value::String(\"value\".to_owned()))]) ",
          "    });",
          "",
          "    let _ = json_object[\"invalid_key\"];",
          "    assert_eq!(json_object[\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"], Value::String(\"value\".to_owned()));",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"invalid_subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][1], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"key\"], Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_array = Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned())]);",
          "",
          "    let _ = json_array[0];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_array[0], Value::String(\"first\".to_owned()));",
          "    assert_eq!(json_array[1], Value::String(\"second\".to_owned()));",
          "    assert_eq!(json_array[2], Value::Null);"
        ],
        "code": [
          "{",
          "    let json_array = Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned())]);",
          "",
          "    let _ = json_array[0];",
          "    assert_eq!(json_array[0], Value::String(\"first\".to_owned()));",
          "    assert_eq!(json_array[1], Value::String(\"second\".to_owned()));",
          "    assert_eq!(json_array[2], Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_array = Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned())]);",
          "",
          "    let _ = json_array[2];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_array[0], Value::String(\"first\".to_owned()));",
          "    assert_eq!(json_array[1], Value::String(\"second\".to_owned()));",
          "    assert_eq!(json_array[2], Value::Null);"
        ],
        "code": [
          "{",
          "    let json_array = Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned())]);",
          "",
          "    let _ = json_array[2];",
          "    assert_eq!(json_array[0], Value::String(\"first\".to_owned()));",
          "    assert_eq!(json_array[1], Value::String(\"second\".to_owned()));",
          "    assert_eq!(json_array[2], Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![",
          "          (\"nested\".to_owned(), Value::Array(vec![Value::String(\"value\".to_owned())]))",
          "        ]) ",
          "    });",
          "",
          "    let _ = json_object[\"nested\"][0];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_object[\"nested\"], Value::Array(vec![Value::String(\"value\".to_owned())]));",
          "    assert_eq!(json_object[\"nested\"][0], Value::String(\"value\".to_owned()));",
          "    assert_eq!(json_object[\"nested\"][1], Value::Null);",
          "    assert_eq!(json_object[\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][\"0\"], Value::Null);"
        ],
        "code": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![",
          "          (\"nested\".to_owned(), Value::Array(vec![Value::String(\"value\".to_owned())]))",
          "        ]) ",
          "    });",
          "",
          "    let _ = json_object[\"nested\"][0];",
          "    assert_eq!(json_object[\"nested\"], Value::Array(vec![Value::String(\"value\".to_owned())]));",
          "    assert_eq!(json_object[\"nested\"][0], Value::String(\"value\".to_owned()));",
          "    assert_eq!(json_object[\"nested\"][1], Value::Null);",
          "    assert_eq!(json_object[\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][\"0\"], Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![",
          "          (\"nested\".to_owned(), Value::Array(vec![Value::String(\"value\".to_owned())]))",
          "        ]) ",
          "    });",
          "",
          "    let _ = json_object[\"nested\"][\"nonexistent\"];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_object[\"nested\"][\"nonexistent\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][0], Value::Null);",
          "    assert_eq!(json_object[\"nonexistent\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][1], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][\"nested_key\"], Value::Null);",
          "    assert_eq!(json_object[\"nonexistent\"][\"nested\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"].index(2), &Value::Null);",
          "    assert_eq!(json_object.index(\"nonexistent\"), &Value::Null);"
        ],
        "code": [
          "{",
          "    let json_object = Value::Object(Map { ",
          "        map: MapImpl::from_iter(vec![",
          "          (\"nested\".to_owned(), Value::Array(vec![Value::String(\"value\".to_owned())]))",
          "        ]) ",
          "    });",
          "",
          "    let _ = json_object[\"nested\"][\"nonexistent\"];",
          "    assert_eq!(json_object[\"nested\"][\"nonexistent\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][0], Value::Null);",
          "    assert_eq!(json_object[\"nonexistent\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][1], Value::Null);",
          "    assert_eq!(json_object[\"nested\"][\"nested_key\"], Value::Null);",
          "    assert_eq!(json_object[\"nonexistent\"][\"nested\"], Value::Null);",
          "    assert_eq!(json_object[\"nested\"].index(2), &Value::Null);",
          "    assert_eq!(json_object.index(\"nonexistent\"), &Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_array = Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned())]);",
          "",
          "    let _ = json_array[-1];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_array[-1], Value::Null);",
          "    assert_eq!(json_array[2], Value::Null);",
          "    assert_eq!(json_array[\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_array[0], Value::String(\"first\".to_owned()));",
          "    assert_eq!(json_array[1], Value::String(\"second\".to_owned()));"
        ],
        "code": [
          "{",
          "    let json_array = Value::Array(vec![Value::String(\"first\".to_owned()), Value::String(\"second\".to_owned())]);",
          "",
          "    let _ = json_array[-1];",
          "    assert_eq!(json_array[-1], Value::Null);",
          "    assert_eq!(json_array[2], Value::Null);",
          "    assert_eq!(json_array[\"invalid_key\"], Value::Null);",
          "    assert_eq!(json_array[0], Value::String(\"first\".to_owned()));",
          "    assert_eq!(json_array[1], Value::String(\"second\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let json_object = Value::Object(Map {",
          "        map: MapImpl::from_iter(vec![(\"key\".to_owned(), Value::Null)]) ",
          "    });",
          "",
          "    let _ = json_object[\"key\"];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(json_object[\"key\"], Value::Null);",
          "    assert_eq!(json_object[\"non_existent_key\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][0], Value::Null);",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"non_existent_subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"non_existent_key\"][\"subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"non_existent_key\"][0], Value::Null);"
        ],
        "code": [
          "{",
          "    let json_object = Value::Object(Map {",
          "        map: MapImpl::from_iter(vec![(\"key\".to_owned(), Value::Null)]) ",
          "    });",
          "",
          "    let _ = json_object[\"key\"];",
          "    assert_eq!(json_object[\"key\"], Value::Null);",
          "    assert_eq!(json_object[\"non_existent_key\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"key\"][0], Value::Null);",
          "    assert_eq!(json_object[0], Value::Null);",
          "    assert_eq!(json_object[\"key\"][\"non_existent_subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"non_existent_key\"][\"subkey\"], Value::Null);",
          "    assert_eq!(json_object[\"non_existent_key\"][0], Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]