[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let opt: Option<i32> = None;",
          "    let _ = Value::from(opt);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Value::from(None::<i32>), Value::Null);"
        ],
        "code": [
          "{",
          "    let opt: Option<i32> = None;",
          "    let _ = Value::from(opt);",
          "    assert_eq!(Value::from(None::<i32>), Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let opt: Option<String> = None;",
          "    let _ = Value::from(opt);",
          "}"
        ],
        "oracle": [
          "    let opt: Option<String> = None;",
          "    let result = Value::from(opt);",
          "    assert_eq!(result, Value::Null);"
        ],
        "code": [
          "{",
          "    let opt: Option<String> = None;",
          "    let _ = Value::from(opt);",
          "    let opt: Option<String> = None;",
          "    let result = Value::from(opt);",
          "    assert_eq!(result, Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let opt: Option<f64> = None;",
          "    let _ = Value::from(opt);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Value::from(None::<f64>), Value::Null);",
          "    assert!(matches!(Value::from(None::<f64>), Value::Null));",
          "    assert!(matches!(Value::from(None::<u32>), Value::Null));",
          "    assert_eq!(Value::from(None::<String>), Value::Null);",
          "    assert_eq!(Value::from(None::<Vec<Value>>), Value::Null);"
        ],
        "code": [
          "{",
          "    let opt: Option<f64> = None;",
          "    let _ = Value::from(opt);",
          "    assert_eq!(Value::from(None::<f64>), Value::Null);",
          "    assert!(matches!(Value::from(None::<f64>), Value::Null));",
          "    assert!(matches!(Value::from(None::<u32>), Value::Null));",
          "    assert_eq!(Value::from(None::<String>), Value::Null);",
          "    assert_eq!(Value::from(None::<Vec<Value>>), Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let opt: Option<Vec<Value>> = None;",
          "    let _ = Value::from(opt);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Value::from(None::<Vec<Value>>), Value::Null);"
        ],
        "code": [
          "{",
          "    let opt: Option<Vec<Value>> = None;",
          "    let _ = Value::from(opt);",
          "    assert_eq!(Value::from(None::<Vec<Value>>), Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]