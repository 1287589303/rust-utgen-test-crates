[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(0),",
          "    };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_f64(), Some(0.0));",
          "    number.n = N::PosInt(5);",
          "    assert_eq!(number.as_f64(), Some(5.0));",
          "    number.n = N::PosInt(u64::MAX);",
          "    assert_eq!(number.as_f64(), Some(u64::MAX as f64));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(0),",
          "    };",
          "    let _result = number.as_f64();",
          "    assert_eq!(number.as_f64(), Some(0.0));",
          "    number.n = N::PosInt(5);",
          "    assert_eq!(number.as_f64(), Some(5.0));",
          "    number.n = N::PosInt(u64::MAX);",
          "    assert_eq!(number.as_f64(), Some(u64::MAX as f64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(1),",
          "    };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(1.0));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(1),",
          "    };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(42),",
          "    };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(42.0));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(42),",
          "    };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(42.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(u64::MAX),",
          "    };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(u64::MAX as f64));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::PosInt(u64::MAX),",
          "    };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(u64::MAX as f64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]