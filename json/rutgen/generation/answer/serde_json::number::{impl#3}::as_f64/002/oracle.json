[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-1.0));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(-1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(i64::MIN) }; // -9223372036854775808",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(i64::MIN as f64));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(i64::MIN) }; // -9223372036854775808",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(i64::MIN as f64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-12345678901234) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    let number = Number { n: N::NegInt(-12345678901234) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(-12345678901234.0));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-12345678901234) };",
          "    let _result = number.as_f64();",
          "    let number = Number { n: N::NegInt(-12345678901234) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(-12345678901234.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-42) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    let number = Number { n: N::NegInt(-42) };",
          "    let expected = Some(-42.0);",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-42) };",
          "    let _result = number.as_f64();",
          "    let number = Number { n: N::NegInt(-42) };",
          "    let expected = Some(-42.0);",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]