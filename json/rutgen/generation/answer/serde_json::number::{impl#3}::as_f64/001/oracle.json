[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(1.0) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(1.0));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(1.0) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(-1.0) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-1.0));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(-1.0) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(-1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(1.7976931348623157E+308) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(1.7976931348623157E+308));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(1.7976931348623157E+308) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(1.7976931348623157E+308));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(-1.7976931348623157E+308) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(-1.7976931348623157E+308));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(-1.7976931348623157E+308) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(-1.7976931348623157E+308));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(0.0) };",
          "    let _result = number.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(0.0));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(0.0) };",
          "    let _result = number.as_f64();",
          "    assert_eq!(_result, Some(0.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]