[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: &[u8] = b\"First line\\nSecond line\\nThird line\\n\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 20; // Point to a character in the \"Second line\"",
          "    let position = reader.position_of_index(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 4);"
        ],
        "code": [
          "{",
          "    let data: &[u8] = b\"First line\\nSecond line\\nThird line\\n\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 20; // Point to a character in the \"Second line\"",
          "    let position = reader.position_of_index(index);",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: &[u8] = b\"Hello world\\nGoodbye!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 12; // First character of \"Goodbye!\"",
          "    let position = reader.position_of_index(index);",
          "}"
        ],
        "oracle": [
          "    let data: &[u8] = b\"Hello world\\nGoodbye!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 12;",
          "    let position = reader.position_of_index(index);",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 1);"
        ],
        "code": [
          "{",
          "    let data: &[u8] = b\"Hello world\\nGoodbye!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 12; // First character of \"Goodbye!\"",
          "    let position = reader.position_of_index(index);",
          "    let data: &[u8] = b\"Hello world\\nGoodbye!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 12;",
          "    let position = reader.position_of_index(index);",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: &[u8] = b\"Line one\\nLine two\\n\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 16; // Last character after the second newline",
          "    let position = reader.position_of_index(index);",
          "}"
        ],
        "oracle": [
          "    let data: &[u8] = b\"Line one\\nLine two\\n\";",
          "    let index = 16;",
          "    let position = reader.position_of_index(index);",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 0);"
        ],
        "code": [
          "{",
          "    let data: &[u8] = b\"Line one\\nLine two\\n\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 16; // Last character after the second newline",
          "    let position = reader.position_of_index(index);",
          "    let data: &[u8] = b\"Line one\\nLine two\\n\";",
          "    let index = 16;",
          "    let position = reader.position_of_index(index);",
          "    assert_eq!(position.line, 2);",
          "    assert_eq!(position.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: &[u8] = b\"\\n\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 1; // Index after the newline",
          "    let position = reader.position_of_index(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 0);"
        ],
        "code": [
          "{",
          "    let data: &[u8] = b\"\\n\";",
          "    let mut reader = SliceRead::new(data);",
          "    let index = 1; // Index after the newline",
          "    let position = reader.position_of_index(index);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]