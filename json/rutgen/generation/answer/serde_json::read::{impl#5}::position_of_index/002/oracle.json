[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"Hello, world!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(0);",
          "}"
        ],
        "oracle": [
          "    let data = b\"Hello, world!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(0);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 0);"
        ],
        "code": [
          "{",
          "    let data = b\"Hello, world!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(0);",
          "    let data = b\"Hello, world!\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(0);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"This is a test string with no newlines.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(data.len());",
          "}"
        ],
        "oracle": [
          "    let data = b\"This is a test string with no newlines.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(data.len());",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 40);"
        ],
        "code": [
          "{",
          "    let data = b\"This is a test string with no newlines.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(data.len());",
          "    let data = b\"This is a test string with no newlines.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(data.len());",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 40);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"Example text without newline in between.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(10);",
          "}"
        ],
        "oracle": [
          "    let data = b\"Example text without newline in between.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(10);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 10);"
        ],
        "code": [
          "{",
          "    let data = b\"Example text without newline in between.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(10);",
          "    let data = b\"Example text without newline in between.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(10);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"Last character without newline\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(data.len() - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, data.len() - 1);",
          "    assert!(memchr::memrchr(b'\\n', &reader.slice[..data.len() - 1]).is_none());"
        ],
        "code": [
          "{",
          "    let data = b\"Last character without newline\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(data.len() - 1);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, data.len() - 1);",
          "    assert!(memchr::memrchr(b'\\n', &reader.slice[..data.len() - 1]).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"Another sample text for testing.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(5);",
          "}"
        ],
        "oracle": [
          "    let data = b\"Another sample text for testing.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(5);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 5);"
        ],
        "code": [
          "{",
          "    let data = b\"Another sample text for testing.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(5);",
          "    let data = b\"Another sample text for testing.\";",
          "    let mut reader = SliceRead::new(data);",
          "    let position = reader.position_of_index(5);",
          "    assert_eq!(position.line, 1);",
          "    assert_eq!(position.column, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]