[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice_read = SliceRead {",
          "        slice: &[1, 2, 3, 4, 5],",
          "        index: 0,",
          "    };",
          "    let result = slice_read.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(1)));",
          "    assert_eq!(slice_read.index, 1);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(2)));",
          "    assert_eq!(slice_read.index, 2);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(3)));",
          "    assert_eq!(slice_read.index, 3);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(4)));",
          "    assert_eq!(slice_read.index, 4);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(5)));",
          "    assert_eq!(slice_read.index, 5);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(None));",
          "    assert_eq!(slice_read.index, 5);"
        ],
        "code": [
          "{",
          "    let mut slice_read = SliceRead {",
          "        slice: &[1, 2, 3, 4, 5],",
          "        index: 0,",
          "    };",
          "    let result = slice_read.next();",
          "    assert_eq!(result, Ok(Some(1)));",
          "    assert_eq!(slice_read.index, 1);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(2)));",
          "    assert_eq!(slice_read.index, 2);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(3)));",
          "    assert_eq!(slice_read.index, 3);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(4)));",
          "    assert_eq!(slice_read.index, 4);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(Some(5)));",
          "    assert_eq!(slice_read.index, 5);",
          "    slice_read.next();",
          "    assert_eq!(result, Ok(None));",
          "    assert_eq!(slice_read.index, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice_read = SliceRead {",
          "        slice: &[10, 20, 30, 40, 50],",
          "        index: 2,",
          "    };",
          "    let result = slice_read.next();",
          "}"
        ],
        "oracle": [
          "    let expected_result = Ok(Some(30));",
          "    assert_eq!(result, expected_result);",
          "    assert_eq!(slice_read.index, 3);"
        ],
        "code": [
          "{",
          "    let mut slice_read = SliceRead {",
          "        slice: &[10, 20, 30, 40, 50],",
          "        index: 2,",
          "    };",
          "    let result = slice_read.next();",
          "    let expected_result = Ok(Some(30));",
          "    assert_eq!(result, expected_result);",
          "    assert_eq!(slice_read.index, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice_read = SliceRead {",
          "        slice: &[100, 200, 300],",
          "        index: 1,",
          "    };",
          "    let result = slice_read.next();",
          "}"
        ],
        "oracle": [
          "    let mut slice_read = SliceRead { slice: &[100, 200, 300], index: 1 };",
          "    let expected = Ok(Some(200));",
          "    assert_eq!(result, expected);",
          "    slice_read.index = 1;",
          "    let result = slice_read.next();",
          "    let expected = Ok(Some(200));",
          "    assert_eq!(result, expected);",
          "    slice_read.index = 2;",
          "    let result = slice_read.next();",
          "    let expected = Ok(Some(300));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let mut slice_read = SliceRead {",
          "        slice: &[100, 200, 300],",
          "        index: 1,",
          "    };",
          "    let result = slice_read.next();",
          "    let mut slice_read = SliceRead { slice: &[100, 200, 300], index: 1 };",
          "    let expected = Ok(Some(200));",
          "    assert_eq!(result, expected);",
          "    slice_read.index = 1;",
          "    let result = slice_read.next();",
          "    let expected = Ok(Some(200));",
          "    assert_eq!(result, expected);",
          "    slice_read.index = 2;",
          "    let result = slice_read.next();",
          "    let expected = Ok(Some(300));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]