[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut msg = String::from(\"Error occurred at line 42 column X\");",
          "    let result = parse_line_col(&mut msg);",
          "}"
        ],
        "oracle": [
          "    let mut msg = String::from(\"Error occurred at line 42 column X\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut msg = String::from(\"Error occurred at line 42 column X\");",
          "    let result = parse_line_col(&mut msg);",
          "    let mut msg = String::from(\"Error occurred at line 42 column X\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut msg = String::from(\"Parsing failed at line 10 column ABC\");",
          "    let result = parse_line_col(&mut msg);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let mut msg = String::from(\"Parsing failed at line 10 column ABC\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut msg = String::from(\"Unexpected EOF at line 7 column ABCDEF\");",
          "    let result = parse_line_col(&mut msg);",
          "}"
        ],
        "oracle": [
          "    let mut msg = String::from(\"Unexpected EOF at line 7 column ABCDEF\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut msg = String::from(\"Unexpected EOF at line 7 column ABCDEF\");",
          "    let result = parse_line_col(&mut msg);",
          "    let mut msg = String::from(\"Unexpected EOF at line 7 column ABCDEF\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut msg = String::from(\"Syntax error at line 123 column INVALID\");",
          "    let result = parse_line_col(&mut msg);",
          "}"
        ],
        "oracle": [
          "    let mut msg = String::from(\"Syntax error at line 123 column INVALID\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut msg = String::from(\"Syntax error at line 123 column INVALID\");",
          "    let result = parse_line_col(&mut msg);",
          "    let mut msg = String::from(\"Syntax error at line 123 column INVALID\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut msg = String::from(\"Type mismatch at line 5 column ERROR_MSG\");",
          "    let result = parse_line_col(&mut msg);",
          "}"
        ],
        "oracle": [
          "    let mut msg = String::from(\"Type mismatch at line 5 column ERROR_MSG\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);",
          "    assert_eq!(msg, \"Type mismatch\");"
        ],
        "code": [
          "{",
          "    let mut msg = String::from(\"Type mismatch at line 5 column ERROR_MSG\");",
          "    let result = parse_line_col(&mut msg);",
          "    let mut msg = String::from(\"Type mismatch at line 5 column ERROR_MSG\");",
          "    let result = parse_line_col(&mut msg);",
          "    assert_eq!(result, None);",
          "    assert_eq!(msg, \"Type mismatch\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]