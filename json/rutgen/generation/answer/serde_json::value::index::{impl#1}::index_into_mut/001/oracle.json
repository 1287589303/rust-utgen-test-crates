[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v = &mut Value::Null;",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let v = &mut Value::Null;",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v = &mut Value::Bool(true);",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let v = &mut Value::Bool(true);",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v = &mut Value::Number(Number::from(42));",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let v = &mut Value::Number(Number::from(42));",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v = &mut Value::String(String::from(\"a string\"));",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let v = &mut Value::String(String::from(\"a string\"));",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let v = &mut Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let v = &mut Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "    let key = \"some_key\";",
          "    let result = key.index_into_mut(v);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]