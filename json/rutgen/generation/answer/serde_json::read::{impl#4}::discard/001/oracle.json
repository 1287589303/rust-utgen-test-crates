[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: Some(0),",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "    assert_eq!(buffer.position().line, 0);",
          "    assert_eq!(buffer.position().col, 0);",
          "    assert_eq!(buffer.byte_offset(), 0);"
        ],
        "code": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: Some(0),",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "    assert_eq!(buffer.position().line, 0);",
          "    assert_eq!(buffer.position().col, 0);",
          "    assert_eq!(buffer.byte_offset(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: Some(255),",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);"
        ],
        "code": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: Some(255),",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: Some(128),",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);"
        ],
        "code": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: Some(128),",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: None,",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "    buffer.discard();",
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);"
        ],
        "code": [
          "{",
          "    let mut buffer = IoRead {",
          "        iter: LineColIterator { iter: vec![].into_iter(), line: 0, col: 0, start_of_line: 0 },",
          "        ch: None,",
          "        raw_buffer: None,",
          "    };",
          "    buffer.discard();",
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "    buffer.discard();",
          "    assert_eq!(buffer.ch, None);",
          "    assert_eq!(buffer.raw_buffer, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]