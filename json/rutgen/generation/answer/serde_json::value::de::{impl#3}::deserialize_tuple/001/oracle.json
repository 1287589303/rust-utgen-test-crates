[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"any valid tuple\")",
          "        }",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![]);",
          "    let _ = value.deserialize_tuple(0, VisitorImpl);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(0, VisitorImpl), Ok(()));"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = ();",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"any valid tuple\")",
          "        }",
          "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![]);",
          "    let _ = value.deserialize_tuple(0, VisitorImpl);",
          "    assert_eq!(value.deserialize_tuple(0, VisitorImpl), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String,);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"tuple of a single string\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let element = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            Ok((element,))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string())]);",
          "    let _ = value.deserialize_tuple(1, VisitorImpl);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(1, VisitorImpl).unwrap(), (\"test\".to_string(),));",
          "    assert!(value.deserialize_tuple(0, VisitorImpl).is_err());",
          "    let value_empty = Value::Array(vec![]);",
          "    assert!(value_empty.deserialize_tuple(1, VisitorImpl).is_err());",
          "    let value_multiple = Value::Array(vec![Value::String(\"test\".to_string()), Value::String(\"extra\".to_string())]);",
          "    assert!(value_multiple.deserialize_tuple(1, VisitorImpl).is_err());"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String,);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"tuple of a single string\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let element = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            Ok((element,))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string())]);",
          "    let _ = value.deserialize_tuple(1, VisitorImpl);",
          "    assert_eq!(value.deserialize_tuple(1, VisitorImpl).unwrap(), (\"test\".to_string(),));",
          "    assert!(value.deserialize_tuple(0, VisitorImpl).is_err());",
          "    let value_empty = Value::Array(vec![]);",
          "    assert!(value_empty.deserialize_tuple(1, VisitorImpl).is_err());",
          "    let value_multiple = Value::Array(vec![Value::String(\"test\".to_string()), Value::String(\"extra\".to_string())]);",
          "    assert!(value_multiple.deserialize_tuple(1, VisitorImpl).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String, String);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"tuple of two strings\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let first = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            let second = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            Ok((first, second))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"first\".to_string()), Value::String(\"second\".to_string())]);",
          "    let _ = value.deserialize_tuple(2, VisitorImpl);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl).unwrap(), (\"first\".to_string(), \"second\".to_string()));",
          "    assert!(value.deserialize_tuple(1, VisitorImpl).is_err());",
          "    assert!(value.deserialize_tuple(3, VisitorImpl).is_err());",
          "    assert!(Value::Array(vec![Value::String(\"only one\".to_string())]).deserialize_tuple(2, VisitorImpl).is_err());",
          "    assert!(Value::Array(vec![]).deserialize_tuple(2, VisitorImpl).is_err());"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String, String);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"tuple of two strings\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let first = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            let second = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            Ok((first, second))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"first\".to_string()), Value::String(\"second\".to_string())]);",
          "    let _ = value.deserialize_tuple(2, VisitorImpl);",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl).unwrap(), (\"first\".to_string(), \"second\".to_string()));",
          "    assert!(value.deserialize_tuple(1, VisitorImpl).is_err());",
          "    assert!(value.deserialize_tuple(3, VisitorImpl).is_err());",
          "    assert!(Value::Array(vec![Value::String(\"only one\".to_string())]).deserialize_tuple(2, VisitorImpl).is_err());",
          "    assert!(Value::Array(vec![]).deserialize_tuple(2, VisitorImpl).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = Vec<()>;",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a tuple of maximum length\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let mut vec = Vec::new();",
          "            while let Some(_) = seq.next_element::<()>()? {",
          "                vec.push(());",
          "            }",
          "            Ok(vec)",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::Null; std::usize::MAX]);",
          "    let _ = value.deserialize_tuple(std::usize::MAX, VisitorImpl);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(0, VisitorImpl), Ok(vec![]));",
          "    assert_eq!(value.deserialize_tuple(1, VisitorImpl), Ok(vec![()]));",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(usize::MAX, VisitorImpl).is_ok());",
          "    assert!(matches!(value.deserialize_tuple(usize::MAX + 1, VisitorImpl), Err(Error)));",
          "    assert!(matches!(value.deserialize_tuple(1, VisitorImpl), Ok(vec) if vec.len() == 1));",
          "    assert!(matches!(value.deserialize_tuple(2, VisitorImpl), Ok(vec) if vec.len() == 2));",
          "    assert!(matches!(value.deserialize_tuple(0, VisitorImpl), Ok(vec) if vec.is_empty()));"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = Vec<()>;",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a tuple of maximum length\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let mut vec = Vec::new();",
          "            while let Some(_) = seq.next_element::<()>()? {",
          "                vec.push(());",
          "            }",
          "            Ok(vec)",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::Null; std::usize::MAX]);",
          "    let _ = value.deserialize_tuple(std::usize::MAX, VisitorImpl);",
          "    assert_eq!(value.deserialize_tuple(0, VisitorImpl), Ok(vec![]));",
          "    assert_eq!(value.deserialize_tuple(1, VisitorImpl), Ok(vec![()]));",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_ok());",
          "    assert!(value.deserialize_tuple(usize::MAX, VisitorImpl).is_ok());",
          "    assert!(matches!(value.deserialize_tuple(usize::MAX + 1, VisitorImpl), Err(Error)));",
          "    assert!(matches!(value.deserialize_tuple(1, VisitorImpl), Ok(vec) if vec.len() == 1));",
          "    assert!(matches!(value.deserialize_tuple(2, VisitorImpl), Ok(vec) if vec.len() == 2));",
          "    assert!(matches!(value.deserialize_tuple(0, VisitorImpl), Ok(vec) if vec.is_empty()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String,);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"tuple of a single string\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let element = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            Ok((element,))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string()), Value::String(\"extra\".to_string())]);",
          "    let _ = value.deserialize_tuple(1, VisitorImpl);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_tuple(1, VisitorImpl), Err(Error));",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_err());",
          "    let empty_value = Value::Array(vec![]);",
          "    assert_eq!(empty_value.deserialize_tuple(1, VisitorImpl), Err(Error));",
          "    assert_eq!(value.deserialize_tuple(0, VisitorImpl), Ok((\"test\".to_string(),)));",
          "    let single_value = Value::Array(vec![Value::String(\"single\".to_string())]);",
          "    assert_eq!(single_value.deserialize_tuple(1, VisitorImpl), Ok((\"single\".to_string(),)));",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl), Err(Error));"
        ],
        "code": [
          "{",
          "    struct VisitorImpl;",
          "",
          "    impl<'de> Visitor<'de> for VisitorImpl {",
          "        type Value = (String,);",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"tuple of a single string\")",
          "        }",
          "        fn visit_seq<S>(self, mut seq: S) -> Result<Self::Value, S::Error>",
          "        where",
          "            S: SeqAccess<'de>,",
          "        {",
          "            let element = seq.next_element::<String>()?.ok_or_else(|| Error)?;",
          "            Ok((element,))",
          "        }",
          "    }",
          "",
          "    let value = Value::Array(vec![Value::String(\"test\".to_string()), Value::String(\"extra\".to_string())]);",
          "    let _ = value.deserialize_tuple(1, VisitorImpl);",
          "    assert_eq!(value.deserialize_tuple(1, VisitorImpl), Err(Error));",
          "    assert!(value.deserialize_tuple(2, VisitorImpl).is_err());",
          "    let empty_value = Value::Array(vec![]);",
          "    assert_eq!(empty_value.deserialize_tuple(1, VisitorImpl), Err(Error));",
          "    assert_eq!(value.deserialize_tuple(0, VisitorImpl), Ok((\"test\".to_string(),)));",
          "    let single_value = Value::Array(vec![Value::String(\"single\".to_string())]);",
          "    assert_eq!(single_value.deserialize_tuple(1, VisitorImpl), Ok((\"single\".to_string(),)));",
          "    assert_eq!(value.deserialize_tuple(2, VisitorImpl), Err(Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]