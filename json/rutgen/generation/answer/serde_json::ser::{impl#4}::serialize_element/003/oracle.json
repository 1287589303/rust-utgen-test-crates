[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
          "            Ok(buf.len())",
          "        }",
          "        ",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_array_value(&mut self, _writer: &mut impl io::Write, _first: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_array_value(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let mut compound = Compound::Map {",
          "        ser: &mut Serializer { writer, formatter },",
          "        state: State::First,",
          "    };",
          "    ",
          "    let value = 42; // type that implements Serialize",
          "    ",
          "    let _ = compound.serialize_element(&value);",
          "}"
        ],
        "oracle": [
          "    assert!(compound.state == State::First);",
          "    assert!(compound.ser.writer.write(b\"42\").is_ok());",
          "    assert!(compound.ser.formatter.begin_array_value(&mut compound.ser.writer, true).is_ok());",
          "    assert!(compound.ser.formatter.end_array_value(&mut compound.ser.writer).is_ok());",
          "    assert!(value.serialize(&mut **compound.ser).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
          "            Ok(buf.len())",
          "        }",
          "        ",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_array_value(&mut self, _writer: &mut impl io::Write, _first: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_array_value(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let mut compound = Compound::Map {",
          "        ser: &mut Serializer { writer, formatter },",
          "        state: State::First,",
          "    };",
          "    ",
          "    let value = 42; // type that implements Serialize",
          "    ",
          "    let _ = compound.serialize_element(&value);",
          "    assert!(compound.state == State::First);",
          "    assert!(compound.ser.writer.write(b\"42\").is_ok());",
          "    assert!(compound.ser.formatter.begin_array_value(&mut compound.ser.writer, true).is_ok());",
          "    assert!(compound.ser.formatter.end_array_value(&mut compound.ser.writer).is_ok());",
          "    assert!(value.serialize(&mut **compound.ser).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
          "            Ok(buf.len())",
          "        }",
          "        ",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_array_value(&mut self, _writer: &mut impl io::Write, _first: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_array_value(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let mut compound = Compound::Map {",
          "        ser: &mut Serializer { writer, formatter },",
          "        state: State::Rest,",
          "    };",
          "    ",
          "    let value = 42; // type that implements Serialize",
          "    ",
          "    let _ = compound.serialize_element(&value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compound.state, State::Rest);",
          "    assert!(matches!(ser.formatter.begin_array_value(&mut ser.writer, true), Ok(())));",
          "    assert!(matches!(value.serialize(&mut **ser), Ok(())));",
          "    assert!(matches!(ser.formatter.end_array_value(&mut ser.writer), Ok(())));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
          "            Ok(buf.len())",
          "        }",
          "        ",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_array_value(&mut self, _writer: &mut impl io::Write, _first: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_array_value(&mut self, _writer: &mut impl io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let formatter = TestFormatter;",
          "    let mut compound = Compound::Map {",
          "        ser: &mut Serializer { writer, formatter },",
          "        state: State::Rest,",
          "    };",
          "    ",
          "    let value = 42; // type that implements Serialize",
          "    ",
          "    let _ = compound.serialize_element(&value);",
          "    assert_eq!(compound.state, State::Rest);",
          "    assert!(matches!(ser.formatter.begin_array_value(&mut ser.writer, true), Ok(())));",
          "    assert!(matches!(value.serialize(&mut **ser), Ok(())));",
          "    assert!(matches!(ser.formatter.end_array_value(&mut ser.writer), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]