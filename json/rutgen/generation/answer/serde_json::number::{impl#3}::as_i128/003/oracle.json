[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(0) };",
          "    let _ = number.as_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i128(), Some(0));",
          "    let number = Number { n: N::PosInt(5) };",
          "    assert_eq!(number.as_i128(), Some(5));",
          "    let number = Number { n: N::PosInt(42) };",
          "    assert_eq!(number.as_i128(), Some(42));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(0) };",
          "    let _ = number.as_i128();",
          "    assert_eq!(number.as_i128(), Some(0));",
          "    let number = Number { n: N::PosInt(5) };",
          "    assert_eq!(number.as_i128(), Some(5));",
          "    let number = Number { n: N::PosInt(42) };",
          "    assert_eq!(number.as_i128(), Some(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(12345) };",
          "    let _ = number.as_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i128(), Some(12345));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(12345) };",
          "    let _ = number.as_i128();",
          "    assert_eq!(number.as_i128(), Some(12345));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(9_223_372_036_854_775_807) };",
          "    let _ = number.as_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i128(), Some(9_223_372_036_854_775_807 as i128));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(9_223_372_036_854_775_807) };",
          "    let _ = number.as_i128();",
          "    assert_eq!(number.as_i128(), Some(9_223_372_036_854_775_807 as i128));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]