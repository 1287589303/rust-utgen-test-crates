[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(3.14)));",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.get(\"key1\"), None);",
          "    assert_eq!(map.get(\"key2\"), None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(3.14)));",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.get(\"key1\"), None);",
          "    assert_eq!(map.get(\"key2\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.iter().count(), 0);",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "    assert!(map.get(\"nonexistent_key\").is_none());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.iter().count(), 0);",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "    assert!(map.get(\"nonexistent_key\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"single_key\".to_string(), Value::String(\"single_value\".to_string()));",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(!map.contains_key(\"single_key\"));",
          "    assert_eq!(map.get(\"single_key\"), None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"single_key\".to_string(), Value::String(\"single_value\".to_string()));",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(!map.contains_key(\"single_key\"));",
          "    assert_eq!(map.get(\"single_key\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
          "    map.insert(\"key2\".to_string(), Value::Null);",
          "    map.insert(\"key3\".to_string(), Value::Array(vec![Value::Bool(false)]));",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
          "    map.insert(\"key2\".to_string(), Value::Null);",
          "    map.insert(\"key3\".to_string(), Value::Array(vec![Value::Bool(false)]));",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]