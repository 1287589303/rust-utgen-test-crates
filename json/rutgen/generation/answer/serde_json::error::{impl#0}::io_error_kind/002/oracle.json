[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::TimedOut, \"timed out\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "}"
        ],
        "oracle": [
          "    assert!(test_error.err.code.is_io());",
          "    assert_eq!(test_error.err.io_error_kind(), Some(ErrorKind::TimedOut));",
          "    assert!(test_error.err.line() == 1);",
          "    assert!(test_error.err.column() == 1);"
        ],
        "code": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::TimedOut, \"timed out\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "    assert!(test_error.err.code.is_io());",
          "    assert_eq!(test_error.err.io_error_kind(), Some(ErrorKind::TimedOut));",
          "    assert!(test_error.err.line() == 1);",
          "    assert!(test_error.err.column() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::NotFound, \"not found\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "}"
        ],
        "oracle": [
          "    let error_impl = ErrorImpl { code: ErrorCode::Io(io::Error::new(ErrorKind::NotFound, \"not found\")), line: 1, column: 1 };",
          "    let test_error = TestError { err: Box::new(error_impl) };",
          "    assert_eq!(test_error.err.code.io_error_kind(), Some(ErrorKind::NotFound));"
        ],
        "code": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::NotFound, \"not found\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "    let error_impl = ErrorImpl { code: ErrorCode::Io(io::Error::new(ErrorKind::NotFound, \"not found\")), line: 1, column: 1 };",
          "    let test_error = TestError { err: Box::new(error_impl) };",
          "    assert_eq!(test_error.err.code.io_error_kind(), Some(ErrorKind::NotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::PermissionDenied, \"permission denied\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_error.err.code, ErrorCode::Io(io::Error::new(ErrorKind::PermissionDenied, \"permission denied\")));",
          "    assert_eq!(test_error.err.code.io_error_kind(), Some(ErrorKind::PermissionDenied));"
        ],
        "code": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::PermissionDenied, \"permission denied\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "    assert_eq!(test_error.err.code, ErrorCode::Io(io::Error::new(ErrorKind::PermissionDenied, \"permission denied\")));",
          "    assert_eq!(test_error.err.code.io_error_kind(), Some(ErrorKind::PermissionDenied));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::BrokenPipe, \"broken pipe\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_error.err.code, ErrorCode::Io(io::Error::new(ErrorKind::BrokenPipe, \"broken pipe\")));",
          "    assert!(test_error.err.code.is_io());",
          "    assert_eq!(test_error.err.code.io_error_kind(), Some(ErrorKind::BrokenPipe));"
        ],
        "code": [
          "{",
          "    struct TestError {",
          "        err: Box<ErrorImpl>,",
          "    }",
          "",
          "    let error_impl = ErrorImpl {",
          "        code: ErrorCode::Io(io::Error::new(ErrorKind::BrokenPipe, \"broken pipe\")),",
          "        line: 1,",
          "        column: 1,",
          "    };",
          "",
          "    let test_error = TestError {",
          "        err: Box::new(error_impl),",
          "    };",
          "",
          "    let _ = test_error.err.code;",
          "    assert_eq!(test_error.err.code, ErrorCode::Io(io::Error::new(ErrorKind::BrokenPipe, \"broken pipe\")));",
          "    assert!(test_error.err.code.is_io());",
          "    assert_eq!(test_error.err.code.io_error_kind(), Some(ErrorKind::BrokenPipe));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]