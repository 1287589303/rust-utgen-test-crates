[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(i64::MAX as u64) };",
          "    let _result = number.as_i64();",
          "}"
        ],
        "oracle": [
          "    let number = Number { n: N::PosInt(i64::MAX as u64) };",
          "    let result = number.as_i64();",
          "    assert_eq!(result, Some(i64::MAX));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(i64::MAX as u64) };",
          "    let _result = number.as_i64();",
          "    let number = Number { n: N::PosInt(i64::MAX as u64) };",
          "    let result = number.as_i64();",
          "    assert_eq!(result, Some(i64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(0) };",
          "    let _result = number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i64(), Some(0));",
          "    let number = Number { n: N::PosInt(i64::MAX as u64) };",
          "    assert_eq!(number.as_i64(), Some(i64::MAX));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(0) };",
          "    let _result = number.as_i64();",
          "    assert_eq!(number.as_i64(), Some(0));",
          "    let number = Number { n: N::PosInt(i64::MAX as u64) };",
          "    assert_eq!(number.as_i64(), Some(i64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(1234567890) };",
          "    let _result = number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(1234567890));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(1234567890) };",
          "    let _result = number.as_i64();",
          "    assert_eq!(_result, Some(1234567890));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(9223372036854775807) }; // edge case",
          "    let _result = number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(9223372036854775807 as i64));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(9223372036854775807) }; // edge case",
          "    let _result = number.as_i64();",
          "    assert_eq!(_result, Some(9223372036854775807 as i64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]