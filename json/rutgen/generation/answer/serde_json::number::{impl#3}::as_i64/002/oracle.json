[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i64(), Some(-1));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    number.as_i64();",
          "    assert_eq!(number.as_i64(), Some(-1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-100) };",
          "    number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i64(), Some(-100));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-100) };",
          "    number.as_i64();",
          "    assert_eq!(number.as_i64(), Some(-100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(i64::MIN) };",
          "    number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i64(), Some(i64::MIN));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(i64::MIN) };",
          "    number.as_i64();",
          "    assert_eq!(number.as_i64(), Some(i64::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-9223372036854775808) };",
          "    number.as_i64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.as_i64(), Some(-9223372036854775808));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-9223372036854775808) };",
          "    number.as_i64();",
          "    assert_eq!(number.as_i64(), Some(-9223372036854775808));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]