[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element1\"))]);",
          "    let result = value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&vec![Value::String(String::from(\"element1\"))]));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element1\"))]);",
          "    let result = value.as_array();",
          "    assert_eq!(result, Some(&vec![Value::String(String::from(\"element1\"))]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
          "    let result = value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
          "    let result = value.as_array();",
          "    assert_eq!(result, Some(&vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Number(Number { n: 1 }), Value::Bool(true)]);",
          "    let result = value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&vec![Value::Number(Number { n: 1 }), Value::Bool(true)]));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Number(Number { n: 1 }), Value::Bool(true)]);",
          "    let result = value.as_array();",
          "    assert_eq!(result, Some(&vec![Value::Number(Number { n: 1 }), Value::Bool(true)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![]);",
          "    let result = value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&vec![]));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![]);",
          "    let result = value.as_array();",
          "    assert_eq!(result, Some(&vec![]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]