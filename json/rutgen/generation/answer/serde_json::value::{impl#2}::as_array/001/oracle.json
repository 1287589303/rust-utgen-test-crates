[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_array(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    value.as_array();",
          "    assert_eq!(value.as_array(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_array(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    value.as_array();",
          "    assert_eq!(value.as_array(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: 1 });",
          "    value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_array(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: 1 });",
          "    value.as_array();",
          "    assert_eq!(value.as_array(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"test\"));",
          "    value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_array(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"test\"));",
          "    value.as_array();",
          "    assert_eq!(value.as_array(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    value.as_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_array(), None);"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    value.as_array();",
          "    assert_eq!(value.as_array(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]