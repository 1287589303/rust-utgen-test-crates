[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[];",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert_eq!(deserializer.read.index, 0);",
          "    assert_eq!(deserializer.read.slice.len(), 0);",
          "    assert!(deserializer.single_precision == false);",
          "    assert!(deserializer.disable_recursion_limit == false);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[];",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert_eq!(deserializer.read.index, 0);",
          "    assert_eq!(deserializer.read.slice.len(), 0);",
          "    assert!(deserializer.single_precision == false);",
          "    assert!(deserializer.disable_recursion_limit == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[0];",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.read.slice, &[0]);",
          "    assert_eq!(deserializer.index, 0);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[0];",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert_eq!(deserializer.read.slice, &[0]);",
          "    assert_eq!(deserializer.index, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"{}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: &[u8] = b\"{}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert_eq!(deserializer.read.slice, bytes);",
          "    assert_eq!(deserializer.read.index, 0);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"{}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    let bytes: &[u8] = b\"{}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert_eq!(deserializer.read.slice, bytes);",
          "    assert_eq!(deserializer.read.index, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"[]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: &[u8] = b\"[]\";",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert_eq!(deserializer.read.index, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(std::ptr::eq(&deserializer.read.slice, bytes));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"[]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    let bytes: &[u8] = b\"[]\";",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert_eq!(deserializer.read.index, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert!(std::mem::size_of_val(&deserializer) > 0);",
          "    assert!(std::ptr::eq(&deserializer.read.slice, bytes));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"{\\\"key\\\": \\\"value\\\"}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.read.slice, b\"{\\\"key\\\": \\\"value\\\"}\");",
          "    assert_eq!(deserializer.remaining_depth, expected_initial_depth);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert!(deserializer.single_precision == default_single_precision_value);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"{\\\"key\\\": \\\"value\\\"}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert_eq!(deserializer.read.slice, b\"{\\\"key\\\": \\\"value\\\"}\");",
          "    assert_eq!(deserializer.remaining_depth, expected_initial_depth);",
          "    assert!(deserializer.scratch.is_empty());",
          "    assert!(deserializer.single_precision == default_single_precision_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"[1, 2, 3]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: &[u8] = b\"[1, 2, 3]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert!(deserializer.read.index == 0);",
          "    assert_eq!(deserializer.read.slice, bytes);",
          "    assert_eq!(deserializer.remaining_depth, 8);",
          "    assert!(deserializer.scratch.is_empty());",
          "    #[cfg(feature = \"float_roundtrip\")];",
          "    assert!(!deserializer.single_precision);",
          "    #[cfg(feature = \"unbounded_depth\")];",
          "    assert!(!deserializer.disable_recursion_limit);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"[1, 2, 3]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    let bytes: &[u8] = b\"[1, 2, 3]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert!(deserializer.read.index == 0);",
          "    assert_eq!(deserializer.read.slice, bytes);",
          "    assert_eq!(deserializer.remaining_depth, 8);",
          "    assert!(deserializer.scratch.is_empty());",
          "    #[cfg(feature = \"float_roundtrip\")];",
          "    assert!(!deserializer.single_precision);",
          "    #[cfg(feature = \"unbounded_depth\")];",
          "    assert!(!deserializer.disable_recursion_limit);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"{key: value}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.read.slice == bytes);",
          "    assert_eq!(deserializer.index, 0);",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert!(deserializer.scratch.is_empty());"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"{key: value}\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    assert!(deserializer.read.slice == bytes);",
          "    assert_eq!(deserializer.index, 0);",
          "    assert_eq!(deserializer.remaining_depth, 0);",
          "    assert!(deserializer.scratch.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"{[1, 2, 3]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: &[u8] = b\"{[1, 2, 3]\";",
          "    assert!(deserializer.read.index == 0);",
          "    assert_eq!(deserializer.scratch.len(), 0);",
          "    assert!(deserializer.remaining_depth == 0);"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"{[1, 2, 3]\";",
          "    let deserializer = serde_json::Deserializer::from_slice(bytes);",
          "    let bytes: &[u8] = b\"{[1, 2, 3]\";",
          "    assert!(deserializer.read.index == 0);",
          "    assert_eq!(deserializer.scratch.len(), 0);",
          "    assert!(deserializer.remaining_depth == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]