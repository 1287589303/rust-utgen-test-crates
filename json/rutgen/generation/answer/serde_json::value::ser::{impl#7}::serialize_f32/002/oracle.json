[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::NAN;",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(float_key_must_be_finite()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::NAN;",
          "    let _result = serializer.serialize_f32(value);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(float_key_must_be_finite()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::INFINITY;",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let value = f32::INFINITY;",
          "    let result = serializer.serialize_f32(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(float_key_must_be_finite()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::INFINITY;",
          "    let _result = serializer.serialize_f32(value);",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::INFINITY;",
          "    let result = serializer.serialize_f32(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(float_key_must_be_finite()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::NEG_INFINITY;",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let value = f32::NEG_INFINITY;",
          "    let result = serializer.serialize_f32(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(float_key_must_be_finite()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::NEG_INFINITY;",
          "    let _result = serializer.serialize_f32(value);",
          "    let serializer = MapKeySerializer;",
          "    let value = f32::NEG_INFINITY;",
          "    let result = serializer.serialize_f32(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(float_key_must_be_finite()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]