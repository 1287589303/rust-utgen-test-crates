[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 1.0_f32; // A positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.0).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 1.0_f32; // A positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.0).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = -1.0_f32; // A negative finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), ryu::Buffer::new().format_finite(-1.0_f32).to_owned());"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = -1.0_f32; // A negative finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), ryu::Buffer::new().format_finite(-1.0_f32).to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 1.17549435e-38_f32; // A small positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.17549435e-38_f32).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 1.17549435e-38_f32; // A small positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(1.17549435e-38_f32).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 3.4028235e38_f32; // The largest positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(3.4028235e38_f32).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 3.4028235e38_f32; // The largest positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(3.4028235e38_f32).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 3.4028234e38_f32; // A value just below the largest positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let expected = ryu::Buffer::new().format_finite(value).to_owned();",
          "    assert_eq!(_result.unwrap(), expected);"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 3.4028234e38_f32; // A value just below the largest positive finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    assert!(_result.is_ok());",
          "    let expected = ryu::Buffer::new().format_finite(value).to_owned();",
          "    assert_eq!(_result.unwrap(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = -1.17549435e-38_f32; // A small negative finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let value = -1.17549435e-38_f32;",
          "    let expected_result = Ok(ryu::Buffer::new().format_finite(value).to_owned());",
          "    assert_eq!(_result, expected_result);"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = -1.17549435e-38_f32; // A small negative finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    let serializer = MapKeySerializer;",
          "    let value = -1.17549435e-38_f32;",
          "    let expected_result = Ok(ryu::Buffer::new().format_finite(value).to_owned());",
          "    assert_eq!(_result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 0.0_f32; // Zero is a finite value",
          "    let _result = serializer.serialize_f32(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(0.0_f32).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value = 0.0_f32; // Zero is a finite value",
          "    let _result = serializer.serialize_f32(value);",
          "    assert_eq!(_result, Ok(ryu::Buffer::new().format_finite(0.0_f32).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]