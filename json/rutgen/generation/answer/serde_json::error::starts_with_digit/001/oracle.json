[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"0abc\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"0abc\"), true);",
          "    assert_eq!(starts_with_digit(\"1abc\"), true);",
          "    assert_eq!(starts_with_digit(\"2abc\"), true);",
          "    assert_eq!(starts_with_digit(\"3abc\"), true);",
          "    assert_eq!(starts_with_digit(\"4abc\"), true);",
          "    assert_eq!(starts_with_digit(\"5abc\"), true);",
          "    assert_eq!(starts_with_digit(\"6abc\"), true);",
          "    assert_eq!(starts_with_digit(\"7abc\"), true);",
          "    assert_eq!(starts_with_digit(\"8abc\"), true);",
          "    assert_eq!(starts_with_digit(\"9abc\"), true);"
        ],
        "code": [
          "{",
          "    let slice = \"0abc\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"0abc\"), true);",
          "    assert_eq!(starts_with_digit(\"1abc\"), true);",
          "    assert_eq!(starts_with_digit(\"2abc\"), true);",
          "    assert_eq!(starts_with_digit(\"3abc\"), true);",
          "    assert_eq!(starts_with_digit(\"4abc\"), true);",
          "    assert_eq!(starts_with_digit(\"5abc\"), true);",
          "    assert_eq!(starts_with_digit(\"6abc\"), true);",
          "    assert_eq!(starts_with_digit(\"7abc\"), true);",
          "    assert_eq!(starts_with_digit(\"8abc\"), true);",
          "    assert_eq!(starts_with_digit(\"9abc\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"1xyz\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"1xyz\"), true);",
          "    assert_eq!(starts_with_digit(\"0abc\"), true);",
          "    assert_eq!(starts_with_digit(\"9xyz\"), true);",
          "    assert_eq!(starts_with_digit(\"abc\"), false);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"!xyz\"), false);"
        ],
        "code": [
          "{",
          "    let slice = \"1xyz\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"1xyz\"), true);",
          "    assert_eq!(starts_with_digit(\"0abc\"), true);",
          "    assert_eq!(starts_with_digit(\"9xyz\"), true);",
          "    assert_eq!(starts_with_digit(\"abc\"), false);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"!xyz\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"2hello\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(starts_with_digit(\"0\"));",
          "    assert!(starts_with_digit(\"1\"));",
          "    assert!(starts_with_digit(\"2\"));",
          "    assert!(starts_with_digit(\"3\"));",
          "    assert!(starts_with_digit(\"4\"));",
          "    assert!(starts_with_digit(\"5\"));",
          "    assert!(starts_with_digit(\"6\"));",
          "    assert!(starts_with_digit(\"7\"));",
          "    assert!(starts_with_digit(\"8\"));",
          "    assert!(starts_with_digit(\"9\"));",
          "    assert!(!starts_with_digit(\"hello\"));",
          "    assert!(!starts_with_digit(\"\"));"
        ],
        "code": [
          "{",
          "    let slice = \"2hello\";",
          "    starts_with_digit(slice);",
          "    assert!(starts_with_digit(\"0\"));",
          "    assert!(starts_with_digit(\"1\"));",
          "    assert!(starts_with_digit(\"2\"));",
          "    assert!(starts_with_digit(\"3\"));",
          "    assert!(starts_with_digit(\"4\"));",
          "    assert!(starts_with_digit(\"5\"));",
          "    assert!(starts_with_digit(\"6\"));",
          "    assert!(starts_with_digit(\"7\"));",
          "    assert!(starts_with_digit(\"8\"));",
          "    assert!(starts_with_digit(\"9\"));",
          "    assert!(!starts_with_digit(\"hello\"));",
          "    assert!(!starts_with_digit(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"3world\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(starts_with_digit(\"0world\") == true);",
          "    assert!(starts_with_digit(\"1test\") == true);",
          "    assert!(starts_with_digit(\"2example\") == true);",
          "    assert!(starts_with_digit(\"3hello\") == true);",
          "    assert!(starts_with_digit(\"4data\") == true);",
          "    assert!(starts_with_digit(\"5string\") == true);",
          "    assert!(starts_with_digit(\"6json\") == true);",
          "    assert!(starts_with_digit(\"7testcase\") == true);",
          "    assert!(starts_with_digit(\"8check\") == true);",
          "    assert!(starts_with_digit(\"9value\") == true);"
        ],
        "code": [
          "{",
          "    let slice = \"3world\";",
          "    starts_with_digit(slice);",
          "    assert!(starts_with_digit(\"0world\") == true);",
          "    assert!(starts_with_digit(\"1test\") == true);",
          "    assert!(starts_with_digit(\"2example\") == true);",
          "    assert!(starts_with_digit(\"3hello\") == true);",
          "    assert!(starts_with_digit(\"4data\") == true);",
          "    assert!(starts_with_digit(\"5string\") == true);",
          "    assert!(starts_with_digit(\"6json\") == true);",
          "    assert!(starts_with_digit(\"7testcase\") == true);",
          "    assert!(starts_with_digit(\"8check\") == true);",
          "    assert!(starts_with_digit(\"9value\") == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"4test\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"0\"), true);",
          "    assert_eq!(starts_with_digit(\"1\"), true);",
          "    assert_eq!(starts_with_digit(\"2\"), true);",
          "    assert_eq!(starts_with_digit(\"3\"), true);",
          "    assert_eq!(starts_with_digit(\"4\"), true);",
          "    assert_eq!(starts_with_digit(\"5\"), true);",
          "    assert_eq!(starts_with_digit(\"6\"), true);",
          "    assert_eq!(starts_with_digit(\"7\"), true);",
          "    assert_eq!(starts_with_digit(\"8\"), true);",
          "    assert_eq!(starts_with_digit(\"9\"), true);",
          "    assert_eq!(starts_with_digit(\"10\"), true);",
          "    assert_eq!(starts_with_digit(\"test\"), false);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\" -1\"), false);",
          "    assert_eq!(starts_with_digit(\"2.5\"), true);",
          "    assert_eq!(starts_with_digit(\" 4\"), true);",
          "    assert_eq!(starts_with_digit(\"-5\"), false);",
          "    assert_eq!(starts_with_digit(\"+3\"), true);",
          "    assert_eq!(starts_with_digit(\"  \"), false);"
        ],
        "code": [
          "{",
          "    let slice = \"4test\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"0\"), true);",
          "    assert_eq!(starts_with_digit(\"1\"), true);",
          "    assert_eq!(starts_with_digit(\"2\"), true);",
          "    assert_eq!(starts_with_digit(\"3\"), true);",
          "    assert_eq!(starts_with_digit(\"4\"), true);",
          "    assert_eq!(starts_with_digit(\"5\"), true);",
          "    assert_eq!(starts_with_digit(\"6\"), true);",
          "    assert_eq!(starts_with_digit(\"7\"), true);",
          "    assert_eq!(starts_with_digit(\"8\"), true);",
          "    assert_eq!(starts_with_digit(\"9\"), true);",
          "    assert_eq!(starts_with_digit(\"10\"), true);",
          "    assert_eq!(starts_with_digit(\"test\"), false);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\" -1\"), false);",
          "    assert_eq!(starts_with_digit(\"2.5\"), true);",
          "    assert_eq!(starts_with_digit(\" 4\"), true);",
          "    assert_eq!(starts_with_digit(\"-5\"), false);",
          "    assert_eq!(starts_with_digit(\"+3\"), true);",
          "    assert_eq!(starts_with_digit(\"  \"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"5example\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"5example\"), true);",
          "    assert_eq!(starts_with_digit(\"0example\"), true);",
          "    assert_eq!(starts_with_digit(\"9example\"), true);",
          "    assert_eq!(starts_with_digit(\"10example\"), true);",
          "    assert_eq!(starts_with_digit(\"example5\"), false);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"example\"), false);",
          "    assert_eq!(starts_with_digit(\"!example\"), false);",
          "    assert_eq!(starts_with_digit(\" 5example\"), false);"
        ],
        "code": [
          "{",
          "    let slice = \"5example\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"5example\"), true);",
          "    assert_eq!(starts_with_digit(\"0example\"), true);",
          "    assert_eq!(starts_with_digit(\"9example\"), true);",
          "    assert_eq!(starts_with_digit(\"10example\"), true);",
          "    assert_eq!(starts_with_digit(\"example5\"), false);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"example\"), false);",
          "    assert_eq!(starts_with_digit(\"!example\"), false);",
          "    assert_eq!(starts_with_digit(\" 5example\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"6sample\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"0sample\"), true);",
          "    assert_eq!(starts_with_digit(\"1sample\"), true);",
          "    assert_eq!(starts_with_digit(\"2sample\"), true);",
          "    assert_eq!(starts_with_digit(\"3sample\"), true);",
          "    assert_eq!(starts_with_digit(\"4sample\"), true);",
          "    assert_eq!(starts_with_digit(\"5sample\"), true);",
          "    assert_eq!(starts_with_digit(\"6sample\"), true);",
          "    assert_eq!(starts_with_digit(\"7sample\"), true);",
          "    assert_eq!(starts_with_digit(\"8sample\"), true);",
          "    assert_eq!(starts_with_digit(\"9sample\"), true);"
        ],
        "code": [
          "{",
          "    let slice = \"6sample\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"0sample\"), true);",
          "    assert_eq!(starts_with_digit(\"1sample\"), true);",
          "    assert_eq!(starts_with_digit(\"2sample\"), true);",
          "    assert_eq!(starts_with_digit(\"3sample\"), true);",
          "    assert_eq!(starts_with_digit(\"4sample\"), true);",
          "    assert_eq!(starts_with_digit(\"5sample\"), true);",
          "    assert_eq!(starts_with_digit(\"6sample\"), true);",
          "    assert_eq!(starts_with_digit(\"7sample\"), true);",
          "    assert_eq!(starts_with_digit(\"8sample\"), true);",
          "    assert_eq!(starts_with_digit(\"9sample\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"7data\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"0data\"), true);",
          "    assert_eq!(starts_with_digit(\"1data\"), true);",
          "    assert_eq!(starts_with_digit(\"2data\"), true);",
          "    assert_eq!(starts_with_digit(\"3data\"), true);",
          "    assert_eq!(starts_with_digit(\"4data\"), true);",
          "    assert_eq!(starts_with_digit(\"5data\"), true);",
          "    assert_eq!(starts_with_digit(\"6data\"), true);",
          "    assert_eq!(starts_with_digit(\"7data\"), true);",
          "    assert_eq!(starts_with_digit(\"8data\"), true);",
          "    assert_eq!(starts_with_digit(\"9data\"), true);"
        ],
        "code": [
          "{",
          "    let slice = \"7data\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"0data\"), true);",
          "    assert_eq!(starts_with_digit(\"1data\"), true);",
          "    assert_eq!(starts_with_digit(\"2data\"), true);",
          "    assert_eq!(starts_with_digit(\"3data\"), true);",
          "    assert_eq!(starts_with_digit(\"4data\"), true);",
          "    assert_eq!(starts_with_digit(\"5data\"), true);",
          "    assert_eq!(starts_with_digit(\"6data\"), true);",
          "    assert_eq!(starts_with_digit(\"7data\"), true);",
          "    assert_eq!(starts_with_digit(\"8data\"), true);",
          "    assert_eq!(starts_with_digit(\"9data\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"8info\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"8info\"), true);",
          "    assert_eq!(starts_with_digit(\"0info\"), true);",
          "    assert_eq!(starts_with_digit(\"5info\"), true);",
          "    assert_eq!(starts_with_digit(\"9info\"), true);",
          "    assert_eq!(starts_with_digit(\"10info\"), true);"
        ],
        "code": [
          "{",
          "    let slice = \"8info\";",
          "    starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"8info\"), true);",
          "    assert_eq!(starts_with_digit(\"0info\"), true);",
          "    assert_eq!(starts_with_digit(\"5info\"), true);",
          "    assert_eq!(starts_with_digit(\"9info\"), true);",
          "    assert_eq!(starts_with_digit(\"10info\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"9more\";",
          "    starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(starts_with_digit(\"0more\") == true);",
          "    assert!(starts_with_digit(\"1more\") == true);",
          "    assert!(starts_with_digit(\"5more\") == true);",
          "    assert!(starts_with_digit(\"9more\") == true);",
          "    assert!(starts_with_digit(\"more\") == false);",
          "    assert!(starts_with_digit(\"\") == false);"
        ],
        "code": [
          "{",
          "    let slice = \"9more\";",
          "    starts_with_digit(slice);",
          "    assert!(starts_with_digit(\"0more\") == true);",
          "    assert!(starts_with_digit(\"1more\") == true);",
          "    assert!(starts_with_digit(\"5more\") == true);",
          "    assert!(starts_with_digit(\"9more\") == true);",
          "    assert!(starts_with_digit(\"more\") == false);",
          "    assert!(starts_with_digit(\"\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]