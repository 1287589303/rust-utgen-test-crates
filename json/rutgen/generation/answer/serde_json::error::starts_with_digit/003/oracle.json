[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"\";",
          "    let result = starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let slice = \"\";",
          "    let result = starts_with_digit(slice);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"a\";",
          "    let result = starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let slice = \"a\";",
          "    let result = starts_with_digit(slice);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"1\";",
          "    let result = starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"abc\"), false);",
          "    assert_eq!(starts_with_digit(\" \"), false);",
          "    assert_eq!(starts_with_digit(\"\\n\"), false);",
          "    assert_eq!(starts_with_digit(\"\\t\"), false);",
          "    assert_eq!(starts_with_digit(&*String::new()), false);"
        ],
        "code": [
          "{",
          "    let slice = \"1\";",
          "    let result = starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"abc\"), false);",
          "    assert_eq!(starts_with_digit(\" \"), false);",
          "    assert_eq!(starts_with_digit(\"\\n\"), false);",
          "    assert_eq!(starts_with_digit(\"\\t\"), false);",
          "    assert_eq!(starts_with_digit(&*String::new()), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"   \";",
          "    let result = starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let slice = \"   \";",
          "    let result = starts_with_digit(slice);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = \"a1\";",
          "    let result = starts_with_digit(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"\\n\"), false);",
          "    assert_eq!(starts_with_digit(\" \"), false);",
          "    assert_eq!(starts_with_digit(\"\\t\"), false);",
          "    assert_eq!(starts_with_digit(\"abc\"), false);"
        ],
        "code": [
          "{",
          "    let slice = \"a1\";",
          "    let result = starts_with_digit(slice);",
          "    assert_eq!(starts_with_digit(\"\"), false);",
          "    assert_eq!(starts_with_digit(\"\\n\"), false);",
          "    assert_eq!(starts_with_digit(\" \"), false);",
          "    assert_eq!(starts_with_digit(\"\\t\"), false);",
          "    assert_eq!(starts_with_digit(\"abc\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]