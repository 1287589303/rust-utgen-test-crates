[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = float_key_must_be_finite();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
          "    assert_eq!(result.err.line, 0);",
          "    assert_eq!(result.err.column, 0);"
        ],
        "code": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
          "    assert_eq!(result.err.line, 0);",
          "    assert_eq!(result.err.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    match result.err.code {",
          "        ErrorCode::FloatKeyMustBeFinite => {},",
          "        _ => panic!(\"Expected FloatKeyMustBeFinite\"),",
          "    }",
          "}"
        ],
        "oracle": [
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
          "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
          "    panic::catch_unwind(|| { float_key_must_be_finite(); }).is_ok();",
          "    let error = float_key_must_be_finite();",
          "    assert!(error.err.line == 0 && error.err.column == 0);"
        ],
        "code": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    match result.err.code {",
          "        ErrorCode::FloatKeyMustBeFinite => {},",
          "        _ => panic!(\"Expected FloatKeyMustBeFinite\"),",
          "    }",
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
          "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
          "    panic::catch_unwind(|| { float_key_must_be_finite(); }).is_ok();",
          "    let error = float_key_must_be_finite();",
          "    assert!(error.err.line == 0 && error.err.column == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.line, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.err.column, 0);",
          "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));"
        ],
        "code": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.line, 0);",
          "    assert_eq!(result.err.column, 0);",
          "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.column, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.err.line, 0);",
          "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
          "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
          "    assert!(result.err.err.is_some());",
          "    assert!(result.err.column >= 0);"
        ],
        "code": [
          "{",
          "    let result = float_key_must_be_finite();",
          "    assert_eq!(result.err.column, 0);",
          "    assert_eq!(result.err.line, 0);",
          "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
          "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
          "    assert!(result.err.err.is_some());",
          "    assert!(result.err.column >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]