[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(-9223372036854775809);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(-9223372036854775809);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(18446744073709551616);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(18446744073709551616);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(-9223372036854775808);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(-9223372036854775808);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(9223372036854775807);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(9223372036854775807);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(-1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(-1);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Number { n: N::PosInt(0) }));",
          "    assert_eq!(Number::from_i128(i128::MAX), None);",
          "    assert_eq!(Number::from_i128(i128::MIN), None);",
          "    assert_eq!(Number::from_i128(1), Some(Number { n: N::PosInt(1) }));",
          "    assert_eq!(Number::from_i128(-1), Some(Number { n: N::NegInt(-1) }));",
          "    assert_eq!(Number::from_i128(u64::MAX as i128 + 1), None);",
          "    assert_eq!(Number::from_i128(i64::MIN as i128 - 1), None);"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(0);",
          "    assert_eq!(result, Some(Number { n: N::PosInt(0) }));",
          "    assert_eq!(Number::from_i128(i128::MAX), None);",
          "    assert_eq!(Number::from_i128(i128::MIN), None);",
          "    assert_eq!(Number::from_i128(1), Some(Number { n: N::PosInt(1) }));",
          "    assert_eq!(Number::from_i128(-1), Some(Number { n: N::NegInt(-1) }));",
          "    assert_eq!(Number::from_i128(u64::MAX as i128 + 1), None);",
          "    assert_eq!(Number::from_i128(i64::MIN as i128 - 1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_i128(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Number { n: N::PosInt(1) }));",
          "    assert_eq!(Number::from_i128(i128::MIN), None);",
          "    assert_eq!(Number::from_i128(0), Some(Number { n: N::PosInt(0) }));",
          "    assert_eq!(Number::from_i128(i128::MAX), Some(Number { n: N::NegInt(i64::MAX) }));",
          "    assert_eq!(Number::from_i128(2i128.pow(64)), None);",
          "    assert_eq!(Number::from_i128(i128::from(u64::MAX) + 1), None);"
        ],
        "code": [
          "{",
          "    let result = Number::from_i128(1);",
          "    assert_eq!(result, Some(Number { n: N::PosInt(1) }));",
          "    assert_eq!(Number::from_i128(i128::MIN), None);",
          "    assert_eq!(Number::from_i128(0), Some(Number { n: N::PosInt(0) }));",
          "    assert_eq!(Number::from_i128(i128::MAX), Some(Number { n: N::NegInt(i64::MAX) }));",
          "    assert_eq!(Number::from_i128(2i128.pow(64)), None);",
          "    assert_eq!(Number::from_i128(i128::from(u64::MAX) + 1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]