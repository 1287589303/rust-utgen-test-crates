[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::Float(-1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::Float(-1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert_ne!(hasher.finish(), 0);"
        ],
        "code": [
          "{",
          "    let value = N::Float(-1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::Float(-1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert_ne!(hasher.finish(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::Float(1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::Float(1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    let expected_hash = value.to_bits().hash(&mut hasher);",
          "    assert_ne!(expected_hash, 0);"
        ],
        "code": [
          "{",
          "    let value = N::Float(1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::Float(1.0f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    let expected_hash = value.to_bits().hash(&mut hasher);",
          "    assert_ne!(expected_hash, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::Float(1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::Float(1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert!(hasher.finish() != 0);"
        ],
        "code": [
          "{",
          "    let value = N::Float(1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::Float(1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert!(hasher.finish() != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::Float(1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::Float(1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    let hash_value = hasher.finish();",
          "    assert_ne!(hash_value, 0);",
          "    assert!(hash_value > 0);"
        ],
        "code": [
          "{",
          "    let value = N::Float(1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::Float(1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    let hash_value = hasher.finish();",
          "    assert_ne!(hash_value, 0);",
          "    assert!(hash_value > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::Float(-1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::Float(-1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert!(hasher.finish() != 0);",
          "    assert!(hasher.finish() != std::collections::hash_map::DefaultHasher::new().finish());"
        ],
        "code": [
          "{",
          "    let value = N::Float(-1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::Float(-1.0e+10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert!(hasher.finish() != 0);",
          "    assert!(hasher.finish() != std::collections::hash_map::DefaultHasher::new().finish());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::Float(-1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::Float(-1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert!(hasher.finish() != 0);"
        ],
        "code": [
          "{",
          "    let value = N::Float(-1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::Float(-1.0e-10f64);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert!(hasher.finish() != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]