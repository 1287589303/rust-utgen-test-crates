[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::PosInt(1);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::PosInt(1);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert_eq!(hasher.finish(), expected_hash_value_for_posint_1);"
        ],
        "code": [
          "{",
          "    let value = N::PosInt(1);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::PosInt(1);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert_eq!(hasher.finish(), expected_hash_value_for_posint_1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::PosInt(123456);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hasher.finish(), expected_hash_value_for_pos_int);"
        ],
        "code": [
          "{",
          "    let value = N::PosInt(123456);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    assert_eq!(hasher.finish(), expected_hash_value_for_pos_int);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = N::PosInt(u64::MAX);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "}"
        ],
        "oracle": [
          "    let value = N::PosInt(u64::MAX);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let hash_result = hasher.finish();",
          "    assert_eq!(hash_result, expected_hash_for_u64_max);"
        ],
        "code": [
          "{",
          "    let value = N::PosInt(u64::MAX);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let value = N::PosInt(u64::MAX);",
          "    let mut hasher = std::collections::hash_map::DefaultHasher::new();",
          "    value.hash(&mut hasher);",
          "    let hash_result = hasher.finish();",
          "    assert_eq!(hash_result, expected_hash_for_u64_max);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]