[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter;",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    key_serializer.serialize_u128(0).expect(\"Serialization should succeed\");",
          "}"
        ],
        "oracle": [
          "    assert!(key_serializer.ser.formatter.begin_string(&mut key_serializer.ser.writer).is_ok());",
          "    assert!(key_serializer.ser.formatter.write_u128(&mut key_serializer.ser.writer, 0).is_ok());",
          "    assert!(key_serializer.ser.formatter.end_string(&mut key_serializer.ser.writer).is_ok());"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter;",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    key_serializer.serialize_u128(0).expect(\"Serialization should succeed\");",
          "    assert!(key_serializer.ser.formatter.begin_string(&mut key_serializer.ser.writer).is_ok());",
          "    assert!(key_serializer.ser.formatter.write_u128(&mut key_serializer.ser.writer, 0).is_ok());",
          "    assert!(key_serializer.ser.formatter.end_string(&mut key_serializer.ser.writer).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter;",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    key_serializer.serialize_u128(170141183460469231731687303715884105727).expect(\"Serialization should succeed\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key_serializer.ser.writer.len(), expected_length);",
          "    assert_eq!(key_serializer.ser.writer[0], b'\"');",
          "    assert_eq!(key_serializer.ser.writer[key_serializer.ser.writer.len() - 1], b'\"');",
          "    assert!(key_serializer.ser.writer.contains(&b'1'));",
          "    assert!(key_serializer.ser.writer.contains(&b'7'));",
          "    assert!(key_serializer.ser.writer.contains(&b'0'));",
          "    assert!(key_serializer.ser.writer.contains(&b'4'));",
          "    assert!(key_serializer.ser.writer.contains(&b'3'));",
          "    assert!(key_serializer.ser.writer.contains(&b'6'));",
          "    assert!(key_serializer.ser.writer.contains(&b'8'));",
          "    assert!(key_serializer.ser.writer.contains(&b'5'));",
          "    assert!(key_serializer.ser.writer.contains(&(b'1'..=b'9').collect::<Vec<_>>()));"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter;",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    key_serializer.serialize_u128(170141183460469231731687303715884105727).expect(\"Serialization should succeed\");",
          "    assert_eq!(key_serializer.ser.writer.len(), expected_length);",
          "    assert_eq!(key_serializer.ser.writer[0], b'\"');",
          "    assert_eq!(key_serializer.ser.writer[key_serializer.ser.writer.len() - 1], b'\"');",
          "    assert!(key_serializer.ser.writer.contains(&b'1'));",
          "    assert!(key_serializer.ser.writer.contains(&b'7'));",
          "    assert!(key_serializer.ser.writer.contains(&b'0'));",
          "    assert!(key_serializer.ser.writer.contains(&b'4'));",
          "    assert!(key_serializer.ser.writer.contains(&b'3'));",
          "    assert!(key_serializer.ser.writer.contains(&b'6'));",
          "    assert!(key_serializer.ser.writer.contains(&b'8'));",
          "    assert!(key_serializer.ser.writer.contains(&b'5'));",
          "    assert!(key_serializer.ser.writer.contains(&(b'1'..=b'9').collect::<Vec<_>>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter;",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    key_serializer.serialize_u128(u128::MAX).expect(\"Serialization should succeed\");",
          "}"
        ],
        "oracle": [
          "    assert!(key_serializer.ser.formatter.begin_string(&mut key_serializer.ser.writer).is_ok());",
          "    assert!(key_serializer.ser.formatter.write_u128(&mut key_serializer.ser.writer, u128::MAX).is_ok());",
          "    assert!(key_serializer.ser.formatter.end_string(&mut key_serializer.ser.writer).is_ok());"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let formatter = CompactFormatter;",
          "    let mut serializer = Serializer { writer, formatter };",
          "    let key_serializer = MapKeySerializer { ser: &mut serializer };",
          "",
          "    key_serializer.serialize_u128(u128::MAX).expect(\"Serialization should succeed\");",
          "    assert!(key_serializer.ser.formatter.begin_string(&mut key_serializer.ser.writer).is_ok());",
          "    assert!(key_serializer.ser.formatter.write_u128(&mut key_serializer.ser.writer, u128::MAX).is_ok());",
          "    assert!(key_serializer.ser.formatter.end_string(&mut key_serializer.ser.writer).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]