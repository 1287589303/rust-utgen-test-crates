[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader { input: b\"012\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"00\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"1\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    let result = deserializer.scan_integer128(&mut buf);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf, \"1\");",
          "    ",
          "    let mut reader = TestReader { input: b\"123abc\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    let result = deserializer.scan_integer128(&mut buf);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf, \"123\");",
          "    ",
          "    let mut reader = TestReader { input: b\"01234\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader { input: b\"012\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"00\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"1\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    let result = deserializer.scan_integer128(&mut buf);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf, \"1\");",
          "    ",
          "    let mut reader = TestReader { input: b\"123abc\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    let result = deserializer.scan_integer128(&mut buf);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf, \"123\");",
          "    ",
          "    let mut reader = TestReader { input: b\"01234\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    ",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader { input: b\"123\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader_with_leading_zero = TestReader { input: b\"0\".to_vec(), position: 0 };",
          "    let mut buf_leading_zero = String::new();",
          "    let mut deserializer_leading_zero = Deserializer { read: reader_with_leading_zero, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_leading_zero.scan_integer128(&mut buf_leading_zero), Ok(()));",
          "    assert_eq!(buf_leading_zero, \"0\");",
          "    ",
          "    let mut reader_with_invalid_number = TestReader { input: b\"08\".to_vec(), position: 0 };",
          "    let mut buf_invalid_number = String::new();",
          "    let mut deserializer_invalid_number = Deserializer { read: reader_with_invalid_number, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_invalid_number.scan_integer128(&mut buf_invalid_number), Err(deserializer_invalid_number.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader_with_non_digit = TestReader { input: b\"a\".to_vec(), position: 0 };",
          "    let mut buf_non_digit = String::new();",
          "    let mut deserializer_non_digit = Deserializer { read: reader_with_non_digit, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_non_digit.scan_integer128(&mut buf_non_digit), Err(deserializer_non_digit.error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader_with_valid_number = TestReader { input: b\"1234\".to_vec(), position: 0 };",
          "    let mut buf_valid_number = String::new();",
          "    let mut deserializer_valid_number = Deserializer { read: reader_with_valid_number, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_valid_number.scan_integer128(&mut buf_valid_number), Ok(()));",
          "    assert_eq!(buf_valid_number, \"1234\");"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader { input: b\"123\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader_with_leading_zero = TestReader { input: b\"0\".to_vec(), position: 0 };",
          "    let mut buf_leading_zero = String::new();",
          "    let mut deserializer_leading_zero = Deserializer { read: reader_with_leading_zero, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_leading_zero.scan_integer128(&mut buf_leading_zero), Ok(()));",
          "    assert_eq!(buf_leading_zero, \"0\");",
          "    ",
          "    let mut reader_with_invalid_number = TestReader { input: b\"08\".to_vec(), position: 0 };",
          "    let mut buf_invalid_number = String::new();",
          "    let mut deserializer_invalid_number = Deserializer { read: reader_with_invalid_number, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_invalid_number.scan_integer128(&mut buf_invalid_number), Err(deserializer_invalid_number.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader_with_non_digit = TestReader { input: b\"a\".to_vec(), position: 0 };",
          "    let mut buf_non_digit = String::new();",
          "    let mut deserializer_non_digit = Deserializer { read: reader_with_non_digit, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_non_digit.scan_integer128(&mut buf_non_digit), Err(deserializer_non_digit.error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader_with_valid_number = TestReader { input: b\"1234\".to_vec(), position: 0 };",
          "    let mut buf_valid_number = String::new();",
          "    let mut deserializer_valid_number = Deserializer { read: reader_with_valid_number, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer_valid_number.scan_integer128(&mut buf_valid_number), Ok(()));",
          "    assert_eq!(buf_valid_number, \"1234\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader { input: b\"a123\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "}"
        ],
        "oracle": [
          "    let mut reader = TestReader { input: b\"0\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"00\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"1\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    ",
          "    let mut reader = TestReader { input: b\"123abc\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    assert_eq!(buf, \"123\");",
          "    ",
          "    let mut reader = TestReader { input: b\"9\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "    assert_eq!(buf, \"9\");"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl<'de> Read<'de> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                let byte = self.input[self.position];",
          "                self.position += 1;",
          "                Ok(Some(byte))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {",
          "            self.position += 1;",
          "        }",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: self.position }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'de, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader { input: b\"a123\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "    let mut reader = TestReader { input: b\"0\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"00\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Err(deserializer.peek_error(ErrorCode::InvalidNumber)));",
          "    ",
          "    let mut reader = TestReader { input: b\"1\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    ",
          "    let mut reader = TestReader { input: b\"123abc\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    assert_eq!(deserializer.scan_integer128(&mut buf), Ok(()));",
          "    assert_eq!(buf, \"123\");",
          "    ",
          "    let mut reader = TestReader { input: b\"9\".to_vec(), position: 0 };",
          "    let mut buf = String::new();",
          "    let mut deserializer = Deserializer { read: reader, scratch: Vec::new(), remaining_depth: 0 };",
          "    let _ = deserializer.scan_integer128(&mut buf);",
          "    assert_eq!(buf, \"9\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]