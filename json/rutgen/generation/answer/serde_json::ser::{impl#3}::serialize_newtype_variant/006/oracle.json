[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Ok(_buf.len())",
          "        }",
          "",
          "        fn write_all(&mut self, _buf: &[u8]) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl TestFormatter {",
          "        fn begin_object(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_key(&mut self, _writer: &mut TestWriter, _is_first: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_key(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_value(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_value(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer<'a> {",
          "        writer: TestWriter,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl<'a> ser::Serializer for &'a mut TestSerializer<'a> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "",
          "        fn serialize_str(self, _value: &str) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize<T: ?Sized + Serialize>(self, _value: &T) -> Result<()> {",
          "            Err(Error::new(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        writer: TestWriter,",
          "        formatter: TestFormatter,",
          "    };",
          "",
          "    let result: Result<()> = serializer.serialize_newtype_variant(\"test\", 0, \"variant\", &42);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"serialization error\");",
          "    assert!(serializer.formatter.end_object_value(&mut serializer.writer).is_ok());",
          "    assert!(serializer.formatter.end_object_key(&mut serializer.writer).is_ok());",
          "    assert!(serializer.serialize_str(\"variant\").is_ok());",
          "    assert!(serializer.formatter.begin_object_value(&mut serializer.writer).is_ok());",
          "    assert!(serializer.formatter.begin_object_key(&mut serializer.writer, true).is_ok());",
          "    assert!(serializer.formatter.begin_object(&mut serializer.writer).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, _buf: &[u8]) -> Result<usize> {",
          "            Ok(_buf.len())",
          "        }",
          "",
          "        fn write_all(&mut self, _buf: &[u8]) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl TestFormatter {",
          "        fn begin_object(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_key(&mut self, _writer: &mut TestWriter, _is_first: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_key(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_value(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_value(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object(&mut self, _writer: &mut TestWriter) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer<'a> {",
          "        writer: TestWriter,",
          "        formatter: TestFormatter,",
          "    }",
          "",
          "    impl<'a> ser::Serializer for &'a mut TestSerializer<'a> {",
          "        type Ok = ();",
          "        type Error = Error;",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "",
          "        fn serialize_str(self, _value: &str) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize<T: ?Sized + Serialize>(self, _value: &T) -> Result<()> {",
          "            Err(Error::new(\"serialization error\"))",
          "        }",
          "    }",
          "",
          "    let mut serializer = TestSerializer {",
          "        writer: TestWriter,",
          "        formatter: TestFormatter,",
          "    };",
          "",
          "    let result: Result<()> = serializer.serialize_newtype_variant(\"test\", 0, \"variant\", &42);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"serialization error\");",
          "    assert!(serializer.formatter.end_object_value(&mut serializer.writer).is_ok());",
          "    assert!(serializer.formatter.end_object_key(&mut serializer.writer).is_ok());",
          "    assert!(serializer.serialize_str(\"variant\").is_ok());",
          "    assert!(serializer.formatter.begin_object_value(&mut serializer.writer).is_ok());",
          "    assert!(serializer.formatter.begin_object_key(&mut serializer.writer, true).is_ok());",
          "    assert!(serializer.formatter.begin_object(&mut serializer.writer).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]