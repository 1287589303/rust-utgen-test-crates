[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct FailingFormatter;",
          "    impl FailingFormatter {",
          "        fn begin_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_key(&mut self, _: &mut dyn io::Write, _: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object_key(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct FakeWriter;",
          "    impl io::Write for FakeWriter {",
          "        fn write(&mut self, _: &[u8]) -> Result<usize> {",
          "            Ok(0)",
          "        }",
          "        ",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer<W, F> {",
          "        writer: W,",
          "        formatter: F,",
          "    }",
          "",
          "    impl<W: io::Write, F> TestSerializer<W, F> {",
          "        fn serialize_newtype_variant<T>(",
          "            self,",
          "            variant: &'static str,",
          "            value: &T,",
          "        ) -> Result<()>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            tri!(self.formatter.begin_object(&mut self.writer));",
          "            tri!(self.formatter.begin_object_key(&mut self.writer, true));",
          "            tri!(self.serialize_str(variant)); // This will produce an error",
          "            tri!(self.formatter.end_object_key(&mut self.writer));",
          "            tri!(self.formatter.begin_object_value(&mut self.writer));",
          "            tri!(value.serialize(&mut self));",
          "            self.formatter.end_object_value(&mut self.writer)?;",
          "            self.formatter.end_object(&mut self.writer)?;",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_str(&self, value: &str) -> Result<()> {",
          "            if value.is_empty() {",
          "                Err(Error::new(\"Empty string\"))",
          "            } else {",
          "                Ok(())",
          "            }",
          "        }",
          "    }",
          "",
          "    let writer = FakeWriter;",
          "    let formatter = FailingFormatter;",
          "    let serializer = TestSerializer { writer, formatter };",
          "",
          "    serializer.serialize_newtype_variant(\"test_variant\", &()).unwrap(); // This should panic",
          "}"
        ],
        "oracle": [
          "    #[should_panic]",
          "    let result = serializer.serialize_newtype_variant(\"test_variant\", &());",
          "    assert!(result.is_err());",
          "    ",
          "    let result = self.formatter.begin_object(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.formatter.begin_object_key(&mut self.writer, true).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.serialize_str(variant);",
          "    assert!(result.is_err());",
          "    ",
          "    let result = self.formatter.end_object_key(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.formatter.begin_object_value(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = value.serialize(&mut *self);",
          "    assert!(result.is_err());",
          "    ",
          "    let result = self.formatter.end_object_value(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.formatter.end_object(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct FailingFormatter;",
          "    impl FailingFormatter {",
          "        fn begin_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_key(&mut self, _: &mut dyn io::Write, _: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object_key(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct FakeWriter;",
          "    impl io::Write for FakeWriter {",
          "        fn write(&mut self, _: &[u8]) -> Result<usize> {",
          "            Ok(0)",
          "        }",
          "        ",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestSerializer<W, F> {",
          "        writer: W,",
          "        formatter: F,",
          "    }",
          "",
          "    impl<W: io::Write, F> TestSerializer<W, F> {",
          "        fn serialize_newtype_variant<T>(",
          "            self,",
          "            variant: &'static str,",
          "            value: &T,",
          "        ) -> Result<()>",
          "        where",
          "            T: ?Sized + Serialize,",
          "        {",
          "            tri!(self.formatter.begin_object(&mut self.writer));",
          "            tri!(self.formatter.begin_object_key(&mut self.writer, true));",
          "            tri!(self.serialize_str(variant)); // This will produce an error",
          "            tri!(self.formatter.end_object_key(&mut self.writer));",
          "            tri!(self.formatter.begin_object_value(&mut self.writer));",
          "            tri!(value.serialize(&mut self));",
          "            self.formatter.end_object_value(&mut self.writer)?;",
          "            self.formatter.end_object(&mut self.writer)?;",
          "            Ok(())",
          "        }",
          "",
          "        fn serialize_str(&self, value: &str) -> Result<()> {",
          "            if value.is_empty() {",
          "                Err(Error::new(\"Empty string\"))",
          "            } else {",
          "                Ok(())",
          "            }",
          "        }",
          "    }",
          "",
          "    let writer = FakeWriter;",
          "    let formatter = FailingFormatter;",
          "    let serializer = TestSerializer { writer, formatter };",
          "",
          "    serializer.serialize_newtype_variant(\"test_variant\", &()).unwrap(); // This should panic",
          "    #[should_panic]",
          "    let result = serializer.serialize_newtype_variant(\"test_variant\", &());",
          "    assert!(result.is_err());",
          "    ",
          "    let result = self.formatter.begin_object(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.formatter.begin_object_key(&mut self.writer, true).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.serialize_str(variant);",
          "    assert!(result.is_err());",
          "    ",
          "    let result = self.formatter.end_object_key(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.formatter.begin_object_value(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = value.serialize(&mut *self);",
          "    assert!(result.is_err());",
          "    ",
          "    let result = self.formatter.end_object_value(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "    ",
          "    let result = self.formatter.end_object(&mut self.writer).map_err(Error::io);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]