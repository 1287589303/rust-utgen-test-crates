[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_key(&mut self, _: &mut dyn io::Write, _: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_key(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: Vec::new() };",
          "    let formatter = TestFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "",
          "    let value = 42;",
          "    let variant = \"test_variant\";",
          "",
          "    serializer.serialize_newtype_variant(\"test\", 0, variant, &value).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.formatter.begin_object(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 241 is true",
          "    self.formatter.end_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 259 is true",
          "    self.formatter.begin_object_key(&mut self.writer, true).map_err(Error::io) matches core::result::Result::Err(err) at line 245 is true",
          "    self.serialize_str(variant) matches core::result::Result::Err(err) at line 249 is true",
          "    self.formatter.end_object_key(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 250 is true",
          "    self.formatter.begin_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 254 is true",
          "    self.formatter.end_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 259 is true"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "    ",
          "    impl io::Write for TestWriter {",
          "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
          "            self.buffer.extend_from_slice(buf);",
          "            Ok(buf.len())",
          "        }",
          "",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_key(&mut self, _: &mut dyn io::Write, _: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_key(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: Vec::new() };",
          "    let formatter = TestFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "",
          "    let value = 42;",
          "    let variant = \"test_variant\";",
          "",
          "    serializer.serialize_newtype_variant(\"test\", 0, variant, &value).unwrap();",
          "    self.formatter.begin_object(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 241 is true",
          "    self.formatter.end_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 259 is true",
          "    self.formatter.begin_object_key(&mut self.writer, true).map_err(Error::io) matches core::result::Result::Err(err) at line 245 is true",
          "    self.serialize_str(variant) matches core::result::Result::Err(err) at line 249 is true",
          "    self.formatter.end_object_key(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 250 is true",
          "    self.formatter.begin_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 254 is true",
          "    self.formatter.end_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 259 is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct FaultyWriter;",
          "",
          "    impl io::Write for FaultyWriter {",
          "        fn write(&mut self, _: &[u8]) -> Result<usize> {",
          "            Err(Error::other(\"Write error\"))",
          "        }",
          "",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_key(&mut self, _: &mut dyn io::Write, _: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_key(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = FaultyWriter;",
          "    let formatter = TestFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "",
          "    let value = 42;",
          "    let variant = \"test_variant\";",
          "",
          "    serializer.serialize_newtype_variant(\"test\", 0, variant, &value).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.formatter.begin_object(&mut self.writer).map_err(Error::io) matches core::result::Result::Ok(val) at line 241 is true",
          "    self.formatter.begin_object_key(&mut self.writer, true).map_err(Error::io) matches core::result::Result::Ok(val) at line 245 is true",
          "    self.serialize_str(variant) matches core::result::Result::Ok(val) at line 249 is true",
          "    self.formatter.end_object_key(&mut self.writer).map_err(Error::io) matches core::result::Result::Ok(val) at line 250 is true",
          "    self.formatter.begin_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 254 is true",
          "    self.formatter.end_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 259 is true",
          "    self.formatter.end_object(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 266 is true"
        ],
        "code": [
          "{",
          "    struct FaultyWriter;",
          "",
          "    impl io::Write for FaultyWriter {",
          "        fn write(&mut self, _: &[u8]) -> Result<usize> {",
          "            Err(Error::other(\"Write error\"))",
          "        }",
          "",
          "        fn flush(&mut self) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    struct TestFormatter;",
          "",
          "    impl Formatter for TestFormatter {",
          "        fn begin_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn begin_object_key(&mut self, _: &mut dyn io::Write, _: bool) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_key(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn begin_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "",
          "        fn end_object_value(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn end_object(&mut self, _: &mut dyn io::Write) -> Result<()> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = FaultyWriter;",
          "    let formatter = TestFormatter;",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter,",
          "    };",
          "",
          "    let value = 42;",
          "    let variant = \"test_variant\";",
          "",
          "    serializer.serialize_newtype_variant(\"test\", 0, variant, &value).unwrap();",
          "    self.formatter.begin_object(&mut self.writer).map_err(Error::io) matches core::result::Result::Ok(val) at line 241 is true",
          "    self.formatter.begin_object_key(&mut self.writer, true).map_err(Error::io) matches core::result::Result::Ok(val) at line 245 is true",
          "    self.serialize_str(variant) matches core::result::Result::Ok(val) at line 249 is true",
          "    self.formatter.end_object_key(&mut self.writer).map_err(Error::io) matches core::result::Result::Ok(val) at line 250 is true",
          "    self.formatter.begin_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 254 is true",
          "    self.formatter.end_object_value(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 259 is true",
          "    self.formatter.end_object(&mut self.writer).map_err(Error::io) matches core::result::Result::Err(err) at line 266 is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]