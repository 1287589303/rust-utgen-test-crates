[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(1.0_f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let number = result.unwrap();",
          "    assert!(number.is_f64());",
          "    assert_eq!(number.as_f64(), Some(1.0));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(1.0_f32);",
          "    assert!(result.is_some());",
          "    let number = result.unwrap();",
          "    assert!(number.is_f64());",
          "    assert_eq!(number.as_f64(), Some(1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(3.4028234e38_f32);",
          "}"
        ],
        "oracle": [
          "    let result = Number::from_f32(3.4028234e38_f32);",
          "    assert!(result.is_some());",
          "    if let Some(number) = result {",
          "    assert!(number.is_f64());",
          "    assert_eq!(number.as_f64(), Some(3.4028234e38_f64));",
          "    }"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(3.4028234e38_f32);",
          "    let result = Number::from_f32(3.4028234e38_f32);",
          "    assert!(result.is_some());",
          "    if let Some(number) = result {",
          "    assert!(number.is_f64());",
          "    assert_eq!(number.as_f64(), Some(3.4028234e38_f64));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(0.0_f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(0.0));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(0.0_f32);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(0.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(-1.0_f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-1.0));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(-1.0_f32);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(-1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(-3.4028234e38_f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    match result {",
          "    Some(number) => {",
          "    assert_eq!(number.as_f32(), Some(-3.4028234_f32));",
          "    assert_eq!(number.as_f64(), Some(-3.4028234_f64));",
          "    assert!(number.is_f64());",
          "    assert!(number.is_i64() == false);",
          "    assert!(number.is_u64() == false);",
          "    },",
          "    None => panic!(\"Expected Some(Number) but got None\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(-3.4028234e38_f32);",
          "    assert!(result.is_some());",
          "    match result {",
          "    Some(number) => {",
          "    assert_eq!(number.as_f32(), Some(-3.4028234_f32));",
          "    assert_eq!(number.as_f64(), Some(-3.4028234_f64));",
          "    assert!(number.is_f64());",
          "    assert!(number.is_i64() == false);",
          "    assert!(number.is_u64() == false);",
          "    },",
          "    None => panic!(\"Expected Some(Number) but got None\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(1.2e-38_f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(1.2e-38));"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(1.2e-38_f32);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f64(), Some(1.2e-38));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_f32(-1.2e-38_f32);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f32(), Some(-1.2e-38_f32));",
          "    assert!(result.unwrap().is_f64());",
          "    assert_eq!(result.unwrap().as_i64(), None);",
          "    assert_eq!(result.unwrap().as_u64(), None);",
          "    assert!(result.unwrap().as_i128().is_none());",
          "    assert!(result.unwrap().as_u128().is_none());"
        ],
        "code": [
          "{",
          "    let result = Number::from_f32(-1.2e-38_f32);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().as_f32(), Some(-1.2e-38_f32));",
          "    assert!(result.unwrap().is_f64());",
          "    assert_eq!(result.unwrap().as_i64(), None);",
          "    assert_eq!(result.unwrap().as_u64(), None);",
          "    assert!(result.unwrap().as_i128().is_none());",
          "    assert!(result.unwrap().as_u128().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]