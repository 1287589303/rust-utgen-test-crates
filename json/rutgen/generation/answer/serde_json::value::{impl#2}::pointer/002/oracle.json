[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"x\"), Value::Object(Map {",
          "                map: vec![",
          "                    (String::from(\"y\"), Value::Array(vec![Value::String(String::from(\"z\")), Value::String(String::from(\"zz\"))])),",
          "                ],",
          "            })),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/x/y/1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&Value::String(String::from(\"zz\"))));",
          "    assert_eq!(data.pointer(\"/a/b/c\"), None);",
          "    assert_eq!(data.pointer(\"/x/y/0\"), Some(&Value::String(String::from(\"z\"))));",
          "    assert_eq!(data.pointer(\"/x/y\"), None);",
          "    assert_eq!(data.pointer(\"/x\"), Some(&Value::Object(Map { /* ... */ })));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"x\"), Value::Object(Map {",
          "                map: vec![",
          "                    (String::from(\"y\"), Value::Array(vec![Value::String(String::from(\"z\")), Value::String(String::from(\"zz\"))])),",
          "                ],",
          "            })),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/x/y/1\");",
          "    assert_eq!(result, Some(&Value::String(String::from(\"zz\"))));",
          "    assert_eq!(data.pointer(\"/a/b/c\"), None);",
          "    assert_eq!(data.pointer(\"/x/y/0\"), Some(&Value::String(String::from(\"z\"))));",
          "    assert_eq!(data.pointer(\"/x/y\"), None);",
          "    assert_eq!(data.pointer(\"/x\"), Some(&Value::Object(Map { /* ... */ })));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"a\"), Value::Object(Map {",
          "                map: vec![",
          "                    (String::from(\"b\"), Value::Null),",
          "                ],",
          "            })),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/a/x/y\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"a\"), Value::Object(Map {",
          "                map: vec![",
          "                    (String::from(\"b\"), Value::Null),",
          "                ],",
          "            })),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/a/x/y\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"empty\"), Value::Object(Map {",
          "                map: vec![],",
          "            })),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/empty/nonexistent\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"empty\"), Value::Object(Map {",
          "                map: vec![],",
          "            })),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/empty/nonexistent\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::Number(Number { n: 42 }), Value::String(String::from(\"foo\"))]);",
          "    ",
          "    let result = data.pointer(\"/1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&Value::String(String::from(\"foo\"))));",
          "    ",
          "    let invalid_result = data.pointer(\"/2\");",
          "    assert_eq!(invalid_result, None);",
          "    ",
          "    let empty_pointer_result = data.pointer(\"\");",
          "    assert_eq!(empty_pointer_result, Some(&data));",
          "    ",
          "    let non_prefixed_pointer_result = data.pointer(\"1\");",
          "    assert_eq!(non_prefixed_pointer_result, None);",
          "    ",
          "    let data_object = Value::Object(Map::new());",
          "    let object_result = data_object.pointer(\"/key\");",
          "    assert_eq!(object_result, None);"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::Number(Number { n: 42 }), Value::String(String::from(\"foo\"))]);",
          "    ",
          "    let result = data.pointer(\"/1\");",
          "    assert_eq!(result, Some(&Value::String(String::from(\"foo\"))));",
          "    ",
          "    let invalid_result = data.pointer(\"/2\");",
          "    assert_eq!(invalid_result, None);",
          "    ",
          "    let empty_pointer_result = data.pointer(\"\");",
          "    assert_eq!(empty_pointer_result, Some(&data));",
          "    ",
          "    let non_prefixed_pointer_result = data.pointer(\"1\");",
          "    assert_eq!(non_prefixed_pointer_result, None);",
          "    ",
          "    let data_object = Value::Object(Map::new());",
          "    let object_result = data_object.pointer(\"/key\");",
          "    assert_eq!(object_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"special~key\"), Value::String(String::from(\"value\"))),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/special~0key\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&Value::String(String::from(\"value\"))));",
          "    assert_eq!(data.pointer(\"/special/key\"), None);",
          "    assert_eq!(data.pointer(\"/special~1key\"), None);",
          "    assert_eq!(data.pointer(\"special~0key\"), None);",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: vec![",
          "            (String::from(\"special~key\"), Value::String(String::from(\"value\"))),",
          "        ].into_iter().collect(),",
          "    });",
          "    ",
          "    let result = data.pointer(\"/special~0key\");",
          "    assert_eq!(result, Some(&Value::String(String::from(\"value\"))));",
          "    assert_eq!(data.pointer(\"/special/key\"), None);",
          "    assert_eq!(data.pointer(\"/special~1key\"), None);",
          "    assert_eq!(data.pointer(\"special~0key\"), None);",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]