[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Null;",
          "    let result = data.pointer(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Null;",
          "    let result = data.pointer(\"\");",
          "    assert_eq!(result, Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Null;",
          "    let result = data.pointer(\"/\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Null;",
          "    let result = data.pointer(\"/\");",
          "    assert_eq!(result, Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/valid/token\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/valid/token\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/invalid~1token\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\").unwrap(), &data);"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/invalid~1token\");",
          "    assert_eq!(data.pointer(\"\").unwrap(), &data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/empty//token\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/empty//token\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::Null]);",
          "    let result = data.pointer(\"/0\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::Null]);",
          "    let result = data.pointer(\"/0\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::Null, Value::Null]);",
          "    let result = data.pointer(\"/1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/0\"), None);",
          "    assert_eq!(data.pointer(\"/1\"), Some(&Value::Null));",
          "    assert_eq!(data.pointer(\"/2\"), None);",
          "    assert_eq!(data.pointer(\"/x/y\"), None);",
          "    assert_eq!(data.pointer(\"/1/2\"), None);",
          "    assert_eq!(data.pointer(\"/~0\"), None);",
          "    assert_eq!(data.pointer(\"/~1\"), None);"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::Null, Value::Null]);",
          "    let result = data.pointer(\"/1\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/0\"), None);",
          "    assert_eq!(data.pointer(\"/1\"), Some(&Value::Null));",
          "    assert_eq!(data.pointer(\"/2\"), None);",
          "    assert_eq!(data.pointer(\"/x/y\"), None);",
          "    assert_eq!(data.pointer(\"/1/2\"), None);",
          "    assert_eq!(data.pointer(\"/~0\"), None);",
          "    assert_eq!(data.pointer(\"/~1\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/x/y/1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/x/y/1\"), None);",
          "    assert_eq!(data.pointer(\"/a/b/c\"), None);"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/x/y/1\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/x/y/1\"), None);",
          "    assert_eq!(data.pointer(\"/a/b/c\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/a/b/c\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert!(data.pointer(\"/\"));",
          "    assert_eq!(data.pointer(\"/a/b\"), None);",
          "    assert_eq!(data.pointer(\"/\") as Option<&Value>, Some(&data));",
          "    assert_eq!(data.pointer(\"/a/x/y\"), None);"
        ],
        "code": [
          "{",
          "    let data = Value::Object(Map {",
          "        map: MapImpl::new(),",
          "    });",
          "    let result = data.pointer(\"/a/b/c\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert!(data.pointer(\"/\"));",
          "    assert_eq!(data.pointer(\"/a/b\"), None);",
          "    assert_eq!(data.pointer(\"/\") as Option<&Value>, Some(&data));",
          "    assert_eq!(data.pointer(\"/a/x/y\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\"))]);",
          "    let result = data.pointer(\"/x/y/3\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\"))]);",
          "    let result = data.pointer(\"/x/y/3\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\")), Value::String(String::from(\"other\"))]);",
          "    let result = data.pointer(\"/x/y/~0\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\").unwrap(), &data);",
          "    assert!(data.pointer(\"/x/y/~0\").is_none());",
          "    assert!(data.pointer(\"/\").is_some());",
          "    assert!(data.pointer(\"/x\").is_none());",
          "    assert_eq!(data.pointer(\"/x/y\").is_none(), true);"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\")), Value::String(String::from(\"other\"))]);",
          "    let result = data.pointer(\"/x/y/~0\");",
          "    assert_eq!(data.pointer(\"\").unwrap(), &data);",
          "    assert!(data.pointer(\"/x/y/~0\").is_none());",
          "    assert!(data.pointer(\"/\").is_some());",
          "    assert!(data.pointer(\"/x\").is_none());",
          "    assert_eq!(data.pointer(\"/x/y\").is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\")), Value::String(String::from(\"other\"))]);",
          "    let result = data.pointer(\"/x/y/~1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\")), Value::String(String::from(\"other\"))]);",
          "    let result = data.pointer(\"/x/y/~1\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\"))]);",
          "    let result = data.pointer(\"/x/y/~1/z\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/x/y/1\"), None);",
          "    assert_eq!(data.pointer(\"/a/b/c\"), None);"
        ],
        "code": [
          "{",
          "    let data = Value::Array(vec![Value::String(String::from(\"value\"))]);",
          "    let result = data.pointer(\"/x/y/~1/z\");",
          "    assert_eq!(data.pointer(\"\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/\"), Some(&data));",
          "    assert_eq!(data.pointer(\"/x/y/1\"), None);",
          "    assert_eq!(data.pointer(\"/a/b/c\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]