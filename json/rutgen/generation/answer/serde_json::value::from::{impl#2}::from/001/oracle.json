[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = true;",
          "    let x: Value = b.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::Bool(true));",
          "    assert!(matches!(x, Value::Bool(_)));",
          "    assert_eq!(x.is_bool(), true);",
          "    let b_false = false;",
          "    let y: Value = b_false.into();",
          "    assert_eq!(y, Value::Bool(false));",
          "    assert!(matches!(y, Value::Bool(_)));",
          "    assert_eq!(y.is_bool(), true);",
          "    assert!(y != x);",
          "    assert!(x == Value::Bool(true));",
          "    assert!(x != Value::Bool(false));"
        ],
        "code": [
          "{",
          "    let b = true;",
          "    let x: Value = b.into();",
          "    assert_eq!(x, Value::Bool(true));",
          "    assert!(matches!(x, Value::Bool(_)));",
          "    assert_eq!(x.is_bool(), true);",
          "    let b_false = false;",
          "    let y: Value = b_false.into();",
          "    assert_eq!(y, Value::Bool(false));",
          "    assert!(matches!(y, Value::Bool(_)));",
          "    assert_eq!(y.is_bool(), true);",
          "    assert!(y != x);",
          "    assert!(x == Value::Bool(true));",
          "    assert!(x != Value::Bool(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = false;",
          "    let x: Value = b.into();",
          "}"
        ],
        "oracle": [
          "    let b = false;",
          "    let x: Value = b.into();",
          "    assert_eq!(x, Value::Bool(false));",
          "    let b = true;",
          "    let x: Value = b.into();",
          "    assert_eq!(x, Value::Bool(true));",
          "    let b = false;",
          "    let x: Value = b.into();",
          "    assert!(matches!(x, Value::Bool(false)));",
          "    let b = true;",
          "    let x: Value = b.into();",
          "    assert!(matches!(x, Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let b = false;",
          "    let x: Value = b.into();",
          "    let b = false;",
          "    let x: Value = b.into();",
          "    assert_eq!(x, Value::Bool(false));",
          "    let b = true;",
          "    let x: Value = b.into();",
          "    assert_eq!(x, Value::Bool(true));",
          "    let b = false;",
          "    let x: Value = b.into();",
          "    assert!(matches!(x, Value::Bool(false)));",
          "    let b = true;",
          "    let x: Value = b.into();",
          "    assert!(matches!(x, Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]