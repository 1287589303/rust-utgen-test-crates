[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Bool(true)),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    let deserializer = VariantDeserializer { value: Some(Value::Number(Number::from(10))) };",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    let deserializer = VariantDeserializer { value: Some(Value::String(String::from(\"test\"))) };",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    let deserializer = VariantDeserializer { value: Some(Value::Null) };",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Bool(true)),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    let deserializer = VariantDeserializer { value: Some(Value::Number(Number::from(10))) };",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    let deserializer = VariantDeserializer { value: Some(Value::String(String::from(\"test\"))) };",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    let deserializer = VariantDeserializer { value: Some(Value::Null) };",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Number(Number::from(42))),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.value, Some(Value::Number(Number::from(42))));",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert!(deserializer.unit_variant().unwrap().is_unit_variant());"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Number(Number::from(42))),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert_eq!(deserializer.value, Some(Value::Number(Number::from(42))));",
          "    assert!(deserializer.unit_variant().is_ok());",
          "    assert!(deserializer.unit_variant().unwrap().is_unit_variant());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::String(String::from(\"test string\"))),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.value.is_some());",
          "    assert_eq!(deserializer.value.unwrap(), Value::String(String::from(\"test string\")));",
          "    assert!(matches!(deserializer.unit_variant(), Ok(())));"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::String(String::from(\"test string\"))),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert!(deserializer.value.is_some());",
          "    assert_eq!(deserializer.value.unwrap(), Value::String(String::from(\"test string\")));",
          "    assert!(matches!(deserializer.unit_variant(), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Array(vec![])),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    assert!(deserializer.value.is_some());",
          "    let value = deserializer.value.unwrap();",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert!(matches!(deserializer.unit_variant(), Ok(())));"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Array(vec![])),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "    assert!(deserializer.value.is_some());",
          "    let value = deserializer.value.unwrap();",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert!(matches!(deserializer.unit_variant(), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Object(Map::new())),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.unit_variant(), Ok(()));"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Object(Map::new())),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert_eq!(deserializer.unit_variant(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Array(vec![Value::Bool(false), Value::Number(Number::from(3.14))])),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.value.is_some());",
          "    assert_eq!(deserializer.value, Some(Value::Array(vec![Value::Bool(false), Value::Number(Number::from(3.14))])));",
          "    let result = deserializer.unit_variant();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Array(vec![Value::Bool(false), Value::Number(Number::from(3.14))])),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert!(deserializer.value.is_some());",
          "    assert_eq!(deserializer.value, Some(Value::Array(vec![Value::Bool(false), Value::Number(Number::from(3.14))])));",
          "    let result = deserializer.unit_variant();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::String(String::from(\"value1\")));",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Object(map)),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "}"
        ],
        "oracle": [
          "    assert!(deserializer.value.is_some());",
          "    assert_eq!(deserializer.unit_variant().is_ok(), true);",
          "    assert!(matches!(deserializer.unit_variant().unwrap(), ()));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(String::from(\"key1\"), Value::String(String::from(\"value1\")));",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Object(map)),",
          "    };",
          "    let _ = deserializer.unit_variant();",
          "    assert!(deserializer.value.is_some());",
          "    assert_eq!(deserializer.unit_variant().is_ok(), true);",
          "    assert!(matches!(deserializer.unit_variant().unwrap(), ()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]