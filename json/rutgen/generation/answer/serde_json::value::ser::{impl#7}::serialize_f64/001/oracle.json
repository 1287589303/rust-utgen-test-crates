[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(1.7976931348623157E+308);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(1.7976931348623157E+308).to_owned());"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(1.7976931348623157E+308);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(1.7976931348623157E+308).to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(123.456);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(123.456).to_owned());"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(123.456);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(123.456).to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(-1.7976931348623157E+308);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-1.7976931348623157E+308).to_owned());"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(-1.7976931348623157E+308);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-1.7976931348623157E+308).to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(-123.456);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-123.456).to_owned());"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(-123.456);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-123.456).to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(0.0);",
          "}"
        ],
        "oracle": [
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(ryu::Buffer::new().format_finite(0.0).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(0.0);",
          "    let serializer = MapKeySerializer;",
          "    let result = serializer.serialize_f64(0.0);",
          "    assert_eq!(result, Ok(ryu::Buffer::new().format_finite(0.0).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]