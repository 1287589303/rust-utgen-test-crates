[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(1.5),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.n should match N::Float(1.5)",
          "    serializer.serialize_f64(1.5) should be called",
          "    Result should be Ok, with expected value matching the serialized output of 1.5"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(1.5),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "    self.n should match N::Float(1.5)",
          "    serializer.serialize_f64(1.5) should be called",
          "    Result should be Ok, with expected value matching the serialized output of 1.5",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-2.5),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.n, N::Float(-2.5));",
          "    assert!(serializer.output.is_empty());",
          "    assert!(serializer.is_valid());",
          "    assert!(serializer.output.contains(\"-2.5\"));",
          "    assert_eq!(serializer.get_last_serialized_type(), \"f64\");",
          "    assert!(serializer.has_serialized_value());"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-2.5),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "    assert_eq!(number.n, N::Float(-2.5));",
          "    assert!(serializer.output.is_empty());",
          "    assert!(serializer.is_valid());",
          "    assert!(serializer.output.contains(\"-2.5\"));",
          "    assert_eq!(serializer.get_last_serialized_type(), \"f64\");",
          "    assert!(serializer.has_serialized_value());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(0.0),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.n, N::Float(0.0));",
          "    assert!(serializer.output().is_empty() == false);",
          "    assert!(serializer.output().contains(\"0.0\"));",
          "    assert!(serializer.output().contains(\"$serde_json::private::Number\"));",
          "    assert!(serializer.output().len() > 0);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(0.0),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "    assert_eq!(number.n, N::Float(0.0));",
          "    assert!(serializer.output().is_empty() == false);",
          "    assert!(serializer.output().contains(\"0.0\"));",
          "    assert!(serializer.output().contains(\"$serde_json::private::Number\"));",
          "    assert!(serializer.output().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(1.0e+308),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.n, N::Float(1.0e+308));",
          "    assert!(serializer.output_written());",
          "    assert!(serializer.output_contains(\"1.0e+308\"));",
          "    assert!(serializer.output_is_valid_json());",
          "    assert!(serializer.output_length() > 0);"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(1.0e+308),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "    assert_eq!(number.n, N::Float(1.0e+308));",
          "    assert!(serializer.output_written());",
          "    assert!(serializer.output_contains(\"1.0e+308\"));",
          "    assert!(serializer.output_is_valid_json());",
          "    assert!(serializer.output_length() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-1.0e+308),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.n, N::Float(-1.0e+308));",
          "    assert!(serializer.output().len() > 0);",
          "    assert!(serializer.output().contains(\"-1.0e+308\"));",
          "    assert!(serializer.output().starts_with(\"{\"));",
          "    assert!(serializer.output().ends_with(\"}\"));",
          "    assert!(serializer.output().contains(\"$serde_json::private::Number\"));"
        ],
        "code": [
          "{",
          "    let number = Number {",
          "        n: N::Float(-1.0e+308),",
          "    };",
          "    let mut serializer = serde_json::Serializer::new(std::io::stdout());",
          "    number.serialize(&mut serializer).unwrap();",
          "    assert_eq!(number.n, N::Float(-1.0e+308));",
          "    assert!(serializer.output().len() > 0);",
          "    assert!(serializer.output().contains(\"-1.0e+308\"));",
          "    assert!(serializer.output().starts_with(\"{\"));",
          "    assert!(serializer.output().ends_with(\"}\"));",
          "    assert!(serializer.output().contains(\"$serde_json::private::Number\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]