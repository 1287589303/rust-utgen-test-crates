[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = reader.slice.len();",
          "    reader.skip_to_escape(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.index, reader.slice.len());",
          "    assert_eq!(reader.index, 0);",
          "    assert!(reader.index == reader.slice.len());"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = reader.slice.len();",
          "    reader.skip_to_escape(true);",
          "    assert_eq!(reader.index, reader.slice.len());",
          "    assert_eq!(reader.index, 0);",
          "    assert!(reader.index == reader.slice.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = reader.slice.len();",
          "    reader.skip_to_escape(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reader.index, reader.slice.len());",
          "    assert_eq!(reader.index, 0);",
          "    assert!(reader.slice.is_empty());",
          "    assert!(reader.index >= 0);",
          "    assert!(reader.index <= reader.slice.len());",
          "    assert!(reader.index == reader.slice.len() || is_escape(reader.slice[reader.index], false));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let mut reader = SliceRead::new(slice);",
          "    reader.index = reader.slice.len();",
          "    reader.skip_to_escape(false);",
          "    assert_eq!(reader.index, reader.slice.len());",
          "    assert_eq!(reader.index, 0);",
          "    assert!(reader.slice.is_empty());",
          "    assert!(reader.index >= 0);",
          "    assert!(reader.index <= reader.slice.len());",
          "    assert!(reader.index == reader.slice.len() || is_escape(reader.slice[reader.index], false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]