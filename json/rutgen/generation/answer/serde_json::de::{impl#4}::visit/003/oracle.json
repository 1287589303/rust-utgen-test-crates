[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MockVisitor {",
      "    value: Option<f64>,",
      "}",
      "",
      "impl MockVisitor {",
      "    fn new() -> Self {",
      "        MockVisitor { value: None }",
      "    }",
      "}",
      "",
      "impl<'de> de::Visitor<'de> for MockVisitor {",
      "    type Value = ();",
      "",
      "    fn visit_f64<E>(self, value: f64) -> result::Result<Self::Value, E> {",
      "        self.value = Some(value);",
      "        Ok(())",
      "    }",
      "",
      "    forward_to_deserialize_any! {",
      "        i8, i16, i32, i64, i128, u8, u16, u32, u64, u128,",
      "        bool, char, str, string, bytes, byte_buf,",
      "        option, unit, sequence, map, struct, identifier, enum,",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::MIN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "}"
        ],
        "oracle": [
          "    let parser_number = ParserNumber::F64(f64::MIN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert!(visitor.value.is_some());",
          "    assert_eq!(visitor.value.unwrap(), f64::MIN);"
        ],
        "code": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::MIN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    let parser_number = ParserNumber::F64(f64::MIN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert!(visitor.value.is_some());",
          "    assert_eq!(visitor.value.unwrap(), f64::MIN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::MAX);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.value, Some(f64::MAX));",
          "    assert!(visitor.value.is_some());",
          "    assert!(visitor.value.unwrap() == f64::MAX);",
          "    assert!(matches!(parser_number, ParserNumber::F64(_)));",
          "    assert!(matches!(parser_number.visit(visitor), Ok(_)));"
        ],
        "code": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::MAX);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::MAX));",
          "    assert!(visitor.value.is_some());",
          "    assert!(visitor.value.unwrap() == f64::MAX);",
          "    assert!(matches!(parser_number, ParserNumber::F64(_)));",
          "    assert!(matches!(parser_number.visit(visitor), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "}"
        ],
        "oracle": [
          "    let parser_number = ParserNumber::F64(1.23);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(1.23));",
          "    let parser_number = ParserNumber::F64(0.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(0.0));",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::INFINITY));",
          "    let parser_number = ParserNumber::F64(f64::NEG_INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NEG_INFINITY));",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let result = parser_number.visit(visitor);",
          "    assert!(result.is_ok());",
          "    assert!(visitor.value.is_some() && visitor.value.unwrap().is_nan());"
        ],
        "code": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    let parser_number = ParserNumber::F64(1.23);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(1.23));",
          "    let parser_number = ParserNumber::F64(0.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(0.0));",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::INFINITY));",
          "    let parser_number = ParserNumber::F64(f64::NEG_INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NEG_INFINITY));",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let result = parser_number.visit(visitor);",
          "    assert!(result.is_ok());",
          "    assert!(visitor.value.is_some() && visitor.value.unwrap().is_nan());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "}"
        ],
        "oracle": [
          "    let parser_number = ParserNumber::F64(1.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(1.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(-1.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(-1.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(0.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(0.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NAN));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::INFINITY));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::NEG_INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NEG_INFINITY));"
        ],
        "code": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    let parser_number = ParserNumber::F64(1.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(1.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(-1.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(-1.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(0.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(0.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NAN));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::INFINITY));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::NEG_INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NEG_INFINITY));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::NEG_INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "}"
        ],
        "oracle": [
          "    let parser_number = ParserNumber::F64(1.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(1.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(0.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(0.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NAN));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::MAX);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::MAX));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::MIN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::MIN));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::EPSILON);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::EPSILON));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::INFINITY));"
        ],
        "code": [
          "{",
          "    let parser_number = ParserNumber::F64(f64::NEG_INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    let parser_number = ParserNumber::F64(1.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(1.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(0.0);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(0.0));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::NAN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::NAN));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::MAX);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::MAX));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::MIN);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::MIN));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::EPSILON);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::EPSILON));",
          "    ",
          "    let parser_number = ParserNumber::F64(f64::INFINITY);",
          "    let mut visitor = MockVisitor::new();",
          "    let _ = parser_number.visit(visitor);",
          "    assert_eq!(visitor.value, Some(f64::INFINITY));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]