[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = serde_json::Map::from_iter(vec![(",
          "        String::from(\"key1\"),",
          "        serde_json::Value::Bool(true),",
          "    )]);",
          "    let value = serde_json::Value::Object(map);",
          "    let _result = value.as_object();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_object().is_some(), true);",
          "    assert_eq!(value.as_object().unwrap().len(), 1);",
          "    assert_eq!(value.as_object().unwrap().get(&String::from(\"key1\")), Some(&serde_json::Value::Bool(true)));",
          "    assert_eq!(value.as_object().unwrap().get(&String::from(\"key2\")), None);"
        ],
        "code": [
          "{",
          "    let map = serde_json::Map::from_iter(vec![(",
          "        String::from(\"key1\"),",
          "        serde_json::Value::Bool(true),",
          "    )]);",
          "    let value = serde_json::Value::Object(map);",
          "    let _result = value.as_object();",
          "    assert_eq!(value.as_object().is_some(), true);",
          "    assert_eq!(value.as_object().unwrap().len(), 1);",
          "    assert_eq!(value.as_object().unwrap().get(&String::from(\"key1\")), Some(&serde_json::Value::Bool(true)));",
          "    assert_eq!(value.as_object().unwrap().get(&String::from(\"key2\")), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = serde_json::Map::from_iter(vec![",
          "        (String::from(\"key1\"), serde_json::Value::Number(serde_json::Number::from(1))),",
          "        (String::from(\"key2\"), serde_json::Value::String(String::from(\"value\"))),",
          "    ]);",
          "    let value = serde_json::Value::Object(map);",
          "    let _result = value.as_object();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.as_object(), Some(&map));"
        ],
        "code": [
          "{",
          "    let map = serde_json::Map::from_iter(vec![",
          "        (String::from(\"key1\"), serde_json::Value::Number(serde_json::Number::from(1))),",
          "        (String::from(\"key2\"), serde_json::Value::String(String::from(\"value\"))),",
          "    ]);",
          "    let value = serde_json::Value::Object(map);",
          "    let _result = value.as_object();",
          "    assert_eq!(value.as_object(), Some(&map));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = serde_json::Map::new();",
          "    let value = serde_json::Value::Object(map);",
          "    let _result = value.as_object();",
          "}"
        ],
        "oracle": [
          "    let map = serde_json::Map::new();",
          "    let value = serde_json::Value::Object(map);",
          "    assert_eq!(value.as_object().is_some(), true);",
          "    assert_eq!(value.as_object().unwrap(), &map);",
          "    assert_eq!(value.as_object().unwrap().len(), 0);"
        ],
        "code": [
          "{",
          "    let map = serde_json::Map::new();",
          "    let value = serde_json::Value::Object(map);",
          "    let _result = value.as_object();",
          "    let map = serde_json::Map::new();",
          "    let value = serde_json::Value::Object(map);",
          "    assert_eq!(value.as_object().is_some(), true);",
          "    assert_eq!(value.as_object().unwrap(), &map);",
          "    assert_eq!(value.as_object().unwrap().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]