[
  {
    "uses": [
      "use serde_json::Value;",
      "use std::borrow::Cow;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"valid string\");",
          "    let x: Value = s.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::String(\"valid string\".to_owned()));"
        ],
        "code": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"valid string\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"valid string\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"valid string\".to_owned());",
          "    let x: Value = s.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::String(\"valid string\".to_owned()));",
          "    let s_borrowed: Cow<str> = Cow::Borrowed(\"another valid string\");",
          "    let y: Value = s_borrowed.into();",
          "    assert_eq!(y, Value::String(\"another valid string\".to_owned()));",
          "    let s_empty: Cow<str> = Cow::Owned(\"\".to_owned());",
          "    let z: Value = s_empty.into();",
          "    assert_eq!(z, Value::String(\"\".to_owned()));",
          "    let s_numeric: Cow<str> = Cow::Borrowed(\"12345\");",
          "    let w: Value = s_numeric.into();",
          "    assert_eq!(w, Value::String(\"12345\".to_owned()));",
          "    let s_special: Cow<str> = Cow::Owned(\"!@#$%^&*()\".to_owned());",
          "    let v: Value = s_special.into();",
          "    assert_eq!(v, Value::String(\"!@#$%^&*()\".to_owned()));"
        ],
        "code": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"valid string\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"valid string\".to_owned()));",
          "    let s_borrowed: Cow<str> = Cow::Borrowed(\"another valid string\");",
          "    let y: Value = s_borrowed.into();",
          "    assert_eq!(y, Value::String(\"another valid string\".to_owned()));",
          "    let s_empty: Cow<str> = Cow::Owned(\"\".to_owned());",
          "    let z: Value = s_empty.into();",
          "    assert_eq!(z, Value::String(\"\".to_owned()));",
          "    let s_numeric: Cow<str> = Cow::Borrowed(\"12345\");",
          "    let w: Value = s_numeric.into();",
          "    assert_eq!(w, Value::String(\"12345\".to_owned()));",
          "    let s_special: Cow<str> = Cow::Owned(\"!@#$%^&*()\".to_owned());",
          "    let v: Value = s_special.into();",
          "    assert_eq!(v, Value::String(\"!@#$%^&*()\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"\");",
          "    let x: Value = s.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::String(String::from(\"\")));",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"test\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"test\")));",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"test\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"test\")));",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"\")));",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"longer string\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"longer string\")));"
        ],
        "code": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"\")));",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"test\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"test\")));",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"test\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"test\")));",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"\")));",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"longer string\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(String::from(\"longer string\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"\".to_owned());",
          "    let x: Value = s.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::String(\"\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "    let s: Cow<str> = Cow::Borrowed(\"test string\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"test string\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "    let s: Cow<str> = Cow::Owned(\"another test\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"another test\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "    let s: Cow<str> = Cow::Borrowed(\"\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));"
        ],
        "code": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "    let s: Cow<str> = Cow::Borrowed(\"test string\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"test string\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "    let s: Cow<str> = Cow::Owned(\"another test\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"another test\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "    let s: Cow<str> = Cow::Borrowed(\"\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"\".to_owned()));",
          "    assert!(matches!(x, Value::String(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"longer string\");",
          "    let x: Value = s.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::String(\"longer string\".to_owned()));"
        ],
        "code": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Borrowed(\"longer string\");",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"longer string\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"longer string\".to_owned());",
          "    let x: Value = s.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x, Value::String(\"longer string\".to_owned()));"
        ],
        "code": [
          "{",
          "    use serde_json::Value;",
          "    use std::borrow::Cow;",
          "    ",
          "    let s: Cow<str> = Cow::Owned(\"longer string\".to_owned());",
          "    let x: Value = s.into();",
          "    assert_eq!(x, Value::String(\"longer string\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]