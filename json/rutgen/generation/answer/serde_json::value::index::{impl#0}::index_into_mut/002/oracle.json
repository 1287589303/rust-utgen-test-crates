[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = 0;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&mut Value::Number(1.0.into())));",
          "    assert_eq!(value_array, Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]));"
        ],
        "code": [
          "{",
          "    let index = 0;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&mut Value::Number(1.0.into())));",
          "    assert_eq!(value_array, Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = 1;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&mut Value::Number(2.0.into())));"
        ],
        "code": [
          "{",
          "    let index = 1;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "    assert_eq!(result, Some(&mut Value::Number(2.0.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = 2;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "}"
        ],
        "oracle": [
          "    let index = 2;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let index = 2;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "    let index = 2;",
          "    let mut value_array = Value::Array(vec![Value::Number(1.0.into()), Value::Number(2.0.into())]);",
          "    let result = (&index).index_into_mut(&mut value_array);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]