[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_i64(123).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(123.0));",
          "    let negative_number_value = Value::Number(Number::from_i64(-456).unwrap());",
          "    let negative_result = negative_number_value.as_f64();",
          "    assert_eq!(negative_result, Some(-456.0));",
          "    let float_number_value = Value::Number(Number::from_f64(78.9).unwrap());",
          "    let float_result = float_number_value.as_f64();",
          "    assert_eq!(float_result, Some(78.9));",
          "    let not_a_number_value = Value::Bool(true);",
          "    let not_a_number_result = not_a_number_value.as_f64();",
          "    assert_eq!(not_a_number_result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_i64(123).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(123.0));",
          "    let negative_number_value = Value::Number(Number::from_i64(-456).unwrap());",
          "    let negative_result = negative_number_value.as_f64();",
          "    assert_eq!(negative_result, Some(-456.0));",
          "    let float_number_value = Value::Number(Number::from_f64(78.9).unwrap());",
          "    let float_result = float_number_value.as_f64();",
          "    assert_eq!(float_result, Some(78.9));",
          "    let not_a_number_value = Value::Bool(true);",
          "    let not_a_number_result = not_a_number_value.as_f64();",
          "    assert_eq!(not_a_number_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_i64(-123).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(-123.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_u64(456).unwrap());",
          "    result = number_value.as_f64();",
          "    assert_eq!(result, Some(456.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(789.123).unwrap());",
          "    result = number_value.as_f64();",
          "    assert_eq!(result, Some(789.123));",
          "    ",
          "    let non_number_value = Value::Bool(true);",
          "    result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::Null;",
          "    result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::String(String::from(\"Hello\"));",
          "    result = non_number_value.as_f64();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_i64(-123).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-123.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_u64(456).unwrap());",
          "    result = number_value.as_f64();",
          "    assert_eq!(result, Some(456.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(789.123).unwrap());",
          "    result = number_value.as_f64();",
          "    assert_eq!(result, Some(789.123));",
          "    ",
          "    let non_number_value = Value::Bool(true);",
          "    result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::Null;",
          "    result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::String(String::from(\"Hello\"));",
          "    result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_i64(0).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(0.0));",
          "    let number_value = Value::Number(Number::from_i64(100).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(100.0));",
          "    let number_value = Value::Number(Number::from_i64(-50).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-50.0));",
          "    let number_value = Value::Number(Number::from_f64(12.34).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(12.34));",
          "    let number_value = Value::Number(Number::from_f64(-12.34).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-12.34));",
          "    let non_number_value = Value::String(String::from(\"not a number\"));",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    let null_value = Value::Null;",
          "    let result = null_value.as_f64();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_i64(0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(0.0));",
          "    let number_value = Value::Number(Number::from_i64(100).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(100.0));",
          "    let number_value = Value::Number(Number::from_i64(-50).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-50.0));",
          "    let number_value = Value::Number(Number::from_f64(12.34).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(12.34));",
          "    let number_value = Value::Number(Number::from_f64(-12.34).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-12.34));",
          "    let non_number_value = Value::String(String::from(\"not a number\"));",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    let null_value = Value::Null;",
          "    let result = null_value.as_f64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(123.45).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(123.45));",
          "    assert!(number_value.is_number());",
          "    assert!(number_value.as_f64().is_some());",
          "    assert!(number_value.is_f64());",
          "    assert_eq!(number_value.as_f64(), Some(123.45));"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(123.45).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(123.45));",
          "    assert!(number_value.is_number());",
          "    assert!(number_value.as_f64().is_some());",
          "    assert!(number_value.is_f64());",
          "    assert_eq!(number_value.as_f64(), Some(123.45));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(-123.45).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(-123.45));"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(-123.45).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-123.45));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(0.0).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(0.0));",
          "    let number_value = Value::Number(Number::from_f64(256.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(256.0));",
          "    let number_value = Value::Number(Number::from_f64(-64.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-64.0));",
          "    let non_number_value = Value::String(String::from(\"not a number\"));",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(0.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(0.0));",
          "    let number_value = Value::Number(Number::from_f64(256.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(256.0));",
          "    let number_value = Value::Number(Number::from_f64(-64.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-64.0));",
          "    let non_number_value = Value::String(String::from(\"not a number\"));",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::MAX).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(f64::MAX));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(0.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(0.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(-1.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-1.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_i64(123).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(123.0));",
          "    ",
          "    let non_number_value = Value::Bool(true);",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::String(\"test\".to_string());",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::Null;",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::MAX).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(f64::MAX));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(0.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(0.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(-1.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-1.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_i64(123).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(123.0));",
          "    ",
          "    let non_number_value = Value::Bool(true);",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::String(\"test\".to_string());",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let non_number_value = Value::Null;",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::MIN).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(f64::MIN));",
          "    assert!(matches!(result, Some(_)));"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::MIN).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(f64::MIN));",
          "    assert!(matches!(result, Some(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::INFINITY).unwrap());",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(256.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(256.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(64.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(64.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(-64.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-64.0));",
          "    ",
          "    let non_number_value = Value::Bool(true);",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_f64(f64::INFINITY).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, None);",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(256.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(256.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(64.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(64.0));",
          "    ",
          "    let number_value = Value::Number(Number::from_f64(-64.0).unwrap());",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-64.0));",
          "    ",
          "    let non_number_value = Value::Bool(true);",
          "    let result = non_number_value.as_f64();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"arbitrary_precision\")]"
        ],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_string_unchecked(\"12345678901234567890\".to_string()));",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(12345678901234567890.0));",
          "    assert!(result.is_some());",
          "    assert!(number_value.is_number());",
          "    assert!(number_value.as_number().is_some());",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert!(number_value.as_f64().is_some());",
          "    assert_eq!(number_value.as_f64().unwrap(), 12345678901234567890.0);",
          "    assert!(number_value.is_i128());",
          "    assert_eq!(number_value.as_i128().unwrap(), 12345678901234567890);"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_string_unchecked(\"12345678901234567890\".to_string()));",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(12345678901234567890.0));",
          "    assert!(result.is_some());",
          "    assert!(number_value.is_number());",
          "    assert!(number_value.as_number().is_some());",
          "    assert!(matches!(number_value, Value::Number(_)));",
          "    assert!(number_value.as_f64().is_some());",
          "    assert_eq!(number_value.as_f64().unwrap(), 12345678901234567890.0);",
          "    assert!(number_value.is_i128());",
          "    assert_eq!(number_value.as_i128().unwrap(), 12345678901234567890);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"arbitrary_precision\")]"
        ],
        "prefix": [
          "{",
          "    let number_value = Value::Number(Number::from_string_unchecked(\"-12345678901234567890\".to_string()));",
          "    let result = number_value.as_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(-12345678901234567890.0));",
          "    assert!(result.is_some());",
          "    assert!(number_value.is_number());",
          "    assert!(number_value.as_f64().is_some());",
          "    assert!(number_value.as_i128().is_none());",
          "    assert!(number_value.as_u128().is_none());",
          "    assert!(number_value.as_i64().is_none());",
          "    assert!(number_value.as_u64().is_none());",
          "    assert!(number_value.as_str() == \"-12345678901234567890\");",
          "    assert!(number_value.is_f64());"
        ],
        "code": [
          "{",
          "    let number_value = Value::Number(Number::from_string_unchecked(\"-12345678901234567890\".to_string()));",
          "    let result = number_value.as_f64();",
          "    assert_eq!(result, Some(-12345678901234567890.0));",
          "    assert!(result.is_some());",
          "    assert!(number_value.is_number());",
          "    assert!(number_value.as_f64().is_some());",
          "    assert!(number_value.as_i128().is_none());",
          "    assert!(number_value.as_u128().is_none());",
          "    assert!(number_value.as_i64().is_none());",
          "    assert!(number_value.as_u64().is_none());",
          "    assert!(number_value.as_str() == \"-12345678901234567890\");",
          "    assert!(number_value.is_f64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]