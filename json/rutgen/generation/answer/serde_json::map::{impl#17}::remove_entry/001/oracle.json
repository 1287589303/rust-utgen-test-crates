[
  {
    "uses": [
      "use serde_json::map::Map;",
      "use serde_json::json;",
      "use serde_json::map::Entry;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::json;",
          "    use serde_json::map::Map;",
          "    use serde_json::map::Entry;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), json!(12));",
          "    map.insert(\"key2\".to_owned(), json!(true));",
          "    ",
          "    match map.entry(\"key1\") {",
          "        Entry::Occupied(occupied) => {",
          "            let (key, value) = occupied.remove_entry();",
          "            // Function is called, but assertions are omitted as per instructions",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, \"key1\");",
          "    assert_eq!(value, json!(12));"
        ],
        "code": [
          "{",
          "    use serde_json::json;",
          "    use serde_json::map::Map;",
          "    use serde_json::map::Entry;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), json!(12));",
          "    map.insert(\"key2\".to_owned(), json!(true));",
          "    ",
          "    match map.entry(\"key1\") {",
          "        Entry::Occupied(occupied) => {",
          "            let (key, value) = occupied.remove_entry();",
          "            // Function is called, but assertions are omitted as per instructions",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "    assert_eq!(key, \"key1\");",
          "    assert_eq!(value, json!(12));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use serde_json::json;",
          "    use serde_json::map::Map;",
          "    use serde_json::map::Entry;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), json!(12.5));",
          "    map.insert(\"key2\".to_owned(), json!(\"value\"));",
          "    ",
          "    match map.entry(\"key2\") {",
          "        Entry::Occupied(occupied) => {",
          "            let (key, value) = occupied.remove_entry();",
          "            // Function is called, but assertions are omitted as per instructions",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, \"key2\");",
          "    assert_eq!(value, json!(\"value\"));",
          "    ",
          "    let (key, value) = occupied.remove_entry();",
          "    assert!(map.get(\"key2\").is_none());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(\"key1\"), Some(&json!(12.5)));",
          "    ",
          "    let (key, value) = occupied.remove_entry();",
          "    assert_eq!(key, \"key1\");",
          "    assert_eq!(value, json!(12.5));",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    use serde_json::json;",
          "    use serde_json::map::Map;",
          "    use serde_json::map::Entry;",
          "    ",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), json!(12.5));",
          "    map.insert(\"key2\".to_owned(), json!(\"value\"));",
          "    ",
          "    match map.entry(\"key2\") {",
          "        Entry::Occupied(occupied) => {",
          "            let (key, value) = occupied.remove_entry();",
          "            // Function is called, but assertions are omitted as per instructions",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "    assert_eq!(key, \"key2\");",
          "    assert_eq!(value, json!(\"value\"));",
          "    ",
          "    let (key, value) = occupied.remove_entry();",
          "    assert!(map.get(\"key2\").is_none());",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.get(\"key1\"), Some(&json!(12.5)));",
          "    ",
          "    let (key, value) = occupied.remove_entry();",
          "    assert_eq!(key, \"key1\");",
          "    assert_eq!(value, json!(12.5));",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]