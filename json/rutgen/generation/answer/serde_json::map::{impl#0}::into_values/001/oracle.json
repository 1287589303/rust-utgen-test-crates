[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "    let _ = map.into_values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.into_values().iter, map.map.into_values());"
        ],
        "code": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "    let _ = map.into_values();",
          "    assert_eq!(map.into_values().iter, map.map.into_values());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    let _ = map.into_values();",
          "}"
        ],
        "oracle": [
          "    let map = Map::new();",
          "    assert_eq!(map.len(), 0);",
          "    let inserted_value = Value::Bool(true);",
          "    map.insert(\"key1\".to_owned(), inserted_value.clone());",
          "    let into_values_result = map.into_values();",
          "    assert!(!into_values_result.iter.is_empty());",
          "    assert_eq!(into_values_result.iter.next(), Some(&inserted_value));",
          "    assert_eq!(map.len(), 1);",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "    let into_values_after_clear = map.into_values();",
          "    assert!(into_values_after_clear.iter.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    let _ = map.into_values();",
          "    let map = Map::new();",
          "    assert_eq!(map.len(), 0);",
          "    let inserted_value = Value::Bool(true);",
          "    map.insert(\"key1\".to_owned(), inserted_value.clone());",
          "    let into_values_result = map.into_values();",
          "    assert!(!into_values_result.iter.is_empty());",
          "    assert_eq!(into_values_result.iter.next(), Some(&inserted_value));",
          "    assert_eq!(map.len(), 1);",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "    let into_values_after_clear = map.into_values();",
          "    assert!(into_values_after_clear.iter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Number(Number::from(42)));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value\".to_owned()));",
          "    map.insert(\"key3\".to_owned(), Value::Array(vec![Value::Null]));",
          "    let _ = map.into_values();",
          "}"
        ],
        "oracle": [
          "    let map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Number(Number::from(42)));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value\".to_owned()));",
          "    map.insert(\"key3\".to_owned(), Value::Array(vec![Value::Null]));",
          "    let result = map.into_values();",
          "    assert_eq!(result.iter.len(), 3); // Check that the number of values matches the number of inserted entries.",
          "    assert_eq!(result.iter.next(), Some(&Value::Number(Number::from(42)))); // Check first value.",
          "    assert_eq!(result.iter.next(), Some(&Value::String(\"value\".to_owned()))); // Check second value.",
          "    assert_eq!(result.iter.next(), Some(&Value::Array(vec![Value::Null]))); // Check third value."
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Number(Number::from(42)));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value\".to_owned()));",
          "    map.insert(\"key3\".to_owned(), Value::Array(vec![Value::Null]));",
          "    let _ = map.into_values();",
          "    let map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Number(Number::from(42)));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value\".to_owned()));",
          "    map.insert(\"key3\".to_owned(), Value::Array(vec![Value::Null]));",
          "    let result = map.into_values();",
          "    assert_eq!(result.iter.len(), 3); // Check that the number of values matches the number of inserted entries.",
          "    assert_eq!(result.iter.next(), Some(&Value::Number(Number::from(42)))); // Check first value.",
          "    assert_eq!(result.iter.next(), Some(&Value::String(\"value\".to_owned()))); // Check second value.",
          "    assert_eq!(result.iter.next(), Some(&Value::Array(vec![Value::Null]))); // Check third value.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Null);",
          "    map.insert(\"key2\".to_owned(), Value::Bool(false));",
          "    map.insert(\"key3\".to_owned(), Value::Number(Number::from(12.34)));",
          "    map.insert(\"key4\".to_owned(), Value::String(\"string value\".to_owned()));",
          "    map.insert(\"key5\".to_owned(), Value::Array(vec![Value::Bool(true), Value::Number(Number::from(1))]));",
          "    map.insert(\"key6\".to_owned(), Value::Object(Map::new()));",
          "    let _ = map.into_values();",
          "}"
        ],
        "oracle": [
          "    let map: Map<String, Value> = Map::new();",
          "    let mut map_with_values = Map::new();",
          "    map_with_values.insert(\"key1\".to_owned(), Value::Null);",
          "    map_with_values.insert(\"key2\".to_owned(), Value::Bool(false));",
          "    map_with_values.insert(\"key3\".to_owned(), Value::Number(Number::from(12.34)));",
          "    map_with_values.insert(\"key4\".to_owned(), Value::String(\"string value\".to_owned()));",
          "    map_with_values.insert(\"key5\".to_owned(), Value::Array(vec![Value::Bool(true), Value::Number(Number::from(1))]));",
          "    map_with_values.insert(\"key6\".to_owned(), Value::Object(Map::new()));",
          "    let values_iterator = map_with_values.into_values();",
          "    assert!(values_iterator.iter.len() == 6);",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Null)));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Bool(false)));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Number(Number::from(12.34))));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::String(ref s) if s == \"string value\")));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Array(ref arr) if arr.len() == 2)));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Object(ref obj) if obj.len() == 0)));"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Null);",
          "    map.insert(\"key2\".to_owned(), Value::Bool(false));",
          "    map.insert(\"key3\".to_owned(), Value::Number(Number::from(12.34)));",
          "    map.insert(\"key4\".to_owned(), Value::String(\"string value\".to_owned()));",
          "    map.insert(\"key5\".to_owned(), Value::Array(vec![Value::Bool(true), Value::Number(Number::from(1))]));",
          "    map.insert(\"key6\".to_owned(), Value::Object(Map::new()));",
          "    let _ = map.into_values();",
          "    let map: Map<String, Value> = Map::new();",
          "    let mut map_with_values = Map::new();",
          "    map_with_values.insert(\"key1\".to_owned(), Value::Null);",
          "    map_with_values.insert(\"key2\".to_owned(), Value::Bool(false));",
          "    map_with_values.insert(\"key3\".to_owned(), Value::Number(Number::from(12.34)));",
          "    map_with_values.insert(\"key4\".to_owned(), Value::String(\"string value\".to_owned()));",
          "    map_with_values.insert(\"key5\".to_owned(), Value::Array(vec![Value::Bool(true), Value::Number(Number::from(1))]));",
          "    map_with_values.insert(\"key6\".to_owned(), Value::Object(Map::new()));",
          "    let values_iterator = map_with_values.into_values();",
          "    assert!(values_iterator.iter.len() == 6);",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Null)));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Bool(false)));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Number(Number::from(12.34))));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::String(ref s) if s == \"string value\")));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Array(ref arr) if arr.len() == 2)));",
          "    assert!(matches!(values_iterator.iter.next(), Some(&Value::Object(ref obj) if obj.len() == 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]