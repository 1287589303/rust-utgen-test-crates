[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::Number(Number::from(12)));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &Value::Number(Number::from(12)));"
        ],
        "code": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::Number(Number::from(12)));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "    assert_eq!(value, &Value::Number(Number::from(12)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::Bool(true));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &Value::Bool(true));"
        ],
        "code": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::Bool(true));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "    assert_eq!(value, &Value::Bool(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::String(\"test\".to_owned()));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &Value::String(\"test\".to_owned()));"
        ],
        "code": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::String(\"test\".to_owned()));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "    assert_eq!(value, &Value::String(\"test\".to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::Array(vec![Value::String(\"item\".to_owned())]));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &Value::Array(vec![Value::String(\"item\".to_owned())]));"
        ],
        "code": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    map.insert(\"serde\".to_owned(), Value::Array(vec![Value::String(\"item\".to_owned())]));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "    assert_eq!(value, &Value::Array(vec![Value::String(\"item\".to_owned())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    let mut inner_map = MapImpl::new();",
          "    inner_map.insert(\"key\".to_owned(), Value::Number(Number::from(10)));",
          "    map.insert(\"serde\".to_owned(), Value::Object(inner_map));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &Value::Object(inner_map));"
        ],
        "code": [
          "{",
          "    let mut map: MapImpl<String, Value> = MapImpl::new();",
          "    let mut inner_map = MapImpl::new();",
          "    inner_map.insert(\"key\".to_owned(), Value::Number(Number::from(10)));",
          "    map.insert(\"serde\".to_owned(), Value::Object(inner_map));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        OccupiedEntry { occupied } => {",
          "            let value = occupied.get();",
          "        }",
          "        _ => {}",
          "    }",
          "    assert_eq!(value, &Value::Object(inner_map));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]