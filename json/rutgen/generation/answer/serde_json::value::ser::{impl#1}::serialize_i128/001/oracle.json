[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = 0; // minimum value that passes u64::try_from",
          "    let _result = serializer.serialize_i128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: i128 = 0;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Ok(Value::Number(0.into())));",
          "    ",
          "    let value: i128 = u64::MAX as i128;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Ok(Value::Number(value.into())));",
          "    ",
          "    let value: i128 = i64::MAX as i128;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Ok(Value::Number(value.into())));",
          "    ",
          "    let value: i128 = i64::MAX as i128 + 1;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "    ",
          "    let value: i128 = i64::MIN as i128 - 1;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = 0; // minimum value that passes u64::try_from",
          "    let _result = serializer.serialize_i128(value);",
          "    let serializer = Serializer;",
          "    let value: i128 = 0;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Ok(Value::Number(0.into())));",
          "    ",
          "    let value: i128 = u64::MAX as i128;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Ok(Value::Number(value.into())));",
          "    ",
          "    let value: i128 = i64::MAX as i128;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Ok(Value::Number(value.into())));",
          "    ",
          "    let value: i128 = i64::MAX as i128 + 1;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "    ",
          "    let value: i128 = i64::MIN as i128 - 1;",
          "    let _result = serializer.serialize_i128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = i64::MAX as i128; // maximum value that passes i64::try_from",
          "    let _result = serializer.serialize_i128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: i128 = i128::MAX;",
          "    let result = serializer.serialize_i128(value);",
          "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = i64::MAX as i128; // maximum value that passes i64::try_from",
          "    let _result = serializer.serialize_i128(value);",
          "    let serializer = Serializer;",
          "    let value: i128 = i128::MAX;",
          "    let result = serializer.serialize_i128(value);",
          "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = u128::MAX as i128; // value above the i64 range to trigger error",
          "    let _result = serializer.serialize_i128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: i128 = u128::MAX as i128;",
          "    let result = serializer.serialize_i128(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
          "    assert_eq!(result.err().unwrap().err.line, 0);",
          "    assert_eq!(result.err().unwrap().err.column, 0);"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = u128::MAX as i128; // value above the i64 range to trigger error",
          "    let _result = serializer.serialize_i128(value);",
          "    let serializer = Serializer;",
          "    let value: i128 = u128::MAX as i128;",
          "    let result = serializer.serialize_i128(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
          "    assert_eq!(result.err().unwrap().err.line, 0);",
          "    assert_eq!(result.err().unwrap().err.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = i128::MIN; // value below the u64 range to trigger error",
          "    let _result = serializer.serialize_i128(value);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);",
          "    assert_eq!(_result.unwrap_err().err.line, 0);",
          "    assert_eq!(_result.unwrap_err().err.column, 0);"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: i128 = i128::MIN; // value below the u64 range to trigger error",
          "    let _result = serializer.serialize_i128(value);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);",
          "    assert_eq!(_result.unwrap_err().err.line, 0);",
          "    assert_eq!(_result.unwrap_err().err.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]