[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), true);",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    assert_eq!(map.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), true);",
          "    map.insert(\"key1\".to_string(), Value::Null);",
          "    assert_eq!(map.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(12.5)));",
          "    let _ = map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(12.5)));",
          "    let _ = map.is_empty();",
          "    assert_eq!(map.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"test\".to_string()));",
          "    map.clear();",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"test\".to_string()));",
          "    map.clear();",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]