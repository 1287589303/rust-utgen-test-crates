[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                self.position += 1;",
          "                Ok(Some(self.input[self.position - 1]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader {",
          "        input: b\"-123\".to_vec(),",
          "        position: 0,",
          "    };",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: reader,",
          "        scratch: vec![],",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let _ = deserializer.parse_any_signed_number();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::I64(-123)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"0\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::U64(0)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"42\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::U64(42)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-0\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::I64(0)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-999999999999999999999\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"abc\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-abc\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"999999999999999999999\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                self.position += 1;",
          "                Ok(Some(self.input[self.position - 1]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader {",
          "        input: b\"-123\".to_vec(),",
          "        position: 0,",
          "    };",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: reader,",
          "        scratch: vec![],",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let _ = deserializer.parse_any_signed_number();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::I64(-123)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"0\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::U64(0)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"42\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::U64(42)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-0\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number(), Ok(ParserNumber::I64(0)));",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-999999999999999999999\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"abc\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-abc\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"-\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "    deserializer.read.position = 0;",
          "    deserializer.read.input = b\"999999999999999999999\".to_vec();",
          "    assert_eq!(deserializer.parse_any_signed_number().is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                self.position += 1;",
          "                Ok(Some(self.input[self.position - 1]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader {",
          "        input: b\"456\".to_vec(),",
          "        position: 0,",
          "    };",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: reader,",
          "        scratch: vec![],",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let _ = deserializer.parse_any_signed_number();",
          "}"
        ],
        "oracle": [
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::U64(456)));",
          "    let mut reader = TestReader { input: b\"-123\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::I64(-123)));",
          "    let mut reader = TestReader { input: b\"123abc\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_err());",
          "    let expected_error = ErrorCode::InvalidNumber; assert_eq!(result.unwrap_err().code(), expected_error);",
          "    let mut reader = TestReader { input: b\"\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_err());",
          "    let expected_error = ErrorCode::EofWhileParsingValue; assert_eq!(result.unwrap_err().code(), expected_error);",
          "    let mut reader = TestReader { input: b\"0\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::U64(0)));",
          "    let mut reader = TestReader { input: b\"-0\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::I64(0)));"
        ],
        "code": [
          "{",
          "    struct TestReader {",
          "        input: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Read<'static> for TestReader {",
          "        const should_early_return_if_failed: bool = false;",
          "",
          "        fn next(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                self.position += 1;",
          "                Ok(Some(self.input[self.position - 1]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn peek(&mut self) -> Result<Option<u8>> {",
          "            if self.position < self.input.len() {",
          "                Ok(Some(self.input[self.position]))",
          "            } else {",
          "                Ok(None)",
          "            }",
          "        }",
          "",
          "        fn discard(&mut self) {}",
          "",
          "        fn position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn peek_position(&self) -> Position {",
          "            Position { line: 0, column: 0 }",
          "        }",
          "",
          "        fn byte_offset(&self) -> usize {",
          "            self.position",
          "        }",
          "",
          "        fn parse_str<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, str>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn parse_str_raw<'s>(&mut self, _scratch: &'s mut Vec<u8>) -> Result<Reference<'static, 's, [u8]>> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn ignore_str(&mut self) -> Result<()> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn decode_hex_escape(&mut self) -> Result<u16> {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn set_failed(&mut self, _failed: &mut bool) {}",
          "    }",
          "",
          "    let mut reader = TestReader {",
          "        input: b\"456\".to_vec(),",
          "        position: 0,",
          "    };",
          "",
          "    let mut deserializer = Deserializer {",
          "        read: reader,",
          "        scratch: vec![],",
          "        remaining_depth: 0,",
          "    };",
          "",
          "    let _ = deserializer.parse_any_signed_number();",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::U64(456)));",
          "    let mut reader = TestReader { input: b\"-123\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::I64(-123)));",
          "    let mut reader = TestReader { input: b\"123abc\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_err());",
          "    let expected_error = ErrorCode::InvalidNumber; assert_eq!(result.unwrap_err().code(), expected_error);",
          "    let mut reader = TestReader { input: b\"\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_err());",
          "    let expected_error = ErrorCode::EofWhileParsingValue; assert_eq!(result.unwrap_err().code(), expected_error);",
          "    let mut reader = TestReader { input: b\"0\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::U64(0)));",
          "    let mut reader = TestReader { input: b\"-0\".to_vec(), position: 0 };",
          "    let mut deserializer = Deserializer { read: reader, scratch: vec![], remaining_depth: 0 };",
          "    let result = deserializer.parse_any_signed_number(); assert!(result.is_ok());",
          "    let value = result.unwrap(); assert!(matches!(value, ParserNumber::I64(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]