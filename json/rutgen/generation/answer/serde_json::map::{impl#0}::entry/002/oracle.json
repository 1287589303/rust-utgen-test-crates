[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let entry = map.entry(\"non_existent_key\");",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::new();",
          "    let entry = map.entry(\"non_existent_key\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let entry = map.entry(\"non_existent_key\");",
          "    let mut map = Map::new();",
          "    let entry = map.entry(\"non_existent_key\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"another_key\".to_string(), Value::Null);",
          "    let entry = map.entry(\"yet_another_key\");",
          "}"
        ],
        "oracle": [
          "    let mut map = Map::new();",
          "    map.insert(\"another_key\".to_string(), Value::Null);",
          "    let entry = map.entry(\"yet_another_key\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"another_key\".to_string(), Value::Null);",
          "    let entry = map.entry(\"yet_another_key\");",
          "    let mut map = Map::new();",
          "    map.insert(\"another_key\".to_string(), Value::Null);",
          "    let entry = map.entry(\"yet_another_key\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::with_capacity(10);",
          "    let entry = map.entry(\"missing_key\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Vacant(VacantEntry { vacant: _ }));",
          "    assert!(map.len() == 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.contains_key(\"missing_key\") == false);"
        ],
        "code": [
          "{",
          "    let mut map = Map::with_capacity(10);",
          "    let entry = map.entry(\"missing_key\");",
          "    assert_eq!(entry, Entry::Vacant(VacantEntry { vacant: _ }));",
          "    assert!(map.len() == 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.contains_key(\"missing_key\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"existing_key\".to_string(), Value::Bool(true));",
          "    let entry = map.entry(\"key_that_does_not_exist\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"existing_key\".to_string(), Value::Bool(true));",
          "    let entry = map.entry(\"key_that_does_not_exist\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]