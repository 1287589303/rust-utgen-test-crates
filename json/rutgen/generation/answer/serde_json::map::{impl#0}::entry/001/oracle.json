[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"existing_key\".to_string(), Value::Bool(true));",
          "    let entry = map.entry(\"existing_key\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(map.get(\"existing_key\"), Some(&Value::Bool(true)));",
          "    assert!(map.len() == 1);",
          "    assert!(!map.is_empty());",
          "    assert!(map.contains_key(\"existing_key\"));",
          "    assert!(map.get(\"non_existing_key\").is_none());",
          "    assert!(map.entry(\"non_existing_key\").is_err());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"existing_key\".to_string(), Value::Bool(true));",
          "    let entry = map.entry(\"existing_key\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(map.get(\"existing_key\"), Some(&Value::Bool(true)));",
          "    assert!(map.len() == 1);",
          "    assert!(!map.is_empty());",
          "    assert!(map.contains_key(\"existing_key\"));",
          "    assert!(map.get(\"non_existing_key\").is_none());",
          "    assert!(map.entry(\"non_existing_key\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"numeric_key\".to_string(), Value::Number(Number::from(42)));",
          "    let entry = map.entry(\"numeric_key\");",
          "}"
        ],
        "oracle": [
          "    let entry = map.entry(\"numeric_key\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"numeric_key\".to_string(), Value::Number(Number::from(42)));",
          "    let entry = map.entry(\"numeric_key\");",
          "    let entry = map.entry(\"numeric_key\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"string_key\".to_string(), Value::String(\"sample_value\".to_string()));",
          "    let entry = map.entry(\"string_key\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.occupied, map.map.get(\"string_key\").unwrap());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"string_key\".to_string(), Value::String(\"sample_value\".to_string()));",
          "    let entry = map.entry(\"string_key\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(entry.occupied, map.map.get(\"string_key\").unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"boolean_key\".to_string(), Value::Bool(false));",
          "    let entry = map.entry(\"boolean_key\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"boolean_key\".to_string(), Value::Bool(false));",
          "    let entry = map.entry(\"boolean_key\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    let entry = map.entry(\"null_key\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"null_key\".to_string(), Value::Null);",
          "    let entry = map.entry(\"null_key\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]