[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = -32_768;",
          "    let result = serializer.serialize_i16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(-32_768).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = -32_768;",
          "    let result = serializer.serialize_i16(value);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(-32_768).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = -1;",
          "    let result = serializer.serialize_i16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(-1).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = -1;",
          "    let result = serializer.serialize_i16(value);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(-1).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = 0;",
          "    let result = serializer.serialize_i16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = 0;",
          "    let result = serializer.serialize_i16(value);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = 1;",
          "    let result = serializer.serialize_i16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = 1;",
          "    let result = serializer.serialize_i16(value);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = 32_767;",
          "    let result = serializer.serialize_i16(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));"
        ],
        "code": [
          "{",
          "    let serializer = MapKeySerializer;",
          "    let value: i16 = 32_767;",
          "    let result = serializer.serialize_i16(value);",
          "    assert_eq!(result, Ok(itoa::Buffer::new().format(value).to_owned()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]