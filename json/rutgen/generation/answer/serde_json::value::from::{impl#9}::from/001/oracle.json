[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array: [i32; 0] = [];",
          "    let result = Value::from(array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Value::Array(vec![]));"
        ],
        "code": [
          "{",
          "    let array: [i32; 0] = [];",
          "    let result = Value::from(array);",
          "    assert_eq!(result, Value::Array(vec![]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array: [i32; 1] = [42];",
          "    let result = Value::from(array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Value::Array(vec![Value::Number(Number { n: 42.into() })));"
        ],
        "code": [
          "{",
          "    let array: [i32; 1] = [42];",
          "    let result = Value::from(array);",
          "    assert_eq!(result, Value::Array(vec![Value::Number(Number { n: 42.into() })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array: [f64; 3] = [3.14, 2.71, 1.41];",
          "    let result = Value::from(array);",
          "}"
        ],
        "oracle": [
          "    let expected = Value::Array(vec![Value::Number(Number { n: 3.14 }), Value::Number(Number { n: 2.71 }), Value::Number(Number { n: 1.41 })]);",
          "    assert_eq!(result, expected);",
          "    let array_empty: [f64; 0] = [];",
          "    let result_empty = Value::from(array_empty);",
          "    let expected_empty = Value::Array(vec![]);",
          "    assert_eq!(result_empty, expected_empty);",
          "    let array_single: [f64; 1] = [1.0];",
          "    let result_single = Value::from(array_single);",
          "    let expected_single = Value::Array(vec![Value::Number(Number { n: 1.0 })]);",
          "    assert_eq!(result_single, expected_single);",
          "    let array_negative: [f64; 3] = [-3.14, -2.71, -1.41];",
          "    let result_negative = Value::from(array_negative);",
          "    let expected_negative = Value::Array(vec![Value::Number(Number { n: -3.14 }), Value::Number(Number { n: -2.71 }), Value::Number(Number { n: -1.41 })]);",
          "    assert_eq!(result_negative, expected_negative);"
        ],
        "code": [
          "{",
          "    let array: [f64; 3] = [3.14, 2.71, 1.41];",
          "    let result = Value::from(array);",
          "    let expected = Value::Array(vec![Value::Number(Number { n: 3.14 }), Value::Number(Number { n: 2.71 }), Value::Number(Number { n: 1.41 })]);",
          "    assert_eq!(result, expected);",
          "    let array_empty: [f64; 0] = [];",
          "    let result_empty = Value::from(array_empty);",
          "    let expected_empty = Value::Array(vec![]);",
          "    assert_eq!(result_empty, expected_empty);",
          "    let array_single: [f64; 1] = [1.0];",
          "    let result_single = Value::from(array_single);",
          "    let expected_single = Value::Array(vec![Value::Number(Number { n: 1.0 })]);",
          "    assert_eq!(result_single, expected_single);",
          "    let array_negative: [f64; 3] = [-3.14, -2.71, -1.41];",
          "    let result_negative = Value::from(array_negative);",
          "    let expected_negative = Value::Array(vec![Value::Number(Number { n: -3.14 }), Value::Number(Number { n: -2.71 }), Value::Number(Number { n: -1.41 })]);",
          "    assert_eq!(result_negative, expected_negative);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array: [bool; 3] = [true, false, true];",
          "    let result = Value::from(array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Value::Array(vec![Value::Bool(true), Value::Bool(false), Value::Bool(true)]));"
        ],
        "code": [
          "{",
          "    let array: [bool; 3] = [true, false, true];",
          "    let result = Value::from(array);",
          "    assert_eq!(result, Value::Array(vec![Value::Bool(true), Value::Bool(false), Value::Bool(true)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let array: [&str; 2] = [\"hello\", \"world\"];",
          "    let result = Value::from(array);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Value::Array(vec![Value::String(\"hello\".to_owned()), Value::String(\"world\".to_owned())]));"
        ],
        "code": [
          "{",
          "    let array: [&str; 2] = [\"hello\", \"world\"];",
          "    let result = Value::from(array);",
          "    assert_eq!(result, Value::Array(vec![Value::String(\"hello\".to_owned()), Value::String(\"world\".to_owned())]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]