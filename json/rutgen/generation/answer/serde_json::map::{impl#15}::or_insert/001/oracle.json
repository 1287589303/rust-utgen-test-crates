[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key1\"), Value::Number(serde_json::Number::from(1)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key1\").unwrap() });",
          "    let result = entry.or_insert(Value::Number(serde_json::Number::from(2)));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::Number(1));",
          "    assert_eq!(map.get(\"key1\").unwrap(), &Value::Number(1));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[\"key1\"], Value::Number(1));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key1\"), Value::Number(serde_json::Number::from(1)));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key1\").unwrap() });",
          "    let result = entry.or_insert(Value::Number(serde_json::Number::from(2)));",
          "    assert_eq!(result, &mut Value::Number(1));",
          "    assert_eq!(map.get(\"key1\").unwrap(), &Value::Number(1));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map[\"key1\"], Value::Number(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key2\"), Value::String(String::from(\"initial\")));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
          "    let result = entry.or_insert(Value::String(String::from(\"default\")));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::String(String::from(\"initial\")));",
          "    assert_eq!(map.get(\"key2\"), Some(&Value::String(String::from(\"initial\"))));",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key2\"), Value::String(String::from(\"initial\")));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key2\").unwrap() });",
          "    let result = entry.or_insert(Value::String(String::from(\"default\")));",
          "    assert_eq!(result, &mut Value::String(String::from(\"initial\")));",
          "    assert_eq!(map.get(\"key2\"), Some(&Value::String(String::from(\"initial\"))));",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key3\"), Value::Bool(false));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key3\").unwrap() });",
          "    let result = entry.or_insert(Value::Bool(true));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::Bool(false));",
          "    assert_eq!(map[\"key3\"], Value::Bool(false));",
          "    assert!(map.contains_key(\"key3\"));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(entry.key(), \"key3\");"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key3\"), Value::Bool(false));",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key3\").unwrap() });",
          "    let result = entry.or_insert(Value::Bool(true));",
          "    assert_eq!(result, &mut Value::Bool(false));",
          "    assert_eq!(map[\"key3\"], Value::Bool(false));",
          "    assert!(map.contains_key(\"key3\"));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(entry.key(), \"key3\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key4\"), Value::Null);",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key4\").unwrap() });",
          "    let result = entry.or_insert(Value::Null);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(map.get(\"key4\").unwrap(), &Value::Null);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key4\"));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(String::from(\"key4\"), Value::Null);",
          "    let entry = Entry::Occupied(OccupiedEntry { occupied: map.get_mut(\"key4\").unwrap() });",
          "    let result = entry.or_insert(Value::Null);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_eq!(map.get(\"key4\").unwrap(), &Value::Null);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key4\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]