[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let offset = stream.byte_offset(); // should be 0",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, stream.byte_offset());",
          "    data = b\"[0] [1] [1]\";",
          "    de = serde_json::Deserializer::from_slice(data);",
          "    stream = de.into_iter::<Vec<i32>>();",
          "    assert_eq!(0, stream.byte_offset());",
          "    println!(\"{:?}\", stream.next());",
          "    assert_eq!(3, stream.byte_offset());",
          "    println!(\"{:?}\", stream.next());",
          "    assert_eq!(7, stream.byte_offset());",
          "    println!(\"{:?}\", stream.next());",
          "    assert_eq!(8, stream.byte_offset());"
        ],
        "code": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let offset = stream.byte_offset(); // should be 0",
          "    assert_eq!(0, stream.byte_offset());",
          "    data = b\"[0] [1] [1]\";",
          "    de = serde_json::Deserializer::from_slice(data);",
          "    stream = de.into_iter::<Vec<i32>>();",
          "    assert_eq!(0, stream.byte_offset());",
          "    println!(\"{:?}\", stream.next());",
          "    assert_eq!(3, stream.byte_offset());",
          "    println!(\"{:?}\", stream.next());",
          "    assert_eq!(7, stream.byte_offset());",
          "    println!(\"{:?}\", stream.next());",
          "    assert_eq!(8, stream.byte_offset());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let _ = stream.next(); // Read first element",
          "    let offset = stream.byte_offset(); // should be 3",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, stream.byte_offset());"
        ],
        "code": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let _ = stream.next(); // Read first element",
          "    let offset = stream.byte_offset(); // should be 3",
          "    assert_eq!(3, stream.byte_offset());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let _ = stream.next(); // Read first element",
          "    let _ = stream.next(); // Read second element",
          "    let offset = stream.byte_offset(); // should be 7",
          "}"
        ],
        "oracle": [
          "    assert_eq!(7, stream.byte_offset());"
        ],
        "code": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let _ = stream.next(); // Read first element",
          "    let _ = stream.next(); // Read second element",
          "    let offset = stream.byte_offset(); // should be 7",
          "    assert_eq!(7, stream.byte_offset());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let _ = stream.next(); // Read first element",
          "    let _ = stream.next(); // Read second element",
          "    let result = stream.next(); // This should result in an error",
          "    let offset = stream.byte_offset(); // should be 8",
          "}"
        ],
        "oracle": [
          "    assert_eq!(stream.byte_offset(), 8);"
        ],
        "code": [
          "{",
          "    let data = b\"[0] [1] [\";",
          "    let de = serde_json::Deserializer::from_slice(data);",
          "    let mut stream = de.into_iter::<Vec<i32>>();",
          "    let _ = stream.next(); // Read first element",
          "    let _ = stream.next(); // Read second element",
          "    let result = stream.next(); // This should result in an error",
          "    let offset = stream.byte_offset(); // should be 8",
          "    assert_eq!(stream.byte_offset(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]