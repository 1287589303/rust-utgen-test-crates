[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyIterator;",
          "    ",
          "    impl Iterator for EmptyIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: EmptyIterator,",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 0);",
          "    ",
          "    let mut iter = LineColIterator {",
          "    iter: vec![Ok(b'\\n')].into_iter(),",
          "    line: 1,",
          "    col: 0,",
          "    start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'\\n')));",
          "    assert_eq!(iter.line, 2);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 1);",
          "    ",
          "    let mut iter = LineColIterator {",
          "    iter: vec![Ok(b'a'), Ok(b'b'), Ok(b'\\n')].into_iter(),",
          "    line: 1,",
          "    col: 0,",
          "    start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'a')));",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 1);",
          "    assert_eq!(iter.start_of_line, 0);",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'b')));",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 2);",
          "    assert_eq!(iter.start_of_line, 0);",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'\\n')));",
          "    assert_eq!(iter.line, 2);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 2);",
          "    ",
          "    let mut iter = LineColIterator {",
          "    iter: vec![Err(io::Error::new(io::ErrorKind::Other, \"error\"))].into_iter(),",
          "    line: 1,",
          "    col: 0,",
          "    start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert!(result.is_err());",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 0);"
        ],
        "code": [
          "{",
          "    struct EmptyIterator;",
          "    ",
          "    impl Iterator for EmptyIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: EmptyIterator,",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert!(result.is_none());",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 0);",
          "    ",
          "    let mut iter = LineColIterator {",
          "    iter: vec![Ok(b'\\n')].into_iter(),",
          "    line: 1,",
          "    col: 0,",
          "    start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'\\n')));",
          "    assert_eq!(iter.line, 2);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 1);",
          "    ",
          "    let mut iter = LineColIterator {",
          "    iter: vec![Ok(b'a'), Ok(b'b'), Ok(b'\\n')].into_iter(),",
          "    line: 1,",
          "    col: 0,",
          "    start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'a')));",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 1);",
          "    assert_eq!(iter.start_of_line, 0);",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'b')));",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 2);",
          "    assert_eq!(iter.start_of_line, 0);",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'\\n')));",
          "    assert_eq!(iter.line, 2);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 2);",
          "    ",
          "    let mut iter = LineColIterator {",
          "    iter: vec![Err(io::Error::new(io::ErrorKind::Other, \"error\"))].into_iter(),",
          "    line: 1,",
          "    col: 0,",
          "    start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert!(result.is_err());",
          "    assert_eq!(iter.line, 1);",
          "    assert_eq!(iter.col, 0);",
          "    assert_eq!(iter.start_of_line, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NewlineIterator;",
          "",
          "    impl Iterator for NewlineIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            Some(Ok(b'\\n'))",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: NewlineIterator,",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Ok(b'\\n')));"
        ],
        "code": [
          "{",
          "    struct NewlineIterator;",
          "",
          "    impl Iterator for NewlineIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            Some(Ok(b'\\n'))",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: NewlineIterator,",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Ok(b'\\n')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CharIterator {",
          "        chars: Vec<u8>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for CharIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.chars.len() {",
          "                let ch = self.chars[self.index];",
          "                self.index += 1;",
          "                Some(Ok(ch))",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: CharIterator {",
          "            chars: vec![b'a', b'b', b'\\n'],",
          "            index: 0,",
          "        },",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next(); // expects Some(Ok(b'\\n'))",
          "}"
        ],
        "oracle": [
          "    iter.next(); assert_eq!(result1, Some(Ok(b'a')));",
          "    iter.next(); assert_eq!(result2, Some(Ok(b'b')));",
          "    iter.next(); assert_eq!(result3, Some(Ok(b'\\n')));"
        ],
        "code": [
          "{",
          "    struct CharIterator {",
          "        chars: Vec<u8>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for CharIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.chars.len() {",
          "                let ch = self.chars[self.index];",
          "                self.index += 1;",
          "                Some(Ok(ch))",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: CharIterator {",
          "            chars: vec![b'a', b'b', b'\\n'],",
          "            index: 0,",
          "        },",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next(); // expects Some(Ok(b'\\n'))",
          "    iter.next(); assert_eq!(result1, Some(Ok(b'a')));",
          "    iter.next(); assert_eq!(result2, Some(Ok(b'b')));",
          "    iter.next(); assert_eq!(result3, Some(Ok(b'\\n')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorIterator;",
          "",
          "    impl Iterator for ErrorIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            Some(Err(io::Error::new(io::ErrorKind::Other, \"error\")))",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: ErrorIterator,",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Err(io::Error::new(io::ErrorKind::Other, \"error\"))));"
        ],
        "code": [
          "{",
          "    struct ErrorIterator;",
          "",
          "    impl Iterator for ErrorIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            Some(Err(io::Error::new(io::ErrorKind::Other, \"error\")))",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: ErrorIterator,",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Err(io::Error::new(io::ErrorKind::Other, \"error\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MixedIterator {",
          "        items: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for MixedIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index].clone();",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: MixedIterator {",
          "            items: vec![Ok(b'a'), Ok(b'\\n'), Err(io::Error::new(io::ErrorKind::Other, \"error\"))],",
          "            index: 0,",
          "        },",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result1 = iter.next();",
          "    let result2 = iter.next(); // expects Some(Ok(b'\\n'))",
          "    let result3 = iter.next();",
          "}"
        ],
        "oracle": [
          "    iter.next(); // expects None",
          "    iter.next(); // expects Some(Err(io::Error::new(io::ErrorKind::Other, \"error\")))",
          "    iter.line; // expects 1 after reading Ok(b'\\n')",
          "    iter.col; // expects 0 after reading Ok(b'\\n')",
          "    iter.start_of_line; // expects 2 after reading Ok(b'\\n')"
        ],
        "code": [
          "{",
          "    struct MixedIterator {",
          "        items: Vec<io::Result<u8>>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for MixedIterator {",
          "        type Item = io::Result<u8>;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index].clone();",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut iter = LineColIterator {",
          "        iter: MixedIterator {",
          "            items: vec![Ok(b'a'), Ok(b'\\n'), Err(io::Error::new(io::ErrorKind::Other, \"error\"))],",
          "            index: 0,",
          "        },",
          "        line: 1,",
          "        col: 0,",
          "        start_of_line: 0,",
          "    };",
          "    ",
          "    let result1 = iter.next();",
          "    let result2 = iter.next(); // expects Some(Ok(b'\\n'))",
          "    let result3 = iter.next();",
          "    iter.next(); // expects None",
          "    iter.next(); // expects Some(Err(io::Error::new(io::ErrorKind::Other, \"error\")))",
          "    iter.line; // expects 1 after reading Ok(b'\\n')",
          "    iter.col; // expects 0 after reading Ok(b'\\n')",
          "    iter.start_of_line; // expects 2 after reading Ok(b'\\n')",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]