[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let _ = map.remove(\"key1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key1\").is_none());",
          "    assert_eq!(_ , Some(Value::Bool(true)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let _ = map.remove(\"key1\");",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key1\").is_none());",
          "    assert_eq!(_ , Some(Value::Bool(true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key2\".to_string(), Value::Number(42.into()));",
          "    let key = \"key2\";",
          "    let _ = map.remove(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&key).is_none());",
          "    assert!(map.contains_key(&key).is_false());",
          "    assert_eq!(map.remove(&\"nonexistent_key\"), None);",
          "    assert_eq!(map.remove(&key), Some(Value::Number(42.into())));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key2\".to_string(), Value::Number(42.into()));",
          "    let key = \"key2\";",
          "    let _ = map.remove(&key);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(&key).is_none());",
          "    assert!(map.contains_key(&key).is_false());",
          "    assert_eq!(map.remove(&\"nonexistent_key\"), None);",
          "    assert_eq!(map.remove(&key), Some(Value::Number(42.into())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let result = map.remove(\"non_existent_key\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let result = map.remove(\"non_existent_key\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"\".to_string(), Value::String(\"empty\".to_string()));",
          "    let _ = map.remove(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.remove(\"\"), Some(Value::String(\"empty\".to_string())));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.remove(\"nonexistent\"), None);",
          "    map.insert(\"key\".to_string(), Value::String(\"value\".to_string()));",
          "    assert_eq!(map.remove(\"key\"), Some(Value::String(\"value\".to_string())));",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(\"another_key\".to_string(), Value::Bool(true));",
          "    assert!(map.remove(\"\") == None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"\".to_string(), Value::String(\"empty\".to_string()));",
          "    let _ = map.remove(\"\");",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.remove(\"\"), Some(Value::String(\"empty\".to_string())));",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.remove(\"nonexistent\"), None);",
          "    map.insert(\"key\".to_string(), Value::String(\"value\".to_string()));",
          "    assert_eq!(map.remove(\"key\"), Some(Value::String(\"value\".to_string())));",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(\"another_key\".to_string(), Value::Bool(true));",
          "    assert!(map.remove(\"\") == None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let max_key = \"a\".repeat(usize::MAX);",
          "    map.insert(max_key.clone(), Value::Null);",
          "    let _ = map.remove(max_key.as_str());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(max_key.as_str()).is_none());",
          "    assert_eq!(map.remove(\"non_existent_key\"), None);",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    assert_eq!(map.remove(\"key1\"), Some(Value::Bool(true)));",
          "    assert!(map.remove(\"key1\").is_none());",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(15)));",
          "    assert_eq!(map.remove(\"key2\"), Some(Value::Number(Number::from(15))));",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let max_key = \"a\".repeat(usize::MAX);",
          "    map.insert(max_key.clone(), Value::Null);",
          "    let _ = map.remove(max_key.as_str());",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(max_key.as_str()).is_none());",
          "    assert_eq!(map.remove(\"non_existent_key\"), None);",
          "    map.insert(\"key1\".to_string(), Value::Bool(true));",
          "    assert_eq!(map.remove(\"key1\"), Some(Value::Bool(true)));",
          "    assert!(map.remove(\"key1\").is_none());",
          "    map.insert(\"key2\".to_string(), Value::Number(Number::from(15)));",
          "    assert_eq!(map.remove(\"key2\"), Some(Value::Number(Number::from(15))));",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_null\".to_string(), Value::Null);",
          "    let _ = map.remove(\"key_null\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_null\").is_none());",
          "    assert!(map.remove(\"non_existent_key\").is_none());",
          "    map.insert(\"key_bool\".to_string(), Value::Bool(true));",
          "    assert_eq!(map.remove(\"key_bool\"), Some(Value::Bool(true)));",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_null\".to_string(), Value::Null);",
          "    let _ = map.remove(\"key_null\");",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_null\").is_none());",
          "    assert!(map.remove(\"non_existent_key\").is_none());",
          "    map.insert(\"key_bool\".to_string(), Value::Bool(true));",
          "    assert_eq!(map.remove(\"key_bool\"), Some(Value::Bool(true)));",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_bool\".to_string(), Value::Bool(false));",
          "    let _ = map.remove(\"key_bool\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.get(\"key_bool\"), None);",
          "    assert_eq!(map.remove(\"non_existent_key\"), None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_bool\".to_string(), Value::Bool(false));",
          "    let _ = map.remove(\"key_bool\");",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.get(\"key_bool\"), None);",
          "    assert_eq!(map.remove(\"non_existent_key\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_number\".to_string(), Value::Number(99.into()));",
          "    let _ = map.remove(\"key_number\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_number\").is_none());",
          "    assert!(map.remove(\"key_number\").is_none());",
          "    assert_eq!(map.remove(&\"non_existent_key\"), None);",
          "    map.insert(\"new_key\".to_string(), Value::Number(42.into()));",
          "    assert_eq!(map.remove(\"new_key\"), Some(Value::Number(42.into())));",
          "    assert!(map.get(\"new_key\").is_none());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_number\".to_string(), Value::Number(99.into()));",
          "    let _ = map.remove(\"key_number\");",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_number\").is_none());",
          "    assert!(map.remove(\"key_number\").is_none());",
          "    assert_eq!(map.remove(&\"non_existent_key\"), None);",
          "    map.insert(\"new_key\".to_string(), Value::Number(42.into()));",
          "    assert_eq!(map.remove(\"new_key\"), Some(Value::Number(42.into())));",
          "    assert!(map.get(\"new_key\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_string\".to_string(), Value::String(\"string_value\".to_string()));",
          "    let _ = map.remove(\"key_string\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_string\").is_none());",
          "    assert!(map.remove(\"non_existent_key\").is_none());",
          "    let value = map.insert(\"key_string\".to_string(), Value::String(\"new_value\".to_string()));",
          "    assert!(value.is_none());",
          "    assert_eq!(map.get(\"key_string\").unwrap(), &Value::String(\"new_value\".to_string()));",
          "    map.clear();",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_string\".to_string(), Value::String(\"string_value\".to_string()));",
          "    let _ = map.remove(\"key_string\");",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_string\").is_none());",
          "    assert!(map.remove(\"non_existent_key\").is_none());",
          "    let value = map.insert(\"key_string\".to_string(), Value::String(\"new_value\".to_string()));",
          "    assert!(value.is_none());",
          "    assert_eq!(map.get(\"key_string\").unwrap(), &Value::String(\"new_value\".to_string()));",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_array\".to_string(), Value::Array(vec![Value::Bool(true), Value::Number(1.into())]));",
          "    let _ = map.remove(\"key_array\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_array\").is_none());",
          "    assert_eq!(map.remove(\"key_array\"), None);",
          "    assert_eq!(map.remove(\"non_existent_key\"), None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key_array\".to_string(), Value::Array(vec![Value::Bool(true), Value::Number(1.into())]));",
          "    let _ = map.remove(\"key_array\");",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.get(\"key_array\").is_none());",
          "    assert_eq!(map.remove(\"key_array\"), None);",
          "    assert_eq!(map.remove(\"non_existent_key\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let mut obj = Map::new();",
          "    obj.insert(\"inner_key\".to_string(), Value::String(\"inner_value\".to_string()));",
          "    map.insert(\"key_object\".to_string(), Value::Object(obj));",
          "    let _ = map.remove(\"key_object\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key_object\") == false);",
          "    assert_eq!(_ , Some(Value::Object(obj)));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let mut obj = Map::new();",
          "    obj.insert(\"inner_key\".to_string(), Value::String(\"inner_value\".to_string()));",
          "    map.insert(\"key_object\".to_string(), Value::Object(obj));",
          "    let _ = map.remove(\"key_object\");",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key_object\") == false);",
          "    assert_eq!(_ , Some(Value::Object(obj)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]