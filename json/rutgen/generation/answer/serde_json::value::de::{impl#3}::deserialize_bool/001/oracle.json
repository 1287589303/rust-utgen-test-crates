[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MockVisitor;",
      "",
      "impl<'de> Visitor<'de> for MockVisitor {",
      "    type Value = ();",
      "    ",
      "    fn visit_bool<E>(self, _value: bool) -> Result<Self::Value, E> where E: serde::de::Error {",
      "        Ok(())",
      "    }",
      "",
      "    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
      "        formatter.write_str(\"a boolean value\")",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(value.deserialize_bool(visitor), Err(_)));",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap_err().invalid_type(&visitor), expected_error);",
          "    assert_eq!(value.deserialize_bool(visitor), Err(Error::invalid_type(&visitor)));",
          "    assert!(value.is_null());",
          "    assert!(visitor.expecting(&mut fmt::Formatter::new()).is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "    assert!(matches!(value.deserialize_bool(visitor), Err(_)));",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap_err().invalid_type(&visitor), expected_error);",
          "    assert_eq!(value.deserialize_bool(visitor), Err(Error::invalid_type(&visitor)));",
          "    assert!(value.is_null());",
          "    assert!(visitor.expecting(&mut fmt::Formatter::new()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Number(Number { n: 0 });",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Number(Number { n: 0 });",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), value.invalid_type(&visitor));"
        ],
        "code": [
          "{",
          "    let value = Value::Number(Number { n: 0 });",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "    let value = Value::Number(Number { n: 0 });",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), value.invalid_type(&visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"not a bool\"));",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.deserialize_bool(visitor).is_err(), true);",
          "    assert!(matches!(value.deserialize_bool(visitor), Err(_)));",
          "    assert!(matches!(value.deserialize_bool(visitor), Err(err) if err == value.invalid_type(&visitor)));",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap_err().type_id(), value.invalid_type(&visitor).type_id());",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap_err(), value.invalid_type(&visitor));"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"not a bool\"));",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "    assert_eq!(value.deserialize_bool(visitor).is_err(), true);",
          "    assert!(matches!(value.deserialize_bool(visitor), Err(_)));",
          "    assert!(matches!(value.deserialize_bool(visitor), Err(err) if err == value.invalid_type(&visitor)));",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap_err().type_id(), value.invalid_type(&visitor).type_id());",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap_err(), value.invalid_type(&visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().invalid_type(&visitor), expected_error);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().invalid_type(&visitor), expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), value.invalid_type(&visitor));"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let visitor = MockVisitor;",
          "    let _ = value.deserialize_bool(visitor);",
          "    let value = Value::Object(Map { map: MapImpl::new() });",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), value.invalid_type(&visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]