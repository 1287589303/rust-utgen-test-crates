[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Number(Number { n: N });",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::String(String::from(\"test\"));",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "    let result = value.is_array();",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(Vec::new());",
          "    let result = value.is_array();",
          "    assert!(result);",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Number(Number { n: N });",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::String(String::from(\"test\"));",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Array(vec![Value::Null, Value::Bool(false)]);",
          "    let result = value.is_array();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    let value = Value::Object(Map::<String, Value>::new());",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Number(Number { n: 1 });",
          "    let result = value.is_array();",
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"element1\")), Value::String(String::from(\"element2\"))]);",
          "    let result = value.is_array();",
          "    assert!(result);",
          "    let value = Value::Object(Map::<String, Value>::new());",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Bool(true);",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    let value = Value::Number(Number { n: 1 });",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(Map { map: Default::default() });",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Object(Map { map: Default::default() });",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(String::from(\"a string\"));",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]);",
          "    let result = value.is_array();",
          "    assert_eq!(result, true);",
          "    ",
          "    let value = Value::Number(Number { n: 42 });",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Array(vec![]);",
          "    let result = value.is_array();",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let value = Value::String(String::from(\"a string\"));",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]);",
          "    let result = value.is_array();",
          "    assert_eq!(result, true);",
          "    ",
          "    let value = Value::Number(Number { n: 42 });",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    ",
          "    let value = Value::Array(vec![]);",
          "    let result = value.is_array();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: 42 }; // Assuming N can be an integer",
          "    let value = Value::Number(number);",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let number = Number { n: 42 }; // Assuming N can be an integer",
          "    let value = Value::Number(number);",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let value = Value::Array(vec![Value::Bool(false), Value::Number(Number { n: 1 })]);",
          "    let result = value.is_array();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    let value = Value::String(\"test\".to_string());",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    let value = Value::Array(vec![Value::Bool(false), Value::Number(Number { n: 1 })]);",
          "    let result = value.is_array();",
          "    assert_eq!(result, true);",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    let value = Value::String(\"test\".to_string());",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "    let value = Value::Object(Map::new());",
          "    let result = value.is_array();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "}"
        ],
        "oracle": [
          "    assert!(!result);",
          "    assert!(value.is_null());",
          "    assert!(!value.is_object());",
          "    assert!(!value.is_string());",
          "    assert!(!value.is_number());",
          "    assert!(!value.is_boolean());",
          "    assert!(value.as_array().is_none());"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let result = value.is_array();",
          "    assert!(!result);",
          "    assert!(value.is_null());",
          "    assert!(!value.is_object());",
          "    assert!(!value.is_string());",
          "    assert!(!value.is_number());",
          "    assert!(!value.is_boolean());",
          "    assert!(value.as_array().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]