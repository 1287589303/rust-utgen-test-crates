[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = key_must_be_a_string();",
          "    let line = 0;",
          "    let column = 0;",
          "    // The function call has been made",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.err.code, ErrorCode::KeyMustBeAString);",
          "    assert_eq!(error.err.line, 0);",
          "    assert_eq!(error.err.column, 0);"
        ],
        "code": [
          "{",
          "    let error = key_must_be_a_string();",
          "    let line = 0;",
          "    let column = 0;",
          "    // The function call has been made",
          "    assert_eq!(error.err.code, ErrorCode::KeyMustBeAString);",
          "    assert_eq!(error.err.line, 0);",
          "    assert_eq!(error.err.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = Error::syntax(ErrorCode::KeyMustBeAString, 0, 0);",
          "    // The function call has been made",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key_must_be_a_string().err.code, ErrorCode::KeyMustBeAString);",
          "    assert_eq!(key_must_be_a_string().err.line, 0);",
          "    assert_eq!(key_must_be_a_string().err.column, 0);"
        ],
        "code": [
          "{",
          "    let error = Error::syntax(ErrorCode::KeyMustBeAString, 0, 0);",
          "    // The function call has been made",
          "    assert_eq!(key_must_be_a_string().err.code, ErrorCode::KeyMustBeAString);",
          "    assert_eq!(key_must_be_a_string().err.line, 0);",
          "    assert_eq!(key_must_be_a_string().err.column, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]