[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"1e308\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::Float(1e308));",
          "    ",
          "    let result = Number::from_str(\"-1e308\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::Float(-1e308));",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::PosInt(0));",
          "    ",
          "    let result = Number::from_str(\"12345\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::PosInt(12345));",
          "    ",
          "    let result: result::Result<Number, Error> = Number::from_str(\"abc\");",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"1e308\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::Float(1e308));",
          "    ",
          "    let result = Number::from_str(\"-1e308\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::Float(-1e308));",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::PosInt(0));",
          "    ",
          "    let result = Number::from_str(\"12345\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().n, N::PosInt(12345));",
          "    ",
          "    let result: result::Result<Number, Error> = Number::from_str(\"abc\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"-1e308\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(-1e308) });",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(0) });",
          "    ",
          "    let result = Number::from_str(\"12345\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(12345) });",
          "    ",
          "    let result = Number::from_str(\"-12345\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::NegInt(-12345) });",
          "    ",
          "    let result = Number::from_str(\"1.5\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(1.5) });",
          "    ",
          "    let result = Number::from_str(\"1e10\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(1e10) });",
          "    ",
          "    let result = Number::from_str(\"invalid\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidNumericFormat);",
          "    ",
          "    let result = Number::from_str(\"-inf\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidNumericValue);",
          "    ",
          "    let result = Number::from_str(\"nan\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidNumericValue);"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"-1e308\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(-1e308) });",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(0) });",
          "    ",
          "    let result = Number::from_str(\"12345\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(12345) });",
          "    ",
          "    let result = Number::from_str(\"-12345\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::NegInt(-12345) });",
          "    ",
          "    let result = Number::from_str(\"1.5\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(1.5) });",
          "    ",
          "    let result = Number::from_str(\"1e10\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::Float(1e10) });",
          "    ",
          "    let result = Number::from_str(\"invalid\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidNumericFormat);",
          "    ",
          "    let result = Number::from_str(\"-inf\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidNumericValue);",
          "    ",
          "    let result = Number::from_str(\"nan\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidNumericValue);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"0\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(0) });",
          "    ",
          "    let result = Number::from_str(\"123\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(123) });",
          "    ",
          "    let result = Number::from_str(\"-456\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::NegInt(-456) });",
          "    ",
          "    let result = Number::from_str(\"3.14\");",
          "    assert_eq!(result.is_ok(), true);",
          "    ",
          "    let result = Number::from_str(\"invalid\");",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(0) });",
          "    ",
          "    let result = Number::from_str(\"123\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::PosInt(123) });",
          "    ",
          "    let result = Number::from_str(\"-456\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), Number { n: N::NegInt(-456) });",
          "    ",
          "    let result = Number::from_str(\"3.14\");",
          "    assert_eq!(result.is_ok(), true);",
          "    ",
          "    let result = Number::from_str(\"invalid\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"-0\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Number { n: N::NegInt(0) }));",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(0) }));",
          "    ",
          "    let result = Number::from_str(\"42\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(42) }));",
          "    ",
          "    let result = Number::from_str(\"-42\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-42) }));",
          "    ",
          "    let result = Number::from_str(\"3.14\");",
          "    assert!(result.is_err());",
          "    ",
          "    let result = Number::from_str(\"abc\");",
          "    assert!(result.is_err());",
          "    ",
          "    let result = Number::from_str(\"\");",
          "    assert!(result.is_err());",
          "    ",
          "    let result = Number::from_str(\"1e10\");",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"-0\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(0) }));",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(0) }));",
          "    ",
          "    let result = Number::from_str(\"42\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(42) }));",
          "    ",
          "    let result = Number::from_str(\"-42\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-42) }));",
          "    ",
          "    let result = Number::from_str(\"3.14\");",
          "    assert!(result.is_err());",
          "    ",
          "    let result = Number::from_str(\"abc\");",
          "    assert!(result.is_err());",
          "    ",
          "    let result = Number::from_str(\"\");",
          "    assert!(result.is_err());",
          "    ",
          "    let result = Number::from_str(\"1e10\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Number { n: N::PosInt(1) }));",
          "    ",
          "    let result = Number::from_str(\"-1\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-1) }));",
          "    ",
          "    let result = Number::from_str(\"3.14\");",
          "    assert_eq!(result, Ok(Number { n: N::Float(3.14) }));",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(0) }));",
          "    ",
          "    let result = Number::from_str(\"18446744073709551615\"); // maximum u64",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(18446744073709551615) }));",
          "    ",
          "    let result = Number::from_str(\"-9223372036854775808\"); // minimum i64",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-9223372036854775808) }));",
          "    ",
          "    let result = Number::from_str(\"invalid\");",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"1\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(1) }));",
          "    ",
          "    let result = Number::from_str(\"-1\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-1) }));",
          "    ",
          "    let result = Number::from_str(\"3.14\");",
          "    assert_eq!(result, Ok(Number { n: N::Float(3.14) }));",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(0) }));",
          "    ",
          "    let result = Number::from_str(\"18446744073709551615\"); // maximum u64",
          "    assert_eq!(result, Ok(Number { n: N::PosInt(18446744073709551615) }));",
          "    ",
          "    let result = Number::from_str(\"-9223372036854775808\"); // minimum i64",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-9223372036854775808) }));",
          "    ",
          "    let result = Number::from_str(\"invalid\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"-1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-1) }));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(matches!(result, Err(_)).not());",
          "    assert!(result.unwrap() == Number::from_str(\"-1\").unwrap());"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"-1\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-1) }));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(matches!(result, Err(_)).not());",
          "    assert!(result.unwrap() == Number::from_str(\"-1\").unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"9223372036854775807\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap().n, ParserNumber::I64(9223372036854775807));"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"9223372036854775807\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap().n, ParserNumber::I64(9223372036854775807));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"-9223372036854775808\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-9223372036854775808) }));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(result.unwrap().n.is_neg_int());"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"-9223372036854775808\");",
          "    assert_eq!(result, Ok(Number { n: N::NegInt(-9223372036854775808) }));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(result.unwrap().n.is_neg_int());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"abc\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidInput);",
          "    ",
          "    let result = Number::from_str(\"123.45\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_f64().unwrap(), 123.45);",
          "    ",
          "    let result = Number::from_str(\"-678\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_i64().unwrap(), -678);",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_u64().unwrap(), 0);",
          "    ",
          "    let result = Number::from_str(\"1e10\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_f64().unwrap(), 1e10);"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"abc\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidInput);",
          "    ",
          "    let result = Number::from_str(\"123.45\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_f64().unwrap(), 123.45);",
          "    ",
          "    let result = Number::from_str(\"-678\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_i64().unwrap(), -678);",
          "    ",
          "    let result = Number::from_str(\"0\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_u64().unwrap(), 0);",
          "    ",
          "    let result = Number::from_str(\"1e10\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().to_f64().unwrap(), 1e10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Number::from_str(\"-1.0.0\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().code(), ErrorCode::InvalidInput);"
        ],
        "code": [
          "{",
          "    let result = Number::from_str(\"-1.0.0\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().code(), ErrorCode::InvalidInput);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]