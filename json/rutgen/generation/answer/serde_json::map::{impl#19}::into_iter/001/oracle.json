[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    let iter: IterMut = map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.iter.is_empty());",
          "    let value = Value::String(String::from(\"test\"));",
          "    map.map.insert(String::from(\"key\"), value);",
          "    let mut iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 1);",
          "    let (key, val) = iter.next().unwrap();",
          "    assert_eq!(key, &String::from(\"key\"));",
          "    assert_eq!(val, &mut map.map.get_mut(\"key\").unwrap());",
          "    assert!(iter.iter.len() == 0);",
          "    map.map.insert(String::from(\"another_key\"), Value::Null);",
          "    let mut iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    let iter: IterMut = map.into_iter();",
          "    assert!(iter.iter.is_empty());",
          "    let value = Value::String(String::from(\"test\"));",
          "    map.map.insert(String::from(\"key\"), value);",
          "    let mut iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 1);",
          "    let (key, val) = iter.next().unwrap();",
          "    assert_eq!(key, &String::from(\"key\"));",
          "    assert_eq!(val, &mut map.map.get_mut(\"key\").unwrap());",
          "    assert!(iter.iter.len() == 0);",
          "    map.map.insert(String::from(\"another_key\"), Value::Null);",
          "    let mut iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let iter: IterMut = map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &mut Value::String(\"value1\".to_string()))));",
          "    assert!(iter.iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 1);",
          "    assert_eq!(iter.iter.next(), Some((&\"key1\".to_string(), &mut Value::String(\"value1\".to_string()))));",
          "    assert!(iter.iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    for i in 0..10 {",
          "        map.map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let iter: IterMut = map.into_iter();",
          "}"
        ],
        "oracle": [
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key0\".to_string(), Value::Number(0.into()));",
          "    map.map.insert(\"key1\".to_string(), Value::Number(1.into()));",
          "    map.map.insert(\"key2\".to_string(), Value::Number(2.into()));",
          "    map.map.insert(\"key3\".to_string(), Value::Number(3.into()));",
          "    map.map.insert(\"key4\".to_string(), Value::Number(4.into()));",
          "    map.map.insert(\"key5\".to_string(), Value::Number(5.into()));",
          "    map.map.insert(\"key6\".to_string(), Value::Number(6.into()));",
          "    map.map.insert(\"key7\".to_string(), Value::Number(7.into()));",
          "    map.map.insert(\"key8\".to_string(), Value::Number(8.into()));",
          "    map.map.insert(\"key9\".to_string(), Value::Number(9.into()));",
          "    let iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.map(|(k, v)| (k.clone(), v.clone())).collect::<Vec<_>>(), vec![(\"key0\".to_string(), Value::Number(0.into())), (\"key1\".to_string(), Value::Number(1.into())), (\"key2\".to_string(), Value::Number(2.into())), (\"key3\".to_string(), Value::Number(3.into())), (\"key4\".to_string(), Value::Number(4.into())), (\"key5\".to_string(), Value::Number(5.into())), (\"key6\".to_string(), Value::Number(6.into())), (\"key7\".to_string(), Value::Number(7.into())), (\"key8\".to_string(), Value::Number(8.into())), (\"key9\".to_string(), Value::Number(9.into()))]);",
          "    assert_eq!(iter.iter.len(), 10);",
          "    assert_eq!(iter.iter_mut().count(), 10);"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    for i in 0..10 {",
          "        map.map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let iter: IterMut = map.into_iter();",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key0\".to_string(), Value::Number(0.into()));",
          "    map.map.insert(\"key1\".to_string(), Value::Number(1.into()));",
          "    map.map.insert(\"key2\".to_string(), Value::Number(2.into()));",
          "    map.map.insert(\"key3\".to_string(), Value::Number(3.into()));",
          "    map.map.insert(\"key4\".to_string(), Value::Number(4.into()));",
          "    map.map.insert(\"key5\".to_string(), Value::Number(5.into()));",
          "    map.map.insert(\"key6\".to_string(), Value::Number(6.into()));",
          "    map.map.insert(\"key7\".to_string(), Value::Number(7.into()));",
          "    map.map.insert(\"key8\".to_string(), Value::Number(8.into()));",
          "    map.map.insert(\"key9\".to_string(), Value::Number(9.into()));",
          "    let iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.map(|(k, v)| (k.clone(), v.clone())).collect::<Vec<_>>(), vec![(\"key0\".to_string(), Value::Number(0.into())), (\"key1\".to_string(), Value::Number(1.into())), (\"key2\".to_string(), Value::Number(2.into())), (\"key3\".to_string(), Value::Number(3.into())), (\"key4\".to_string(), Value::Number(4.into())), (\"key5\".to_string(), Value::Number(5.into())), (\"key6\".to_string(), Value::Number(6.into())), (\"key7\".to_string(), Value::Number(7.into())), (\"key8\".to_string(), Value::Number(8.into())), (\"key9\".to_string(), Value::Number(9.into()))]);",
          "    assert_eq!(iter.iter.len(), 10);",
          "    assert_eq!(iter.iter_mut().count(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"preserve_order\")]"
        ],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    map.map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let iter: IterMut = map.into_iter();",
          "}"
        ],
        "oracle": [
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    map.map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 2);",
          "    let first_entry = iter.iter.next();",
          "    assert!(first_entry.is_some());",
          "    let (key, value) = first_entry.unwrap();",
          "    assert_eq!(key, &\"key1\".to_string());",
          "    assert_eq!(value, &mut Value::String(\"value1\".to_string()));",
          "    let second_entry = iter.iter.next();",
          "    assert!(second_entry.is_some());",
          "    let (key, value) = second_entry.unwrap();",
          "    assert_eq!(key, &\"key2\".to_string());",
          "    assert_eq!(value, &mut Value::Bool(true));",
          "    assert!(iter.iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    map.map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let iter: IterMut = map.into_iter();",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    map.map.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let iter: IterMut = map.into_iter();",
          "    assert_eq!(iter.iter.len(), 2);",
          "    let first_entry = iter.iter.next();",
          "    assert!(first_entry.is_some());",
          "    let (key, value) = first_entry.unwrap();",
          "    assert_eq!(key, &\"key1\".to_string());",
          "    assert_eq!(value, &mut Value::String(\"value1\".to_string()));",
          "    let second_entry = iter.iter.next();",
          "    assert!(second_entry.is_some());",
          "    let (key, value) = second_entry.unwrap();",
          "    assert_eq!(key, &\"key2\".to_string());",
          "    assert_eq!(value, &mut Value::Bool(true));",
          "    assert!(iter.iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"preserve_order\")]"
        ],
        "prefix": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    for i in 0..100 {",
          "        map.map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let iter: IterMut = map.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.iter.is_some());",
          "    assert_eq!(iter.iter.len(), 100);",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key0\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &mut Value::Number(0.into()));",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key1\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &mut Value::Number(1.into()));",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key99\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &mut Value::Number(99.into()));",
          "    assert!(iter.iter.next().is_none());",
          "    assert_eq!(iter.iter.peek().unwrap().0, \"key0\");",
          "    assert_eq!(iter.iter.peek().unwrap().1, &mut Value::Number(0.into()));"
        ],
        "code": [
          "{",
          "    let mut map: Map<String, Value> = Map { map: MapImpl::new() };",
          "    for i in 0..100 {",
          "        map.map.insert(format!(\"key{}\", i), Value::Number(i.into()));",
          "    }",
          "    let iter: IterMut = map.into_iter();",
          "    assert!(iter.iter.is_some());",
          "    assert_eq!(iter.iter.len(), 100);",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key0\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &mut Value::Number(0.into()));",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key1\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &mut Value::Number(1.into()));",
          "    assert_eq!(iter.iter.next().unwrap().0, \"key99\");",
          "    assert_eq!(iter.iter.next().unwrap().1, &mut Value::Number(99.into()));",
          "    assert!(iter.iter.next().is_none());",
          "    assert_eq!(iter.iter.peek().unwrap().0, \"key0\");",
          "    assert_eq!(iter.iter.peek().unwrap().1, &mut Value::Number(0.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]