[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(number.n, N::NegInt(-1));",
          "    assert!(formatter.buffer().is_empty());",
          "    assert!(formatter.write_str(\"1\").is_ok());",
          "    assert_eq!(formatter.buffer(), \"-1\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(number.n, N::NegInt(-1));",
          "    assert!(formatter.buffer().is_empty());",
          "    assert!(formatter.write_str(\"1\").is_ok());",
          "    assert_eq!(formatter.buffer(), \"-1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-100) };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"-100\");",
          "    assert_eq!(formatter.fill(), ' ');",
          "    assert!(formatter.precision().is_none());",
          "    assert!(formatter.width().is_none());",
          "    assert!(formatter.sign_mut().is_none());",
          "    assert!(formatter.alternate().is_none());",
          "    assert!(formatter.align().is_none());"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-100) };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-100\");",
          "    assert_eq!(formatter.fill(), ' ');",
          "    assert!(formatter.precision().is_none());",
          "    assert!(formatter.width().is_none());",
          "    assert!(formatter.sign_mut().is_none());",
          "    assert!(formatter.alternate().is_none());",
          "    assert!(formatter.align().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-2147483648) };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"-2147483648\");",
          "    assert!(formatter.write_str.called_with(\"-2147483648\"));",
          "    assert!(formatter.write_str.called_once());",
          "    assert!(formatter.write_str.call_count() == 1);",
          "    assert!(number.n == N::NegInt(-2147483648));"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-2147483648) };",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-2147483648\");",
          "    assert!(formatter.write_str.called_with(\"-2147483648\"));",
          "    assert!(formatter.write_str.called_once());",
          "    assert!(formatter.write_str.call_count() == 1);",
          "    assert!(number.n == N::NegInt(-2147483648));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]