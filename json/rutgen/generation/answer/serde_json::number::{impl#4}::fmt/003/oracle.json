[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"0\");",
          "    assert!(formatter.is_ok());",
          "    ",
          "    let number = Number { n: N::PosInt(42) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    assert!(formatter.is_ok());",
          "    ",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-1\");",
          "    assert!(formatter.is_ok());",
          "    ",
          "    let number = Number { n: N::Float(3.14) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"3.14\");",
          "    assert!(formatter.is_ok());"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"0\");",
          "    assert!(formatter.is_ok());",
          "    ",
          "    let number = Number { n: N::PosInt(42) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    assert!(formatter.is_ok());",
          "    ",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-1\");",
          "    assert!(formatter.is_ok());",
          "    ",
          "    let number = Number { n: N::Float(3.14) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"3.14\");",
          "    assert!(formatter.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(1) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"1\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(1) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::PosInt(18446744073709551615) }; // MAX_U64",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"18446744073709551615\");",
          "    assert!(number.n == N::PosInt(18446744073709551615));",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert!(formatter.capacity() > 0);",
          "    assert!(formatter.write_str(\"Test\").is_ok());",
          "    formatter.clear();",
          "    assert!(formatter.is_empty());"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::PosInt(18446744073709551615) }; // MAX_U64",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"18446744073709551615\");",
          "    assert!(number.n == N::PosInt(18446744073709551615));",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert!(formatter.capacity() > 0);",
          "    assert!(formatter.write_str(\"Test\").is_ok());",
          "    formatter.clear();",
          "    assert!(formatter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"-1\");",
          "    ",
          "    let number = Number { n: N::PosInt(0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"0\");",
          "    ",
          "    let number = Number { n: N::PosInt(42) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    ",
          "    let number = Number { n: N::Float(3.14) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"3.14\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::NegInt(-1) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-1\");",
          "    ",
          "    let number = Number { n: N::PosInt(0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"0\");",
          "    ",
          "    let number = Number { n: N::PosInt(42) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    ",
          "    let number = Number { n: N::Float(3.14) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"3.14\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(3.14) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"3.14\");",
          "    let number = Number { n: N::PosInt(42) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    let number = Number { n: N::NegInt(-10) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-10\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(3.14) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"3.14\");",
          "    let number = Number { n: N::PosInt(42) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    let number = Number { n: N::NegInt(-10) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-10\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(-2.71) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"\");",
          "    let number = Number { n: N::PosInt(42) };",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    let number = Number { n: N::NegInt(-42) };",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"-42\");",
          "    let number = Number { n: N::Float(3.14) };",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"3.14\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(-2.71) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\");",
          "    let number = Number { n: N::PosInt(42) };",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"42\");",
          "    let number = Number { n: N::NegInt(-42) };",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"-42\");",
          "    let number = Number { n: N::Float(3.14) };",
          "    assert!(number.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"3.14\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]