[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(1.0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let number = Number { n: N::Float(1.0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(number.fmt(&mut formatter), fmt::Result::Ok);",
          "    assert_eq!(formatter.to_string(), \"1\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(1.0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    let number = Number { n: N::Float(1.0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(number.fmt(&mut formatter), fmt::Result::Ok);",
          "    assert_eq!(formatter.to_string(), \"1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(-1.0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"-1\");"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(-1.0) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(0.000001) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"1e-6\");",
          "    assert!(formatter.errors().is_empty());",
          "    assert!(formatter.is_complete());"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(0.000001) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"1e-6\");",
          "    assert!(formatter.errors().is_empty());",
          "    assert!(formatter.is_complete());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(1.7976931348623157E+308) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.flush().is_ok(), true);",
          "    assert_eq!(formatter.write_str(ryu::Buffer::new().format_finite(1.7976931348623157E+308)).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(1.7976931348623157E+308) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.flush().is_ok(), true);",
          "    assert_eq!(formatter.write_str(ryu::Buffer::new().format_finite(1.7976931348623157E+308)).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let number = Number { n: N::Float(-1.7976931348623157E+308) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"-1.7976931348623157E+308\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.len() > 0);",
          "    assert!(formatter.write_str_called());"
        ],
        "code": [
          "{",
          "    let number = Number { n: N::Float(-1.7976931348623157E+308) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = number.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"-1.7976931348623157E+308\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.len() > 0);",
          "    assert!(formatter.write_str_called());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]