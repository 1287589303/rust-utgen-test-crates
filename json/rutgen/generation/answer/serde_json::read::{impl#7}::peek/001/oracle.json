[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let result = reader.peek();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Some(1));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 0 };",
          "    let result = reader.peek();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 2 };",
          "    let result = reader.peek();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Some(3));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 2 };",
          "    let result = reader.peek();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 4 };",
          "    let result = reader.peek();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(5)));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut reader = SliceRead { slice, index: 4 };",
          "    let result = reader.peek();",
          "    assert_eq!(result, Ok(Some(5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]