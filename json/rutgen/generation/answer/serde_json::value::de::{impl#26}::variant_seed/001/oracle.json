[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidSeed;",
          "    ",
          "    impl<'de> de::DeserializeSeed<'de> for InvalidSeed {",
          "        type Value = String;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>",
          "        where",
          "            D: Deserializer<'de>,",
          "        {",
          "            Err(de::Error::custom(\"Invalid input\"))",
          "        }",
          "    }",
          "    ",
          "    let cow_str: Cow<str> = Cow::Borrowed(\"invalid\");",
          "    let deserializer = BorrowedCowStrDeserializer { value: cow_str };",
          "    let seed = InvalidSeed;",
          "    ",
          "    let result: Result<(String, UnitOnly), Error> = deserializer.variant_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"Invalid input\");"
        ],
        "code": [
          "{",
          "    struct InvalidSeed;",
          "    ",
          "    impl<'de> de::DeserializeSeed<'de> for InvalidSeed {",
          "        type Value = String;",
          "",
          "        fn deserialize<D>(self, deserializer: D) -> Result<Self::Value, D::Error>",
          "        where",
          "            D: Deserializer<'de>,",
          "        {",
          "            Err(de::Error::custom(\"Invalid input\"))",
          "        }",
          "    }",
          "    ",
          "    let cow_str: Cow<str> = Cow::Borrowed(\"invalid\");",
          "    let deserializer = BorrowedCowStrDeserializer { value: cow_str };",
          "    let seed = InvalidSeed;",
          "    ",
          "    let result: Result<(String, UnitOnly), Error> = deserializer.variant_seed(seed);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), \"Invalid input\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]