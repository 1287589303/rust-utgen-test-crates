[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616; // Just above the limit",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616;",
          "    let result = serializer.serialize_u128(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616; // Just above the limit",
          "    let _result = serializer.serialize_u128(value);",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616;",
          "    let result = serializer.serialize_u128(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().err.code, ErrorCode::NumberOutOfRange);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890; // A random value above the limit",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890; // Value exceeds u64 limit",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890; // A random value above the limit",
          "    let _result = serializer.serialize_u128(value);",
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890; // Value exceeds u64 limit",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 340282366920938463463373607431768211455; // Maximum u128 value",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 340282366920938463463373607431768211455; // Maximum u128 value",
          "    let _result = serializer.serialize_u128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551617; // Slightly above the overflow limit",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551617;",
          "    let result = serializer.serialize_u128(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551617; // Slightly above the overflow limit",
          "    let _result = serializer.serialize_u128(value);",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551617;",
          "    let result = serializer.serialize_u128(value);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().err.code, ErrorCode::NumberOutOfRange);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 25000000000000000000; // Another random value above u64 max",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_result, Err(Error { err: Box { code: ErrorCode::NumberOutOfRange, .. }, .. })));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 25000000000000000000; // Another random value above u64 max",
          "    let _result = serializer.serialize_u128(value);",
          "    assert!(matches!(_result, Err(Error { err: Box { code: ErrorCode::NumberOutOfRange, .. }, .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]