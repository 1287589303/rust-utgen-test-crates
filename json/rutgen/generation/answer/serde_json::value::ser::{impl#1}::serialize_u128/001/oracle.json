[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890; // within 0 to 2^64-1",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890;",
          "    let _result = serializer.serialize_u128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890; // within 0 to 2^64-1",
          "    let _result = serializer.serialize_u128(value);",
          "    let serializer = Serializer;",
          "    let value: u128 = 12345678901234567890;",
          "    let _result = serializer.serialize_u128(value);",
          "    assert_eq!(_result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616; // equal to 2^64, should trigger the error",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616;",
          "    let result = serializer.serialize_u128(value);",
          "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616; // equal to 2^64, should trigger the error",
          "    let _result = serializer.serialize_u128(value);",
          "    let serializer = Serializer;",
          "    let value: u128 = 18446744073709551616;",
          "    let result = serializer.serialize_u128(value);",
          "    assert_eq!(result, Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = u128::MAX; // greater than 2^64-1, should trigger the error",
          "    let _result = serializer.serialize_u128(value);",
          "}"
        ],
        "oracle": [
          "    let serializer = Serializer;",
          "    let value: u128 = u128::MAX;",
          "    let expected_error = Error::syntax(ErrorCode::NumberOutOfRange, 0, 0);",
          "    let result = serializer.serialize_u128(value);",
          "    assert_eq!(result, Err(expected_error));"
        ],
        "code": [
          "{",
          "    let serializer = Serializer;",
          "    let value: u128 = u128::MAX; // greater than 2^64-1, should trigger the error",
          "    let _result = serializer.serialize_u128(value);",
          "    let serializer = Serializer;",
          "    let value: u128 = u128::MAX;",
          "    let expected_error = Error::syntax(ErrorCode::NumberOutOfRange, 0, 0);",
          "    let result = serializer.serialize_u128(value);",
          "    assert_eq!(result, Err(expected_error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]