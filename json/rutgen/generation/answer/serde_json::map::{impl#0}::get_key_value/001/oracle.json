[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let result = map.get_key_value(\"key1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&\"key1\".to_string(), &Value::String(\"value1\".to_string()))));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    let result = map.get_key_value(\"key1\");",
          "    assert_eq!(result, Some((&\"key1\".to_string(), &Value::String(\"value1\".to_string()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key2\".to_string(), Value::String(\"value2\".to_string()));",
          "    let result = map.get_key_value(&\"key2\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &\"key2\".to_string());",
          "    assert_eq!(result.unwrap().1, &Value::String(\"value2\".to_string()));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key2\".to_string(), Value::String(\"value2\".to_string()));",
          "    let result = map.get_key_value(&\"key2\");",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0, &\"key2\".to_string());",
          "    assert_eq!(result.unwrap().1, &Value::String(\"value2\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key3\".to_string(), Value::String(\"value3\".to_string()));",
          "    let result = map.get_key_value(\"non_existing_key\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key3\".to_string(), Value::String(\"value3\".to_string()));",
          "    let result = map.get_key_value(\"non_existing_key\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key4\".to_string(), Value::String(\"value4\".to_string()));",
          "    let result = map.get_key_value(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"key4\".to_string(), Value::String(\"value4\".to_string()));",
          "    let result = map.get_key_value(\"\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"keyðŸ˜Š\".to_string(), Value::String(\"valueðŸ˜Š\".to_string()));",
          "    let result = map.get_key_value(\"keyðŸ˜Š\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&\"keyðŸ˜Š\".to_string(), &Value::String(\"valueðŸ˜Š\".to_string()))));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    map.insert(\"keyðŸ˜Š\".to_string(), Value::String(\"valueðŸ˜Š\".to_string()));",
          "    let result = map.get_key_value(\"keyðŸ˜Š\");",
          "    assert_eq!(result, Some((&\"keyðŸ˜Š\".to_string(), &Value::String(\"valueðŸ˜Š\".to_string()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map::new();",
          "    let long_key = \"a\".repeat(1000); // long string key",
          "    map.insert(long_key.clone(), Value::String(\"long_value\".to_string()));",
          "    let result = map.get_key_value(&long_key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&long_key, &Value::String(\"long_value\".to_string()))));"
        ],
        "code": [
          "{",
          "    let mut map = Map::new();",
          "    let long_key = \"a\".repeat(1000); // long string key",
          "    map.insert(long_key.clone(), Value::String(\"long_value\".to_string()));",
          "    let result = map.get_key_value(&long_key);",
          "    assert_eq!(result, Some((&long_key, &Value::String(\"long_value\".to_string()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]