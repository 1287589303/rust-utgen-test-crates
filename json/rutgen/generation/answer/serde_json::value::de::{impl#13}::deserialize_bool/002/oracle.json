[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct MockVisitor;",
      "",
      "impl<'de> Visitor<'de> for MockVisitor {",
      "    type Value = bool;",
      "",
      "    fn visit_bool<E>(self, value: bool) -> Result<Self::Value, E> {",
      "        Ok(value)",
      "    }",
      "    ",
      "    // Implement other required methods as no-ops",
      "    fn visit_i8<E>(self, _: i8) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_i16<E>(self, _: i16) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_i32<E>(self, _: i32) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_i64<E>(self, _: i64) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_u8<E>(self, _: u8) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_u16<E>(self, _: u16) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_u32<E>(self, _: u32) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_u64<E>(self, _: u64) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_f32<E>(self, _: f32) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_f64<E>(self, _: f64) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_char<E>(self, _: char) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_str<E>(self, _: &str) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_string<E>(self, _: String) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_bytes<E>(self, _: &[u8]) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_byte_buf<E>(self, _: Vec<u8>) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_none<E>(self) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_some<D>(self, _: D) -> Result<Self::Value, D::Error> where D: Visitor<'de> { unreachable!() }",
      "    fn visit_unit<E>(self) -> Result<Self::Value, E> { unreachable!() }",
      "    fn visit_newtype_struct<D>(self, _: D) -> Result<Self::Value, D::Error> where D: Visitor<'de> { unreachable!() }",
      "    fn visit_seq<V>(self, _: V) -> Result<Self::Value, V::Error> where V: SeqAccess<'de> { unreachable!() }",
      "    fn visit_tuple<V>(self, _: usize, _: V) -> Result<Self::Value, V::Error> where V: SeqAccess<'de> { unreachable!() }",
      "    fn visit_map<V>(self, _: V) -> Result<Self::Value, V::Error> where V: MapAccess<'de> { unreachable!() }",
      "    fn visit_struct<V>(self, _: &'static str, _: V) -> Result<Self::Value, V::Error> where V: MapAccess<'de> { unreachable!() }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MockVisitor;",
          "    let value = Value::Bool(true);",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap(), true);",
          "    let value = Value::Bool(false);",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap(), false);",
          "    let value = Value::Null;",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::Number(Number::from(42));",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::String(String::from(\"not a bool\"));",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::Object(Map::new());",
          "    assert!(value.deserialize_bool(visitor).is_err());"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    let visitor = MockVisitor;",
          "    let value = Value::Bool(true);",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap(), true);",
          "    let value = Value::Bool(false);",
          "    assert_eq!(value.deserialize_bool(visitor).unwrap(), false);",
          "    let value = Value::Null;",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::Number(Number::from(42));",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::String(String::from(\"not a bool\"));",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::Array(vec![Value::Bool(true)]);",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "    let value = Value::Object(Map::new());",
          "    assert!(value.deserialize_bool(visitor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(false);",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "}"
        ],
        "oracle": [
          "    let visitor = MockVisitor;",
          "    let value = Value::Bool(true);",
          "    let result = value.deserialize_bool(visitor);",
          "    assert_eq!(result, Ok(true));",
          "    let value = Value::Bool(false);",
          "    let result = value.deserialize_bool(visitor);",
          "    assert_eq!(result, Err(value.invalid_type(&visitor)));"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(false);",
          "    let visitor = MockVisitor;",
          "    let result = value.deserialize_bool(visitor);",
          "    let visitor = MockVisitor;",
          "    let value = Value::Bool(true);",
          "    let result = value.deserialize_bool(visitor);",
          "    assert_eq!(result, Ok(true));",
          "    let value = Value::Bool(false);",
          "    let result = value.deserialize_bool(visitor);",
          "    assert_eq!(result, Err(value.invalid_type(&visitor)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]