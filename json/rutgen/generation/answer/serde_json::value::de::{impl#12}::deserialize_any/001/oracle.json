[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorVisitor;",
          "",
          "    impl<'de> Visitor<'de> for ErrorVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a map with more elements\")",
          "        }",
          "",
          "        fn visit_map<M>(self, _: M) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            M: MapAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"visit_map error\"))",
          "        }",
          "    }",
          "",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    ",
          "    let deserializer: &Map<String, Value> = &map;",
          "    let visitor = ErrorVisitor;",
          "",
          "    let result = deserializer.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.err().is_some());",
          "    assert_eq!(result.err().unwrap().to_string(), \"visit_map error\");"
        ],
        "code": [
          "{",
          "    struct ErrorVisitor;",
          "",
          "    impl<'de> Visitor<'de> for ErrorVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a map with more elements\")",
          "        }",
          "",
          "        fn visit_map<M>(self, _: M) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            M: MapAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"visit_map error\"))",
          "        }",
          "    }",
          "",
          "    let mut map = Map::new();",
          "    map.insert(\"key1\".to_owned(), Value::Bool(true));",
          "    ",
          "    let deserializer: &Map<String, Value> = &map;",
          "    let visitor = ErrorVisitor;",
          "",
          "    let result = deserializer.deserialize_any(visitor);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.err().is_some());",
          "    assert_eq!(result.err().unwrap().to_string(), \"visit_map error\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorVisitor;",
          "",
          "    impl<'de> Visitor<'de> for ErrorVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a map with more elements\")",
          "        }",
          "",
          "        fn visit_map<M>(self, _: M) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            M: MapAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"visit_map error\"))",
          "        }",
          "    }",
          "",
          "    let mut map = Map::with_capacity(2);",
          "    map.insert(\"key1\".to_owned(), Value::Number(Number::from(1)));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value\".to_owned()));",
          "",
          "    let deserializer: &Map<String, Value> = &map;",
          "    let visitor = ErrorVisitor;",
          "",
          "    let result = deserializer.deserialize_any(visitor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"visit_map error\");",
          "    assert_eq!(result.err().unwrap().classify(), serde::de::ErrorCode::Custom);",
          "    assert!(result.err().unwrap().is_invalid_length());",
          "    assert!(result.err().unwrap().is_data());"
        ],
        "code": [
          "{",
          "    struct ErrorVisitor;",
          "",
          "    impl<'de> Visitor<'de> for ErrorVisitor {",
          "        type Value = ();",
          "",
          "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
          "            formatter.write_str(\"a map with more elements\")",
          "        }",
          "",
          "        fn visit_map<M>(self, _: M) -> Result<Self::Value, serde::de::Error>",
          "        where",
          "            M: MapAccess<'de>,",
          "        {",
          "            Err(serde::de::Error::custom(\"visit_map error\"))",
          "        }",
          "    }",
          "",
          "    let mut map = Map::with_capacity(2);",
          "    map.insert(\"key1\".to_owned(), Value::Number(Number::from(1)));",
          "    map.insert(\"key2\".to_owned(), Value::String(\"value\".to_owned()));",
          "",
          "    let deserializer: &Map<String, Value> = &map;",
          "    let visitor = ErrorVisitor;",
          "",
          "    let result = deserializer.deserialize_any(visitor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().to_string(), \"visit_map error\");",
          "    assert_eq!(result.err().unwrap().classify(), serde::de::ErrorCode::Custom);",
          "    assert!(result.err().unwrap().is_invalid_length());",
          "    assert!(result.err().unwrap().is_data());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]