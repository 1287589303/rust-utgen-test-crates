[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = 1.0; // A finite positive number",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.writer.len(), expected_length);",
          "    assert_eq!(serializer.writer, expected_output);",
          "    assert!(!serializer.writer.is_empty());",
          "    assert!(serializer.writer.contains(&expected_byte));",
          "    assert!(value.classify() != FpCategory::Nan);",
          "    assert!(value.classify() != FpCategory::Infinite);"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = 1.0; // A finite positive number",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(serializer.writer.len(), expected_length);",
          "    assert_eq!(serializer.writer, expected_output);",
          "    assert!(!serializer.writer.is_empty());",
          "    assert!(serializer.writer.contains(&expected_byte));",
          "    assert!(value.classify() != FpCategory::Nan);",
          "    assert!(value.classify() != FpCategory::Infinite);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = -1.0; // A finite negative number",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let value: f32 = -1.0;",
          "    assert!(serializer.serialize_f32(value).is_ok());"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = -1.0; // A finite negative number",
          "    serializer.serialize_f32(value).unwrap();",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer { writer, formatter: CompactFormatter };",
          "    let value: f32 = -1.0;",
          "    assert!(serializer.serialize_f32(value).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = 3.4028235e38; // Maximum finite f32 number",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.writer.len(), expected_length);",
          "    assert_eq!(serializer.writer[0], expected_first_byte);",
          "    assert_eq!(serializer.writer[1], expected_second_byte);",
          "    assert!(serializer.writer.contains(&expected_value_byte));",
          "    assert!(serializer.writer.iter().all(|&x| x.is_valid_json_byte()));",
          "    assert!(serializer.writer.ends_with(&expected_end_bytes));",
          "    assert!(serializer.writer.is_finite_f32_serialization());",
          "    assert!(serializer.writer.starts_with(&expected_start_bytes));",
          "    assert_eq!(serializer.writer, expected_serialized_output);",
          "    assert!(serializer.writer.matches_correct_f32_representation());",
          "    assert!(serializer.writer.is_not_nan());",
          "    assert!(serializer.writer.is_not_infinite());"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = 3.4028235e38; // Maximum finite f32 number",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(serializer.writer.len(), expected_length);",
          "    assert_eq!(serializer.writer[0], expected_first_byte);",
          "    assert_eq!(serializer.writer[1], expected_second_byte);",
          "    assert!(serializer.writer.contains(&expected_value_byte));",
          "    assert!(serializer.writer.iter().all(|&x| x.is_valid_json_byte()));",
          "    assert!(serializer.writer.ends_with(&expected_end_bytes));",
          "    assert!(serializer.writer.is_finite_f32_serialization());",
          "    assert!(serializer.writer.starts_with(&expected_start_bytes));",
          "    assert_eq!(serializer.writer, expected_serialized_output);",
          "    assert!(serializer.writer.matches_correct_f32_representation());",
          "    assert!(serializer.writer.is_not_nan());",
          "    assert!(serializer.writer.is_not_infinite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = -3.4028235e38; // Minimum finite f32 number",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    serializer.writer.len() == expected_length",
          "    serializer.writer == expected_bytes",
          "    serializer.writer.is_empty() == false",
          "    serializer.writer.capacity() > 0",
          "    serializer.writer.contains(&b'-') == true",
          "    serializer.writer.contains(&b'.') == true",
          "    serializer.writer.contains(&b'e') == false",
          "    serializer.writer.contains(&b'Inf') == false",
          "    serializer.writer.contains(&b'NaN') == false"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = -3.4028235e38; // Minimum finite f32 number",
          "    serializer.serialize_f32(value).unwrap();",
          "    serializer.writer.len() == expected_length",
          "    serializer.writer == expected_bytes",
          "    serializer.writer.is_empty() == false",
          "    serializer.writer.capacity() > 0",
          "    serializer.writer.contains(&b'-') == true",
          "    serializer.writer.contains(&b'.') == true",
          "    serializer.writer.contains(&b'e') == false",
          "    serializer.writer.contains(&b'Inf') == false",
          "    serializer.writer.contains(&b'NaN') == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = 0.5; // A finite middle number",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(serializer.writer.len(), expected_length); // Check if the writer has the expected length after serialization",
          "    assert!(serializer.writer.starts_with(expected_bytes)); // Verify that the serialized output starts with the expected bytes",
          "    assert!(serializer.writer.ends_with(expected_bytes_end)); // Verify that the serialized output ends with the expected bytes",
          "    assert!(value.is_finite()); // Confirm that the input value is a finite number (0.5 in this case)",
          "    assert!(serializer.writer.contains(&expected_value_bytes)); // Ensure the specific serialized value is present in the output"
        ],
        "code": [
          "{",
          "    let writer = Vec::new();",
          "    let mut serializer = Serializer {",
          "        writer,",
          "        formatter: CompactFormatter,",
          "    };",
          "    let value: f32 = 0.5; // A finite middle number",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(serializer.writer.len(), expected_length); // Check if the writer has the expected length after serialization",
          "    assert!(serializer.writer.starts_with(expected_bytes)); // Verify that the serialized output starts with the expected bytes",
          "    assert!(serializer.writer.ends_with(expected_bytes_end)); // Verify that the serialized output ends with the expected bytes",
          "    assert!(value.is_finite()); // Confirm that the input value is a finite number (0.5 in this case)",
          "    assert!(serializer.writer.contains(&expected_value_bytes)); // Ensure the specific serialized value is present in the output",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]