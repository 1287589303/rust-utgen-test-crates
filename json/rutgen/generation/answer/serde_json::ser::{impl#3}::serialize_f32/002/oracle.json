[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: Vec<u8> = Vec::new();",
          "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
          "    let value: f32 = f32::INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, b\"null\");",
          "    let value: f32 = f32::NAN;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");",
          "    value = f32::NEG_INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");"
        ],
        "code": [
          "{",
          "    let mut buffer: Vec<u8> = Vec::new();",
          "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
          "    let value: f32 = f32::INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");",
          "    let value: f32 = f32::NAN;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");",
          "    value = f32::NEG_INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: Vec<u8> = Vec::new();",
          "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);",
          "    assert!(matches!(buffer.as_slice(), &[]));",
          "    ",
          "    buffer.clear();",
          "    let value: f32 = f32::NAN;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer.len(), 0);",
          "    assert!(matches!(buffer.as_slice(), &[]));"
        ],
        "code": [
          "{",
          "    let mut buffer: Vec<u8> = Vec::new();",
          "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
          "    let value: f32 = f32::NEG_INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer.len(), 0);",
          "    assert!(matches!(buffer.as_slice(), &[]));",
          "    ",
          "    buffer.clear();",
          "    let value: f32 = f32::NAN;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer.len(), 0);",
          "    assert!(matches!(buffer.as_slice(), &[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: Vec<u8> = Vec::new();",
          "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
          "    let value: f32 = f32::NAN;",
          "    serializer.serialize_f32(value).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, b\"null\");",
          "    buffer.clear();",
          "    let value: f32 = f32::INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");"
        ],
        "code": [
          "{",
          "    let mut buffer: Vec<u8> = Vec::new();",
          "    let mut serializer = Serializer { writer: &mut buffer, formatter: CompactFormatter };",
          "    let value: f32 = f32::NAN;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");",
          "    buffer.clear();",
          "    let value: f32 = f32::INFINITY;",
          "    serializer.serialize_f32(value).unwrap();",
          "    assert_eq!(buffer, b\"null\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]