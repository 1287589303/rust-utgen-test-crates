[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MapImpl::new();",
          "    let key = String::from(\"occupied_key\");",
          "    let value = Value::String(String::from(\"some_value\"));",
          "    map.insert(key.clone(), value.clone());",
          "",
          "    let entry = Entry::Occupied(OccupiedEntry {",
          "        occupied: map.get_mut(&key).unwrap().into(),",
          "    });",
          "",
          "    let returned_key = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_key, &key);",
          "    assert_eq!(returned_key.len(), key.len());",
          "    assert!(returned_key == \"occupied_key\");",
          "    assert!(returned_key.is_ascii());",
          "    assert_eq!(returned_key.as_str(), \"occupied_key\");"
        ],
        "code": [
          "{",
          "    let mut map = MapImpl::new();",
          "    let key = String::from(\"occupied_key\");",
          "    let value = Value::String(String::from(\"some_value\"));",
          "    map.insert(key.clone(), value.clone());",
          "",
          "    let entry = Entry::Occupied(OccupiedEntry {",
          "        occupied: map.get_mut(&key).unwrap().into(),",
          "    });",
          "",
          "    let returned_key = entry.key();",
          "    assert_eq!(returned_key, &key);",
          "    assert_eq!(returned_key.len(), key.len());",
          "    assert!(returned_key == \"occupied_key\");",
          "    assert!(returned_key.is_ascii());",
          "    assert_eq!(returned_key.as_str(), \"occupied_key\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MapImpl::new();",
          "    let key = String::from(\"non_empty_key\");",
          "    let value = Value::String(String::from(\"another_value\"));",
          "    map.insert(key.clone(), value.clone());",
          "",
          "    let entry = Entry::Occupied(OccupiedEntry {",
          "        occupied: map.get_mut(&key).unwrap().into(),",
          "    });",
          "",
          "    let returned_key = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_key, &key);"
        ],
        "code": [
          "{",
          "    let mut map = MapImpl::new();",
          "    let key = String::from(\"non_empty_key\");",
          "    let value = Value::String(String::from(\"another_value\"));",
          "    map.insert(key.clone(), value.clone());",
          "",
          "    let entry = Entry::Occupied(OccupiedEntry {",
          "        occupied: map.get_mut(&key).unwrap().into(),",
          "    });",
          "",
          "    let returned_key = entry.key();",
          "    assert_eq!(returned_key, &key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = MapImpl::new();",
          "    let key = String::from(\"another_occupied_key\");",
          "    let value = Value::String(String::from(\"value_for_another_key\"));",
          "    map.insert(key.clone(), value.clone());",
          "",
          "    let entry = Entry::Occupied(OccupiedEntry {",
          "        occupied: map.get_mut(&key).unwrap().into(),",
          "    });",
          "",
          "    let returned_key = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_key, &key);"
        ],
        "code": [
          "{",
          "    let mut map = MapImpl::new();",
          "    let key = String::from(\"another_occupied_key\");",
          "    let value = Value::String(String::from(\"value_for_another_key\"));",
          "    map.insert(key.clone(), value.clone());",
          "",
          "    let entry = Entry::Occupied(OccupiedEntry {",
          "        occupied: map.get_mut(&key).unwrap().into(),",
          "    });",
          "",
          "    let returned_key = entry.key();",
          "    assert_eq!(returned_key, &key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]