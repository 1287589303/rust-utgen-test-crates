[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Value::Number(Number::from_f32(1.0).unwrap()));",
          "    let value: Value = from(0.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(0.0).unwrap()));",
          "    let value: Value = from(-1.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(-1.0).unwrap()));",
          "    let value: Value = from(f32::INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NEG_INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NAN);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(13.37);",
          "    assert_eq!(value, Value::Number(Number::from_f32(13.37).unwrap()));"
        ],
        "code": [
          "{",
          "    let value: Value = from(1.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(1.0).unwrap()));",
          "    let value: Value = from(0.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(0.0).unwrap()));",
          "    let value: Value = from(-1.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(-1.0).unwrap()));",
          "    let value: Value = from(f32::INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NEG_INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NAN);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(13.37);",
          "    assert_eq!(value, Value::Number(Number::from_f32(13.37).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(-1.0);",
          "}"
        ],
        "oracle": [
          "    let result = from(-1.0); assert_eq!(result, Value::Number(Number::from_f32(-1.0).unwrap()));",
          "    let result = from(0.0); assert_eq!(result, Value::Number(Number::from_f32(0.0).unwrap()));",
          "    let result = from(1.0); assert_eq!(result, Value::Number(Number::from_f32(1.0).unwrap()));",
          "    let result = from(std::f32::INFINITY); assert_eq!(result, Value::Null);",
          "    let result = from(std::f32::NEG_INFINITY); assert_eq!(result, Value::Null);",
          "    let result = from(std::f32::NAN); assert_eq!(result, Value::Null);",
          "    let result = from(13.37); assert_eq!(result, Value::Number(Number::from_f32(13.37).unwrap()));"
        ],
        "code": [
          "{",
          "    let value: Value = from(-1.0);",
          "    let result = from(-1.0); assert_eq!(result, Value::Number(Number::from_f32(-1.0).unwrap()));",
          "    let result = from(0.0); assert_eq!(result, Value::Number(Number::from_f32(0.0).unwrap()));",
          "    let result = from(1.0); assert_eq!(result, Value::Number(Number::from_f32(1.0).unwrap()));",
          "    let result = from(std::f32::INFINITY); assert_eq!(result, Value::Null);",
          "    let result = from(std::f32::NEG_INFINITY); assert_eq!(result, Value::Null);",
          "    let result = from(std::f32::NAN); assert_eq!(result, Value::Null);",
          "    let result = from(13.37); assert_eq!(result, Value::Number(Number::from_f32(13.37).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(0.0);",
          "}"
        ],
        "oracle": [
          "    Value::Number(Number::from_f32(0.0).unwrap()) == from(0.0)",
          "    Value::Null == from(f32::INFINITY)",
          "    Value::Null == from(f32::NEG_INFINITY)",
          "    Value::Null == from(f32::NAN)",
          "    Value::Number(Number::from_f32(13.37).unwrap()) == from(13.37)",
          "    Value::Number(Number::from_f32(-3.14).unwrap()) == from(-3.14)",
          "    Value::Null == from(f32::from_bits(0x7FC00000))  // NaN Example",
          "    Value::Null == from(f32::from_bits(0x7F800001))  // Inifinite Example"
        ],
        "code": [
          "{",
          "    let value: Value = from(0.0);",
          "    Value::Number(Number::from_f32(0.0).unwrap()) == from(0.0)",
          "    Value::Null == from(f32::INFINITY)",
          "    Value::Null == from(f32::NEG_INFINITY)",
          "    Value::Null == from(f32::NAN)",
          "    Value::Number(Number::from_f32(13.37).unwrap()) == from(13.37)",
          "    Value::Number(Number::from_f32(-3.14).unwrap()) == from(-3.14)",
          "    Value::Null == from(f32::from_bits(0x7FC00000))  // NaN Example",
          "    Value::Null == from(f32::from_bits(0x7F800001))  // Inifinite Example",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(-0.0);",
          "}"
        ],
        "oracle": [
          "    Value::Number(Number::from_f32(-0.0).unwrap()) == value",
          "    value.is_null() == false",
          "    value.as_i64() == None",
          "    value.as_u64() == None",
          "    value.as_f64() == Some(-0.0)",
          "    value.as_str() == \"\";",
          "    value.as_f32() == Some(-0.0)"
        ],
        "code": [
          "{",
          "    let value: Value = from(-0.0);",
          "    Value::Number(Number::from_f32(-0.0).unwrap()) == value",
          "    value.is_null() == false",
          "    value.as_i64() == None",
          "    value.as_u64() == None",
          "    value.as_f64() == Some(-0.0)",
          "    value.as_str() == \"\";",
          "    value.as_f32() == Some(-0.0)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(f32::NAN);",
          "}"
        ],
        "oracle": [
          "    let value: Value = from(f32::NAN); assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::INFINITY); assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NEG_INFINITY); assert_eq!(value, Value::Null);",
          "    let value: Value = from(0.0); assert_eq!(value, Value::Number(Number::from_f32(0.0).unwrap()));",
          "    let value: Value = from(12.5); assert_eq!(value, Value::Number(Number::from_f32(12.5).unwrap()));",
          "    let value: Value = from(-12.5); assert_eq!(value, Value::Number(Number::from_f32(-12.5).unwrap()));"
        ],
        "code": [
          "{",
          "    let value: Value = from(f32::NAN);",
          "    let value: Value = from(f32::NAN); assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::INFINITY); assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NEG_INFINITY); assert_eq!(value, Value::Null);",
          "    let value: Value = from(0.0); assert_eq!(value, Value::Number(Number::from_f32(0.0).unwrap()));",
          "    let value: Value = from(12.5); assert_eq!(value, Value::Number(Number::from_f32(12.5).unwrap()));",
          "    let value: Value = from(-12.5); assert_eq!(value, Value::Number(Number::from_f32(-12.5).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(f32::INFINITY);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Value::Null);"
        ],
        "code": [
          "{",
          "    let value: Value = from(f32::INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(f32::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    Value::Null == from(f32::NEG_INFINITY)",
          "    ",
          "    let value: Value = from(f32::INFINITY);",
          "    Value::Null == from(f32::INFINITY)",
          "    ",
          "    let value: Value = from(f32::NAN);",
          "    Value::Null == from(f32::NAN)",
          "    ",
          "    let value: Value = from(0.0);",
          "    Value::Number(Number::from_f32(0.0).unwrap()) == from(0.0)",
          "    ",
          "    let value: Value = from(12.34);",
          "    Value::Number(Number::from_f32(12.34).unwrap()) == from(12.34)",
          "    ",
          "    let value: Value = from(-12.34);",
          "    Value::Number(Number::from_f32(-12.34).unwrap()) == from(-12.34)",
          "    ",
          "    let value: Value = from(f32::MAX);",
          "    Value::Number(Number::from_f32(f32::MAX).unwrap()) == from(f32::MAX)",
          "    ",
          "    let value: Value = from(f32::MIN);",
          "    Value::Number(Number::from_f32(f32::MIN).unwrap()) == from(f32::MIN)",
          "    ",
          "    let value: Value = from(1.0e-45);",
          "    Value::Number(Number::from_f32(1.0e-45).unwrap()) == from(1.0e-45)"
        ],
        "code": [
          "{",
          "    let value: Value = from(f32::NEG_INFINITY);",
          "    Value::Null == from(f32::NEG_INFINITY)",
          "    ",
          "    let value: Value = from(f32::INFINITY);",
          "    Value::Null == from(f32::INFINITY)",
          "    ",
          "    let value: Value = from(f32::NAN);",
          "    Value::Null == from(f32::NAN)",
          "    ",
          "    let value: Value = from(0.0);",
          "    Value::Number(Number::from_f32(0.0).unwrap()) == from(0.0)",
          "    ",
          "    let value: Value = from(12.34);",
          "    Value::Number(Number::from_f32(12.34).unwrap()) == from(12.34)",
          "    ",
          "    let value: Value = from(-12.34);",
          "    Value::Number(Number::from_f32(-12.34).unwrap()) == from(-12.34)",
          "    ",
          "    let value: Value = from(f32::MAX);",
          "    Value::Number(Number::from_f32(f32::MAX).unwrap()) == from(f32::MAX)",
          "    ",
          "    let value: Value = from(f32::MIN);",
          "    Value::Number(Number::from_f32(f32::MIN).unwrap()) == from(f32::MIN)",
          "    ",
          "    let value: Value = from(1.0e-45);",
          "    Value::Number(Number::from_f32(1.0e-45).unwrap()) == from(1.0e-45)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(3.4e38);",
          "}"
        ],
        "oracle": [
          "    let expected_value: Value = Value::Number(Number::from_f32(3.4e38).unwrap());",
          "    assert_eq!(value, expected_value);",
          "    let value: Value = from(f32::INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NAN);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(0.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(0.0).unwrap());",
          "    let value: Value = from(-3.4e38);",
          "    assert_eq!(value, Value::Number(Number::from_f32(-3.4e38).unwrap());"
        ],
        "code": [
          "{",
          "    let value: Value = from(3.4e38);",
          "    let expected_value: Value = Value::Number(Number::from_f32(3.4e38).unwrap());",
          "    assert_eq!(value, expected_value);",
          "    let value: Value = from(f32::INFINITY);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(f32::NAN);",
          "    assert_eq!(value, Value::Null);",
          "    let value: Value = from(0.0);",
          "    assert_eq!(value, Value::Number(Number::from_f32(0.0).unwrap());",
          "    let value: Value = from(-3.4e38);",
          "    assert_eq!(value, Value::Number(Number::from_f32(-3.4e38).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Value = from(-3.4e38);",
          "}"
        ],
        "oracle": [
          "    let result: Value = from(-3.4e38); assert_eq!(result, Value::Number(Number::from_f32(-3.4e38).unwrap()));"
        ],
        "code": [
          "{",
          "    let value: Value = from(-3.4e38);",
          "    let result: Value = from(-3.4e38); assert_eq!(result, Value::Number(Number::from_f32(-3.4e38).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]