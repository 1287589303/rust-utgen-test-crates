[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    ",
          "    impl serde::ser::Serializer for MockWriter {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_char(self, value: char) -> Result<(), Self::Error> {",
          "            // Mock implementation; normally would serialize the char",
          "            Ok(())",
          "        }",
          "        ",
          "        fn serialize_str(self, value: &str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        // Other required methods would be mocked but omitted for brevity",
          "    }",
          "",
          "    let writer = MockWriter;",
          "    writer.serialize_char('A').unwrap(); // valid ASCII",
          "    writer.serialize_char('z').unwrap(); // valid ASCII",
          "    writer.serialize_char('\\0').unwrap(); // null character",
          "}"
        ],
        "oracle": [
          "    writer.serialize_char('A').unwrap(); // valid ASCII input",
          "    writer.serialize_char('z').unwrap(); // valid ASCII input",
          "    writer.serialize_char('\\0').unwrap(); // null character input",
          "    writer.serialize_char('あ').unwrap(); // valid multi-byte UTF-8 character",
          "    writer.serialize_char('😊').unwrap(); // valid multi-byte UTF-8 character",
          "    writer.serialize_char('𐍈').unwrap(); // valid UTF-8 character above Unicode Plane 0",
          "    writer.serialize_char('😀').unwrap(); // valid surrogate pair character",
          "    writer.serialize_char(' ').unwrap(); // whitespace character",
          "    writer.serialize_char('\\n').unwrap(); // newline character",
          "    writer.serialize_char('\\r').unwrap(); // carriage return character"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    ",
          "    impl serde::ser::Serializer for MockWriter {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_char(self, value: char) -> Result<(), Self::Error> {",
          "            // Mock implementation; normally would serialize the char",
          "            Ok(())",
          "        }",
          "        ",
          "        fn serialize_str(self, value: &str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        // Other required methods would be mocked but omitted for brevity",
          "    }",
          "",
          "    let writer = MockWriter;",
          "    writer.serialize_char('A').unwrap(); // valid ASCII",
          "    writer.serialize_char('z').unwrap(); // valid ASCII",
          "    writer.serialize_char('\\0').unwrap(); // null character",
          "    writer.serialize_char('A').unwrap(); // valid ASCII input",
          "    writer.serialize_char('z').unwrap(); // valid ASCII input",
          "    writer.serialize_char('\\0').unwrap(); // null character input",
          "    writer.serialize_char('あ').unwrap(); // valid multi-byte UTF-8 character",
          "    writer.serialize_char('😊').unwrap(); // valid multi-byte UTF-8 character",
          "    writer.serialize_char('𐍈').unwrap(); // valid UTF-8 character above Unicode Plane 0",
          "    writer.serialize_char('😀').unwrap(); // valid surrogate pair character",
          "    writer.serialize_char(' ').unwrap(); // whitespace character",
          "    writer.serialize_char('\\n').unwrap(); // newline character",
          "    writer.serialize_char('\\r').unwrap(); // carriage return character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    ",
          "    impl serde::ser::Serializer for MockWriter {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_char(self, value: char) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn serialize_str(self, value: &str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = MockWriter;",
          "    writer.serialize_char('€').unwrap(); // multibyte character",
          "    writer.serialize_char('你').unwrap(); // multibyte character",
          "}"
        ],
        "oracle": [
          "    writer.serialize_char('a').unwrap(); // single byte character",
          "    writer.serialize_char('á').unwrap(); // single byte character with accent",
          "    writer.serialize_char('😀').unwrap(); // emoji character",
          "    writer.serialize_char('z').unwrap(); // single byte character",
          "    writer.serialize_char('é').unwrap(); // single byte character with accent",
          "    writer.serialize_char('👩‍🚀').unwrap(); // complex emoji with variation",
          "    writer.serialize_char('\\n').unwrap(); // newline character",
          "    writer.serialize_char('\\0').unwrap(); // null character"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    ",
          "    impl serde::ser::Serializer for MockWriter {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_char(self, value: char) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn serialize_str(self, value: &str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = MockWriter;",
          "    writer.serialize_char('€').unwrap(); // multibyte character",
          "    writer.serialize_char('你').unwrap(); // multibyte character",
          "    writer.serialize_char('a').unwrap(); // single byte character",
          "    writer.serialize_char('á').unwrap(); // single byte character with accent",
          "    writer.serialize_char('😀').unwrap(); // emoji character",
          "    writer.serialize_char('z').unwrap(); // single byte character",
          "    writer.serialize_char('é').unwrap(); // single byte character with accent",
          "    writer.serialize_char('👩‍🚀').unwrap(); // complex emoji with variation",
          "    writer.serialize_char('\\n').unwrap(); // newline character",
          "    writer.serialize_char('\\0').unwrap(); // null character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter;",
          "    ",
          "    impl serde::ser::Serializer for MockWriter {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_char(self, value: char) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn serialize_str(self, value: &str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = MockWriter;",
          "    writer.serialize_char('\\u{10FFFF}').unwrap(); // highest valid Unicode character",
          "    writer.serialize_char('\\u{0}').unwrap(); // null character",
          "}"
        ],
        "oracle": [
          "    writer.serialize_char('a').unwrap(); // valid ASCII character",
          "    writer.serialize_char('z').unwrap(); // valid lowercase ASCII character",
          "    writer.serialize_char('A').unwrap(); // valid uppercase ASCII character",
          "    writer.serialize_char('Z').unwrap(); // valid uppercase ASCII character",
          "    writer.serialize_char('1').unwrap(); // valid numeric ASCII character",
          "    writer.serialize_char('!').unwrap(); // valid punctuation character",
          "    writer.serialize_char('\\u{20AC}').unwrap(); // valid Euro sign",
          "    writer.serialize_char('\\u{007F}').unwrap(); // valid DEL character",
          "    writer.serialize_char('\\u{FFFD}').unwrap(); // valid replacement character",
          "    writer.serialize_char('💻').unwrap(); // valid emoji character"
        ],
        "code": [
          "{",
          "    struct MockWriter;",
          "    ",
          "    impl serde::ser::Serializer for MockWriter {",
          "        type Ok = ();",
          "        type Error = ();",
          "        type SerializeSeq = ();",
          "        type SerializeTuple = ();",
          "        type SerializeTupleStruct = ();",
          "        type SerializeTupleVariant = ();",
          "        type SerializeMap = ();",
          "        type SerializeStruct = ();",
          "        type SerializeStructVariant = ();",
          "        ",
          "        fn serialize_char(self, value: char) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "        ",
          "        fn serialize_str(self, value: &str) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = MockWriter;",
          "    writer.serialize_char('\\u{10FFFF}').unwrap(); // highest valid Unicode character",
          "    writer.serialize_char('\\u{0}').unwrap(); // null character",
          "    writer.serialize_char('a').unwrap(); // valid ASCII character",
          "    writer.serialize_char('z').unwrap(); // valid lowercase ASCII character",
          "    writer.serialize_char('A').unwrap(); // valid uppercase ASCII character",
          "    writer.serialize_char('Z').unwrap(); // valid uppercase ASCII character",
          "    writer.serialize_char('1').unwrap(); // valid numeric ASCII character",
          "    writer.serialize_char('!').unwrap(); // valid punctuation character",
          "    writer.serialize_char('\\u{20AC}').unwrap(); // valid Euro sign",
          "    writer.serialize_char('\\u{007F}').unwrap(); // valid DEL character",
          "    writer.serialize_char('\\u{FFFD}').unwrap(); // valid replacement character",
          "    writer.serialize_char('💻').unwrap(); // valid emoji character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]