[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::NegInt(-1);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), true);"
        ],
        "code": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::NegInt(-1);",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.eq(&b), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::NegInt(-2);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::NegInt(-2);",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::NegInt(i64::min_value());",
          "    let b = N::NegInt(i64::min_value());",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), true);"
        ],
        "code": [
          "{",
          "    let a = N::NegInt(i64::min_value());",
          "    let b = N::NegInt(i64::min_value());",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.eq(&b), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::NegInt(i64::min_value() + 1);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::NegInt(i64::min_value() + 1);",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]