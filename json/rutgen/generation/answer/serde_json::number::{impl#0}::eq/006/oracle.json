[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::PosInt(5);",
          "    let b = N::NegInt(-3);",
          "    a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::PosInt(5);",
          "    let b = N::NegInt(-3);",
          "    a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::PosInt(10);",
          "    let b = N::Float(3.14);",
          "    a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::PosInt(10);",
          "    let b = N::Float(3.14);",
          "    a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::PosInt(1);",
          "    a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::NegInt(-1);",
          "    let b = N::PosInt(1);",
          "    a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::NegInt(-4);",
          "    let b = N::Float(-2.71);",
          "    a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::NegInt(-4);",
          "    let b = N::Float(-2.71);",
          "    a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::Float(2.5);",
          "    let b = N::PosInt(2);",
          "    a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    let a = N::Float(2.5);",
          "    let b = N::PosInt(2);",
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::Float(2.5);",
          "    let b = N::PosInt(2);",
          "    a.eq(&b);",
          "    let a = N::Float(2.5);",
          "    let b = N::PosInt(2);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = N::Float(-3.5);",
          "    let b = N::NegInt(-2);",
          "    a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), false);"
        ],
        "code": [
          "{",
          "    let a = N::Float(-3.5);",
          "    let b = N::NegInt(-2);",
          "    a.eq(&b);",
          "    assert_eq!(a.eq(&b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]