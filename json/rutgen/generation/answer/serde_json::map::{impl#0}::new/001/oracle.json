[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "}"
        ],
        "oracle": [
          "    let map: Map<String, Value> = Map::new();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.map, MapImpl::new());"
        ],
        "code": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "    let map: Map<String, Value> = Map::new();",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.map, MapImpl::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(feature = \"preserve_order\")]"
        ],
        "prefix": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "}"
        ],
        "oracle": [
          "    let map: Map<String, Value> = Map::new();",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    #[cfg(not(feature = \"preserve_order\"))]",
          "    assert!(map.map.is_empty());",
          "    #[cfg(feature = \"preserve_order\")]",
          "    assert!(map.map.len() == 0);"
        ],
        "code": [
          "{",
          "    let map: Map<String, Value> = Map::new();",
          "    let map: Map<String, Value> = Map::new();",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    #[cfg(not(feature = \"preserve_order\"))]",
          "    assert!(map.map.is_empty());",
          "    #[cfg(feature = \"preserve_order\")]",
          "    assert!(map.map.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]