[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct DummyVisitor;",
      "",
      "impl<'de> Visitor<'de> for DummyVisitor {",
      "    type Value = ();",
      "    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
      "        formatter.write_str(\"a dummy visitor\")",
      "    }",
      "    fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, Error>",
      "    where",
      "        V: SeqAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "    fn visit_map<V>(self, _map: V) -> Result<Self::Value, Error>",
      "    where",
      "        V: MapAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Null]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Bool(true), Value::Bool(false)]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Number(Number { n: 12 })]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Object(Map::new());",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    let value = Value::Array(vec![Value::Null]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Bool(true), Value::Bool(false)]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Number(Number { n: 12 })]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Object(Map::new());",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Null]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Null]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    let result_value = result.unwrap();",
          "    assert_eq!(result_value, ());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Null]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    let value = Value::Array(vec![Value::Null]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    let result_value = result.unwrap();",
          "    assert_eq!(result_value, ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true), Value::Bool(false)]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Bool(true), Value::Bool(false)]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Object(Map::new());",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    let value = Value::String(String::from(\"not an array\"));",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(true), Value::Bool(false)]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    let value = Value::Array(vec![Value::Bool(true), Value::Bool(false)]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    let value = Value::Object(Map::new());",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "    let value = Value::String(String::from(\"not an array\"));",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Number(Number { n: 1 }),",
          "        Value::Number(Number { n: 2 }),",
          "    ]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    let seq = result.unwrap();",
          "    assert_eq!(seq, ());",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Number(Number { n: 1 }),",
          "        Value::Number(Number { n: 2 }),",
          "    ]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    let seq = result.unwrap();",
          "    assert_eq!(seq, ());",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), ());",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert!(matches!(value.deserialize_struct(\"Test\", &[\"field\"], visitor), Ok(_)));",
          "    assert!(result.is_err() == false);",
          "    assert!(result.unwrap() == ());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::String(String::from(\"test\"))]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), ());",
          "    assert!(matches!(value, Value::Array(_)));",
          "    assert!(matches!(value.deserialize_struct(\"Test\", &[\"field\"], visitor), Ok(_)));",
          "    assert!(result.is_err() == false);",
          "    assert!(result.unwrap() == ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Array(vec![Value::Bool(true)]),",
          "        Value::Array(vec![Value::Null]),",
          "    ]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)]), Value::Array(vec![Value::Null])]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)]), Value::Array(vec![Value::Null])]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    let seq_result = visitor.visit_seq(SeqDeserializer::new(vec![Value::Bool(true), Value::Null]));",
          "    assert!(seq_result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true), Value::Null])]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert_eq!(result.err().is_some(), true);",
          "    ",
          "    let value = Value::Array(vec![Value::String(\"test\".into())]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Array(vec![Value::Bool(true)]),",
          "        Value::Array(vec![Value::Null]),",
          "    ]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)]), Value::Array(vec![Value::Null])]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true)]), Value::Array(vec![Value::Null])]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    let seq_result = visitor.visit_seq(SeqDeserializer::new(vec![Value::Bool(true), Value::Null]));",
          "    assert!(seq_result.is_ok());",
          "    ",
          "    let value = Value::Array(vec![Value::Array(vec![Value::Bool(true), Value::Null])]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert_eq!(result.err().is_some(), true);",
          "    ",
          "    let value = Value::Array(vec![Value::String(\"test\".into())]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Object(Map {",
          "            map: MapImpl::new(),",
          "        }),",
          "    ]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(result.unwrap() == ());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap_err(), Error::invalid_type(&visitor));"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![",
          "        Value::Object(Map {",
          "            map: MapImpl::new(),",
          "        }),",
          "    ]);",
          "    let visitor = DummyVisitor;",
          "    let result = value.deserialize_struct(\"Test\", &[\"field\"], visitor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(result.unwrap() == ());",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap_err(), Error::invalid_type(&visitor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]