[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Null;",
          "    let other = 1.0f32;",
          "    eq_f32(&value, other);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Null;",
          "    let other = 1.0f32;",
          "    assert_eq!(eq_f32(&value, other), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Null;",
          "    let other = 1.0f32;",
          "    eq_f32(&value, other);",
          "    let value = Value::Null;",
          "    let other = 1.0f32;",
          "    assert_eq!(eq_f32(&value, other), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Bool(true);",
          "    let other = 3.14f32;",
          "    eq_f32(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_f32(&Value::Bool(true), 3.14f32), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Bool(true);",
          "    let other = 3.14f32;",
          "    eq_f32(&value, other);",
          "    assert_eq!(eq_f32(&Value::Bool(true), 3.14f32), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::String(\"not a number\".to_string());",
          "    let other = 2.71f32;",
          "    eq_f32(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(eq_f32(&Value::String(\"not a number\".to_string()), 2.71f32), false);"
        ],
        "code": [
          "{",
          "    let value = Value::String(\"not a number\".to_string());",
          "    let other = 2.71f32;",
          "    eq_f32(&value, other);",
          "    assert_eq!(eq_f32(&Value::String(\"not a number\".to_string()), 2.71f32), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(false), Value::String(\"test\".to_string())]);",
          "    let other = 0.0f32;",
          "    eq_f32(&value, other);",
          "}"
        ],
        "oracle": [
          "    let value = Value::Array(vec![Value::Bool(false), Value::String(\"test\".to_string())]);",
          "    let other = 0.0f32;",
          "    assert_eq!(eq_f32(&value, other), false);"
        ],
        "code": [
          "{",
          "    let value = Value::Array(vec![Value::Bool(false), Value::String(\"test\".to_string())]);",
          "    let other = 0.0f32;",
          "    eq_f32(&value, other);",
          "    let value = Value::Array(vec![Value::Bool(false), Value::String(\"test\".to_string())]);",
          "    let other = 0.0f32;",
          "    assert_eq!(eq_f32(&value, other), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Value::Object(std::collections::BTreeMap::new());",
          "    let other = -1.0f32;",
          "    eq_f32(&value, other);",
          "}"
        ],
        "oracle": [
          "    assert!(!eq_f32(&Value::Object(std::collections::BTreeMap::new()), -1.0f32));"
        ],
        "code": [
          "{",
          "    let value = Value::Object(std::collections::BTreeMap::new());",
          "    let other = -1.0f32;",
          "    eq_f32(&value, other);",
          "    assert!(!eq_f32(&Value::Object(std::collections::BTreeMap::new()), -1.0f32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]