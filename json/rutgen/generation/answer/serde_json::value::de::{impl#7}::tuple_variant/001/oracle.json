[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct DummyVisitor;",
      "",
      "impl<'de> Visitor<'de> for DummyVisitor {",
      "    type Value = ();",
      "    ",
      "    fn visit_unit(self) -> Result<Self::Value, Error> {",
      "        Ok(())",
      "    }",
      "",
      "    fn visit_seq<V>(self, _seq: V) -> Result<Self::Value, Error>",
      "    where",
      "        V: SeqAccess<'de>,",
      "    {",
      "        Ok(())",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Bool(true)),",
          "    };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "}"
        ],
        "oracle": [
          "    let deserializer = VariantDeserializer { value: Some(Value::Bool(true)) };",
          "    let visitor = DummyVisitor {};",
          "    let result = deserializer.tuple_variant(1, visitor);",
          "    assert!(result.is_err());",
          "    if let Err(ref e) = result {",
          "    assert_eq!(e, serde::de::Error::invalid_type(Value::Bool(true).unexpected(), &\"tuple variant\"));",
          "    }"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Bool(true)),",
          "    };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "    let deserializer = VariantDeserializer { value: Some(Value::Bool(true)) };",
          "    let visitor = DummyVisitor {};",
          "    let result = deserializer.tuple_variant(1, visitor);",
          "    assert!(result.is_err());",
          "    if let Err(ref e) = result {",
          "    assert_eq!(e, serde::de::Error::invalid_type(Value::Bool(true).unexpected(), &\"tuple variant\"));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Number(Number::from(10))),",
          "    };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "}"
        ],
        "oracle": [
          "    let deserializer = VariantDeserializer { value: Some(Value::Number(Number::from(10))) };",
          "    let visitor = DummyVisitor {};",
          "    let result = deserializer.tuple_variant(1, visitor);",
          "    assert!(result.is_err());",
          "    if let Err(error) = result {",
          "    assert_eq!(error, serde::de::Error::invalid_type(Value::Number(Number::from(10)).unexpected(), &\"tuple variant\"));",
          "    }"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::Number(Number::from(10))),",
          "    };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "    let deserializer = VariantDeserializer { value: Some(Value::Number(Number::from(10))) };",
          "    let visitor = DummyVisitor {};",
          "    let result = deserializer.tuple_variant(1, visitor);",
          "    assert!(result.is_err());",
          "    if let Err(error) = result {",
          "    assert_eq!(error, serde::de::Error::invalid_type(Value::Number(Number::from(10)).unexpected(), &\"tuple variant\"));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::String(String::from(\"test\"))),",
          "    };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "}"
        ],
        "oracle": [
          "    let deserializer = VariantDeserializer { value: Some(Value::String(String::from(\"test\"))) };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "    assert_eq!(_result, Err(serde::de::Error::invalid_type(Value::String(String::from(\"test\")).unexpected(), &\"tuple variant\")));"
        ],
        "code": [
          "{",
          "    let deserializer = VariantDeserializer {",
          "        value: Some(Value::String(String::from(\"test\"))),",
          "    };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "    let deserializer = VariantDeserializer { value: Some(Value::String(String::from(\"test\"))) };",
          "    let visitor = DummyVisitor {};",
          "    let _result = deserializer.tuple_variant(1, visitor);",
          "    assert_eq!(_result, Err(serde::de::Error::invalid_type(Value::String(String::from(\"test\")).unexpected(), &\"tuple variant\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]