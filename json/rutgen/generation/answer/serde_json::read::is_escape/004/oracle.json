[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch: u8 = 34; // b'\"'",
          "    let including_control_characters: bool = false;",
          "    is_escape(ch, including_control_characters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_escape(34, false), true); // ch == b'\"'",
          "    assert_eq!(is_escape(92, false), true); // ch == b'\\\\'",
          "    assert_eq!(is_escape(10, false), false); // including_control_characters = false, ch < 0x20",
          "    assert_eq!(is_escape(32, false), false); // including_control_characters = false, ch == 0x20",
          "    assert_eq!(is_escape(31, false), false); // including_control_characters = false, ch < 0x20",
          "    assert_eq!(is_escape(0, false), false); // including_control_characters = false, ch < 0x20"
        ],
        "code": [
          "{",
          "    let ch: u8 = 34; // b'\"'",
          "    let including_control_characters: bool = false;",
          "    is_escape(ch, including_control_characters);",
          "    assert_eq!(is_escape(34, false), true); // ch == b'\"'",
          "    assert_eq!(is_escape(92, false), true); // ch == b'\\\\'",
          "    assert_eq!(is_escape(10, false), false); // including_control_characters = false, ch < 0x20",
          "    assert_eq!(is_escape(32, false), false); // including_control_characters = false, ch == 0x20",
          "    assert_eq!(is_escape(31, false), false); // including_control_characters = false, ch < 0x20",
          "    assert_eq!(is_escape(0, false), false); // including_control_characters = false, ch < 0x20",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch: u8 = 92; // b'\\'",
          "    let including_control_characters: bool = false;",
          "    is_escape(ch, including_control_characters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(b'\\n', false), false);",
          "    assert_eq!(is_escape(b'\\t', false), false);"
        ],
        "code": [
          "{",
          "    let ch: u8 = 92; // b'\\'",
          "    let including_control_characters: bool = false;",
          "    is_escape(ch, including_control_characters);",
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(b'\\n', false), false);",
          "    assert_eq!(is_escape(b'\\t', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch: u8 = 0; // b'\\0'",
          "    let including_control_characters: bool = true;",
          "    is_escape(ch, including_control_characters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(b'a', true), false);",
          "    assert_eq!(is_escape(b'\\n', true), true);",
          "    assert_eq!(is_escape(b'\\t', false), false);"
        ],
        "code": [
          "{",
          "    let ch: u8 = 0; // b'\\0'",
          "    let including_control_characters: bool = true;",
          "    is_escape(ch, including_control_characters);",
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(b'a', true), false);",
          "    assert_eq!(is_escape(b'\\n', true), true);",
          "    assert_eq!(is_escape(b'\\t', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch: u8 = 32; // space",
          "    let including_control_characters: bool = true;",
          "    is_escape(ch, including_control_characters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(b'\\n', true), true);",
          "    assert_eq!(is_escape(b'\\t', true), true);",
          "    assert_eq!(is_escape(b'\\0', true), true);",
          "    assert_eq!(is_escape(b'a', true), false);",
          "    assert_eq!(is_escape(b' ', true), false);",
          "    assert_eq!(is_escape(b'a', false), false);",
          "    assert_eq!(is_escape(b' ', false), false);"
        ],
        "code": [
          "{",
          "    let ch: u8 = 32; // space",
          "    let including_control_characters: bool = true;",
          "    is_escape(ch, including_control_characters);",
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(b'\\n', true), true);",
          "    assert_eq!(is_escape(b'\\t', true), true);",
          "    assert_eq!(is_escape(b'\\0', true), true);",
          "    assert_eq!(is_escape(b'a', true), false);",
          "    assert_eq!(is_escape(b' ', true), false);",
          "    assert_eq!(is_escape(b'a', false), false);",
          "    assert_eq!(is_escape(b' ', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch: u8 = 31; // just below control character range",
          "    let including_control_characters: bool = true;",
          "    is_escape(ch, including_control_characters);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(31, true), true);",
          "    assert_eq!(is_escape(31, false), false);",
          "    assert_eq!(is_escape(32, true), false);"
        ],
        "code": [
          "{",
          "    let ch: u8 = 31; // just below control character range",
          "    let including_control_characters: bool = true;",
          "    is_escape(ch, including_control_characters);",
          "    assert_eq!(is_escape(b'\"', false), true);",
          "    assert_eq!(is_escape(b'\\\\', false), true);",
          "    assert_eq!(is_escape(31, true), true);",
          "    assert_eq!(is_escape(31, false), false);",
          "    assert_eq!(is_escape(32, true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]