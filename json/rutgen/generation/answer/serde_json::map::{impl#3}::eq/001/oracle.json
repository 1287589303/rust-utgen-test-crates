[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let map2 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let _ = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.eq(&map2), true);"
        ],
        "code": [
          "{",
          "    let map1 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let map2 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let _ = map1.eq(&map2);",
          "    assert_eq!(map1.eq(&map2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let map2 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let _ = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.eq(&map2), true);"
        ],
        "code": [
          "{",
          "    let map1 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let map2 = Map {",
          "        map: MapImpl::<String, Value>::new(),",
          "    };",
          "    let _ = map1.eq(&map2);",
          "    assert_eq!(map1.eq(&map2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"key1\".to_string(), Value::Null);",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"key1\".to_string(), Value::Null);",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.eq(&map2), true);"
        ],
        "code": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"key1\".to_string(), Value::Null);",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"key1\".to_string(), Value::Null);",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "    assert_eq!(map1.eq(&map2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert!(!map1.eq(&map2));"
        ],
        "code": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"key1\".to_string(), Value::Bool(true));",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"key2\".to_string(), Value::Bool(true));",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "    assert!(!map1.eq(&map2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"key1\".to_string(), Value::Number(Number::from(42)));",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"key1\".to_string(), Value::Number(Number::from(43)));",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.eq(&map2), false);"
        ],
        "code": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"key1\".to_string(), Value::Number(Number::from(42)));",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"key1\".to_string(), Value::Number(Number::from(43)));",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map1_data.insert(\"bool_key\".to_string(), Value::Bool(true));",
          "    map1_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map2_data.insert(\"bool_key\".to_string(), Value::Bool(true));",
          "    map2_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert!(map1.eq(&map2));",
          "    let mut map3_data = MapImpl::<String, Value>::new();",
          "    map3_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map3_data.insert(\"bool_key\".to_string(), Value::Bool(false));",
          "    map3_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map3 = Map { map: map3_data };",
          "    assert!(!map1.eq(&map3));",
          "    let mut map4_data = MapImpl::<String, Value>::new();",
          "    map4_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map4_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map4 = Map { map: map4_data };",
          "    assert!(!map1.eq(&map4));",
          "    let map5 = Map { map: MapImpl::<String, Value>::new() };",
          "    assert!(!map1.eq(&map5));"
        ],
        "code": [
          "{",
          "    let mut map1_data = MapImpl::<String, Value>::new();",
          "    map1_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map1_data.insert(\"bool_key\".to_string(), Value::Bool(true));",
          "    map1_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map1 = Map { map: map1_data };",
          "",
          "    let mut map2_data = MapImpl::<String, Value>::new();",
          "    map2_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map2_data.insert(\"bool_key\".to_string(), Value::Bool(true));",
          "    map2_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map2 = Map { map: map2_data };",
          "",
          "    let _ = map1.eq(&map2);",
          "    assert!(map1.eq(&map2));",
          "    let mut map3_data = MapImpl::<String, Value>::new();",
          "    map3_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map3_data.insert(\"bool_key\".to_string(), Value::Bool(false));",
          "    map3_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map3 = Map { map: map3_data };",
          "    assert!(!map1.eq(&map3));",
          "    let mut map4_data = MapImpl::<String, Value>::new();",
          "    map4_data.insert(\"null_key\".to_string(), Value::Null);",
          "    map4_data.insert(\"number_key\".to_string(), Value::Number(Number::from(42)));",
          "    let map4 = Map { map: map4_data };",
          "    assert!(!map1.eq(&map4));",
          "    let map5 = Map { map: MapImpl::<String, Value>::new() };",
          "    assert!(!map1.eq(&map5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]