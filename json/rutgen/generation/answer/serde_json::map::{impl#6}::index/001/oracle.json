[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "",
          "    let result = &map[\"key1\"];",
          "}"
        ],
        "oracle": [
          "    let mut map = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    assert_eq!(result, &Value::String(\"value1\".to_string()));"
        ],
        "code": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "",
          "    let result = &map[\"key1\"];",
          "    let mut map = Map { map: MapImpl::new() };",
          "    map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
          "    assert_eq!(result, &Value::String(\"value1\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "",
          "    let result = &map[\"non_existing_key\"];",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &Value::Null);"
        ],
        "code": [
          "{",
          "    let mut map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "",
          "    let result = &map[\"non_existing_key\"];",
          "    assert_eq!(result, &Value::Null);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "",
          "    let result = &map[\"non_existing_key\"];",
          "}"
        ],
        "oracle": [
          "    let map = Map { map: MapImpl::new() };",
          "    let result = &map[\"non_existing_key\"];",
          "    assert_eq!(result, &Value::Null);",
          "    assert!(map.map.get(\"non_existing_key\").is_none());",
          "    assert!(map.map.is_empty());"
        ],
        "code": [
          "{",
          "    let map = Map {",
          "        map: MapImpl::new(),",
          "    };",
          "",
          "    let result = &map[\"non_existing_key\"];",
          "    let map = Map { map: MapImpl::new() };",
          "    let result = &map[\"non_existing_key\"];",
          "    assert_eq!(result, &Value::Null);",
          "    assert!(map.map.get(\"non_existing_key\").is_none());",
          "    assert!(map.map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]