[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"serde\".to_owned(), Value::Number(12.into()));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        Entry::Occupied(occupied) => {",
          "            occupied.remove();",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(\"serde\"), None);",
          "    assert!(matches!(map.entry(\"serde\"), Entry::Vacant(_)));",
          "    assert_eq!(occupied.get(), &Value::Number(12.into()));",
          "    assert_eq!(occupied.key(), \"serde\");",
          "    assert_eq!(occupied.remove(), Value::Number(12.into()));"
        ],
        "code": [
          "{",
          "    let mut map = serde_json::Map::new();",
          "    map.insert(\"serde\".to_owned(), Value::Number(12.into()));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        Entry::Occupied(occupied) => {",
          "            occupied.remove();",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "    assert_eq!(map.get(\"serde\"), None);",
          "    assert!(matches!(map.entry(\"serde\"), Entry::Vacant(_)));",
          "    assert_eq!(occupied.get(), &Value::Number(12.into()));",
          "    assert_eq!(occupied.key(), \"serde\");",
          "    assert_eq!(occupied.remove(), Value::Number(12.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: BTreeMap<String, Value> = BTreeMap::new();",
          "    map.insert(\"serde\".to_owned(), Value::Number(12.into()));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        Entry::Occupied(occupied) => {",
          "            occupied.remove();",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(\"serde\"), None);",
          "    let occupied = map.entry(\"serde\").or_insert(Value::Number(0.into()));",
          "    assert_eq!(occupied, &Value::Number(0.into()));",
          "    let mut map_preserve_order: IndexMap<String, Value> = IndexMap::new();",
          "    map_preserve_order.insert(\"serde\".to_owned(), Value::Number(12.into()));",
          "    assert_eq!(map_preserve_order.get(\"serde\"), Some(&Value::Number(12.into())));",
          "    let occupied_ordered = map_preserve_order.entry(\"serde\").or_insert(Value::Number(0.into()));",
          "    assert_eq!(occupied_ordered, &Value::Number(12.into()));",
          "    assert!(map_preserve_order.len() == 1);",
          "    let removed_value = occupied_ordered.remove();",
          "    assert_eq!(removed_value, Value::Number(12.into()));",
          "    assert!(map_preserve_order.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: BTreeMap<String, Value> = BTreeMap::new();",
          "    map.insert(\"serde\".to_owned(), Value::Number(12.into()));",
          "    ",
          "    match map.entry(\"serde\") {",
          "        Entry::Occupied(occupied) => {",
          "            occupied.remove();",
          "        }",
          "        Entry::Vacant(_) => unimplemented!(),",
          "    }",
          "    assert_eq!(map.get(\"serde\"), None);",
          "    let occupied = map.entry(\"serde\").or_insert(Value::Number(0.into()));",
          "    assert_eq!(occupied, &Value::Number(0.into()));",
          "    let mut map_preserve_order: IndexMap<String, Value> = IndexMap::new();",
          "    map_preserve_order.insert(\"serde\".to_owned(), Value::Number(12.into()));",
          "    assert_eq!(map_preserve_order.get(\"serde\"), Some(&Value::Number(12.into())));",
          "    let occupied_ordered = map_preserve_order.entry(\"serde\").or_insert(Value::Number(0.into()));",
          "    assert_eq!(occupied_ordered, &Value::Number(12.into()));",
          "    assert!(map_preserve_order.len() == 1);",
          "    let removed_value = occupied_ordered.remove();",
          "    assert_eq!(removed_value, Value::Number(12.into()));",
          "    assert!(map_preserve_order.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]