[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut v = Value::Null;",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(v, Value::Object(Map::new()));",
          "    assert!(matches!(result, &mut Value::Null));"
        ],
        "code": [
          "{",
          "    let mut v = Value::Null;",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "    assert_eq!(v, Value::Object(Map::new()));",
          "    assert!(matches!(result, &mut Value::Null));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut v = Value::Object(Map::new());",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &Value::Null);",
          "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
          "    assert!(v.get(\"key1\").is_some());",
          "    assert_eq!(v.get(\"key1\"), Some(&Value::Null));",
          "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(\"key1\")));",
          "    assert!(matches!(v, Value::Object(ref map) if !map.is_empty()));",
          "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));"
        ],
        "code": [
          "{",
          "    let mut v = Value::Object(Map::new());",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "    assert_eq!(result, &Value::Null);",
          "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
          "    assert!(v.get(\"key1\").is_some());",
          "    assert_eq!(v.get(\"key1\"), Some(&Value::Null));",
          "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(\"key1\")));",
          "    assert!(matches!(v, Value::Object(ref map) if !map.is_empty()));",
          "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut v = Value::Object(Map::with_capacity(0));",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Object(ref map) if map.get(&key).is_some()));",
          "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));"
        ],
        "code": [
          "{",
          "    let mut v = Value::Object(Map::with_capacity(0));",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Object(ref map) if map.get(&key).is_some()));",
          "    assert!(matches!(v, Value::Object(ref map) if map.len() == 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut v = Value::Object(Map::with_capacity(1));",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Object(map) if map.len() == 1));",
          "    assert!(v.get(&String::from(\"key1\")).is_some());",
          "    assert_eq!(v.get(&String::from(\"key1\")).unwrap(), &Value::Null);",
          "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(&String::from(\"key1\"))));"
        ],
        "code": [
          "{",
          "    let mut v = Value::Object(Map::with_capacity(1));",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Object(map) if map.len() == 1));",
          "    assert!(v.get(&String::from(\"key1\")).is_some());",
          "    assert_eq!(v.get(&String::from(\"key1\")).unwrap(), &Value::Null);",
          "    assert!(matches!(v, Value::Object(ref map) if map.contains_key(&String::from(\"key1\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut v = Value::Object(Map::with_capacity(5));",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    let mut v = Value::Null;",
          "    assert!(matches!(v, Value::Null));",
          "    v = Value::Object(Map::new());",
          "    let result = entry.index_or_insert(&mut v);",
          "    assert!(matches!(v, Value::Object(_)));",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(v.as_object().unwrap().contains_key(&key));",
          "    assert_eq!(v.as_object().unwrap().get(&key), Some(&Value::Null));"
        ],
        "code": [
          "{",
          "    let mut v = Value::Object(Map::with_capacity(5));",
          "    let key = String::from(\"key1\");",
          "    let entry = &key;",
          "    let result = entry.index_or_insert(&mut v);",
          "    let mut v = Value::Null;",
          "    assert!(matches!(v, Value::Null));",
          "    v = Value::Object(Map::new());",
          "    let result = entry.index_or_insert(&mut v);",
          "    assert!(matches!(v, Value::Object(_)));",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(v.as_object().unwrap().contains_key(&key));",
          "    assert_eq!(v.as_object().unwrap().get(&key), Some(&Value::Null));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]