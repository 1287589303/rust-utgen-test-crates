[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Bool(true);",
          "    let result = key.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Bool(true);",
          "    let result = key.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Bool(true)));",
          "    assert!(matches!(result, &mut Value::Null));",
          "    assert!(std::panic::catch_unwind(|| key.index_or_insert(&mut v)).is_err());"
        ],
        "code": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Bool(true);",
          "    let result = key.index_or_insert(&mut v);",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Bool(true);",
          "    let result = key.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Bool(true)));",
          "    assert!(matches!(result, &mut Value::Null));",
          "    assert!(std::panic::catch_unwind(|| key.index_or_insert(&mut v)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Number(Number::from(42));",
          "    let result = key.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, &mut Value::Number(Number::from(42))));",
          "    assert_eq!(v, Value::Number(Number::from(42)));",
          "    assert!(v.is_number());",
          "    assert!(matches!(v, Value::Number(_)));"
        ],
        "code": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Number(Number::from(42));",
          "    let result = key.index_or_insert(&mut v);",
          "    assert!(matches!(result, &mut Value::Number(Number::from(42))));",
          "    assert_eq!(v, Value::Number(Number::from(42)));",
          "    assert!(v.is_number());",
          "    assert!(matches!(v, Value::Number(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::String(String::from(\"test_value\"));",
          "    let result = key.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::String(_)));",
          "    assert!(v != Value::Null);",
          "    assert!(v.is_string());",
          "    assert!(v.to_string() == \"test_value\");"
        ],
        "code": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::String(String::from(\"test_value\"));",
          "    let result = key.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::String(_)));",
          "    assert!(v != Value::Null);",
          "    assert!(v.is_string());",
          "    assert!(v.to_string() == \"test_value\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
          "    let result = key.index_or_insert(&mut v);",
          "}"
        ],
        "oracle": [
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
          "    let result = key.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Array(_)));",
          "    assert!(v.is_empty());"
        ],
        "code": [
          "{",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
          "    let result = key.index_or_insert(&mut v);",
          "    let key = String::from(\"test_key\");",
          "    let mut v = Value::Array(vec![Value::String(String::from(\"item1\"))]);",
          "    let result = key.index_or_insert(&mut v);",
          "    assert_eq!(result, &mut Value::Null);",
          "    assert!(matches!(v, Value::Array(_)));",
          "    assert!(v.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]