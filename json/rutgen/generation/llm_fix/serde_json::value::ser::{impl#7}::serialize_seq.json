{
  "name": "serde_json::value::ser::{impl#7}::serialize_seq",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:598:5:600:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "_test input conditions or ranges: any input for _len (e.g., None, Some(0), Some(1), Some(usize::MAX)) since all should return Err(key_must_be_a_string())_\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(None);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(Some(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(Some(0));",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(Some(1));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(Some(1));",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(Some(usize::MAX));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_seq(Some(usize::MAX));",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}