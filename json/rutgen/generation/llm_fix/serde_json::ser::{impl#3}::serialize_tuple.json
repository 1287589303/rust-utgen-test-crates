{
  "name": "serde_json::ser::{impl#3}::serialize_tuple",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:305:5:307:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "len: 0 to maximum allowed usize value (inclusive) for valid tuples; invalid tuples should test negative values or out-of-bounds counts.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriterMock;",
                "    ",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().is_empty());",
                "    assert_eq!(serializer.writer.byte_offset(), 0);",
                "    assert_eq!(serializer.remaining_depth, 0);",
                "    assert!(serializer.formatter.state.is_first());"
              ],
              "code": [
                "{",
                "    struct WriterMock;",
                "    ",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(0);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().is_empty());",
                "    assert_eq!(serializer.writer.byte_offset(), 0);",
                "    assert_eq!(serializer.remaining_depth, 0);",
                "    assert!(serializer.formatter.state.is_first());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriterMock;",
                "",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(writer.bytes_written(), 2);",
                "    assert!(serializer.state == SerializerState::First);",
                "    assert!(serializer.remaining_depth == 0);",
                "    assert!(serializer.scratch.is_empty());"
              ],
              "code": [
                "{",
                "    struct WriterMock;",
                "",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(writer.bytes_written(), 2);",
                "    assert!(serializer.state == SerializerState::First);",
                "    assert!(serializer.remaining_depth == 0);",
                "    assert!(serializer.scratch.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriterMock;",
                "    ",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Compound::Map { ser: serializer, state: State::First });",
                "    assert_eq!(serializer.writer.byte_offset(), 0);"
              ],
              "code": [
                "{",
                "    struct WriterMock;",
                "    ",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(usize::MAX);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Compound::Map { ser: serializer, state: State::First });",
                "    assert_eq!(serializer.writer.byte_offset(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct WriterMock;",
                "",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(usize::MAX + 1); // Out of bounds.",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().code(), ErrorCode::OutOfBounds);",
                "    assert!(result.unwrap_err().message().contains(\"tuple length\"));",
                "    assert!(result.unwrap_err().message().contains(\"size exceeds maximum allowed\"));",
                "    assert!(result.unwrap_err().is_kind(ErrorKind::InvalidInput));"
              ],
              "code": [
                "{",
                "    struct WriterMock;",
                "",
                "    impl io::Write for WriterMock {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> { Ok(buf.len()) }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> { Ok(()) }",
                "        fn flush(&mut self) -> Result<()> { Ok(()) }",
                "    }",
                "",
                "    let writer = WriterMock;",
                "    let serializer = Serializer::new(writer);",
                "    let result = serializer.serialize_tuple(usize::MAX + 1); // Out of bounds.",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().code(), ErrorCode::OutOfBounds);",
                "    assert!(result.unwrap_err().message().contains(\"tuple length\"));",
                "    assert!(result.unwrap_err().message().contains(\"size exceeds maximum allowed\"));",
                "    assert!(result.unwrap_err().is_kind(ErrorKind::InvalidInput));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}