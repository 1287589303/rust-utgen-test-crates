{
  "name": "serde_json::value::ser::{impl#1}::serialize_tuple_struct",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:243:5:249:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "_len: 0 to UINT_MAX valid integer values, where UINT_MAX represents the maximum capacity for usize on the platform; _name: any valid static string slice but not empty or null.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", 0);",
                "}"
              ],
              "oracle": [
                "    let expected_result = Ok(SerializeVec { vec: Vec::with_capacity(0) });",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", 0);",
                "    let expected_result = Ok(SerializeVec { vec: Vec::with_capacity(0) });",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", 1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().len(), 1);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", 1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", usize::MAX);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", usize::MAX);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().code(), ErrorCode::Overflow);",
                "    assert_eq!(result.err().unwrap().description(), \"The size exceeded the maximum limit.\");"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", usize::MAX);",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", usize::MAX);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().code(), ErrorCode::Overflow);",
                "    assert_eq!(result.err().unwrap().description(), \"The size exceeded the maximum limit.\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let lengths = [2, 10, 100];",
                "    for &len in &lengths {",
                "        let result = serializer.serialize_tuple_struct(\"test_variant\", len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let lengths = [2, 10, 100];",
                "    for &len in &lengths {",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", len);",
                "    assert!(result.is_ok());",
                "    let value = result.unwrap();",
                "    assert!(matches!(value, SerializeVec { .. }));",
                "    assert_eq!(value.len(), len);",
                "    }"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let lengths = [2, 10, 100];",
                "    for &len in &lengths {",
                "        let result = serializer.serialize_tuple_struct(\"test_variant\", len);",
                "    }",
                "    let serializer = Serializer;",
                "    let lengths = [2, 10, 100];",
                "    for &len in &lengths {",
                "    let result = serializer.serialize_tuple_struct(\"test_variant\", len);",
                "    assert!(result.is_ok());",
                "    let value = result.unwrap();",
                "    assert!(matches!(value, SerializeVec { .. }));",
                "    assert_eq!(value.len(), len);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}