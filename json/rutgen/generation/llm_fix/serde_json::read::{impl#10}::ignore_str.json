{
  "name": "serde_json::read::{impl#10}::ignore_str",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": true,
  "loc": "src/read.rs:725:5:727:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "delegate must be a valid SliceRead instance with a non-empty slice, and the index must be within bounds of the slice.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"valid input\";",
                "    let mut delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "",
                "    let mut read = StrRead {",
                "        delegate,",
                "        #[cfg(feature = \"raw_value\")]",
                "        data: \"valid input\",",
                "    };",
                "",
                "    let result = read.ignore_str();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(read.delegate.index, 10);",
                "    assert_eq!(read.delegate.slice, b\"valid input\");",
                "    #[cfg(feature = \"raw_value\")] assert_eq!(read.data, \"valid input\");"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"valid input\";",
                "    let mut delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "",
                "    let mut read = StrRead {",
                "        delegate,",
                "        #[cfg(feature = \"raw_value\")]",
                "        data: \"valid input\",",
                "    };",
                "",
                "    let result = read.ignore_str();",
                "    assert!(result.is_ok());",
                "    assert_eq!(read.delegate.index, 10);",
                "    assert_eq!(read.delegate.slice, b\"valid input\");",
                "    #[cfg(feature = \"raw_value\")] assert_eq!(read.data, \"valid input\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"another valid input\";",
                "    let mut delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "",
                "    let mut read = StrRead {",
                "        delegate,",
                "        #[cfg(feature = \"raw_value\")]",
                "        data: \"another valid input\",",
                "    };",
                "",
                "    let result = read.ignore_str();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(read.delegate.index, 0);",
                "    assert_eq!(read.data, \"another valid input\");"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"another valid input\";",
                "    let mut delegate = SliceRead {",
                "        slice,",
                "        index: 0,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "",
                "    let mut read = StrRead {",
                "        delegate,",
                "        #[cfg(feature = \"raw_value\")]",
                "        data: \"another valid input\",",
                "    };",
                "",
                "    let result = read.ignore_str();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(read.delegate.index, 0);",
                "    assert_eq!(read.data, \"another valid input\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = b\"more valid input\";",
                "    let mut delegate = SliceRead {",
                "        slice,",
                "        index: 5,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "",
                "    let mut read = StrRead {",
                "        delegate,",
                "        #[cfg(feature = \"raw_value\")]",
                "        data: \"more valid input\",",
                "    };",
                "",
                "    let result = read.ignore_str();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(read.delegate.index, 6);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = b\"more valid input\";",
                "    let mut delegate = SliceRead {",
                "        slice,",
                "        index: 5,",
                "        #[cfg(feature = \"raw_value\")]",
                "        raw_buffering_start_index: 0,",
                "    };",
                "",
                "    let mut read = StrRead {",
                "        delegate,",
                "        #[cfg(feature = \"raw_value\")]",
                "        data: \"more valid input\",",
                "    };",
                "",
                "    let result = read.ignore_str();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(read.delegate.index, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}