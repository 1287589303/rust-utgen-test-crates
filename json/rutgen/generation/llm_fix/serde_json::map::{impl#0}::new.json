{
  "name": "serde_json::map::{impl#0}::new",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:41:5:45:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Map {\n            map: MapImpl::new(),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: test with feature \"preserve_order\" enabled and disabled, ensure map is initialized without any entries, validate the type returned is Map<K, V> with a capacity of 0.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: Map<String, Value> = Map::new();",
                "}"
              ],
              "oracle": [
                "    let map: Map<String, Value> = Map::new();",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.map, MapImpl::new());"
              ],
              "code": [
                "{",
                "    let map: Map<String, Value> = Map::new();",
                "    let map: Map<String, Value> = Map::new();",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.map, MapImpl::new());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[cfg(feature = \"preserve_order\")]"
              ],
              "prefix": [
                "{",
                "    let map: Map<String, Value> = Map::new();",
                "}"
              ],
              "oracle": [
                "    let map: Map<String, Value> = Map::new();",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.len(), 0);",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.is_empty());",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.len() == 0);"
              ],
              "code": [
                "{",
                "    let map: Map<String, Value> = Map::new();",
                "    let map: Map<String, Value> = Map::new();",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.len(), 0);",
                "    #[cfg(not(feature = \"preserve_order\"))]",
                "    assert!(map.map.is_empty());",
                "    #[cfg(feature = \"preserve_order\")]",
                "    assert!(map.map.len() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}