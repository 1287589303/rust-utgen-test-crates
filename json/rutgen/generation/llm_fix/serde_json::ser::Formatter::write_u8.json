{
  "name": "serde_json::ser::Formatter::write_u8",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1637:5:1644:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "value: u8 in the range 0 to 255 inclusive, writer must implement io::Write trait and not be null\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"255\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 128;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 64;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"64\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"255\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 128;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 64;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"64\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"255\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 127;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"127\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 128;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"255\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 127;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"127\");",
                "    ",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 128;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"255\");",
                "    let value: u8 = 0;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    let value: u8 = 128;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");",
                "    let value: u8 = 10;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"10\");",
                "    let value: u8 = 1;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    let value: u8 = 2;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"2\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"255\");",
                "    let value: u8 = 0;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"0\");",
                "    let value: u8 = 128;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");",
                "    let value: u8 = 10;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"10\");",
                "    let value: u8 = 1;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1\");",
                "    let value: u8 = 2;",
                "    writer.output.clear();",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"2\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 128;",
                "    writer.write_u8(value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.output, b\"128\");",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1280\");",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1280255\");",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"12802551\");",
                "    let value: u8 = 100;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"12802551100\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut writer = TestWriter { output: Vec::new() };",
                "    let value: u8 = 128;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"128\");",
                "    let value: u8 = 0;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1280\");",
                "    let value: u8 = 255;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"1280255\");",
                "    let value: u8 = 1;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"12802551\");",
                "    let value: u8 = 100;",
                "    writer.write_u8(value).unwrap();",
                "    assert_eq!(writer.output, b\"12802551100\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}