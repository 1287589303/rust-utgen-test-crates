{
  "name": "serde_json::ser::float_key_must_be_finite",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": false,
  "loc": "src/ser.rs:789:1:791:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions or ranges: call the function `float_key_must_be_finite()` with expected return value of type `Error` containing `ErrorCode::FloatKeyMustBeFinite`, line number `0`, and column number `0`\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = float_key_must_be_finite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert_eq!(error.err.line, 0);",
                "    assert_eq!(error.err.column, 0);"
              ],
              "code": [
                "{",
                "    let error = float_key_must_be_finite();",
                "    assert_eq!(error.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert_eq!(error.err.line, 0);",
                "    assert_eq!(error.err.column, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = float_key_must_be_finite();",
                "    // Checking internal state can be done here in real tests",
                "}"
              ],
              "oracle": [
                "    let error = float_key_must_be_finite();",
                "    assert_eq!(error.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert_eq!(error.err.line, 0);",
                "    assert_eq!(error.err.column, 0);"
              ],
              "code": [
                "{",
                "    let error = float_key_must_be_finite();",
                "    // Checking internal state can be done here in real tests",
                "    let error = float_key_must_be_finite();",
                "    assert_eq!(error.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert_eq!(error.err.line, 0);",
                "    assert_eq!(error.err.column, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}