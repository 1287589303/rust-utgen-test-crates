{
  "name": "serde_json::ser::{impl#11}::serialize_bytes",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1065:5:1067:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "Input: any non-string byte array (e.g., empty array, single byte, multiple bytes)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[]);",
                "}"
              ],
              "oracle": [
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[]);",
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[]);",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[]);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[1]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[1]);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[1, 2, 3, 4, 5]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let writer = Vec::new();",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { writer, formatter: CompactFormatter } };",
                "    let result = serializer.serialize_bytes(&[1, 2, 3, 4, 5]);",
                "    assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}