{
  "name": "serde_json::value::ser::{impl#1}::serialize_bytes",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:172:5:175:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Value::Array(vec))\n"
      ],
      "input_infer": "valid byte array: [0, 255], empty byte array: [], single byte array: [42], maximum byte array: [u8::MAX]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[];",
                "    let _ = serializer.serialize_bytes(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Value::Array(Vec::new())));",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3]), Ok(Value::Array(vec![Value::Number(1.into()), Value::Number(2.into()), Value::Number(3.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]), Ok(Value::Array(vec![Value::Number(255.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 127, 255]), Ok(Value::Array(vec![Value::Number(0.into()), Value::Number(127.into()), Value::Number(255.into())])));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[];",
                "    let _ = serializer.serialize_bytes(value);",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Value::Array(Vec::new())));",
                "    assert_eq!(serializer.serialize_bytes(&[1, 2, 3]), Ok(Value::Array(vec![Value::Number(1.into()), Value::Number(2.into()), Value::Number(3.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]), Ok(Value::Array(vec![Value::Number(255.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 127, 255]), Ok(Value::Array(vec![Value::Number(0.into()), Value::Number(127.into()), Value::Number(255.into())])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[42];",
                "    let _ = serializer.serialize_bytes(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[42]), Ok(Value::Array(vec![Value::Number(42.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Value::Array(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 1, 255]), Ok(Value::Array(vec![Value::Number(0.into()), Value::Number(1.into()), Value::Number(255.into())])));",
                "    assert!(serializer.serialize_bytes(&[u8::MAX]).is_ok());",
                "    assert!(serializer.serialize_bytes(&[u8::MIN]).is_ok());"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[42];",
                "    let _ = serializer.serialize_bytes(value);",
                "    assert_eq!(serializer.serialize_bytes(&[42]), Ok(Value::Array(vec![Value::Number(42.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[]), Ok(Value::Array(vec![])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 1, 255]), Ok(Value::Array(vec![Value::Number(0.into()), Value::Number(1.into()), Value::Number(255.into())])));",
                "    assert!(serializer.serialize_bytes(&[u8::MAX]).is_ok());",
                "    assert!(serializer.serialize_bytes(&[u8::MIN]).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[0, 255];",
                "    let _ = serializer.serialize_bytes(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_bytes(&[0]).unwrap(), Ok(Value::Array(vec![Value::Number(0.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]).unwrap(), Ok(Value::Array(vec![Value::Number(255.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 255]).unwrap(), Ok(Value::Array(vec![Value::Number(0.into()), Value::Number(255.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[]).unwrap(), Ok(Value::Array(vec![])));",
                "    assert!(serializer.serialize_bytes(&[u8::MAX + 1]).is_err());",
                "    assert!(serializer.serialize_bytes(&[u8::MIN - 1]).is_err());"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[0, 255];",
                "    let _ = serializer.serialize_bytes(value);",
                "    assert_eq!(serializer.serialize_bytes(&[0]).unwrap(), Ok(Value::Array(vec![Value::Number(0.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[255]).unwrap(), Ok(Value::Array(vec![Value::Number(255.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[0, 255]).unwrap(), Ok(Value::Array(vec![Value::Number(0.into()), Value::Number(255.into())])));",
                "    assert_eq!(serializer.serialize_bytes(&[]).unwrap(), Ok(Value::Array(vec![])));",
                "    assert!(serializer.serialize_bytes(&[u8::MAX + 1]).is_err());",
                "    assert!(serializer.serialize_bytes(&[u8::MIN - 1]).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[u8::MAX];",
                "    let _ = serializer.serialize_bytes(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[u8::MAX];",
                "    let result = serializer.serialize_bytes(value);",
                "    assert!(result.is_ok());",
                "    if let Ok(Value::Array(vec)) = result {",
                "    assert_eq!(vec.len(), 1);",
                "    assert_eq!(vec[0], Value::Number(u8::MAX.into()));",
                "    } else {",
                "    panic!(\"Expected Ok(Value::Array(vec)), got {:?}\", result);",
                "    }"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[u8::MAX];",
                "    let _ = serializer.serialize_bytes(value);",
                "    let serializer = Serializer;",
                "    let value: &[u8] = &[u8::MAX];",
                "    let result = serializer.serialize_bytes(value);",
                "    assert!(result.is_ok());",
                "    if let Ok(Value::Array(vec)) = result {",
                "    assert_eq!(vec.len(), 1);",
                "    assert_eq!(vec[0], Value::Number(u8::MAX.into()));",
                "    } else {",
                "    panic!(\"Expected Ok(Value::Array(vec)), got {:?}\", result);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}