{
  "name": "serde_json::value::ser::{impl#7}::serialize_f64",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:540:5:546:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value.is_finite() at line 541 is true\n",
        "expected return value/type: Ok(ryu::Buffer::new().format_finite(value).to_owned())\n"
      ],
      "input_infer": "valid finite f64 values ranging from -1.7976931348623157E+308 to 1.7976931348623157E+308 excluding NaN and infinities\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(1.7976931348623157E+308);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(1.7976931348623157E+308).to_owned());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(1.7976931348623157E+308);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(1.7976931348623157E+308).to_owned());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(123.456);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(123.456).to_owned());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(123.456);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(123.456).to_owned());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(-1.7976931348623157E+308);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-1.7976931348623157E+308).to_owned());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(-1.7976931348623157E+308);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-1.7976931348623157E+308).to_owned());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(-123.456);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-123.456).to_owned());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(-123.456);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ryu::Buffer::new().format_finite(-123.456).to_owned());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(0.0);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(0.0);",
                "    assert_eq!(result, Ok(ryu::Buffer::new().format_finite(0.0).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(0.0);",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(0.0);",
                "    assert_eq!(result, Ok(ryu::Buffer::new().format_finite(0.0).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value.is_finite() at line 541 is false\n",
        "expected return value/type: Err(float_key_must_be_finite())\n"
      ],
      "input_infer": "value: NaN, value: positive infinity, value: negative infinity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::NAN);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::NAN);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(float_key_must_be_finite()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::NAN);",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::NAN);",
                "    assert!(result.is_err());",
                "    assert_eq!(result, Err(float_key_must_be_finite()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::INFINITY);",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let result = serializer.serialize_f64(f64::NEG_INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), float_key_must_be_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}