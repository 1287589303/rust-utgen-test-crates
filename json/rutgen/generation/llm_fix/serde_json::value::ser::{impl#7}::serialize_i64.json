{
  "name": "serde_json::value::ser::{impl#7}::serialize_i64",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:504:5:506:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(itoa::Buffer::new().format(value).to_owned())\n"
      ],
      "input_infer": "i64 values including edge cases: -2^63, -1, 0, 1, 2^63-1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = i64::MIN;",
                "    let _result = serializer.serialize_i64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(i64::MIN).to_owned()));",
                "    let value: i64 = -1;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(-1).to_owned()));",
                "    let value: i64 = 0;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(0).to_owned()));",
                "    let value: i64 = 1;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(1).to_owned()));",
                "    let value: i64 = i64::MAX;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(i64::MAX).to_owned()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = i64::MIN;",
                "    let _result = serializer.serialize_i64(value);",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(i64::MIN).to_owned()));",
                "    let value: i64 = -1;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(-1).to_owned()));",
                "    let value: i64 = 0;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(0).to_owned()));",
                "    let value: i64 = 1;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(1).to_owned()));",
                "    let value: i64 = i64::MAX;",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(i64::MAX).to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = -1;",
                "    let _result = serializer.serialize_i64(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = -1;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = 0;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = 1;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = 100;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = i64::MAX;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = i64::MIN;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = -1;",
                "    let _result = serializer.serialize_i64(value);",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = -1;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = 0;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = 1;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = 100;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = i64::MAX;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "    ",
                "    let value: i64 = i64::MIN;",
                "    let expected_result = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 0;",
                "    let _result = serializer.serialize_i64(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 0;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = 1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = -1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MAX;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MIN;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 0;",
                "    let _result = serializer.serialize_i64(value);",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 0;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = 1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = -1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MAX;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MIN;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 1;",
                "    let _result = serializer.serialize_i64(value);",
                "}"
              ],
              "oracle": [
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = 0;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = -1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MAX;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MIN;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 1;",
                "    let _result = serializer.serialize_i64(value);",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = 1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = 0;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = -1;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MAX;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "    ",
                "    let value: i64 = i64::MIN;",
                "    let expected = Ok(itoa::Buffer::new().format(value).to_owned());",
                "    assert_eq!(serializer.serialize_i64(value), expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = i64::MAX;",
                "    let _result = serializer.serialize_i64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "    assert!(matches!(_result, Ok(_)));",
                "    assert!(matches!(_result, Err(_)) == false);",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert_eq!(_result.is_err(), false);",
                "    assert_eq!(_result.unwrap(), itoa::Buffer::new().format(value).to_owned());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let value: i64 = i64::MAX;",
                "    let _result = serializer.serialize_i64(value);",
                "    assert_eq!(_result, Ok(itoa::Buffer::new().format(value).to_owned()));",
                "    assert!(matches!(_result, Ok(_)));",
                "    assert!(matches!(_result, Err(_)) == false);",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert_eq!(_result.is_err(), false);",
                "    assert_eq!(_result.unwrap(), itoa::Buffer::new().format(value).to_owned());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}