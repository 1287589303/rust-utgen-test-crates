{
  "name": "serde_json::value::de::{impl#27}::struct_variant",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:1487:5:1499:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(de::Error::invalid_type(\n            Unexpected::UnitVariant,\n            &\"struct variant\",\n        ))\n"
      ],
      "input_infer": "Test input conditions: Any value for `_fields` that is a static array of string slices and any struct implementing `de::Visitor<'de>` for `_visitor`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(_result, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"field1\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"field1\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(_result, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"field1\", \"field2\", \"field3\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "}"
              ],
              "oracle": [
                "    let expected_error = de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\");",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"field1\", \"field2\", \"field3\"];",
                "    let visitor = DummyVisitor;",
                "    let result = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(result, Err(expected_error));"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"field1\", \"field2\", \"field3\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "    let expected_error = de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\");",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"field1\", \"field2\", \"field3\"];",
                "    let visitor = DummyVisitor;",
                "    let result = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(result, Err(expected_error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"name\", \"age\", \"address\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"name\", \"age\", \"address\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(_result, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"foo\", \"bar\", \"baz\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "}"
              ],
              "oracle": [
                "    let fields: &[&str] = &[\"foo\", \"bar\", \"baz\"];",
                "    let error = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(error, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));"
              ],
              "code": [
                "{",
                "    struct DummyVisitor;",
                "",
                "    impl<'de> de::Visitor<'de> for DummyVisitor {",
                "        type Value = ();",
                "",
                "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
                "            formatter.write_str(\"dummy visitor\")",
                "        }",
                "",
                "        fn visit_unit<E>(self) -> Result<Self::Value, E> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let variant_access = UnitOnly {};",
                "    let fields: &[&str] = &[\"foo\", \"bar\", \"baz\"];",
                "    let visitor = DummyVisitor;",
                "",
                "    let _result = variant_access.struct_variant(fields, visitor);",
                "    let fields: &[&str] = &[\"foo\", \"bar\", \"baz\"];",
                "    let error = variant_access.struct_variant(fields, visitor);",
                "    assert_eq!(error, Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}