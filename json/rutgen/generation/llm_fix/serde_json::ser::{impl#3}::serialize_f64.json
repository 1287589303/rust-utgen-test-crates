{
  "name": "serde_json::ser::{impl#3}::serialize_f64",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:167:5:178:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value.classify() matches FpCategory::Nan at line 169 is false\n",
        "precondition: value.classify() matches _ at line 173 is true\n",
        "precondition: value.classify() matches FpCategory::Infinite at line 169 is false\n"
      ],
      "input_infer": "Test input conditions or ranges for the `serialize_f64` function: value must be a finite floating-point number (not NaN or Infinity). Valid values include any `f64` in the range of approximately -1.7976931348623157E+308 to 1.7976931348623157E+308, excluding NaN and Â±Infinity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = -123.456;",
                "    serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, expected_writer_output);",
                "    assert!(formatter.write_f64_called);",
                "    assert_eq!(formatter.last_written_value, value);"
              ],
              "code": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = -123.456;",
                "    serializer.serialize_f64(value);",
                "    assert_eq!(writer, expected_writer_output);",
                "    assert!(formatter.write_f64_called);",
                "    assert_eq!(formatter.last_written_value, value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = 0.0;",
                "    serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.len(), 0);",
                "    assert!(writer.is_empty());",
                "    assert!(formatter.write_f64_called());",
                "    assert_eq!(formatter.write_f64_value(), 0.0);",
                "    assert!(formatter.write_null_called() == false);"
              ],
              "code": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = 0.0;",
                "    serializer.serialize_f64(value);",
                "    assert_eq!(writer.len(), 0);",
                "    assert!(writer.is_empty());",
                "    assert!(formatter.write_f64_called());",
                "    assert_eq!(formatter.write_f64_value(), 0.0);",
                "    assert!(formatter.write_null_called() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = 123.456;",
                "    serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.len(), expected_length_after_serialization);",
                "    assert_eq!(formatter.calls, expected_formatter_calls);",
                "    assert!(writer.starts_with(&expected_output));",
                "    assert!(formatter.last_written_value.is_some());",
                "    assert_eq!(formatter.last_written_value.unwrap(), value);",
                "    assert!(formatter.last_write_success);",
                "    assert_eq!(serializer.writer.byte_offset(), expected_byte_offset);",
                "    assert!(!serializer.writer.has_error());",
                "    assert!(serializer.remaining_depth < MAX_DEPTH);"
              ],
              "code": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = 123.456;",
                "    serializer.serialize_f64(value);",
                "    assert_eq!(writer.len(), expected_length_after_serialization);",
                "    assert_eq!(formatter.calls, expected_formatter_calls);",
                "    assert!(writer.starts_with(&expected_output));",
                "    assert!(formatter.last_written_value.is_some());",
                "    assert_eq!(formatter.last_written_value.unwrap(), value);",
                "    assert!(formatter.last_write_success);",
                "    assert_eq!(serializer.writer.byte_offset(), expected_byte_offset);",
                "    assert!(!serializer.writer.has_error());",
                "    assert!(serializer.remaining_depth < MAX_DEPTH);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = 1.7976931348623157E+308; // MAX value",
                "    serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.len(), 0);",
                "    assert!(formatter.write_f64_called);",
                "    assert!(formatter.last_written_value.is_some());",
                "    assert!((formatter.last_written_value.unwrap() - 1.7976931348623157E+308).abs() < f64::EPSILON);"
              ],
              "code": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = 1.7976931348623157E+308; // MAX value",
                "    serializer.serialize_f64(value);",
                "    assert_eq!(writer.len(), 0);",
                "    assert!(formatter.write_f64_called);",
                "    assert!(formatter.last_written_value.is_some());",
                "    assert!((formatter.last_written_value.unwrap() - 1.7976931348623157E+308).abs() < f64::EPSILON);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = -1.7976931348623157E+308; // MIN value",
                "    serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.len(), expected_length);",
                "    assert_eq!(formatter.has_written_null(), false);",
                "    assert_eq!(formatter.last_written_f64(), Some(-1.7976931348623157E+308));"
              ],
              "code": [
                "{",
                "    let mut writer = Vec::new();",
                "    let mut formatter = MockFormatter::new();",
                "    let serializer = Serializer { writer: &mut writer, formatter };",
                "",
                "    let value: f64 = -1.7976931348623157E+308; // MIN value",
                "    serializer.serialize_f64(value);",
                "    assert_eq!(writer.len(), expected_length);",
                "    assert_eq!(formatter.has_written_null(), false);",
                "    assert_eq!(formatter.last_written_f64(), Some(-1.7976931348623157E+308));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value.classify() matches FpCategory::Infinite at line 168 is true\n",
        "precondition: value.classify() matches FpCategory::Nan or FpCategory::Infinite at line 168 is true\n"
      ],
      "input_infer": "f64 value: NaN, positive infinity, negative infinity, and finite values such as -1.0, 0.0, and 1.0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    impl TestFormatter {",
                "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestSerializer {",
                "        writer: Vec<u8>,",
                "        formatter: TestFormatter,",
                "    }",
                "",
                "    impl TestSerializer {",
                "        fn new() -> Self {",
                "            Self {",
                "                writer: Vec::new(),",
                "                formatter: TestFormatter,",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::NAN;",
                "    let _ = serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::INFINITY;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::NAN;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    impl TestFormatter {",
                "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestSerializer {",
                "        writer: Vec<u8>,",
                "        formatter: TestFormatter,",
                "    }",
                "",
                "    impl TestSerializer {",
                "        fn new() -> Self {",
                "            Self {",
                "                writer: Vec::new(),",
                "                formatter: TestFormatter,",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::NAN;",
                "    let _ = serializer.serialize_f64(value);",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::INFINITY;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::NAN;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    impl TestFormatter {",
                "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestSerializer {",
                "        writer: Vec<u8>,",
                "        formatter: TestFormatter,",
                "    }",
                "",
                "    impl TestSerializer {",
                "        fn new() -> Self {",
                "            Self {",
                "                writer: Vec::new(),",
                "                formatter: TestFormatter,",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::INFINITY;",
                "    let _ = serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    let value = f64::INFINITY;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "    ",
                "    let value = f64::NAN;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "    ",
                "    let value = 1.0;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    assert!(serializer.writer.len() > 0);"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    impl TestFormatter {",
                "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestSerializer {",
                "        writer: Vec<u8>,",
                "        formatter: TestFormatter,",
                "    }",
                "",
                "    impl TestSerializer {",
                "        fn new() -> Self {",
                "            Self {",
                "                writer: Vec::new(),",
                "                formatter: TestFormatter,",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::INFINITY;",
                "    let _ = serializer.serialize_f64(value);",
                "    let value = f64::INFINITY;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "    ",
                "    let value = f64::NAN;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "    ",
                "    let value = 1.0;",
                "    let result = serializer.serialize_f64(value);",
                "    assert!(result.is_ok());",
                "    assert!(serializer.writer.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    impl TestFormatter {",
                "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestSerializer {",
                "        writer: Vec<u8>,",
                "        formatter: TestFormatter,",
                "    }",
                "",
                "    impl TestSerializer {",
                "        fn new() -> Self {",
                "            Self {",
                "                writer: Vec::new(),",
                "                formatter: TestFormatter,",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::NEG_INFINITY;",
                "    let _ = serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer.len(), 0); // Check writer is empty after processing -INFINITY",
                "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for -INFINITY",
                "    let value = f64::INFINITY;",
                "    let _ = serializer.serialize_f64(value);",
                "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing INFINITY",
                "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for INFINITY",
                "    let value = f64::NAN;",
                "    let _ = serializer.serialize_f64(value);",
                "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing NaN",
                "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for NaN"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    impl TestFormatter {",
                "        fn write_null(&mut self, writer: &mut dyn io::Write) -> Result<()> {",
                "            Ok(())",
                "        }",
                "",
                "        fn write_f64(&mut self, writer: &mut dyn io::Write, _value: f64) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct TestSerializer {",
                "        writer: Vec<u8>,",
                "        formatter: TestFormatter,",
                "    }",
                "",
                "    impl TestSerializer {",
                "        fn new() -> Self {",
                "            Self {",
                "                writer: Vec::new(),",
                "                formatter: TestFormatter,",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut serializer = TestSerializer::new();",
                "    let value = f64::NEG_INFINITY;",
                "    let _ = serializer.serialize_f64(value);",
                "    assert_eq!(serializer.writer.len(), 0); // Check writer is empty after processing -INFINITY",
                "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for -INFINITY",
                "    let value = f64::INFINITY;",
                "    let _ = serializer.serialize_f64(value);",
                "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing INFINITY",
                "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for INFINITY",
                "    let value = f64::NAN;",
                "    let _ = serializer.serialize_f64(value);",
                "    assert_eq!(serializer.writer.len(), 0); // Check writer is still empty after processing NaN",
                "    assert!(serializer.formatter.write_null_called); // Validate write_null was called for NaN",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: value.classify() matches FpCategory::Nan at line 168 is true\n",
        "precondition: value.classify() matches FpCategory::Nan or FpCategory::Infinite at line 168 is true\n"
      ],
      "input_infer": "value: f64 = { NaN, Infinity, -Infinity }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value = f64::NAN;",
                "",
                "    let _ = serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value_nan = f64::NAN;",
                "    let value_infinite = f64::INFINITY;",
                "    let result_nan = serializer.serialize_f64(value_nan);",
                "    let result_infinite = serializer.serialize_f64(value_infinite);",
                "    assert!(result_nan.is_ok());",
                "    assert!(result_infinite.is_ok());",
                "    assert_eq!(serializer.writer.len(), 0);"
              ],
              "code": [
                "{",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value = f64::NAN;",
                "",
                "    let _ = serializer.serialize_f64(value);",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value_nan = f64::NAN;",
                "    let value_infinite = f64::INFINITY;",
                "    let result_nan = serializer.serialize_f64(value_nan);",
                "    let result_infinite = serializer.serialize_f64(value_infinite);",
                "    assert!(result_nan.is_ok());",
                "    assert!(result_infinite.is_ok());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value = f64::INFINITY;",
                "",
                "    let _ = serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert!(serializer.writer.is_empty());",
                "    assert_eq!(_err, Some(expected_error));",
                "    assert!(serializer.writer.is_empty());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "    let value_nan = f64::NAN;",
                "    let value_infinity = f64::INFINITY;",
                "    let value_neg_infinity = f64::NEG_INFINITY;",
                "    let _ = serializer.serialize_f64(value_nan);",
                "    assert_eq!(serializer.writer.len(), expected_length_after_nan);",
                "    let _ = serializer.serialize_f64(value_infinity);",
                "    assert_eq!(serializer.writer.len(), expected_length_after_infinity);",
                "    let _ = serializer.serialize_f64(value_neg_infinity);",
                "    assert_eq!(serializer.writer.len(), expected_length_after_neg_infinity);"
              ],
              "code": [
                "{",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value = f64::INFINITY;",
                "",
                "    let _ = serializer.serialize_f64(value);",
                "    assert!(serializer.writer.is_empty());",
                "    assert_eq!(_err, Some(expected_error));",
                "    assert!(serializer.writer.is_empty());",
                "    assert_eq!(serializer.writer.len(), 0);",
                "    let value_nan = f64::NAN;",
                "    let value_infinity = f64::INFINITY;",
                "    let value_neg_infinity = f64::NEG_INFINITY;",
                "    let _ = serializer.serialize_f64(value_nan);",
                "    assert_eq!(serializer.writer.len(), expected_length_after_nan);",
                "    let _ = serializer.serialize_f64(value_infinity);",
                "    assert_eq!(serializer.writer.len(), expected_length_after_infinity);",
                "    let _ = serializer.serialize_f64(value_neg_infinity);",
                "    assert_eq!(serializer.writer.len(), expected_length_after_neg_infinity);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value = f64::NEG_INFINITY;",
                "",
                "    let _ = serializer.serialize_f64(value);",
                "}"
              ],
              "oracle": [
                "    assert!(serializer.writer.is_empty());",
                "    assert!(matches!(serializer.formatter.write_null(&mut serializer.writer), Ok(())));",
                "    assert!(serializer.writer.is_empty()); // Check that no data is written for NaN or Infinite value."
              ],
              "code": [
                "{",
                "    let writer = Vec::new();",
                "    let formatter = CompactFormatter::new();",
                "    let mut serializer = Serializer { writer, formatter };",
                "    let value = f64::NEG_INFINITY;",
                "",
                "    let _ = serializer.serialize_f64(value);",
                "    assert!(serializer.writer.is_empty());",
                "    assert!(matches!(serializer.formatter.write_null(&mut serializer.writer), Ok(())));",
                "    assert!(serializer.writer.is_empty()); // Check that no data is written for NaN or Infinite value.",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}