{
  "name": "serde_json::value::ser::{impl#1}::serialize_f32",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:151:5:153:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(Value::from(float))\n"
      ],
      "input_infer": "float input range: float values including positive/negative infinity, NaN, typical range (-3.4028235e38 to 3.4028235e38), edge cases such as 0.0, and values close to the limits of f32 representation\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::NEG_INFINITY)));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(1.5);",
                "    assert_eq!(result, Ok(Value::from(1.5)));",
                "    let result = serializer.serialize_f32(-1.5);",
                "    assert_eq!(result, Ok(Value::from(-1.5)));",
                "    let result = serializer.serialize_f32(3.14);",
                "    assert_eq!(result, Ok(Value::from(3.14)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert_eq!(result, Ok(Value::from(f32::NAN)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::NEG_INFINITY)));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(1.5);",
                "    assert_eq!(result, Ok(Value::from(1.5)));",
                "    let result = serializer.serialize_f32(-1.5);",
                "    assert_eq!(result, Ok(Value::from(-1.5)));",
                "    let result = serializer.serialize_f32(3.14);",
                "    assert_eq!(result, Ok(Value::from(3.14)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert_eq!(result, Ok(Value::from(f32::NAN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::from(f32::NEG_INFINITY)));",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_err());",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(12.34);",
                "    assert_eq!(result, Ok(Value::from(12.34)));",
                "    let result = serializer.serialize_f32(-12.34);",
                "    assert_eq!(result, Ok(Value::from(-12.34)));",
                "    let result = serializer.serialize_f32(f32::MAX);",
                "    assert_eq!(result, Ok(Value::from(f32::MAX)));",
                "    let result = serializer.serialize_f32(f32::MIN);",
                "    assert_eq!(result, Ok(Value::from(f32::MIN)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::NEG_INFINITY)));",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_err());",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(12.34);",
                "    assert_eq!(result, Ok(Value::from(12.34)));",
                "    let result = serializer.serialize_f32(-12.34);",
                "    assert_eq!(result, Ok(Value::from(-12.34)));",
                "    let result = serializer.serialize_f32(f32::MAX);",
                "    assert_eq!(result, Ok(Value::from(f32::MAX)));",
                "    let result = serializer.serialize_f32(f32::MIN);",
                "    assert_eq!(result, Ok(Value::from(f32::MIN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(f32::INFINITY));",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(f32::NEG_INFINITY));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(0.0));",
                "    let result = serializer.serialize_f32(12.5);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(12.5));",
                "    let result = serializer.serialize_f32(-12.5);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(-12.5));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_err());",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(f32::INFINITY));",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(f32::NEG_INFINITY));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(0.0));",
                "    let result = serializer.serialize_f32(12.5);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(12.5));",
                "    let result = serializer.serialize_f32(-12.5);",
                "    assert!(result.is_ok() && result.unwrap() == Value::from(-12.5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(0.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(1.5);",
                "    assert_eq!(result, Ok(Value::from(1.5)));",
                "    let result = serializer.serialize_f32(-2.5);",
                "    assert_eq!(result, Ok(Value::from(-2.5)));",
                "    let result = serializer.serialize_f32(3.14);",
                "    assert_eq!(result, Ok(Value::from(3.14)));",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert_eq!(result, Ok(Value::from(f32::NAN)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(1.5);",
                "    assert_eq!(result, Ok(Value::from(1.5)));",
                "    let result = serializer.serialize_f32(-2.5);",
                "    assert_eq!(result, Ok(Value::from(-2.5)));",
                "    let result = serializer.serialize_f32(3.14);",
                "    assert_eq!(result, Ok(Value::from(3.14)));",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert_eq!(result, Ok(Value::from(f32::NAN)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(-0.0);",
                "}"
              ],
              "oracle": [
                "    let expected = Ok(Value::from(-0.0));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(0.0);",
                "    let expected = Ok(Value::from(0.0));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(1.5);",
                "    let expected = Ok(Value::from(1.5));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(-1.5);",
                "    let expected = Ok(Value::from(-1.5));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(3.14);",
                "    let expected = Ok(Value::from(3.14));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    let expected = Ok(Value::from(f32::INFINITY));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    let expected = Ok(Value::from(f32::NEG_INFINITY));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    let expected = Ok(Value::from(f32::NAN));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(-0.0);",
                "    let expected = Ok(Value::from(-0.0));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(0.0);",
                "    let expected = Ok(Value::from(0.0));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(1.5);",
                "    let expected = Ok(Value::from(1.5));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(-1.5);",
                "    let expected = Ok(Value::from(-1.5));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(3.14);",
                "    let expected = Ok(Value::from(3.14));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    let expected = Ok(Value::from(f32::INFINITY));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    let expected = Ok(Value::from(f32::NEG_INFINITY));",
                "    assert_eq!(result, expected);",
                "    ",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    let expected = Ok(Value::from(f32::NAN));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(1.23);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(1.23));",
                "    assert!(matches!(result, Ok(Value::Number(_))));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(1.23);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(1.23));",
                "    assert!(matches!(result, Ok(Value::Number(_))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(-3.4028235e38);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(-3.4028235e38));",
                "    result = serializer.serialize_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(0.0));",
                "    result = serializer.serialize_f32(3.4028235e38);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(3.4028235e38));",
                "    result = serializer.serialize_f32(-1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(-1.0));",
                "    result = serializer.serialize_f32(1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(1.0));",
                "    result = serializer.serialize_f32(12.5);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(12.5));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(-3.4028235e38);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(-3.4028235e38));",
                "    result = serializer.serialize_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(0.0));",
                "    result = serializer.serialize_f32(3.4028235e38);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(3.4028235e38));",
                "    result = serializer.serialize_f32(-1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(-1.0));",
                "    result = serializer.serialize_f32(1.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(1.0));",
                "    result = serializer.serialize_f32(12.5);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(12.5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(3.4028235e38);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::from(3.4028235e38)));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(-1.0);",
                "    assert_eq!(result, Ok(Value::from(-1.0)));",
                "    let result = serializer.serialize_f32(1.0);",
                "    assert_eq!(result, Ok(Value::from(1.0)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_ok());",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::NEG_INFINITY)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(3.4028235e38);",
                "    assert_eq!(result, Ok(Value::from(3.4028235e38)));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(-1.0);",
                "    assert_eq!(result, Ok(Value::from(-1.0)));",
                "    let result = serializer.serialize_f32(1.0);",
                "    assert_eq!(result, Ok(Value::from(1.0)));",
                "    let result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_ok());",
                "    let result = serializer.serialize_f32(f32::INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::INFINITY)));",
                "    let result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(Value::from(f32::NEG_INFINITY)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(3.4028235e38 - 1.0e-10);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(3.4028235e38 - 1.0e-10));",
                "    result = serializer.serialize_f32(-3.4028235e38 + 1.0e-10);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(-3.4028235e38 + 1.0e-10));",
                "    result = serializer.serialize_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(0.0));",
                "    result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(f32::NAN));",
                "    result = serializer.serialize_f32(f32::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(f32::INFINITY));",
                "    result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(f32::NEG_INFINITY));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(3.4028235e38 - 1.0e-10);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(3.4028235e38 - 1.0e-10));",
                "    result = serializer.serialize_f32(-3.4028235e38 + 1.0e-10);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(-3.4028235e38 + 1.0e-10));",
                "    result = serializer.serialize_f32(0.0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(0.0));",
                "    result = serializer.serialize_f32(f32::NAN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(f32::NAN));",
                "    result = serializer.serialize_f32(f32::INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(f32::INFINITY));",
                "    result = serializer.serialize_f32(f32::NEG_INFINITY);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), Value::from(f32::NEG_INFINITY));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(-3.4028235e38 + 1.0e-10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Value::from(-3.4028235e38 + 1.0e-10)));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(3.4028235e38);",
                "    assert_eq!(result, Ok(Value::from(3.4028235e38)));",
                "    let result = serializer.serialize_f32(-1.0);",
                "    assert_eq!(result, Ok(Value::from(-1.0)));",
                "    let result = serializer.serialize_f32(1.0);",
                "    assert_eq!(result, Ok(Value::from(1.0)));",
                "    let result = serializer.serialize_f32(3.14159);",
                "    assert_eq!(result, Ok(Value::from(3.14159)));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let result = serializer.serialize_f32(-3.4028235e38 + 1.0e-10);",
                "    assert_eq!(result, Ok(Value::from(-3.4028235e38 + 1.0e-10)));",
                "    let result = serializer.serialize_f32(0.0);",
                "    assert_eq!(result, Ok(Value::from(0.0)));",
                "    let result = serializer.serialize_f32(3.4028235e38);",
                "    assert_eq!(result, Ok(Value::from(3.4028235e38)));",
                "    let result = serializer.serialize_f32(-1.0);",
                "    assert_eq!(result, Ok(Value::from(-1.0)));",
                "    let result = serializer.serialize_f32(1.0);",
                "    assert_eq!(result, Ok(Value::from(1.0)));",
                "    let result = serializer.serialize_f32(3.14159);",
                "    assert_eq!(result, Ok(Value::from(3.14159)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}