{
  "name": "serde_json::map::{impl#13}::into_deserializer",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:604:5:606:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "K: String, V: Value; Map<String, Value> with various combinations of key-value pairs, including empty map, single entry, max entries (e.g., 1000), and checks for values of types: Null, Bool, Number, String, Array, Object.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    let _deserializer = empty_map.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    let deserializer = empty_map.into_deserializer();",
                "    assert_eq!(deserializer, empty_map);"
              ],
              "code": [
                "{",
                "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    let _deserializer = empty_map.into_deserializer();",
                "    let empty_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    let deserializer = empty_map.into_deserializer();",
                "    assert_eq!(deserializer, empty_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut single_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    single_entry_map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    let _deserializer = single_entry_map.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    let mut single_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    single_entry_map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    let deserializer = single_entry_map.into_deserializer();",
                "    assert_eq!(deserializer, single_entry_map);"
              ],
              "code": [
                "{",
                "    let mut single_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    single_entry_map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    let _deserializer = single_entry_map.into_deserializer();",
                "    let mut single_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    single_entry_map.map.insert(\"key1\".to_string(), Value::String(\"value1\".to_string()));",
                "    let deserializer = single_entry_map.into_deserializer();",
                "    assert_eq!(deserializer, single_entry_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut multi_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    for i in 0..10 {",
                "        multi_entry_map.map.insert(format!(\"key{}\", i), Value::Number(Number::from(i)));",
                "    }",
                "    let _deserializer = multi_entry_map.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    let multi_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    multi_entry_map.map.insert(\"key0\".to_string(), Value::Number(Number::from(0)));",
                "    multi_entry_map.map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
                "    multi_entry_map.map.insert(\"key2\".to_string(), Value::Number(Number::from(2)));",
                "    multi_entry_map.map.insert(\"key3\".to_string(), Value::Number(Number::from(3)));",
                "    multi_entry_map.map.insert(\"key4\".to_string(), Value::Number(Number::from(4)));",
                "    multi_entry_map.map.insert(\"key5\".to_string(), Value::Number(Number::from(5)));",
                "    multi_entry_map.map.insert(\"key6\".to_string(), Value::Number(Number::from(6)));",
                "    multi_entry_map.map.insert(\"key7\".to_string(), Value::Number(Number::from(7)));",
                "    multi_entry_map.map.insert(\"key8\".to_string(), Value::Number(Number::from(8)));",
                "    multi_entry_map.map.insert(\"key9\".to_string(), Value::Number(Number::from(9)));",
                "    let deserializer = multi_entry_map.into_deserializer();",
                "    assert_eq!(deserializer, multi_entry_map);"
              ],
              "code": [
                "{",
                "    let mut multi_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    for i in 0..10 {",
                "        multi_entry_map.map.insert(format!(\"key{}\", i), Value::Number(Number::from(i)));",
                "    }",
                "    let _deserializer = multi_entry_map.into_deserializer();",
                "    let multi_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    multi_entry_map.map.insert(\"key0\".to_string(), Value::Number(Number::from(0)));",
                "    multi_entry_map.map.insert(\"key1\".to_string(), Value::Number(Number::from(1)));",
                "    multi_entry_map.map.insert(\"key2\".to_string(), Value::Number(Number::from(2)));",
                "    multi_entry_map.map.insert(\"key3\".to_string(), Value::Number(Number::from(3)));",
                "    multi_entry_map.map.insert(\"key4\".to_string(), Value::Number(Number::from(4)));",
                "    multi_entry_map.map.insert(\"key5\".to_string(), Value::Number(Number::from(5)));",
                "    multi_entry_map.map.insert(\"key6\".to_string(), Value::Number(Number::from(6)));",
                "    multi_entry_map.map.insert(\"key7\".to_string(), Value::Number(Number::from(7)));",
                "    multi_entry_map.map.insert(\"key8\".to_string(), Value::Number(Number::from(8)));",
                "    multi_entry_map.map.insert(\"key9\".to_string(), Value::Number(Number::from(9)));",
                "    let deserializer = multi_entry_map.into_deserializer();",
                "    assert_eq!(deserializer, multi_entry_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut max_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    for i in 0..1000 {",
                "        max_entry_map.map.insert(format!(\"key{}\", i), Value::Bool(i % 2 == 0));",
                "    }",
                "    let _deserializer = max_entry_map.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    let mut max_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    assert_eq!(max_entry_map.map.len(), 1000);",
                "    for i in 0..1000 {",
                "    assert_eq!(max_entry_map.map.get(&format!(\"key{}\", i)), Some(&Value::Bool(i % 2 == 0)));",
                "    }",
                "    let deserializer = max_entry_map.into_deserializer();",
                "    assert_eq!(deserializer.map.len(), 1000);",
                "    assert_eq!(deserializer, max_entry_map);"
              ],
              "code": [
                "{",
                "    let mut max_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    for i in 0..1000 {",
                "        max_entry_map.map.insert(format!(\"key{}\", i), Value::Bool(i % 2 == 0));",
                "    }",
                "    let _deserializer = max_entry_map.into_deserializer();",
                "    let mut max_entry_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    assert_eq!(max_entry_map.map.len(), 1000);",
                "    for i in 0..1000 {",
                "    assert_eq!(max_entry_map.map.get(&format!(\"key{}\", i)), Some(&Value::Bool(i % 2 == 0)));",
                "    }",
                "    let deserializer = max_entry_map.into_deserializer();",
                "    assert_eq!(deserializer.map.len(), 1000);",
                "    assert_eq!(deserializer, max_entry_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut varied_value_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    varied_value_map.map.insert(\"null_value\".to_string(), Value::Null);",
                "    varied_value_map.map.insert(\"bool_value\".to_string(), Value::Bool(true));",
                "    varied_value_map.map.insert(\"number_value\".to_string(), Value::Number(Number::from(12.5)));",
                "    varied_value_map.map.insert(\"string_value\".to_string(), Value::String(\"a string\".to_string()));",
                "    varied_value_map.map.insert(\"array_value\".to_string(), Value::Array(vec![",
                "        Value::String(\"element1\".to_string()), ",
                "        Value::String(\"element2\".to_string())",
                "    ]));",
                "    varied_value_map.map.insert(\"object_value\".to_string(), Value::Object(Map {",
                "        map: MapImpl::new(),",
                "    }));",
                "    let _deserializer = varied_value_map.into_deserializer();",
                "}"
              ],
              "oracle": [
                "    let varied_value_map: Map<String, Value>;",
                "    varied_value_map.map.insert(\"null_value\".to_string(), Value::Null);",
                "    varied_value_map.map.insert(\"bool_value\".to_string(), Value::Bool(true));",
                "    varied_value_map.map.insert(\"number_value\".to_string(), Value::Number(Number::from(12.5)));",
                "    varied_value_map.map.insert(\"string_value\".to_string(), Value::String(\"a string\".to_string()));",
                "    varied_value_map.map.insert(\"array_value\".to_string(), Value::Array(vec![Value::String(\"element1\".to_string()), Value::String(\"element2\".to_string())]));",
                "    varied_value_map.map.insert(\"object_value\".to_string(), Value::Object(Map { map: MapImpl::new() }));",
                "    let deserializer = varied_value_map.into_deserializer();",
                "    assert_eq!(deserializer, varied_value_map);"
              ],
              "code": [
                "{",
                "    let mut varied_value_map: Map<String, Value> = Map { map: MapImpl::new() };",
                "    varied_value_map.map.insert(\"null_value\".to_string(), Value::Null);",
                "    varied_value_map.map.insert(\"bool_value\".to_string(), Value::Bool(true));",
                "    varied_value_map.map.insert(\"number_value\".to_string(), Value::Number(Number::from(12.5)));",
                "    varied_value_map.map.insert(\"string_value\".to_string(), Value::String(\"a string\".to_string()));",
                "    varied_value_map.map.insert(\"array_value\".to_string(), Value::Array(vec![",
                "        Value::String(\"element1\".to_string()), ",
                "        Value::String(\"element2\".to_string())",
                "    ]));",
                "    varied_value_map.map.insert(\"object_value\".to_string(), Value::Object(Map {",
                "        map: MapImpl::new(),",
                "    }));",
                "    let _deserializer = varied_value_map.into_deserializer();",
                "    let varied_value_map: Map<String, Value>;",
                "    varied_value_map.map.insert(\"null_value\".to_string(), Value::Null);",
                "    varied_value_map.map.insert(\"bool_value\".to_string(), Value::Bool(true));",
                "    varied_value_map.map.insert(\"number_value\".to_string(), Value::Number(Number::from(12.5)));",
                "    varied_value_map.map.insert(\"string_value\".to_string(), Value::String(\"a string\".to_string()));",
                "    varied_value_map.map.insert(\"array_value\".to_string(), Value::Array(vec![Value::String(\"element1\".to_string()), Value::String(\"element2\".to_string())]));",
                "    varied_value_map.map.insert(\"object_value\".to_string(), Value::Object(Map { map: MapImpl::new() }));",
                "    let deserializer = varied_value_map.into_deserializer();",
                "    assert_eq!(deserializer, varied_value_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}