{
  "name": "serde_json::value::de::{impl#22}::expecting",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:1346:5:1348:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input condition: Any instance of fmt::Formatter that can accept a string, such as a mutable reference to a formatter object, with the expectation that it receives a non-empty string key.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let classifier = KeyClassifier;",
                "    classifier.expecting(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.output, \"a string key\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let classifier = KeyClassifier;",
                "    classifier.expecting(&mut formatter);",
                "    assert_eq!(formatter.output, \"a string key\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let classifier = KeyClassifier;",
                "    classifier.expecting(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.output, \"a string key\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let classifier = KeyClassifier;",
                "    classifier.expecting(&mut formatter);",
                "    assert_eq!(formatter.output, \"a string key\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let classifier = KeyClassifier;",
                "    classifier.expecting(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert!(formatter.output == \"a string key\");",
                "    assert!(formatter.output.len() > 0);",
                "    assert!(formatter.output.contains(\"string key\"));",
                "    assert!(formatter.output.chars().all(char::is_ascii));",
                "    assert!(formatter.output.starts_with(\"a\"));"
              ],
              "code": [
                "{",
                "    struct TestFormatter {",
                "        output: String,",
                "    }",
                "",
                "    impl fmt::Write for TestFormatter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut formatter = TestFormatter { output: String::new() };",
                "    let classifier = KeyClassifier;",
                "    classifier.expecting(&mut formatter);",
                "    assert!(formatter.output == \"a string key\");",
                "    assert!(formatter.output.len() > 0);",
                "    assert!(formatter.output.contains(\"string key\"));",
                "    assert!(formatter.output.chars().all(char::is_ascii));",
                "    assert!(formatter.output.starts_with(\"a\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}