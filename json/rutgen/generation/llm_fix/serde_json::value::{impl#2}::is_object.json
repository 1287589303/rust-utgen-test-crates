{
  "name": "serde_json::value::{impl#2}::is_object",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:348:5:350:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Value::Object(Map<String, Value>), Value::Null, Value::Bool(bool), Value::Number(Number), Value::String(String), Value::Array(Vec<Value>); with valid and empty Map<String, Value>, and empty or populated Vec<Value>; all boolean values, various integer and floating-point numbers, and Unicode strings of varying lengths\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let valid_object = Value::Object(Map { map: MapImpl::new() });",
                "    assert!(valid_object.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(Value::Object(Map { map: MapImpl::new() }).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"a string\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());"
              ],
              "code": [
                "{",
                "    let valid_object = Value::Object(Map { map: MapImpl::new() });",
                "    assert!(valid_object.is_object());",
                "    assert!(Value::Object(Map { map: MapImpl::new() }).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"a string\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut contents = Map { map: MapImpl::new() };",
                "    contents.insert(\"key\".to_string(), Value::Number(Number { n: 42 }));",
                "    let valid_object = Value::Object(contents);",
                "    assert!(valid_object.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(valid_object.is_object());",
                "    assert!(valid_object.as_object().is_some());",
                "    assert!(valid_object.as_object_mut().is_some());",
                "    assert!(!Value::Number(Number { n: 42 }).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::String(\"string\".to_string()).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "    assert!(valid_object.as_object().unwrap().map.get(\"key\").is_some());",
                "    assert!(valid_object.as_object().unwrap().map.get(\"key\").unwrap().is_number());",
                "    assert_eq!(valid_object.as_object().unwrap().map.get(\"key\").unwrap().as_number().map(|n| n.n), Some(42));"
              ],
              "code": [
                "{",
                "    let mut contents = Map { map: MapImpl::new() };",
                "    contents.insert(\"key\".to_string(), Value::Number(Number { n: 42 }));",
                "    let valid_object = Value::Object(contents);",
                "    assert!(valid_object.is_object());",
                "    assert!(valid_object.is_object());",
                "    assert!(valid_object.as_object().is_some());",
                "    assert!(valid_object.as_object_mut().is_some());",
                "    assert!(!Value::Number(Number { n: 42 }).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::String(\"string\".to_string()).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "    assert!(valid_object.as_object().unwrap().map.get(\"key\").is_some());",
                "    assert!(valid_object.as_object().unwrap().map.get(\"key\").unwrap().is_number());",
                "    assert_eq!(valid_object.as_object().unwrap().map.get(\"key\").unwrap().as_number().map(|n| n.n), Some(42));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let null_value = Value::Null;",
                "    assert!(!null_value.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(!Value::Null.is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Array(Vec::new()).is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());"
              ],
              "code": [
                "{",
                "    let null_value = Value::Null;",
                "    assert!(!null_value.is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Array(Vec::new()).is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let boolean_value = Value::Bool(true);",
                "    assert!(!boolean_value.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(boolean_value.is_object() == false);",
                "    ",
                "    let null_value = Value::Null;",
                "    assert!(null_value.is_object() == false);",
                "    ",
                "    let number_value = Value::Number(Number { n: 10 });",
                "    assert!(number_value.is_object() == false);",
                "    ",
                "    let string_value = Value::String(String::from(\"test\"));",
                "    assert!(string_value.is_object() == false);",
                "    ",
                "    let array_value = Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]);",
                "    assert!(array_value.is_object() == false);",
                "    ",
                "    let object_value = Value::Object(Map::new());",
                "    assert!(object_value.is_object() == true);",
                "    ",
                "    let nested_object = Value::Object(Map::from_iter(vec![(String::from(\"nested\"), Value::Object(Map::new()))]));",
                "    assert!(nested_object.is_object() == true);"
              ],
              "code": [
                "{",
                "    let boolean_value = Value::Bool(true);",
                "    assert!(!boolean_value.is_object());",
                "    assert!(boolean_value.is_object() == false);",
                "    ",
                "    let null_value = Value::Null;",
                "    assert!(null_value.is_object() == false);",
                "    ",
                "    let number_value = Value::Number(Number { n: 10 });",
                "    assert!(number_value.is_object() == false);",
                "    ",
                "    let string_value = Value::String(String::from(\"test\"));",
                "    assert!(string_value.is_object() == false);",
                "    ",
                "    let array_value = Value::Array(vec![Value::String(String::from(\"item1\")), Value::String(String::from(\"item2\"))]);",
                "    assert!(array_value.is_object() == false);",
                "    ",
                "    let object_value = Value::Object(Map::new());",
                "    assert!(object_value.is_object() == true);",
                "    ",
                "    let nested_object = Value::Object(Map::from_iter(vec![(String::from(\"nested\"), Value::Object(Map::new()))]));",
                "    assert!(nested_object.is_object() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let boolean_value = Value::Bool(false);",
                "    assert!(!boolean_value.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(!Value::Bool(false).is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());"
              ],
              "code": [
                "{",
                "    let boolean_value = Value::Bool(false);",
                "    assert!(!boolean_value.is_object());",
                "    assert!(!Value::Bool(false).is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number_value = Value::Number(Number { n: 3.14 });",
                "    assert!(!number_value.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Number(Number { n: 3.14 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(Value::Object(Map::new()).is_object() == true);"
              ],
              "code": [
                "{",
                "    let number_value = Value::Number(Number { n: 3.14 });",
                "    assert!(!number_value.is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Number(Number { n: 3.14 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(Value::Object(Map::new()).is_object() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let string_value = Value::String(\"Hello, World!\".to_string());",
                "    assert!(!string_value.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(!Value::String(\"Hello, World!\".to_string()).is_object());",
                "    let null_value = Value::Null;",
                "    assert!(!null_value.is_object());",
                "    let bool_value = Value::Bool(true);",
                "    assert!(!bool_value.is_object());",
                "    let number_value = Value::Number(Number { n: 0 });",
                "    assert!(!number_value.is_object());",
                "    let array_value = Value::Array(vec![Value::String(\"foo\".to_string()), Value::String(\"bar\".to_string())]);",
                "    assert!(!array_value.is_object());",
                "    let object_value = Value::Object(Map::new());",
                "    assert!(object_value.is_object());",
                "    let nested_object_value = Value::Object(Map::from([(\"key\".to_string(), Value::Object(Map::new()))]));",
                "    assert!(nested_object_value.is_object());",
                "    assert!(nested_object_value.as_object().is_some());",
                "    assert!(!Value::Array(vec![]).is_object());"
              ],
              "code": [
                "{",
                "    let string_value = Value::String(\"Hello, World!\".to_string());",
                "    assert!(!string_value.is_object());",
                "    assert!(!Value::String(\"Hello, World!\".to_string()).is_object());",
                "    let null_value = Value::Null;",
                "    assert!(!null_value.is_object());",
                "    let bool_value = Value::Bool(true);",
                "    assert!(!bool_value.is_object());",
                "    let number_value = Value::Number(Number { n: 0 });",
                "    assert!(!number_value.is_object());",
                "    let array_value = Value::Array(vec![Value::String(\"foo\".to_string()), Value::String(\"bar\".to_string())]);",
                "    assert!(!array_value.is_object());",
                "    let object_value = Value::Object(Map::new());",
                "    assert!(object_value.is_object());",
                "    let nested_object_value = Value::Object(Map::from([(\"key\".to_string(), Value::Object(Map::new()))]));",
                "    assert!(nested_object_value.is_object());",
                "    assert!(nested_object_value.as_object().is_some());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_array = Value::Array(Vec::new());",
                "    assert!(!empty_array.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(!Value::Array(Vec::new()).is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Number(Number::from(10)).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Array(Vec::new()).as_object().is_some());",
                "    assert_eq!(Value::Object(Map::new()).is_object(), true);",
                "    assert_eq!(Value::Bool(false).is_object(), false);",
                "    assert_eq!(Value::Null.is_object(), false);",
                "    assert_eq!(Value::String(String::from(\"test\")).is_object(), false);",
                "    assert_eq!(Value::Number(Number::from(10)).is_object(), false);"
              ],
              "code": [
                "{",
                "    let empty_array = Value::Array(Vec::new());",
                "    assert!(!empty_array.is_object());",
                "    assert!(!Value::Array(Vec::new()).is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Bool(true).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Number(Number::from(10)).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Array(Vec::new()).as_object().is_some());",
                "    assert_eq!(Value::Object(Map::new()).is_object(), true);",
                "    assert_eq!(Value::Bool(false).is_object(), false);",
                "    assert_eq!(Value::Null.is_object(), false);",
                "    assert_eq!(Value::String(String::from(\"test\")).is_object(), false);",
                "    assert_eq!(Value::Number(Number::from(10)).is_object(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let populated_array = Value::Array(vec![Value::Bool(true), Value::Null]);",
                "    assert!(!populated_array.is_object());",
                "}"
              ],
              "oracle": [
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(false).is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(!Value::Array(vec![Value::Bool(true)]).is_object());"
              ],
              "code": [
                "{",
                "    let populated_array = Value::Array(vec![Value::Bool(true), Value::Null]);",
                "    assert!(!populated_array.is_object());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(!Value::Null.is_object());",
                "    assert!(!Value::Bool(false).is_object());",
                "    assert!(!Value::Number(Number { n: 0 }).is_object());",
                "    assert!(!Value::String(String::from(\"test\")).is_object());",
                "    assert!(!Value::Array(vec![]).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(Value::Object(Map::new()).is_object());",
                "    assert!(Value::Object(Map::new()).as_object().is_some());",
                "    assert!(Value::Object(Map::new()).as_object_mut().is_some());",
                "    assert!(!Value::Array(vec![Value::Bool(true)]).is_object());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}