{
  "name": "serde_json::value::de::{impl#20}::deserialize_newtype_struct",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:1291:5:1300:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a valid instance of MapKeyDeserializer, _name must be a non-empty static string, and visitor must implement Visitor<'de> receiving a MapKeyDeserializer instance to return Result<V::Value, Error>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = String;",
                "",
                "        fn visit_newtype_struct<E>(",
                "            self,",
                "            _value: MapKeyDeserializer<'de>,",
                "        ) -> Result<Self::Value, E> {",
                "            Ok(\"test_string\".to_owned())",
                "        }",
                "    }",
                "",
                "    let key = Cow::Borrowed(\"key\");",
                "    let deserializer = MapKeyDeserializer { key };",
                "    let name: &'static str = \"test_struct\";",
                "    let visitor = TestVisitor;",
                "",
                "    let _result = deserializer.deserialize_newtype_struct(name, visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(\"test_string\".to_owned()));"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = String;",
                "",
                "        fn visit_newtype_struct<E>(",
                "            self,",
                "            _value: MapKeyDeserializer<'de>,",
                "        ) -> Result<Self::Value, E> {",
                "            Ok(\"test_string\".to_owned())",
                "        }",
                "    }",
                "",
                "    let key = Cow::Borrowed(\"key\");",
                "    let deserializer = MapKeyDeserializer { key };",
                "    let name: &'static str = \"test_struct\";",
                "    let visitor = TestVisitor;",
                "",
                "    let _result = deserializer.deserialize_newtype_struct(name, visitor);",
                "    assert_eq!(_result, Ok(\"test_string\".to_owned()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = String;",
                "",
                "        fn visit_newtype_struct<E>(",
                "            self,",
                "            _value: MapKeyDeserializer<'de>,",
                "        ) -> Result<Self::Value, E> {",
                "            Ok(\"test_string\".to_owned())",
                "        }",
                "    }",
                "",
                "    let key = Cow::Borrowed(\"key\");",
                "    let deserializer = MapKeyDeserializer { key };",
                "    let name: &'static str = \"\";",
                "    let visitor = TestVisitor;",
                "",
                "    let _result = deserializer.deserialize_newtype_struct(name, visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.unwrap(), \"test_string\");",
                "    assert!(_result.is_ok());"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = String;",
                "",
                "        fn visit_newtype_struct<E>(",
                "            self,",
                "            _value: MapKeyDeserializer<'de>,",
                "        ) -> Result<Self::Value, E> {",
                "            Ok(\"test_string\".to_owned())",
                "        }",
                "    }",
                "",
                "    let key = Cow::Borrowed(\"key\");",
                "    let deserializer = MapKeyDeserializer { key };",
                "    let name: &'static str = \"\";",
                "    let visitor = TestVisitor;",
                "",
                "    let _result = deserializer.deserialize_newtype_struct(name, visitor);",
                "    assert_eq!(_result.unwrap(), \"test_string\");",
                "    assert!(_result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = String;",
                "",
                "        fn visit_newtype_struct<E>(",
                "            self,",
                "            _value: MapKeyDeserializer<'de>,",
                "        ) -> Result<Self::Value, E> {",
                "            Ok(\"boundary_test\".to_owned())",
                "        }",
                "    }",
                "",
                "    let key = Cow::Borrowed(\"boundary_key\");",
                "    let deserializer = MapKeyDeserializer { key };",
                "    let name: &'static str = \"boundary_struct\";",
                "    let visitor = TestVisitor;",
                "",
                "    let _result = deserializer.deserialize_newtype_struct(name, visitor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deserializer.deserialize_newtype_struct(name, visitor).unwrap(), \"boundary_test\");"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "",
                "    impl<'de> Visitor<'de> for TestVisitor {",
                "        type Value = String;",
                "",
                "        fn visit_newtype_struct<E>(",
                "            self,",
                "            _value: MapKeyDeserializer<'de>,",
                "        ) -> Result<Self::Value, E> {",
                "            Ok(\"boundary_test\".to_owned())",
                "        }",
                "    }",
                "",
                "    let key = Cow::Borrowed(\"boundary_key\");",
                "    let deserializer = MapKeyDeserializer { key };",
                "    let name: &'static str = \"boundary_struct\";",
                "    let visitor = TestVisitor;",
                "",
                "    let _result = deserializer.deserialize_newtype_struct(name, visitor);",
                "    assert_eq!(deserializer.deserialize_newtype_struct(name, visitor).unwrap(), \"boundary_test\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}