{
  "name": "serde_json::ser::{impl#6}::serialize_field",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:558:5:563:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "T must implement the Serialize trait; valid input types include primitives (e.g., integers, strings), collections (e.g., vectors, maps), and any custom structs implementing Serialize; test with empty, single-element, and large collections to cover boundary cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value = 42;",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.state, State::First);",
                "    assert_eq!(serializer.next_key, None);",
                "    assert!(serializer.map.is_empty());",
                "    assert!(serializer.serialization_successful());",
                "    assert!(serializer.value_serialized(0));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "    ",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value = 42;",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "    assert_eq!(serializer.state, State::First);",
                "    assert_eq!(serializer.next_key, None);",
                "    assert!(serializer.map.is_empty());",
                "    assert!(serializer.serialization_successful());",
                "    assert!(serializer.value_serialized(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value = \"test string\";",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.state, State::Rest);",
                "    assert!(serializer.next_key.is_none());",
                "    assert!(serializer.map.is_empty());",
                "    assert!(serializer.writer.is_empty());",
                "    assert!(serializer.formatter.is_initialized());"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value = \"test string\";",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "    assert_eq!(serializer.state, State::Rest);",
                "    assert!(serializer.next_key.is_none());",
                "    assert!(serializer.map.is_empty());",
                "    assert!(serializer.writer.is_empty());",
                "    assert!(serializer.formatter.is_initialized());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value: Vec<i32> = vec![];",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.state, State::Empty);",
                "    assert!(serializer.next_key.is_none());",
                "    assert!(serializer.map.map.is_empty());",
                "    assert!(serializer.map.next_key.is_none());",
                "    assert!(serializer.map.out_value.is_none());",
                "    assert!(serializer.serialize_field(&value).is_ok());",
                "    assert!(serializer.serialize_field(&value).unwrap().is_empty());"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value: Vec<i32> = vec![];",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "    assert_eq!(serializer.state, State::Empty);",
                "    assert!(serializer.next_key.is_none());",
                "    assert!(serializer.map.map.is_empty());",
                "    assert!(serializer.map.next_key.is_none());",
                "    assert!(serializer.map.out_value.is_none());",
                "    assert!(serializer.serialize_field(&value).is_ok());",
                "    assert!(serializer.serialize_field(&value).unwrap().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value = vec![1];",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.state, State::Rest);",
                "    assert!(serializer.next_key.is_none());",
                "    assert!(serializer.map.is_empty());",
                "    assert!(serializer.out_value.is_none());",
                "    assert!(serializer.value_serialized);",
                "    assert_eq!(value.len(), 1);",
                "    assert!(serializer.ser.write_called);",
                "    assert!(!serializer.ser.has_error());"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value = vec![1];",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "    assert_eq!(serializer.state, State::Rest);",
                "    assert!(serializer.next_key.is_none());",
                "    assert!(serializer.map.is_empty());",
                "    assert!(serializer.out_value.is_none());",
                "    assert!(serializer.value_serialized);",
                "    assert_eq!(value.len(), 1);",
                "    assert!(serializer.ser.write_called);",
                "    assert!(!serializer.ser.has_error());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value: Vec<i32> = (0..1000).collect();",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.state, State::First);",
                "    assert!(serializer.map.len() == 1);",
                "    assert!(serializer.map.get(&\"0\".to_string()).is_some());",
                "    assert!(serializer.map.get(&\"999\".to_string()).is_some());",
                "    assert!(serializer.serialize_field(&value).is_ok());",
                "    assert!(serializer.map.len() == 1);",
                "    assert!(serializer.state == State::First);",
                "    assert!(matches!(serializer.serialize_field(&value), Ok(())));",
                "    assert!(serializer.map.contains_key(&\"0\".to_string()));",
                "    assert!(serializer.map.contains_key(&\"999\".to_string()));"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let value: Vec<i32> = (0..1000).collect();",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "    assert_eq!(serializer.state, State::First);",
                "    assert!(serializer.map.len() == 1);",
                "    assert!(serializer.map.get(&\"0\".to_string()).is_some());",
                "    assert!(serializer.map.get(&\"999\".to_string()).is_some());",
                "    assert!(serializer.serialize_field(&value).is_ok());",
                "    assert!(serializer.map.len() == 1);",
                "    assert!(serializer.state == State::First);",
                "    assert!(matches!(serializer.serialize_field(&value), Ok(())));",
                "    assert!(serializer.map.contains_key(&\"0\".to_string()));",
                "    assert!(serializer.map.contains_key(&\"999\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let mut value = std::collections::HashMap::new();",
                "    value.insert(\"key1\", \"value1\");",
                "    value.insert(\"key2\", \"value2\");",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.state, State::First);",
                "    assert!(value.contains_key(\"key1\"));",
                "    assert!(value.contains_key(\"key2\"));",
                "    assert!(serializer.ser.is::<TestSerializer>());",
                "    assert!(serializer.ser.serialize_count() == 2);",
                "    assert!(serializer.ser.last_serialized_value() == \"value2\");"
              ],
              "code": [
                "{",
                "    struct TestSerializer;",
                "",
                "    let mut serializer = Compound::Map { ser: &mut TestSerializer, state: State::Empty };",
                "    let mut value = std::collections::HashMap::new();",
                "    value.insert(\"key1\", \"value1\");",
                "    value.insert(\"key2\", \"value2\");",
                "",
                "    serializer.serialize_field(&value).unwrap();",
                "    assert_eq!(serializer.state, State::First);",
                "    assert!(value.contains_key(\"key1\"));",
                "    assert!(value.contains_key(\"key2\"));",
                "    assert!(serializer.ser.is::<TestSerializer>());",
                "    assert!(serializer.ser.serialize_count() == 2);",
                "    assert!(serializer.ser.last_serialized_value() == \"value2\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}