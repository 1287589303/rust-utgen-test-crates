{
  "name": "serde_json::value::ser::float_key_must_be_finite",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": false,
  "loc": "src/value/ser.rs:454:1:456:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Return value must be of type Error, and it is expected to contain ErrorCode::FloatKeyMustBeFinite with line and column values set to 0.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = float_key_must_be_finite();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);"
              ],
              "code": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    match result.err.code {",
                "        ErrorCode::FloatKeyMustBeFinite => {},",
                "        _ => panic!(\"Expected FloatKeyMustBeFinite\"),",
                "    }",
                "}"
              ],
              "oracle": [
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
                "    panic::catch_unwind(|| { float_key_must_be_finite(); }).is_ok();",
                "    let error = float_key_must_be_finite();",
                "    assert!(error.err.line == 0 && error.err.column == 0);"
              ],
              "code": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    match result.err.code {",
                "        ErrorCode::FloatKeyMustBeFinite => {},",
                "        _ => panic!(\"Expected FloatKeyMustBeFinite\"),",
                "    }",
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
                "    panic::catch_unwind(|| { float_key_must_be_finite(); }).is_ok();",
                "    let error = float_key_must_be_finite();",
                "    assert!(error.err.line == 0 && error.err.column == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.line, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.err.column, 0);",
                "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));"
              ],
              "code": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.column, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
                "    assert!(result.err.err.is_some());",
                "    assert!(result.err.column >= 0);"
              ],
              "code": [
                "{",
                "    let result = float_key_must_be_finite();",
                "    assert_eq!(result.err.column, 0);",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.code, ErrorCode::FloatKeyMustBeFinite);",
                "    assert!(matches!(result.err.code, ErrorCode::FloatKeyMustBeFinite));",
                "    assert!(result.err.err.is_some());",
                "    assert!(result.err.column >= 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}