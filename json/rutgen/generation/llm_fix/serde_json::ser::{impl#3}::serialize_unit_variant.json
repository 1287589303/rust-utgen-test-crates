{
  "name": "serde_json::ser::{impl#3}::serialize_unit_variant",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:212:5:219:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "_name: non-empty string of static lifetime, _variant_index: non-negative integer, variant: valid UTF-8 string of static lifetime\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"test_name\", 0, \"test_variant\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(matches!(_result, Ok(())));",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert_eq!(serializer.writer.write(b\"test_variant\").unwrap(), 12);"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"test_name\", 0, \"test_variant\");",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(matches!(_result, Ok(())));",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert_eq!(serializer.writer.write(b\"test_variant\").unwrap(), 12);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"valid_name\", 1, \"another_variant\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(matches!(_result, Ok(())));",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert!(serializer.formatter.begin_object_key(&mut serializer.writer, true).is_ok());",
                "    assert_eq!(serializer.serialize_str(\"another_variant\").is_ok(), true);",
                "    assert!(serializer.formatter.end_object_key(&mut serializer.writer).is_ok());",
                "    assert!(serializer.formatter.begin_object_value(&mut serializer.writer).is_ok());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"valid_name\", 1, \"another_variant\");",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(matches!(_result, Ok(())));",
                "    assert!(serializer.writer.flush().is_ok());",
                "    assert!(serializer.formatter.begin_object_key(&mut serializer.writer, true).is_ok());",
                "    assert_eq!(serializer.serialize_str(\"another_variant\").is_ok(), true);",
                "    assert!(serializer.formatter.end_object_key(&mut serializer.writer).is_ok());",
                "    assert!(serializer.formatter.begin_object_value(&mut serializer.writer).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"test_name\", 2, \"yet_another_variant\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.writer.write(b\"\\\"yet_another_variant\\\"\").unwrap(), 18);",
                "    assert!(serializer.flush().is_ok());",
                "    assert!(serializer.serialize_str(\"yet_another_variant\").is_ok());",
                "    assert!(serializer.serialize_unit_variant(\"test_name\", 2, \"yet_another_variant\").is_ok());",
                "    assert!(serializer.serialize_unit_variant(\"test_name\", 2, \"\").is_ok());"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"test_name\", 2, \"yet_another_variant\");",
                "    assert_eq!(serializer.writer.write(b\"\\\"yet_another_variant\\\"\").unwrap(), 18);",
                "    assert!(serializer.flush().is_ok());",
                "    assert!(serializer.serialize_str(\"yet_another_variant\").is_ok());",
                "    assert!(serializer.serialize_unit_variant(\"test_name\", 2, \"yet_another_variant\").is_ok());",
                "    assert!(serializer.serialize_unit_variant(\"test_name\", 2, \"\").is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"empty_variant_name\", 0, \"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(serializer.writer.buffer.is_empty());",
                "    assert_eq!(serializer.position(), expected_position_after_serialization);",
                "    assert_eq!(serializer.peek_position(), expected_peek_position_after_serialization);",
                "    assert_eq!(serializer.remaining_depth, initial_depth);"
              ],
              "code": [
                "{",
                "    struct TestWriter;",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter;",
                "    let serializer = &mut Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let _result = serializer.serialize_unit_variant(\"empty_variant_name\", 0, \"\");",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(serializer.writer.buffer.is_empty());",
                "    assert_eq!(serializer.position(), expected_position_after_serialization);",
                "    assert_eq!(serializer.peek_position(), expected_peek_position_after_serialization);",
                "    assert_eq!(serializer.remaining_depth, initial_depth);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}