{
  "name": "serde_json::ser::{impl#11}::serialize_struct",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1131:5:1133:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "Name: any string, Length: any non-negative integer, Expected: Result::Err(Error::KeyMustBeAString)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { /* initialization code */ } };",
                "    let result = serializer.serialize_struct(\"\", 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "   let mut serializer = MapKeySerializer { ser: &mut Serializer { formatter: Default::default(), writer: Vec::new() } };",
                "   let result = serializer.serialize_struct(\"\", 0);",
                "   assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { /* initialization code */ } };",
                "    let result = serializer.serialize_struct(\"test\", 5);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), key_must_be_a_string());"
              ],
              "code": [
                "{",
                "   let mut serializer = MapKeySerializer { ser: &mut Serializer { formatter: Default::default(), writer: Vec::new() } };",
                "   let result = serializer.serialize_struct(\"test\", 5);",
                "   assert!(result.is_err());",
                "   assert_eq!(result.unwrap_err(), key_must_be_a_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { /* initialization code */ } };",
                "    let result = serializer.serialize_struct(\"test\", 10000);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "   let mut serializer = MapKeySerializer { ser: &mut Serializer { formatter: None, writer: Vec::new() } };",
                "   let result = serializer.serialize_struct(\"test\", 10000);",
                "   assert_eq!(result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { /* initialization code */ } };",
                "    let result = serializer.serialize_struct(\"non_empty\", 0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), key_must_be_a_string());"
              ],
              "code": [
                "{",
                "    let mut serializer = MapKeySerializer { ser: &mut Serializer { /* initialization code */ } };",
                "    let result = serializer.serialize_struct(\"non_empty\", 0);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), key_must_be_a_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}