{
  "name": "serde_json::number::{impl#3}::is_u64",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:96:5:104:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.n matches N::Float(_) at line 98 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "self.n must be a value of type N::Float with any finite float value, such as f64 values in the range (-1.79e308, 1.79e308) excluding NaN and infinity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(-1.0) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(-1.0) };",
                "    let _ = number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(0.0) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(0.0) };",
                "    let _ = number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(1.0) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert!(!number.is_u64());"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(1.0) };",
                "    let _ = number.is_u64();",
                "    assert!(!number.is_u64());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(1.79e308) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(1.79e308) };",
                "    let _ = number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(-1.79e308) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(-1.79e308) };",
                "    let _ = number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(f64::NAN) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    let number = Number { n: N::Float(f64::NAN) };",
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(f64::NAN) };",
                "    let _ = number.is_u64();",
                "    let number = Number { n: N::Float(f64::NAN) };",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::Float(f64::INFINITY) };",
                "    let _ = number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::Float(f64::INFINITY) };",
                "    let _ = number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.n matches N::NegInt(_) at line 98 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "self.n must be N::NegInt(i64 < 0) for any valid i64 value (e.g., -1, -2147483648, -9223372036854775808)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::NegInt(-1) };",
                "    number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::NegInt(-1) };",
                "    number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::NegInt(i64::MIN) };",
                "    number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::NegInt(i64::MIN) };",
                "    number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let number = Number { n: N::NegInt(-2147483648) };",
                "    number.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(number.is_u64(), false);"
              ],
              "code": [
                "{",
                "    let number = Number { n: N::NegInt(-2147483648) };",
                "    number.is_u64();",
                "    assert_eq!(number.is_u64(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.n matches N::PosInt(_) at line 98 is true\n",
        "precondition: self.n matches N::PosInt(_) at line 98 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "self.n should be set to N::PosInt with values ranging from 1 to u64::MAX for testing is_u64() returning true.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number { n: N::PosInt(1) };",
                "    num.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert!(num.is_u64() == true);"
              ],
              "code": [
                "{",
                "    let num = Number { n: N::PosInt(1) };",
                "    num.is_u64();",
                "    assert!(num.is_u64() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number { n: N::PosInt(42) };",
                "    num.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(num.is_u64(), true);"
              ],
              "code": [
                "{",
                "    let num = Number { n: N::PosInt(42) };",
                "    num.is_u64();",
                "    assert_eq!(num.is_u64(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number { n: N::PosInt(u64::MAX) };",
                "    num.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(num.is_u64(), true);"
              ],
              "code": [
                "{",
                "    let num = Number { n: N::PosInt(u64::MAX) };",
                "    num.is_u64();",
                "    assert_eq!(num.is_u64(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let num = Number { n: N::PosInt(123456789) };",
                "    num.is_u64();",
                "}"
              ],
              "oracle": [
                "    assert!(num.is_u64() == true);"
              ],
              "code": [
                "{",
                "    let num = Number { n: N::PosInt(123456789) };",
                "    num.is_u64();",
                "    assert!(num.is_u64() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}