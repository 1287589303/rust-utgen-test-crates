{
  "name": "serde_json::value::ser::{impl#1}::serialize_u16",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:120:5:122:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "value: u16 in the range [0, 65535]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u16 = 0;",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(0).unwrap(), Value::Number(0.into()));",
                "    assert_eq!(serializer.serialize_u16(u16::MAX).unwrap(), Value::Number(u16::MAX as u64.into()));",
                "    assert!(serializer.serialize_u16(u16::MAX + 1).is_err());"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u16 = 0;",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(0).unwrap(), Value::Number(0.into()));",
                "    assert_eq!(serializer.serialize_u16(u16::MAX).unwrap(), Value::Number(u16::MAX as u64.into()));",
                "    assert!(serializer.serialize_u16(u16::MAX + 1).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u16 = 32768;",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(serializer.serialize_u16(0), Ok(Value::Number(0.into())));",
                "    assert_eq!(serializer.serialize_u16(1), Ok(Value::Number(1.into())));",
                "    assert_eq!(serializer.serialize_u16(65535), Ok(Value::Number(65535.into())));",
                "    assert_eq!(serializer.serialize_u16(32768), Ok(Value::Number(32768.into())));",
                "    assert!(serializer.serialize_u16(0u16.wrapping_sub(1)).is_err());"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u16 = 32768;",
                "    let _ = serializer.serialize_u16(value);",
                "    assert_eq!(serializer.serialize_u16(0), Ok(Value::Number(0.into())));",
                "    assert_eq!(serializer.serialize_u16(1), Ok(Value::Number(1.into())));",
                "    assert_eq!(serializer.serialize_u16(65535), Ok(Value::Number(65535.into())));",
                "    assert_eq!(serializer.serialize_u16(32768), Ok(Value::Number(32768.into())));",
                "    assert!(serializer.serialize_u16(0u16.wrapping_sub(1)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u16 = 65535;",
                "    let _ = serializer.serialize_u16(value);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(serializer.serialize_u16(0), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(1), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(65535), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(32768), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(12345), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(65534), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(50000), Ok(Value::Number(_))));"
              ],
              "code": [
                "{",
                "    let serializer = Serializer;",
                "    let value: u16 = 65535;",
                "    let _ = serializer.serialize_u16(value);",
                "    assert!(matches!(serializer.serialize_u16(0), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(1), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(65535), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(32768), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(12345), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(65534), Ok(Value::Number(_))));",
                "    assert!(matches!(serializer.serialize_u16(50000), Ok(Value::Number(_))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}