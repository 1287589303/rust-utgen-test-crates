{
  "name": "serde_json::ser::Formatter::write_f64",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1731:5:1738:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges include: valid finite floating-point numbers in the range of `-1.7976931348623157e+308` to `1.7976931348623157e+308`, special cases such as `f64::MIN`, `f64::MAX`, `f64::EPSILON`, `0.0`, `-0.0`, `1.0`, `-1.0`, and edge cases like `f64::INFINITY`, `f64::NEG_INFINITY`, and `f64::NAN` (though the latter should not be used directly in the test since the function does not check for those cases).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = 1234.5678;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"1234.5678\");",
                "    ",
                "    let value_neg = -1234.5678;",
                "    TestFormatter.write_f64(&mut writer, value_neg).unwrap();",
                "    assert_eq!(writer, b\"-1234.5678\");",
                "    ",
                "    let value_zero = 0.0;",
                "    TestFormatter.write_f64(&mut writer, value_zero).unwrap();",
                "    assert_eq!(writer, b\"0\");",
                "    ",
                "    let value_small = 1.234e-10;",
                "    TestFormatter.write_f64(&mut writer, value_small).unwrap();",
                "    assert_eq!(writer, b\"1.234e-10\");",
                "    ",
                "    let value_large = 1.234e+10;",
                "    TestFormatter.write_f64(&mut writer, value_large).unwrap();",
                "    assert_eq!(writer, b\"1.234e+10\");",
                "    ",
                "    let value_inf = f64::INFINITY;",
                "    TestFormatter.write_f64(&mut writer, value_inf).unwrap();",
                "    assert!(writer.is_empty()); // Depending on handling, consider empty or a specific value",
                "    ",
                "    let value_nan = f64::NAN;",
                "    TestFormatter.write_f64(&mut writer, value_nan).unwrap();",
                "    assert!(writer.is_empty()); // Depending on handling, consider empty or a specific value"
              ],
              "code": [
                "{",
                "   struct TestFormatter;",
                "   ",
                "   impl Formatter for TestFormatter {",
                "       fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>",
                "       where",
                "           W: ?Sized + io::Write,",
                "       {",
                "           let s = format!(\"{:.6}\", value);",
                "           writer.write_all(s.as_bytes())",
                "       }",
                "   }",
                "   ",
                "   let value = 1234.5678;",
                "   let mut writer = Vec::new();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "   assert_eq!(writer, b\"1234.5678\");",
                "   ",
                "   let value_neg = -1234.5678;",
                "   TestFormatter.write_f64(&mut writer, value_neg).unwrap();",
                "   assert_eq!(writer, b\"-1234.5678\");",
                "   ",
                "   let value_zero = 0.0;",
                "   TestFormatter.write_f64(&mut writer, value_zero).unwrap();",
                "   assert_eq!(writer, b\"0\");",
                "   ",
                "   let value_small = 1.234e-10;",
                "   TestFormatter.write_f64(&mut writer, value_small).unwrap();",
                "   assert_eq!(writer, b\"1.234e-10\");",
                "   ",
                "   let value_large = 1.234e+10;",
                "   TestFormatter.write_f64(&mut writer, value_large).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = -1234.5678;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    let value = -1234.5678;",
                "    let expected_output = \"-1234.5678\";",
                "    assert_eq!(String::from_utf8(writer).unwrap(), expected_output);",
                "    let value = 31.26e+12;",
                "    let expected_output = \"31260000000.0\";",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), expected_output);",
                "    let value = f64::INFINITY;",
                "    let expected_output = \"Infinity\";",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), expected_output);",
                "    let value = f64::NAN;",
                "    let expected_output = \"NaN\";",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), expected_output);",
                "    let value = 0.0;",
                "    let expected_output = \"0\";",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), expected_output);"
              ],
              "code": [
                "{",
                "   struct TestFormatter;",
                "   ",
                "   impl Formatter for TestFormatter {",
                "       #[inline]",
                "       fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>",
                "       where",
                "           W: ?Sized + io::Write,",
                "       {",
                "           write!(writer, \"{}\", value)",
                "       }",
                "   }",
                "   ",
                "   let value = -1234.5678;",
                "  let mut writer = Vec::new();  ",
                "  TestFormatter.write_f64(&mut writer, value).unwrap();  ",
                "  let expected_output = \"-1234.5678\";  ",
                "  assert_eq!(String::from_utf8(writer.clone()).unwrap(), expected_output);  ",
                "   let value = 31.26e+12;",
                "   let expected_output = \"31260000000.0\";",
                "  TestFormatter.write_f64(&mut writer, value).unwrap();  ",
                "  assert_eq!(String::from_utf8(writer.clone()).unwrap(), expected_output);  ",
                "   let value = f64::INFINITY;",
                "  let expected_output = \"Infinity\";  ",
                "  TestFormatter.write_f64(&mut writer, value).unwrap();  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = 0.0;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"0\");",
                "    assert!(writer.is_empty() == false);",
                "    assert!(writer.iter().all(|&byte| byte.is_ascii()));",
                "    assert!(writer.len() > 0);",
                "    assert!(writer.iter().any(|&byte| byte == b'0'));",
                "    assert!(writer.iter().rev().any(|&byte| byte == b'\\n') == false);",
                "    assert!(writer.iter().any(|&byte| byte == b'e') == false);",
                "    assert!(writer.iter().any(|&byte| byte == b'-') == false);",
                "    assert!(writer.iter().position(|&byte| byte == b'.').is_some());",
                "    assert_eq!(writer.len(), 1);"
              ],
              "code": [
                "{",
                "   struct TestFormatter;  ",
                " ",
                "   impl Formatter for TestFormatter {  ",
                "       #[inline]  ",
                "       fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>  ",
                "       where  ",
                "           W: ?Sized + io::Write,  ",
                "       {  ",
                "           write!(writer, \"{}\", value)  ",
                "       }  ",
                "   }  ",
                " ",
                "   let value = 0.0;  ",
                "   let mut writer = Vec::new();  ",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = -0.0;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer.as_slice(), b\"-0\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = -0.0;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(writer.as_slice(), b\"-0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::MIN;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut writer = Vec::new();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), format!(\"{}\", f64::MIN));",
                "    let value = f64::MAX;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), format!(\"{}\", f64::MAX));",
                "    let value = 0.0;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), \"0\");",
                "    let value = -0.0;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), \"0\");",
                "    let value = f64::NAN;",
                "    let result = TestFormatter.write_f64(&mut writer, value);",
                "    assert!(result.is_ok());",
                "    let value = f64::INFINITY;",
                "    result = TestFormatter.write_f64(&mut writer, value);",
                "    assert!(result.is_ok());",
                "    let value = -f64::INFINITY;",
                "    result = TestFormatter.write_f64(&mut writer, value);",
                "    assert!(result.is_ok());",
                "    let value = 31.26;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), \"31.26\");",
                "    let value = -31.26;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), \"-31.26\");",
                "    let value = 31.26e+12;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), \"31260000000000\");",
                "    let value = -31.26e+12;",
                "    writer.clear();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(String::from_utf8(writer).unwrap(), \"-31260000000000\");"
              ],
              "code": [
                "{",
                "   struct TestFormatter;",
                "   ",
                "   impl ser::Formatter for TestFormatter {",
                "       fn write_f64<W>(&self, writer: &mut W, value: f64) -> io::Result<()>",
                "       where",
                "           W: io::Write,",
                "       {",
                "           write!(writer, \"{}\", value)",
                "       }",
                "   }",
                "   ",
                "   let value = f64::MIN;",
                "   let mut writer = Vec::new();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "   let mut writer = Vec::new();",
                "   assert_eq!(String::from_utf8(writer).unwrap(), format!(\"{}\", f64::MIN));",
                "   let value = f64::MAX;",
                "   writer.clear();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "   assert_eq!(String::from_utf8(writer).unwrap(), format!(\"{}\", f64::MAX));",
                "   let value = 0.0;",
                "   writer.clear();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "   assert_eq!(String::from_utf8(writer).unwrap(), \"0\");",
                "   let value = -0.0;",
                "   writer.clear();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "   assert_eq!(String::from_utf8(writer).unwrap(), \"0\");",
                "   let value = f64::NAN;",
                "   let result = TestFormatter.write_f64(&mut writer, value);",
                "   assert!(result.is_ok());",
                "   let value = f64::INFINITY;",
                "   result = TestFormatter.write_f64(&mut writer, value);",
                "   assert!(result.is_ok());",
                "   let value = -f64::INFINITY;",
                "   result = TestFormatter.write_f64(&mut writer, value);",
                "   assert!(result.is_ok());",
                "   let value = 31.26;",
                "   writer.clear();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "   assert_eq!(String::from_utf8(writer).unwrap(), \"31.26\");",
                "   let value = -31.26;",
                "   writer.clear();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::MAX;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"1.7976931348623157e+308\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::MAX;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(writer, b\"1.7976931348623157e+308\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::EPSILON;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"5e-324\");",
                "    assert!(f64::from_str_utf8(writer.as_slice()).is_ok());",
                "    assert!(writer.len() > 0);",
                "    assert!(writer.iter().all(|&byte| byte.is_ascii()));"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::EPSILON;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert_eq!(writer, b\"5e-324\");",
                "    assert!(f64::from_str_utf8(writer.as_slice()).is_ok());",
                "    assert!(writer.len() > 0);",
                "    assert!(writer.iter().all(|&byte| byte.is_ascii()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::INFINITY;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(writer == b\"Infinity\");",
                "    assert!(writer.len() > 0);",
                "    assert!(writer.get(0) == Some(&b'I'));",
                "    assert!(writer.last() == Some(&b'y'));"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::INFINITY;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "    assert!(writer == b\"Infinity\");",
                "    assert!(writer.len() > 0);",
                "    assert!(writer.get(0) == Some(&b'I'));",
                "    assert!(writer.last() == Some(&b'y'));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "",
                "    let value = f64::NEG_INFINITY;",
                "    let mut writer = Vec::new();",
                "    TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(writer, b\"\");"
              ],
              "code": [
                "{",
                "   struct TestFormatter;",
                "",
                "   impl Formatter for TestFormatter {}",
                "   let value = f64::NEG_INFINITY;",
                "   let mut writer = Vec::new();",
                "   TestFormatter.write_f64(&mut writer, value).unwrap();",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}