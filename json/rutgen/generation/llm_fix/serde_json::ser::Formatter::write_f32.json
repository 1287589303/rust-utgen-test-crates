{
  "name": "serde_json::ser::Formatter::write_f32",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1706:5:1713:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid inputs for the function `write_f32` include: finite floating-point numbers in the range of `-3.4028235E38` to `3.4028235E38`, boundary cases like `-3.4028235E38`, `0.0`, `3.4028235E38`, and edge cases of `NaN`, `f32::INFINITY`, and `f32::NEG_INFINITY` for error handling scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, -3.4028235E38);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"-3.4028235E38\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 3.4028235E38);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"3.4028235E38\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"0\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, -0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"0\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 1.23);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"1.23\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"Infinity\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(String::from_utf8(output).unwrap().starts_with(\"NaN\"));"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, -3.4028235E38);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"-3.4028235E38\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 3.4028235E38);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"3.4028235E38\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"0\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, -0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"0\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 1.23);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"1.23\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"Infinity\");",
                "    ",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(String::from_utf8(output).unwrap().starts_with(\"NaN\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"0\");"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(String::from_utf8(output).unwrap(), \"0\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, 3.4028235E38);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"3.4028235e+38\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, -31.26e+12);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-31.260000e+12\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"0.000000e+00\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 1.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"1.000000e+00\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"nan\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"inf\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-inf\");",
                "    output.clear();"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, 3.4028235E38);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"3.4028235e+38\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, -31.26e+12);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-31.260000e+12\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"0.000000e+00\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, 1.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"1.000000e+00\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"nan\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"inf\");",
                "    output.clear();",
                "    let result = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-inf\");",
                "    output.clear();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, -1.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-1\");",
                "    ",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-10\"); // Updated output to match serialized output",
                "    ",
                "    let result = formatter.write_f32(&mut output, 1.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-100\");",
                "    ",
                "    let result = formatter.write_f32(&mut output, 31.26);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"31.26\"));",
                "    ",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"inf\"));",
                "    ",
                "    let result = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"-inf\"));",
                "    ",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"nan\"));"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, -1.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-1\");",
                "    ",
                "    let result = formatter.write_f32(&mut output, 0.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-10\"); // Updated output to match serialized output",
                "    ",
                "    let result = formatter.write_f32(&mut output, 1.0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(output, b\"-100\");",
                "    ",
                "    let result = formatter.write_f32(&mut output, 31.26);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"31.26\"));",
                "    ",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"inf\"));",
                "    ",
                "    let result = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"-inf\"));",
                "    ",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(output.ends_with(b\"nan\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, 1.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, b\"1\");",
                "    assert!(result.is_ok());",
                "    output.clear();",
                "    let result_nan = formatter.write_f32(&mut output, f32::NAN);",
                "    assert!(result_nan.is_ok());",
                "    output.clear();",
                "    let result_inf = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert!(result_inf.is_ok());",
                "    output.clear();",
                "    let result_neg_inf = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert!(result_neg_inf.is_ok());",
                "    output.clear();",
                "    let result_neg_value = formatter.write_f32(&mut output, -3.14);",
                "    assert_eq!(output, b\"-3.14\");",
                "    output.clear();",
                "    let result_large_value = formatter.write_f32(&mut output, 1e38);",
                "    assert_eq!(output, b\"1e38\");",
                "    output.clear();"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, 1.0);",
                "    assert_eq!(output, b\"1\");",
                "    assert!(result.is_ok());",
                "    output.clear();",
                "    let result_nan = formatter.write_f32(&mut output, f32::NAN);",
                "    assert!(result_nan.is_ok());",
                "    output.clear();",
                "    let result_inf = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert!(result_inf.is_ok());",
                "    output.clear();",
                "    let result_neg_inf = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert!(result_neg_inf.is_ok());",
                "    output.clear();",
                "    let result_neg_value = formatter.write_f32(&mut output, -3.14);",
                "    assert_eq!(output, b\"-3.14\");",
                "    output.clear();",
                "    let result_large_value = formatter.write_f32(&mut output, 1e38);",
                "    assert_eq!(output, b\"1e38\");",
                "    output.clear();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(output.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, f32::NAN);",
                "    assert!(result.is_err());",
                "    assert_eq!(output.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(output.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, f32::INFINITY);",
                "    assert!(result.is_err());",
                "    assert_eq!(output.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(output.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestFormatter;",
                "    let mut formatter = TestFormatter;",
                "    let mut output = Vec::new();",
                "    let result = formatter.write_f32(&mut output, f32::NEG_INFINITY);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(output.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}