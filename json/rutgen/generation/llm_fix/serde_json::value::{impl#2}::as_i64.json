{
  "name": "serde_json::value::{impl#2}::as_i64",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:631:5:636:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches _ at line 634 is true\n",
        "precondition: self matches Value::Number(n) at line 633 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self is any Value variant that is not Value::Number, such as Value::Null, Value::Bool, Value::String, Value::Array, or Value::Object\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Null;",
                "    v.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.as_i64(), None);"
              ],
              "code": [
                "{",
                "    let v = Value::Null;",
                "    v.as_i64();",
                "    assert_eq!(v.as_i64(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.as_i64(), None);"
              ],
              "code": [
                "{",
                "    let v = Value::Bool(true);",
                "    v.as_i64();",
                "    assert_eq!(v.as_i64(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::String(String::from(\"test\"));",
                "    v.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.as_i64(), None);"
              ],
              "code": [
                "{",
                "    let v = Value::String(String::from(\"test\"));",
                "    v.as_i64();",
                "    assert_eq!(v.as_i64(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Array(vec![Value::Bool(false), Value::String(String::from(\"array\"))]);",
                "    v.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.as_i64(), None);"
              ],
              "code": [
                "{",
                "    let v = Value::Array(vec![Value::Bool(false), Value::String(String::from(\"array\"))]);",
                "    v.as_i64();",
                "    assert_eq!(v.as_i64(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let v = Value::Object(Map::new());",
                "    v.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.as_i64(), None);"
              ],
              "code": [
                "{",
                "    let v = Value::Object(Map::new());",
                "    v.as_i64();",
                "    assert_eq!(v.as_i64(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Value::Number(n) at line 632 is true\n",
        "precondition: self matches Value::Number(n) at line 632 is true\n"
      ],
      "input_infer": "`Value::Number` containing integers within the range of -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807, floating point numbers that are representable as i64, and invalid values that exceed the i64 limits (including but not limited to large u64 and NaN values).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_i128(-123).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(-123));"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_i128(-123).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, Some(-123));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_i128(i128::MAX).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(i64::MAX));",
                "    let value = Value::Number(Number::from_u128(10).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, Some(10));",
                "    let value = Value::Number(Number::from_f64(10.5).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_i128(i128::MAX).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, Some(i64::MAX));",
                "    let value = Value::Number(Number::from_u128(10).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, Some(10));",
                "    let value = Value::Number(Number::from_f64(10.5).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_i128(i128::MIN).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_u128(100).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(100));",
                "    assert_eq!(value.is_number(), true);",
                "    assert!(value.as_number().is_some());",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_u64(), Some(100));",
                "    assert_eq!(value.as_f64(), Some(100.0));"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_u128(100).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, Some(100));",
                "    assert_eq!(value.is_number(), true);",
                "    assert!(value.as_number().is_some());",
                "    assert!(value.is_i64());",
                "    assert_eq!(value.as_u64(), Some(100));",
                "    assert_eq!(value.as_f64(), Some(100.0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_u128(u128::MAX).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_f64(1234.56).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(1234));"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_f64(1234.56).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, Some(1234));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
                "    let result = value.as_i64();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let value = Value::Number(Number::from_f64(f64::NAN).unwrap());",
                "    let result = value.as_i64();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}