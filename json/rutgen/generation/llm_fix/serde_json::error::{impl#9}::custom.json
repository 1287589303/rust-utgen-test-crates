{
  "name": "serde_json::error::{impl#9}::custom",
  "mod_info": {
    "name": "error",
    "loc": "src/lib.rs:419:1:419:15"
  },
  "visible": true,
  "loc": "src/error.rs:460:5:462:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: Provide a message string of varying lengths including empty string, single character strings, strings with special characters, and long strings (e.g., 0 to 10,000 characters) to test the `custom` function behavior.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let msg = \"\";",
                "    let _error = Error::custom(msg);",
                "}"
              ],
              "oracle": [
                "    let msg = \"\";",
                "    let error = Error::custom(msg);",
                "    assert_eq!(error.err.line, 0);",
                "    assert_eq!(error.err.column, 0);",
                "    assert!(matches!(error.err.code, ErrorCode::Message(_)));"
              ],
              "code": [
                "{",
                "    let msg = \"\";",
                "    let _error = Error::custom(msg);",
                "    let msg = \"\";",
                "    let error = Error::custom(msg);",
                "    assert_eq!(error.err.line, 0);",
                "    assert_eq!(error.err.column, 0);",
                "    assert!(matches!(error.err.code, ErrorCode::Message(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let msg = \"A\";",
                "    let _error = Error::custom(msg);",
                "}"
              ],
              "oracle": [
                "    let msg = \"A\";",
                "    let _error = Error::custom(msg);",
                "    assert!(_error.err.line == 0);",
                "    assert!(_error.err.column == 0);",
                "    assert!(_error.err.code == ErrorCode::Message(\"A\".into_boxed_str()));"
              ],
              "code": [
                "{",
                "    let msg = \"A\";",
                "    let _error = Error::custom(msg);",
                "    let msg = \"A\";",
                "    let _error = Error::custom(msg);",
                "    assert!(_error.err.line == 0);",
                "    assert!(_error.err.column == 0);",
                "    assert!(_error.err.code == ErrorCode::Message(\"A\".into_boxed_str()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let msg = \"!@#$%^&*()_+\";",
                "    let _error = Error::custom(msg);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_error.err.line, 0);",
                "    assert_eq!(_error.err.column, 0);",
                "    assert!(_error.err.code.is_message());",
                "    assert_eq!(_error.err.code.into_string().unwrap(), \"!@#$%^&*()_+\");"
              ],
              "code": [
                "{",
                "    let msg = \"!@#$%^&*()_+\";",
                "    let _error = Error::custom(msg);",
                "    assert_eq!(_error.err.line, 0);",
                "    assert_eq!(_error.err.column, 0);",
                "    assert!(_error.err.code.is_message());",
                "    assert_eq!(_error.err.code.into_string().unwrap(), \"!@#$%^&*()_+\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let msg = \"a\".repeat(10_000);",
                "    let _error = Error::custom(msg);",
                "}"
              ],
              "oracle": [
                "    let msg = \"a\".repeat(10_000);",
                "    let error = Error::custom(msg);",
                "    assert_eq!(error.line, 0);",
                "    assert_eq!(error.column, 0);",
                "    assert!(matches!(error.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(error.err.code.to_string(), msg);",
                "    let msg_empty = \"\";",
                "    let error_empty = Error::custom(msg_empty);",
                "    assert_eq!(error_empty.line, 0);",
                "    assert_eq!(error_empty.column, 0);",
                "    assert!(matches!(error_empty.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(error_empty.err.code.to_string(), msg_empty);",
                "    let msg_special = \"Error at line 5, column 3\";",
                "    let error_special = Error::custom(msg_special);",
                "    assert_eq!(error_special.line, 0);",
                "    assert_eq!(error_special.column, 0);",
                "    assert!(matches!(error_special.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(error_special.err.code.to_string(), msg_special);"
              ],
              "code": [
                "{",
                "    let msg = \"a\".repeat(10_000);",
                "    let _error = Error::custom(msg);",
                "    let msg = \"a\".repeat(10_000);",
                "    let error = Error::custom(msg);",
                "    assert_eq!(error.line, 0);",
                "    assert_eq!(error.column, 0);",
                "    assert!(matches!(error.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(error.err.code.to_string(), msg);",
                "    let msg_empty = \"\";",
                "    let error_empty = Error::custom(msg_empty);",
                "    assert_eq!(error_empty.line, 0);",
                "    assert_eq!(error_empty.column, 0);",
                "    assert!(matches!(error_empty.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(error_empty.err.code.to_string(), msg_empty);",
                "    let msg_special = \"Error at line 5, column 3\";",
                "    let error_special = Error::custom(msg_special);",
                "    assert_eq!(error_special.line, 0);",
                "    assert_eq!(error_special.column, 0);",
                "    assert!(matches!(error_special.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(error_special.err.code.to_string(), msg_special);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let messages = [",
                "        \"\",                          // empty string",
                "        \"B\",                        // single character",
                "        \"Hello, World!\",           // normal string",
                "        \"Special chars: !@#%^&*\",  // string with special characters",
                "        \"C\".repeat(1_000),         // string of 1000 characters",
                "    ];",
                "    for msg in messages.iter() {",
                "        let _error = Error::custom(msg);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Error::custom(\"\").err.line, 0);",
                "    assert_eq!(Error::custom(\"\").err.column, 0);",
                "    assert_eq!(Error::custom(\"B\").err.line, 0);",
                "    assert_eq!(Error::custom(\"B\").err.column, 0);",
                "    assert_eq!(Error::custom(\"Hello, World!\").err.line, 0);",
                "    assert_eq!(Error::custom(\"Hello, World!\").err.column, 0);",
                "    assert_eq!(Error::custom(\"Special chars: !@#%^&*\").err.line, 0);",
                "    assert_eq!(Error::custom(\"Special chars: !@#%^&*\").err.column, 0);",
                "    assert_eq!(Error::custom(\"C\".repeat(1_000)).err.line, 0);",
                "    assert_eq!(Error::custom(\"C\".repeat(1_000)).err.column, 0);"
              ],
              "code": [
                "{",
                "    let messages = [",
                "        \"\",                          // empty string",
                "        \"B\",                        // single character",
                "        \"Hello, World!\",           // normal string",
                "        \"Special chars: !@#%^&*\",  // string with special characters",
                "        \"C\".repeat(1_000),         // string of 1000 characters",
                "    ];",
                "    for msg in messages.iter() {",
                "        let _error = Error::custom(msg);",
                "    }",
                "    assert_eq!(Error::custom(\"\").err.line, 0);",
                "    assert_eq!(Error::custom(\"\").err.column, 0);",
                "    assert_eq!(Error::custom(\"B\").err.line, 0);",
                "    assert_eq!(Error::custom(\"B\").err.column, 0);",
                "    assert_eq!(Error::custom(\"Hello, World!\").err.line, 0);",
                "    assert_eq!(Error::custom(\"Hello, World!\").err.column, 0);",
                "    assert_eq!(Error::custom(\"Special chars: !@#%^&*\").err.line, 0);",
                "    assert_eq!(Error::custom(\"Special chars: !@#%^&*\").err.column, 0);",
                "    assert_eq!(Error::custom(\"C\".repeat(1_000)).err.line, 0);",
                "    assert_eq!(Error::custom(\"C\".repeat(1_000)).err.column, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}