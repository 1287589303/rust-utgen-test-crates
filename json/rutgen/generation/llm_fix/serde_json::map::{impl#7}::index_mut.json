{
  "name": "serde_json::map::{impl#7}::index_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:478:5:480:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.map.get_mut(index).expect(\"no entry found for key\")\n"
      ],
      "input_infer": "Valid input range for index: any existing key of type String in the Map, along with an empty map case and a non-existent key case to test error handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map { map: MapImpl::new() };",
                "    map.map.insert(\"existing_key\".to_string(), Value::String(\"value\".to_string()));",
                "    let index = \"existing_key\";",
                "    let entry = map.index_mut(&index);",
                "}"
              ],
              "oracle": [
                "    let mut map = Map { map: MapImpl::new() };",
                "    map.map.insert(\"existing_key\".to_string(), Value::String(\"value\".to_string()));",
                "    let index = \"existing_key\";",
                "    let entry = map.index_mut(&index);",
                "    assert_eq!(entry, &mut Value::String(\"value\".to_string()));"
              ],
              "code": [
                "{",
                "    let mut map = Map { map: MapImpl::new() };",
                "    map.map.insert(\"existing_key\".to_string(), Value::String(\"value\".to_string()));",
                "    let index = \"existing_key\";",
                "    let entry = map.index_mut(&index);",
                "    let mut map = Map { map: MapImpl::new() };",
                "    map.map.insert(\"existing_key\".to_string(), Value::String(\"value\".to_string()));",
                "    let index = \"existing_key\";",
                "    let entry = map.index_mut(&index);",
                "    assert_eq!(entry, &mut Value::String(\"value\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"no entry found for key\")]"
              ],
              "prefix": [
                "{",
                "    let mut map = Map { map: MapImpl::new() };",
                "    let index = \"non_existent_key\";",
                "    let entry = map.index_mut(&index);",
                "}"
              ],
              "oracle": [
                "    let mut map = Map { map: MapImpl::new() };",
                "    let index = \"non_existent_key\";",
                "    let result = map.index_mut(&index);",
                "    assert!(matches!(result, Err(\"no entry found for key\")));"
              ],
              "code": [
                "{",
                "    let mut map = Map { map: MapImpl::new() };",
                "    let index = \"non_existent_key\";",
                "    let entry = map.index_mut(&index);",
                "    let mut map = Map { map: MapImpl::new() };",
                "    let index = \"non_existent_key\";",
                "    let result = map.index_mut(&index);",
                "    assert!(matches!(result, Err(\"no entry found for key\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Map { map: MapImpl::new() };",
                "    let index = \"key_in_empty_map\";",
                "    let entry = map.index_mut(&index);",
                "}"
              ],
              "oracle": [
                "    let mut map = Map { map: MapImpl::new() };",
                "    assert_eq!(map.map.len(), 0);",
                "    let index = \"key_in_empty_map\";",
                "    let result = std::panic::catch_unwind(|| map.index_mut(&index));",
                "    assert!(result.is_err());",
                "    assert_eq!(map.map.len(), 0);",
                "    map.map.insert(String::from(\"key_in_map\"), Value::Null);",
                "    let index = \"key_in_map\";",
                "    let entry = map.index_mut(&index);",
                "    assert_eq!(entry, &mut Value::Null);"
              ],
              "code": [
                "{",
                "    let mut map = Map { map: MapImpl::new() };",
                "    let index = \"key_in_empty_map\";",
                "    let entry = map.index_mut(&index);",
                "    let mut map = Map { map: MapImpl::new() };",
                "    assert_eq!(map.map.len(), 0);",
                "    let index = \"key_in_empty_map\";",
                "    let result = std::panic::catch_unwind(|| map.index_mut(&index));",
                "    assert!(result.is_err());",
                "    assert_eq!(map.map.len(), 0);",
                "    map.map.insert(String::from(\"key_in_map\"), Value::Null);",
                "    let index = \"key_in_map\";",
                "    let entry = map.index_mut(&index);",
                "    assert_eq!(entry, &mut Value::Null);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}