{
  "name": "serde_json::ser::to_writer",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2169:1:2176:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "W: io::Write, T: any serializable data type including empty collections, nested structures, and invalid UTF-8 sequences, ensure special characters in strings and maps with valid/invalid keys are included, max size constraints on values per serialization limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = \"\";",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"\\\"\\\"\");",
                "    assert!(buffer.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = \"\";",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"\\\"\\\"\");",
                "    assert!(buffer.is_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = \"Hello, World!\";",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert!(buffer.is_empty() == false);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), r#\"\"Hello, World!\"\"#);",
                "    assert!(serde_json::to_writer(&mut buffer, &value).is_ok());",
                "    assert!(buffer.len() > 0);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = \"Hello, World!\";",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert!(buffer.is_empty() == false);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), r#\"\"Hello, World!\"\"#);",
                "    assert!(serde_json::to_writer(&mut buffer, &value).is_ok());",
                "    assert!(buffer.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = \"Special characters: \\\" \\\\ / \\n \\t\";",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, b\"\\\"Special characters: \\\\\\\" \\\\\\\\ \\\\/ \\\\n \\\\t\\\"\");"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = \"Special characters: \\\" \\\\ / \\n \\t\";",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert_eq!(buffer, b\"\\\"Special characters: \\\\\\\" \\\\\\\\ \\\\/ \\\\n \\\\t\\\"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value: Vec<i32> = Vec::new();",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.is_empty(), true);",
                "    assert!(buffer.capacity() > 0);",
                "    assert!(serde_json::to_writer(&mut buffer, &value).is_ok());"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value: Vec<i32> = Vec::new();",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert_eq!(buffer.is_empty(), true);",
                "    assert!(buffer.capacity() > 0);",
                "    assert!(serde_json::to_writer(&mut buffer, &value).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = vec![1, 2, 3, 4, 5];",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert!(buffer.len() > 0);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[1,2,3,4,5]\");",
                "    assert!(serde_json::to_writer(&mut buffer, &\"test_string\").is_ok());",
                "    let error_result = serde_json::to_writer(&mut buffer, &vec![(\"key\", 1)]);",
                "    assert!(error_result.is_err());",
                "    let empty_buffer: Vec<u8> = Vec::new();",
                "    assert!(serde_json::to_writer(&mut empty_buffer, &()).is_ok());",
                "    assert!(serde_json::to_writer(&mut buffer, &vec![1, 2, 3, 4, 5]).is_ok());",
                "    assert!(serde_json::to_writer(&mut buffer, &100).is_ok());"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = vec![1, 2, 3, 4, 5];",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert!(buffer.len() > 0);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), \"[1,2,3,4,5]\");",
                "    assert!(serde_json::to_writer(&mut buffer, &\"test_string\").is_ok());",
                "    let error_result = serde_json::to_writer(&mut buffer, &vec![(\"key\", 1)]);",
                "    assert!(error_result.is_err());",
                "    let empty_buffer: Vec<u8> = Vec::new();",
                "    assert!(serde_json::to_writer(&mut empty_buffer, &()).is_ok());",
                "    assert!(serde_json::to_writer(&mut buffer, &vec![1, 2, 3, 4, 5]).is_ok());",
                "    assert!(serde_json::to_writer(&mut buffer, &100).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct Inner {",
                "        value: String,",
                "    }",
                "",
                "    #[derive(serde::Serialize)]",
                "    struct Outer {",
                "        inner: Inner,",
                "    }",
                "",
                "    let mut buffer = Vec::new();",
                "    let value = Outer {",
                "        inner: Inner {",
                "            value: \"Nested Structure\".to_string(),",
                "        },",
                "    };",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), expected_length);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), r#\"{\"inner\":{\"value\":\"Nested Structure\"}}\"#);"
              ],
              "code": [
                "{",
                "    #[derive(serde::Serialize)]",
                "    struct Inner {",
                "        value: String,",
                "    }",
                "",
                "    #[derive(serde::Serialize)]",
                "    struct Outer {",
                "        inner: Inner,",
                "    }",
                "",
                "    let mut buffer = Vec::new();",
                "    let value = Outer {",
                "        inner: Inner {",
                "            value: \"Nested Structure\".to_string(),",
                "        },",
                "    };",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert_eq!(buffer.len(), expected_length);",
                "    assert_eq!(String::from_utf8(buffer).unwrap(), r#\"{\"inner\":{\"value\":\"Nested Structure\"}}\"#);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = vec![0xFF, 0xFE, 0xFD]; // Invalid UTF-8 bytes",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "}"
              ],
              "oracle": [
                "    assert!(buffer.is_empty());",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidUtf8);",
                "    assert_eq!(result.unwrap_err().to_string(), \"invalid UTF-8 sequence\");"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let value = vec![0xFF, 0xFE, 0xFD]; // Invalid UTF-8 bytes",
                "    let _ = serde_json::to_writer(&mut buffer, &value);",
                "    assert!(buffer.is_empty());",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().code(), ErrorCode::InvalidUtf8);",
                "    assert_eq!(result.unwrap_err().to_string(), \"invalid UTF-8 sequence\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let mut map = std::collections::HashMap::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    map.insert(\"key2\", \"value2\");",
                "    let _ = serde_json::to_writer(&mut buffer, &map);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), expected_length);",
                "    assert!(buffer.iter().all(|&byte| byte.is_ascii()));",
                "    assert!(std::str::from_utf8(&buffer).is_ok());",
                "    assert!(serde_json::from_slice::<std::collections::HashMap<String, String>>(&buffer).is_ok());",
                "    assert_eq!(buffer, expected_serialized_output);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let mut map = std::collections::HashMap::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    map.insert(\"key2\", \"value2\");",
                "    let _ = serde_json::to_writer(&mut buffer, &map);",
                "    assert_eq!(buffer.len(), expected_length);",
                "    assert!(buffer.iter().all(|&byte| byte.is_ascii()));",
                "    assert!(std::str::from_utf8(&buffer).is_ok());",
                "    assert!(serde_json::from_slice::<std::collections::HashMap<String, String>>(&buffer).is_ok());",
                "    assert_eq!(buffer, expected_serialized_output);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let mut map = std::collections::HashMap::new();",
                "    map.insert(1, \"value1\"); // Invalid key type, should panic",
                "    let _ = serde_json::to_writer(&mut buffer, &map);",
                "}"
              ],
              "oracle": [
                "    assert!(serde_json::to_writer(&mut buffer, &map).is_err());",
                "    assert_eq!(buffer.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::new();",
                "    let mut map = std::collections::HashMap::new();",
                "    map.insert(1, \"value1\"); // Invalid key type, should panic",
                "    let _ = serde_json::to_writer(&mut buffer, &map);",
                "    assert!(serde_json::to_writer(&mut buffer, &map).is_err());",
                "    assert_eq!(buffer.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}