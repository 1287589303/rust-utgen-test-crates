{
  "name": "serde_json::error::{impl#8}::custom",
  "mod_info": {
    "name": "error",
    "loc": "src/lib.rs:419:1:419:15"
  },
  "visible": true,
  "loc": "src/error.rs:435:5:437:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: any string message (msg) including empty string, long strings up to system memory limits, strings containing special characters, and strings representing maximum UTF-8 characters (0 to ~4 bytes each).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Error::custom(\"\");",
                "}"
              ],
              "oracle": [
                "    let expected = Error::custom(\"\".to_string());",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert!(matches!(result.err.code, ErrorCode::Message(_)));",
                "    let error_message = if let ErrorCode::Message(ref msg) = result.err.code { msg.clone() } else { String::new() };",
                "    assert_eq!(error_message, \"\");"
              ],
              "code": [
                "{",
                "    let result = Error::custom(\"\");",
                "    let expected = Error::custom(\"\".to_string());",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert!(matches!(result.err.code, ErrorCode::Message(_)));",
                "    let error_message = if let ErrorCode::Message(ref msg) = result.err.code { msg.clone() } else { String::new() };",
                "    assert_eq!(error_message, \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let long_message = \"a\".repeat(1_000_000); // Adjust length as appropriate for testing",
                "    let result = Error::custom(long_message);",
                "}"
              ],
              "oracle": [
                "    assert!(result.err.code.is_message());",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert_eq!(result.err.code.message(), \"a\".repeat(1_000_000));"
              ],
              "code": [
                "{",
                "    let long_message = \"a\".repeat(1_000_000); // Adjust length as appropriate for testing",
                "    let result = Error::custom(long_message);",
                "    assert!(result.err.code.is_message());",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert_eq!(result.err.code.message(), \"a\".repeat(1_000_000));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let special_message = \"Error: \\n\\t折叠\"; // Includes newline, tab, and special characters",
                "    let result = Error::custom(special_message);",
                "}"
              ],
              "oracle": [
                "    assert!(result.err.line == 0);",
                "    assert!(result.err.column == 0);",
                "    assert_eq!(result.err.code, ErrorCode::Message(\"Error: \\n\\t折叠\".into_boxed_str()));"
              ],
              "code": [
                "{",
                "    let special_message = \"Error: \\n\\t折叠\"; // Includes newline, tab, and special characters",
                "    let result = Error::custom(special_message);",
                "    assert!(result.err.line == 0);",
                "    assert!(result.err.column == 0);",
                "    assert_eq!(result.err.code, ErrorCode::Message(\"Error: \\n\\t折叠\".into_boxed_str()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let utf8_message = \"日本語\"; // Sample UTF-8 string",
                "    let result = Error::custom(utf8_message);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert!(matches!(result.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(result.err.code.to_string(), \"日本語\");"
              ],
              "code": [
                "{",
                "    let utf8_message = \"日本語\"; // Sample UTF-8 string",
                "    let result = Error::custom(utf8_message);",
                "    assert_eq!(result.err.line, 0);",
                "    assert_eq!(result.err.column, 0);",
                "    assert!(matches!(result.err.code, ErrorCode::Message(_)));",
                "    assert_eq!(result.err.code.to_string(), \"日本語\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_utf8_message = \"\\u{10FFFF}\"; // Maximum valid UTF-8 character",
                "    let result = Error::custom(max_utf8_message);",
                "}"
              ],
              "oracle": [
                "    let result = Error::custom(\"\"); // Empty message",
                "    let result = Error::custom(\"Valid error message\"); // Regular valid message",
                "    let result = Error::custom(\"\\nNewline in message\"); // Message with newline",
                "    let result = Error::custom(\"\\tTab in message\"); // Message with tab",
                "    let result = Error::custom(\"\\u{FFFD}\"); // Replacement character",
                "    let result = Error::custom(\"\\u{10FFFF}\"); // Max valid UTF-8 character",
                "    let result = Error::custom(\"\\u{10000}\"); // Valid beyond BMP",
                "    let result = Error::custom(\"\\u{1FFFFF}\"); // Valid in supplementary planes",
                "    let result = Error::custom(\"Error message with special chars !@#$%^&*()\"); // Special characters",
                "    let result = Error::custom(\"Message with emoji 😊\"); // Emoji in message"
              ],
              "code": [
                "{",
                "    let max_utf8_message = \"\\u{10FFFF}\"; // Maximum valid UTF-8 character",
                "    let result = Error::custom(max_utf8_message);",
                "    let result = Error::custom(\"\"); // Empty message",
                "    let result = Error::custom(\"Valid error message\"); // Regular valid message",
                "    let result = Error::custom(\"\\nNewline in message\"); // Message with newline",
                "    let result = Error::custom(\"\\tTab in message\"); // Message with tab",
                "    let result = Error::custom(\"\\u{FFFD}\"); // Replacement character",
                "    let result = Error::custom(\"\\u{10FFFF}\"); // Max valid UTF-8 character",
                "    let result = Error::custom(\"\\u{10000}\"); // Valid beyond BMP",
                "    let result = Error::custom(\"\\u{1FFFFF}\"); // Valid in supplementary planes",
                "    let result = Error::custom(\"Error message with special chars !@#$%^&*()\"); // Special characters",
                "    let result = Error::custom(\"Message with emoji 😊\"); // Emoji in message",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}