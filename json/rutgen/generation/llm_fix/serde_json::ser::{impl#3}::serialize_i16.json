{
  "name": "serde_json::ser::{impl#3}::serialize_i16",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:92:5:96:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "i16 values within the range [-32,768, 32,767] including boundary cases and typical values such as -1, 0, 1, and special cases (like the maximum and minimum values) to validate serialization success or error handling.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(-32_768);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(0);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(32_767);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(12345);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(-12345);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(matches!(serializer.serialize_i16(i16::MAX + 1), Err(Error::io(_))));",
                "    assert!(matches!(serializer.serialize_i16(i16::MIN - 1), Err(Error::io(_))));"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(-32_768);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(0);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(32_767);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(12345);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(-12345);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(matches!(serializer.serialize_i16(i16::MAX + 1), Err(Error::io(_))));",
                "    assert!(matches!(serializer.serialize_i16(i16::MIN - 1), Err(Error::io(_))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(-1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(-1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(1);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    ",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(0);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert_eq!(result, Ok(()));",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(1);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "    let result = serializer.serialize_i16(-1);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "    let result = serializer.serialize_i16(i16::MAX);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "    let result = serializer.serialize_i16(i16::MIN);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), ());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(32_767);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(serializer.writer.bytes_written, 2);",
                "    ",
                "    let result_neg = serializer.serialize_i16(-32_768);",
                "    assert!(result_neg.is_ok());",
                "    assert_eq!(result_neg.unwrap(), ());",
                "    assert_eq!(serializer.writer.bytes_written, 2);",
                "    ",
                "    let result_overflow = serializer.serialize_i16(32_768);",
                "    assert!(result_overflow.is_err());",
                "    assert_eq!(result_overflow.unwrap_err().code(), ErrorCode::Overflow);"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            Ok(buf.len())",
                "        }",
                "        fn write_all(&mut self, buf: &[u8]) -> Result<()> {",
                "            Ok(())",
                "        }",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = MockWriter;",
                "    let mut serializer = Serializer {",
                "        writer,",
                "        formatter: CompactFormatter,",
                "    };",
                "",
                "    let result = serializer.serialize_i16(32_767);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), ());",
                "    assert_eq!(serializer.writer.bytes_written, 2);",
                "    ",
                "    let result_neg = serializer.serialize_i16(-32_768);",
                "    assert!(result_neg.is_ok());",
                "    assert_eq!(result_neg.unwrap(), ());",
                "    assert_eq!(serializer.writer.bytes_written, 2);",
                "    ",
                "    let result_overflow = serializer.serialize_i16(32_768);",
                "    assert!(result_overflow.is_err());",
                "    assert_eq!(result_overflow.unwrap_err().code(), ErrorCode::Overflow);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}