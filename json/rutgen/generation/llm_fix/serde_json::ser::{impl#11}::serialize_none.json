{
  "name": "serde_json::ser::{impl#11}::serialize_none",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:1090:5:1092:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "Test input condition: call serialize_none() without any parameters, expecting to return Err(key_must_be_a_string()).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: MockWriter,",
                "            formatter: MockFormatter,",
                "        },",
                "    };",
                "",
                "    let _result = serializer.serialize_none();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    struct MockWriter;",
                "    struct MockFormatter;",
                "",
                "    let mut serializer = MapKeySerializer {",
                "        ser: &mut Serializer {",
                "            writer: MockWriter,",
                "            formatter: MockFormatter,",
                "        },",
                "    };",
                "",
                "    let _result = serializer.serialize_none();",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}