{
  "name": "serde_json::ser::{impl#3}::serialize_bool",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:78:5:82:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: boolean values (true, false) for `value`, and valid writer implementations that adhere to the `io::Write` trait for `self.writer`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(true);",
                "}"
              ],
              "oracle": [
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(true);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(false);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(true);",
                "    assert_eq!(serializer.writer.output, b\"true\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(false);",
                "    assert_eq!(serializer.writer.output, b\"false\");"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(true);",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(true);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(false);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(true);",
                "    assert_eq!(serializer.writer.output, b\"true\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(false);",
                "    assert_eq!(serializer.writer.output, b\"false\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(false);",
                "}"
              ],
              "oracle": [
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(false);",
                "    assert_eq!(serializer.writer.output, b\"false\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(true);",
                "    assert_eq!(serializer.writer.output, b\"true\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(false);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(true);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(false);",
                "    assert!(serializer.writer.output.len() > 0);",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(true);",
                "    assert!(serializer.writer.output.len() > 0);"
              ],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for TestWriter {",
                "        fn write(&mut self, buf: &[u8]) -> Result<usize> {",
                "            self.output.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(false);",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(false);",
                "    assert_eq!(serializer.writer.output, b\"false\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(true);",
                "    assert_eq!(serializer.writer.output, b\"true\");",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(false);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let result = serializer.serialize_bool(true);",
                "    assert!(result.is_ok());",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(false);",
                "    assert!(serializer.writer.output.len() > 0);",
                "    ",
                "    let writer = TestWriter { output: Vec::new() };",
                "    let mut serializer = Serializer { writer, formatter: CompactFormatter {} };",
                "    let _ = serializer.serialize_bool(true);",
                "    assert!(serializer.writer.output.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}