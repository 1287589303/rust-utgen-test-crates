{
  "name": "serde_json::value::ser::{impl#7}::serialize_unit_struct",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:570:5:572:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Err(key_must_be_a_string())\n"
      ],
      "input_infer": "self: MapKeySerializer, _name: any static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"valid_name\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"valid_name\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err(), key_must_be_a_string());"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "    assert!(_result.is_err());",
                "    assert_eq!(_result.unwrap_err(), key_must_be_a_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"a_long_name_exceeding_normal_length_to_test_boundaries\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"a_long_name_exceeding_normal_length_to_test_boundaries\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"!@#$%^&*()_+\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"!@#$%^&*()_+\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"12345\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"12345\";",
                "    let _result = serializer.serialize_unit_struct(name);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"测试\"; // Chinese for \"test\"",
                "    let _result = serializer.serialize_unit_struct(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(key_must_be_a_string()));"
              ],
              "code": [
                "{",
                "    let serializer = MapKeySerializer;",
                "    let name = \"测试\"; // Chinese for \"test\"",
                "    let _result = serializer.serialize_unit_struct(name);",
                "    assert_eq!(_result, Err(key_must_be_a_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}