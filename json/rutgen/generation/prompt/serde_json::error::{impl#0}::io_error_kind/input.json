{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nstruct ErrorImpl {\n    code: ErrorCode,\n    line: usize,\n    column: usize,\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\nimpl Error {\n    pub fn line(&self) -> usize {}\n    pub fn column(&self) -> usize {}\n    pub fn classify(&self) -> Category {}\n    pub fn is_io(&self) -> bool {}\n    pub fn is_syntax(&self) -> bool {}\n    pub fn is_data(&self) -> bool {}\n    pub fn is_eof(&self) -> bool {}\n    #[cfg(feature = \"std\")]\n    pub fn io_error_kind(&self) -> Option<ErrorKind> {\n        if let ErrorCode::Io(io_error) = &self.err.code {\n            Some(io_error.kind())\n        } else {\n            None\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// The kind reported by the underlying standard library I/O error, if this\n/// error was caused by a failure to read or write bytes on an I/O stream.\n///\n/// # Example\n///\n/// ```\n/// use serde_json::Value;\n/// use std::io::{self, ErrorKind, Read};\n/// use std::process;\n///\n/// struct ReaderThatWillTimeOut<'a>(&'a [u8]);\n///\n/// impl<'a> Read for ReaderThatWillTimeOut<'a> {\n///     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n///         if self.0.is_empty() {\n///             Err(io::Error::new(ErrorKind::TimedOut, \"timed out\"))\n///         } else {\n///             self.0.read(buf)\n///         }\n///     }\n/// }\n///\n/// fn main() {\n///     let reader = ReaderThatWillTimeOut(br#\" {\"k\": \"#);\n///\n///     let _: Value = match serde_json::from_reader(reader) {\n///         Ok(value) => value,\n///         Err(error) => {\n///             if error.io_error_kind() == Some(ErrorKind::TimedOut) {\n///                 // Maybe this application needs to retry certain kinds of errors.\n///\n///                 # return;\n///             } else {\n///                 eprintln!(\"error: {}\", error);\n///                 process::exit(1);\n///             }\n///         }\n///     };\n/// }\n/// ```\n155 pub fn io_error_kind(&self) -> Option<ErrorKind> {\n156     if let ErrorCode::Io(io_error) = &self.err.code {\n157         Some(io_error.kind())\n158     } else {\n159         None\n160     }\n161 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}