{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\nstruct UnitOnly;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nstruct VariantAccess<'a, R: 'a> {\n    de: &'a mut Deserializer<R>,\n}\npub struct Error;\nimpl<'de> de::VariantAccess<'de> for UnitOnly {\n    type Error = Error;\n    fn unit_variant(self) -> Result<(), Error> {}\n    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Error>\n    where\n        T: de::DeserializeSeed<'de>,\n    {\n        Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"newtype variant\"))\n    }\n    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Error>\n    where\n        V: de::Visitor<'de>,\n    {}\n    fn struct_variant<V>(\n        self,\n        _fields: &'static [&'static str],\n        _visitor: V,\n    ) -> Result<V::Value, Error>\n    where\n        V: de::Visitor<'de>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1467 fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Error>\n1468 where\n1469     T: de::DeserializeSeed<'de>,\n1470 {\n1471     Err(de::Error::invalid_type(\n1472         Unexpected::UnitVariant,\n1473         &\"newtype variant\",\n1474     ))\n1475 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}