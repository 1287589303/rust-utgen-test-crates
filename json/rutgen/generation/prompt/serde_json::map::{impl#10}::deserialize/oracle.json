{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is serde_json\n#[cfg(not(feature = \"preserve_order\"))]\ntype MapImpl<K, V> = BTreeMap<K, V>;\n#[cfg(feature = \"preserve_order\")]\ntype MapImpl<K, V> = IndexMap<K, V>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype VacantEntryImpl<'a> = btree_map::VacantEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype VacantEntryImpl<'a> = indexmap::map::VacantEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype OccupiedEntryImpl<'a> = btree_map::OccupiedEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype OccupiedEntryImpl<'a> = indexmap::map::OccupiedEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterImpl<'a> = btree_map::Iter<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterImpl<'a> = indexmap::map::Iter<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterMutImpl<'a> = btree_map::IterMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterMutImpl<'a> = indexmap::map::IterMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoIterImpl = btree_map::IntoIter<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoIterImpl = indexmap::map::IntoIter<String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype KeysImpl<'a> = btree_map::Keys<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype KeysImpl<'a> = indexmap::map::Keys<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesImpl<'a> = btree_map::Values<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesImpl<'a> = indexmap::map::Values<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesMutImpl<'a> = btree_map::ValuesMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesMutImpl<'a> = indexmap::map::ValuesMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoValuesImpl = btree_map::IntoValues<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoValuesImpl = indexmap::map::IntoValues<String, Value>;\nuse crate::error::Error;\nuse crate::value::Value;\nuse alloc::string::String;\n#[cfg(feature = \"preserve_order\")]\nuse alloc::vec::Vec;\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{Hash, Hasher};\nuse core::iter::FusedIterator;\n#[cfg(feature = \"preserve_order\")]\nuse core::mem;\nuse core::ops;\nuse serde::de;\n#[cfg(not(feature = \"preserve_order\"))]\nuse alloc::collections::{btree_map, BTreeMap};\n#[cfg(feature = \"preserve_order\")]\nuse indexmap::IndexMap;\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl<'de> de::Deserialize<'de> for Map<String, Value> {\n    #[inline]\n    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n    where\n        D: de::Deserializer<'de>,\n    {\n        struct Visitor;\n        impl<'de> de::Visitor<'de> for Visitor {\n            type Value = Map<String, Value>;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"a map\")\n            }\n            #[inline]\n            fn visit_unit<E>(self) -> Result<Self::Value, E>\n            where\n                E: de::Error,\n            {\n                Ok(Map::new())\n            }\n            #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n            #[inline]\n            fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>\n            where\n                V: de::MapAccess<'de>,\n            {\n                let mut values = Map::new();\n                while let Some((key, value)) = tri!(visitor.next_entry()) {\n                    values.insert(key, value);\n                }\n                Ok(values)\n            }\n        }\n        deserializer.deserialize_map(Visitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n508 fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n509 where\n510     D: de::Deserializer<'de>,\n511 {\n512     struct Visitor;\n513 \n514     impl<'de> de::Visitor<'de> for Visitor {\n515         type Value = Map<String, Value>;\n516 \n517         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n518             formatter.write_str(\"a map\")\n519         }\n520 \n521         #[inline]\n522         fn visit_unit<E>(self) -> Result<Self::Value, E>\n523         where\n524             E: de::Error,\n525         {\n526             Ok(Map::new())\n527         }\n528 \n529         #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n530         #[inline]\n531         fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>\n532         where\n533             V: de::MapAccess<'de>,\n534         {\n535             let mut values = Map::new();\n536 \n537             while let Some((key, value)) = tri!(visitor.next_entry()) {\n538                 values.insert(key, value);\n539             }\n540 \n541             Ok(values)\n542         }\n543     }\n544 \n545     deserializer.deserialize_map(Visitor)\n546 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}