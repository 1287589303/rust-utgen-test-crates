{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nstruct ErrorImpl {\n    code: ErrorCode,\n    line: usize,\n    column: usize,\n}\nimpl Error {\n    pub fn line(&self) -> usize {\n        self.err.line\n    }\n    pub fn column(&self) -> usize {}\n    pub fn classify(&self) -> Category {}\n    pub fn is_io(&self) -> bool {}\n    pub fn is_syntax(&self) -> bool {}\n    pub fn is_data(&self) -> bool {}\n    pub fn is_eof(&self) -> bool {}\n    #[cfg(feature = \"std\")]\n    pub fn io_error_kind(&self) -> Option<ErrorKind> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// One-based line number at which the error was detected.\n///\n/// Characters in the first line of the input (before the first newline\n/// character) are in line 1.\n32 pub fn line(&self) -> usize {\n33     self.err.line\n34 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}