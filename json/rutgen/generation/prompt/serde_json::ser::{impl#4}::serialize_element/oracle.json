{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\npub struct SerializeStructVariant {\n    name: String,\n    map: Map<String, Value>,\n}\npub struct Serializer;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub struct SerializeTupleVariant {\n    name: String,\n    vec: Vec<Value>,\n}\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub struct Serializer<W, F = CompactFormatter> {\n    writer: W,\n    formatter: F,\n}\npub struct Error;\npub enum Compound<'a, W: 'a, F: 'a> {\n    Map { ser: &'a mut Serializer<W, F>, state: State },\n    #[cfg(feature = \"arbitrary_precision\")]\n    Number { ser: &'a mut Serializer<W, F> },\n    #[cfg(feature = \"raw_value\")]\n    RawValue { ser: &'a mut Serializer<W, F> },\n}\n#[derive(Eq, PartialEq)]\npub enum State {\n    Empty,\n    First,\n    Rest,\n}\npub enum SerializeMap {\n    Map { map: Map<String, Value>, next_key: Option<String> },\n    #[cfg(feature = \"arbitrary_precision\")]\n    Number { out_value: Option<Value> },\n    #[cfg(feature = \"raw_value\")]\n    RawValue { out_value: Option<Value> },\n}\nimpl<'a, W, F> ser::SerializeSeq for Compound<'a, W, F>\nwhere\n    W: io::Write,\n    F: Formatter,\n{\n    type Ok = ();\n    type Error = Error;\n    #[inline]\n    fn serialize_element<T>(&mut self, value: &T) -> Result<()>\n    where\n        T: ?Sized + Serialize,\n    {\n        match self {\n            Compound::Map { ser, state } => {\n                tri!(\n                    ser.formatter.begin_array_value(& mut ser.writer, * state ==\n                    State::First).map_err(Error::io)\n                );\n                *state = State::Rest;\n                tri!(value.serialize(& mut ** ser));\n                ser.formatter.end_array_value(&mut ser.writer).map_err(Error::io)\n            }\n            #[cfg(feature = \"arbitrary_precision\")]\n            Compound::Number { .. } => unreachable!(),\n            #[cfg(feature = \"raw_value\")]\n            Compound::RawValue { .. } => unreachable!(),\n        }\n    }\n    #[inline]\n    fn end(self) -> Result<()> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n489 fn serialize_element<T>(&mut self, value: &T) -> Result<()>\n490 where\n491     T: ?Sized + Serialize,\n492 {\n493     match self {\n494         Compound::Map { ser, state } => {\n495             tri!(ser\n496                 .formatter\n497                 .begin_array_value(&mut ser.writer, *state == State::First)\n498                 .map_err(Error::io));\n499             *state = State::Rest;\n500             tri!(value.serialize(&mut **ser));\n501             ser.formatter\n502                 .end_array_value(&mut ser.writer)\n503                 .map_err(Error::io)\n504         }\n505         #[cfg(feature = \"arbitrary_precision\")]\n506         Compound::Number { .. } => unreachable!(),\n507         #[cfg(feature = \"raw_value\")]\n508         Compound::RawValue { .. } => unreachable!(),\n509     }\n510 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}