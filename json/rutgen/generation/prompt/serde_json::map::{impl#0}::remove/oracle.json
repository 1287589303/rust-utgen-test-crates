{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is serde_json\n#[cfg(not(feature = \"preserve_order\"))]\ntype MapImpl<K, V> = BTreeMap<K, V>;\n#[cfg(feature = \"preserve_order\")]\ntype MapImpl<K, V> = IndexMap<K, V>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype VacantEntryImpl<'a> = btree_map::VacantEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype VacantEntryImpl<'a> = indexmap::map::VacantEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype OccupiedEntryImpl<'a> = btree_map::OccupiedEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype OccupiedEntryImpl<'a> = indexmap::map::OccupiedEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterImpl<'a> = btree_map::Iter<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterImpl<'a> = indexmap::map::Iter<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterMutImpl<'a> = btree_map::IterMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterMutImpl<'a> = indexmap::map::IterMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoIterImpl = btree_map::IntoIter<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoIterImpl = indexmap::map::IntoIter<String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype KeysImpl<'a> = btree_map::Keys<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype KeysImpl<'a> = indexmap::map::Keys<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesImpl<'a> = btree_map::Values<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesImpl<'a> = indexmap::map::Values<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesMutImpl<'a> = btree_map::ValuesMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesMutImpl<'a> = indexmap::map::ValuesMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoValuesImpl = btree_map::IntoValues<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoValuesImpl = indexmap::map::IntoValues<String, Value>;\nuse crate::error::Error;\nuse crate::value::Value;\nuse alloc::string::String;\n#[cfg(feature = \"preserve_order\")]\nuse alloc::vec::Vec;\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{Hash, Hasher};\nuse core::iter::FusedIterator;\n#[cfg(feature = \"preserve_order\")]\nuse core::mem;\nuse core::ops;\nuse serde::de;\n#[cfg(not(feature = \"preserve_order\"))]\nuse alloc::collections::{btree_map, BTreeMap};\n#[cfg(feature = \"preserve_order\")]\nuse indexmap::IndexMap;\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl Map<String, Value> {\n    #[inline]\n    pub fn new() -> Self {\n        Map { map: MapImpl::new() }\n    }\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> Self {\n        Map {\n            #[cfg(not(feature = \"preserve_order\"))]\n            map: {\n                let _ = capacity;\n                BTreeMap::new()\n            },\n            #[cfg(feature = \"preserve_order\")]\n            map: IndexMap::with_capacity(capacity),\n        }\n    }\n    #[inline]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn get<Q>(&self, key: &Q) -> Option<&Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn contains_key<Q>(&self, key: &Q) -> bool\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn get_key_value<Q>(&self, key: &Q) -> Option<(&String, &Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn insert(&mut self, k: String, v: Value) -> Option<Value> {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_insert(&mut self, index: usize, k: String, v: Value) -> Option<Value> {}\n    #[inline]\n    pub fn remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {\n        #[cfg(feature = \"preserve_order\")] return self.swap_remove(key);\n        #[cfg(not(feature = \"preserve_order\"))] return self.map.remove(key);\n    }\n    #[inline]\n    pub fn remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn append(&mut self, other: &mut Self) {}\n    pub fn entry<S>(&mut self, key: S) -> Entry\n    where\n        S: Into<String>,\n    {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> Iter {}\n    #[inline]\n    pub fn iter_mut(&mut self) -> IterMut {}\n    #[inline]\n    pub fn keys(&self) -> Keys {}\n    #[inline]\n    pub fn values(&self) -> Values {}\n    #[inline]\n    pub fn values_mut(&mut self) -> ValuesMut {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues {}\n    #[inline]\n    pub fn retain<F>(&mut self, f: F)\n    where\n        F: FnMut(&String, &mut Value) -> bool,\n    {}\n    #[inline]\n    pub fn sort_keys(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Removes a key from the map, returning the value at the key if the key\n/// was previously in the map.\n///\n/// The key may be any borrowed form of the map's key type, but the ordering\n/// on the borrowed form *must* match the ordering on the key type.\n///\n/// If serde_json's \"preserve_order\" is enabled, `.remove(key)` is\n/// equivalent to [`.swap_remove(key)`][Self::swap_remove], replacing this\n/// entry's position with the last element. If you need to preserve the\n/// relative order of the keys in the map, use\n/// [`.shift_remove(key)`][Self::shift_remove] instead.\n156 pub fn remove<Q>(&mut self, key: &Q) -> Option<Value>\n157 where\n158     String: Borrow<Q>,\n159     Q: ?Sized + Ord + Eq + Hash,\n160 {\n161     #[cfg(feature = \"preserve_order\")]\n162     return self.swap_remove(key);\n163     #[cfg(not(feature = \"preserve_order\"))]\n164     return self.map.remove(key);\n165 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}