{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\nfn decode_four_hex_digits(a: u8, b: u8, c: u8, d: u8) -> Option<u16> {\n    let a = HEX1[a as usize] as i32;\n    let b = HEX0[b as usize] as i32;\n    let c = HEX1[c as usize] as i32;\n    let d = HEX0[d as usize] as i32;\n    let codepoint = ((a | b) << 8) | c | d;\n    if codepoint >= 0 { Some(codepoint as u16) } else { None }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1075 fn decode_four_hex_digits(a: u8, b: u8, c: u8, d: u8) -> Option<u16> {\n1076     let a = HEX1[a as usize] as i32;\n1077     let b = HEX0[b as usize] as i32;\n1078     let c = HEX1[c as usize] as i32;\n1079     let d = HEX0[d as usize] as i32;\n1080 \n1081     let codepoint = ((a | b) << 8) | c | d;\n1082 \n1083     // A single sign bit check.\n1084     if codepoint >= 0 {\n1085         Some(codepoint as u16)\n1086     } else {\n1087         None\n1088     }\n1089 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}