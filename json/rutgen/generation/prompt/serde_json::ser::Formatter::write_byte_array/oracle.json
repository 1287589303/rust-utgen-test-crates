{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\npub trait Formatter {\n    #[inline]\n    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i8<W>(&mut self, writer: &mut W, value: i8) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i16<W>(&mut self, writer: &mut W, value: i16) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i32<W>(&mut self, writer: &mut W, value: i32) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i128<W>(&mut self, writer: &mut W, value: i128) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u8<W>(&mut self, writer: &mut W, value: u8) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u16<W>(&mut self, writer: &mut W, value: u16) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u32<W>(&mut self, writer: &mut W, value: u32) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u128<W>(&mut self, writer: &mut W, value: u128) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_f32<W>(&mut self, writer: &mut W, value: f32) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_number_str<W>(&mut self, writer: &mut W, value: &str) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_string_fragment<W>(\n        &mut self,\n        writer: &mut W,\n        fragment: &str,\n    ) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_char_escape<W>(\n        &mut self,\n        writer: &mut W,\n        char_escape: CharEscape,\n    ) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    fn write_byte_array<W>(&mut self, writer: &mut W, value: &[u8]) -> io::Result<()>\n    where\n        W: ?Sized + io::Write,\n    {\n        tri!(self.begin_array(writer));\n        let mut first = true;\n        for byte in value {\n            tri!(self.begin_array_value(writer, first));\n            tri!(self.write_u8(writer, * byte));\n            tri!(self.end_array_value(writer));\n            first = false;\n        }\n        self.end_array(writer)\n    }\n    #[inline]\n    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_raw_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes the representation of a byte array. Formatters can choose whether\n/// to represent bytes as a JSON array of integers (the default), or some\n/// JSON string encoding like hex or base64.\n1816 fn write_byte_array<W>(&mut self, writer: &mut W, value: &[u8]) -> io::Result<()>\n1817 where\n1818     W: ?Sized + io::Write,\n1819 {\n1820     tri!(self.begin_array(writer));\n1821     let mut first = true;\n1822     for byte in value {\n1823         tri!(self.begin_array_value(writer, first));\n1824         tri!(self.write_u8(writer, *byte));\n1825         tri!(self.end_array_value(writer));\n1826         first = false;\n1827     }\n1828     self.end_array(writer)\n1829 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}