{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/index.rs\n// crate name is serde_json\nuse super::Value;\nuse crate::map::Map;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse core::fmt::{self, Display};\nuse core::ops;\npub trait Number: AsCast + ops::Add<Output = Self> {}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl<I> ops::IndexMut<I> for Value\nwhere\n    I: Index,\n{\n    fn index_mut(&mut self, index: I) -> &mut Value {\n        index.index_or_insert(self)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write into a `serde_json::Value` using the syntax `value[0] = ...` or\n/// `value[\"k\"] = ...`.\n///\n/// If the index is a number, the value must be an array of length bigger\n/// than the index. Indexing into a value that is not an array or an array\n/// that is too small will panic.\n///\n/// If the index is a string, the value must be an object or null which is\n/// treated like an empty object. If the key is not already present in the\n/// object, it will be inserted with a value of null. Indexing into a value\n/// that is neither an object nor null will panic.\n///\n/// # Examples\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let mut data = json!({ \"x\": 0 });\n///\n/// // replace an existing key\n/// data[\"x\"] = json!(1);\n///\n/// // insert a new key\n/// data[\"y\"] = json!([false, false, false]);\n///\n/// // replace an array value\n/// data[\"y\"][0] = json!(true);\n///\n/// // inserted a deeply nested key\n/// data[\"a\"][\"b\"][\"c\"][\"d\"] = json!(true);\n///\n/// println!(\"{}\", data);\n/// ```\n255 fn index_mut(&mut self, index: I) -> &mut Value {\n256     index.index_or_insert(self)\n257 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}