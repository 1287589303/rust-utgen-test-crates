{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/mod.rs\n// crate name is serde_json\nuse crate::error::Error;\nuse crate::io;\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug, Display};\nuse core::mem;\nuse core::str;\nuse serde::de::DeserializeOwned;\nuse serde::ser::Serialize;\npub use self::index::Index;\npub use self::ser::Serializer;\npub use crate::map::Map;\npub use crate::number::Number;\n#[cfg(feature = \"raw_value\")]\n#[cfg_attr(docsrs, doc(cfg(feature = \"raw_value\")))]\npub use crate::raw::{to_raw_value, RawValue};\npub trait Number: AsCast + ops::Add<Output = Self> {}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl Display for Value {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        struct WriterFormatter<'a, 'b: 'a> {\n            inner: &'a mut fmt::Formatter<'b>,\n        }\n        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {\n            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n                let s = unsafe { str::from_utf8_unchecked(buf) };\n                tri!(self.inner.write_str(s).map_err(io_error));\n                Ok(buf.len())\n            }\n            fn flush(&mut self) -> io::Result<()> {\n                Ok(())\n            }\n        }\n        fn io_error(_: fmt::Error) -> io::Error {\n            io::Error::new(io::ErrorKind::Other, \"fmt error\")\n        }\n        let alternate = f.alternate();\n        let mut wr = WriterFormatter { inner: f };\n        if alternate {\n            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)\n        } else {\n            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Display a JSON value as a string.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let json = json!({ \"city\": \"London\", \"street\": \"10 Downing Street\" });\n///\n/// // Compact format:\n/// //\n/// // {\"city\":\"London\",\"street\":\"10 Downing Street\"}\n/// let compact = format!(\"{}\", json);\n/// assert_eq!(compact,\n///     \"{\\\"city\\\":\\\"London\\\",\\\"street\\\":\\\"10 Downing Street\\\"}\");\n///\n/// // Pretty format:\n/// //\n/// // {\n/// //   \"city\": \"London\",\n/// //   \"street\": \"10 Downing Street\"\n/// // }\n/// let pretty = format!(\"{:#}\", json);\n/// assert_eq!(pretty,\n///     \"{\\n  \\\"city\\\": \\\"London\\\",\\n  \\\"street\\\": \\\"10 Downing Street\\\"\\n}\");\n/// ```\n222 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n223     struct WriterFormatter<'a, 'b: 'a> {\n224         inner: &'a mut fmt::Formatter<'b>,\n225     }\n226 \n227     impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {\n228         fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n229             // Safety: the serializer below only emits valid utf8 when using\n230             // the default formatter.\n231             let s = unsafe { str::from_utf8_unchecked(buf) };\n232             tri!(self.inner.write_str(s).map_err(io_error));\n233             Ok(buf.len())\n234         }\n235 \n236         fn flush(&mut self) -> io::Result<()> {\n237             Ok(())\n238         }\n239     }\n240 \n241     fn io_error(_: fmt::Error) -> io::Error {\n242         // Error value does not matter because Display impl just maps it\n243         // back to fmt::Error.\n244         io::Error::new(io::ErrorKind::Other, \"fmt error\")\n245     }\n246 \n247     let alternate = f.alternate();\n248     let mut wr = WriterFormatter { inner: f };\n249     if alternate {\n250         // {:#}\n251         super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)\n252     } else {\n253         // {}\n254         super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)\n255     }\n256 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}