{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\npub trait Read<'de>: private::Sealed {\n    const should_early_return_if_failed: bool;\n    fn next(&mut self) -> Result<Option<u8>>;\n    fn peek(&mut self) -> Result<Option<u8>>;\n    fn discard(&mut self);\n    fn position(&self) -> Position;\n    fn peek_position(&self) -> Position;\n    fn byte_offset(&self) -> usize;\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>>;\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>>;\n    fn ignore_str(&mut self) -> Result<()>;\n    fn decode_hex_escape(&mut self) -> Result<u16>;\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self);\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>;\n    fn set_failed(&mut self, failed: &mut bool);\n}\npub struct SliceRead<'a> {\n    slice: &'a [u8],\n    /// Index of the *next* byte that will be returned by next() or peek().\n    index: usize,\n    #[cfg(feature = \"raw_value\")]\n    raw_buffering_start_index: usize,\n}\nimpl<'a> SliceRead<'a> {\n    pub fn new(slice: &'a [u8]) -> Self {\n        SliceRead {\n            slice,\n            index: 0,\n            #[cfg(feature = \"raw_value\")]\n            raw_buffering_start_index: 0,\n        }\n    }\n    fn position_of_index(&self, i: usize) -> Position {}\n    fn skip_to_escape(&mut self, forbid_control_characters: bool) {}\n    #[cold]\n    #[inline(never)]\n    fn skip_to_escape_slow(&mut self) {\n        while self.index < self.slice.len() && !is_escape(self.slice[self.index], true) {\n            self.index += 1;\n        }\n    }\n    fn parse_str_bytes<'s, T, F>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n        validate: bool,\n        result: F,\n    ) -> Result<Reference<'a, 's, T>>\n    where\n        T: ?Sized + 's,\n        F: for<'f> FnOnce(&'s Self, &'f [u8]) -> Result<&'f T>,\n    {}\n}\nfn is_escape(ch: u8, including_control_characters: bool) -> bool {\n    ch == b'\"' || ch == b'\\\\' || (including_control_characters && ch < 0x20)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n485 fn skip_to_escape_slow(&mut self) {\n486     while self.index < self.slice.len() && !is_escape(self.slice[self.index], true) {\n487         self.index += 1;\n488     }\n489 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}