{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nstruct ErrorImpl {\n    code: ErrorCode,\n    line: usize,\n    column: usize,\n}\n#[derive(Copy, Clone, PartialEq, Eq, Debug)]\npub enum Category {\n    /// The error was caused by a failure to read or write bytes on an I/O\n    /// stream.\n    Io,\n    /// The error was caused by input that was not syntactically valid JSON.\n    Syntax,\n    /// The error was caused by input data that was semantically incorrect.\n    ///\n    /// For example, JSON containing a number is semantically incorrect when the\n    /// type being deserialized into holds a String.\n    Data,\n    /// The error was caused by prematurely reaching the end of the input data.\n    ///\n    /// Callers that process streaming input may be interested in retrying the\n    /// deserialization once more data is available.\n    Eof,\n}\nimpl Error {\n    pub fn line(&self) -> usize {}\n    pub fn column(&self) -> usize {}\n    pub fn classify(&self) -> Category {\n        match self.err.code {\n            ErrorCode::Message(_) => Category::Data,\n            ErrorCode::Io(_) => Category::Io,\n            ErrorCode::EofWhileParsingList\n            | ErrorCode::EofWhileParsingObject\n            | ErrorCode::EofWhileParsingString\n            | ErrorCode::EofWhileParsingValue => Category::Eof,\n            ErrorCode::ExpectedColon\n            | ErrorCode::ExpectedListCommaOrEnd\n            | ErrorCode::ExpectedObjectCommaOrEnd\n            | ErrorCode::ExpectedSomeIdent\n            | ErrorCode::ExpectedSomeValue\n            | ErrorCode::ExpectedDoubleQuote\n            | ErrorCode::InvalidEscape\n            | ErrorCode::InvalidNumber\n            | ErrorCode::NumberOutOfRange\n            | ErrorCode::InvalidUnicodeCodePoint\n            | ErrorCode::ControlCharacterWhileParsingString\n            | ErrorCode::KeyMustBeAString\n            | ErrorCode::ExpectedNumericKey\n            | ErrorCode::FloatKeyMustBeFinite\n            | ErrorCode::LoneLeadingSurrogateInHexEscape\n            | ErrorCode::TrailingComma\n            | ErrorCode::TrailingCharacters\n            | ErrorCode::UnexpectedEndOfHexEscape\n            | ErrorCode::RecursionLimitExceeded => Category::Syntax,\n        }\n    }\n    pub fn is_io(&self) -> bool {}\n    pub fn is_syntax(&self) -> bool {\n        self.classify() == Category::Syntax\n    }\n    pub fn is_data(&self) -> bool {}\n    pub fn is_eof(&self) -> bool {}\n    #[cfg(feature = \"std\")]\n    pub fn io_error_kind(&self) -> Option<ErrorKind> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if this error was caused by input that was not\n/// syntactically valid JSON.\n92 pub fn is_syntax(&self) -> bool {\n93     self.classify() == Category::Syntax\n94 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}