{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\nstruct MapKeySerializer<'a, W: 'a, F: 'a> {\n    ser: &'a mut Serializer<W, F>,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nstruct MapKeySerializer;\npub struct Error;\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub struct Serializer<W, F = CompactFormatter> {\n    writer: W,\n    formatter: F,\n}\npub struct Serializer;\nimpl<'a, W, F> ser::Serializer for MapKeySerializer<'a, W, F>\nwhere\n    W: io::Write,\n    F: Formatter,\n{\n    type Ok = ();\n    type Error = Error;\n    type SerializeSeq = Impossible<(), Error>;\n    type SerializeTuple = Impossible<(), Error>;\n    type SerializeTupleStruct = Impossible<(), Error>;\n    type SerializeTupleVariant = Impossible<(), Error>;\n    type SerializeMap = Impossible<(), Error>;\n    type SerializeStruct = Impossible<(), Error>;\n    type SerializeStructVariant = Impossible<(), Error>;\n    #[inline]\n    fn serialize_str(self, value: &str) -> Result<()> {}\n    #[inline]\n    fn serialize_unit_variant(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        variant: &'static str,\n    ) -> Result<()> {}\n    #[inline]\n    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<()>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_bool(self, value: bool) -> Result<()> {}\n    fn serialize_i8(self, value: i8) -> Result<()> {}\n    fn serialize_i16(self, value: i16) -> Result<()> {}\n    fn serialize_i32(self, value: i32) -> Result<()> {}\n    fn serialize_i64(self, value: i64) -> Result<()> {}\n    fn serialize_i128(self, value: i128) -> Result<()> {}\n    fn serialize_u8(self, value: u8) -> Result<()> {}\n    fn serialize_u16(self, value: u16) -> Result<()> {}\n    fn serialize_u32(self, value: u32) -> Result<()> {}\n    fn serialize_u64(self, value: u64) -> Result<()> {\n        tri!(self.ser.formatter.begin_string(& mut self.ser.writer).map_err(Error::io));\n        tri!(\n            self.ser.formatter.write_u64(& mut self.ser.writer, value).map_err(Error::io)\n        );\n        self.ser.formatter.end_string(&mut self.ser.writer).map_err(Error::io)\n    }\n    fn serialize_u128(self, value: u128) -> Result<()> {}\n    fn serialize_f32(self, value: f32) -> Result<()> {}\n    fn serialize_f64(self, value: f64) -> Result<()> {}\n    fn serialize_char(self, value: char) -> Result<()> {}\n    fn serialize_bytes(self, _value: &[u8]) -> Result<()> {}\n    fn serialize_unit(self) -> Result<()> {}\n    fn serialize_unit_struct(self, _name: &'static str) -> Result<()> {}\n    fn serialize_newtype_variant<T>(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        _variant: &'static str,\n        _value: &T,\n    ) -> Result<()>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_none(self) -> Result<()> {}\n    fn serialize_some<T>(self, value: &T) -> Result<()>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_seq(self, _len: Option<usize>) -> Result<Self::SerializeSeq> {\n        Err(key_must_be_a_string())\n    }\n    fn serialize_tuple(self, _len: usize) -> Result<Self::SerializeTuple> {\n        Err(key_must_be_a_string())\n    }\n    fn serialize_tuple_struct(\n        self,\n        _name: &'static str,\n        _len: usize,\n    ) -> Result<Self::SerializeTupleStruct> {\n        Err(key_must_be_a_string())\n    }\n    fn serialize_tuple_variant(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        _variant: &'static str,\n        _len: usize,\n    ) -> Result<Self::SerializeTupleVariant> {\n        Err(key_must_be_a_string())\n    }\n    fn serialize_map(self, _len: Option<usize>) -> Result<Self::SerializeMap> {\n        Err(key_must_be_a_string())\n    }\n    fn serialize_struct(\n        self,\n        _name: &'static str,\n        _len: usize,\n    ) -> Result<Self::SerializeStruct> {\n        Err(key_must_be_a_string())\n    }\n    fn serialize_struct_variant(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        _variant: &'static str,\n        _len: usize,\n    ) -> Result<Self::SerializeStructVariant> {\n        Err(key_must_be_a_string())\n    }\n    fn collect_str<T>(self, value: &T) -> Result<()>\n    where\n        T: ?Sized + Display,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 985 fn serialize_u64(self, value: u64) -> Result<()> {\n 986     tri!(self\n 987         .ser\n 988         .formatter\n 989         .begin_string(&mut self.ser.writer)\n 990         .map_err(Error::io));\n 991     tri!(self\n 992         .ser\n 993         .formatter\n 994         .write_u64(&mut self.ser.writer, value)\n 995         .map_err(Error::io));\n 996     self.ser\n 997         .formatter\n 998         .end_string(&mut self.ser.writer)\n 999         .map_err(Error::io)\n1000 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}