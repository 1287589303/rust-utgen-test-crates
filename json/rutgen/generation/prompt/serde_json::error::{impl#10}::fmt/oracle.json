{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\nstruct JsonUnexpected<'a>(de::Unexpected<'a>);\nimpl<'a> Display for JsonUnexpected<'a> {\n    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n        match self.0 {\n            de::Unexpected::Unit => formatter.write_str(\"null\"),\n            de::Unexpected::Float(value) => {\n                write!(\n                    formatter, \"floating point `{}`\", ryu::Buffer::new().format(value),\n                )\n            }\n            unexp => Display::fmt(&unexp, formatter),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n468 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n469     match self.0 {\n470         de::Unexpected::Unit => formatter.write_str(\"null\"),\n471         de::Unexpected::Float(value) => write!(\n472             formatter,\n473             \"floating point `{}`\",\n474             ryu::Buffer::new().format(value),\n475         ),\n476         unexp => Display::fmt(&unexp, formatter),\n477     }\n478 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}