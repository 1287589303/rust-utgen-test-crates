{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\npub trait Number: AsCast + ops::Add<Output = Self> {}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl<'de> Deserialize<'de> for Value {\n    #[inline]\n    fn deserialize<D>(deserializer: D) -> Result<Value, D::Error>\n    where\n        D: serde::Deserializer<'de>,\n    {\n        struct ValueVisitor;\n        impl<'de> Visitor<'de> for ValueVisitor {\n            type Value = Value;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"any valid JSON value\")\n            }\n            #[inline]\n            fn visit_bool<E>(self, value: bool) -> Result<Value, E> {\n                Ok(Value::Bool(value))\n            }\n            #[inline]\n            fn visit_i64<E>(self, value: i64) -> Result<Value, E> {\n                Ok(Value::Number(value.into()))\n            }\n            fn visit_i128<E>(self, value: i128) -> Result<Value, E>\n            where\n                E: serde::de::Error,\n            {\n                let de = serde::de::value::I128Deserializer::new(value);\n                Number::deserialize(de).map(Value::Number)\n            }\n            #[inline]\n            fn visit_u64<E>(self, value: u64) -> Result<Value, E> {\n                Ok(Value::Number(value.into()))\n            }\n            fn visit_u128<E>(self, value: u128) -> Result<Value, E>\n            where\n                E: serde::de::Error,\n            {\n                let de = serde::de::value::U128Deserializer::new(value);\n                Number::deserialize(de).map(Value::Number)\n            }\n            #[inline]\n            fn visit_f64<E>(self, value: f64) -> Result<Value, E> {\n                Ok(Number::from_f64(value).map_or(Value::Null, Value::Number))\n            }\n            #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n            #[inline]\n            fn visit_str<E>(self, value: &str) -> Result<Value, E>\n            where\n                E: serde::de::Error,\n            {\n                self.visit_string(String::from(value))\n            }\n            #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n            #[inline]\n            fn visit_string<E>(self, value: String) -> Result<Value, E> {\n                Ok(Value::String(value))\n            }\n            #[inline]\n            fn visit_none<E>(self) -> Result<Value, E> {\n                Ok(Value::Null)\n            }\n            #[inline]\n            fn visit_some<D>(self, deserializer: D) -> Result<Value, D::Error>\n            where\n                D: serde::Deserializer<'de>,\n            {\n                Deserialize::deserialize(deserializer)\n            }\n            #[inline]\n            fn visit_unit<E>(self) -> Result<Value, E> {\n                Ok(Value::Null)\n            }\n            #[inline]\n            fn visit_seq<V>(self, mut visitor: V) -> Result<Value, V::Error>\n            where\n                V: SeqAccess<'de>,\n            {\n                let mut vec = Vec::new();\n                while let Some(elem) = tri!(visitor.next_element()) {\n                    vec.push(elem);\n                }\n                Ok(Value::Array(vec))\n            }\n            #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n            fn visit_map<V>(self, mut visitor: V) -> Result<Value, V::Error>\n            where\n                V: MapAccess<'de>,\n            {\n                match tri!(visitor.next_key_seed(KeyClassifier)) {\n                    #[cfg(feature = \"arbitrary_precision\")]\n                    Some(KeyClass::Number) => {\n                        let number: NumberFromString = tri!(visitor.next_value());\n                        Ok(Value::Number(number.value))\n                    }\n                    #[cfg(feature = \"raw_value\")]\n                    Some(KeyClass::RawValue) => {\n                        let value = tri!(\n                            visitor.next_value_seed(crate ::raw::BoxedFromString)\n                        );\n                        crate::from_str(value.get()).map_err(de::Error::custom)\n                    }\n                    Some(KeyClass::Map(first_key)) => {\n                        let mut values = Map::new();\n                        values.insert(first_key, tri!(visitor.next_value()));\n                        while let Some((key, value)) = tri!(visitor.next_entry()) {\n                            values.insert(key, value);\n                        }\n                        Ok(Value::Object(values))\n                    }\n                    None => Ok(Value::Object(Map::new())),\n                }\n            }\n        }\n        deserializer.deserialize_any(ValueVisitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 24 fn deserialize<D>(deserializer: D) -> Result<Value, D::Error>\n 25 where\n 26     D: serde::Deserializer<'de>,\n 27 {\n 28     struct ValueVisitor;\n 29 \n 30     impl<'de> Visitor<'de> for ValueVisitor {\n 31         type Value = Value;\n 32 \n 33         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n 34             formatter.write_str(\"any valid JSON value\")\n 35         }\n 36 \n 37         #[inline]\n 38         fn visit_bool<E>(self, value: bool) -> Result<Value, E> {\n 39             Ok(Value::Bool(value))\n 40         }\n 41 \n 42         #[inline]\n 43         fn visit_i64<E>(self, value: i64) -> Result<Value, E> {\n 44             Ok(Value::Number(value.into()))\n 45         }\n 46 \n 47         fn visit_i128<E>(self, value: i128) -> Result<Value, E>\n 48         where\n 49             E: serde::de::Error,\n 50         {\n 51             let de = serde::de::value::I128Deserializer::new(value);\n 52             Number::deserialize(de).map(Value::Number)\n 53         }\n 54 \n 55         #[inline]\n 56         fn visit_u64<E>(self, value: u64) -> Result<Value, E> {\n 57             Ok(Value::Number(value.into()))\n 58         }\n 59 \n 60         fn visit_u128<E>(self, value: u128) -> Result<Value, E>\n 61         where\n 62             E: serde::de::Error,\n 63         {\n 64             let de = serde::de::value::U128Deserializer::new(value);\n 65             Number::deserialize(de).map(Value::Number)\n 66         }\n 67 \n 68         #[inline]\n 69         fn visit_f64<E>(self, value: f64) -> Result<Value, E> {\n 70             Ok(Number::from_f64(value).map_or(Value::Null, Value::Number))\n 71         }\n 72 \n 73         #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n 74         #[inline]\n 75         fn visit_str<E>(self, value: &str) -> Result<Value, E>\n 76         where\n 77             E: serde::de::Error,\n 78         {\n 79             self.visit_string(String::from(value))\n 80         }\n 81 \n 82         #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n 83         #[inline]\n 84         fn visit_string<E>(self, value: String) -> Result<Value, E> {\n 85             Ok(Value::String(value))\n 86         }\n 87 \n 88         #[inline]\n 89         fn visit_none<E>(self) -> Result<Value, E> {\n 90             Ok(Value::Null)\n 91         }\n 92 \n 93         #[inline]\n 94         fn visit_some<D>(self, deserializer: D) -> Result<Value, D::Error>\n 95         where\n 96             D: serde::Deserializer<'de>,\n 97         {\n 98             Deserialize::deserialize(deserializer)\n 99         }\n100 \n101         #[inline]\n102         fn visit_unit<E>(self) -> Result<Value, E> {\n103             Ok(Value::Null)\n104         }\n105 \n106         #[inline]\n107         fn visit_seq<V>(self, mut visitor: V) -> Result<Value, V::Error>\n108         where\n109             V: SeqAccess<'de>,\n110         {\n111             let mut vec = Vec::new();\n112 \n113             while let Some(elem) = tri!(visitor.next_element()) {\n114                 vec.push(elem);\n115             }\n116 \n117             Ok(Value::Array(vec))\n118         }\n119 \n120         #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n121         fn visit_map<V>(self, mut visitor: V) -> Result<Value, V::Error>\n122         where\n123             V: MapAccess<'de>,\n124         {\n125             match tri!(visitor.next_key_seed(KeyClassifier)) {\n126                 #[cfg(feature = \"arbitrary_precision\")]\n127                 Some(KeyClass::Number) => {\n128                     let number: NumberFromString = tri!(visitor.next_value());\n129                     Ok(Value::Number(number.value))\n130                 }\n131                 #[cfg(feature = \"raw_value\")]\n132                 Some(KeyClass::RawValue) => {\n133                     let value = tri!(visitor.next_value_seed(crate::raw::BoxedFromString));\n134                     crate::from_str(value.get()).map_err(de::Error::custom)\n135                 }\n136                 Some(KeyClass::Map(first_key)) => {\n137                     let mut values = Map::new();\n138 \n139                     values.insert(first_key, tri!(visitor.next_value()));\n140                     while let Some((key, value)) = tri!(visitor.next_entry()) {\n141                         values.insert(key, value);\n142                     }\n143 \n144                     Ok(Value::Object(values))\n145                 }\n146                 None => Ok(Value::Object(Map::new())),\n147             }\n148         }\n149     }\n150 \n151     deserializer.deserialize_any(ValueVisitor)\n152 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}