{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/mod.rs\n// crate name is serde_json\nuse crate::error::Error;\nuse crate::io;\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug, Display};\nuse core::mem;\nuse core::str;\nuse serde::de::DeserializeOwned;\nuse serde::ser::Serialize;\npub use self::index::Index;\npub use self::ser::Serializer;\npub use crate::map::Map;\npub use crate::number::Number;\n#[cfg(feature = \"raw_value\")]\n#[cfg_attr(docsrs, doc(cfg(feature = \"raw_value\")))]\npub use crate::raw::{to_raw_value, RawValue};\npub trait Number: AsCast + ops::Add<Output = Self> {}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl Value {\n    pub fn get<I: Index>(&self, index: I) -> Option<&Value> {}\n    pub fn get_mut<I: Index>(&mut self, index: I) -> Option<&mut Value> {}\n    pub fn is_object(&self) -> bool {}\n    pub fn as_object(&self) -> Option<&Map<String, Value>> {}\n    pub fn as_object_mut(&mut self) -> Option<&mut Map<String, Value>> {}\n    pub fn is_array(&self) -> bool {}\n    pub fn as_array(&self) -> Option<&Vec<Value>> {}\n    pub fn as_array_mut(&mut self) -> Option<&mut Vec<Value>> {}\n    pub fn is_string(&self) -> bool {}\n    pub fn as_str(&self) -> Option<&str> {}\n    pub fn is_number(&self) -> bool {}\n    pub fn as_number(&self) -> Option<&Number> {}\n    pub fn is_i64(&self) -> bool {}\n    pub fn is_u64(&self) -> bool {\n        match self {\n            Value::Number(n) => n.is_u64(),\n            _ => false,\n        }\n    }\n    pub fn is_f64(&self) -> bool {}\n    pub fn as_i64(&self) -> Option<i64> {}\n    pub fn as_u64(&self) -> Option<u64> {}\n    pub fn as_f64(&self) -> Option<f64> {}\n    pub fn is_boolean(&self) -> bool {}\n    pub fn as_bool(&self) -> Option<bool> {}\n    pub fn is_null(&self) -> bool {}\n    pub fn as_null(&self) -> Option<()> {}\n    pub fn pointer(&self, pointer: &str) -> Option<&Value> {}\n    pub fn pointer_mut(&mut self, pointer: &str) -> Option<&mut Value> {}\n    pub fn take(&mut self) -> Value {}\n    pub fn sort_all_objects(&mut self) {}\n}\nimpl Number {\n    pub fn is_i64(&self) -> bool {}\n    pub fn is_u64(&self) -> bool {\n        #[cfg(not(feature = \"arbitrary_precision\"))]\n        match self.n {\n            N::PosInt(_) => true,\n            N::NegInt(_) | N::Float(_) => false,\n        }\n        #[cfg(feature = \"arbitrary_precision\")] self.as_u64().is_some()\n    }\n    pub fn is_f64(&self) -> bool {}\n    pub fn as_i64(&self) -> Option<i64> {}\n    pub fn as_u64(&self) -> Option<u64> {}\n    pub fn as_f64(&self) -> Option<f64> {}\n    pub fn from_f64(f: f64) -> Option<Number> {}\n    pub fn as_i128(&self) -> Option<i128> {}\n    pub fn as_u128(&self) -> Option<u128> {}\n    pub fn from_i128(i: i128) -> Option<Number> {}\n    pub fn from_u128(i: u128) -> Option<Number> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"arbitrary_precision\")))]\n    pub fn as_str(&self) -> &str {}\n    pub(crate) fn as_f32(&self) -> Option<f32> {}\n    pub(crate) fn from_f32(f: f32) -> Option<Number> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    #[inline]\n    pub fn from_string_unchecked(n: String) -> Self {\n        Number { n }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if the `Value` is an integer between zero and `u64::MAX`.\n///\n/// For any Value on which `is_u64` returns true, `as_u64` is guaranteed to\n/// return the integer value.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let v = json!({ \"a\": 64, \"b\": -64, \"c\": 256.0 });\n///\n/// assert!(v[\"a\"].is_u64());\n///\n/// // Negative integer.\n/// assert!(!v[\"b\"].is_u64());\n///\n/// // Numbers with a decimal point are not considered integers.\n/// assert!(!v[\"c\"].is_u64());\n/// ```\n585 pub fn is_u64(&self) -> bool {\n586     match self {\n587         Value::Number(n) => n.is_u64(),\n588         _ => false,\n589     }\n590 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}