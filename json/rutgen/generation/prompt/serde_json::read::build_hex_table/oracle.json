{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\nconst fn build_hex_table(shift: usize) -> [i16; 256] {\n    let mut table = [0; 256];\n    let mut ch = 0;\n    while ch < 256 {\n        table[ch] = match decode_hex_val_slow(ch as u8) {\n            Some(val) => (val as i16) << shift,\n            None => -1,\n        };\n        ch += 1;\n    }\n    table\n}\nconst fn decode_hex_val_slow(val: u8) -> Option<u8> {\n    match val {\n        b'0'..=b'9' => Some(val - b'0'),\n        b'A'..=b'F' => Some(val - b'A' + 10),\n        b'a'..=b'f' => Some(val - b'a' + 10),\n        _ => None,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1059 const fn build_hex_table(shift: usize) -> [i16; 256] {\n1060     let mut table = [0; 256];\n1061     let mut ch = 0;\n1062     while ch < 256 {\n1063         table[ch] = match decode_hex_val_slow(ch as u8) {\n1064             Some(val) => (val as i16) << shift,\n1065             None => -1,\n1066         };\n1067         ch += 1;\n1068     }\n1069     table\n1070 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}