{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/index.rs\n// crate name is serde_json\nuse super::Value;\nuse crate::map::Map;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse core::fmt::{self, Display};\nuse core::ops;\npub trait Index: private::Sealed {\n    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value>;\n    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value>;\n    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value;\n}\npub trait Read<'de>: private::Sealed {\n    const should_early_return_if_failed: bool;\n    fn next(&mut self) -> Result<Option<u8>>;\n    fn peek(&mut self) -> Result<Option<u8>>;\n    fn discard(&mut self);\n    fn position(&self) -> Position;\n    fn peek_position(&self) -> Position;\n    fn byte_offset(&self) -> usize;\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>>;\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>>;\n    fn ignore_str(&mut self) -> Result<()>;\n    fn decode_hex_escape(&mut self) -> Result<u16>;\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self);\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>;\n    fn set_failed(&mut self, failed: &mut bool);\n}\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn flush(&mut self) -> Result<()>;\n}\npub trait Float: Number {\n    type Unsigned: Integer;\n    const ZERO: Self;\n    const MAX_DIGITS: usize;\n    const EXPONENT_MASK: Self::Unsigned;\n    const HIDDEN_BIT_MASK: Self::Unsigned;\n    const MANTISSA_MASK: Self::Unsigned;\n    const INFINITY_BITS: Self::Unsigned;\n    const MANTISSA_SIZE: i32;\n    const EXPONENT_BIAS: i32;\n    const DENORMAL_EXPONENT: i32;\n    const MAX_EXPONENT: i32;\n    const DEFAULT_SHIFT: i32;\n    const CARRY_MASK: u64;\n    fn exponent_limit() -> (i32, i32);\n    fn mantissa_limit() -> i32;\n    fn pow10(self, n: i32) -> Self;\n    fn from_bits(u: Self::Unsigned) -> Self;\n    fn to_bits(self) -> Self::Unsigned;\n    fn is_sign_positive(self) -> bool;\n    #[inline]\n    fn is_denormal(self) -> bool;\n    #[inline]\n    fn is_special(self) -> bool;\n    #[inline]\n    fn is_inf(self) -> bool;\n    #[inline]\n    fn exponent(self) -> i32;\n    #[inline]\n    fn mantissa(self) -> Self::Unsigned {\n        let bits = self.to_bits();\n        let s = bits & Self::MANTISSA_MASK;\n        if !self.is_denormal() { s + Self::HIDDEN_BIT_MASK } else { s }\n    }\n    #[inline]\n    fn next_positive(self) -> Self {\n        debug_assert!(self.is_sign_positive() && ! self.is_inf());\n        Self::from_bits(self.to_bits() + Self::Unsigned::as_cast(1u32))\n    }\n    #[inline]\n    fn round_positive_even(self) -> Self {\n        if self.mantissa() & Self::Unsigned::as_cast(1u32)\n            == Self::Unsigned::as_cast(1u32)\n        {\n            self.next_positive()\n        } else {\n            self\n        }\n    }\n}\npub(crate) trait FloatErrors {\n    fn error_scale() -> u32;\n    fn error_halfscale() -> u32;\n    fn error_is_accurate<F: Float>(count: u32, fp: &ExtendedFloat) -> bool;\n}\ntrait Hi64<T>: AsRef<[T]> {\n    fn hi64_1(&self) -> (u64, bool);\n    fn hi64_2(&self) -> (u64, bool);\n    fn hi64_3(&self) -> (u64, bool);\n    #[inline]\n    fn hi64(&self) -> (u64, bool);\n}\npub trait Sealed {}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub struct Serializer<W, F = CompactFormatter> {\n    writer: W,\n    formatter: F,\n}\npub struct Deserializer<R> {\n    read: R,\n    scratch: Vec<u8>,\n    remaining_depth: u8,\n    #[cfg(feature = \"float_roundtrip\")]\n    single_precision: bool,\n    #[cfg(feature = \"unbounded_depth\")]\n    disable_recursion_limit: bool,\n}\nstruct Type<'a>(&'a Value);\npub struct Serializer;\npub enum Entry<'a> {\n    /// A vacant Entry.\n    Vacant(VacantEntry<'a>),\n    /// An occupied Entry.\n    Occupied(OccupiedEntry<'a>),\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl<T> Index for &T\nwhere\n    T: ?Sized + Index,\n{\n    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value> {}\n    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value> {}\n    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {\n        (**self).index_or_insert(v)\n    }\n}\nimpl Map<String, Value> {\n    #[inline]\n    pub fn new() -> Self {\n        Map { map: MapImpl::new() }\n    }\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> Self {\n        Map {\n            #[cfg(not(feature = \"preserve_order\"))]\n            map: {\n                let _ = capacity;\n                BTreeMap::new()\n            },\n            #[cfg(feature = \"preserve_order\")]\n            map: IndexMap::with_capacity(capacity),\n        }\n    }\n    #[inline]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn get<Q>(&self, key: &Q) -> Option<&Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn contains_key<Q>(&self, key: &Q) -> bool\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn get_key_value<Q>(&self, key: &Q) -> Option<(&String, &Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn insert(&mut self, k: String, v: Value) -> Option<Value> {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_insert(&mut self, index: usize, k: String, v: Value) -> Option<Value> {}\n    #[inline]\n    pub fn remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn append(&mut self, other: &mut Self) {}\n    pub fn entry<S>(&mut self, key: S) -> Entry\n    where\n        S: Into<String>,\n    {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> Iter {}\n    #[inline]\n    pub fn iter_mut(&mut self) -> IterMut {}\n    #[inline]\n    pub fn keys(&self) -> Keys {}\n    #[inline]\n    pub fn values(&self) -> Values {}\n    #[inline]\n    pub fn values_mut(&mut self) -> ValuesMut {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues {}\n    #[inline]\n    pub fn retain<F>(&mut self, f: F)\n    where\n        F: FnMut(&String, &mut Value) -> bool,\n    {}\n    #[inline]\n    pub fn sort_keys(&mut self) {}\n}\nimpl<'a> Entry<'a> {\n    pub fn key(&self) -> &String {}\n    pub fn or_insert(self, default: Value) -> &'a mut Value {\n        match self {\n            Entry::Vacant(entry) => entry.insert(default),\n            Entry::Occupied(entry) => entry.into_mut(),\n        }\n    }\n    pub fn or_insert_with<F>(self, default: F) -> &'a mut Value\n    where\n        F: FnOnce() -> Value,\n    {}\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut Value),\n    {\n        match self {\n            Entry::Occupied(mut entry) => {\n                f(entry.get_mut());\n                Entry::Occupied(entry)\n            }\n            Entry::Vacant(entry) => Entry::Vacant(entry),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 96 fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {\n 97     if let Value::Null = v {\n 98         *v = Value::Object(Map::new());\n 99     }\n100     match v {\n101         Value::Object(map) => map.entry(self.to_owned()).or_insert(Value::Null),\n102         _ => panic!(\"cannot access key {:?} in JSON {}\", self, Type(v)),\n103     }\n104 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}