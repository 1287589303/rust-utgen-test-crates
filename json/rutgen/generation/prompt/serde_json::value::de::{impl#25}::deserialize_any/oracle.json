{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\nstruct BorrowedCowStrDeserializer<'de> {\n    value: Cow<'de, str>,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub struct Deserializer<R> {\n    read: R,\n    scratch: Vec<u8>,\n    remaining_depth: u8,\n    #[cfg(feature = \"float_roundtrip\")]\n    single_precision: bool,\n    #[cfg(feature = \"unbounded_depth\")]\n    disable_recursion_limit: bool,\n}\npub struct Error;\nimpl<'de> de::Deserializer<'de> for BorrowedCowStrDeserializer<'de> {\n    type Error = Error;\n    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>\n    where\n        V: de::Visitor<'de>,\n    {\n        match self.value {\n            Cow::Borrowed(string) => visitor.visit_borrowed_str(string),\n            #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n            Cow::Owned(string) => visitor.visit_string(string),\n            #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n            Cow::Owned(_) => unreachable!(),\n        }\n    }\n    fn deserialize_enum<V>(\n        self,\n        _name: &str,\n        _variants: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Error>\n    where\n        V: de::Visitor<'de>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1413 fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>\n1414 where\n1415     V: de::Visitor<'de>,\n1416 {\n1417     match self.value {\n1418         Cow::Borrowed(string) => visitor.visit_borrowed_str(string),\n1419         #[cfg(any(feature = \"std\", feature = \"alloc\"))]\n1420         Cow::Owned(string) => visitor.visit_string(string),\n1421         #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]\n1422         Cow::Owned(_) => unreachable!(),\n1423     }\n1424 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}