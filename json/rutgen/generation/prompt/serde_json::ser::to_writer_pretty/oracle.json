{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\n#[derive(Clone, Debug)]\npub struct PrettyFormatter<'a> {\n    current_indent: usize,\n    has_value: bool,\n    indent: &'a [u8],\n}\n#[inline]\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub fn to_writer_pretty<W, T>(writer: W, value: &T) -> Result<()>\nwhere\n    W: io::Write,\n    T: ?Sized + Serialize,\n{\n    let mut ser = Serializer::pretty(writer);\n    value.serialize(&mut ser)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Serialize the given data structure as pretty-printed JSON into the I/O\n/// stream.\n///\n/// Serialization guarantees it only feeds valid UTF-8 sequences to the writer.\n///\n/// # Errors\n///\n/// Serialization can fail if `T`'s implementation of `Serialize` decides to\n/// fail, or if `T` contains a map with non-string keys.\n2189 pub fn to_writer_pretty<W, T>(writer: W, value: &T) -> Result<()>\n2190 where\n2191     W: io::Write,\n2192     T: ?Sized + Serialize,\n2193 {\n2194     let mut ser = Serializer::pretty(writer);\n2195     value.serialize(&mut ser)\n2196 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}