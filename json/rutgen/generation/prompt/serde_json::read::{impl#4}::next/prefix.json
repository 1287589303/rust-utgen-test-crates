{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\npub trait Read<'de>: private::Sealed {\n    const should_early_return_if_failed: bool;\n    fn next(&mut self) -> Result<Option<u8>>;\n    fn peek(&mut self) -> Result<Option<u8>>;\n    fn discard(&mut self);\n    fn position(&self) -> Position;\n    fn peek_position(&self) -> Position;\n    fn byte_offset(&self) -> usize;\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>>;\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>>;\n    fn ignore_str(&mut self) -> Result<()>;\n    fn decode_hex_escape(&mut self) -> Result<u16>;\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self);\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>;\n    fn set_failed(&mut self, failed: &mut bool);\n}\npub trait Sealed {}\n#[cfg(feature = \"std\")]\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub struct IoRead<R>\nwhere\n    R: io::Read,\n{\n    iter: LineColIterator<io::Bytes<R>>,\n    /// Temporary storage of peeked byte.\n    ch: Option<u8>,\n    #[cfg(feature = \"raw_value\")]\n    raw_buffer: Option<Vec<u8>>,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub struct LineColIterator<I> {\n    iter: I,\n    /// Index of the current line. Characters in the first line of the input\n    /// (before the first newline character) are in line 1.\n    line: usize,\n    /// Index of the current column. The first character in the input and any\n    /// characters immediately following a newline character are in column 1.\n    /// The column is 0 immediately after a newline character has been read.\n    col: usize,\n    /// Byte offset of the start of the current line. This is the sum of lengths\n    /// of all previous lines. Keeping track of things this way allows efficient\n    /// computation of the current line, column, and byte offset while only\n    /// updating one of the counters in `next()` in the common case.\n    start_of_line: usize,\n}\n#[cfg(feature = \"std\")]\nimpl<'de, R> Read<'de> for IoRead<R>\nwhere\n    R: io::Read,\n{\n    const should_early_return_if_failed: bool = true;\n    #[inline]\n    fn next(&mut self) -> Result<Option<u8>> {\n        match self.ch.take() {\n            Some(ch) => {\n                #[cfg(feature = \"raw_value\")]\n                {\n                    if let Some(buf) = &mut self.raw_buffer {\n                        buf.push(ch);\n                    }\n                }\n                Ok(Some(ch))\n            }\n            None => {\n                match self.iter.next() {\n                    Some(Err(err)) => Err(Error::io(err)),\n                    Some(Ok(ch)) => {\n                        #[cfg(feature = \"raw_value\")]\n                        {\n                            if let Some(buf) = &mut self.raw_buffer {\n                                buf.push(ch);\n                            }\n                        }\n                        Ok(Some(ch))\n                    }\n                    None => Ok(None),\n                }\n            }\n        }\n    }\n    #[inline]\n    fn peek(&mut self) -> Result<Option<u8>> {}\n    #[cfg(not(feature = \"raw_value\"))]\n    #[inline]\n    fn discard(&mut self) {}\n    #[cfg(feature = \"raw_value\")]\n    fn discard(&mut self) {}\n    fn position(&self) -> Position {}\n    fn peek_position(&self) -> Position {}\n    fn byte_offset(&self) -> usize {}\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>> {}\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>> {}\n    fn ignore_str(&mut self) -> Result<()> {}\n    fn decode_hex_escape(&mut self) -> Result<u16> {}\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self) {}\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>,\n    {}\n    #[inline]\n    #[cold]\n    fn set_failed(&mut self, failed: &mut bool) {}\n}\nimpl Error {\n    #[cold]\n    pub(crate) fn syntax(code: ErrorCode, line: usize, column: usize) -> Self {\n        Error {\n            err: Box::new(ErrorImpl { code, line, column }),\n        }\n    }\n    #[cold]\n    pub fn io(error: io::Error) -> Self {\n        Error {\n            err: Box::new(ErrorImpl {\n                code: ErrorCode::Io(error),\n                line: 0,\n                column: 0,\n            }),\n        }\n    }\n    #[cold]\n    pub(crate) fn fix_position<F>(self, f: F) -> Self\n    where\n        F: FnOnce(ErrorCode) -> Error,\n    {\n        if self.err.line == 0 { f(self.err.code) } else { self }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n258 fn next(&mut self) -> Result<Option<u8>> {\n259     match self.ch.take() {\n260         Some(ch) => {\n261             #[cfg(feature = \"raw_value\")]\n262             {\n263                 if let Some(buf) = &mut self.raw_buffer {\n264                     buf.push(ch);\n265                 }\n266             }\n267             Ok(Some(ch))\n268         }\n269         None => match self.iter.next() {\n270             Some(Err(err)) => Err(Error::io(err)),\n271             Some(Ok(ch)) => {\n272                 #[cfg(feature = \"raw_value\")]\n273                 {\n274                     if let Some(buf) = &mut self.raw_buffer {\n275                         buf.push(ch);\n276                     }\n277                 }\n278                 Ok(Some(ch))\n279             }\n280             None => Ok(None),\n281         },\n282     }\n283 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}