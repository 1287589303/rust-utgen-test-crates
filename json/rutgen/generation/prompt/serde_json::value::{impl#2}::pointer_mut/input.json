{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/mod.rs\n// crate name is serde_json\nuse crate::error::Error;\nuse crate::io;\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug, Display};\nuse core::mem;\nuse core::str;\nuse serde::de::DeserializeOwned;\nuse serde::ser::Serialize;\npub use self::index::Index;\npub use self::ser::Serializer;\npub use crate::map::Map;\npub use crate::number::Number;\n#[cfg(feature = \"raw_value\")]\n#[cfg_attr(docsrs, doc(cfg(feature = \"raw_value\")))]\npub use crate::raw::{to_raw_value, RawValue};\npub trait Number: AsCast + ops::Add<Output = Self> {}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl Value {\n    pub fn get<I: Index>(&self, index: I) -> Option<&Value> {}\n    pub fn get_mut<I: Index>(&mut self, index: I) -> Option<&mut Value> {}\n    pub fn is_object(&self) -> bool {}\n    pub fn as_object(&self) -> Option<&Map<String, Value>> {}\n    pub fn as_object_mut(&mut self) -> Option<&mut Map<String, Value>> {}\n    pub fn is_array(&self) -> bool {}\n    pub fn as_array(&self) -> Option<&Vec<Value>> {}\n    pub fn as_array_mut(&mut self) -> Option<&mut Vec<Value>> {}\n    pub fn is_string(&self) -> bool {}\n    pub fn as_str(&self) -> Option<&str> {}\n    pub fn is_number(&self) -> bool {}\n    pub fn as_number(&self) -> Option<&Number> {}\n    pub fn is_i64(&self) -> bool {}\n    pub fn is_u64(&self) -> bool {}\n    pub fn is_f64(&self) -> bool {}\n    pub fn as_i64(&self) -> Option<i64> {}\n    pub fn as_u64(&self) -> Option<u64> {}\n    pub fn as_f64(&self) -> Option<f64> {}\n    pub fn is_boolean(&self) -> bool {}\n    pub fn as_bool(&self) -> Option<bool> {}\n    pub fn is_null(&self) -> bool {}\n    pub fn as_null(&self) -> Option<()> {}\n    pub fn pointer(&self, pointer: &str) -> Option<&Value> {}\n    pub fn pointer_mut(&mut self, pointer: &str) -> Option<&mut Value> {\n        if pointer.is_empty() {\n            return Some(self);\n        }\n        if !pointer.starts_with('/') {\n            return None;\n        }\n        pointer\n            .split('/')\n            .skip(1)\n            .map(|x| x.replace(\"~1\", \"/\").replace(\"~0\", \"~\"))\n            .try_fold(\n                self,\n                |target, token| match target {\n                    Value::Object(map) => map.get_mut(&token),\n                    Value::Array(list) => {\n                        parse_index(&token).and_then(move |x| list.get_mut(x))\n                    }\n                    _ => None,\n                },\n            )\n    }\n    pub fn take(&mut self) -> Value {}\n    pub fn sort_all_objects(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks up a value by a JSON Pointer and returns a mutable reference to\n/// that value.\n///\n/// JSON Pointer defines a string syntax for identifying a specific value\n/// within a JavaScript Object Notation (JSON) document.\n///\n/// A Pointer is a Unicode string with the reference tokens separated by `/`.\n/// Inside tokens `/` is replaced by `~1` and `~` is replaced by `~0`. The\n/// addressed value is returned and if there is no such value `None` is\n/// returned.\n///\n/// For more information read [RFC6901](https://tools.ietf.org/html/rfc6901).\n///\n/// # Example of Use\n///\n/// ```\n/// use serde_json::Value;\n///\n/// fn main() {\n///     let s = r#\"{\"x\": 1.0, \"y\": 2.0}\"#;\n///     let mut value: Value = serde_json::from_str(s).unwrap();\n///\n///     // Check value using read-only pointer\n///     assert_eq!(value.pointer(\"/x\"), Some(&1.0.into()));\n///     // Change value with direct assignment\n///     *value.pointer_mut(\"/x\").unwrap() = 1.5.into();\n///     // Check that new value was written\n///     assert_eq!(value.pointer(\"/x\"), Some(&1.5.into()));\n///     // Or change the value only if it exists\n///     value.pointer_mut(\"/x\").map(|v| *v = 1.5.into());\n///\n///     // \"Steal\" ownership of a value. Can replace with any valid Value.\n///     let old_x = value.pointer_mut(\"/x\").map(Value::take).unwrap();\n///     assert_eq!(old_x, 1.5);\n///     assert_eq!(value.pointer(\"/x\").unwrap(), &Value::Null);\n/// }\n/// ```\n834 pub fn pointer_mut(&mut self, pointer: &str) -> Option<&mut Value> {\n835     if pointer.is_empty() {\n836         return Some(self);\n837     }\n838     if !pointer.starts_with('/') {\n839         return None;\n840     }\n841     pointer\n842         .split('/')\n843         .skip(1)\n844         .map(|x| x.replace(\"~1\", \"/\").replace(\"~0\", \"~\"))\n845         .try_fold(self, |target, token| match target {\n846             Value::Object(map) => map.get_mut(&token),\n847             Value::Array(list) => parse_index(&token).and_then(move |x| list.get_mut(x)),\n848             _ => None,\n849         })\n850 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}