{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/number.rs\n// crate name is serde_json\n#[cfg(feature = \"arbitrary_precision\")]\ntype N = String;\nuse crate::de::ParserNumber;\nuse crate::error::Error;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::error::ErrorCode;\n#[cfg(feature = \"arbitrary_precision\")]\nuse alloc::borrow::ToOwned;\n#[cfg(feature = \"arbitrary_precision\")]\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\n#[cfg(not(feature = \"arbitrary_precision\"))]\nuse core::hash::{Hash, Hasher};\nuse serde::de::{self, Unexpected, Visitor};\n#[cfg(feature = \"arbitrary_precision\")]\nuse serde::de::{IntoDeserializer, MapAccess};\nuse serde::{\n    forward_to_deserialize_any, Deserialize, Deserializer, Serialize, Serializer,\n};\n#[cfg(feature = \"arbitrary_precision\")]\npub(crate) const TOKEN: &str = \"$serde_json::private::Number\";\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\n#[cfg(not(feature = \"arbitrary_precision\"))]\n#[derive(Copy, Clone)]\nenum N {\n    PosInt(u64),\n    /// Always less than zero.\n    NegInt(i64),\n    /// Always finite.\n    Float(f64),\n}\nimpl<'de> Deserialize<'de> for Number {\n    #[inline]\n    fn deserialize<D>(deserializer: D) -> Result<Number, D::Error>\n    where\n        D: Deserializer<'de>,\n    {\n        struct NumberVisitor;\n        impl<'de> Visitor<'de> for NumberVisitor {\n            type Value = Number;\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                formatter.write_str(\"a JSON number\")\n            }\n            fn visit_i64<E>(self, value: i64) -> Result<Number, E> {\n                Ok(value.into())\n            }\n            fn visit_i128<E>(self, value: i128) -> Result<Number, E>\n            where\n                E: de::Error,\n            {\n                Number::from_i128(value)\n                    .ok_or_else(|| de::Error::custom(\"JSON number out of range\"))\n            }\n            fn visit_u64<E>(self, value: u64) -> Result<Number, E> {\n                Ok(value.into())\n            }\n            fn visit_u128<E>(self, value: u128) -> Result<Number, E>\n            where\n                E: de::Error,\n            {\n                Number::from_u128(value)\n                    .ok_or_else(|| de::Error::custom(\"JSON number out of range\"))\n            }\n            fn visit_f64<E>(self, value: f64) -> Result<Number, E>\n            where\n                E: de::Error,\n            {\n                Number::from_f64(value)\n                    .ok_or_else(|| de::Error::custom(\"not a JSON number\"))\n            }\n            #[cfg(feature = \"arbitrary_precision\")]\n            fn visit_map<V>(self, mut visitor: V) -> Result<Number, V::Error>\n            where\n                V: de::MapAccess<'de>,\n            {\n                let value = tri!(visitor.next_key::< NumberKey > ());\n                if value.is_none() {\n                    return Err(de::Error::invalid_type(Unexpected::Map, &self));\n                }\n                let v: NumberFromString = tri!(visitor.next_value());\n                Ok(v.value)\n            }\n        }\n        deserializer.deserialize_any(NumberVisitor)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n397 fn deserialize<D>(deserializer: D) -> Result<Number, D::Error>\n398 where\n399     D: Deserializer<'de>,\n400 {\n401     struct NumberVisitor;\n402 \n403     impl<'de> Visitor<'de> for NumberVisitor {\n404         type Value = Number;\n405 \n406         fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n407             formatter.write_str(\"a JSON number\")\n408         }\n409 \n410         fn visit_i64<E>(self, value: i64) -> Result<Number, E> {\n411             Ok(value.into())\n412         }\n413 \n414         fn visit_i128<E>(self, value: i128) -> Result<Number, E>\n415         where\n416             E: de::Error,\n417         {\n418             Number::from_i128(value)\n419                 .ok_or_else(|| de::Error::custom(\"JSON number out of range\"))\n420         }\n421 \n422         fn visit_u64<E>(self, value: u64) -> Result<Number, E> {\n423             Ok(value.into())\n424         }\n425 \n426         fn visit_u128<E>(self, value: u128) -> Result<Number, E>\n427         where\n428             E: de::Error,\n429         {\n430             Number::from_u128(value)\n431                 .ok_or_else(|| de::Error::custom(\"JSON number out of range\"))\n432         }\n433 \n434         fn visit_f64<E>(self, value: f64) -> Result<Number, E>\n435         where\n436             E: de::Error,\n437         {\n438             Number::from_f64(value).ok_or_else(|| de::Error::custom(\"not a JSON number\"))\n439         }\n440 \n441         #[cfg(feature = \"arbitrary_precision\")]\n442         fn visit_map<V>(self, mut visitor: V) -> Result<Number, V::Error>\n443         where\n444             V: de::MapAccess<'de>,\n445         {\n446             let value = tri!(visitor.next_key::<NumberKey>());\n447             if value.is_none() {\n448                 return Err(de::Error::invalid_type(Unexpected::Map, &self));\n449             }\n450             let v: NumberFromString = tri!(visitor.next_value());\n451             Ok(v.value)\n452         }\n453     }\n454 \n455     deserializer.deserialize_any(NumberVisitor)\n456 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}