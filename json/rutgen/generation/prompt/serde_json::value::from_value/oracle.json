{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/mod.rs\n// crate name is serde_json\nuse crate::error::Error;\nuse crate::io;\nuse alloc::string::String;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug, Display};\nuse core::mem;\nuse core::str;\nuse serde::de::DeserializeOwned;\nuse serde::ser::Serialize;\npub use self::index::Index;\npub use self::ser::Serializer;\npub use crate::map::Map;\npub use crate::number::Number;\n#[cfg(feature = \"raw_value\")]\n#[cfg_attr(docsrs, doc(cfg(feature = \"raw_value\")))]\npub use crate::raw::{to_raw_value, RawValue};\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\npub fn from_value<T>(value: Value) -> Result<T, Error>\nwhere\n    T: DeserializeOwned,\n{\n    T::deserialize(value)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Interpret a `serde_json::Value` as an instance of type `T`.\n///\n/// # Example\n///\n/// ```\n/// use serde::Deserialize;\n/// use serde_json::json;\n///\n/// #[derive(Deserialize, Debug)]\n/// struct User {\n///     fingerprint: String,\n///     location: String,\n/// }\n///\n/// fn main() {\n///     // The type of `j` is `serde_json::Value`\n///     let j = json!({\n///         \"fingerprint\": \"0xF9BA143B95FF6D82\",\n///         \"location\": \"Menlo Park, CA\"\n///     });\n///\n///     let u: User = serde_json::from_value(j).unwrap();\n///     println!(\"{:#?}\", u);\n/// }\n/// ```\n///\n/// # Errors\n///\n/// This conversion can fail if the structure of the Value does not match the\n/// structure expected by `T`, for example if `T` is a struct type but the Value\n/// contains something other than a JSON map. It can also fail if the structure\n/// is correct but `T`'s implementation of `Deserialize` decides that something\n/// is wrong with the data, for example required struct fields are missing from\n/// the JSON map or some number is too big to fit in the expected primitive\n/// type.\n1030 pub fn from_value<T>(value: Value) -> Result<T, Error>\n1031 where\n1032     T: DeserializeOwned,\n1033 {\n1034     T::deserialize(value)\n1035 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}