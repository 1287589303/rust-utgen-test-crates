{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\nstruct SeqDeserializer {\n    iter: vec::IntoIter<Value>,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl SeqDeserializer {\n    fn new(vec: Vec<Value>) -> Self {\n        SeqDeserializer {\n            iter: vec.into_iter(),\n        }\n    }\n}\nfn visit_array<'de, V>(array: Vec<Value>, visitor: V) -> Result<V::Value, Error>\nwhere\n    V: Visitor<'de>,\n{\n    let len = array.len();\n    let mut deserializer = SeqDeserializer::new(array);\n    let seq = tri!(visitor.visit_seq(& mut deserializer));\n    let remaining = deserializer.iter.len();\n    if remaining == 0 {\n        Ok(seq)\n    } else {\n        Err(serde::de::Error::invalid_length(len, &\"fewer elements in array\"))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n188 fn visit_array<'de, V>(array: Vec<Value>, visitor: V) -> Result<V::Value, Error>\n189 where\n190     V: Visitor<'de>,\n191 {\n192     let len = array.len();\n193     let mut deserializer = SeqDeserializer::new(array);\n194     let seq = tri!(visitor.visit_seq(&mut deserializer));\n195     let remaining = deserializer.iter.len();\n196     if remaining == 0 {\n197         Ok(seq)\n198     } else {\n199         Err(serde::de::Error::invalid_length(\n200             len,\n201             &\"fewer elements in array\",\n202         ))\n203     }\n204 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}