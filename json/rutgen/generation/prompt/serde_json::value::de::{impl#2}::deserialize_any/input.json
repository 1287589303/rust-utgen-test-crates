{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\nstruct MapDeserializer {\n    iter: <Map<String, Value> as IntoIterator>::IntoIter,\n    value: Option<Value>,\n}\npub struct Error;\npub struct IntoIter {\n    iter: IntoIterImpl,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl<'de> serde::Deserializer<'de> for Map<String, Value> {\n    type Error = Error;\n    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let len = self.len();\n        let mut deserializer = MapDeserializer::new(self);\n        let map = tri!(visitor.visit_map(& mut deserializer));\n        let remaining = deserializer.iter.len();\n        if remaining == 0 {\n            Ok(map)\n        } else {\n            Err(serde::de::Error::invalid_length(len, &\"fewer elements in map\"))\n        }\n    }\n    fn deserialize_enum<V>(\n        self,\n        _name: &'static str,\n        _variants: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        let mut iter = self.into_iter();\n        let (variant, value) = match iter.next() {\n            Some(v) => v,\n            None => {\n                return Err(\n                    serde::de::Error::invalid_value(\n                        Unexpected::Map,\n                        &\"map with a single key\",\n                    ),\n                );\n            }\n        };\n        if iter.next().is_some() {\n            return Err(\n                serde::de::Error::invalid_value(\n                    Unexpected::Map,\n                    &\"map with a single key\",\n                ),\n            );\n        }\n        visitor\n            .visit_enum(EnumDeserializer {\n                variant,\n                value: Some(value),\n            })\n    }\n    fn deserialize_ignored_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n    where\n        V: Visitor<'de>,\n    {\n        drop(self);\n        visitor.visit_unit()\n    }\n}\nimpl Map<String, Value> {\n    #[inline]\n    pub fn new() -> Self {\n        Map { map: MapImpl::new() }\n    }\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> Self {\n        Map {\n            #[cfg(not(feature = \"preserve_order\"))]\n            map: {\n                let _ = capacity;\n                BTreeMap::new()\n            },\n            #[cfg(feature = \"preserve_order\")]\n            map: IndexMap::with_capacity(capacity),\n        }\n    }\n    #[inline]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn get<Q>(&self, key: &Q) -> Option<&Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn contains_key<Q>(&self, key: &Q) -> bool\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn get_key_value<Q>(&self, key: &Q) -> Option<(&String, &Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn insert(&mut self, k: String, v: Value) -> Option<Value> {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_insert(&mut self, index: usize, k: String, v: Value) -> Option<Value> {}\n    #[inline]\n    pub fn remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove<Q>(&mut self, key: &Q) -> Option<Value>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>\n    where\n        String: Borrow<Q>,\n        Q: ?Sized + Ord + Eq + Hash,\n    {}\n    #[inline]\n    pub fn append(&mut self, other: &mut Self) {}\n    pub fn entry<S>(&mut self, key: S) -> Entry\n    where\n        S: Into<String>,\n    {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.map.len()\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> Iter {}\n    #[inline]\n    pub fn iter_mut(&mut self) -> IterMut {}\n    #[inline]\n    pub fn keys(&self) -> Keys {}\n    #[inline]\n    pub fn values(&self) -> Values {}\n    #[inline]\n    pub fn values_mut(&mut self) -> ValuesMut {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues {}\n    #[inline]\n    pub fn retain<F>(&mut self, f: F)\n    where\n        F: FnMut(&String, &mut Value) -> bool,\n    {}\n    #[inline]\n    pub fn sort_keys(&mut self) {}\n}\nimpl MapDeserializer {\n    fn new(map: Map<String, Value>) -> Self {\n        MapDeserializer {\n            iter: map.into_iter(),\n            value: None,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n209 fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Self::Error>\n210 where\n211     V: Visitor<'de>,\n212 {\n213     let len = self.len();\n214     let mut deserializer = MapDeserializer::new(self);\n215     let map = tri!(visitor.visit_map(&mut deserializer));\n216     let remaining = deserializer.iter.len();\n217     if remaining == 0 {\n218         Ok(map)\n219     } else {\n220         Err(serde::de::Error::invalid_length(\n221             len,\n222             &\"fewer elements in map\",\n223         ))\n224     }\n225 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}