{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub struct Serializer<W, F = CompactFormatter> {\n    writer: W,\n    formatter: F,\n}\npub struct SerializeStructVariant {\n    name: String,\n    map: Map<String, Value>,\n}\npub struct Serializer;\npub struct SerializeTupleVariant {\n    name: String,\n    vec: Vec<Value>,\n}\npub struct Error;\npub enum Compound<'a, W: 'a, F: 'a> {\n    Map { ser: &'a mut Serializer<W, F>, state: State },\n    #[cfg(feature = \"arbitrary_precision\")]\n    Number { ser: &'a mut Serializer<W, F> },\n    #[cfg(feature = \"raw_value\")]\n    RawValue { ser: &'a mut Serializer<W, F> },\n}\npub enum SerializeMap {\n    Map { map: Map<String, Value>, next_key: Option<String> },\n    #[cfg(feature = \"arbitrary_precision\")]\n    Number { out_value: Option<Value> },\n    #[cfg(feature = \"raw_value\")]\n    RawValue { out_value: Option<Value> },\n}\n#[derive(Eq, PartialEq)]\npub enum State {\n    Empty,\n    First,\n    Rest,\n}\nimpl<'a, W, F> ser::SerializeTupleVariant for Compound<'a, W, F>\nwhere\n    W: io::Write,\n    F: Formatter,\n{\n    type Ok = ();\n    type Error = Error;\n    #[inline]\n    fn serialize_field<T>(&mut self, value: &T) -> Result<()>\n    where\n        T: ?Sized + Serialize,\n    {}\n    #[inline]\n    fn end(self) -> Result<()> {\n        match self {\n            Compound::Map { ser, state } => {\n                match state {\n                    State::Empty => {}\n                    _ => {\n                        tri!(\n                            ser.formatter.end_array(& mut ser.writer).map_err(Error::io)\n                        )\n                    }\n                }\n                tri!(\n                    ser.formatter.end_object_value(& mut ser.writer).map_err(Error::io)\n                );\n                ser.formatter.end_object(&mut ser.writer).map_err(Error::io)\n            }\n            #[cfg(feature = \"arbitrary_precision\")]\n            Compound::Number { .. } => unreachable!(),\n            #[cfg(feature = \"raw_value\")]\n            Compound::RawValue { .. } => unreachable!(),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n588 fn end(self) -> Result<()> {\n589     match self {\n590         Compound::Map { ser, state } => {\n591             match state {\n592                 State::Empty => {}\n593                 _ => tri!(ser.formatter.end_array(&mut ser.writer).map_err(Error::io)),\n594             }\n595             tri!(ser\n596                 .formatter\n597                 .end_object_value(&mut ser.writer)\n598                 .map_err(Error::io));\n599             ser.formatter.end_object(&mut ser.writer).map_err(Error::io)\n600         }\n601         #[cfg(feature = \"arbitrary_precision\")]\n602         Compound::Number { .. } => unreachable!(),\n603         #[cfg(feature = \"raw_value\")]\n604         Compound::RawValue { .. } => unreachable!(),\n605     }\n606 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}