{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is serde_json\n#[cfg(not(feature = \"preserve_order\"))]\ntype MapImpl<K, V> = BTreeMap<K, V>;\n#[cfg(feature = \"preserve_order\")]\ntype MapImpl<K, V> = IndexMap<K, V>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype VacantEntryImpl<'a> = btree_map::VacantEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype VacantEntryImpl<'a> = indexmap::map::VacantEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype OccupiedEntryImpl<'a> = btree_map::OccupiedEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype OccupiedEntryImpl<'a> = indexmap::map::OccupiedEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterImpl<'a> = btree_map::Iter<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterImpl<'a> = indexmap::map::Iter<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterMutImpl<'a> = btree_map::IterMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterMutImpl<'a> = indexmap::map::IterMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoIterImpl = btree_map::IntoIter<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoIterImpl = indexmap::map::IntoIter<String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype KeysImpl<'a> = btree_map::Keys<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype KeysImpl<'a> = indexmap::map::Keys<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesImpl<'a> = btree_map::Values<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesImpl<'a> = indexmap::map::Values<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesMutImpl<'a> = btree_map::ValuesMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesMutImpl<'a> = indexmap::map::ValuesMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoValuesImpl = btree_map::IntoValues<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoValuesImpl = indexmap::map::IntoValues<String, Value>;\nuse crate::error::Error;\nuse crate::value::Value;\nuse alloc::string::String;\n#[cfg(feature = \"preserve_order\")]\nuse alloc::vec::Vec;\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{Hash, Hasher};\nuse core::iter::FusedIterator;\n#[cfg(feature = \"preserve_order\")]\nuse core::mem;\nuse core::ops;\nuse serde::de;\n#[cfg(not(feature = \"preserve_order\"))]\nuse alloc::collections::{btree_map, BTreeMap};\n#[cfg(feature = \"preserve_order\")]\nuse indexmap::IndexMap;\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl Extend<(String, Value)> for Map<String, Value> {\n    fn extend<T>(&mut self, iter: T)\n    where\n        T: IntoIterator<Item = (String, Value)>,\n    {\n        self.map.extend(iter);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n561 fn extend<T>(&mut self, iter: T)\n562 where\n563     T: IntoIterator<Item = (String, Value)>,\n564 {\n565     self.map.extend(iter);\n566 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}