{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\nstruct UnitOnly;\nstruct VariantAccess<'a, R: 'a> {\n    de: &'a mut Deserializer<R>,\n}\npub struct Error;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nimpl<'de> de::VariantAccess<'de> for UnitOnly {\n    type Error = Error;\n    fn unit_variant(self) -> Result<(), Error> {}\n    fn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value, Error>\n    where\n        T: de::DeserializeSeed<'de>,\n    {}\n    fn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value, Error>\n    where\n        V: de::Visitor<'de>,\n    {}\n    fn struct_variant<V>(\n        self,\n        _fields: &'static [&'static str],\n        _visitor: V,\n    ) -> Result<V::Value, Error>\n    where\n        V: de::Visitor<'de>,\n    {\n        Err(de::Error::invalid_type(Unexpected::UnitVariant, &\"struct variant\"))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1487 fn struct_variant<V>(\n1488     self,\n1489     _fields: &'static [&'static str],\n1490     _visitor: V,\n1491 ) -> Result<V::Value, Error>\n1492 where\n1493     V: de::Visitor<'de>,\n1494 {\n1495     Err(de::Error::invalid_type(\n1496         Unexpected::UnitVariant,\n1497         &\"struct variant\",\n1498     ))\n1499 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}