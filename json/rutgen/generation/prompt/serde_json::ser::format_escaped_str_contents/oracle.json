{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\npub enum CharEscape {\n    /// An escaped quote `\"`\n    Quote,\n    /// An escaped reverse solidus `\\`\n    ReverseSolidus,\n    /// An escaped solidus `/`\n    Solidus,\n    /// An escaped backspace character (usually escaped as `\\b`)\n    Backspace,\n    /// An escaped form feed character (usually escaped as `\\f`)\n    FormFeed,\n    /// An escaped line feed character (usually escaped as `\\n`)\n    LineFeed,\n    /// An escaped carriage return character (usually escaped as `\\r`)\n    CarriageReturn,\n    /// An escaped tab character (usually escaped as `\\t`)\n    Tab,\n    /// An escaped ASCII plane control character (usually escaped as\n    /// `\\u00XX` where `XX` are two hex characters)\n    AsciiControl(u8),\n}\nimpl CharEscape {\n    #[inline]\n    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {\n        match escape {\n            self::BB => CharEscape::Backspace,\n            self::TT => CharEscape::Tab,\n            self::NN => CharEscape::LineFeed,\n            self::FF => CharEscape::FormFeed,\n            self::RR => CharEscape::CarriageReturn,\n            self::QU => CharEscape::Quote,\n            self::BS => CharEscape::ReverseSolidus,\n            self::UU => CharEscape::AsciiControl(byte),\n            _ => unreachable!(),\n        }\n    }\n}\nfn format_escaped_str_contents<W, F>(\n    writer: &mut W,\n    formatter: &mut F,\n    value: &str,\n) -> io::Result<()>\nwhere\n    W: ?Sized + io::Write,\n    F: ?Sized + Formatter,\n{\n    let bytes = value.as_bytes();\n    let mut start = 0;\n    for (i, &byte) in bytes.iter().enumerate() {\n        let escape = ESCAPE[byte as usize];\n        if escape == 0 {\n            continue;\n        }\n        if start < i {\n            tri!(formatter.write_string_fragment(writer, & value[start..i]));\n        }\n        let char_escape = CharEscape::from_escape_table(escape, byte);\n        tri!(formatter.write_char_escape(writer, char_escape));\n        start = i + 1;\n    }\n    if start == bytes.len() {\n        return Ok(());\n    }\n    formatter.write_string_fragment(writer, &value[start..])\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2091 fn format_escaped_str_contents<W, F>(\n2092     writer: &mut W,\n2093     formatter: &mut F,\n2094     value: &str,\n2095 ) -> io::Result<()>\n2096 where\n2097     W: ?Sized + io::Write,\n2098     F: ?Sized + Formatter,\n2099 {\n2100     let bytes = value.as_bytes();\n2101 \n2102     let mut start = 0;\n2103 \n2104     for (i, &byte) in bytes.iter().enumerate() {\n2105         let escape = ESCAPE[byte as usize];\n2106         if escape == 0 {\n2107             continue;\n2108         }\n2109 \n2110         if start < i {\n2111             tri!(formatter.write_string_fragment(writer, &value[start..i]));\n2112         }\n2113 \n2114         let char_escape = CharEscape::from_escape_table(escape, byte);\n2115         tri!(formatter.write_char_escape(writer, char_escape));\n2116 \n2117         start = i + 1;\n2118     }\n2119 \n2120     if start == bytes.len() {\n2121         return Ok(());\n2122     }\n2123 \n2124     formatter.write_string_fragment(writer, &value[start..])\n2125 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}