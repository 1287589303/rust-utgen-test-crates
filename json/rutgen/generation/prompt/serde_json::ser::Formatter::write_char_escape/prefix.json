{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::io;\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Display};\nuse core::num::FpCategory;\nuse serde::ser::{self, Impossible, Serialize};\nstatic ESCAPE: [u8; 256] = [\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    BB,\n    TT,\n    NN,\n    UU,\n    FF,\n    RR,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    UU,\n    __,\n    __,\n    QU,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    BS,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n    __,\n];\nconst BB: u8 = b'b';\nconst TT: u8 = b't';\nconst NN: u8 = b'n';\nconst FF: u8 = b'f';\nconst RR: u8 = b'r';\nconst QU: u8 = b'\"';\nconst BS: u8 = b'\\\\';\nconst UU: u8 = b'u';\nconst __: u8 = 0;\npub trait Formatter {\n    #[inline]\n    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i8<W>(&mut self, writer: &mut W, value: i8) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i16<W>(&mut self, writer: &mut W, value: i16) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i32<W>(&mut self, writer: &mut W, value: i32) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_i128<W>(&mut self, writer: &mut W, value: i128) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u8<W>(&mut self, writer: &mut W, value: u8) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u16<W>(&mut self, writer: &mut W, value: u16) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u32<W>(&mut self, writer: &mut W, value: u32) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_u128<W>(&mut self, writer: &mut W, value: u128) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_f32<W>(&mut self, writer: &mut W, value: f32) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_number_str<W>(&mut self, writer: &mut W, value: &str) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_string_fragment<W>(\n        &mut self,\n        writer: &mut W,\n        fragment: &str,\n    ) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_char_escape<W>(\n        &mut self,\n        writer: &mut W,\n        char_escape: CharEscape,\n    ) -> io::Result<()>\n    where\n        W: ?Sized + io::Write,\n    {\n        use self::CharEscape::*;\n        let s = match char_escape {\n            Quote => b\"\\\\\\\"\",\n            ReverseSolidus => b\"\\\\\\\\\",\n            Solidus => b\"\\\\/\",\n            Backspace => b\"\\\\b\",\n            FormFeed => b\"\\\\f\",\n            LineFeed => b\"\\\\n\",\n            CarriageReturn => b\"\\\\r\",\n            Tab => b\"\\\\t\",\n            AsciiControl(byte) => {\n                static HEX_DIGITS: [u8; 16] = *b\"0123456789abcdef\";\n                let bytes = &[\n                    b'\\\\',\n                    b'u',\n                    b'0',\n                    b'0',\n                    HEX_DIGITS[(byte >> 4) as usize],\n                    HEX_DIGITS[(byte & 0xF) as usize],\n                ];\n                return writer.write_all(bytes);\n            }\n        };\n        writer.write_all(s)\n    }\n    fn write_byte_array<W>(&mut self, writer: &mut W, value: &[u8]) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n    #[inline]\n    fn write_raw_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>\n    where\n        W: ?Sized + io::Write;\n}\npub enum CharEscape {\n    /// An escaped quote `\"`\n    Quote,\n    /// An escaped reverse solidus `\\`\n    ReverseSolidus,\n    /// An escaped solidus `/`\n    Solidus,\n    /// An escaped backspace character (usually escaped as `\\b`)\n    Backspace,\n    /// An escaped form feed character (usually escaped as `\\f`)\n    FormFeed,\n    /// An escaped line feed character (usually escaped as `\\n`)\n    LineFeed,\n    /// An escaped carriage return character (usually escaped as `\\r`)\n    CarriageReturn,\n    /// An escaped tab character (usually escaped as `\\t`)\n    Tab,\n    /// An escaped ASCII plane control character (usually escaped as\n    /// `\\u00XX` where `XX` are two hex characters)\n    AsciiControl(u8),\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes a character escape code to the specified writer.\n1781 fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>\n1782 where\n1783     W: ?Sized + io::Write,\n1784 {\n1785     use self::CharEscape::*;\n1786 \n1787     let s = match char_escape {\n1788         Quote => b\"\\\\\\\"\",\n1789         ReverseSolidus => b\"\\\\\\\\\",\n1790         Solidus => b\"\\\\/\",\n1791         Backspace => b\"\\\\b\",\n1792         FormFeed => b\"\\\\f\",\n1793         LineFeed => b\"\\\\n\",\n1794         CarriageReturn => b\"\\\\r\",\n1795         Tab => b\"\\\\t\",\n1796         AsciiControl(byte) => {\n1797             static HEX_DIGITS: [u8; 16] = *b\"0123456789abcdef\";\n1798             let bytes = &[\n1799                 b'\\\\',\n1800                 b'u',\n1801                 b'0',\n1802                 b'0',\n1803                 HEX_DIGITS[(byte >> 4) as usize],\n1804                 HEX_DIGITS[(byte & 0xF) as usize],\n1805             ];\n1806             return writer.write_all(bytes);\n1807         }\n1808     };\n1809 \n1810     writer.write_all(s)\n1811 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}