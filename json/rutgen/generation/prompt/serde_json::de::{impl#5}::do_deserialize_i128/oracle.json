{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\n#[cfg(feature = \"float_roundtrip\")]\nuse crate::lexical;\nuse crate::number::Number;\nuse crate::read::{self, Fused, Reference};\nuse alloc::string::String;\nuse alloc::vec::Vec;\n#[cfg(feature = \"float_roundtrip\")]\nuse core::iter;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::result;\nuse core::str::FromStr;\nuse serde::de::{self, Expected, Unexpected};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberDeserializer;\npub use crate::read::{Read, SliceRead, StrRead};\n#[cfg(feature = \"std\")]\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub use crate::read::IoRead;\n#[cfg(not(feature = \"float_roundtrip\"))]\nstatic POW10: [f64; 309] = [\n    1e000,\n    1e001,\n    1e002,\n    1e003,\n    1e004,\n    1e005,\n    1e006,\n    1e007,\n    1e008,\n    1e009,\n    1e010,\n    1e011,\n    1e012,\n    1e013,\n    1e014,\n    1e015,\n    1e016,\n    1e017,\n    1e018,\n    1e019,\n    1e020,\n    1e021,\n    1e022,\n    1e023,\n    1e024,\n    1e025,\n    1e026,\n    1e027,\n    1e028,\n    1e029,\n    1e030,\n    1e031,\n    1e032,\n    1e033,\n    1e034,\n    1e035,\n    1e036,\n    1e037,\n    1e038,\n    1e039,\n    1e040,\n    1e041,\n    1e042,\n    1e043,\n    1e044,\n    1e045,\n    1e046,\n    1e047,\n    1e048,\n    1e049,\n    1e050,\n    1e051,\n    1e052,\n    1e053,\n    1e054,\n    1e055,\n    1e056,\n    1e057,\n    1e058,\n    1e059,\n    1e060,\n    1e061,\n    1e062,\n    1e063,\n    1e064,\n    1e065,\n    1e066,\n    1e067,\n    1e068,\n    1e069,\n    1e070,\n    1e071,\n    1e072,\n    1e073,\n    1e074,\n    1e075,\n    1e076,\n    1e077,\n    1e078,\n    1e079,\n    1e080,\n    1e081,\n    1e082,\n    1e083,\n    1e084,\n    1e085,\n    1e086,\n    1e087,\n    1e088,\n    1e089,\n    1e090,\n    1e091,\n    1e092,\n    1e093,\n    1e094,\n    1e095,\n    1e096,\n    1e097,\n    1e098,\n    1e099,\n    1e100,\n    1e101,\n    1e102,\n    1e103,\n    1e104,\n    1e105,\n    1e106,\n    1e107,\n    1e108,\n    1e109,\n    1e110,\n    1e111,\n    1e112,\n    1e113,\n    1e114,\n    1e115,\n    1e116,\n    1e117,\n    1e118,\n    1e119,\n    1e120,\n    1e121,\n    1e122,\n    1e123,\n    1e124,\n    1e125,\n    1e126,\n    1e127,\n    1e128,\n    1e129,\n    1e130,\n    1e131,\n    1e132,\n    1e133,\n    1e134,\n    1e135,\n    1e136,\n    1e137,\n    1e138,\n    1e139,\n    1e140,\n    1e141,\n    1e142,\n    1e143,\n    1e144,\n    1e145,\n    1e146,\n    1e147,\n    1e148,\n    1e149,\n    1e150,\n    1e151,\n    1e152,\n    1e153,\n    1e154,\n    1e155,\n    1e156,\n    1e157,\n    1e158,\n    1e159,\n    1e160,\n    1e161,\n    1e162,\n    1e163,\n    1e164,\n    1e165,\n    1e166,\n    1e167,\n    1e168,\n    1e169,\n    1e170,\n    1e171,\n    1e172,\n    1e173,\n    1e174,\n    1e175,\n    1e176,\n    1e177,\n    1e178,\n    1e179,\n    1e180,\n    1e181,\n    1e182,\n    1e183,\n    1e184,\n    1e185,\n    1e186,\n    1e187,\n    1e188,\n    1e189,\n    1e190,\n    1e191,\n    1e192,\n    1e193,\n    1e194,\n    1e195,\n    1e196,\n    1e197,\n    1e198,\n    1e199,\n    1e200,\n    1e201,\n    1e202,\n    1e203,\n    1e204,\n    1e205,\n    1e206,\n    1e207,\n    1e208,\n    1e209,\n    1e210,\n    1e211,\n    1e212,\n    1e213,\n    1e214,\n    1e215,\n    1e216,\n    1e217,\n    1e218,\n    1e219,\n    1e220,\n    1e221,\n    1e222,\n    1e223,\n    1e224,\n    1e225,\n    1e226,\n    1e227,\n    1e228,\n    1e229,\n    1e230,\n    1e231,\n    1e232,\n    1e233,\n    1e234,\n    1e235,\n    1e236,\n    1e237,\n    1e238,\n    1e239,\n    1e240,\n    1e241,\n    1e242,\n    1e243,\n    1e244,\n    1e245,\n    1e246,\n    1e247,\n    1e248,\n    1e249,\n    1e250,\n    1e251,\n    1e252,\n    1e253,\n    1e254,\n    1e255,\n    1e256,\n    1e257,\n    1e258,\n    1e259,\n    1e260,\n    1e261,\n    1e262,\n    1e263,\n    1e264,\n    1e265,\n    1e266,\n    1e267,\n    1e268,\n    1e269,\n    1e270,\n    1e271,\n    1e272,\n    1e273,\n    1e274,\n    1e275,\n    1e276,\n    1e277,\n    1e278,\n    1e279,\n    1e280,\n    1e281,\n    1e282,\n    1e283,\n    1e284,\n    1e285,\n    1e286,\n    1e287,\n    1e288,\n    1e289,\n    1e290,\n    1e291,\n    1e292,\n    1e293,\n    1e294,\n    1e295,\n    1e296,\n    1e297,\n    1e298,\n    1e299,\n    1e300,\n    1e301,\n    1e302,\n    1e303,\n    1e304,\n    1e305,\n    1e306,\n    1e307,\n    1e308,\n];\npub trait Read<'de>: private::Sealed {\n    const should_early_return_if_failed: bool;\n    fn next(&mut self) -> Result<Option<u8>>;\n    fn peek(&mut self) -> Result<Option<u8>>;\n    fn discard(&mut self);\n    fn position(&self) -> Position;\n    fn peek_position(&self) -> Position;\n    fn byte_offset(&self) -> usize;\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>>;\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>>;\n    fn ignore_str(&mut self) -> Result<()>;\n    fn decode_hex_escape(&mut self) -> Result<u16>;\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self);\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>;\n    fn set_failed(&mut self, failed: &mut bool);\n}\npub struct Deserializer<R> {\n    read: R,\n    scratch: Vec<u8>,\n    remaining_depth: u8,\n    #[cfg(feature = \"float_roundtrip\")]\n    single_precision: bool,\n    #[cfg(feature = \"unbounded_depth\")]\n    disable_recursion_limit: bool,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\nimpl<'de, R: Read<'de>> Deserializer<R> {\n    pub fn end(&mut self) -> Result<()> {}\n    pub fn into_iter<T>(self) -> StreamDeserializer<'de, R, T>\n    where\n        T: de::Deserialize<'de>,\n    {}\n    #[cfg(feature = \"unbounded_depth\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"unbounded_depth\")))]\n    pub fn disable_recursion_limit(&mut self) {}\n    pub(crate) fn peek(&mut self) -> Result<Option<u8>> {}\n    fn peek_or_null(&mut self) -> Result<u8> {}\n    fn eat_char(&mut self) {\n        self.read.discard();\n    }\n    fn next_char(&mut self) -> Result<Option<u8>> {}\n    fn next_char_or_null(&mut self) -> Result<u8> {}\n    #[cold]\n    fn error(&self, reason: ErrorCode) -> Error {\n        let position = self.read.position();\n        Error::syntax(reason, position.line, position.column)\n    }\n    #[cold]\n    fn peek_error(&self, reason: ErrorCode) -> Error {\n        let position = self.read.peek_position();\n        Error::syntax(reason, position.line, position.column)\n    }\n    fn parse_whitespace(&mut self) -> Result<Option<u8>> {\n        loop {\n            match tri!(self.peek()) {\n                Some(b' ' | b'\\n' | b'\\t' | b'\\r') => {\n                    self.eat_char();\n                }\n                other => {\n                    return Ok(other);\n                }\n            }\n        }\n    }\n    #[cold]\n    fn peek_invalid_type(&mut self, exp: &dyn Expected) -> Error {}\n    pub(crate) fn deserialize_number<'any, V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: de::Visitor<'any>,\n    {}\n    #[cfg(feature = \"float_roundtrip\")]\n    pub(crate) fn do_deserialize_f32<'any, V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: de::Visitor<'any>,\n    {}\n    pub(crate) fn do_deserialize_i128<'any, V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: de::Visitor<'any>,\n    {\n        let mut buf = String::new();\n        match tri!(self.parse_whitespace()) {\n            Some(b'-') => {\n                self.eat_char();\n                buf.push('-');\n            }\n            Some(_) => {}\n            None => {\n                return Err(self.peek_error(ErrorCode::EofWhileParsingValue));\n            }\n        }\n        tri!(self.scan_integer128(& mut buf));\n        let value = match buf.parse() {\n            Ok(int) => visitor.visit_i128(int),\n            Err(_) => {\n                return Err(self.error(ErrorCode::NumberOutOfRange));\n            }\n        };\n        match value {\n            Ok(value) => Ok(value),\n            Err(err) => Err(self.fix_position(err)),\n        }\n    }\n    pub(crate) fn do_deserialize_u128<'any, V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: de::Visitor<'any>,\n    {}\n    fn scan_integer128(&mut self, buf: &mut String) -> Result<()> {\n        match tri!(self.next_char_or_null()) {\n            b'0' => {\n                buf.push('0');\n                match tri!(self.peek_or_null()) {\n                    b'0'..=b'9' => Err(self.peek_error(ErrorCode::InvalidNumber)),\n                    _ => Ok(()),\n                }\n            }\n            c @ b'1'..=b'9' => {\n                buf.push(c as char);\n                while let c @ b'0'..=b'9' = tri!(self.peek_or_null()) {\n                    self.eat_char();\n                    buf.push(c as char);\n                }\n                Ok(())\n            }\n            _ => Err(self.error(ErrorCode::InvalidNumber)),\n        }\n    }\n    #[cold]\n    fn fix_position(&self, err: Error) -> Error {\n        err.fix_position(move |code| self.error(code))\n    }\n    fn parse_ident(&mut self, ident: &[u8]) -> Result<()> {}\n    fn parse_integer(&mut self, positive: bool) -> Result<ParserNumber> {}\n    fn parse_number(\n        &mut self,\n        positive: bool,\n        significand: u64,\n    ) -> Result<ParserNumber> {}\n    fn parse_decimal(\n        &mut self,\n        positive: bool,\n        mut significand: u64,\n        exponent_before_decimal_point: i32,\n    ) -> Result<f64> {}\n    fn parse_exponent(\n        &mut self,\n        positive: bool,\n        significand: u64,\n        starting_exp: i32,\n    ) -> Result<f64> {}\n    #[cfg(feature = \"float_roundtrip\")]\n    fn f64_from_parts(\n        &mut self,\n        positive: bool,\n        significand: u64,\n        exponent: i32,\n    ) -> Result<f64> {}\n    #[cfg(not(feature = \"float_roundtrip\"))]\n    fn f64_from_parts(\n        &mut self,\n        positive: bool,\n        significand: u64,\n        mut exponent: i32,\n    ) -> Result<f64> {}\n    #[cfg(feature = \"float_roundtrip\")]\n    #[cold]\n    #[inline(never)]\n    fn parse_long_integer(\n        &mut self,\n        positive: bool,\n        partial_significand: u64,\n    ) -> Result<f64> {}\n    #[cfg(not(feature = \"float_roundtrip\"))]\n    #[cold]\n    #[inline(never)]\n    fn parse_long_integer(&mut self, positive: bool, significand: u64) -> Result<f64> {}\n    #[cfg(feature = \"float_roundtrip\")]\n    #[cold]\n    fn parse_long_decimal(&mut self, positive: bool, integer_end: usize) -> Result<f64> {}\n    #[cfg(feature = \"float_roundtrip\")]\n    fn parse_long_exponent(\n        &mut self,\n        positive: bool,\n        integer_end: usize,\n    ) -> Result<f64> {}\n    #[cfg(feature = \"float_roundtrip\")]\n    #[cold]\n    #[inline(never)]\n    fn parse_decimal_overflow(\n        &mut self,\n        positive: bool,\n        significand: u64,\n        exponent: i32,\n    ) -> Result<f64> {}\n    #[cfg(not(feature = \"float_roundtrip\"))]\n    #[cold]\n    #[inline(never)]\n    fn parse_decimal_overflow(\n        &mut self,\n        positive: bool,\n        significand: u64,\n        exponent: i32,\n    ) -> Result<f64> {}\n    #[cold]\n    #[inline(never)]\n    fn parse_exponent_overflow(\n        &mut self,\n        positive: bool,\n        zero_significand: bool,\n        positive_exp: bool,\n    ) -> Result<f64> {}\n    #[cfg(feature = \"float_roundtrip\")]\n    fn f64_long_from_parts(\n        &mut self,\n        positive: bool,\n        integer_end: usize,\n        exponent: i32,\n    ) -> Result<f64> {}\n    fn parse_any_signed_number(&mut self) -> Result<ParserNumber> {}\n    #[cfg(not(feature = \"arbitrary_precision\"))]\n    fn parse_any_number(&mut self, positive: bool) -> Result<ParserNumber> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    fn parse_any_number(&mut self, positive: bool) -> Result<ParserNumber> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    fn scan_or_eof(&mut self, buf: &mut String) -> Result<u8> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    fn scan_integer(&mut self, buf: &mut String) -> Result<()> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    fn scan_number(&mut self, buf: &mut String) -> Result<()> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    fn scan_decimal(&mut self, buf: &mut String) -> Result<()> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    fn scan_exponent(&mut self, e: char, buf: &mut String) -> Result<()> {}\n    fn parse_object_colon(&mut self) -> Result<()> {}\n    fn end_seq(&mut self) -> Result<()> {}\n    fn end_map(&mut self) -> Result<()> {}\n    fn ignore_value(&mut self) -> Result<()> {}\n    fn ignore_integer(&mut self) -> Result<()> {}\n    fn ignore_decimal(&mut self) -> Result<()> {}\n    fn ignore_exponent(&mut self) -> Result<()> {}\n    #[cfg(feature = \"raw_value\")]\n    fn deserialize_raw_value<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: de::Visitor<'de>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n356 pub(crate) fn do_deserialize_i128<'any, V>(&mut self, visitor: V) -> Result<V::Value>\n357 where\n358     V: de::Visitor<'any>,\n359 {\n360     let mut buf = String::new();\n361 \n362     match tri!(self.parse_whitespace()) {\n363         Some(b'-') => {\n364             self.eat_char();\n365             buf.push('-');\n366         }\n367         Some(_) => {}\n368         None => {\n369             return Err(self.peek_error(ErrorCode::EofWhileParsingValue));\n370         }\n371     }\n372 \n373     tri!(self.scan_integer128(&mut buf));\n374 \n375     let value = match buf.parse() {\n376         Ok(int) => visitor.visit_i128(int),\n377         Err(_) => {\n378             return Err(self.error(ErrorCode::NumberOutOfRange));\n379         }\n380     };\n381 \n382     match value {\n383         Ok(value) => Ok(value),\n384         Err(err) => Err(self.fix_position(err)),\n385     }\n386 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}