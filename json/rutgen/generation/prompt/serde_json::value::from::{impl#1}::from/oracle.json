{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/from.rs\n// crate name is serde_json\nuse super::Value;\nuse crate::map::Map;\nuse crate::number::Number;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\nuse alloc::vec::Vec;\npub trait Number: AsCast + ops::Add<Output = Self> {}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\npub struct Map<K, V> {\n    map: MapImpl<K, V>,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl<T> From<Option<T>> for Value\nwhere\n    T: Into<Value>,\n{\n    fn from(opt: Option<T>) -> Self {\n        match opt {\n            None => Value::Null,\n            Some(value) => Into::into(value),\n        }\n    }\n}\nimpl Number {\n    pub fn is_i64(&self) -> bool {}\n    pub fn is_u64(&self) -> bool {}\n    pub fn is_f64(&self) -> bool {}\n    pub fn as_i64(&self) -> Option<i64> {}\n    pub fn as_u64(&self) -> Option<u64> {}\n    pub fn as_f64(&self) -> Option<f64> {}\n    pub fn from_f64(f: f64) -> Option<Number> {\n        if f.is_finite() {\n            let n = {\n                #[cfg(not(feature = \"arbitrary_precision\"))] { N::Float(f) }\n                #[cfg(feature = \"arbitrary_precision\")]\n                { ryu::Buffer::new().format_finite(f).to_owned() }\n            };\n            Some(Number { n })\n        } else {\n            None\n        }\n    }\n    pub fn as_i128(&self) -> Option<i128> {}\n    pub fn as_u128(&self) -> Option<u128> {}\n    pub fn from_i128(i: i128) -> Option<Number> {}\n    pub fn from_u128(i: u128) -> Option<Number> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"arbitrary_precision\")))]\n    pub fn as_str(&self) -> &str {}\n    pub(crate) fn as_f32(&self) -> Option<f32> {}\n    pub(crate) fn from_f32(f: f32) -> Option<Number> {}\n    #[cfg(feature = \"arbitrary_precision\")]\n    #[inline]\n    pub fn from_string_unchecked(n: String) -> Self {\n        Number { n }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Convert 64-bit floating point number to `Value::Number`, or\n/// `Value::Null` if infinite or NaN.\n///\n/// # Examples\n///\n/// ```\n/// use serde_json::Value;\n///\n/// let f: f64 = 13.37;\n/// let x: Value = f.into();\n/// ```\n59 fn from(f: f64) -> Self {\n60     Number::from_f64(f).map_or(Value::Null, Value::Number)\n61 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}