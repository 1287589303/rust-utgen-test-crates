{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/number.rs\n// crate name is serde_json\n#[cfg(feature = \"arbitrary_precision\")]\ntype N = String;\nuse crate::de::ParserNumber;\nuse crate::error::Error;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::error::ErrorCode;\n#[cfg(feature = \"arbitrary_precision\")]\nuse alloc::borrow::ToOwned;\n#[cfg(feature = \"arbitrary_precision\")]\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\n#[cfg(not(feature = \"arbitrary_precision\"))]\nuse core::hash::{Hash, Hasher};\nuse serde::de::{self, Unexpected, Visitor};\n#[cfg(feature = \"arbitrary_precision\")]\nuse serde::de::{IntoDeserializer, MapAccess};\nuse serde::{\n    forward_to_deserialize_any, Deserialize, Deserializer, Serialize, Serializer,\n};\n#[cfg(feature = \"arbitrary_precision\")]\npub(crate) const TOKEN: &str = \"$serde_json::private::Number\";\n#[cfg(not(feature = \"arbitrary_precision\"))]\n#[derive(Copy, Clone)]\nenum N {\n    PosInt(u64),\n    /// Always less than zero.\n    NegInt(i64),\n    /// Always finite.\n    Float(f64),\n}\n#[cfg(not(feature = \"arbitrary_precision\"))]\nimpl Hash for N {\n    fn hash<H: Hasher>(&self, h: &mut H) {\n        match *self {\n            N::PosInt(i) => i.hash(h),\n            N::NegInt(i) => i.hash(h),\n            N::Float(f) => {\n                if f == 0.0f64 {\n                    0.0f64.to_bits().hash(h);\n                } else {\n                    f.to_bits().hash(h);\n                }\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n54 fn hash<H: Hasher>(&self, h: &mut H) {\n55     match *self {\n56         N::PosInt(i) => i.hash(h),\n57         N::NegInt(i) => i.hash(h),\n58         N::Float(f) => {\n59             if f == 0.0f64 {\n60                 // There are 2 zero representations, +0 and -0, which\n61                 // compare equal but have different bits. We use the +0 hash\n62                 // for both so that hash(+0) == hash(-0).\n63                 0.0f64.to_bits().hash(h);\n64             } else {\n65                 f.to_bits().hash(h);\n66             }\n67         }\n68     }\n69 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}