{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/de.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode};\nuse crate::map::Map;\nuse crate::number::Number;\nuse crate::value::Value;\nuse alloc::borrow::{Cow, ToOwned};\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse alloc::string::ToString;\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::slice;\nuse core::str::FromStr;\nuse serde::de::{\n    self, Deserialize, DeserializeSeed, Deserializer as _, EnumAccess, Expected,\n    IntoDeserializer, MapAccess, SeqAccess, Unexpected, VariantAccess, Visitor,\n};\nuse serde::forward_to_deserialize_any;\n#[cfg(feature = \"arbitrary_precision\")]\nuse crate::number::NumberFromString;\nstruct MapKeyDeserializer<'de> {\n    key: Cow<'de, str>,\n}\npub struct Error;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nimpl<'de> serde::Deserializer<'de> for MapKeyDeserializer<'de> {\n    type Error = Error;\n    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value, Error>\n    where\n        V: Visitor<'de>,\n    {}\n    fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Error>\n    where\n        V: Visitor<'de>,\n    {\n        if self.key == \"true\" {\n            visitor.visit_bool(true)\n        } else if self.key == \"false\" {\n            visitor.visit_bool(false)\n        } else {\n            Err(serde::de::Error::invalid_type(Unexpected::Str(&self.key), &visitor))\n        }\n    }\n    #[inline]\n    fn deserialize_option<V>(self, visitor: V) -> Result<V::Value, Error>\n    where\n        V: Visitor<'de>,\n    {}\n    #[inline]\n    fn deserialize_newtype_struct<V>(\n        self,\n        _name: &'static str,\n        visitor: V,\n    ) -> Result<V::Value, Error>\n    where\n        V: Visitor<'de>,\n    {}\n    fn deserialize_enum<V>(\n        self,\n        name: &'static str,\n        variants: &'static [&'static str],\n        visitor: V,\n    ) -> Result<V::Value, Error>\n    where\n        V: Visitor<'de>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1265 fn deserialize_bool<V>(self, visitor: V) -> Result<V::Value, Error>\n1266 where\n1267     V: Visitor<'de>,\n1268 {\n1269     if self.key == \"true\" {\n1270         visitor.visit_bool(true)\n1271     } else if self.key == \"false\" {\n1272         visitor.visit_bool(false)\n1273     } else {\n1274         Err(serde::de::Error::invalid_type(\n1275             Unexpected::Str(&self.key),\n1276             &visitor,\n1277         ))\n1278     }\n1279 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}