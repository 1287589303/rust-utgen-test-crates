{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub struct Error;\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\nimpl Display for ErrorCode {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            ErrorCode::Message(msg) => f.write_str(msg),\n            ErrorCode::Io(err) => Display::fmt(err, f),\n            ErrorCode::EofWhileParsingList => f.write_str(\"EOF while parsing a list\"),\n            ErrorCode::EofWhileParsingObject => {\n                f.write_str(\"EOF while parsing an object\")\n            }\n            ErrorCode::EofWhileParsingString => f.write_str(\"EOF while parsing a string\"),\n            ErrorCode::EofWhileParsingValue => f.write_str(\"EOF while parsing a value\"),\n            ErrorCode::ExpectedColon => f.write_str(\"expected `:`\"),\n            ErrorCode::ExpectedListCommaOrEnd => f.write_str(\"expected `,` or `]`\"),\n            ErrorCode::ExpectedObjectCommaOrEnd => f.write_str(\"expected `,` or `}`\"),\n            ErrorCode::ExpectedSomeIdent => f.write_str(\"expected ident\"),\n            ErrorCode::ExpectedSomeValue => f.write_str(\"expected value\"),\n            ErrorCode::ExpectedDoubleQuote => f.write_str(\"expected `\\\"`\"),\n            ErrorCode::InvalidEscape => f.write_str(\"invalid escape\"),\n            ErrorCode::InvalidNumber => f.write_str(\"invalid number\"),\n            ErrorCode::NumberOutOfRange => f.write_str(\"number out of range\"),\n            ErrorCode::InvalidUnicodeCodePoint => {\n                f.write_str(\"invalid unicode code point\")\n            }\n            ErrorCode::ControlCharacterWhileParsingString => {\n                f.write_str(\n                    \"control character (\\\\u0000-\\\\u001F) found while parsing a string\",\n                )\n            }\n            ErrorCode::KeyMustBeAString => f.write_str(\"key must be a string\"),\n            ErrorCode::ExpectedNumericKey => {\n                f.write_str(\"invalid value: expected key to be a number in quotes\")\n            }\n            ErrorCode::FloatKeyMustBeFinite => {\n                f.write_str(\"float key must be finite (got NaN or +/-inf)\")\n            }\n            ErrorCode::LoneLeadingSurrogateInHexEscape => {\n                f.write_str(\"lone leading surrogate in hex escape\")\n            }\n            ErrorCode::TrailingComma => f.write_str(\"trailing comma\"),\n            ErrorCode::TrailingCharacters => f.write_str(\"trailing characters\"),\n            ErrorCode::UnexpectedEndOfHexEscape => {\n                f.write_str(\"unexpected end of hex escape\")\n            }\n            ErrorCode::RecursionLimitExceeded => f.write_str(\"recursion limit exceeded\"),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n350 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n351     match self {\n352         ErrorCode::Message(msg) => f.write_str(msg),\n353         ErrorCode::Io(err) => Display::fmt(err, f),\n354         ErrorCode::EofWhileParsingList => f.write_str(\"EOF while parsing a list\"),\n355         ErrorCode::EofWhileParsingObject => f.write_str(\"EOF while parsing an object\"),\n356         ErrorCode::EofWhileParsingString => f.write_str(\"EOF while parsing a string\"),\n357         ErrorCode::EofWhileParsingValue => f.write_str(\"EOF while parsing a value\"),\n358         ErrorCode::ExpectedColon => f.write_str(\"expected `:`\"),\n359         ErrorCode::ExpectedListCommaOrEnd => f.write_str(\"expected `,` or `]`\"),\n360         ErrorCode::ExpectedObjectCommaOrEnd => f.write_str(\"expected `,` or `}`\"),\n361         ErrorCode::ExpectedSomeIdent => f.write_str(\"expected ident\"),\n362         ErrorCode::ExpectedSomeValue => f.write_str(\"expected value\"),\n363         ErrorCode::ExpectedDoubleQuote => f.write_str(\"expected `\\\"`\"),\n364         ErrorCode::InvalidEscape => f.write_str(\"invalid escape\"),\n365         ErrorCode::InvalidNumber => f.write_str(\"invalid number\"),\n366         ErrorCode::NumberOutOfRange => f.write_str(\"number out of range\"),\n367         ErrorCode::InvalidUnicodeCodePoint => f.write_str(\"invalid unicode code point\"),\n368         ErrorCode::ControlCharacterWhileParsingString => {\n369             f.write_str(\"control character (\\\\u0000-\\\\u001F) found while parsing a string\")\n370         }\n371         ErrorCode::KeyMustBeAString => f.write_str(\"key must be a string\"),\n372         ErrorCode::ExpectedNumericKey => {\n373             f.write_str(\"invalid value: expected key to be a number in quotes\")\n374         }\n375         ErrorCode::FloatKeyMustBeFinite => {\n376             f.write_str(\"float key must be finite (got NaN or +/-inf)\")\n377         }\n378         ErrorCode::LoneLeadingSurrogateInHexEscape => {\n379             f.write_str(\"lone leading surrogate in hex escape\")\n380         }\n381         ErrorCode::TrailingComma => f.write_str(\"trailing comma\"),\n382         ErrorCode::TrailingCharacters => f.write_str(\"trailing characters\"),\n383         ErrorCode::UnexpectedEndOfHexEscape => f.write_str(\"unexpected end of hex escape\"),\n384         ErrorCode::RecursionLimitExceeded => f.write_str(\"recursion limit exceeded\"),\n385     }\n386 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}