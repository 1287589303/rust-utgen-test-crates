{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nstruct ErrorImpl {\n    code: ErrorCode,\n    line: usize,\n    column: usize,\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\nfn make_error(mut msg: String) -> Error {\n    let (line, column) = parse_line_col(&mut msg).unwrap_or((0, 0));\n    Error {\n        err: Box::new(ErrorImpl {\n            code: ErrorCode::Message(msg.into_boxed_str()),\n            line,\n            column,\n        }),\n    }\n}\nfn parse_line_col(msg: &mut String) -> Option<(usize, usize)> {\n    let start_of_suffix = match msg.rfind(\" at line \") {\n        Some(index) => index,\n        None => return None,\n    };\n    let start_of_line = start_of_suffix + \" at line \".len();\n    let mut end_of_line = start_of_line;\n    while starts_with_digit(&msg[end_of_line..]) {\n        end_of_line += 1;\n    }\n    if !msg[end_of_line..].starts_with(\" column \") {\n        return None;\n    }\n    let start_of_column = end_of_line + \" column \".len();\n    let mut end_of_column = start_of_column;\n    while starts_with_digit(&msg[end_of_column..]) {\n        end_of_column += 1;\n    }\n    if end_of_column < msg.len() {\n        return None;\n    }\n    let line = match usize::from_str(&msg[start_of_line..end_of_line]) {\n        Ok(line) => line,\n        Err(_) => return None,\n    };\n    let column = match usize::from_str(&msg[start_of_column..end_of_column]) {\n        Ok(column) => column,\n        Err(_) => return None,\n    };\n    msg.truncate(start_of_suffix);\n    Some((line, column))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n483 fn make_error(mut msg: String) -> Error {\n484     let (line, column) = parse_line_col(&mut msg).unwrap_or((0, 0));\n485     Error {\n486         err: Box::new(ErrorImpl {\n487             code: ErrorCode::Message(msg.into_boxed_str()),\n488             line,\n489             column,\n490         }),\n491     }\n492 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}