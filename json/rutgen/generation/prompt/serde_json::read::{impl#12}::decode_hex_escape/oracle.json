{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\npub trait Read<'de>: private::Sealed {\n    const should_early_return_if_failed: bool;\n    fn next(&mut self) -> Result<Option<u8>>;\n    fn peek(&mut self) -> Result<Option<u8>>;\n    fn discard(&mut self);\n    fn position(&self) -> Position;\n    fn peek_position(&self) -> Position;\n    fn byte_offset(&self) -> usize;\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>>;\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>>;\n    fn ignore_str(&mut self) -> Result<()>;\n    fn decode_hex_escape(&mut self) -> Result<u16>;\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self);\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>;\n    fn set_failed(&mut self, failed: &mut bool);\n}\npub trait Index: private::Sealed {\n    fn index_into<'v>(&self, v: &'v Value) -> Option<&'v Value>;\n    fn index_into_mut<'v>(&self, v: &'v mut Value) -> Option<&'v mut Value>;\n    fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value;\n}\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn flush(&mut self) -> Result<()>;\n}\npub trait Float: Number {\n    type Unsigned: Integer;\n    const ZERO: Self;\n    const MAX_DIGITS: usize;\n    const EXPONENT_MASK: Self::Unsigned;\n    const HIDDEN_BIT_MASK: Self::Unsigned;\n    const MANTISSA_MASK: Self::Unsigned;\n    const INFINITY_BITS: Self::Unsigned;\n    const MANTISSA_SIZE: i32;\n    const EXPONENT_BIAS: i32;\n    const DENORMAL_EXPONENT: i32;\n    const MAX_EXPONENT: i32;\n    const DEFAULT_SHIFT: i32;\n    const CARRY_MASK: u64;\n    fn exponent_limit() -> (i32, i32);\n    fn mantissa_limit() -> i32;\n    fn pow10(self, n: i32) -> Self;\n    fn from_bits(u: Self::Unsigned) -> Self;\n    fn to_bits(self) -> Self::Unsigned;\n    fn is_sign_positive(self) -> bool;\n    #[inline]\n    fn is_denormal(self) -> bool;\n    #[inline]\n    fn is_special(self) -> bool;\n    #[inline]\n    fn is_inf(self) -> bool;\n    #[inline]\n    fn exponent(self) -> i32;\n    #[inline]\n    fn mantissa(self) -> Self::Unsigned {\n        let bits = self.to_bits();\n        let s = bits & Self::MANTISSA_MASK;\n        if !self.is_denormal() { s + Self::HIDDEN_BIT_MASK } else { s }\n    }\n    #[inline]\n    fn next_positive(self) -> Self {\n        debug_assert!(self.is_sign_positive() && ! self.is_inf());\n        Self::from_bits(self.to_bits() + Self::Unsigned::as_cast(1u32))\n    }\n    #[inline]\n    fn round_positive_even(self) -> Self {\n        if self.mantissa() & Self::Unsigned::as_cast(1u32)\n            == Self::Unsigned::as_cast(1u32)\n        {\n            self.next_positive()\n        } else {\n            self\n        }\n    }\n}\npub(crate) trait FloatErrors {\n    fn error_scale() -> u32;\n    fn error_halfscale() -> u32;\n    fn error_is_accurate<F: Float>(count: u32, fp: &ExtendedFloat) -> bool;\n}\ntrait Hi64<T>: AsRef<[T]> {\n    fn hi64_1(&self) -> (u64, bool);\n    fn hi64_2(&self) -> (u64, bool);\n    fn hi64_3(&self) -> (u64, bool);\n    #[inline]\n    fn hi64(&self) -> (u64, bool);\n}\npub trait Sealed {}\npub struct Serializer;\npub struct Deserializer<R> {\n    read: R,\n    scratch: Vec<u8>,\n    remaining_depth: u8,\n    #[cfg(feature = \"float_roundtrip\")]\n    single_precision: bool,\n    #[cfg(feature = \"unbounded_depth\")]\n    disable_recursion_limit: bool,\n}\n#[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\npub struct Serializer<W, F = CompactFormatter> {\n    writer: W,\n    formatter: F,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\nimpl<'de, R> Read<'de> for &mut R\nwhere\n    R: Read<'de>,\n{\n    const should_early_return_if_failed: bool = R::should_early_return_if_failed;\n    fn next(&mut self) -> Result<Option<u8>> {}\n    fn peek(&mut self) -> Result<Option<u8>> {}\n    fn discard(&mut self) {}\n    fn position(&self) -> Position {}\n    fn peek_position(&self) -> Position {}\n    fn byte_offset(&self) -> usize {}\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>> {}\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>> {}\n    fn ignore_str(&mut self) -> Result<()> {}\n    fn decode_hex_escape(&mut self) -> Result<u16> {\n        R::decode_hex_escape(self)\n    }\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self) {}\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>,\n    {}\n    fn set_failed(&mut self, failed: &mut bool) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n805 fn decode_hex_escape(&mut self) -> Result<u16> {\n806     R::decode_hex_escape(self)\n807 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}