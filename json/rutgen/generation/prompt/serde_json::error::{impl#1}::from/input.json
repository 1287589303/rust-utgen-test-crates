{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\n#[derive(Copy, Clone, PartialEq, Eq, Debug)]\npub enum Category {\n    /// The error was caused by a failure to read or write bytes on an I/O\n    /// stream.\n    Io,\n    /// The error was caused by input that was not syntactically valid JSON.\n    Syntax,\n    /// The error was caused by input data that was semantically incorrect.\n    ///\n    /// For example, JSON containing a number is semantically incorrect when the\n    /// type being deserialized into holds a String.\n    Data,\n    /// The error was caused by prematurely reaching the end of the input data.\n    ///\n    /// Callers that process streaming input may be interested in retrying the\n    /// deserialization once more data is available.\n    Eof,\n}\n#[cfg(feature = \"std\")]\n#[allow(clippy::fallible_impl_from)]\nimpl From<Error> for io::Error {\n    fn from(j: Error) -> Self {\n        if let ErrorCode::Io(err) = j.err.code {\n            err\n        } else {\n            match j.classify() {\n                Category::Io => unreachable!(),\n                Category::Syntax | Category::Data => {\n                    io::Error::new(ErrorKind::InvalidData, j)\n                }\n                Category::Eof => io::Error::new(ErrorKind::UnexpectedEof, j),\n            }\n        }\n    }\n}\nimpl Error {\n    pub fn line(&self) -> usize {}\n    pub fn column(&self) -> usize {}\n    pub fn classify(&self) -> Category {\n        match self.err.code {\n            ErrorCode::Message(_) => Category::Data,\n            ErrorCode::Io(_) => Category::Io,\n            ErrorCode::EofWhileParsingList\n            | ErrorCode::EofWhileParsingObject\n            | ErrorCode::EofWhileParsingString\n            | ErrorCode::EofWhileParsingValue => Category::Eof,\n            ErrorCode::ExpectedColon\n            | ErrorCode::ExpectedListCommaOrEnd\n            | ErrorCode::ExpectedObjectCommaOrEnd\n            | ErrorCode::ExpectedSomeIdent\n            | ErrorCode::ExpectedSomeValue\n            | ErrorCode::ExpectedDoubleQuote\n            | ErrorCode::InvalidEscape\n            | ErrorCode::InvalidNumber\n            | ErrorCode::NumberOutOfRange\n            | ErrorCode::InvalidUnicodeCodePoint\n            | ErrorCode::ControlCharacterWhileParsingString\n            | ErrorCode::KeyMustBeAString\n            | ErrorCode::ExpectedNumericKey\n            | ErrorCode::FloatKeyMustBeFinite\n            | ErrorCode::LoneLeadingSurrogateInHexEscape\n            | ErrorCode::TrailingComma\n            | ErrorCode::TrailingCharacters\n            | ErrorCode::UnexpectedEndOfHexEscape\n            | ErrorCode::RecursionLimitExceeded => Category::Syntax,\n        }\n    }\n    pub fn is_io(&self) -> bool {}\n    pub fn is_syntax(&self) -> bool {}\n    pub fn is_data(&self) -> bool {}\n    pub fn is_eof(&self) -> bool {}\n    #[cfg(feature = \"std\")]\n    pub fn io_error_kind(&self) -> Option<ErrorKind> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Convert a `serde_json::Error` into an `io::Error`.\n///\n/// JSON syntax and data errors are turned into `InvalidData` I/O errors.\n/// EOF errors are turned into `UnexpectedEof` I/O errors.\n///\n/// ```\n/// use std::io;\n///\n/// enum MyError {\n///     Io(io::Error),\n///     Json(serde_json::Error),\n/// }\n///\n/// impl From<serde_json::Error> for MyError {\n///     fn from(err: serde_json::Error) -> MyError {\n///         use serde_json::error::Category;\n///         match err.classify() {\n///             Category::Io => {\n///                 MyError::Io(err.into())\n///             }\n///             Category::Syntax | Category::Data | Category::Eof => {\n///                 MyError::Json(err)\n///             }\n///         }\n///     }\n/// }\n/// ```\n217 fn from(j: Error) -> Self {\n218     if let ErrorCode::Io(err) = j.err.code {\n219         err\n220     } else {\n221         match j.classify() {\n222             Category::Io => unreachable!(),\n223             Category::Syntax | Category::Data => io::Error::new(ErrorKind::InvalidData, j),\n224             Category::Eof => io::Error::new(ErrorKind::UnexpectedEof, j),\n225         }\n226     }\n227 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}