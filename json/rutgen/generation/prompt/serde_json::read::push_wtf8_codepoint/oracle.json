{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\n#[inline]\nfn push_wtf8_codepoint(n: u32, scratch: &mut Vec<u8>) {\n    if n < 0x80 {\n        scratch.push(n as u8);\n        return;\n    }\n    scratch.reserve(4);\n    unsafe {\n        let ptr = scratch.as_mut_ptr().add(scratch.len());\n        let encoded_len = match n {\n            0..=0x7F => unreachable!(),\n            0x80..=0x7FF => {\n                ptr.write(((n >> 6) & 0b0001_1111) as u8 | 0b1100_0000);\n                2\n            }\n            0x800..=0xFFFF => {\n                ptr.write(((n >> 12) & 0b0000_1111) as u8 | 0b1110_0000);\n                ptr.add(1).write(((n >> 6) & 0b0011_1111) as u8 | 0b1000_0000);\n                3\n            }\n            0x1_0000..=0x10_FFFF => {\n                ptr.write(((n >> 18) & 0b0000_0111) as u8 | 0b1111_0000);\n                ptr.add(1).write(((n >> 12) & 0b0011_1111) as u8 | 0b1000_0000);\n                ptr.add(2).write(((n >> 6) & 0b0011_1111) as u8 | 0b1000_0000);\n                4\n            }\n            0x11_0000.. => unreachable!(),\n        };\n        ptr.add(encoded_len - 1).write((n & 0b0011_1111) as u8 | 0b1000_0000);\n        scratch.set_len(scratch.len() + encoded_len);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Adds a WTF-8 codepoint to the end of the buffer. This is a more efficient\n/// implementation of String::push. The codepoint may be a surrogate.\n 978 fn push_wtf8_codepoint(n: u32, scratch: &mut Vec<u8>) {\n 979     if n < 0x80 {\n 980         scratch.push(n as u8);\n 981         return;\n 982     }\n 983 \n 984     scratch.reserve(4);\n 985 \n 986     // SAFETY: After the `reserve` call, `scratch` has at least 4 bytes of\n 987     // allocated but unintialized memory after its last initialized byte, which\n 988     // is where `ptr` points. All reachable match arms write `encoded_len` bytes\n 989     // to that region and update the length accordingly, and `encoded_len` is\n 990     // always <= 4.\n 991     unsafe {\n 992         let ptr = scratch.as_mut_ptr().add(scratch.len());\n 993 \n 994         let encoded_len = match n {\n 995             0..=0x7F => unreachable!(),\n 996             0x80..=0x7FF => {\n 997                 ptr.write(((n >> 6) & 0b0001_1111) as u8 | 0b1100_0000);\n 998                 2\n 999             }\n1000             0x800..=0xFFFF => {\n1001                 ptr.write(((n >> 12) & 0b0000_1111) as u8 | 0b1110_0000);\n1002                 ptr.add(1)\n1003                     .write(((n >> 6) & 0b0011_1111) as u8 | 0b1000_0000);\n1004                 3\n1005             }\n1006             0x1_0000..=0x10_FFFF => {\n1007                 ptr.write(((n >> 18) & 0b0000_0111) as u8 | 0b1111_0000);\n1008                 ptr.add(1)\n1009                     .write(((n >> 12) & 0b0011_1111) as u8 | 0b1000_0000);\n1010                 ptr.add(2)\n1011                     .write(((n >> 6) & 0b0011_1111) as u8 | 0b1000_0000);\n1012                 4\n1013             }\n1014             0x11_0000.. => unreachable!(),\n1015         };\n1016         ptr.add(encoded_len - 1)\n1017             .write((n & 0b0011_1111) as u8 | 0b1000_0000);\n1018 \n1019         scratch.set_len(scratch.len() + encoded_len);\n1020     }\n1021 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}