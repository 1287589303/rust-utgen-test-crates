{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is serde_json\npub type Result<T> = result::Result<T, Error>;\nuse crate::io;\nuse alloc::boxed::Box;\nuse alloc::string::{String, ToString};\nuse core::fmt::{self, Debug, Display};\nuse core::result;\nuse core::str::FromStr;\nuse serde::{de, ser};\n#[cfg(feature = \"std\")]\nuse std::error;\n#[cfg(feature = \"std\")]\nuse std::io::ErrorKind;\nfn parse_line_col(msg: &mut String) -> Option<(usize, usize)> {\n    let start_of_suffix = match msg.rfind(\" at line \") {\n        Some(index) => index,\n        None => return None,\n    };\n    let start_of_line = start_of_suffix + \" at line \".len();\n    let mut end_of_line = start_of_line;\n    while starts_with_digit(&msg[end_of_line..]) {\n        end_of_line += 1;\n    }\n    if !msg[end_of_line..].starts_with(\" column \") {\n        return None;\n    }\n    let start_of_column = end_of_line + \" column \".len();\n    let mut end_of_column = start_of_column;\n    while starts_with_digit(&msg[end_of_column..]) {\n        end_of_column += 1;\n    }\n    if end_of_column < msg.len() {\n        return None;\n    }\n    let line = match usize::from_str(&msg[start_of_line..end_of_line]) {\n        Ok(line) => line,\n        Err(_) => return None,\n    };\n    let column = match usize::from_str(&msg[start_of_column..end_of_column]) {\n        Ok(column) => column,\n        Err(_) => return None,\n    };\n    msg.truncate(start_of_suffix);\n    Some((line, column))\n}\nfn starts_with_digit(slice: &str) -> bool {\n    match slice.as_bytes().first() {\n        None => false,\n        Some(&byte) => byte >= b'0' && byte <= b'9',\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n494 fn parse_line_col(msg: &mut String) -> Option<(usize, usize)> {\n495     let start_of_suffix = match msg.rfind(\" at line \") {\n496         Some(index) => index,\n497         None => return None,\n498     };\n499 \n500     // Find start and end of line number.\n501     let start_of_line = start_of_suffix + \" at line \".len();\n502     let mut end_of_line = start_of_line;\n503     while starts_with_digit(&msg[end_of_line..]) {\n504         end_of_line += 1;\n505     }\n506 \n507     if !msg[end_of_line..].starts_with(\" column \") {\n508         return None;\n509     }\n510 \n511     // Find start and end of column number.\n512     let start_of_column = end_of_line + \" column \".len();\n513     let mut end_of_column = start_of_column;\n514     while starts_with_digit(&msg[end_of_column..]) {\n515         end_of_column += 1;\n516     }\n517 \n518     if end_of_column < msg.len() {\n519         return None;\n520     }\n521 \n522     // Parse numbers.\n523     let line = match usize::from_str(&msg[start_of_line..end_of_line]) {\n524         Ok(line) => line,\n525         Err(_) => return None,\n526     };\n527     let column = match usize::from_str(&msg[start_of_column..end_of_column]) {\n528         Ok(column) => column,\n529         Err(_) => return None,\n530     };\n531 \n532     msg.truncate(start_of_suffix);\n533     Some((line, column))\n534 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}