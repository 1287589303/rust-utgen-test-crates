{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\nfn ignore_escape<'de, R>(read: &mut R) -> Result<()>\nwhere\n    R: ?Sized + Read<'de>,\n{\n    let ch = tri!(next_or_eof(read));\n    match ch {\n        b'\"' | b'\\\\' | b'/' | b'b' | b'f' | b'n' | b'r' | b't' => {}\n        b'u' => {\n            tri!(read.decode_hex_escape());\n        }\n        _ => {\n            return error(read, ErrorCode::InvalidEscape);\n        }\n    }\n    Ok(())\n}\nfn next_or_eof<'de, R>(read: &mut R) -> Result<u8>\nwhere\n    R: ?Sized + Read<'de>,\n{\n    match tri!(read.next()) {\n        Some(b) => Ok(b),\n        None => error(read, ErrorCode::EofWhileParsingString),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parses a JSON escape sequence and discards the value. Assumes the previous\n/// byte read was a backslash.\n1025 fn ignore_escape<'de, R>(read: &mut R) -> Result<()>\n1026 where\n1027     R: ?Sized + Read<'de>,\n1028 {\n1029     let ch = tri!(next_or_eof(read));\n1030 \n1031     match ch {\n1032         b'\"' | b'\\\\' | b'/' | b'b' | b'f' | b'n' | b'r' | b't' => {}\n1033         b'u' => {\n1034             // At this point we don't care if the codepoint is valid. We just\n1035             // want to consume it. We don't actually know what is valid or not\n1036             // at this point, because that depends on if this string will\n1037             // ultimately be parsed into a string or a byte buffer in the \"real\"\n1038             // parse.\n1039 \n1040             tri!(read.decode_hex_escape());\n1041         }\n1042         _ => {\n1043             return error(read, ErrorCode::InvalidEscape);\n1044         }\n1045     }\n1046 \n1047     Ok(())\n1048 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}