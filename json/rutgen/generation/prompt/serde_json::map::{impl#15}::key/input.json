{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is serde_json\n#[cfg(not(feature = \"preserve_order\"))]\ntype MapImpl<K, V> = BTreeMap<K, V>;\n#[cfg(feature = \"preserve_order\")]\ntype MapImpl<K, V> = IndexMap<K, V>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype VacantEntryImpl<'a> = btree_map::VacantEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype VacantEntryImpl<'a> = indexmap::map::VacantEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype OccupiedEntryImpl<'a> = btree_map::OccupiedEntry<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype OccupiedEntryImpl<'a> = indexmap::map::OccupiedEntry<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterImpl<'a> = btree_map::Iter<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterImpl<'a> = indexmap::map::Iter<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IterMutImpl<'a> = btree_map::IterMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IterMutImpl<'a> = indexmap::map::IterMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoIterImpl = btree_map::IntoIter<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoIterImpl = indexmap::map::IntoIter<String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype KeysImpl<'a> = btree_map::Keys<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype KeysImpl<'a> = indexmap::map::Keys<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesImpl<'a> = btree_map::Values<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesImpl<'a> = indexmap::map::Values<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype ValuesMutImpl<'a> = btree_map::ValuesMut<'a, String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype ValuesMutImpl<'a> = indexmap::map::ValuesMut<'a, String, Value>;\n#[cfg(not(feature = \"preserve_order\"))]\ntype IntoValuesImpl = btree_map::IntoValues<String, Value>;\n#[cfg(feature = \"preserve_order\")]\ntype IntoValuesImpl = indexmap::map::IntoValues<String, Value>;\nuse crate::error::Error;\nuse crate::value::Value;\nuse alloc::string::String;\n#[cfg(feature = \"preserve_order\")]\nuse alloc::vec::Vec;\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{Hash, Hasher};\nuse core::iter::FusedIterator;\n#[cfg(feature = \"preserve_order\")]\nuse core::mem;\nuse core::ops;\nuse serde::de;\n#[cfg(not(feature = \"preserve_order\"))]\nuse alloc::collections::{btree_map, BTreeMap};\n#[cfg(feature = \"preserve_order\")]\nuse indexmap::IndexMap;\npub struct OccupiedEntry<'a> {\n    occupied: OccupiedEntryImpl<'a>,\n}\npub struct VacantEntry<'a> {\n    vacant: VacantEntryImpl<'a>,\n}\npub enum Entry<'a> {\n    /// A vacant Entry.\n    Vacant(VacantEntry<'a>),\n    /// An occupied Entry.\n    Occupied(OccupiedEntry<'a>),\n}\nimpl<'a> Entry<'a> {\n    pub fn key(&self) -> &String {\n        match self {\n            Entry::Vacant(e) => e.key(),\n            Entry::Occupied(e) => e.key(),\n        }\n    }\n    pub fn or_insert(self, default: Value) -> &'a mut Value {}\n    pub fn or_insert_with<F>(self, default: F) -> &'a mut Value\n    where\n        F: FnOnce() -> Value,\n    {}\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut Value),\n    {\n        match self {\n            Entry::Occupied(mut entry) => {\n                f(entry.get_mut());\n                Entry::Occupied(entry)\n            }\n            Entry::Vacant(entry) => Entry::Vacant(entry),\n        }\n    }\n}\nimpl<'a> OccupiedEntry<'a> {\n    #[inline]\n    pub fn key(&self) -> &String {\n        self.occupied.key()\n    }\n    #[inline]\n    pub fn get(&self) -> &Value {}\n    #[inline]\n    pub fn get_mut(&mut self) -> &mut Value {}\n    #[inline]\n    pub fn into_mut(self) -> &'a mut Value {}\n    #[inline]\n    pub fn insert(&mut self, value: Value) -> Value {}\n    #[inline]\n    pub fn remove(self) -> Value {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove(self) -> Value {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove(self) -> Value {}\n    #[inline]\n    pub fn remove_entry(self) -> (String, Value) {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn swap_remove_entry(self) -> (String, Value) {}\n    #[cfg(feature = \"preserve_order\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"preserve_order\")))]\n    #[inline]\n    pub fn shift_remove_entry(self) -> (String, Value) {}\n}\nimpl<'a> VacantEntry<'a> {\n    #[inline]\n    pub fn key(&self) -> &String {\n        self.vacant.key()\n    }\n    #[inline]\n    pub fn insert(self, value: Value) -> &'a mut Value {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a reference to this entry's key.\n///\n/// # Examples\n///\n/// ```\n/// let mut map = serde_json::Map::new();\n/// assert_eq!(map.entry(\"serde\").key(), &\"serde\");\n/// ```\n659 pub fn key(&self) -> &String {\n660     match self {\n661         Entry::Vacant(e) => e.key(),\n662         Entry::Occupied(e) => e.key(),\n663     }\n664 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}