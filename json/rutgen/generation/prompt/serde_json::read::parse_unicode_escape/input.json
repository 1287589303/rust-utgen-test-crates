{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\n#[cold]\nfn parse_unicode_escape<'de, R: Read<'de>>(\n    read: &mut R,\n    validate: bool,\n    scratch: &mut Vec<u8>,\n) -> Result<()> {\n    let mut n = tri!(read.decode_hex_escape());\n    if validate && n >= 0xDC00 && n <= 0xDFFF {\n        return error(read, ErrorCode::LoneLeadingSurrogateInHexEscape);\n    }\n    loop {\n        if n < 0xD800 || n > 0xDBFF {\n            push_wtf8_codepoint(n as u32, scratch);\n            return Ok(());\n        }\n        let n1 = n;\n        if tri!(peek_or_eof(read)) == b'\\\\' {\n            read.discard();\n        } else {\n            return if validate {\n                read.discard();\n                error(read, ErrorCode::UnexpectedEndOfHexEscape)\n            } else {\n                push_wtf8_codepoint(n1 as u32, scratch);\n                Ok(())\n            };\n        }\n        if tri!(peek_or_eof(read)) == b'u' {\n            read.discard();\n        } else {\n            return if validate {\n                read.discard();\n                error(read, ErrorCode::UnexpectedEndOfHexEscape)\n            } else {\n                push_wtf8_codepoint(n1 as u32, scratch);\n                parse_escape(read, validate, scratch)\n            };\n        }\n        let n2 = tri!(read.decode_hex_escape());\n        if n2 < 0xDC00 || n2 > 0xDFFF {\n            if validate {\n                return error(read, ErrorCode::LoneLeadingSurrogateInHexEscape);\n            }\n            push_wtf8_codepoint(n1 as u32, scratch);\n            n = n2;\n            continue;\n        }\n        let n = ((((n1 - 0xD800) as u32) << 10) | (n2 - 0xDC00) as u32) + 0x1_0000;\n        push_wtf8_codepoint(n, scratch);\n        return Ok(());\n    }\n}\nfn parse_escape<'de, R: Read<'de>>(\n    read: &mut R,\n    validate: bool,\n    scratch: &mut Vec<u8>,\n) -> Result<()> {\n    let ch = tri!(next_or_eof(read));\n    match ch {\n        b'\"' => scratch.push(b'\"'),\n        b'\\\\' => scratch.push(b'\\\\'),\n        b'/' => scratch.push(b'/'),\n        b'b' => scratch.push(b'\\x08'),\n        b'f' => scratch.push(b'\\x0c'),\n        b'n' => scratch.push(b'\\n'),\n        b'r' => scratch.push(b'\\r'),\n        b't' => scratch.push(b'\\t'),\n        b'u' => return parse_unicode_escape(read, validate, scratch),\n        _ => return error(read, ErrorCode::InvalidEscape),\n    }\n    Ok(())\n}\nfn peek_or_eof<'de, R>(read: &mut R) -> Result<u8>\nwhere\n    R: ?Sized + Read<'de>,\n{\n    match tri!(read.peek()) {\n        Some(b) => Ok(b),\n        None => error(read, ErrorCode::EofWhileParsingString),\n    }\n}\n#[inline]\nfn push_wtf8_codepoint(n: u32, scratch: &mut Vec<u8>) {\n    if n < 0x80 {\n        scratch.push(n as u8);\n        return;\n    }\n    scratch.reserve(4);\n    unsafe {\n        let ptr = scratch.as_mut_ptr().add(scratch.len());\n        let encoded_len = match n {\n            0..=0x7F => unreachable!(),\n            0x80..=0x7FF => {\n                ptr.write(((n >> 6) & 0b0001_1111) as u8 | 0b1100_0000);\n                2\n            }\n            0x800..=0xFFFF => {\n                ptr.write(((n >> 12) & 0b0000_1111) as u8 | 0b1110_0000);\n                ptr.add(1).write(((n >> 6) & 0b0011_1111) as u8 | 0b1000_0000);\n                3\n            }\n            0x1_0000..=0x10_FFFF => {\n                ptr.write(((n >> 18) & 0b0000_0111) as u8 | 0b1111_0000);\n                ptr.add(1).write(((n >> 12) & 0b0011_1111) as u8 | 0b1000_0000);\n                ptr.add(2).write(((n >> 6) & 0b0011_1111) as u8 | 0b1000_0000);\n                4\n            }\n            0x11_0000.. => unreachable!(),\n        };\n        ptr.add(encoded_len - 1).write((n & 0b0011_1111) as u8 | 0b1000_0000);\n        scratch.set_len(scratch.len() + encoded_len);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parses a JSON \\u escape and appends it into the scratch space. Assumes `\\u`\n/// has just been read.\n900 fn parse_unicode_escape<'de, R: Read<'de>>(\n901     read: &mut R,\n902     validate: bool,\n903     scratch: &mut Vec<u8>,\n904 ) -> Result<()> {\n905     let mut n = tri!(read.decode_hex_escape());\n906 \n907     // Non-BMP characters are encoded as a sequence of two hex escapes,\n908     // representing UTF-16 surrogates. If deserializing a utf-8 string the\n909     // surrogates are required to be paired, whereas deserializing a byte string\n910     // accepts lone surrogates.\n911     if validate && n >= 0xDC00 && n <= 0xDFFF {\n912         // XXX: This is actually a trailing surrogate.\n913         return error(read, ErrorCode::LoneLeadingSurrogateInHexEscape);\n914     }\n915 \n916     loop {\n917         if n < 0xD800 || n > 0xDBFF {\n918             // Every u16 outside of the surrogate ranges is guaranteed to be a\n919             // legal char.\n920             push_wtf8_codepoint(n as u32, scratch);\n921             return Ok(());\n922         }\n923 \n924         // n is a leading surrogate, we now expect a trailing surrogate.\n925         let n1 = n;\n926 \n927         if tri!(peek_or_eof(read)) == b'\\\\' {\n928             read.discard();\n929         } else {\n930             return if validate {\n931                 read.discard();\n932                 error(read, ErrorCode::UnexpectedEndOfHexEscape)\n933             } else {\n934                 push_wtf8_codepoint(n1 as u32, scratch);\n935                 Ok(())\n936             };\n937         }\n938 \n939         if tri!(peek_or_eof(read)) == b'u' {\n940             read.discard();\n941         } else {\n942             return if validate {\n943                 read.discard();\n944                 error(read, ErrorCode::UnexpectedEndOfHexEscape)\n945             } else {\n946                 push_wtf8_codepoint(n1 as u32, scratch);\n947                 // The \\ prior to this byte started an escape sequence, so we\n948                 // need to parse that now. This recursive call does not blow the\n949                 // stack on malicious input because the escape is not \\u, so it\n950                 // will be handled by one of the easy nonrecursive cases.\n951                 parse_escape(read, validate, scratch)\n952             };\n953         }\n954 \n955         let n2 = tri!(read.decode_hex_escape());\n956 \n957         if n2 < 0xDC00 || n2 > 0xDFFF {\n958             if validate {\n959                 return error(read, ErrorCode::LoneLeadingSurrogateInHexEscape);\n960             }\n961             push_wtf8_codepoint(n1 as u32, scratch);\n962             // If n2 is a leading surrogate, we need to restart.\n963             n = n2;\n964             continue;\n965         }\n966 \n967         // This value is in range U+10000..=U+10FFFF, which is always a valid\n968         // codepoint.\n969         let n = ((((n1 - 0xD800) as u32) << 10) | (n2 - 0xDC00) as u32) + 0x1_0000;\n970         push_wtf8_codepoint(n, scratch);\n971         return Ok(());\n972     }\n973 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}