{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/value/ser.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse crate::map::Map;\nuse crate::value::{to_value, Value};\nuse alloc::borrow::ToOwned;\nuse alloc::string::{String, ToString};\nuse alloc::vec::Vec;\nuse core::fmt::Display;\nuse core::result;\nuse serde::ser::{Impossible, Serialize};\npub struct Serializer;\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub struct SerializeVec {\n    vec: Vec<Value>,\n}\n#[derive(Clone, PartialEq, Eq, Hash)]\npub struct Number {\n    n: N,\n}\npub struct SerializeTupleVariant {\n    name: String,\n    vec: Vec<Value>,\n}\npub struct Error;\npub struct SerializeStructVariant {\n    name: String,\n    map: Map<String, Value>,\n}\npub enum SerializeMap {\n    Map { map: Map<String, Value>, next_key: Option<String> },\n    #[cfg(feature = \"arbitrary_precision\")]\n    Number { out_value: Option<Value> },\n    #[cfg(feature = \"raw_value\")]\n    RawValue { out_value: Option<Value> },\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\n#[derive(Clone, Eq, PartialEq, Hash)]\npub enum Value {\n    /// Represents a JSON null value.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(null);\n    /// ```\n    Null,\n    /// Represents a JSON boolean.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(true);\n    /// ```\n    Bool(bool),\n    /// Represents a JSON number, whether integer or floating point.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(12.5);\n    /// ```\n    Number(Number),\n    /// Represents a JSON string.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!(\"a string\");\n    /// ```\n    String(String),\n    /// Represents a JSON array.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!([\"an\", \"array\"]);\n    /// ```\n    Array(Vec<Value>),\n    /// Represents a JSON object.\n    ///\n    /// By default the map is backed by a BTreeMap. Enable the `preserve_order`\n    /// feature of serde_json to use IndexMap instead, which preserves\n    /// entries in the order they are inserted into the map. In particular, this\n    /// allows JSON data to be deserialized into a Value and serialized to a\n    /// string while retaining the order of map keys in the input.\n    ///\n    /// ```\n    /// # use serde_json::json;\n    /// #\n    /// let v = json!({ \"an\": \"object\" });\n    /// ```\n    Object(Map<String, Value>),\n}\nimpl serde::Serializer for Serializer {\n    type Ok = Value;\n    type Error = Error;\n    type SerializeSeq = SerializeVec;\n    type SerializeTuple = SerializeVec;\n    type SerializeTupleStruct = SerializeVec;\n    type SerializeTupleVariant = SerializeTupleVariant;\n    type SerializeMap = SerializeMap;\n    type SerializeStruct = SerializeMap;\n    type SerializeStructVariant = SerializeStructVariant;\n    #[inline]\n    fn serialize_bool(self, value: bool) -> Result<Value> {}\n    #[inline]\n    fn serialize_i8(self, value: i8) -> Result<Value> {}\n    #[inline]\n    fn serialize_i16(self, value: i16) -> Result<Value> {}\n    #[inline]\n    fn serialize_i32(self, value: i32) -> Result<Value> {}\n    fn serialize_i64(self, value: i64) -> Result<Value> {}\n    fn serialize_i128(self, value: i128) -> Result<Value> {\n        #[cfg(feature = \"arbitrary_precision\")] { Ok(Value::Number(value.into())) }\n        #[cfg(not(feature = \"arbitrary_precision\"))]\n        {\n            if let Ok(value) = u64::try_from(value) {\n                Ok(Value::Number(value.into()))\n            } else if let Ok(value) = i64::try_from(value) {\n                Ok(Value::Number(value.into()))\n            } else {\n                Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))\n            }\n        }\n    }\n    #[inline]\n    fn serialize_u8(self, value: u8) -> Result<Value> {}\n    #[inline]\n    fn serialize_u16(self, value: u16) -> Result<Value> {}\n    #[inline]\n    fn serialize_u32(self, value: u32) -> Result<Value> {}\n    #[inline]\n    fn serialize_u64(self, value: u64) -> Result<Value> {}\n    fn serialize_u128(self, value: u128) -> Result<Value> {}\n    #[inline]\n    fn serialize_f32(self, float: f32) -> Result<Value> {}\n    #[inline]\n    fn serialize_f64(self, float: f64) -> Result<Value> {}\n    #[inline]\n    fn serialize_char(self, value: char) -> Result<Value> {}\n    #[inline]\n    fn serialize_str(self, value: &str) -> Result<Value> {}\n    fn serialize_bytes(self, value: &[u8]) -> Result<Value> {}\n    #[inline]\n    fn serialize_unit(self) -> Result<Value> {}\n    #[inline]\n    fn serialize_unit_struct(self, _name: &'static str) -> Result<Value> {}\n    #[inline]\n    fn serialize_unit_variant(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        variant: &'static str,\n    ) -> Result<Value> {}\n    #[inline]\n    fn serialize_newtype_struct<T>(self, _name: &'static str, value: &T) -> Result<Value>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_newtype_variant<T>(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        variant: &'static str,\n        value: &T,\n    ) -> Result<Value>\n    where\n        T: ?Sized + Serialize,\n    {}\n    #[inline]\n    fn serialize_none(self) -> Result<Value> {}\n    #[inline]\n    fn serialize_some<T>(self, value: &T) -> Result<Value>\n    where\n        T: ?Sized + Serialize,\n    {}\n    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {\n        Ok(SerializeVec {\n            vec: Vec::with_capacity(len.unwrap_or(0)),\n        })\n    }\n    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple> {\n        self.serialize_seq(Some(len))\n    }\n    fn serialize_tuple_struct(\n        self,\n        _name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleStruct> {\n        self.serialize_seq(Some(len))\n    }\n    fn serialize_tuple_variant(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        variant: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeTupleVariant> {\n        Ok(SerializeTupleVariant {\n            name: String::from(variant),\n            vec: Vec::with_capacity(len),\n        })\n    }\n    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {\n        Ok(SerializeMap::Map {\n            map: Map::with_capacity(len.unwrap_or(0)),\n            next_key: None,\n        })\n    }\n    fn serialize_struct(\n        self,\n        name: &'static str,\n        len: usize,\n    ) -> Result<Self::SerializeStruct> {\n        match name {\n            #[cfg(feature = \"arbitrary_precision\")]\n            crate::number::TOKEN => {\n                Ok(SerializeMap::Number {\n                    out_value: None,\n                })\n            }\n            #[cfg(feature = \"raw_value\")]\n            crate::raw::TOKEN => {\n                Ok(SerializeMap::RawValue {\n                    out_value: None,\n                })\n            }\n            _ => self.serialize_map(Some(len)),\n        }\n    }\n    fn serialize_struct_variant(\n        self,\n        _name: &'static str,\n        _variant_index: u32,\n        variant: &'static str,\n        _len: usize,\n    ) -> Result<Self::SerializeStructVariant> {\n        Ok(SerializeStructVariant {\n            name: String::from(variant),\n            map: Map::new(),\n        })\n    }\n    fn collect_str<T>(self, value: &T) -> Result<Value>\n    where\n        T: ?Sized + Display,\n    {}\n}\nimpl Error {\n    #[cold]\n    pub(crate) fn syntax(code: ErrorCode, line: usize, column: usize) -> Self {\n        Error {\n            err: Box::new(ErrorImpl { code, line, column }),\n        }\n    }\n    #[cold]\n    pub fn io(error: io::Error) -> Self {\n        Error {\n            err: Box::new(ErrorImpl {\n                code: ErrorCode::Io(error),\n                line: 0,\n                column: 0,\n            }),\n        }\n    }\n    #[cold]\n    pub(crate) fn fix_position<F>(self, f: F) -> Self\n    where\n        F: FnOnce(ErrorCode) -> Error,\n    {\n        if self.err.line == 0 { f(self.err.code) } else { self }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 96 fn serialize_i128(self, value: i128) -> Result<Value> {\n 97     #[cfg(feature = \"arbitrary_precision\")]\n 98     {\n 99         Ok(Value::Number(value.into()))\n100     }\n101 \n102     #[cfg(not(feature = \"arbitrary_precision\"))]\n103     {\n104         if let Ok(value) = u64::try_from(value) {\n105             Ok(Value::Number(value.into()))\n106         } else if let Ok(value) = i64::try_from(value) {\n107             Ok(Value::Number(value.into()))\n108         } else {\n109             Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))\n110         }\n111     }\n112 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}