{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read.rs\n// crate name is serde_json\nuse crate::error::{Error, ErrorCode, Result};\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::mem;\nuse core::ops::Deref;\nuse core::str;\n#[cfg(feature = \"std\")]\nuse crate::io;\n#[cfg(feature = \"std\")]\nuse crate::iter::LineColIterator;\n#[cfg(feature = \"raw_value\")]\nuse crate::raw::BorrowedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse crate::raw::OwnedRawDeserializer;\n#[cfg(all(feature = \"raw_value\", feature = \"std\"))]\nuse alloc::string::String;\n#[cfg(feature = \"raw_value\")]\nuse serde::de::Visitor;\nstatic HEX0: [i16; 256] = build_hex_table(0);\nstatic HEX1: [i16; 256] = build_hex_table(4);\npub trait Read<'de>: private::Sealed {\n    const should_early_return_if_failed: bool;\n    fn next(&mut self) -> Result<Option<u8>>;\n    fn peek(&mut self) -> Result<Option<u8>>;\n    fn discard(&mut self);\n    fn position(&self) -> Position;\n    fn peek_position(&self) -> Position;\n    fn byte_offset(&self) -> usize;\n    fn parse_str<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, str>>;\n    fn parse_str_raw<'s>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n    ) -> Result<Reference<'de, 's, [u8]>>;\n    fn ignore_str(&mut self) -> Result<()>;\n    fn decode_hex_escape(&mut self) -> Result<u16>;\n    #[cfg(feature = \"raw_value\")]\n    fn begin_raw_buffering(&mut self);\n    #[cfg(feature = \"raw_value\")]\n    fn end_raw_buffering<V>(&mut self, visitor: V) -> Result<V::Value>\n    where\n        V: Visitor<'de>;\n    fn set_failed(&mut self, failed: &mut bool);\n}\npub struct SliceRead<'a> {\n    slice: &'a [u8],\n    /// Index of the *next* byte that will be returned by next() or peek().\n    index: usize,\n    #[cfg(feature = \"raw_value\")]\n    raw_buffering_start_index: usize,\n}\npub struct Error {\n    /// This `Box` allows us to keep the size of `Error` as small as possible. A\n    /// larger `Error` type was substantially slower due to all the functions\n    /// that pass around `Result<T, Error>`.\n    err: Box<ErrorImpl>,\n}\npub enum Reference<'b, 'c, T>\nwhere\n    T: ?Sized + 'static,\n{\n    Borrowed(&'b T),\n    Copied(&'c T),\n}\npub(crate) enum ErrorCode {\n    /// Catchall for syntax error messages\n    Message(Box<str>),\n    /// Some I/O error occurred while serializing or deserializing.\n    Io(io::Error),\n    /// EOF while parsing a list.\n    EofWhileParsingList,\n    /// EOF while parsing an object.\n    EofWhileParsingObject,\n    /// EOF while parsing a string.\n    EofWhileParsingString,\n    /// EOF while parsing a JSON value.\n    EofWhileParsingValue,\n    /// Expected this character to be a `':'`.\n    ExpectedColon,\n    /// Expected this character to be either a `','` or a `']'`.\n    ExpectedListCommaOrEnd,\n    /// Expected this character to be either a `','` or a `'}'`.\n    ExpectedObjectCommaOrEnd,\n    /// Expected to parse either a `true`, `false`, or a `null`.\n    ExpectedSomeIdent,\n    /// Expected this character to start a JSON value.\n    ExpectedSomeValue,\n    /// Expected this character to be a `\"`.\n    ExpectedDoubleQuote,\n    /// Invalid hex escape code.\n    InvalidEscape,\n    /// Invalid number.\n    InvalidNumber,\n    /// Number is bigger than the maximum value of its type.\n    NumberOutOfRange,\n    /// Invalid unicode code point.\n    InvalidUnicodeCodePoint,\n    /// Control character found while parsing a string.\n    ControlCharacterWhileParsingString,\n    /// Object key is not a string.\n    KeyMustBeAString,\n    /// Contents of key were supposed to be a number.\n    ExpectedNumericKey,\n    /// Object key is a non-finite float value.\n    FloatKeyMustBeFinite,\n    /// Lone leading surrogate in hex escape.\n    LoneLeadingSurrogateInHexEscape,\n    /// JSON has a comma after the last value in an array or map.\n    TrailingComma,\n    /// JSON has non-whitespace trailing characters after the value.\n    TrailingCharacters,\n    /// Unexpected end of hex escape.\n    UnexpectedEndOfHexEscape,\n    /// Encountered nesting of JSON maps and arrays more than 128 layers deep.\n    RecursionLimitExceeded,\n}\nimpl<'a> SliceRead<'a> {\n    pub fn new(slice: &'a [u8]) -> Self {\n        SliceRead {\n            slice,\n            index: 0,\n            #[cfg(feature = \"raw_value\")]\n            raw_buffering_start_index: 0,\n        }\n    }\n    fn position_of_index(&self, i: usize) -> Position {}\n    fn skip_to_escape(&mut self, forbid_control_characters: bool) {\n        if self.index == self.slice.len()\n            || is_escape(self.slice[self.index], forbid_control_characters)\n        {\n            return;\n        }\n        self.index += 1;\n        let rest = &self.slice[self.index..];\n        if !forbid_control_characters {\n            self.index += memchr::memchr2(b'\"', b'\\\\', rest).unwrap_or(rest.len());\n            return;\n        }\n        #[cfg(fast_arithmetic = \"64\")]\n        type Chunk = u64;\n        #[cfg(fast_arithmetic = \"32\")]\n        type Chunk = u32;\n        const STEP: usize = mem::size_of::<Chunk>();\n        const ONE_BYTES: Chunk = Chunk::MAX / 255;\n        for chunk in rest.chunks_exact(STEP) {\n            let chars = Chunk::from_le_bytes(chunk.try_into().unwrap());\n            let contains_ctrl = chars.wrapping_sub(ONE_BYTES * 0x20) & !chars;\n            let chars_quote = chars ^ (ONE_BYTES * Chunk::from(b'\"'));\n            let contains_quote = chars_quote.wrapping_sub(ONE_BYTES) & !chars_quote;\n            let chars_backslash = chars ^ (ONE_BYTES * Chunk::from(b'\\\\'));\n            let contains_backslash = chars_backslash.wrapping_sub(ONE_BYTES)\n                & !chars_backslash;\n            let masked = (contains_ctrl | contains_quote | contains_backslash)\n                & (ONE_BYTES << 7);\n            if masked != 0 {\n                self.index = unsafe { chunk.as_ptr().offset_from(self.slice.as_ptr()) }\n                    as usize + masked.trailing_zeros() as usize / 8;\n                return;\n            }\n        }\n        self.index += rest.len() / STEP * STEP;\n        self.skip_to_escape_slow();\n    }\n    #[cold]\n    #[inline(never)]\n    fn skip_to_escape_slow(&mut self) {}\n    fn parse_str_bytes<'s, T, F>(\n        &'s mut self,\n        scratch: &'s mut Vec<u8>,\n        validate: bool,\n        result: F,\n    ) -> Result<Reference<'a, 's, T>>\n    where\n        T: ?Sized + 's,\n        F: for<'f> FnOnce(&'s Self, &'f [u8]) -> Result<&'f T>,\n    {\n        let mut start = self.index;\n        loop {\n            self.skip_to_escape(validate);\n            if self.index == self.slice.len() {\n                return error(self, ErrorCode::EofWhileParsingString);\n            }\n            match self.slice[self.index] {\n                b'\"' => {\n                    if scratch.is_empty() {\n                        let borrowed = &self.slice[start..self.index];\n                        self.index += 1;\n                        return result(self, borrowed).map(Reference::Borrowed);\n                    } else {\n                        scratch.extend_from_slice(&self.slice[start..self.index]);\n                        self.index += 1;\n                        return result(self, scratch).map(Reference::Copied);\n                    }\n                }\n                b'\\\\' => {\n                    scratch.extend_from_slice(&self.slice[start..self.index]);\n                    self.index += 1;\n                    tri!(parse_escape(self, validate, scratch));\n                    start = self.index;\n                }\n                _ => {\n                    self.index += 1;\n                    return error(self, ErrorCode::ControlCharacterWhileParsingString);\n                }\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// The big optimization here over IoRead is that if the string contains no\n/// backslash escape sequences, the returned &str is a slice of the raw JSON\n/// data so we avoid copying into the scratch space.\n494 fn parse_str_bytes<'s, T, F>(\n495     &'s mut self,\n496     scratch: &'s mut Vec<u8>,\n497     validate: bool,\n498     result: F,\n499 ) -> Result<Reference<'a, 's, T>>\n500 where\n501     T: ?Sized + 's,\n502     F: for<'f> FnOnce(&'s Self, &'f [u8]) -> Result<&'f T>,\n503 {\n504     // Index of the first byte not yet copied into the scratch space.\n505     let mut start = self.index;\n506 \n507     loop {\n508         self.skip_to_escape(validate);\n509         if self.index == self.slice.len() {\n510             return error(self, ErrorCode::EofWhileParsingString);\n511         }\n512         match self.slice[self.index] {\n513             b'\"' => {\n514                 if scratch.is_empty() {\n515                     // Fast path: return a slice of the raw JSON without any\n516                     // copying.\n517                     let borrowed = &self.slice[start..self.index];\n518                     self.index += 1;\n519                     return result(self, borrowed).map(Reference::Borrowed);\n520                 } else {\n521                     scratch.extend_from_slice(&self.slice[start..self.index]);\n522                     self.index += 1;\n523                     return result(self, scratch).map(Reference::Copied);\n524                 }\n525             }\n526             b'\\\\' => {\n527                 scratch.extend_from_slice(&self.slice[start..self.index]);\n528                 self.index += 1;\n529                 tri!(parse_escape(self, validate, scratch));\n530                 start = self.index;\n531             }\n532             _ => {\n533                 self.index += 1;\n534                 return error(self, ErrorCode::ControlCharacterWhileParsingString);\n535             }\n536         }\n537     }\n538 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}