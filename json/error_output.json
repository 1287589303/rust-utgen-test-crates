{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/proc-macro2-9af744c975a1a251/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/proc-macro2-6a3febfbeb6e06a8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libunicode_ident-926027468c5cecb0.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libunicode_ident-926027468c5cecb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/serde-4410e63b89b611ce/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libshlex-f4c3659040844f7b.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libshlex-f4c3659040844f7b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libhashbrown-fa53149ffb38b2f5.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libhashbrown-fa53149ffb38b2f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/libc-bf81c23c5c8eeeae/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libequivalent-bf738b088bb070ea.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libequivalent-bf738b088bb070ea.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/serde_json-a88e225f2440cc72/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libwinnow-3c0ca68b7dbcca6e.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libwinnow-3c0ca68b7dbcca6e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-triple@0.1.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-triple-0.1.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-triple-0.1.4/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/target-triple-f717a580754a86d0/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libmemchr-34eb650b64c0b1fd.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libmemchr-34eb650b64c0b1fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.20","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.20/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.20/build/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/rustversion-bab53b0c7afa87be/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libcfg_if-57bf25c23e31efdb.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libcfg_if-57bf25c23e31efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libryu-9ac960ab829e07f4.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libryu-9ac960ab829e07f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ref-cast@1.0.24","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ref-cast-1.0.24/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ref-cast-1.0.24/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/ref-cast-1c1dea9a3321dc48/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libitoa-e14358a371fd4efa.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libitoa-e14358a371fd4efa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.94/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libproc_macro2-e911f18448b87fcb.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libproc_macro2-e911f18448b87fcb.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/serde-d7cd293b5f4d9809/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.16","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libcc-0b0cd62ee74a704a.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libcc-0b0cd62ee74a704a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.8.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libindexmap-627af8e20b617074.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libindexmap-627af8e20b617074.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/libc-f3d8e6fde65e1cfa/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/serde_json-9e27749f8773414e/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-triple@0.1.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/target-triple-05a01d2905746bf7/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ref-cast@1.0.24","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/ref-cast-1763c1ceba638ecd/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.20","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/rustversion-277e963db9645646/out"}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/rust-utgen-test-crates/json/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/serde_json-1b36487f68acd8f3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dissimilar@1.0.10","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dissimilar-1.0.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dissimilar","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dissimilar-1.0.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libdissimilar-def4a514dbf6139b.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libdissimilar-def4a514dbf6139b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glob@0.3.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glob-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glob","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glob-0.3.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libglob-6d6aeb28cabf9655.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libglob-6d6aeb28cabf9655.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#termcolor@1.4.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/termcolor-1.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"termcolor","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/termcolor-1.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtermcolor-116a8f6e8f4ddb54.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtermcolor-116a8f6e8f4ddb54.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indoc@2.0.6","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indoc-2.0.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"indoc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indoc-2.0.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libindoc-918c1e39ad43ac15.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.39","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.39/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libquote-836ff454dbe78c15.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libquote-836ff454dbe78c15.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.25","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.25/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.25/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/psm-251b33403fe95b2e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.19","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/build/stacker-b9e61ca22f4315cc/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/liblibc-dbeea40b47eda613.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/liblibc-dbeea40b47eda613.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-triple@0.1.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-triple-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"target_triple","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-triple-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtarget_triple-21d850eaff5c9d6f.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtarget_triple-21d850eaff5c9d6f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/serde_json-7a597a2ada01d653/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.20","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.20/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rustversion","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/librustversion-eef4e9af22acd97b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.100/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","parsing","printing","proc-macro"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libsyn-2f3d87464e185910.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libsyn-2f3d87464e185910.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.25","linked_libs":["static=psm_s"],"linked_paths":["native=/home/abezbm/rust-utgen-test-crates/json/target/debug/build/psm-0e9e00bc6b84967d/out"],"cfgs":["asm","link_asm","switchable_stack"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/psm-0e9e00bc6b84967d/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.19","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/json/target/debug/build/stacker-b3f526f759efc9d1/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_derive-507668a5c26b80fd.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.25","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.25/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"psm","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.25/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libpsm-8b5cb6767db4cdcc.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libpsm-8b5cb6767db4cdcc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ref-cast-impl@1.0.24","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ref-cast-impl-1.0.24/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"ref_cast_impl","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ref-cast-impl-1.0.24/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libref_cast_impl-b66176222c4b141c.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#automod@1.0.15","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/automod-1.0.15/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"automod","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/automod-1.0.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libautomod-a7b7a29a063a32ed.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde-08a3718e45ca15da.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde-08a3718e45ca15da.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.19","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stacker","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.19/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libstacker-89d999dc5eb6301f.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libstacker-89d999dc5eb6301f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ref-cast@1.0.24","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ref-cast-1.0.24/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ref_cast","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ref-cast-1.0.24/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libref_cast-784fd4c62db12b72.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libref_cast-784fd4c62db12b72.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.8","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_spanned-0.6.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_spanned","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_spanned-0.6.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_spanned-223e3dfd35eea853.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_spanned-223e3dfd35eea853.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.8","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtoml_datetime-890aa197070536ad.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtoml_datetime-890aa197070536ad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_json-492b600fb6cc6921.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_json-492b600fb6cc6921.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_bytes@0.11.17","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_bytes-0.11.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_bytes","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_bytes-0.11.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_bytes-d27ff83a6e1f7b97.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_bytes-d27ff83a6e1f7b97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_stacker@0.1.12","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_stacker-0.1.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_stacker","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_stacker-0.1.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_stacker-62297ef436e5d57e.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libserde_stacker-62297ef436e5d57e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.24","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.24/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.24/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["display","parse","serde"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtoml_edit-dc4e36f94655f303.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtoml_edit-dc4e36f94655f303.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.8.20","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.8.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.8.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","display","parse"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtoml-17a0e55df9cf87ad.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtoml-17a0e55df9cf87ad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#trybuild@1.0.104","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/trybuild-1.0.104/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"trybuild","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/trybuild-1.0.104/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["diff"],"filenames":["/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtrybuild-87396a892bc9dc7f.rlib","/home/abezbm/rust-utgen-test-crates/json/target/debug/deps/libtrybuild-87396a892bc9dc7f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `column` and `line` in initializer of `error::ErrorImpl`\n   --> src/error.rs:552:21\n    |\n552 |       err: Box::new(ErrorImpl {  \n    |                     ^^^^^^^^^ missing `column` and `line`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `column` and `line` in initializer of `error::ErrorImpl`","spans":[{"byte_end":17421,"byte_start":17412,"column_end":30,"column_start":21,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"missing `column` and `line`","line_end":552,"line_start":552,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":21,"text":"      err: Box::new(ErrorImpl {  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:558:11\n    |\n558 |   let _ = MyError::from(eof_error);  \n    |           ^^^^^^^\n    |           |\n    |           use of undeclared type `MyError`\n    |           help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":17601,"byte_start":17594,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":558,"line_start":558,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":11,"text":"  let _ = MyError::from(eof_error);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":17601,"byte_start":17594,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":558,"line_start":558,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":11,"text":"  let _ = MyError::from(eof_error);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `column` and `line` in initializer of `error::ErrorImpl`\n   --> src/error.rs:560:21\n    |\n560 |       err: Box::new(ErrorImpl {  \n    |                     ^^^^^^^^^ missing `column` and `line`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `column` and `line` in initializer of `error::ErrorImpl`","spans":[{"byte_end":17679,"byte_start":17670,"column_end":30,"column_start":21,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"missing `column` and `line`","line_end":560,"line_start":560,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":21,"text":"      err: Box::new(ErrorImpl {  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:564:14\n    |\n564 |   assert_eq!(MyError::from(eof_error).is_json(), true);  \n    |              ^^^^^^^\n    |              |\n    |              use of undeclared type `MyError`\n    |              help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":17774,"byte_start":17767,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":564,"line_start":564,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(eof_error).is_json(), true);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":17774,"byte_start":17767,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":564,"line_start":564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(eof_error).is_json(), true);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:565:14\n    |\n565 |   assert_eq!(MyError::from(eof_error).is_io(), false);  \n    |              ^^^^^^^\n    |              |\n    |              use of undeclared type `MyError`\n    |              help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":17832,"byte_start":17825,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":565,"line_start":565,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(eof_error).is_io(), false);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":17832,"byte_start":17825,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":565,"line_start":565,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(eof_error).is_io(), false);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:566:11\n    |\n566 |   assert!(MyError::from(eof_error).matches_category(Category::Eof));  \n    |           ^^^^^^^\n    |           |\n    |           use of undeclared type `MyError`\n    |           help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":17886,"byte_start":17879,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":566,"line_start":566,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":11,"text":"  assert!(MyError::from(eof_error).matches_category(Category::Eof));  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":17886,"byte_start":17879,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":566,"line_start":566,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":11,"text":"  assert!(MyError::from(eof_error).matches_category(Category::Eof));  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `column` and `line` in initializer of `error::ErrorImpl`\n   --> src/error.rs:568:21\n    |\n568 |       err: Box::new(ErrorImpl {  \n    |                     ^^^^^^^^^ missing `column` and `line`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `column` and `line` in initializer of `error::ErrorImpl`","spans":[{"byte_end":18000,"byte_start":17991,"column_end":30,"column_start":21,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"missing `column` and `line`","line_end":568,"line_start":568,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":21,"text":"      err: Box::new(ErrorImpl {  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:572:14\n    |\n572 |   assert_eq!(MyError::from(syntax_error).is_json(), true);  \n    |              ^^^^^^^\n    |              |\n    |              use of undeclared type `MyError`\n    |              help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":18088,"byte_start":18081,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":572,"line_start":572,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(syntax_error).is_json(), true);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":18088,"byte_start":18081,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":572,"line_start":572,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(syntax_error).is_json(), true);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:573:14\n    |\n573 |   assert_eq!(MyError::from(syntax_error).is_io(), false);  \n    |              ^^^^^^^\n    |              |\n    |              use of undeclared type `MyError`\n    |              help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":18149,"byte_start":18142,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":573,"line_start":573,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(syntax_error).is_io(), false);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":18149,"byte_start":18142,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":573,"line_start":573,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(syntax_error).is_io(), false);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:574:11\n    |\n574 |   assert!(MyError::from(syntax_error).matches_category(Category::Syntax));  \n    |           ^^^^^^^\n    |           |\n    |           use of undeclared type `MyError`\n    |           help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":18206,"byte_start":18199,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":574,"line_start":574,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":11,"text":"  assert!(MyError::from(syntax_error).matches_category(Category::Syntax));  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":18206,"byte_start":18199,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":574,"line_start":574,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":11,"text":"  assert!(MyError::from(syntax_error).matches_category(Category::Syntax));  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `column` and `line` in initializer of `error::ErrorImpl`\n   --> src/error.rs:576:21\n    |\n576 |       err: Box::new(ErrorImpl {  \n    |                     ^^^^^^^^^ missing `column` and `line`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `column` and `line` in initializer of `error::ErrorImpl`","spans":[{"byte_end":18324,"byte_start":18315,"column_end":30,"column_start":21,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"missing `column` and `line`","line_end":576,"line_start":576,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":21,"text":"      err: Box::new(ErrorImpl {  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:580:14\n    |\n580 |   assert_eq!(MyError::from(data_error).is_json(), true);  \n    |              ^^^^^^^\n    |              |\n    |              use of undeclared type `MyError`\n    |              help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":18415,"byte_start":18408,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":580,"line_start":580,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(data_error).is_json(), true);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":18415,"byte_start":18408,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":580,"line_start":580,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(data_error).is_json(), true);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:581:14\n    |\n581 |   assert_eq!(MyError::from(data_error).is_io(), false);  \n    |              ^^^^^^^\n    |              |\n    |              use of undeclared type `MyError`\n    |              help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":18474,"byte_start":18467,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":581,"line_start":581,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(data_error).is_io(), false);  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":18474,"byte_start":18467,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":581,"line_start":581,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"  assert_eq!(MyError::from(data_error).is_io(), false);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared type `MyError`\n   --> src/error.rs:582:11\n    |\n582 |   assert!(MyError::from(data_error).matches_category(Category::Data));  \n    |           ^^^^^^^\n    |           |\n    |           use of undeclared type `MyError`\n    |           help: a struct with a similar name exists: `Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":18529,"byte_start":18522,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":null,"line_end":582,"line_start":582,"suggested_replacement":"Error","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":11,"text":"  assert!(MyError::from(data_error).matches_category(Category::Data));  "}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared type `MyError`","spans":[{"byte_end":18529,"byte_start":18522,"column_end":18,"column_start":11,"expansion":null,"file_name":"src/error.rs","is_primary":true,"label":"use of undeclared type `MyError`","line_end":582,"line_start":582,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":11,"text":"  assert!(MyError::from(data_error).matches_category(Category::Data));  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 14 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 14 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0063, E0433.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0063, E0433.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/json#serde_json@1.0.140","manifest_path":"/home/abezbm/rust-utgen-test-crates/json/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/rust-utgen-test-crates/json/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0063`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0063`.","spans":[]}}
{"reason":"build-finished","success":false}
