bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:565:9-565:30)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:565:9-565:17)
  2: _4 = &mut ((*_1).0: alloc::collections::BTreeMap<alloc::string::String, value::Value>)
    SourceInfo(src/map.rs:565:9-565:17)
  3: StorageLive(_5)
    SourceInfo(src/map.rs:565:25-565:29)
  4: _5 = move _2
    SourceInfo(src/map.rs:565:25-565:29)
  Terminator {
      source_info: SourceInfo(src/map.rs:565:9-565:30)
      kind: _3 = <alloc::collections::BTreeMap<alloc::string::String, value::Value> as core::iter::Extend<(alloc::string::String, value::Value)>>::extend::<T>(move _4, move _5) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_5)
    SourceInfo(src/map.rs:565:29-565:30)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:565:29-565:30)
  2: StorageDead(_3)
    SourceInfo(src/map.rs:565:30-565:31)
  3: _0 = const ()
    SourceInfo(src/map.rs:564:5-566:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:566:5-566:6)
      kind: drop(_2) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  Terminator {
      source_info: SourceInfo(src/map.rs:566:6-566:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map.rs:565:29-565:30)
      kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:566:5-566:6)
      kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/map.rs:561:5-566:6)
      kind: resume
  }
  preds [bb1, bb4]
  succs []

