bb0
  0: PlaceMention(_1)
    SourceInfo(src/value/de.rs:996:15-996:19)
  1: _3 = discriminant((*_1))
    SourceInfo(src/value/de.rs:996:15-996:19)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:996:9-996:19)
      kind: switchInt(move _3) -> [5: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageLive(_7)
    SourceInfo(src/value/de.rs:998:22-998:49)
  1: StorageLive(_8)
    SourceInfo(src/value/de.rs:998:22-998:26)
  2: _8 = &(*_1)
    SourceInfo(src/value/de.rs:998:22-998:26)
  3: StorageLive(_9)
    SourceInfo(src/value/de.rs:998:40-998:48)
  4: StorageLive(_10)
    SourceInfo(src/value/de.rs:998:40-998:48)
  5: StorageLive(_11)
    SourceInfo(src/value/de.rs:998:40-998:48)
  6: _11 = &_2
    SourceInfo(src/value/de.rs:998:40-998:48)
  7: _10 = &(*_11)
    SourceInfo(src/value/de.rs:998:40-998:48)
  8: _9 = move _10 as &dyn serde::de::Expected (PointerCoercion(Unsize))
    SourceInfo(src/value/de.rs:998:40-998:48)
  9: StorageDead(_10)
    SourceInfo(src/value/de.rs:998:47-998:48)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:998:22-998:49)
      kind: _7 = value::de::<impl value::Value>::invalid_type::<error::Error>(move _8, move _9) -> [return: bb5, unwind: bb10]
  }
  preds [bb0, bb2]
  succs [bb5, bb10]

bb2
  Terminator {
      source_info: SourceInfo(src/value/de.rs:997:13-997:29)
      kind: falseEdge -> [real: bb3, imaginary: bb1]
  }
  preds [bb0]
  succs [bb1, bb3]

bb3
  0: StorageLive(_4)
    SourceInfo(src/value/de.rs:997:27-997:28)
  1: _4 = &(((*_1) as Object).0: map::Map<alloc::string::String, value::Value>)
    SourceInfo(src/value/de.rs:997:27-997:28)
  2: StorageLive(_5)
    SourceInfo(src/value/de.rs:997:33-997:34)
  3: _5 = &(*_4)
    SourceInfo(src/value/de.rs:997:33-997:34)
  4: StorageLive(_6)
    SourceInfo(src/value/de.rs:997:51-997:58)
  5: _6 = move _2
    SourceInfo(src/value/de.rs:997:51-997:58)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:997:33-997:59)
      kind: _0 = <&map::Map<alloc::string::String, value::Value> as serde::Deserializer<'_>>::deserialize_any::<V>(move _5, move _6) -> [return: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: StorageDead(_6)
    SourceInfo(src/value/de.rs:997:58-997:59)
  1: StorageDead(_5)
    SourceInfo(src/value/de.rs:997:58-997:59)
  2: StorageDead(_4)
    SourceInfo(src/value/de.rs:997:58-997:59)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:997:58-997:59)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb5
  0: StorageDead(_9)
    SourceInfo(src/value/de.rs:998:48-998:49)
  1: StorageDead(_8)
    SourceInfo(src/value/de.rs:998:48-998:49)
  2: _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _7)
    SourceInfo(src/value/de.rs:998:18-998:50)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:998:49-998:50)
      kind: drop(_7) -> [return: bb6, unwind: bb10]
  }
  preds [bb1]
  succs [bb6, bb10]

bb6
  0: StorageDead(_7)
    SourceInfo(src/value/de.rs:998:49-998:50)
  1: StorageDead(_11)
    SourceInfo(src/value/de.rs:998:49-998:50)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:998:49-998:50)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1000:5-1000:6)
      kind: drop(_2) -> [return: bb8, unwind: bb11]
  }
  preds [bb4, bb6]
  succs [bb8, bb11]

bb8
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1000:6-1000:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/value/de.rs:997:58-997:59)
      kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1000:5-1000:6)
      kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb1, bb5, bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(src/value/de.rs:992:5-1000:6)
      kind: resume
  }
  preds [bb7, bb10]
  succs []

