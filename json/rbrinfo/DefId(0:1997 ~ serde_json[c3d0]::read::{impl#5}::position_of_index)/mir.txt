bb0
  0: StorageLive(_3)
    SourceInfo(src/read.rs:422:13-422:26)
  1: StorageLive(_4)
    SourceInfo(src/read.rs:422:35-422:75)
  2: StorageLive(_5)
    SourceInfo(src/read.rs:422:58-422:74)
  3: StorageLive(_6)
    SourceInfo(src/read.rs:422:58-422:74)
  4: StorageLive(_7)
    SourceInfo(src/read.rs:422:69-422:74)
  5: StorageLive(_8)
    SourceInfo(src/read.rs:422:59-422:69)
  6: _8 = &(*((*_1).0: &[u8]))
    SourceInfo(src/read.rs:422:59-422:69)
  7: StorageLive(_9)
    SourceInfo(src/read.rs:422:70-422:73)
  8: StorageLive(_10)
    SourceInfo(src/read.rs:422:72-422:73)
  9: _10 = _2
    SourceInfo(src/read.rs:422:72-422:73)
  10: _9 = core::ops::RangeTo::<usize> { end: move _10 }
    SourceInfo(src/read.rs:422:70-422:73)
  11: StorageDead(_10)
    SourceInfo(src/read.rs:422:72-422:73)
  Terminator {
      source_info: SourceInfo(src/read.rs:422:69-422:74)
      kind: _7 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _8, move _9) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageDead(_9)
    SourceInfo(src/read.rs:422:73-422:74)
  1: StorageDead(_8)
    SourceInfo(src/read.rs:422:73-422:74)
  2: _6 = &(*_7)
    SourceInfo(src/read.rs:422:58-422:74)
  3: _5 = &(*_6)
    SourceInfo(src/read.rs:422:58-422:74)
  Terminator {
      source_info: SourceInfo(src/read.rs:422:35-422:75)
      kind: _4 = memchr::memrchr(const 10_u8, move _5) -> [return: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: StorageDead(_5)
    SourceInfo(src/read.rs:422:74-422:75)
  1: PlaceMention(_4)
    SourceInfo(src/read.rs:422:35-422:75)
  2: _11 = discriminant(_4)
    SourceInfo(src/read.rs:422:35-422:75)
  Terminator {
      source_info: SourceInfo(src/read.rs:422:29-422:75)
      kind: switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(src/read.rs:422:35-422:75)
  Terminator {
      source_info: SourceInfo(src/read.rs:422:35-422:75)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/read.rs:423:13-423:27)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: _3 = const 0_usize
    SourceInfo(src/read.rs:424:21-424:22)
  Terminator {
      source_info: SourceInfo(src/read.rs:424:21-424:22)
      kind: goto -> bb8
  }
  preds [bb2, bb4]
  succs [bb8]

bb6
  0: StorageLive(_12)
    SourceInfo(src/read.rs:423:18-423:26)
  1: _12 = ((_4 as Some).0: usize)
    SourceInfo(src/read.rs:423:18-423:26)
  2: StorageLive(_13)
    SourceInfo(src/read.rs:423:31-423:39)
  3: _13 = _12
    SourceInfo(src/read.rs:423:31-423:39)
  4: _14 = AddWithOverflow(_13, const 1_usize)
    SourceInfo(src/read.rs:423:31-423:43)
  Terminator {
      source_info: SourceInfo(src/read.rs:423:31-423:43)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_usize) -> [success: bb7, unwind: bb14]
  }
  preds [bb4]
  succs [bb7, bb14]

bb7
  0: _3 = move (_14.0: usize)
    SourceInfo(src/read.rs:423:31-423:43)
  1: StorageDead(_13)
    SourceInfo(src/read.rs:423:42-423:43)
  2: StorageDead(_12)
    SourceInfo(src/read.rs:423:42-423:43)
  Terminator {
      source_info: SourceInfo(src/read.rs:423:42-423:43)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: FakeRead(ForLet(None), _3)
    SourceInfo(src/read.rs:422:13-422:26)
  1: StorageDead(_7)
    SourceInfo(src/read.rs:425:10-425:11)
  2: StorageDead(_6)
    SourceInfo(src/read.rs:425:10-425:11)
  3: StorageDead(_4)
    SourceInfo(src/read.rs:425:10-425:11)
  4: StorageLive(_15)
    SourceInfo(src/read.rs:427:19-427:87)
  5: StorageLive(_16)
    SourceInfo(src/read.rs:427:23-427:87)
  6: StorageLive(_17)
    SourceInfo(src/read.rs:427:23-427:79)
  7: StorageLive(_18)
    SourceInfo(src/read.rs:427:50-427:78)
  8: StorageLive(_19)
    SourceInfo(src/read.rs:427:50-427:78)
  9: StorageLive(_20)
    SourceInfo(src/read.rs:427:61-427:78)
  10: StorageLive(_21)
    SourceInfo(src/read.rs:427:51-427:61)
  11: _21 = &(*((*_1).0: &[u8]))
    SourceInfo(src/read.rs:427:51-427:61)
  12: StorageLive(_22)
    SourceInfo(src/read.rs:427:62-427:77)
  13: StorageLive(_23)
    SourceInfo(src/read.rs:427:64-427:77)
  14: _23 = _3
    SourceInfo(src/read.rs:427:64-427:77)
  15: _22 = core::ops::RangeTo::<usize> { end: move _23 }
    SourceInfo(src/read.rs:427:62-427:77)
  16: StorageDead(_23)
    SourceInfo(src/read.rs:427:76-427:77)
  Terminator {
      source_info: SourceInfo(src/read.rs:427:61-427:78)
      kind: _20 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _21, move _22) -> [return: bb9, unwind: bb14]
  }
  preds [bb5, bb7]
  succs [bb9, bb14]

bb9
  0: StorageDead(_22)
    SourceInfo(src/read.rs:427:77-427:78)
  1: StorageDead(_21)
    SourceInfo(src/read.rs:427:77-427:78)
  2: _19 = &(*_20)
    SourceInfo(src/read.rs:427:50-427:78)
  3: _18 = &(*_19)
    SourceInfo(src/read.rs:427:50-427:78)
  Terminator {
      source_info: SourceInfo(src/read.rs:427:23-427:79)
      kind: _17 = memchr::memchr_iter(const 10_u8, move _18) -> [return: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: StorageDead(_18)
    SourceInfo(src/read.rs:427:78-427:79)
  Terminator {
      source_info: SourceInfo(src/read.rs:427:23-427:87)
      kind: _16 = <memchr::Memchr<'_> as core::iter::Iterator>::count(move _17) -> [return: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_17)
    SourceInfo(src/read.rs:427:86-427:87)
  1: _24 = AddWithOverflow(const 1_usize, _16)
    SourceInfo(src/read.rs:427:19-427:87)
  Terminator {
      source_info: SourceInfo(src/read.rs:427:19-427:87)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _16) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: _15 = move (_24.0: usize)
    SourceInfo(src/read.rs:427:19-427:87)
  1: StorageDead(_16)
    SourceInfo(src/read.rs:427:86-427:87)
  2: StorageLive(_25)
    SourceInfo(src/read.rs:428:21-428:38)
  3: StorageLive(_26)
    SourceInfo(src/read.rs:428:21-428:22)
  4: _26 = _2
    SourceInfo(src/read.rs:428:21-428:22)
  5: StorageLive(_27)
    SourceInfo(src/read.rs:428:25-428:38)
  6: _27 = _3
    SourceInfo(src/read.rs:428:25-428:38)
  7: _28 = SubWithOverflow(_26, _27)
    SourceInfo(src/read.rs:428:21-428:38)
  Terminator {
      source_info: SourceInfo(src/read.rs:428:21-428:38)
      kind: assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", move _26, move _27) -> [success: bb13, unwind: bb14]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: _25 = move (_28.0: usize)
    SourceInfo(src/read.rs:428:21-428:38)
  1: StorageDead(_27)
    SourceInfo(src/read.rs:428:37-428:38)
  2: StorageDead(_26)
    SourceInfo(src/read.rs:428:37-428:38)
  3: _0 = read::Position { line: move _15, column: move _25 }
    SourceInfo(src/read.rs:426:9-429:10)
  4: StorageDead(_25)
    SourceInfo(src/read.rs:429:9-429:10)
  5: StorageDead(_15)
    SourceInfo(src/read.rs:429:9-429:10)
  6: StorageDead(_3)
    SourceInfo(src/read.rs:430:5-430:6)
  7: StorageDead(_20)
    SourceInfo(src/read.rs:430:5-430:6)
  8: StorageDead(_19)
    SourceInfo(src/read.rs:430:5-430:6)
  Terminator {
      source_info: SourceInfo(src/read.rs:430:6-430:6)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(src/read.rs:421:5-430:6)
      kind: resume
  }
  preds [bb0, bb1, bb6, bb8, bb9, bb10, bb11, bb12]
  succs []

