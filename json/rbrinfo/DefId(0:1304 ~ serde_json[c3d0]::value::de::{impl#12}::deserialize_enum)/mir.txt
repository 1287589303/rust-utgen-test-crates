bb0
  0: StorageLive(_5)
    SourceInfo(src/value/de.rs:772:13-772:21)
  1: StorageLive(_6)
    SourceInfo(src/value/de.rs:772:24-772:28)
  2: _6 = &(*_1)
    SourceInfo(src/value/de.rs:772:24-772:28)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:772:24-772:40)
      kind: _5 = <&map::Map<alloc::string::String, value::Value> as core::iter::IntoIterator>::into_iter(move _6) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: StorageDead(_6)
    SourceInfo(src/value/de.rs:772:39-772:40)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(src/value/de.rs:772:13-772:21)
  2: StorageLive(_9)
    SourceInfo(src/value/de.rs:773:32-781:10)
  3: StorageLive(_10)
    SourceInfo(src/value/de.rs:773:38-773:49)
  4: StorageLive(_11)
    SourceInfo(src/value/de.rs:773:38-773:42)
  5: _11 = &mut _5
    SourceInfo(src/value/de.rs:773:38-773:42)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:773:38-773:49)
      kind: _10 = <map::Iter<'_> as core::iter::Iterator>::next(move _11) -> [return: bb2, unwind: bb20]
  }
  preds [bb0]
  succs [bb2, bb20]

bb2
  0: StorageDead(_11)
    SourceInfo(src/value/de.rs:773:48-773:49)
  1: PlaceMention(_10)
    SourceInfo(src/value/de.rs:773:38-773:49)
  2: _12 = discriminant(_10)
    SourceInfo(src/value/de.rs:773:38-773:49)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:773:32-773:49)
      kind: switchInt(move _12) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(src/value/de.rs:773:38-773:49)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:773:38-773:49)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/value/de.rs:774:13-774:20)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_15)
    SourceInfo(src/value/de.rs:776:28-779:18)
  1: StorageLive(_16)
    SourceInfo(src/value/de.rs:777:21-777:36)
  2: _16 = serde::de::Unexpected::<'_>::Map
    SourceInfo(src/value/de.rs:777:21-777:36)
  3: StorageLive(_17)
    SourceInfo(src/value/de.rs:778:21-778:45)
  4: StorageLive(_18)
    SourceInfo(src/value/de.rs:778:21-778:45)
  5: StorageLive(_19)
    SourceInfo(src/value/de.rs:778:21-778:45)
  6: StorageLive(_20)
    SourceInfo(src/value/de.rs:778:22-778:45)
  7: _20 = const "map with a single key"
    SourceInfo(src/value/de.rs:778:22-778:45)
  8: _19 = &_20
    SourceInfo(src/value/de.rs:778:21-778:45)
  9: _18 = &(*_19)
    SourceInfo(src/value/de.rs:778:21-778:45)
  10: _17 = move _18 as &dyn serde::de::Expected (PointerCoercion(Unsize))
    SourceInfo(src/value/de.rs:778:21-778:45)
  11: StorageDead(_18)
    SourceInfo(src/value/de.rs:778:44-778:45)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:776:28-779:18)
      kind: _15 = <error::Error as serde::de::Error>::invalid_value(move _16, move _17) -> [return: bb7, unwind: bb20]
  }
  preds [bb2, bb4]
  succs [bb7, bb20]

bb6
  0: StorageLive(_13)
    SourceInfo(src/value/de.rs:774:18-774:19)
  1: _13 = ((_10 as Some).0: (&alloc::string::String, &value::Value))
    SourceInfo(src/value/de.rs:774:18-774:19)
  2: _9 = _13
    SourceInfo(src/value/de.rs:774:24-774:25)
  3: StorageDead(_13)
    SourceInfo(src/value/de.rs:774:24-774:25)
  4: PlaceMention(_9)
    SourceInfo(src/value/de.rs:773:32-781:10)
  5: StorageLive(_7)
    SourceInfo(src/value/de.rs:773:14-773:21)
  6: _7 = (_9.0: &alloc::string::String)
    SourceInfo(src/value/de.rs:773:14-773:21)
  7: StorageLive(_8)
    SourceInfo(src/value/de.rs:773:23-773:28)
  8: _8 = (_9.1: &value::Value)
    SourceInfo(src/value/de.rs:773:23-773:28)
  9: StorageDead(_10)
    SourceInfo(src/value/de.rs:781:10-781:11)
  10: StorageDead(_9)
    SourceInfo(src/value/de.rs:781:10-781:11)
  11: StorageLive(_21)
    SourceInfo(src/value/de.rs:783:9-788:10)
  12: StorageLive(_22)
    SourceInfo(src/value/de.rs:783:12-783:33)
  13: StorageLive(_23)
    SourceInfo(src/value/de.rs:783:12-783:23)
  14: StorageLive(_24)
    SourceInfo(src/value/de.rs:783:12-783:23)
  15: StorageLive(_25)
    SourceInfo(src/value/de.rs:783:12-783:16)
  16: _25 = &mut _5
    SourceInfo(src/value/de.rs:783:12-783:16)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:783:12-783:23)
      kind: _24 = <map::Iter<'_> as core::iter::Iterator>::next(move _25) -> [return: bb9, unwind: bb20]
  }
  preds [bb4]
  succs [bb9, bb20]

bb7
  0: StorageDead(_17)
    SourceInfo(src/value/de.rs:779:17-779:18)
  1: StorageDead(_16)
    SourceInfo(src/value/de.rs:779:17-779:18)
  2: _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _15)
    SourceInfo(src/value/de.rs:776:24-779:19)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:779:18-779:19)
      kind: drop(_15) -> [return: bb8, unwind: bb20]
  }
  preds [bb5]
  succs [bb8, bb20]

bb8
  0: StorageDead(_15)
    SourceInfo(src/value/de.rs:779:18-779:19)
  1: StorageDead(_20)
    SourceInfo(src/value/de.rs:779:19-779:20)
  2: StorageDead(_19)
    SourceInfo(src/value/de.rs:779:19-779:20)
  3: StorageDead(_10)
    SourceInfo(src/value/de.rs:781:10-781:11)
  4: StorageDead(_9)
    SourceInfo(src/value/de.rs:781:10-781:11)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb7]
  succs [bb17]

bb9
  0: _23 = &_24
    SourceInfo(src/value/de.rs:783:12-783:23)
  1: StorageDead(_25)
    SourceInfo(src/value/de.rs:783:22-783:23)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:783:12-783:33)
      kind: _22 = core::option::Option::<(&alloc::string::String, &value::Value)>::is_some(move _23) -> [return: bb10, unwind: bb20]
  }
  preds [bb6]
  succs [bb10, bb20]

bb10
  Terminator {
      source_info: SourceInfo(src/value/de.rs:783:12-783:33)
      kind: switchInt(move _22) -> [0: bb14, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_24)
    SourceInfo(src/value/de.rs:783:32-783:33)
  1: StorageDead(_23)
    SourceInfo(src/value/de.rs:783:32-783:33)
  2: StorageLive(_27)
    SourceInfo(src/value/de.rs:784:24-787:14)
  3: StorageLive(_28)
    SourceInfo(src/value/de.rs:785:17-785:32)
  4: _28 = serde::de::Unexpected::<'_>::Map
    SourceInfo(src/value/de.rs:785:17-785:32)
  5: StorageLive(_29)
    SourceInfo(src/value/de.rs:786:17-786:41)
  6: StorageLive(_30)
    SourceInfo(src/value/de.rs:786:17-786:41)
  7: StorageLive(_31)
    SourceInfo(src/value/de.rs:786:17-786:41)
  8: StorageLive(_32)
    SourceInfo(src/value/de.rs:786:18-786:41)
  9: _32 = const "map with a single key"
    SourceInfo(src/value/de.rs:786:18-786:41)
  10: _31 = &_32
    SourceInfo(src/value/de.rs:786:17-786:41)
  11: _30 = &(*_31)
    SourceInfo(src/value/de.rs:786:17-786:41)
  12: _29 = move _30 as &dyn serde::de::Expected (PointerCoercion(Unsize))
    SourceInfo(src/value/de.rs:786:17-786:41)
  13: StorageDead(_30)
    SourceInfo(src/value/de.rs:786:40-786:41)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:784:24-787:14)
      kind: _27 = <error::Error as serde::de::Error>::invalid_value(move _28, move _29) -> [return: bb12, unwind: bb20]
  }
  preds [bb10]
  succs [bb12, bb20]

bb12
  0: StorageDead(_29)
    SourceInfo(src/value/de.rs:787:13-787:14)
  1: StorageDead(_28)
    SourceInfo(src/value/de.rs:787:13-787:14)
  2: _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _27)
    SourceInfo(src/value/de.rs:784:20-787:15)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:787:14-787:15)
      kind: drop(_27) -> [return: bb13, unwind: bb20]
  }
  preds [bb11]
  succs [bb13, bb20]

bb13
  0: StorageDead(_27)
    SourceInfo(src/value/de.rs:787:14-787:15)
  1: StorageDead(_32)
    SourceInfo(src/value/de.rs:787:15-787:16)
  2: StorageDead(_31)
    SourceInfo(src/value/de.rs:787:15-787:16)
  3: StorageDead(_22)
    SourceInfo(src/value/de.rs:788:9-788:10)
  4: StorageDead(_21)
    SourceInfo(src/value/de.rs:788:9-788:10)
  5: StorageDead(_8)
    SourceInfo(src/value/de.rs:794:5-794:6)
  6: StorageDead(_7)
    SourceInfo(src/value/de.rs:794:5-794:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb12]
  succs [bb17]

bb14
  0: StorageDead(_24)
    SourceInfo(src/value/de.rs:783:32-783:33)
  1: StorageDead(_23)
    SourceInfo(src/value/de.rs:783:32-783:33)
  2: _21 = const ()
    SourceInfo(src/value/de.rs:788:10-788:10)
  3: StorageDead(_22)
    SourceInfo(src/value/de.rs:788:9-788:10)
  4: StorageDead(_21)
    SourceInfo(src/value/de.rs:788:9-788:10)
  5: StorageLive(_33)
    SourceInfo(src/value/de.rs:790:9-790:16)
  6: _33 = move _4
    SourceInfo(src/value/de.rs:790:9-790:16)
  7: StorageLive(_34)
    SourceInfo(src/value/de.rs:790:28-793:10)
  8: StorageLive(_35)
    SourceInfo(src/value/de.rs:791:13-791:20)
  9: StorageLive(_36)
    SourceInfo(src/value/de.rs:791:13-791:20)
  10: StorageLive(_37)
    SourceInfo(src/value/de.rs:791:13-791:20)
  11: _37 = &(*_7)
    SourceInfo(src/value/de.rs:791:13-791:20)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:791:13-791:20)
      kind: _36 = <alloc::string::String as core::ops::Deref>::deref(move _37) -> [return: bb15, unwind: bb19]
  }
  preds [bb10]
  succs [bb15, bb19]

bb15
  0: _35 = &(*_36)
    SourceInfo(src/value/de.rs:791:13-791:20)
  1: StorageDead(_37)
    SourceInfo(src/value/de.rs:791:19-791:20)
  2: StorageLive(_38)
    SourceInfo(src/value/de.rs:792:20-792:31)
  3: StorageLive(_39)
    SourceInfo(src/value/de.rs:792:25-792:30)
  4: _39 = &(*_8)
    SourceInfo(src/value/de.rs:792:25-792:30)
  5: _38 = core::option::Option::<&value::Value>::Some(move _39)
    SourceInfo(src/value/de.rs:792:20-792:31)
  6: StorageDead(_39)
    SourceInfo(src/value/de.rs:792:30-792:31)
  7: _34 = value::de::EnumRefDeserializer::<'_> { variant: move _35, value: move _38 }
    SourceInfo(src/value/de.rs:790:28-793:10)
  8: StorageDead(_38)
    SourceInfo(src/value/de.rs:793:9-793:10)
  9: StorageDead(_35)
    SourceInfo(src/value/de.rs:793:9-793:10)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:790:9-793:11)
      kind: _0 = <V as serde::de::Visitor<'_>>::visit_enum::<value::de::EnumRefDeserializer<'_>>(move _33, move _34) -> [return: bb16, unwind: bb19]
  }
  preds [bb14]
  succs [bb16, bb19]

bb16
  0: StorageDead(_34)
    SourceInfo(src/value/de.rs:793:10-793:11)
  1: StorageDead(_33)
    SourceInfo(src/value/de.rs:793:10-793:11)
  2: StorageDead(_8)
    SourceInfo(src/value/de.rs:794:5-794:6)
  3: StorageDead(_7)
    SourceInfo(src/value/de.rs:794:5-794:6)
  4: StorageDead(_5)
    SourceInfo(src/value/de.rs:794:5-794:6)
  5: StorageDead(_36)
    SourceInfo(src/value/de.rs:794:5-794:6)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:794:5-794:6)
      kind: drop(_4) -> [return: bb18, unwind: bb21]
  }
  preds [bb15]
  succs [bb18, bb21]

bb17
  0: StorageDead(_5)
    SourceInfo(src/value/de.rs:794:5-794:6)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:794:5-794:6)
      kind: drop(_4) -> [return: bb18, unwind: bb21]
  }
  preds [bb8, bb13]
  succs [bb18, bb21]

bb18
  Terminator {
      source_info: SourceInfo(src/value/de.rs:794:6-794:6)
      kind: return
  }
  preds [bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(src/value/de.rs:793:10-793:11)
      kind: drop(_33) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb14, bb15]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(src/value/de.rs:794:5-794:6)
      kind: drop(_4) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb5, bb6, bb7, bb9, bb11, bb12, bb19]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(src/value/de.rs:763:5-794:6)
      kind: resume
  }
  preds [bb16, bb17, bb20]
  succs []

