bb0
  0: StorageLive(_3)
    SourceInfo(src/ser.rs:189:9-189:73)
  1: StorageLive(_4)
    SourceInfo(src/ser.rs:189:28-189:44)
  2: StorageLive(_5)
    SourceInfo(src/ser.rs:189:28-189:44)
  3: _5 = &mut ((*_1).0: W)
    SourceInfo(src/ser.rs:189:28-189:44)
  4: _4 = &mut (*_5)
    SourceInfo(src/ser.rs:189:28-189:44)
  5: StorageLive(_6)
    SourceInfo(src/ser.rs:189:46-189:65)
  6: StorageLive(_7)
    SourceInfo(src/ser.rs:189:46-189:65)
  7: _7 = &mut ((*_1).1: F)
    SourceInfo(src/ser.rs:189:46-189:65)
  8: _6 = &mut (*_7)
    SourceInfo(src/ser.rs:189:46-189:65)
  9: StorageLive(_8)
    SourceInfo(src/ser.rs:189:67-189:72)
  10: _8 = &(*_2)
    SourceInfo(src/ser.rs:189:67-189:72)
  Terminator {
      source_info: SourceInfo(src/ser.rs:189:9-189:73)
      kind: _3 = ser::format_escaped_str::<W, F>(move _4, move _6, move _8) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_8)
    SourceInfo(src/ser.rs:189:72-189:73)
  1: StorageDead(_6)
    SourceInfo(src/ser.rs:189:72-189:73)
  2: StorageDead(_4)
    SourceInfo(src/ser.rs:189:72-189:73)
  Terminator {
      source_info: SourceInfo(src/ser.rs:189:9-189:92)
      kind: _0 = core::result::Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {error::Error::io}>(move _3, error::Error::io) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(src/ser.rs:189:91-189:92)
  1: StorageDead(_7)
    SourceInfo(src/ser.rs:190:5-190:6)
  2: StorageDead(_5)
    SourceInfo(src/ser.rs:190:5-190:6)
  Terminator {
      source_info: SourceInfo(src/ser.rs:190:6-190:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/ser.rs:189:91-189:92)
      kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/ser.rs:188:5-190:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

