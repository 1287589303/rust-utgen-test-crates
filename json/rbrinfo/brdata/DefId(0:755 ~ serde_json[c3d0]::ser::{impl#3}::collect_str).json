{
  "name": "serde_json::ser::{impl#3}::collect_str",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:408:5:455:6",
  "doc": "",
  "code": [
    "fn collect_str<T>(self, value: &T) -> Result<()>",
    "where",
    "    T: ?Sized + Display,",
    "{",
    "    use self::fmt::Write;",
    "",
    "    struct Adapter<'ser, W: 'ser, F: 'ser> {",
    "        writer: &'ser mut W,",
    "        formatter: &'ser mut F,",
    "        error: Option<io::Error>,",
    "    }",
    "",
    "    impl<'ser, W, F> Write for Adapter<'ser, W, F>",
    "    where",
    "        W: io::Write,",
    "        F: Formatter,",
    "    {",
    "        fn write_str(&mut self, s: &str) -> fmt::Result {",
    "            debug_assert!(self.error.is_none());",
    "            match format_escaped_str_contents(self.writer, self.formatter, s) {",
    "                Ok(()) => Ok(()),",
    "                Err(err) => {",
    "                    self.error = Some(err);",
    "                    Err(fmt::Error)",
    "                }",
    "            }",
    "        }",
    "    }",
    "",
    "    tri!(self",
    "        .formatter",
    "        .begin_string(&mut self.writer)",
    "        .map_err(Error::io));",
    "    let mut adapter = Adapter {",
    "        writer: &mut self.writer,",
    "        formatter: &mut self.formatter,",
    "        error: None,",
    "    };",
    "    match write!(adapter, \"{}\", value) {",
    "        Ok(()) => debug_assert!(adapter.error.is_none()),",
    "        Err(fmt::Error) => {",
    "            return Err(Error::io(adapter.error.expect(\"there should be an error\")));",
    "        }",
    "    }",
    "    self.formatter",
    "        .end_string(&mut self.writer)",
    "        .map_err(Error::io)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_string(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 437,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        5,
        7,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_string(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 437,
          "bound": null
        },
        {
          "cond": "$dst.write_fmt($crate::format_args!($($arg)*)) matches Err(fmt::Error)",
          "norm": null,
          "value": "true",
          "line": 632,
          "bound": null
        }
      ],
      "ret": "Err(Error::io(adapter.error.expect(\"there should be an error\")))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        15,
        23,
        24,
        25,
        29,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_string(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 437,
          "bound": null
        },
        {
          "cond": "$dst.write_fmt($crate::format_args!($($arg)*)) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 632,
          "bound": null
        },
        {
          "cond": "$dst.write_fmt($crate::format_args!($($arg)*)) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 632,
          "bound": null
        },
        {
          "cond": "adapter.error.is_none()",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        19,
        22,
        26,
        27,
        28,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_string(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 437,
          "bound": null
        },
        {
          "cond": "$dst.write_fmt($crate::format_args!($($arg)*)) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 632,
          "bound": null
        },
        {
          "cond": "$dst.write_fmt($crate::format_args!($($arg)*)) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 632,
          "bound": null
        },
        {
          "cond": "adapter.error.is_none()",
          "norm": null,
          "value": "false",
          "line": 447,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        18,
        20,
        36,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}