{
  "name": "serde_json::number::{impl#3}::from_i128",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:235:5:253:6",
  "doc": "/// Converts an `i128` to a `Number`. Numbers smaller than i64::MIN or\n/// larger than u64::MAX can only be represented in `Number` if serde_json's\n/// \"arbitrary_precision\" feature is enabled.\n///\n/// ```\n/// # use serde_json::Number;\n/// #\n/// assert!(Number::from_i128(256).is_some());\n/// ```\n",
  "code": [
    "pub fn from_i128(i: i128) -> Option<Number> {",
    "    let n = {",
    "        #[cfg(not(feature = \"arbitrary_precision\"))]",
    "        {",
    "            if let Ok(u) = u64::try_from(i) {",
    "                N::PosInt(u)",
    "            } else if let Ok(i) = i64::try_from(i) {",
    "                N::NegInt(i)",
    "            } else {",
    "                return None;",
    "            }",
    "        }",
    "        #[cfg(feature = \"arbitrary_precision\")]",
    "        {",
    "            i.to_string()",
    "        }",
    "    };",
    "    Some(Number { n })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok(u) = u64::try_from(i)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "let Ok(i) = i64::try_from(i)",
          "norm": null,
          "value": "true",
          "line": 241,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        5,
        8,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok(u) = u64::try_from(i)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "let Ok(i) = i64::try_from(i)",
          "norm": null,
          "value": "false",
          "line": 241,
          "bound": null
        }
      ],
      "ret": "Some(Number { n })",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Ok(u) = u64::try_from(i)",
          "norm": null,
          "value": "false",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Some(Number { n })",
      "path": [
        0,
        1,
        2,
        3,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}