{
  "name": "serde_json::map::{impl#17}::get",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:838:5:840:6",
  "doc": "/// Gets a reference to the value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// use serde_json::map::Entry;\n///\n/// let mut map = serde_json::Map::new();\n/// map.insert(\"serde\".to_owned(), json!(12));\n///\n/// match map.entry(\"serde\") {\n///     Entry::Occupied(occupied) => {\n///         assert_eq!(occupied.get(), 12);\n///     }\n///     Entry::Vacant(_) => unimplemented!(),\n/// }\n/// ```\n",
  "code": [
    "pub fn get(&self) -> &Value {",
    "    self.occupied.get()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.occupied.get()",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}