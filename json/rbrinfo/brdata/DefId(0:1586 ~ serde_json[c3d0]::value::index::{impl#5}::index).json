{
  "name": "serde_json::value::index::{impl#5}::index",
  "mod_info": {
    "name": "value::index",
    "loc": "src/value/mod.rs:929:1:929:11"
  },
  "visible": true,
  "loc": "src/value/index.rs:212:5:215:6",
  "doc": "/// Index into a `serde_json::Value` using the syntax `value[0]` or\n/// `value[\"k\"]`.\n///\n/// Returns `Value::Null` if the type of `self` does not match the type of\n/// the index, for example if the index is a string and `self` is an array\n/// or a number. Also returns `Value::Null` if the given key does not exist\n/// in the map or the given index is not within the bounds of the array.\n///\n/// For retrieving deeply nested values, you should have a look at the\n/// `Value::pointer` method.\n///\n/// # Examples\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let data = json!({\n///     \"x\": {\n///         \"y\": [\"z\", \"zz\"]\n///     }\n/// });\n///\n/// assert_eq!(data[\"x\"][\"y\"], json!([\"z\", \"zz\"]));\n/// assert_eq!(data[\"x\"][\"y\"][0], json!(\"z\"));\n///\n/// assert_eq!(data[\"a\"], json!(null)); // returns null for undefined values\n/// assert_eq!(data[\"a\"][\"b\"], json!(null)); // does not panic\n/// ```\n",
  "code": [
    "fn index(&self, index: I) -> &Value {",
    "    static NULL: Value = Value::Null;",
    "    index.index_into(self).unwrap_or(&NULL)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "index.index_into(self).unwrap_or(&NULL)",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}