{
  "name": "serde_json::map::{impl#10}::deserialize",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:508:5:546:6",
  "doc": "",
  "code": [
    "fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>",
    "where",
    "    D: de::Deserializer<'de>,",
    "{",
    "    struct Visitor;",
    "",
    "    impl<'de> de::Visitor<'de> for Visitor {",
    "        type Value = Map<String, Value>;",
    "",
    "        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
    "            formatter.write_str(\"a map\")",
    "        }",
    "",
    "        #[inline]",
    "        fn visit_unit<E>(self) -> Result<Self::Value, E>",
    "        where",
    "            E: de::Error,",
    "        {",
    "            Ok(Map::new())",
    "        }",
    "",
    "        #[cfg(any(feature = \"std\", feature = \"alloc\"))]",
    "        #[inline]",
    "        fn visit_map<V>(self, mut visitor: V) -> Result<Self::Value, V::Error>",
    "        where",
    "            V: de::MapAccess<'de>,",
    "        {",
    "            let mut values = Map::new();",
    "",
    "            while let Some((key, value)) = tri!(visitor.next_entry()) {",
    "                values.insert(key, value);",
    "            }",
    "",
    "            Ok(values)",
    "        }",
    "    }",
    "",
    "    deserializer.deserialize_map(Visitor)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}