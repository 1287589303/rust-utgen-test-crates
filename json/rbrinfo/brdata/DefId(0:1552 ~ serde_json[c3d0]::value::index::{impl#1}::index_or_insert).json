{
  "name": "serde_json::value::index::{impl#1}::index_or_insert",
  "mod_info": {
    "name": "value::index",
    "loc": "src/value/mod.rs:929:1:929:11"
  },
  "visible": true,
  "loc": "src/value/index.rs:96:5:104:6",
  "doc": "",
  "code": [
    "fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {",
    "    if let Value::Null = v {",
    "        *v = Value::Object(Map::new());",
    "    }",
    "    match v {",
    "        Value::Object(map) => map.entry(self.to_owned()).or_insert(Value::Null),",
    "        _ => panic!(\"cannot access key {:?} in JSON {}\", self, Type(v)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Value::Null = v",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "v matches Value::Object(map)",
          "norm": null,
          "value": "false",
          "line": 101,
          "bound": null
        },
        {
          "cond": "v matches _",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        9,
        10,
        16,
        17,
        18,
        23
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Value::Null = v",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "v matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "v matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        }
      ],
      "ret": "match v {\n            Value::Object(map) => map.entry(self.to_owned()).or_insert(Value::Null),\n            _ => panic!(\"cannot access key {:?} in JSON {}\", self, Type(v)),\n        }",
      "path": [
        0,
        8,
        9,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Value::Null = v",
          "norm": null,
          "value": "false",
          "line": 97,
          "bound": null
        },
        {
          "cond": "v matches Value::Object(map)",
          "norm": null,
          "value": "false",
          "line": 101,
          "bound": null
        },
        {
          "cond": "v matches _",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        16,
        17,
        18,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Value::Null = v",
          "norm": null,
          "value": "false",
          "line": 97,
          "bound": null
        },
        {
          "cond": "v matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "v matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        }
      ],
      "ret": "match v {\n            Value::Object(map) => map.entry(self.to_owned()).or_insert(Value::Null),\n            _ => panic!(\"cannot access key {:?} in JSON {}\", self, Type(v)),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}