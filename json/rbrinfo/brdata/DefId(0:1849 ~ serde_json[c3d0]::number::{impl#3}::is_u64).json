{
  "name": "serde_json::number::{impl#3}::is_u64",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:96:5:104:6",
  "doc": "/// Returns true if the `Number` is an integer between zero and `u64::MAX`.\n///\n/// For any Number on which `is_u64` returns true, `as_u64` is guaranteed to\n/// return the integer value.\n",
  "code": [
    "pub fn is_u64(&self) -> bool {",
    "    #[cfg(not(feature = \"arbitrary_precision\"))]",
    "    match self.n {",
    "        N::PosInt(_) => true,",
    "        N::NegInt(_) | N::Float(_) => false,",
    "    }",
    "    #[cfg(feature = \"arbitrary_precision\")]",
    "    self.as_u64().is_some()",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.n matches N::Float(_)",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.n matches N::NegInt(_)",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.n matches N::PosInt(_)",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        },
        {
          "cond": "self.n matches N::PosInt(_)",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}