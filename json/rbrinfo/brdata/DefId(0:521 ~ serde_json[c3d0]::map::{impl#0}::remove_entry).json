{
  "name": "serde_json::map::{impl#0}::remove_entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:179:5:188:6",
  "doc": "/// Removes a key from the map, returning the stored key and value if the\n/// key was previously in the map.\n///\n/// The key may be any borrowed form of the map's key type, but the ordering\n/// on the borrowed form *must* match the ordering on the key type.\n///\n/// If serde_json's \"preserve_order\" is enabled, `.remove_entry(key)` is\n/// equivalent to [`.swap_remove_entry(key)`][Self::swap_remove_entry],\n/// replacing this entry's position with the last element. If you need to\n/// preserve the relative order of the keys in the map, use\n/// [`.shift_remove_entry(key)`][Self::shift_remove_entry] instead.\n",
  "code": [
    "pub fn remove_entry<Q>(&mut self, key: &Q) -> Option<(String, Value)>",
    "where",
    "    String: Borrow<Q>,",
    "    Q: ?Sized + Ord + Eq + Hash,",
    "{",
    "    #[cfg(feature = \"preserve_order\")]",
    "    return self.swap_remove_entry(key);",
    "    #[cfg(not(feature = \"preserve_order\"))]",
    "    return self.map.remove_entry(key);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}