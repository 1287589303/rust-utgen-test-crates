{
  "name": "serde_json::value::{impl#2}::is_array",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:407:5:409:6",
  "doc": "/// Returns true if the `Value` is an Array. Returns false otherwise.\n///\n/// For any Value on which `is_array` returns true, `as_array` and\n/// `as_array_mut` are guaranteed to return the vector representing the\n/// array.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let obj = json!({ \"a\": [\"an\", \"array\"], \"b\": { \"an\": \"object\" } });\n///\n/// assert!(obj[\"a\"].is_array());\n///\n/// // an object, not an array\n/// assert!(!obj[\"b\"].is_array());\n/// ```\n",
  "code": [
    "pub fn is_array(&self) -> bool {",
    "    self.as_array().is_some()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}