{
  "name": "serde_json::value::ser::{impl#1}::serialize_i128",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:96:5:112:6",
  "doc": "",
  "code": [
    "fn serialize_i128(self, value: i128) -> Result<Value> {",
    "    #[cfg(feature = \"arbitrary_precision\")]",
    "    {",
    "        Ok(Value::Number(value.into()))",
    "    }",
    "",
    "    #[cfg(not(feature = \"arbitrary_precision\"))]",
    "    {",
    "        if let Ok(value) = u64::try_from(value) {",
    "            Ok(Value::Number(value.into()))",
    "        } else if let Ok(value) = i64::try_from(value) {",
    "            Ok(Value::Number(value.into()))",
    "        } else {",
    "            Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok(value) = u64::try_from(value)",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "let Ok(value) = i64::try_from(value)",
          "norm": null,
          "value": "true",
          "line": 106,
          "bound": null
        }
      ],
      "ret": "Err(Error::syntax(ErrorCode::NumberOutOfRange, 0, 0))",
      "path": [
        0,
        1,
        6,
        7,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok(value) = u64::try_from(value)",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "let Ok(value) = i64::try_from(value)",
          "norm": null,
          "value": "false",
          "line": 106,
          "bound": null
        }
      ],
      "ret": "Ok(Value::Number(value.into()))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Ok(value) = u64::try_from(value)",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        }
      ],
      "ret": "Ok(Value::Number(value.into()))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}