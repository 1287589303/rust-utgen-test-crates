{
  "name": "serde_json::read::{impl#5}::parse_str_bytes",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": false,
  "loc": "src/read.rs:494:5:538:6",
  "doc": "/// The big optimization here over IoRead is that if the string contains no\n/// backslash escape sequences, the returned &str is a slice of the raw JSON\n/// data so we avoid copying into the scratch space.\n",
  "code": [
    "fn parse_str_bytes<'s, T, F>(",
    "    &'s mut self,",
    "    scratch: &'s mut Vec<u8>,",
    "    validate: bool,",
    "    result: F,",
    ") -> Result<Reference<'a, 's, T>>",
    "where",
    "    T: ?Sized + 's,",
    "    F: for<'f> FnOnce(&'s Self, &'f [u8]) -> Result<&'f T>,",
    "{",
    "    // Index of the first byte not yet copied into the scratch space.",
    "    let mut start = self.index;",
    "",
    "    loop {",
    "        self.skip_to_escape(validate);",
    "        if self.index == self.slice.len() {",
    "            return error(self, ErrorCode::EofWhileParsingString);",
    "        }",
    "        match self.slice[self.index] {",
    "            b'\"' => {",
    "                if scratch.is_empty() {",
    "                    // Fast path: return a slice of the raw JSON without any",
    "                    // copying.",
    "                    let borrowed = &self.slice[start..self.index];",
    "                    self.index += 1;",
    "                    return result(self, borrowed).map(Reference::Borrowed);",
    "                } else {",
    "                    scratch.extend_from_slice(&self.slice[start..self.index]);",
    "                    self.index += 1;",
    "                    return result(self, scratch).map(Reference::Copied);",
    "                }",
    "            }",
    "            b'\\\\' => {",
    "                scratch.extend_from_slice(&self.slice[start..self.index]);",
    "                self.index += 1;",
    "                tri!(parse_escape(self, validate, scratch));",
    "                start = self.index;",
    "            }",
    "            _ => {",
    "                self.index += 1;",
    "                return error(self, ErrorCode::ControlCharacterWhileParsingString);",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 1,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "true",
          "line": 509,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 509,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 513,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches _",
          "norm": null,
          "value": "true",
          "line": 532,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        37,
        38,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 509,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "parse_escape(self, validate, scratch) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 529,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        11,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        39,
        40,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 509,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "parse_escape(self, validate, scratch) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 529,
          "bound": null
        },
        {
          "cond": "parse_escape(self, validate, scratch) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 529,
          "bound": null
        },
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "true",
          "line": 509,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        11,
        26,
        27,
        28,
        29,
        30,
        32,
        34,
        36,
        1,
        2,
        3,
        4,
        5,
        6,
        43,
        44
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 509,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 513,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "true",
          "line": 514,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 509,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 513,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 514,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        10,
        12,
        13,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}