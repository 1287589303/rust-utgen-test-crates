{
  "name": "serde_json::value::de::{impl#26}::variant_seed",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:1449:5:1455:6",
  "doc": "",
  "code": [
    "fn variant_seed<T>(self, seed: T) -> Result<(T::Value, Self::Variant), Error>",
    "where",
    "    T: de::DeserializeSeed<'de>,",
    "{",
    "    let value = tri!(seed.deserialize(self));",
    "    Ok((value, UnitOnly))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "seed.deserialize(self) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 1453,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        4,
        7,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "seed.deserialize(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1453,
          "bound": null
        },
        {
          "cond": "seed.deserialize(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1453,
          "bound": null
        }
      ],
      "ret": "Ok((value, UnitOnly))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}