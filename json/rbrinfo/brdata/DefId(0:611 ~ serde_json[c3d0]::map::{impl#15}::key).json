{
  "name": "serde_json::map::{impl#15}::key",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:659:5:664:6",
  "doc": "/// Returns a reference to this entry's key.\n///\n/// # Examples\n///\n/// ```\n/// let mut map = serde_json::Map::new();\n/// assert_eq!(map.entry(\"serde\").key(), &\"serde\");\n/// ```\n",
  "code": [
    "pub fn key(&self) -> &String {",
    "    match self {",
    "        Entry::Vacant(e) => e.key(),",
    "        Entry::Occupied(e) => e.key(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Entry::Occupied(e)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": "match self {\n            Entry::Vacant(e) => e.key(),\n            Entry::Occupied(e) => e.key(),\n        }",
      "path": [
        0,
        3,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Entry::Vacant(e)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "self matches Entry::Vacant(e)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": "match self {\n            Entry::Vacant(e) => e.key(),\n            Entry::Occupied(e) => e.key(),\n        }",
      "path": [
        0,
        2,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}