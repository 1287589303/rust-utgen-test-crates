{
  "name": "serde_json::read::{impl#7}::ignore_str",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": true,
  "loc": "src/read.rs:598:5:618:6",
  "doc": "",
  "code": [
    "fn ignore_str(&mut self) -> Result<()> {",
    "    loop {",
    "        self.skip_to_escape(true);",
    "        if self.index == self.slice.len() {",
    "            return error(self, ErrorCode::EofWhileParsingString);",
    "        }",
    "        match self.slice[self.index] {",
    "            b'\"' => {",
    "                self.index += 1;",
    "                return Ok(());",
    "            }",
    "            b'\\\\' => {",
    "                self.index += 1;",
    "                tri!(ignore_escape(self));",
    "            }",
    "            _ => {",
    "                return error(self, ErrorCode::ControlCharacterWhileParsingString);",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "true",
          "line": 601,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 601,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 605,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 609,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches _",
          "norm": null,
          "value": "true",
          "line": 613,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        23,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 601,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 609,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 604,
          "bound": null
        },
        {
          "cond": "ignore_escape(self) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        11,
        14,
        15,
        16,
        19,
        21,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 601,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 609,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 604,
          "bound": null
        },
        {
          "cond": "ignore_escape(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "ignore_escape(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "true",
          "line": 601,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        11,
        14,
        15,
        16,
        18,
        20,
        22,
        1,
        2,
        3,
        4,
        5,
        6,
        27
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.index == self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 601,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 605,
          "bound": null
        },
        {
          "cond": "self.slice[self.index] matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 604,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        10,
        12,
        13,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}