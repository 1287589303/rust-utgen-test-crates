{
  "name": "serde_json::map::{impl#17}::remove_entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:1009:5:1014:6",
  "doc": "/// Removes the entry from the map, returning the stored key and value.\n///\n/// If serde_json's \"preserve_order\" is enabled, `.remove_entry()` is\n/// equivalent to [`.swap_remove_entry()`][Self::swap_remove_entry],\n/// replacing this entry's position with the last element. If you need to\n/// preserve the relative order of the keys in the map, use\n/// [`.shift_remove_entry()`][Self::shift_remove_entry] instead.\n///\n/// # Examples\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// use serde_json::map::Entry;\n///\n/// let mut map = serde_json::Map::new();\n/// map.insert(\"serde\".to_owned(), json!(12));\n///\n/// match map.entry(\"serde\") {\n///     Entry::Occupied(occupied) => {\n///         let (key, value) = occupied.remove_entry();\n///         assert_eq!(key, \"serde\");\n///         assert_eq!(value, 12);\n///     }\n///     Entry::Vacant(_) => unimplemented!(),\n/// }\n/// ```\n",
  "code": [
    "pub fn remove_entry(self) -> (String, Value) {",
    "    #[cfg(feature = \"preserve_order\")]",
    "    return self.swap_remove_entry();",
    "    #[cfg(not(feature = \"preserve_order\"))]",
    "    return self.occupied.remove_entry();",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}