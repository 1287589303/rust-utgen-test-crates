{
  "name": "serde_json::value::{impl#2}::as_f64",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:669:5:674:6",
  "doc": "/// If the `Value` is a number, represent it as f64 if possible. Returns\n/// None otherwise.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let v = json!({ \"a\": 256.0, \"b\": 64, \"c\": -64 });\n///\n/// assert_eq!(v[\"a\"].as_f64(), Some(256.0));\n/// assert_eq!(v[\"b\"].as_f64(), Some(64.0));\n/// assert_eq!(v[\"c\"].as_f64(), Some(-64.0));\n/// ```\n",
  "code": [
    "pub fn as_f64(&self) -> Option<f64> {",
    "    match self {",
    "        Value::Number(n) => n.as_f64(),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::Number(n)",
          "norm": null,
          "value": "false",
          "line": 671,
          "bound": null
        },
        {
          "cond": "self matches _",
          "norm": null,
          "value": "true",
          "line": 672,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::Number(n)",
          "norm": null,
          "value": "true",
          "line": 670,
          "bound": null
        },
        {
          "cond": "self matches Value::Number(n)",
          "norm": null,
          "value": "true",
          "line": 670,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}