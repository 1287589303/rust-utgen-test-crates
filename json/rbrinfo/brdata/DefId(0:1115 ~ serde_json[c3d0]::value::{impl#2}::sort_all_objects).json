{
  "name": "serde_json::value::{impl#2}::sort_all_objects",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:875:5:889:6",
  "doc": "/// Reorders the entries of all `Value::Object` nested within this JSON\n/// value according to `str`'s usual ordering.\n///\n/// If serde_json's \"preserve_order\" feature is not enabled, this method\n/// does no work because all JSON maps are always kept in a sorted state.\n///\n/// If serde_json's \"preserve_order\" feature is enabled, this method\n/// destroys the original source order or insertion order of the JSON\n/// objects in favor of an alphanumerical order that matches how a BTreeMap\n/// with the same contents would be ordered.\n",
  "code": [
    "pub fn sort_all_objects(&mut self) {",
    "    #[cfg(feature = \"preserve_order\")]",
    "    {",
    "        match self {",
    "            Value::Object(map) => {",
    "                map.sort_keys();",
    "                map.values_mut().for_each(Value::sort_all_objects);",
    "            }",
    "            Value::Array(list) => {",
    "                list.iter_mut().for_each(Value::sort_all_objects);",
    "            }",
    "            _ => {}",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}