{
  "name": "serde_json::ser::to_string",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2237:1:2247:2",
  "doc": "/// Serialize the given data structure as a String of JSON.\n///\n/// # Errors\n///\n/// Serialization can fail if `T`'s implementation of `Serialize` decides to\n/// fail, or if `T` contains a map with non-string keys.\n",
  "code": [
    "pub fn to_string<T>(value: &T) -> Result<String>",
    "where",
    "    T: ?Sized + Serialize,",
    "{",
    "    let vec = tri!(to_vec(value));",
    "    let string = unsafe {",
    "        // We do not emit invalid UTF-8.",
    "        String::from_utf8_unchecked(vec)",
    "    };",
    "    Ok(string)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "to_vec(value) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        4,
        7,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "to_vec(value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        }
      ],
      "ret": "Ok(string)",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}