{
  "name": "serde_json::ser::{impl#8}::serialize_key",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:618:5:641:6",
  "doc": "",
  "code": [
    "fn serialize_key<T>(&mut self, key: &T) -> Result<()>",
    "where",
    "    T: ?Sized + Serialize,",
    "{",
    "    match self {",
    "        Compound::Map { ser, state } => {",
    "            tri!(ser",
    "                .formatter",
    "                .begin_object_key(&mut ser.writer, *state == State::First)",
    "                .map_err(Error::io));",
    "            *state = State::Rest;",
    "",
    "            tri!(key.serialize(MapKeySerializer { ser: *ser }));",
    "",
    "            ser.formatter",
    "                .end_object_key(&mut ser.writer)",
    "                .map_err(Error::io)",
    "        }",
    "        #[cfg(feature = \"arbitrary_precision\")]",
    "        Compound::Number { .. } => unreachable!(),",
    "        #[cfg(feature = \"raw_value\")]",
    "        Compound::RawValue { .. } => unreachable!(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ser\n                    .formatter\n                    .begin_object_key(&mut ser.writer, *state == State::First)\n                    .map_err(Error::io) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 624,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ser\n                    .formatter\n                    .begin_object_key(&mut ser.writer, *state == State::First)\n                    .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 624,
          "bound": null
        },
        {
          "cond": "ser\n                    .formatter\n                    .begin_object_key(&mut ser.writer, *state == State::First)\n                    .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 624,
          "bound": null
        },
        {
          "cond": "key.serialize(MapKeySerializer { ser: *ser }) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        10,
        13,
        15,
        19,
        20,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "ser\n                    .formatter\n                    .begin_object_key(&mut ser.writer, *state == State::First)\n                    .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 624,
          "bound": null
        },
        {
          "cond": "ser\n                    .formatter\n                    .begin_object_key(&mut ser.writer, *state == State::First)\n                    .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 624,
          "bound": null
        },
        {
          "cond": "key.serialize(MapKeySerializer { ser: *ser }) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "ser\n                    .formatter\n                    .begin_object_key(&mut ser.writer, *state == State::First)\n                    .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 624,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        9,
        10,
        12,
        14,
        16,
        17,
        18,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}