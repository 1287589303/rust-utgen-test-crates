{
  "name": "serde_json::value::{impl#2}::as_array_mut",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:443:5:448:6",
  "doc": "/// If the `Value` is an Array, returns the associated mutable vector.\n/// Returns None otherwise.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let mut v = json!({ \"a\": [\"an\", \"array\"] });\n///\n/// v[\"a\"].as_array_mut().unwrap().clear();\n/// assert_eq!(v, json!({ \"a\": [] }));\n/// ```\n",
  "code": [
    "pub fn as_array_mut(&mut self) -> Option<&mut Vec<Value>> {",
    "    match self {",
    "        Value::Array(list) => Some(list),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::Array(list)",
          "norm": null,
          "value": "false",
          "line": 445,
          "bound": null
        },
        {
          "cond": "self matches _",
          "norm": null,
          "value": "true",
          "line": 446,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::Array(list)",
          "norm": null,
          "value": "true",
          "line": 444,
          "bound": null
        },
        {
          "cond": "self matches Value::Array(list)",
          "norm": null,
          "value": "true",
          "line": 444,
          "bound": null
        }
      ],
      "ret": "Some(list)",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}