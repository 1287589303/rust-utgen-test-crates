{
  "name": "serde_json::de::{impl#20}::new",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": true,
  "loc": "src/de.rs:2370:5:2379:6",
  "doc": "/// Create a JSON stream deserializer from one of the possible serde_json\n/// input sources.\n///\n/// Typically it is more convenient to use one of these methods instead:\n///\n///   - Deserializer::from_str(...).into_iter()\n///   - Deserializer::from_slice(...).into_iter()\n///   - Deserializer::from_reader(...).into_iter()\n",
  "code": [
    "pub fn new(read: R) -> Self {",
    "    let offset = read.byte_offset();",
    "    StreamDeserializer {",
    "        de: Deserializer::new(read),",
    "        offset,",
    "        failed: false,",
    "        output: PhantomData,",
    "        lifetime: PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "StreamDeserializer {\n            de: Deserializer::new(read),\n            offset,\n            failed: false,\n            output: PhantomData,\n            lifetime: PhantomData,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}