{
  "name": "serde_json::read::{impl#7}::next",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": true,
  "loc": "src/read.rs:545:5:555:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Result<Option<u8>> {",
    "    // `Ok(self.slice.get(self.index).map(|ch| { self.index += 1; *ch }))`",
    "    // is about 10% slower.",
    "    Ok(if self.index < self.slice.len() {",
    "        let ch = self.slice[self.index];",
    "        self.index += 1;",
    "        Some(ch)",
    "    } else {",
    "        None",
    "    })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.index < self.slice.len()",
          "norm": null,
          "value": "true",
          "line": 548,
          "bound": null
        }
      ],
      "ret": "Ok(if self.index < self.slice.len() {\n            let ch = self.slice[self.index];\n            self.index += 1;\n            Some(ch)\n        } else {\n            None\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.index < self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 548,
          "bound": "self.index == self.slice.len()"
        }
      ],
      "ret": "Ok(if self.index < self.slice.len() {\n            let ch = self.slice[self.index];\n            self.index += 1;\n            Some(ch)\n        } else {\n            None\n        })",
      "path": [
        0,
        1,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}