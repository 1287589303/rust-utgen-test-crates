{
  "name": "serde_json::number::{impl#10}::from",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:698:5:734:6",
  "doc": "",
  "code": [
    "fn from(value: ParserNumber) -> Self {",
    "    let n = match value {",
    "        ParserNumber::F64(f) => {",
    "            #[cfg(not(feature = \"arbitrary_precision\"))]",
    "            {",
    "                N::Float(f)",
    "            }",
    "            #[cfg(feature = \"arbitrary_precision\")]",
    "            {",
    "                ryu::Buffer::new().format_finite(f).to_owned()",
    "            }",
    "        }",
    "        ParserNumber::U64(u) => {",
    "            #[cfg(not(feature = \"arbitrary_precision\"))]",
    "            {",
    "                N::PosInt(u)",
    "            }",
    "            #[cfg(feature = \"arbitrary_precision\")]",
    "            {",
    "                itoa::Buffer::new().format(u).to_owned()",
    "            }",
    "        }",
    "        ParserNumber::I64(i) => {",
    "            #[cfg(not(feature = \"arbitrary_precision\"))]",
    "            {",
    "                N::NegInt(i)",
    "            }",
    "            #[cfg(feature = \"arbitrary_precision\")]",
    "            {",
    "                itoa::Buffer::new().format(i).to_owned()",
    "            }",
    "        }",
    "        #[cfg(feature = \"arbitrary_precision\")]",
    "        ParserNumber::String(s) => s,",
    "    };",
    "    Number { n }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "value matches ParserNumber::I64(i)",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        }
      ],
      "ret": "Number { n }",
      "path": [
        0,
        4,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "value matches ParserNumber::U64(u)",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        },
        {
          "cond": "value matches ParserNumber::U64(u)",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        }
      ],
      "ret": "Number { n }",
      "path": [
        0,
        3,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "value matches ParserNumber::F64(f)",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        },
        {
          "cond": "value matches ParserNumber::F64(f)",
          "norm": null,
          "value": "true",
          "line": 699,
          "bound": null
        }
      ],
      "ret": "Number { n }",
      "path": [
        0,
        2,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}