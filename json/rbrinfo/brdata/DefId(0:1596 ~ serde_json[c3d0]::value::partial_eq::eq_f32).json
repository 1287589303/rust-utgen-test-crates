{
  "name": "serde_json::value::partial_eq::eq_f32",
  "mod_info": {
    "name": "value::partial_eq",
    "loc": "src/value/mod.rs:930:1:930:16"
  },
  "visible": false,
  "loc": "src/value/partial_eq.rs:12:1:17:2",
  "doc": "",
  "code": [
    "fn eq_f32(value: &Value, other: f32) -> bool {",
    "    match value {",
    "        Value::Number(n) => n.as_f32() == Some(other),",
    "        _ => false,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "value matches Value::Number(n)",
          "norm": null,
          "value": "false",
          "line": 14,
          "bound": null
        },
        {
          "cond": "value matches _",
          "norm": null,
          "value": "true",
          "line": 15,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "value matches Value::Number(n)",
          "norm": null,
          "value": "true",
          "line": 13,
          "bound": null
        },
        {
          "cond": "value matches Value::Number(n)",
          "norm": null,
          "value": "true",
          "line": 13,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}