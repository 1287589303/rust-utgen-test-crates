{
  "name": "serde_json::value::{impl#2}::as_null",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:746:5:751:6",
  "doc": "/// If the `Value` is a Null, returns (). Returns None otherwise.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let v = json!({ \"a\": null, \"b\": false });\n///\n/// assert_eq!(v[\"a\"].as_null(), Some(()));\n///\n/// // The boolean `false` is not null.\n/// assert_eq!(v[\"b\"].as_null(), None);\n/// ```\n",
  "code": [
    "pub fn as_null(&self) -> Option<()> {",
    "    match *self {",
    "        Value::Null => Some(()),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Value::Null",
          "norm": null,
          "value": "false",
          "line": 748,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Value::Null",
          "norm": null,
          "value": "true",
          "line": 747,
          "bound": null
        },
        {
          "cond": "*self matches Value::Null",
          "norm": null,
          "value": "true",
          "line": 747,
          "bound": null
        }
      ],
      "ret": "Some(())",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}