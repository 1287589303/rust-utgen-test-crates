{
  "name": "serde_json::de::{impl#5}::into_iter",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": true,
  "loc": "src/de.rs:154:5:168:6",
  "doc": "/// Turn a JSON deserializer into an iterator over values of type T.\n",
  "code": [
    "pub fn into_iter<T>(self) -> StreamDeserializer<'de, R, T>",
    "where",
    "    T: de::Deserialize<'de>,",
    "{",
    "    // This cannot be an implementation of std::iter::IntoIterator because",
    "    // we need the caller to choose what T is.",
    "    let offset = self.read.byte_offset();",
    "    StreamDeserializer {",
    "        de: self,",
    "        offset,",
    "        failed: false,",
    "        output: PhantomData,",
    "        lifetime: PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "StreamDeserializer {\n            de: self,\n            offset,\n            failed: false,\n            output: PhantomData,\n            lifetime: PhantomData,\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}