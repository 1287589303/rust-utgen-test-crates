{
  "name": "serde_json::error::{impl#0}::classify",
  "mod_info": {
    "name": "error",
    "loc": "src/lib.rs:419:1:419:15"
  },
  "visible": true,
  "loc": "src/error.rs:54:5:82:6",
  "doc": "/// Categorizes the cause of this error.\n///\n/// - `Category::Io` - failure to read or write bytes on an I/O stream\n/// - `Category::Syntax` - input that is not syntactically valid JSON\n/// - `Category::Data` - input data that is semantically incorrect\n/// - `Category::Eof` - unexpected end of the input data\n",
  "code": [
    "pub fn classify(&self) -> Category {",
    "    match self.err.code {",
    "        ErrorCode::Message(_) => Category::Data,",
    "        ErrorCode::Io(_) => Category::Io,",
    "        ErrorCode::EofWhileParsingList",
    "        | ErrorCode::EofWhileParsingObject",
    "        | ErrorCode::EofWhileParsingString",
    "        | ErrorCode::EofWhileParsingValue => Category::Eof,",
    "        ErrorCode::ExpectedColon",
    "        | ErrorCode::ExpectedListCommaOrEnd",
    "        | ErrorCode::ExpectedObjectCommaOrEnd",
    "        | ErrorCode::ExpectedSomeIdent",
    "        | ErrorCode::ExpectedSomeValue",
    "        | ErrorCode::ExpectedDoubleQuote",
    "        | ErrorCode::InvalidEscape",
    "        | ErrorCode::InvalidNumber",
    "        | ErrorCode::NumberOutOfRange",
    "        | ErrorCode::InvalidUnicodeCodePoint",
    "        | ErrorCode::ControlCharacterWhileParsingString",
    "        | ErrorCode::KeyMustBeAString",
    "        | ErrorCode::ExpectedNumericKey",
    "        | ErrorCode::FloatKeyMustBeFinite",
    "        | ErrorCode::LoneLeadingSurrogateInHexEscape",
    "        | ErrorCode::TrailingComma",
    "        | ErrorCode::TrailingCharacters",
    "        | ErrorCode::UnexpectedEndOfHexEscape",
    "        | ErrorCode::RecursionLimitExceeded => Category::Syntax,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 25,
    "contra": 0,
    "min_set": 25
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::RecursionLimitExceeded",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::UnexpectedEndOfHexEscape",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::TrailingCharacters",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::TrailingComma",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::LoneLeadingSurrogateInHexEscape",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::FloatKeyMustBeFinite",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedNumericKey",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::KeyMustBeAString",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ControlCharacterWhileParsingString",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::InvalidUnicodeCodePoint",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::NumberOutOfRange",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::InvalidNumber",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::InvalidEscape",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedDoubleQuote",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedSomeValue",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedSomeIdent",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedObjectCommaOrEnd",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedListCommaOrEnd",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::ExpectedColon",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Syntax",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingValue",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingValue or ErrorCode::EofWhileParsingList or ErrorCode::EofWhileParsingString or ErrorCode::EofWhileParsingObject",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Eof",
      "path": [
        0,
        4,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingString",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingValue or ErrorCode::EofWhileParsingList or ErrorCode::EofWhileParsingString or ErrorCode::EofWhileParsingObject",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Eof",
      "path": [
        0,
        4,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingObject",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingValue or ErrorCode::EofWhileParsingList or ErrorCode::EofWhileParsingString or ErrorCode::EofWhileParsingObject",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Eof",
      "path": [
        0,
        4,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingList",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self.err.code matches ErrorCode::EofWhileParsingValue or ErrorCode::EofWhileParsingList or ErrorCode::EofWhileParsingString or ErrorCode::EofWhileParsingObject",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Eof",
      "path": [
        0,
        4,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::Io(_)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self.err.code matches ErrorCode::Io(_)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Io",
      "path": [
        0,
        3,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.err.code matches ErrorCode::Message(_)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self.err.code matches ErrorCode::Message(_)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "Category::Data",
      "path": [
        0,
        2,
        6,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}