{
  "name": "serde_json::de::{impl#0}::new",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": true,
  "loc": "src/de.rs:59:5:69:6",
  "doc": "/// Create a JSON deserializer from one of the possible serde_json input\n/// sources.\n///\n/// When reading from a source against which short reads are not efficient, such\n/// as a [`File`], you will want to apply your own buffering because serde_json\n/// will not buffer the input. See [`std::io::BufReader`].\n///\n/// Typically it is more convenient to use one of these methods instead:\n///\n///   - Deserializer::from_str\n///   - Deserializer::from_slice\n///   - Deserializer::from_reader\n///\n/// [`File`]: std::fs::File\n",
  "code": [
    "pub fn new(read: R) -> Self {",
    "    Deserializer {",
    "        read,",
    "        scratch: Vec::new(),",
    "        remaining_depth: 128,",
    "        #[cfg(feature = \"float_roundtrip\")]",
    "        single_precision: false,",
    "        #[cfg(feature = \"unbounded_depth\")]",
    "        disable_recursion_limit: false,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Deserializer {\n            read,\n            scratch: Vec::new(),\n            remaining_depth: 128,\n            #[cfg(feature = \"float_roundtrip\")]\n            single_precision: false,\n            #[cfg(feature = \"unbounded_depth\")]\n            disable_recursion_limit: false,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}