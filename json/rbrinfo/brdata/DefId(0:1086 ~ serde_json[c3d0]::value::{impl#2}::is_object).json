{
  "name": "serde_json::value::{impl#2}::is_object",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:348:5:350:6",
  "doc": "/// Returns true if the `Value` is an Object. Returns false otherwise.\n///\n/// For any Value on which `is_object` returns true, `as_object` and\n/// `as_object_mut` are guaranteed to return the map representation of the\n/// object.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let obj = json!({ \"a\": { \"nested\": true }, \"b\": [\"an\", \"array\"] });\n///\n/// assert!(obj.is_object());\n/// assert!(obj[\"a\"].is_object());\n///\n/// // array, not an object\n/// assert!(!obj[\"b\"].is_object());\n/// ```\n",
  "code": [
    "pub fn is_object(&self) -> bool {",
    "    self.as_object().is_some()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}