{
  "name": "serde_json::value::{impl#2}::as_str",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:492:5:497:6",
  "doc": "/// If the `Value` is a String, returns the associated str. Returns None\n/// otherwise.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let v = json!({ \"a\": \"some string\", \"b\": false });\n///\n/// assert_eq!(v[\"a\"].as_str(), Some(\"some string\"));\n///\n/// // The boolean `false` is not a string.\n/// assert_eq!(v[\"b\"].as_str(), None);\n///\n/// // JSON values are printed in JSON representation, so strings are in quotes.\n/// //\n/// //    The value is: \"some string\"\n/// println!(\"The value is: {}\", v[\"a\"]);\n///\n/// // Rust strings are printed without quotes.\n/// //\n/// //    The value is: some string\n/// println!(\"The value is: {}\", v[\"a\"].as_str().unwrap());\n/// ```\n",
  "code": [
    "pub fn as_str(&self) -> Option<&str> {",
    "    match self {",
    "        Value::String(s) => Some(s),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::String(s)",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "self matches _",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::String(s)",
          "norm": null,
          "value": "true",
          "line": 493,
          "bound": null
        },
        {
          "cond": "self matches Value::String(s)",
          "norm": null,
          "value": "true",
          "line": 493,
          "bound": null
        }
      ],
      "ret": "Some(s)",
      "path": [
        0,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}