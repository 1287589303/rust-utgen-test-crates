{
  "name": "serde_json::value::de::{impl#17}::next_element_seed",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:1137:5:1145:6",
  "doc": "",
  "code": [
    "fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Error>",
    "where",
    "    T: DeserializeSeed<'de>,",
    "{",
    "    match self.iter.next() {",
    "        Some(value) => seed.deserialize(value).map(Some),",
    "        None => Ok(None),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.iter.next() matches Some(value)",
          "norm": null,
          "value": "true",
          "line": 1141,
          "bound": null
        },
        {
          "cond": "self.iter.next() matches Some(value)",
          "norm": null,
          "value": "true",
          "line": 1141,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 1141,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        4,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}