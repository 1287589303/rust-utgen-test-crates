{
  "name": "serde_json::map::{impl#15}::and_modify",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:731:5:742:6",
  "doc": "/// Provides in-place mutable access to an occupied entry before any\n/// potential inserts into the map.\n///\n/// # Examples\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let mut map = serde_json::Map::new();\n/// map.entry(\"serde\")\n///     .and_modify(|e| *e = json!(\"rust\"))\n///     .or_insert(json!(\"cpp\"));\n///\n/// assert_eq!(map[\"serde\"], \"cpp\");\n///\n/// map.entry(\"serde\")\n///     .and_modify(|e| *e = json!(\"rust\"))\n///     .or_insert(json!(\"cpp\"));\n///\n/// assert_eq!(map[\"serde\"], \"rust\");\n/// ```\n",
  "code": [
    "pub fn and_modify<F>(self, f: F) -> Self",
    "where",
    "    F: FnOnce(&mut Value),",
    "{",
    "    match self {",
    "        Entry::Occupied(mut entry) => {",
    "            f(entry.get_mut());",
    "            Entry::Occupied(entry)",
    "        }",
    "        Entry::Vacant(entry) => Entry::Vacant(entry),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 735,
          "bound": null
        },
        {
          "cond": "self matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 735,
          "bound": null
        }
      ],
      "ret": "Entry::Occupied(entry)",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 735,
          "bound": null
        }
      ],
      "ret": "Entry::Vacant(entry)",
      "path": [
        0,
        3,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}