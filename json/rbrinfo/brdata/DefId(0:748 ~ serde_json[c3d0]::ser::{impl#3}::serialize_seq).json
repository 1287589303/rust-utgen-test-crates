{
  "name": "serde_json::ser::{impl#3}::serialize_seq",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:282:5:302:6",
  "doc": "",
  "code": [
    "fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {",
    "    tri!(self",
    "        .formatter",
    "        .begin_array(&mut self.writer)",
    "        .map_err(Error::io));",
    "    if len == Some(0) {",
    "        tri!(self",
    "            .formatter",
    "            .end_array(&mut self.writer)",
    "            .map_err(Error::io));",
    "        Ok(Compound::Map {",
    "            ser: self,",
    "            state: State::Empty,",
    "        })",
    "    } else {",
    "        Ok(Compound::Map {",
    "            ser: self,",
    "            state: State::First,",
    "        })",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        5,
        7,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        },
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        },
        {
          "cond": "len == Some(0)",
          "norm": "Some(0) == len",
          "value": "true",
          "line": 287,
          "bound": null
        },
        {
          "cond": "self\n                .formatter\n                .end_array(&mut self.writer)\n                .map_err(Error::io) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 288,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        21,
        22,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        },
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        },
        {
          "cond": "len == Some(0)",
          "norm": "Some(0) == len",
          "value": "true",
          "line": 287,
          "bound": null
        },
        {
          "cond": "self\n                .formatter\n                .end_array(&mut self.writer)\n                .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 288,
          "bound": null
        },
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        }
      ],
      "ret": "Ok(Compound::Map {\n                ser: self,\n                state: State::Empty,\n            })",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        18,
        20,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        },
        {
          "cond": "self\n            .formatter\n            .begin_array(&mut self.writer)\n            .map_err(Error::io) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 283,
          "bound": null
        },
        {
          "cond": "len == Some(0)",
          "norm": "Some(0) == len",
          "value": "false",
          "line": 287,
          "bound": null
        }
      ],
      "ret": "Ok(Compound::Map {\n                ser: self,\n                state: State::First,\n            })",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        19,
        20,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}