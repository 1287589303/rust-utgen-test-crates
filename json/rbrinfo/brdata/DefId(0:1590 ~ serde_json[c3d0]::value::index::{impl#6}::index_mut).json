{
  "name": "serde_json::value::index::{impl#6}::index_mut",
  "mod_info": {
    "name": "value::index",
    "loc": "src/value/mod.rs:929:1:929:11"
  },
  "visible": true,
  "loc": "src/value/index.rs:255:5:257:6",
  "doc": "/// Write into a `serde_json::Value` using the syntax `value[0] = ...` or\n/// `value[\"k\"] = ...`.\n///\n/// If the index is a number, the value must be an array of length bigger\n/// than the index. Indexing into a value that is not an array or an array\n/// that is too small will panic.\n///\n/// If the index is a string, the value must be an object or null which is\n/// treated like an empty object. If the key is not already present in the\n/// object, it will be inserted with a value of null. Indexing into a value\n/// that is neither an object nor null will panic.\n///\n/// # Examples\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let mut data = json!({ \"x\": 0 });\n///\n/// // replace an existing key\n/// data[\"x\"] = json!(1);\n///\n/// // insert a new key\n/// data[\"y\"] = json!([false, false, false]);\n///\n/// // replace an array value\n/// data[\"y\"][0] = json!(true);\n///\n/// // inserted a deeply nested key\n/// data[\"a\"][\"b\"][\"c\"][\"d\"] = json!(true);\n///\n/// println!(\"{}\", data);\n/// ```\n",
  "code": [
    "fn index_mut(&mut self, index: I) -> &mut Value {",
    "    index.index_or_insert(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "index.index_or_insert(self)",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}