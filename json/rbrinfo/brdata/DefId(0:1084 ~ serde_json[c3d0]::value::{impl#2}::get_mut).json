{
  "name": "serde_json::value::{impl#2}::get_mut",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:327:5:329:6",
  "doc": "/// Mutably index into a JSON array or map. A string index can be used to\n/// access a value in a map, and a usize index can be used to access an\n/// element of an array.\n///\n/// Returns `None` if the type of `self` does not match the type of the\n/// index, for example if the index is a string and `self` is an array or a\n/// number. Also returns `None` if the given key does not exist in the map\n/// or the given index is not within the bounds of the array.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let mut object = json!({ \"A\": 65, \"B\": 66, \"C\": 67 });\n/// *object.get_mut(\"A\").unwrap() = json!(69);\n///\n/// let mut array = json!([ \"A\", \"B\", \"C\" ]);\n/// *array.get_mut(2).unwrap() = json!(\"D\");\n/// ```\n",
  "code": [
    "pub fn get_mut<I: Index>(&mut self, index: I) -> Option<&mut Value> {",
    "    index.index_into_mut(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}