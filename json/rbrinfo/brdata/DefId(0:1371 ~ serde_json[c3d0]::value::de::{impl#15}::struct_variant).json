{
  "name": "serde_json::value::de::{impl#15}::struct_variant",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:1102:5:1121:6",
  "doc": "",
  "code": [
    "fn struct_variant<V>(",
    "    self,",
    "    _fields: &'static [&'static str],",
    "    visitor: V,",
    ") -> Result<V::Value, Error>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    match self.value {",
    "        Some(Value::Object(v)) => v.deserialize_any(visitor),",
    "        Some(other) => Err(serde::de::Error::invalid_type(",
    "            other.unexpected(),",
    "            &\"struct variant\",",
    "        )),",
    "        None => Err(serde::de::Error::invalid_type(",
    "            Unexpected::UnitVariant,",
    "            &\"struct variant\",",
    "        )),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.value matches Some(other) or Some(Value::Object(v))",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "self.value matches Some(other)",
          "norm": null,
          "value": "false",
          "line": 1112,
          "bound": null
        },
        {
          "cond": "self.value matches None",
          "norm": null,
          "value": "false",
          "line": 1116,
          "bound": null
        },
        {
          "cond": "self.value matches Some(Value::Object(v))",
          "norm": null,
          "value": "false",
          "line": 1111,
          "bound": null
        },
        {
          "cond": "self.value matches Some(other)",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        }
      ],
      "ret": "Err(serde::de::Error::invalid_type(\n                other.unexpected(),\n                &\"struct variant\",\n            ))",
      "path": [
        0,
        2,
        3,
        8,
        9,
        10,
        11,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.value matches Some(other) or Some(Value::Object(v))",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "self.value matches ",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "self.value matches Some(Value::Object(v))",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        6,
        7,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.value matches None",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        }
      ],
      "ret": "Err(serde::de::Error::invalid_type(\n                Unexpected::UnitVariant,\n                &\"struct variant\",\n            ))",
      "path": [
        0,
        5,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}