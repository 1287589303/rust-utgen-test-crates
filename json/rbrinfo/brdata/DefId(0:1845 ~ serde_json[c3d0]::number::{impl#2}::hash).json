{
  "name": "serde_json::number::{impl#2}::hash",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:54:5:69:6",
  "doc": "",
  "code": [
    "fn hash<H: Hasher>(&self, h: &mut H) {",
    "    match *self {",
    "        N::PosInt(i) => i.hash(h),",
    "        N::NegInt(i) => i.hash(h),",
    "        N::Float(f) => {",
    "            if f == 0.0f64 {",
    "                // There are 2 zero representations, +0 and -0, which",
    "                // compare equal but have different bits. We use the +0 hash",
    "                // for both so that hash(+0) == hash(-0).",
    "                0.0f64.to_bits().hash(h);",
    "            } else {",
    "                f.to_bits().hash(h);",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches N::Float(f)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "f == 0.0f64",
          "norm": "0.0f64 == f",
          "value": "true",
          "line": 59,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        9,
        10,
        11,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches N::Float(f)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "f == 0.0f64",
          "norm": "0.0f64 == f",
          "value": "false",
          "line": 59,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches N::NegInt(i)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "*self matches N::NegInt(i)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches N::PosInt(i)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "*self matches N::PosInt(i)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}