{
  "name": "serde_json::de::{impl#5}::parse_number",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": false,
  "loc": "src/de.rs:509:5:528:6",
  "doc": "",
  "code": [
    "fn parse_number(&mut self, positive: bool, significand: u64) -> Result<ParserNumber> {",
    "    Ok(match tri!(self.peek_or_null()) {",
    "        b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),",
    "        b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),",
    "        _ => {",
    "            if positive {",
    "                ParserNumber::U64(significand)",
    "            } else {",
    "                let neg = (significand as i64).wrapping_neg();",
    "",
    "                // Convert into a float if we underflow, or on `-0`.",
    "                if neg >= 0 {",
    "                    ParserNumber::F64(-(significand as f64))",
    "                } else {",
    "                    ParserNumber::I64(neg)",
    "                }",
    "            }",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        4,
        6,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "true",
          "line": 514,
          "bound": null
        }
      ],
      "ret": "Ok(match tri!(self.peek_or_null()) {\n            b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),\n            b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),\n            _ => {\n                if positive {\n                    ParserNumber::U64(significand)\n                } else {\n                    let neg = (significand as i64).wrapping_neg();\n\n                    // Convert into a float if we underflow, or on `-0`.\n                    if neg >= 0 {\n                        ParserNumber::F64(-(significand as f64))\n                    } else {\n                        ParserNumber::I64(neg)\n                    }\n                }\n            }\n        })",
      "path": [
        0,
        1,
        3,
        5,
        7,
        26,
        32,
        33,
        34,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "false",
          "line": 514,
          "bound": null
        },
        {
          "cond": "neg >= 0",
          "norm": "0 <= neg",
          "value": "true",
          "line": 520,
          "bound": "neg == 0"
        }
      ],
      "ret": "Ok(match tri!(self.peek_or_null()) {\n            b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),\n            b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),\n            _ => {\n                if positive {\n                    ParserNumber::U64(significand)\n                } else {\n                    let neg = (significand as i64).wrapping_neg();\n\n                    // Convert into a float if we underflow, or on `-0`.\n                    if neg >= 0 {\n                        ParserNumber::F64(-(significand as f64))\n                    } else {\n                        ParserNumber::I64(neg)\n                    }\n                }\n            }\n        })",
      "path": [
        0,
        1,
        3,
        5,
        7,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "false",
          "line": 514,
          "bound": null
        },
        {
          "cond": "neg >= 0",
          "norm": "0 <= neg",
          "value": "false",
          "line": 520,
          "bound": null
        }
      ],
      "ret": "Ok(match tri!(self.peek_or_null()) {\n            b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),\n            b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),\n            _ => {\n                if positive {\n                    ParserNumber::U64(significand)\n                } else {\n                    let neg = (significand as i64).wrapping_neg();\n\n                    // Convert into a float if we underflow, or on `-0`.\n                    if neg >= 0 {\n                        ParserNumber::F64(-(significand as f64))\n                    } else {\n                        ParserNumber::I64(neg)\n                    }\n                }\n            }\n        })",
      "path": [
        0,
        1,
        3,
        5,
        7,
        27,
        28,
        30,
        31,
        32,
        33,
        34,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        3,
        5,
        9,
        18,
        19,
        22,
        24,
        35,
        36,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": "Ok(match tri!(self.peek_or_null()) {\n            b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),\n            b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),\n            _ => {\n                if positive {\n                    ParserNumber::U64(significand)\n                } else {\n                    let neg = (significand as i64).wrapping_neg();\n\n                    // Convert into a float if we underflow, or on `-0`.\n                    if neg >= 0 {\n                        ParserNumber::F64(-(significand as f64))\n                    } else {\n                        ParserNumber::I64(neg)\n                    }\n                }\n            }\n        })",
      "path": [
        0,
        1,
        3,
        5,
        9,
        18,
        19,
        21,
        23,
        25,
        33,
        34,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        3,
        5,
        9,
        18,
        19,
        22,
        24,
        35,
        36,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": "Ok(match tri!(self.peek_or_null()) {\n            b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),\n            b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),\n            _ => {\n                if positive {\n                    ParserNumber::U64(significand)\n                } else {\n                    let neg = (significand as i64).wrapping_neg();\n\n                    // Convert into a float if we underflow, or on `-0`.\n                    if neg >= 0 {\n                        ParserNumber::F64(-(significand as f64))\n                    } else {\n                        ParserNumber::I64(neg)\n                    }\n                }\n            }\n        })",
      "path": [
        0,
        1,
        3,
        5,
        9,
        18,
        19,
        21,
        23,
        25,
        33,
        34,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'.'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.parse_decimal(positive, significand, 0) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 511,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        3,
        5,
        8,
        10,
        11,
        14,
        16,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 510,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'.'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.parse_decimal(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 511,
          "bound": null
        },
        {
          "cond": "self.parse_exponent(positive, significand, 0) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": "Ok(match tri!(self.peek_or_null()) {\n            b'.' => ParserNumber::F64(tri!(self.parse_decimal(positive, significand, 0))),\n            b'e' | b'E' => ParserNumber::F64(tri!(self.parse_exponent(positive, significand, 0))),\n            _ => {\n                if positive {\n                    ParserNumber::U64(significand)\n                } else {\n                    let neg = (significand as i64).wrapping_neg();\n\n                    // Convert into a float if we underflow, or on `-0`.\n                    if neg >= 0 {\n                        ParserNumber::F64(-(significand as f64))\n                    } else {\n                        ParserNumber::I64(neg)\n                    }\n                }\n            }\n        })",
      "path": [
        0,
        1,
        3,
        5,
        8,
        10,
        11,
        13,
        15,
        17,
        33,
        34,
        42
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}