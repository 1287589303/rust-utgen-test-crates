{
  "name": "serde_json::ser::to_vec_pretty",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2221:1:2228:2",
  "doc": "/// Serialize the given data structure as a pretty-printed JSON byte vector.\n///\n/// # Errors\n///\n/// Serialization can fail if `T`'s implementation of `Serialize` decides to\n/// fail, or if `T` contains a map with non-string keys.\n",
  "code": [
    "pub fn to_vec_pretty<T>(value: &T) -> Result<Vec<u8>>",
    "where",
    "    T: ?Sized + Serialize,",
    "{",
    "    let mut writer = Vec::with_capacity(128);",
    "    tri!(to_writer_pretty(&mut writer, value));",
    "    Ok(writer)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "to_writer_pretty(&mut writer, value) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 2226,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        5,
        7,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "to_writer_pretty(&mut writer, value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2226,
          "bound": null
        },
        {
          "cond": "to_writer_pretty(&mut writer, value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2226,
          "bound": null
        }
      ],
      "ret": "Ok(writer)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}