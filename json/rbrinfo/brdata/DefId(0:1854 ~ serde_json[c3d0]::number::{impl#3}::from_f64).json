{
  "name": "serde_json::number::{impl#3}::from_f64",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:183:5:199:6",
  "doc": "/// Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON\n/// numbers.\n///\n/// ```\n/// # use serde_json::Number;\n/// #\n/// assert!(Number::from_f64(256.0).is_some());\n///\n/// assert!(Number::from_f64(f64::NAN).is_none());\n/// ```\n",
  "code": [
    "pub fn from_f64(f: f64) -> Option<Number> {",
    "    if f.is_finite() {",
    "        let n = {",
    "            #[cfg(not(feature = \"arbitrary_precision\"))]",
    "            {",
    "                N::Float(f)",
    "            }",
    "            #[cfg(feature = \"arbitrary_precision\")]",
    "            {",
    "                ryu::Buffer::new().format_finite(f).to_owned()",
    "            }",
    "        };",
    "        Some(Number { n })",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "f.is_finite()",
          "norm": null,
          "value": "true",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "Some(Number { n })",
      "path": [
        0,
        1,
        2,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "f.is_finite()",
          "norm": null,
          "value": "false",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}