{
  "name": "serde_json::de::{impl#11}::next_key_seed",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": true,
  "loc": "src/de.rs:1984:5:2023:6",
  "doc": "",
  "code": [
    "fn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>",
    "where",
    "    K: de::DeserializeSeed<'de>,",
    "{",
    "    fn has_next_key<'de, 'a, R: Read<'de> + 'a>(map: &mut MapAccess<'a, R>) -> Result<bool> {",
    "        let peek = match tri!(map.de.parse_whitespace()) {",
    "            Some(b) => b,",
    "            None => {",
    "                return Err(map.de.peek_error(ErrorCode::EofWhileParsingObject));",
    "            }",
    "        };",
    "",
    "        if peek == b'}' {",
    "            Ok(false)",
    "        } else if map.first {",
    "            map.first = false;",
    "            if peek == b'\"' {",
    "                Ok(true)",
    "            } else {",
    "                Err(map.de.peek_error(ErrorCode::KeyMustBeAString))",
    "            }",
    "        } else if peek == b',' {",
    "            map.de.eat_char();",
    "            match tri!(map.de.parse_whitespace()) {",
    "                Some(b'\"') => Ok(true),",
    "                Some(b'}') => Err(map.de.peek_error(ErrorCode::TrailingComma)),",
    "                Some(_) => Err(map.de.peek_error(ErrorCode::KeyMustBeAString)),",
    "                None => Err(map.de.peek_error(ErrorCode::EofWhileParsingValue)),",
    "            }",
    "        } else {",
    "            Err(map.de.peek_error(ErrorCode::ExpectedObjectCommaOrEnd))",
    "        }",
    "    }",
    "",
    "    if tri!(has_next_key(self)) {",
    "        Ok(Some(tri!(seed.deserialize(MapKey { de: &mut *self.de }))))",
    "    } else {",
    "        Ok(None)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "has_next_key(self) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 2018,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        4,
        6,
        25,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "has_next_key(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2018,
          "bound": null
        },
        {
          "cond": "seed.deserialize(MapKey { de: &mut *self.de }) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2019,
          "bound": null
        },
        {
          "cond": "has_next_key(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "has_next_key(self) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "seed.deserialize(MapKey { de: &mut *self.de }) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 2019,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        3,
        5,
        7,
        9,
        10,
        13,
        16,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "has_next_key(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2018,
          "bound": null
        },
        {
          "cond": "seed.deserialize(MapKey { de: &mut *self.de }) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2019,
          "bound": null
        },
        {
          "cond": "has_next_key(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "has_next_key(self) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "seed.deserialize(MapKey { de: &mut *self.de }) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2019,
          "bound": null
        },
        {
          "cond": "seed.deserialize(MapKey { de: &mut *self.de }) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2019,
          "bound": null
        }
      ],
      "ret": "Ok(Some(tri!(seed.deserialize(MapKey { de: &mut *self.de }))))",
      "path": [
        0,
        1,
        3,
        5,
        7,
        9,
        10,
        12,
        14,
        15,
        17,
        18,
        19,
        22,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "has_next_key(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2018,
          "bound": null
        },
        {
          "cond": "seed.deserialize(MapKey { de: &mut *self.de }) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2019,
          "bound": null
        },
        {
          "cond": "has_next_key(self) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 2018,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        3,
        5,
        8,
        20,
        21,
        22,
        28
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}