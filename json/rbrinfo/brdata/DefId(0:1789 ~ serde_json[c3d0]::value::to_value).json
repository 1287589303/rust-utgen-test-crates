{
  "name": "serde_json::value::to_value",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:988:1:993:2",
  "doc": "/// Convert a `T` into `serde_json::Value` which is an enum that can represent\n/// any valid JSON data.\n///\n/// # Example\n///\n/// ```\n/// use serde::Serialize;\n/// use serde_json::json;\n/// use std::error::Error;\n///\n/// #[derive(Serialize)]\n/// struct User {\n///     fingerprint: String,\n///     location: String,\n/// }\n///\n/// fn compare_json_values() -> Result<(), Box<dyn Error>> {\n///     let u = User {\n///         fingerprint: \"0xF9BA143B95FF6D82\".to_owned(),\n///         location: \"Menlo Park, CA\".to_owned(),\n///     };\n///\n///     // The type of `expected` is `serde_json::Value`\n///     let expected = json!({\n///         \"fingerprint\": \"0xF9BA143B95FF6D82\",\n///         \"location\": \"Menlo Park, CA\",\n///     });\n///\n///     let v = serde_json::to_value(u).unwrap();\n///     assert_eq!(v, expected);\n///\n///     Ok(())\n/// }\n/// #\n/// # compare_json_values().unwrap();\n/// ```\n///\n/// # Errors\n///\n/// This conversion can fail if `T`'s implementation of `Serialize` decides to\n/// fail, or if `T` contains a map with non-string keys.\n///\n/// ```\n/// use std::collections::BTreeMap;\n///\n/// fn main() {\n///     // The keys in this map are vectors, not strings.\n///     let mut map = BTreeMap::new();\n///     map.insert(vec![32, 64], \"x86\");\n///\n///     println!(\"{}\", serde_json::to_value(map).unwrap_err());\n/// }\n/// ```\n",
  "code": [
    "pub fn to_value<T>(value: T) -> Result<Value, Error>",
    "where",
    "    T: Serialize,",
    "{",
    "    value.serialize(Serializer)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}