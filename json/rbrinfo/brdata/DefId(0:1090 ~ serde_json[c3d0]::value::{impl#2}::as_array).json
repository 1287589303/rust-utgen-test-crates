{
  "name": "serde_json::value::{impl#2}::as_array",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:425:5:430:6",
  "doc": "/// If the `Value` is an Array, returns the associated vector. Returns None\n/// otherwise.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let v = json!({ \"a\": [\"an\", \"array\"], \"b\": { \"an\": \"object\" } });\n///\n/// // The length of `[\"an\", \"array\"]` is 2 elements.\n/// assert_eq!(v[\"a\"].as_array().unwrap().len(), 2);\n///\n/// // The object `{\"an\": \"object\"}` is not an array.\n/// assert_eq!(v[\"b\"].as_array(), None);\n/// ```\n",
  "code": [
    "pub fn as_array(&self) -> Option<&Vec<Value>> {",
    "    match self {",
    "        Value::Array(array) => Some(array),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::Array(array)",
          "norm": null,
          "value": "false",
          "line": 427,
          "bound": null
        },
        {
          "cond": "self matches _",
          "norm": null,
          "value": "true",
          "line": 428,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::Array(array)",
          "norm": null,
          "value": "true",
          "line": 426,
          "bound": null
        },
        {
          "cond": "self matches Value::Array(array)",
          "norm": null,
          "value": "true",
          "line": 426,
          "bound": null
        }
      ],
      "ret": "Some(array)",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}