{
  "name": "serde_json::de::{impl#5}::parse_decimal",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": false,
  "loc": "src/de.rs:530:5:565:6",
  "doc": "",
  "code": [
    "fn parse_decimal(",
    "    &mut self,",
    "    positive: bool,",
    "    mut significand: u64,",
    "    exponent_before_decimal_point: i32,",
    ") -> Result<f64> {",
    "    self.eat_char();",
    "",
    "    let mut exponent_after_decimal_point = 0;",
    "    while let c @ b'0'..=b'9' = tri!(self.peek_or_null()) {",
    "        let digit = (c - b'0') as u64;",
    "",
    "        if overflow!(significand * 10 + digit, u64::MAX) {",
    "            let exponent = exponent_before_decimal_point + exponent_after_decimal_point;",
    "            return self.parse_decimal_overflow(positive, significand, exponent);",
    "        }",
    "",
    "        self.eat_char();",
    "        significand = significand * 10 + digit;",
    "        exponent_after_decimal_point -= 1;",
    "    }",
    "",
    "    // Error if there is not at least one digit after the decimal point.",
    "    if exponent_after_decimal_point == 0 {",
    "        match tri!(self.peek()) {",
    "            Some(_) => return Err(self.peek_error(ErrorCode::InvalidNumber)),",
    "            None => return Err(self.peek_error(ErrorCode::EofWhileParsingValue)),",
    "        }",
    "    }",
    "",
    "    let exponent = exponent_before_decimal_point + exponent_after_decimal_point;",
    "    match tri!(self.peek_or_null()) {",
    "        b'e' | b'E' => self.parse_exponent(positive, significand, exponent),",
    "        _ => self.f64_from_parts(positive, significand, exponent),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 19,
    "contra": 7,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        69,
        70,
        71,
        72,
        73
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "$a >= c / 10",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": "$a == c / 10"
        },
        {
          "cond": "$a > c / 10",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        11,
        13,
        14,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        26,
        27,
        70,
        71,
        72,
        73
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "$a >= c / 10",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": "$a == c / 10"
        },
        {
          "cond": "$a > c / 10",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": "$a == c / 10"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        11,
        13,
        14,
        15,
        16,
        18,
        20,
        21,
        22,
        23,
        24,
        26,
        27,
        70,
        71,
        72,
        73
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "$a >= c / 10",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": "$a == c / 10"
        },
        {
          "cond": "$a > c / 10",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": "$a == c / 10"
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        11,
        13,
        14,
        15,
        16,
        18,
        20,
        21,
        22,
        23,
        25,
        28,
        29,
        30,
        31,
        32,
        2,
        3,
        4,
        7,
        9,
        69,
        70,
        71,
        72,
        73
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "$a >= c / 10",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        11,
        13,
        14,
        15,
        17,
        23,
        25,
        28,
        29,
        30,
        31,
        32,
        2,
        3,
        4,
        7,
        9,
        69,
        70,
        71,
        72,
        73
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        34,
        35,
        38,
        40,
        66,
        67,
        68,
        72,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches Some(_)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Err(self.peek_error(ErrorCode::InvalidNumber))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        34,
        35,
        37,
        39,
        42,
        44,
        45,
        46,
        67,
        68,
        72,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        }
      ],
      "ret": "Err(self.peek_error(ErrorCode::EofWhileParsingValue))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        34,
        35,
        37,
        39,
        43,
        47,
        48,
        67,
        68,
        72,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        49,
        50,
        51,
        54,
        56,
        64,
        65,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        49,
        50,
        51,
        53,
        55,
        57,
        61,
        62,
        63,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        49,
        50,
        51,
        53,
        55,
        58,
        59,
        60,
        62,
        63,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        10,
        33,
        49,
        50,
        51,
        53,
        55,
        58,
        59,
        60,
        62,
        63,
        73
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        34,
        35,
        38,
        40,
        66,
        67,
        68,
        72,
        73
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches Some(_)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Err(self.peek_error(ErrorCode::InvalidNumber))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        34,
        35,
        37,
        39,
        42,
        44,
        45,
        46,
        67,
        68,
        72,
        73
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        },
        {
          "cond": "self.peek() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 554,
          "bound": null
        }
      ],
      "ret": "Err(self.peek_error(ErrorCode::EofWhileParsingValue))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        34,
        35,
        37,
        39,
        43,
        47,
        48,
        67,
        68,
        72,
        73
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        49,
        50,
        51,
        54,
        56,
        64,
        65,
        73
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "false",
          "line": 409,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        49,
        50,
        51,
        53,
        55,
        57,
        61,
        62,
        63,
        73
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        49,
        50,
        51,
        53,
        55,
        58,
        59,
        60,
        62,
        63,
        73
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 539,
          "bound": null
        },
        {
          "cond": "let c @ b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 539,
          "bound": null
        },
        {
          "cond": "exponent_after_decimal_point == 0",
          "norm": "0 == exponent_after_decimal_point",
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches ",
          "norm": null,
          "value": "true",
          "line": 561,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches b'e' or b'E'",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        33,
        49,
        50,
        51,
        53,
        55,
        58,
        59,
        60,
        62,
        63,
        73
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}