{
  "name": "serde_json::value::index::{impl#0}::index_or_insert",
  "mod_info": {
    "name": "value::index",
    "loc": "src/value/mod.rs:929:1:929:11"
  },
  "visible": true,
  "loc": "src/value/index.rs:67:5:80:6",
  "doc": "",
  "code": [
    "fn index_or_insert<'v>(&self, v: &'v mut Value) -> &'v mut Value {",
    "    match v {",
    "        Value::Array(vec) => {",
    "            let len = vec.len();",
    "            vec.get_mut(*self).unwrap_or_else(|| {",
    "                panic!(",
    "                    \"cannot access index {} of JSON array of length {}\",",
    "                    self, len",
    "                )",
    "            })",
    "        }",
    "        _ => panic!(\"cannot access index {} of JSON {}\", self, Type(v)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "v matches Value::Array(vec)",
          "norm": null,
          "value": "false",
          "line": 69,
          "bound": null
        },
        {
          "cond": "v matches _",
          "norm": null,
          "value": "true",
          "line": 78,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "v matches Value::Array(vec)",
          "norm": null,
          "value": "true",
          "line": 68,
          "bound": null
        },
        {
          "cond": "v matches Value::Array(vec)",
          "norm": null,
          "value": "true",
          "line": 68,
          "bound": null
        }
      ],
      "ret": "match v {\n            Value::Array(vec) => {\n                let len = vec.len();\n                vec.get_mut(*self).unwrap_or_else(|| {\n                    panic!(\n                        \"cannot access index {} of JSON array of length {}\",\n                        self, len\n                    )\n                })\n            }\n            _ => panic!(\"cannot access index {} of JSON {}\", self, Type(v)),\n        }",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}