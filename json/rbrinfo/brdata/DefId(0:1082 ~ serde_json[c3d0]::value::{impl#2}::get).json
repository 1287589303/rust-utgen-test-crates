{
  "name": "serde_json::value::{impl#2}::get",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:305:5:307:6",
  "doc": "/// Index into a JSON array or map. A string index can be used to access a\n/// value in a map, and a usize index can be used to access an element of an\n/// array.\n///\n/// Returns `None` if the type of `self` does not match the type of the\n/// index, for example if the index is a string and `self` is an array or a\n/// number. Also returns `None` if the given key does not exist in the map\n/// or the given index is not within the bounds of the array.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let object = json!({ \"A\": 65, \"B\": 66, \"C\": 67 });\n/// assert_eq!(*object.get(\"A\").unwrap(), json!(65));\n///\n/// let array = json!([ \"A\", \"B\", \"C\" ]);\n/// assert_eq!(*array.get(2).unwrap(), json!(\"C\"));\n///\n/// assert_eq!(array.get(\"A\"), None);\n/// ```\n///\n/// Square brackets can also be used to index into a value in a more concise\n/// way. This returns `Value::Null` in cases where `get` would have returned\n/// `None`.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let object = json!({\n///     \"A\": [\"a\", \"á\", \"à\"],\n///     \"B\": [\"b\", \"b́\"],\n///     \"C\": [\"c\", \"ć\", \"ć̣\", \"ḉ\"],\n/// });\n/// assert_eq!(object[\"B\"][0], json!(\"b\"));\n///\n/// assert_eq!(object[\"D\"], json!(null));\n/// assert_eq!(object[0][\"x\"][\"y\"][\"z\"], json!(null));\n/// ```\n",
  "code": [
    "pub fn get<I: Index>(&self, index: I) -> Option<&Value> {",
    "    index.index_into(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}