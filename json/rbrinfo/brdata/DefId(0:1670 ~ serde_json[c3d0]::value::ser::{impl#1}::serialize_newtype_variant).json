{
  "name": "serde_json::value::ser::{impl#1}::serialize_newtype_variant",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:205:5:218:6",
  "doc": "",
  "code": [
    "fn serialize_newtype_variant<T>(",
    "    self,",
    "    _name: &'static str,",
    "    _variant_index: u32,",
    "    variant: &'static str,",
    "    value: &T,",
    ") -> Result<Value>",
    "where",
    "    T: ?Sized + Serialize,",
    "{",
    "    let mut values = Map::new();",
    "    values.insert(String::from(variant), tri!(to_value(value)));",
    "    Ok(Value::Object(values))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "to_value(value) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        16,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "to_value(value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "to_value(value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Ok(Value::Object(values))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}