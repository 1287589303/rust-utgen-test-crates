{
  "name": "serde_json::map::{impl#0}::sort_keys",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:420:1:420:13"
  },
  "visible": true,
  "loc": "src/map.rs:379:5:382:6",
  "doc": "/// Sorts this map's entries in-place using `str`'s usual ordering.\n///\n/// If serde_json's \"preserve_order\" feature is not enabled, this method\n/// does no work because all JSON maps are always kept in a sorted state.\n///\n/// If serde_json's \"preserve_order\" feature is enabled, this method\n/// destroys the original source order or insertion order of this map in\n/// favor of an alphanumerical order that matches how a BTreeMap with the\n/// same contents would be ordered. This takes **O(n log n + c)** time where\n/// _n_ is the length of the map and _c_ is the capacity.\n///\n/// Other maps nested within the values of this map are not sorted. If you\n/// need the entire data structure to be sorted at all levels, you must also\n/// call\n/// <code>map.[values_mut]\\().for_each([Value::sort_all_objects])</code>.\n///\n/// [values_mut]: Map::values_mut\n",
  "code": [
    "pub fn sort_keys(&mut self) {",
    "    #[cfg(feature = \"preserve_order\")]",
    "    self.map.sort_unstable_keys();",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}