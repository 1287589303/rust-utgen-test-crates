{
  "name": "serde_json::de::{impl#5}::parse_exponent_overflow",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": false,
  "loc": "src/de.rs:859:5:874:6",
  "doc": "",
  "code": [
    "fn parse_exponent_overflow(",
    "    &mut self,",
    "    positive: bool,",
    "    zero_significand: bool,",
    "    positive_exp: bool,",
    ") -> Result<f64> {",
    "    // Error instead of +/- infinity.",
    "    if !zero_significand && positive_exp {",
    "        return Err(self.error(ErrorCode::NumberOutOfRange));",
    "    }",
    "",
    "    while let b'0'..=b'9' = tri!(self.peek_or_null()) {",
    "        self.eat_char();",
    "    }",
    "    Ok(if positive { 0.0 } else { -0.0 })",
    "}"
  ],
  "size": {
    "chain": 13,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        5,
        6,
        7,
        8,
        11,
        13,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        5,
        6,
        7,
        8,
        10,
        12,
        16,
        15,
        17,
        18,
        19,
        6,
        7,
        8,
        11,
        13,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        5,
        6,
        7,
        8,
        10,
        12,
        16,
        14,
        20,
        21,
        23,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        5,
        6,
        7,
        8,
        10,
        12,
        16,
        14,
        20,
        22,
        23,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        5,
        6,
        7,
        8,
        10,
        12,
        14,
        20,
        21,
        23,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        5,
        6,
        7,
        8,
        10,
        12,
        14,
        20,
        22,
        23,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ErrorCode::NumberOutOfRange))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        11,
        13,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        16,
        15,
        17,
        18,
        19,
        6,
        7,
        8,
        11,
        13,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        16,
        14,
        20,
        21,
        23,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        16,
        14,
        20,
        22,
        23,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        14,
        20,
        21,
        23,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "zero_significand",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "positive_exp",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "self.peek_or_null() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 870,
          "bound": null
        },
        {
          "cond": "let b'0'..=b'9' = tri!(self.peek_or_null())",
          "norm": null,
          "value": "false",
          "line": 870,
          "bound": null
        },
        {
          "cond": "positive",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(if positive { 0.0 } else { -0.0 })",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        14,
        20,
        22,
        23,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}