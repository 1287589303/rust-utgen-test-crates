{
  "name": "serde_json::value::ser::{impl#0}::serialize",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:13:5:35:6",
  "doc": "",
  "code": [
    "fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>",
    "where",
    "    S: ::serde::Serializer,",
    "{",
    "    match self {",
    "        Value::Null => serializer.serialize_unit(),",
    "        Value::Bool(b) => serializer.serialize_bool(*b),",
    "        Value::Number(n) => n.serialize(serializer),",
    "        Value::String(s) => serializer.serialize_str(s),",
    "        Value::Array(v) => v.serialize(serializer),",
    "        #[cfg(any(feature = \"std\", feature = \"alloc\"))]",
    "        Value::Object(m) => {",
    "            use serde::ser::SerializeMap;",
    "            let mut map = tri!(serializer.serialize_map(Some(m.len())));",
    "            for (k, v) in m {",
    "                tri!(map.serialize_entry(k, v));",
    "            }",
    "            map.end()",
    "        }",
    "        #[cfg(not(any(feature = \"std\", feature = \"alloc\")))]",
    "        Value::Object(_) => unreachable!(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 1,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::Object(m)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "serializer.serialize_map(Some(m.len())) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 26,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        7,
        19,
        20,
        23,
        26,
        48,
        49,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::Object(m)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "serializer.serialize_map(Some(m.len())) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 26,
          "bound": null
        },
        {
          "cond": "map.serialize_entry(k, v) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 28,
          "bound": null
        },
        {
          "cond": "(k, v) in m",
          "norm": null,
          "value": "true",
          "line": 27,
          "bound": null
        },
        {
          "cond": "map.serialize_entry(k, v) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 28,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        7,
        19,
        20,
        22,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        34,
        36,
        39,
        41,
        46,
        47,
        50,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self matches Value::Object(m)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "serializer.serialize_map(Some(m.len())) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 26,
          "bound": null
        },
        {
          "cond": "map.serialize_entry(k, v) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 28,
          "bound": null
        },
        {
          "cond": "(k, v) in m",
          "norm": null,
          "value": "true",
          "line": 27,
          "bound": null
        },
        {
          "cond": "map.serialize_entry(k, v) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 28,
          "bound": null
        },
        {
          "cond": "map.serialize_entry(k, v) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 28,
          "bound": null
        },
        {
          "cond": "(k, v) in m",
          "norm": null,
          "value": "false",
          "line": 27,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        19,
        20,
        22,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        34,
        36,
        38,
        40,
        42,
        29,
        30,
        31,
        33,
        35,
        43,
        44,
        45,
        51
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self matches Value::Object(m)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "serializer.serialize_map(Some(m.len())) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 26,
          "bound": null
        },
        {
          "cond": "map.serialize_entry(k, v) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 28,
          "bound": null
        },
        {
          "cond": "(k, v) in m",
          "norm": null,
          "value": "false",
          "line": 27,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        19,
        20,
        22,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        33,
        35,
        43,
        44,
        45,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self matches Value::Array(v)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "self matches Value::Array(v)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        17,
        18,
        45,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self matches Value::String(s)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "self matches Value::String(s)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        14,
        15,
        16,
        45,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self matches Value::Number(n)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "self matches Value::Number(n)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        12,
        13,
        45,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self matches Value::Bool(b)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "self matches Value::Bool(b)",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        10,
        11,
        45,
        51
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self matches Value::Null",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        },
        {
          "cond": "self matches Value::Null",
          "norm": null,
          "value": "true",
          "line": 17,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        45,
        51
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}