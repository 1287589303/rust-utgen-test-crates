{
  "name": "serde_json::number::{impl#3}::from_u128",
  "mod_info": {
    "name": "number",
    "loc": "src/lib.rs:433:1:433:12"
  },
  "visible": true,
  "loc": "src/number.rs:264:5:280:6",
  "doc": "/// Converts a `u128` to a `Number`. Numbers greater than u64::MAX can only\n/// be represented in `Number` if serde_json's \"arbitrary_precision\" feature\n/// is enabled.\n///\n/// ```\n/// # use serde_json::Number;\n/// #\n/// assert!(Number::from_u128(256).is_some());\n/// ```\n",
  "code": [
    "pub fn from_u128(i: u128) -> Option<Number> {",
    "    let n = {",
    "        #[cfg(not(feature = \"arbitrary_precision\"))]",
    "        {",
    "            if let Ok(u) = u64::try_from(i) {",
    "                N::PosInt(u)",
    "            } else {",
    "                return None;",
    "            }",
    "        }",
    "        #[cfg(feature = \"arbitrary_precision\")]",
    "        {",
    "            i.to_string()",
    "        }",
    "    };",
    "    Some(Number { n })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok(u) = u64::try_from(i)",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok(u) = u64::try_from(i)",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": null
        }
      ],
      "ret": "Some(Number { n })",
      "path": [
        0,
        1,
        2,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}