{
  "name": "serde_json::value::de::{impl#12}::deserialize_enum",
  "mod_info": {
    "name": "value::de",
    "loc": "src/value/mod.rs:927:1:927:8"
  },
  "visible": true,
  "loc": "src/value/de.rs:763:5:794:6",
  "doc": "",
  "code": [
    "fn deserialize_enum<V>(",
    "    self,",
    "    _name: &'static str,",
    "    _variants: &'static [&'static str],",
    "    visitor: V,",
    ") -> Result<V::Value, Self::Error>",
    "where",
    "    V: Visitor<'de>,",
    "{",
    "    let mut iter = self.into_iter();",
    "    let (variant, value) = match iter.next() {",
    "        Some(v) => v,",
    "        None => {",
    "            return Err(serde::de::Error::invalid_value(",
    "                Unexpected::Map,",
    "                &\"map with a single key\",",
    "            ));",
    "        }",
    "    };",
    "    // enums are encoded in json as maps with a single key:value pair",
    "    if iter.next().is_some() {",
    "        return Err(serde::de::Error::invalid_value(",
    "            Unexpected::Map,",
    "            &\"map with a single key\",",
    "        ));",
    "    }",
    "",
    "    visitor.visit_enum(EnumRefDeserializer {",
    "        variant,",
    "        value: Some(value),",
    "    })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "iter.next().is_some()",
          "norm": null,
          "value": "true",
          "line": 783,
          "bound": null
        }
      ],
      "ret": "Err(serde::de::Error::invalid_value(\n                Unexpected::Map,\n                &\"map with a single key\",\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        11,
        12,
        13,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "iter.next().is_some()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        15,
        16,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        }
      ],
      "ret": "Err(serde::de::Error::invalid_value(\n                    Unexpected::Map,\n                    &\"map with a single key\",\n                ))",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}