{
  "name": "serde_json::value::{impl#2}::pointer_mut",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:834:5:850:6",
  "doc": "/// Looks up a value by a JSON Pointer and returns a mutable reference to\n/// that value.\n///\n/// JSON Pointer defines a string syntax for identifying a specific value\n/// within a JavaScript Object Notation (JSON) document.\n///\n/// A Pointer is a Unicode string with the reference tokens separated by `/`.\n/// Inside tokens `/` is replaced by `~1` and `~` is replaced by `~0`. The\n/// addressed value is returned and if there is no such value `None` is\n/// returned.\n///\n/// For more information read [RFC6901](https://tools.ietf.org/html/rfc6901).\n///\n/// # Example of Use\n///\n/// ```\n/// use serde_json::Value;\n///\n/// fn main() {\n///     let s = r#\"{\"x\": 1.0, \"y\": 2.0}\"#;\n///     let mut value: Value = serde_json::from_str(s).unwrap();\n///\n///     // Check value using read-only pointer\n///     assert_eq!(value.pointer(\"/x\"), Some(&1.0.into()));\n///     // Change value with direct assignment\n///     *value.pointer_mut(\"/x\").unwrap() = 1.5.into();\n///     // Check that new value was written\n///     assert_eq!(value.pointer(\"/x\"), Some(&1.5.into()));\n///     // Or change the value only if it exists\n///     value.pointer_mut(\"/x\").map(|v| *v = 1.5.into());\n///\n///     // \"Steal\" ownership of a value. Can replace with any valid Value.\n///     let old_x = value.pointer_mut(\"/x\").map(Value::take).unwrap();\n///     assert_eq!(old_x, 1.5);\n///     assert_eq!(value.pointer(\"/x\").unwrap(), &Value::Null);\n/// }\n/// ```\n",
  "code": [
    "pub fn pointer_mut(&mut self, pointer: &str) -> Option<&mut Value> {",
    "    if pointer.is_empty() {",
    "        return Some(self);",
    "    }",
    "    if !pointer.starts_with('/') {",
    "        return None;",
    "    }",
    "    pointer",
    "        .split('/')",
    "        .skip(1)",
    "        .map(|x| x.replace(\"~1\", \"/\").replace(\"~0\", \"~\"))",
    "        .try_fold(self, |target, token| match target {",
    "            Value::Object(map) => map.get_mut(&token),",
    "            Value::Array(list) => parse_index(&token).and_then(move |x| list.get_mut(x)),",
    "            _ => None,",
    "        })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "pointer.is_empty()",
          "norm": null,
          "value": "true",
          "line": 835,
          "bound": null
        }
      ],
      "ret": "Some(self)",
      "path": [
        0,
        1,
        2,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "pointer.is_empty()",
          "norm": null,
          "value": "false",
          "line": 835,
          "bound": null
        },
        {
          "cond": "pointer.starts_with('/')",
          "norm": null,
          "value": "true",
          "line": 838,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "pointer.is_empty()",
          "norm": null,
          "value": "false",
          "line": 835,
          "bound": null
        },
        {
          "cond": "pointer.starts_with('/')",
          "norm": null,
          "value": "false",
          "line": 838,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        6,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}