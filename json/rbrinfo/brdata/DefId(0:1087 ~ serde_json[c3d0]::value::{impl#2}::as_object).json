{
  "name": "serde_json::value::{impl#2}::as_object",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:366:5:371:6",
  "doc": "/// If the `Value` is an Object, returns the associated Map. Returns None\n/// otherwise.\n///\n/// ```\n/// # use serde_json::json;\n/// #\n/// let v = json!({ \"a\": { \"nested\": true }, \"b\": [\"an\", \"array\"] });\n///\n/// // The length of `{\"nested\": true}` is 1 entry.\n/// assert_eq!(v[\"a\"].as_object().unwrap().len(), 1);\n///\n/// // The array `[\"an\", \"array\"]` is not an object.\n/// assert_eq!(v[\"b\"].as_object(), None);\n/// ```\n",
  "code": [
    "pub fn as_object(&self) -> Option<&Map<String, Value>> {",
    "    match self {",
    "        Value::Object(map) => Some(map),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::Object(map)",
          "norm": null,
          "value": "false",
          "line": 368,
          "bound": null
        },
        {
          "cond": "self matches _",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 367,
          "bound": null
        },
        {
          "cond": "self matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 367,
          "bound": null
        }
      ],
      "ret": "Some(map)",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}