{
  "name": "serde_json::ser::to_writer_pretty",
  "mod_info": {
    "name": "ser",
    "loc": "src/lib.rs:423:1:423:13"
  },
  "visible": true,
  "loc": "src/ser.rs:2189:1:2196:2",
  "doc": "/// Serialize the given data structure as pretty-printed JSON into the I/O\n/// stream.\n///\n/// Serialization guarantees it only feeds valid UTF-8 sequences to the writer.\n///\n/// # Errors\n///\n/// Serialization can fail if `T`'s implementation of `Serialize` decides to\n/// fail, or if `T` contains a map with non-string keys.\n",
  "code": [
    "pub fn to_writer_pretty<W, T>(writer: W, value: &T) -> Result<()>",
    "where",
    "    W: io::Write,",
    "    T: ?Sized + Serialize,",
    "{",
    "    let mut ser = Serializer::pretty(writer);",
    "    value.serialize(&mut ser)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}