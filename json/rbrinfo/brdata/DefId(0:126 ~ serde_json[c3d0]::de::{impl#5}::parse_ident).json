{
  "name": "serde_json::de::{impl#5}::parse_ident",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": false,
  "loc": "src/de.rs:445:5:460:6",
  "doc": "",
  "code": [
    "fn parse_ident(&mut self, ident: &[u8]) -> Result<()> {",
    "    for expected in ident {",
    "        match tri!(self.next_char()) {",
    "            None => {",
    "                return Err(self.error(ErrorCode::EofWhileParsingValue));",
    "            }",
    "            Some(next) => {",
    "                if next != *expected {",
    "                    return Err(self.error(ErrorCode::ExpectedSomeIdent));",
    "                }",
    "            }",
    "        }",
    "    }",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "expected in ident",
          "norm": null,
          "value": "true",
          "line": 446,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        12,
        14,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "expected in ident",
          "norm": null,
          "value": "true",
          "line": 446,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        },
        {
          "cond": "next != *expected",
          "norm": "*expected != next",
          "value": "true",
          "line": 452,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ErrorCode::ExpectedSomeIdent))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        11,
        13,
        17,
        21,
        22,
        23,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "expected in ident",
          "norm": null,
          "value": "true",
          "line": 446,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        },
        {
          "cond": "next != *expected",
          "norm": "*expected != next",
          "value": "false",
          "line": 452,
          "bound": null
        },
        {
          "cond": "expected in ident",
          "norm": null,
          "value": "false",
          "line": 446,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        11,
        13,
        17,
        24,
        25,
        2,
        3,
        4,
        6,
        8,
        29
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "expected in ident",
          "norm": null,
          "value": "true",
          "line": 446,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        },
        {
          "cond": "self.next_char() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 447,
          "bound": null
        },
        {
          "cond": "match $e {\n            core::result::Result::Ok(val) => val,\n            core::result::Result::Err(err) => return core::result::Result::Err(err),\n        } matches None",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ErrorCode::EofWhileParsingValue))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        11,
        13,
        16,
        18,
        19,
        20,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "expected in ident",
          "norm": null,
          "value": "false",
          "line": 446,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}