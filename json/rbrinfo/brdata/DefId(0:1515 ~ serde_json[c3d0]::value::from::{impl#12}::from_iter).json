{
  "name": "serde_json::value::from::{impl#12}::from_iter",
  "mod_info": {
    "name": "value::from",
    "loc": "src/value/mod.rs:928:1:928:10"
  },
  "visible": true,
  "loc": "src/value/from.rs:249:5:255:6",
  "doc": "/// Create a `Value::Object` by collecting an iterator of key-value pairs.\n///\n/// # Examples\n///\n/// ```\n/// use serde_json::Value;\n///\n/// let v: Vec<_> = vec![(\"lorem\", 40), (\"ipsum\", 2)];\n/// let x: Value = v.into_iter().collect();\n/// ```\n",
  "code": [
    "fn from_iter<I: IntoIterator<Item = (K, V)>>(iter: I) -> Self {",
    "    Value::Object(",
    "        iter.into_iter()",
    "            .map(|(k, v)| (k.into(), v.into()))",
    "            .collect(),",
    "    )",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Value::Object(\n            iter.into_iter()\n                .map(|(k, v)| (k.into(), v.into()))\n                .collect(),\n        )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}