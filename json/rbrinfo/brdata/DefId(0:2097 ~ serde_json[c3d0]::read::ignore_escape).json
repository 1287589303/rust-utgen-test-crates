{
  "name": "serde_json::read::ignore_escape",
  "mod_info": {
    "name": "read",
    "loc": "src/lib.rs:434:1:434:10"
  },
  "visible": false,
  "loc": "src/read.rs:1025:1:1048:2",
  "doc": "/// Parses a JSON escape sequence and discards the value. Assumes the previous\n/// byte read was a backslash.\n",
  "code": [
    "fn ignore_escape<'de, R>(read: &mut R) -> Result<()>",
    "where",
    "    R: ?Sized + Read<'de>,",
    "{",
    "    let ch = tri!(next_or_eof(read));",
    "",
    "    match ch {",
    "        b'\"' | b'\\\\' | b'/' | b'b' | b'f' | b'n' | b'r' | b't' => {}",
    "        b'u' => {",
    "            // At this point we don't care if the codepoint is valid. We just",
    "            // want to consume it. We don't actually know what is valid or not",
    "            // at this point, because that depends on if this string will",
    "            // ultimately be parsed into a string or a byte buffer in the \"real\"",
    "            // parse.",
    "",
    "            tri!(read.decode_hex_escape());",
    "        }",
    "        _ => {",
    "            return error(read, ErrorCode::InvalidEscape);",
    "        }",
    "    }",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        4,
        6,
        25,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'r'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'n'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'/'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'u'",
          "norm": null,
          "value": "true",
          "line": 1033,
          "bound": null
        },
        {
          "cond": "ch matches b'f'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b't'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'b'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches _",
          "norm": null,
          "value": "true",
          "line": 1042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        7,
        8,
        20,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'u'",
          "norm": null,
          "value": "true",
          "line": 1033,
          "bound": null
        },
        {
          "cond": "ch matches b'u'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        3,
        5,
        7,
        9,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'u'",
          "norm": null,
          "value": "true",
          "line": 1033,
          "bound": null
        },
        {
          "cond": "ch matches b'u'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        9,
        12,
        13,
        15,
        17,
        19,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b't'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'r'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'n'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'f'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'b'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'/'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'\\\\'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "next_or_eof(read) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1029,
          "bound": null
        },
        {
          "cond": "read.decode_hex_escape() matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1040,
          "bound": null
        },
        {
          "cond": "ch matches b'\"'",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "ch matches b'r' or b'n' or b'/' or b'\"' or b'f' or b't' or b'\\\\' or b'b'",
          "norm": null,
          "value": "true",
          "line": 1031,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        10,
        11,
        21,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}