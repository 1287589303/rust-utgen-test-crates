{
  "name": "serde_json::value::{impl#0}::fmt",
  "mod_info": {
    "name": "value",
    "loc": "src/lib.rs:426:1:426:15"
  },
  "visible": true,
  "loc": "src/value/mod.rs:179:5:194:6",
  "doc": "",
  "code": [
    "fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {",
    "    match self {",
    "        Value::Null => formatter.write_str(\"Null\"),",
    "        Value::Bool(boolean) => write!(formatter, \"Bool({})\", boolean),",
    "        Value::Number(number) => Debug::fmt(number, formatter),",
    "        Value::String(string) => write!(formatter, \"String({:?})\", string),",
    "        Value::Array(vec) => {",
    "            tri!(formatter.write_str(\"Array \"));",
    "            Debug::fmt(vec, formatter)",
    "        }",
    "        Value::Object(map) => {",
    "            tri!(formatter.write_str(\"Object \"));",
    "            Debug::fmt(map, formatter)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "formatter.write_str(\"Object \") matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 190,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        7,
        27,
        30,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Value::Object(map)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "formatter.write_str(\"Object \") matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 190,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        27,
        29,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self matches Value::Array(vec)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "self matches Value::Array(vec)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "formatter.write_str(\"Array \") matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        6,
        20,
        21,
        24,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self matches Value::Array(vec)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "self matches Value::Array(vec)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "formatter.write_str(\"Array \") matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        20,
        21,
        23,
        25,
        26,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self matches Value::String(string)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "self matches Value::String(string)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        16,
        17,
        18,
        19,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self matches Value::Number(number)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "self matches Value::Number(number)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        14,
        15,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self matches Value::Bool(boolean)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "self matches Value::Bool(boolean)",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        10,
        11,
        12,
        13,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self matches Value::Null",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        },
        {
          "cond": "self matches Value::Null",
          "norm": null,
          "value": "true",
          "line": 180,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        33
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}