{
  "name": "serde_json::value::ser::{impl#6}::serialize_value",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:417:5:435:6",
  "doc": "",
  "code": [
    "fn serialize_value<T>(&mut self, value: &T) -> Result<()>",
    "where",
    "    T: ?Sized + Serialize,",
    "{",
    "    match self {",
    "        SerializeMap::Map { map, next_key } => {",
    "            let key = next_key.take();",
    "            // Panic because this indicates a bug in the program rather than an",
    "            // expected failure.",
    "            let key = key.expect(\"serialize_value called before serialize_key\");",
    "            map.insert(key, tri!(to_value(value)));",
    "            Ok(())",
    "        }",
    "        #[cfg(feature = \"arbitrary_precision\")]",
    "        SerializeMap::Number { .. } => unreachable!(),",
    "        #[cfg(feature = \"raw_value\")]",
    "        SerializeMap::RawValue { .. } => unreachable!(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "to_value(value) matches core::result::Result::Err(err)",
          "norm": null,
          "value": "true",
          "line": 427,
          "bound": null
        }
      ],
      "ret": "core::result::Result::Err(err)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "to_value(value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 427,
          "bound": null
        },
        {
          "cond": "to_value(value) matches core::result::Result::Ok(val)",
          "norm": null,
          "value": "true",
          "line": 427,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        10,
        11,
        12,
        13,
        14,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}