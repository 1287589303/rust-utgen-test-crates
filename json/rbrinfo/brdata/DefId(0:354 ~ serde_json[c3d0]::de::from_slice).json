{
  "name": "serde_json::de::from_slice",
  "mod_info": {
    "name": "de",
    "loc": "src/lib.rs:418:1:418:12"
  },
  "visible": true,
  "loc": "src/de.rs:2655:1:2660:2",
  "doc": "/// Deserialize an instance of type `T` from bytes of JSON text.\n///\n/// # Example\n///\n/// ```\n/// use serde::Deserialize;\n///\n/// #[derive(Deserialize, Debug)]\n/// struct User {\n///     fingerprint: String,\n///     location: String,\n/// }\n///\n/// fn main() {\n///     // The type of `j` is `&[u8]`\n///     let j = b\"\n///         {\n///             \\\"fingerprint\\\": \\\"0xF9BA143B95FF6D82\\\",\n///             \\\"location\\\": \\\"Menlo Park, CA\\\"\n///         }\";\n///\n///     let u: User = serde_json::from_slice(j).unwrap();\n///     println!(\"{:#?}\", u);\n/// }\n/// ```\n///\n/// # Errors\n///\n/// This conversion can fail if the structure of the input does not match the\n/// structure expected by `T`, for example if `T` is a struct type but the input\n/// contains something other than a JSON map. It can also fail if the structure\n/// is correct but `T`'s implementation of `Deserialize` decides that something\n/// is wrong with the data, for example required struct fields are missing from\n/// the JSON map or some number is too big to fit in the expected primitive\n/// type.\n",
  "code": [
    "pub fn from_slice<'a, T>(v: &'a [u8]) -> Result<T>",
    "where",
    "    T: de::Deserialize<'a>,",
    "{",
    "    from_trait(read::SliceRead::new(v))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}