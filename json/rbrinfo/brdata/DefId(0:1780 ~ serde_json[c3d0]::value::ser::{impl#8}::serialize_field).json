{
  "name": "serde_json::value::ser::{impl#8}::serialize_field",
  "mod_info": {
    "name": "value::ser",
    "loc": "src/value/mod.rs:931:1:931:9"
  },
  "visible": true,
  "loc": "src/value/ser.rs:654:5:679:6",
  "doc": "",
  "code": [
    "fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>",
    "where",
    "    T: ?Sized + Serialize,",
    "{",
    "    match self {",
    "        SerializeMap::Map { .. } => serde::ser::SerializeMap::serialize_entry(self, key, value),",
    "        #[cfg(feature = \"arbitrary_precision\")]",
    "        SerializeMap::Number { out_value } => {",
    "            if key == crate::number::TOKEN {",
    "                *out_value = Some(tri!(value.serialize(NumberValueEmitter)));",
    "                Ok(())",
    "            } else {",
    "                Err(invalid_number())",
    "            }",
    "        }",
    "        #[cfg(feature = \"raw_value\")]",
    "        SerializeMap::RawValue { out_value } => {",
    "            if key == crate::raw::TOKEN {",
    "                *out_value = Some(tri!(value.serialize(RawValueEmitter)));",
    "                Ok(())",
    "            } else {",
    "                Err(invalid_raw_value())",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}