{
  "name": "serde_json::error::{impl#0}::io_error_kind",
  "mod_info": {
    "name": "error",
    "loc": "src/lib.rs:419:1:419:15"
  },
  "visible": true,
  "loc": "src/error.rs:155:5:161:6",
  "doc": "/// The kind reported by the underlying standard library I/O error, if this\n/// error was caused by a failure to read or write bytes on an I/O stream.\n///\n/// # Example\n///\n/// ```\n/// use serde_json::Value;\n/// use std::io::{self, ErrorKind, Read};\n/// use std::process;\n///\n/// struct ReaderThatWillTimeOut<'a>(&'a [u8]);\n///\n/// impl<'a> Read for ReaderThatWillTimeOut<'a> {\n///     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n///         if self.0.is_empty() {\n///             Err(io::Error::new(ErrorKind::TimedOut, \"timed out\"))\n///         } else {\n///             self.0.read(buf)\n///         }\n///     }\n/// }\n///\n/// fn main() {\n///     let reader = ReaderThatWillTimeOut(br#\" {\"k\": \"#);\n///\n///     let _: Value = match serde_json::from_reader(reader) {\n///         Ok(value) => value,\n///         Err(error) => {\n///             if error.io_error_kind() == Some(ErrorKind::TimedOut) {\n///                 // Maybe this application needs to retry certain kinds of errors.\n///\n///                 # return;\n///             } else {\n///                 eprintln!(\"error: {}\", error);\n///                 process::exit(1);\n///             }\n///         }\n///     };\n/// }\n/// ```\n",
  "code": [
    "pub fn io_error_kind(&self) -> Option<ErrorKind> {",
    "    if let ErrorCode::Io(io_error) = &self.err.code {",
    "        Some(io_error.kind())",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let ErrorCode::Io(io_error) = &self.err.code",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let ErrorCode::Io(io_error) = &self.err.code",
          "norm": null,
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Some(io_error.kind())",
      "path": [
        0,
        1,
        2,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}