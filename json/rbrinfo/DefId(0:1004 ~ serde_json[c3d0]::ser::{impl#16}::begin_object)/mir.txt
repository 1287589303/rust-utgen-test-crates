bb0
  0: _3 = AddWithOverflow(((*_1).0: usize), const 1_usize)
    SourceInfo(src/ser.rs:2034:9-2034:33)
  Terminator {
      source_info: SourceInfo(src/ser.rs:2034:9-2034:33)
      kind: assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: ((*_1).0: usize) = move (_3.0: usize)
    SourceInfo(src/ser.rs:2034:9-2034:33)
  1: ((*_1).1: bool) = const false
    SourceInfo(src/ser.rs:2035:9-2035:31)
  2: StorageLive(_4)
    SourceInfo(src/ser.rs:2036:9-2036:15)
  3: _4 = &mut (*_2)
    SourceInfo(src/ser.rs:2036:9-2036:15)
  4: StorageLive(_5)
    SourceInfo(src/ser.rs:2036:26-2036:30)
  5: StorageLive(_6)
    SourceInfo(src/ser.rs:2036:26-2036:30)
  6: StorageLive(_7)
    SourceInfo(src/ser.rs:2036:26-2036:30)
  7: _7 = const b"{"
    SourceInfo(src/ser.rs:2036:26-2036:30)
  8: _6 = &(*_7)
    SourceInfo(src/ser.rs:2036:26-2036:30)
  9: _5 = move _6 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(src/ser.rs:2036:26-2036:30)
  10: StorageDead(_6)
    SourceInfo(src/ser.rs:2036:29-2036:30)
  Terminator {
      source_info: SourceInfo(src/ser.rs:2036:9-2036:31)
      kind: _0 = <W as std::io::Write>::write_all(move _4, move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(src/ser.rs:2036:30-2036:31)
  1: StorageDead(_4)
    SourceInfo(src/ser.rs:2036:30-2036:31)
  2: StorageDead(_7)
    SourceInfo(src/ser.rs:2037:5-2037:6)
  Terminator {
      source_info: SourceInfo(src/ser.rs:2037:6-2037:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/ser.rs:2030:5-2037:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

