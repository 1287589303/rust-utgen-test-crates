bb0
  0: StorageLive(_5)
    SourceInfo(src/read.rs:1076:9-1076:10)
  1: StorageLive(_6)
    SourceInfo(src/read.rs:1076:13-1076:29)
  2: StorageLive(_7)
    SourceInfo(src/read.rs:1076:13-1076:17)
  3: _7 = const {alloc42: &[i16; 256]}
    SourceInfo(src/read.rs:1076:13-1076:17)
  4: StorageLive(_8)
    SourceInfo(src/read.rs:1076:18-1076:28)
  5: StorageLive(_9)
    SourceInfo(src/read.rs:1076:18-1076:19)
  6: _9 = _1
    SourceInfo(src/read.rs:1076:18-1076:19)
  7: _8 = move _9 as usize (IntToInt)
    SourceInfo(src/read.rs:1076:18-1076:28)
  8: StorageDead(_9)
    SourceInfo(src/read.rs:1076:27-1076:28)
  9: _10 = Len((*_7))
    SourceInfo(src/read.rs:1076:13-1076:29)
  10: _11 = Lt(_8, _10)
    SourceInfo(src/read.rs:1076:13-1076:29)
  Terminator {
      source_info: SourceInfo(src/read.rs:1076:13-1076:29)
      kind: assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _8) -> [success: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: _6 = (*_7)[_8]
    SourceInfo(src/read.rs:1076:13-1076:29)
  1: _5 = move _6 as i32 (IntToInt)
    SourceInfo(src/read.rs:1076:13-1076:36)
  2: StorageDead(_6)
    SourceInfo(src/read.rs:1076:35-1076:36)
  3: FakeRead(ForLet(None), _5)
    SourceInfo(src/read.rs:1076:9-1076:10)
  4: StorageDead(_8)
    SourceInfo(src/read.rs:1076:36-1076:37)
  5: StorageDead(_7)
    SourceInfo(src/read.rs:1076:36-1076:37)
  6: StorageLive(_12)
    SourceInfo(src/read.rs:1077:9-1077:10)
  7: StorageLive(_13)
    SourceInfo(src/read.rs:1077:13-1077:29)
  8: StorageLive(_14)
    SourceInfo(src/read.rs:1077:13-1077:17)
  9: _14 = const {alloc43: &[i16; 256]}
    SourceInfo(src/read.rs:1077:13-1077:17)
  10: StorageLive(_15)
    SourceInfo(src/read.rs:1077:18-1077:28)
  11: StorageLive(_16)
    SourceInfo(src/read.rs:1077:18-1077:19)
  12: _16 = _2
    SourceInfo(src/read.rs:1077:18-1077:19)
  13: _15 = move _16 as usize (IntToInt)
    SourceInfo(src/read.rs:1077:18-1077:28)
  14: StorageDead(_16)
    SourceInfo(src/read.rs:1077:27-1077:28)
  15: _17 = Len((*_14))
    SourceInfo(src/read.rs:1077:13-1077:29)
  16: _18 = Lt(_15, _17)
    SourceInfo(src/read.rs:1077:13-1077:29)
  Terminator {
      source_info: SourceInfo(src/read.rs:1077:13-1077:29)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _15) -> [success: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: _13 = (*_14)[_15]
    SourceInfo(src/read.rs:1077:13-1077:29)
  1: _12 = move _13 as i32 (IntToInt)
    SourceInfo(src/read.rs:1077:13-1077:36)
  2: StorageDead(_13)
    SourceInfo(src/read.rs:1077:35-1077:36)
  3: FakeRead(ForLet(None), _12)
    SourceInfo(src/read.rs:1077:9-1077:10)
  4: StorageDead(_15)
    SourceInfo(src/read.rs:1077:36-1077:37)
  5: StorageDead(_14)
    SourceInfo(src/read.rs:1077:36-1077:37)
  6: StorageLive(_19)
    SourceInfo(src/read.rs:1078:9-1078:10)
  7: StorageLive(_20)
    SourceInfo(src/read.rs:1078:13-1078:29)
  8: StorageLive(_21)
    SourceInfo(src/read.rs:1078:13-1078:17)
  9: _21 = const {alloc42: &[i16; 256]}
    SourceInfo(src/read.rs:1078:13-1078:17)
  10: StorageLive(_22)
    SourceInfo(src/read.rs:1078:18-1078:28)
  11: StorageLive(_23)
    SourceInfo(src/read.rs:1078:18-1078:19)
  12: _23 = _3
    SourceInfo(src/read.rs:1078:18-1078:19)
  13: _22 = move _23 as usize (IntToInt)
    SourceInfo(src/read.rs:1078:18-1078:28)
  14: StorageDead(_23)
    SourceInfo(src/read.rs:1078:27-1078:28)
  15: _24 = Len((*_21))
    SourceInfo(src/read.rs:1078:13-1078:29)
  16: _25 = Lt(_22, _24)
    SourceInfo(src/read.rs:1078:13-1078:29)
  Terminator {
      source_info: SourceInfo(src/read.rs:1078:13-1078:29)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _22) -> [success: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: _20 = (*_21)[_22]
    SourceInfo(src/read.rs:1078:13-1078:29)
  1: _19 = move _20 as i32 (IntToInt)
    SourceInfo(src/read.rs:1078:13-1078:36)
  2: StorageDead(_20)
    SourceInfo(src/read.rs:1078:35-1078:36)
  3: FakeRead(ForLet(None), _19)
    SourceInfo(src/read.rs:1078:9-1078:10)
  4: StorageDead(_22)
    SourceInfo(src/read.rs:1078:36-1078:37)
  5: StorageDead(_21)
    SourceInfo(src/read.rs:1078:36-1078:37)
  6: StorageLive(_26)
    SourceInfo(src/read.rs:1079:9-1079:10)
  7: StorageLive(_27)
    SourceInfo(src/read.rs:1079:13-1079:29)
  8: StorageLive(_28)
    SourceInfo(src/read.rs:1079:13-1079:17)
  9: _28 = const {alloc43: &[i16; 256]}
    SourceInfo(src/read.rs:1079:13-1079:17)
  10: StorageLive(_29)
    SourceInfo(src/read.rs:1079:18-1079:28)
  11: StorageLive(_30)
    SourceInfo(src/read.rs:1079:18-1079:19)
  12: _30 = _4
    SourceInfo(src/read.rs:1079:18-1079:19)
  13: _29 = move _30 as usize (IntToInt)
    SourceInfo(src/read.rs:1079:18-1079:28)
  14: StorageDead(_30)
    SourceInfo(src/read.rs:1079:27-1079:28)
  15: _31 = Len((*_28))
    SourceInfo(src/read.rs:1079:13-1079:29)
  16: _32 = Lt(_29, _31)
    SourceInfo(src/read.rs:1079:13-1079:29)
  Terminator {
      source_info: SourceInfo(src/read.rs:1079:13-1079:29)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _29) -> [success: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: _27 = (*_28)[_29]
    SourceInfo(src/read.rs:1079:13-1079:29)
  1: _26 = move _27 as i32 (IntToInt)
    SourceInfo(src/read.rs:1079:13-1079:36)
  2: StorageDead(_27)
    SourceInfo(src/read.rs:1079:35-1079:36)
  3: FakeRead(ForLet(None), _26)
    SourceInfo(src/read.rs:1079:9-1079:10)
  4: StorageDead(_29)
    SourceInfo(src/read.rs:1079:36-1079:37)
  5: StorageDead(_28)
    SourceInfo(src/read.rs:1079:36-1079:37)
  6: StorageLive(_33)
    SourceInfo(src/read.rs:1081:9-1081:18)
  7: StorageLive(_34)
    SourceInfo(src/read.rs:1081:21-1081:39)
  8: StorageLive(_35)
    SourceInfo(src/read.rs:1081:21-1081:35)
  9: StorageLive(_36)
    SourceInfo(src/read.rs:1081:22-1081:29)
  10: StorageLive(_37)
    SourceInfo(src/read.rs:1081:23-1081:24)
  11: _37 = _5
    SourceInfo(src/read.rs:1081:23-1081:24)
  12: StorageLive(_38)
    SourceInfo(src/read.rs:1081:27-1081:28)
  13: _38 = _12
    SourceInfo(src/read.rs:1081:27-1081:28)
  14: _36 = BitOr(move _37, move _38)
    SourceInfo(src/read.rs:1081:22-1081:29)
  15: StorageDead(_38)
    SourceInfo(src/read.rs:1081:28-1081:29)
  16: StorageDead(_37)
    SourceInfo(src/read.rs:1081:28-1081:29)
  17: _39 = const 8_i32 as u32 (IntToInt)
    SourceInfo(src/read.rs:1081:21-1081:35)
  18: _40 = Lt(move _39, const 32_u32)
    SourceInfo(src/read.rs:1081:21-1081:35)
  Terminator {
      source_info: SourceInfo(src/read.rs:1081:21-1081:35)
      kind: assert(move _40, "attempt to shift left by `{}`, which would overflow", const 8_i32) -> [success: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _35 = Shl(move _36, const 8_i32)
    SourceInfo(src/read.rs:1081:21-1081:35)
  1: StorageDead(_36)
    SourceInfo(src/read.rs:1081:34-1081:35)
  2: StorageLive(_41)
    SourceInfo(src/read.rs:1081:38-1081:39)
  3: _41 = _19
    SourceInfo(src/read.rs:1081:38-1081:39)
  4: _34 = BitOr(move _35, move _41)
    SourceInfo(src/read.rs:1081:21-1081:39)
  5: StorageDead(_41)
    SourceInfo(src/read.rs:1081:38-1081:39)
  6: StorageDead(_35)
    SourceInfo(src/read.rs:1081:38-1081:39)
  7: StorageLive(_42)
    SourceInfo(src/read.rs:1081:42-1081:43)
  8: _42 = _26
    SourceInfo(src/read.rs:1081:42-1081:43)
  9: _33 = BitOr(move _34, move _42)
    SourceInfo(src/read.rs:1081:21-1081:43)
  10: StorageDead(_42)
    SourceInfo(src/read.rs:1081:42-1081:43)
  11: StorageDead(_34)
    SourceInfo(src/read.rs:1081:42-1081:43)
  12: FakeRead(ForLet(None), _33)
    SourceInfo(src/read.rs:1081:9-1081:18)
  13: StorageLive(_43)
    SourceInfo(src/read.rs:1084:8-1084:22)
  14: StorageLive(_44)
    SourceInfo(src/read.rs:1084:8-1084:17)
  15: _44 = _33
    SourceInfo(src/read.rs:1084:8-1084:17)
  16: _43 = Ge(move _44, const 0_i32)
    SourceInfo(src/read.rs:1084:8-1084:22)
  Terminator {
      source_info: SourceInfo(src/read.rs:1084:8-1084:22)
      kind: switchInt(move _43) -> [0: bb7, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_44)
    SourceInfo(src/read.rs:1084:21-1084:22)
  1: StorageLive(_45)
    SourceInfo(src/read.rs:1085:14-1085:30)
  2: StorageLive(_46)
    SourceInfo(src/read.rs:1085:14-1085:23)
  3: _46 = _33
    SourceInfo(src/read.rs:1085:14-1085:23)
  4: _45 = move _46 as u16 (IntToInt)
    SourceInfo(src/read.rs:1085:14-1085:30)
  5: StorageDead(_46)
    SourceInfo(src/read.rs:1085:29-1085:30)
  6: _0 = core::option::Option::<u16>::Some(move _45)
    SourceInfo(src/read.rs:1085:9-1085:31)
  7: StorageDead(_45)
    SourceInfo(src/read.rs:1085:30-1085:31)
  Terminator {
      source_info: SourceInfo(src/read.rs:1084:5-1088:6)
      kind: goto -> bb8
  }
  preds [bb5]
  succs [bb8]

bb7
  0: StorageDead(_44)
    SourceInfo(src/read.rs:1084:21-1084:22)
  1: _0 = core::option::Option::<u16>::None
    SourceInfo(src/read.rs:1087:9-1087:13)
  Terminator {
      source_info: SourceInfo(src/read.rs:1084:5-1088:6)
      kind: goto -> bb8
  }
  preds [bb5]
  succs [bb8]

bb8
  0: StorageDead(_43)
    SourceInfo(src/read.rs:1088:5-1088:6)
  1: StorageDead(_33)
    SourceInfo(src/read.rs:1089:1-1089:2)
  2: StorageDead(_26)
    SourceInfo(src/read.rs:1089:1-1089:2)
  3: StorageDead(_19)
    SourceInfo(src/read.rs:1089:1-1089:2)
  4: StorageDead(_12)
    SourceInfo(src/read.rs:1089:1-1089:2)
  5: StorageDead(_5)
    SourceInfo(src/read.rs:1089:1-1089:2)
  Terminator {
      source_info: SourceInfo(src/read.rs:1089:2-1089:2)
      kind: return
  }
  preds [bb6, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/read.rs:1075:1-1089:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

