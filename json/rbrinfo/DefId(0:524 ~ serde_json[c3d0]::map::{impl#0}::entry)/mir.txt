bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:283:15-283:41)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:283:15-283:23)
  2: _4 = &mut ((*_1).0: alloc::collections::BTreeMap<alloc::string::String, value::Value>)
    SourceInfo(src/map.rs:283:15-283:23)
  3: StorageLive(_5)
    SourceInfo(src/map.rs:283:30-283:40)
  4: StorageLive(_6)
    SourceInfo(src/map.rs:283:30-283:33)
  5: _6 = move _2
    SourceInfo(src/map.rs:283:30-283:33)
  Terminator {
      source_info: SourceInfo(src/map.rs:283:30-283:40)
      kind: _5 = <S as core::convert::Into<alloc::string::String>>::into(move _6) -> [return: bb1, unwind: bb17]
  }
  preds []
  succs [bb1, bb17]

bb1
  0: StorageDead(_6)
    SourceInfo(src/map.rs:283:39-283:40)
  Terminator {
      source_info: SourceInfo(src/map.rs:283:15-283:41)
      kind: _3 = alloc::collections::BTreeMap::<alloc::string::String, value::Value>::entry(move _4, move _5) -> [return: bb2, unwind: bb16]
  }
  preds [bb0]
  succs [bb2, bb16]

bb2
  0: StorageDead(_5)
    SourceInfo(src/map.rs:283:40-283:41)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:283:40-283:41)
  2: PlaceMention(_3)
    SourceInfo(src/map.rs:283:15-283:41)
  3: _7 = discriminant(_3)
    SourceInfo(src/map.rs:283:15-283:41)
  Terminator {
      source_info: SourceInfo(src/map.rs:283:9-283:41)
      kind: switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(src/map.rs:283:15-283:41)
  Terminator {
      source_info: SourceInfo(src/map.rs:283:15-283:41)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:284:13-284:38)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_11)
    SourceInfo(src/map.rs:285:33-285:41)
  1: _11 = move ((_3 as Occupied).0: alloc::collections::btree_map::OccupiedEntry<'_, alloc::string::String, value::Value>)
    SourceInfo(src/map.rs:285:33-285:41)
  2: StorageLive(_12)
    SourceInfo(src/map.rs:285:62-285:88)
  3: StorageLive(_13)
    SourceInfo(src/map.rs:285:78-285:86)
  4: _13 = move _11
    SourceInfo(src/map.rs:285:78-285:86)
  5: _12 = map::OccupiedEntry::<'_> { occupied: move _13 }
    SourceInfo(src/map.rs:285:62-285:88)
  6: StorageDead(_13)
    SourceInfo(src/map.rs:285:87-285:88)
  7: _0 = map::Entry::<'_>::Occupied(move _12)
    SourceInfo(src/map.rs:285:46-285:89)
  8: StorageDead(_12)
    SourceInfo(src/map.rs:285:88-285:89)
  9: StorageDead(_11)
    SourceInfo(src/map.rs:285:88-285:89)
  Terminator {
      source_info: SourceInfo(src/map.rs:285:88-285:89)
      kind: goto -> bb10
  }
  preds [bb2, bb4]
  succs [bb10]

bb6
  0: StorageLive(_8)
    SourceInfo(src/map.rs:284:31-284:37)
  1: _8 = move ((_3 as Vacant).0: alloc::collections::btree_map::VacantEntry<'_, alloc::string::String, value::Value>)
    SourceInfo(src/map.rs:284:31-284:37)
  2: StorageLive(_9)
    SourceInfo(src/map.rs:284:56-284:78)
  3: StorageLive(_10)
    SourceInfo(src/map.rs:284:70-284:76)
  4: _10 = move _8
    SourceInfo(src/map.rs:284:70-284:76)
  5: _9 = map::VacantEntry::<'_> { vacant: move _10 }
    SourceInfo(src/map.rs:284:56-284:78)
  Terminator {
      source_info: SourceInfo(src/map.rs:284:77-284:78)
      kind: drop(_10) -> [return: bb7, unwind: bb13]
  }
  preds [bb4]
  succs [bb7, bb13]

bb7
  0: StorageDead(_10)
    SourceInfo(src/map.rs:284:77-284:78)
  1: _0 = map::Entry::<'_>::Vacant(move _9)
    SourceInfo(src/map.rs:284:42-284:79)
  Terminator {
      source_info: SourceInfo(src/map.rs:284:78-284:79)
      kind: drop(_9) -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: StorageDead(_9)
    SourceInfo(src/map.rs:284:78-284:79)
  Terminator {
      source_info: SourceInfo(src/map.rs:284:78-284:79)
      kind: drop(_8) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageDead(_8)
    SourceInfo(src/map.rs:284:78-284:79)
  Terminator {
      source_info: SourceInfo(src/map.rs:284:78-284:79)
      kind: goto -> bb10
  }
  preds [bb8]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/map.rs:287:5-287:6)
      kind: drop(_3) -> [return: bb11, unwind: bb18]
  }
  preds [bb5, bb9]
  succs [bb11, bb18]

bb11
  0: StorageDead(_3)
    SourceInfo(src/map.rs:287:5-287:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:287:5-287:6)
      kind: drop(_2) -> [return: bb12, unwind: bb19]
  }
  preds [bb10]
  succs [bb12, bb19]

bb12
  Terminator {
      source_info: SourceInfo(src/map.rs:287:6-287:6)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(src/map.rs:284:78-284:79)
      kind: drop(_9) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/map.rs:284:78-284:79)
      kind: drop(_8) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb7, bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/map.rs:287:5-287:6)
      kind: drop(_3) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb8, bb14]
  succs [bb18]

bb16
  Terminator {
      source_info: SourceInfo(src/map.rs:283:40-283:41)
      kind: drop(_5) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb18]

bb17
  Terminator {
      source_info: SourceInfo(src/map.rs:283:39-283:40)
      kind: drop(_6) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/map.rs:287:5-287:6)
      kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb10, bb15, bb16, bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/map.rs:274:5-287:6)
      kind: resume
  }
  preds [bb11, bb18]
  succs []

