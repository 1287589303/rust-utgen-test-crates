bb0
  0: StorageLive(_2)
    SourceInfo(src/ser.rs:201:9-202:42)
  1: StorageLive(_3)
    SourceInfo(src/ser.rs:201:9-201:23)
  2: _3 = &mut ((*_1).1: F)
    SourceInfo(src/ser.rs:201:9-201:23)
  3: StorageLive(_4)
    SourceInfo(src/ser.rs:202:25-202:41)
  4: StorageLive(_5)
    SourceInfo(src/ser.rs:202:25-202:41)
  5: _5 = &mut ((*_1).0: W)
    SourceInfo(src/ser.rs:202:25-202:41)
  6: _4 = &mut (*_5)
    SourceInfo(src/ser.rs:202:25-202:41)
  Terminator {
      source_info: SourceInfo(src/ser.rs:201:9-202:42)
      kind: _2 = <F as ser::Formatter>::write_null::<W>(move _3, move _4) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_4)
    SourceInfo(src/ser.rs:202:41-202:42)
  1: StorageDead(_3)
    SourceInfo(src/ser.rs:202:41-202:42)
  Terminator {
      source_info: SourceInfo(src/ser.rs:201:9-203:32)
      kind: _0 = core::result::Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {error::Error::io}>(move _2, error::Error::io) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_2)
    SourceInfo(src/ser.rs:203:31-203:32)
  1: StorageDead(_5)
    SourceInfo(src/ser.rs:204:5-204:6)
  Terminator {
      source_info: SourceInfo(src/ser.rs:204:6-204:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/ser.rs:203:31-203:32)
      kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/ser.rs:200:5-204:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

