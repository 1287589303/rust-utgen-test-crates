{
  "src/read.rs:473:30:474:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "unsafe { chunk.as_ptr().offset_from(self.slice.as_ptr()) } as usize\n                    + masked.trailing_zeros() as usize / 8",
          "lhs": "unsafe { chunk.as_ptr().offset_from(self.slice.as_ptr()) } as usize",
          "rhs": "masked.trailing_zeros() as usize / 8",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:463:22:463:45": [
    {
      "For": {
        "iter_var": "chunk",
        "iter_range": "rest.chunks_exact(STEP)"
      }
    }
  ],
  "src/read.rs:465:33:465:78": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chars.wrapping_sub(ONE_BYTES * 0x20) & !chars",
          "lhs": "chars.wrapping_sub(ONE_BYTES * 0x20)",
          "rhs": "!chars",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:470:26:470:98": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(contains_ctrl | contains_quote | contains_backslash) & (ONE_BYTES << 7)",
          "lhs": "(contains_ctrl | contains_quote | contains_backslash)",
          "rhs": "(ONE_BYTES << 7)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:467:34:467:84": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chars_quote.wrapping_sub(ONE_BYTES) & !chars_quote",
          "lhs": "chars_quote.wrapping_sub(ONE_BYTES)",
          "rhs": "!chars_quote",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:468:35:468:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chars ^ (ONE_BYTES * Chunk::from(b'\\\\'))",
          "lhs": "chars",
          "rhs": "(ONE_BYTES * Chunk::from(b'\\\\'))",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:474:23:474:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "masked.trailing_zeros() as usize / 8",
          "lhs": "masked.trailing_zeros() as usize",
          "rhs": "8",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/read.rs:470:26:470:79": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(contains_ctrl | contains_quote | contains_backslash)",
          "lhs": "contains_ctrl | contains_quote",
          "rhs": "contains_backslash",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:435:16:435:76": [
    {
      "Bool": {
        "Other": "is_escape(self.slice[self.index], forbid_control_characters)"
      }
    }
  ],
  "src/read.rs:479:23:479:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "rest.len() / STEP",
          "lhs": "rest.len()",
          "rhs": "STEP",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:465:52:465:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "ONE_BYTES * 0x20",
          "lhs": "ONE_BYTES",
          "rhs": "0x20",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/read.rs:470:82:470:98": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(ONE_BYTES << 7)",
          "lhs": "ONE_BYTES",
          "rhs": "7",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/read.rs:443:13:443:38": [
    {
      "Bool": {
        "Other": "forbid_control_characters"
      }
    }
  ],
  "src/read.rs:471:16:471:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "masked != 0",
          "lhs": "masked",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/read.rs:470:27:470:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "contains_ctrl | contains_quote",
          "lhs": "contains_ctrl",
          "rhs": "contains_quote",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:434:12:434:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.index == self.slice.len()",
          "lhs": "self.index",
          "rhs": "self.slice.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:469:38:469:96": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chars_backslash.wrapping_sub(ONE_BYTES) & !chars_backslash",
          "lhs": "chars_backslash.wrapping_sub(ONE_BYTES)",
          "rhs": "!chars_backslash",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:466:31:466:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chars ^ (ONE_BYTES * Chunk::from(b'\"'))",
          "lhs": "chars",
          "rhs": "(ONE_BYTES * Chunk::from(b'\"'))",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:468:43:468:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(ONE_BYTES * Chunk::from(b'\\\\'))",
          "lhs": "ONE_BYTES",
          "rhs": "Chunk::from(b'\\\\')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:479:23:479:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "rest.len() / STEP * STEP",
          "lhs": "rest.len() / STEP",
          "rhs": "STEP",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/read.rs:466:39:466:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(ONE_BYTES * Chunk::from(b'\"'))",
          "lhs": "ONE_BYTES",
          "rhs": "Chunk::from(b'\"')",
          "cmp_with_int": false
        }
      }
    }
  ]
}