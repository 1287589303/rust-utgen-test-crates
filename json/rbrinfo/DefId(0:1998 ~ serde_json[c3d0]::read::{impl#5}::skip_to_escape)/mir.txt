bb0
  0: StorageLive(_3)
    SourceInfo(src/read.rs:434:9-438:10)
  1: StorageLive(_4)
    SourceInfo(src/read.rs:434:12-434:42)
  2: StorageLive(_5)
    SourceInfo(src/read.rs:434:12-434:22)
  3: _5 = ((*_1).1: usize)
    SourceInfo(src/read.rs:434:12-434:22)
  4: StorageLive(_6)
    SourceInfo(src/read.rs:434:26-434:42)
  5: StorageLive(_7)
    SourceInfo(src/read.rs:434:26-434:36)
  6: _7 = &(*((*_1).0: &[u8]))
    SourceInfo(src/read.rs:434:26-434:36)
  Terminator {
      source_info: SourceInfo(src/read.rs:434:26-434:42)
      kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb1, unwind: bb53]
  }
  preds []
  succs [bb1, bb53]

bb1
  0: StorageDead(_7)
    SourceInfo(src/read.rs:434:41-434:42)
  1: _4 = Eq(move _5, move _6)
    SourceInfo(src/read.rs:434:12-434:42)
  Terminator {
      source_info: SourceInfo(src/read.rs:434:12-434:42)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(src/read.rs:434:41-434:42)
  1: StorageDead(_5)
    SourceInfo(src/read.rs:434:41-434:42)
  Terminator {
      source_info: SourceInfo(src/read.rs:436:9-438:10)
      kind: goto -> bb7
  }
  preds [bb1]
  succs [bb7]

bb3
  0: StorageDead(_6)
    SourceInfo(src/read.rs:434:41-434:42)
  1: StorageDead(_5)
    SourceInfo(src/read.rs:434:41-434:42)
  2: StorageLive(_8)
    SourceInfo(src/read.rs:435:16-435:76)
  3: StorageLive(_9)
    SourceInfo(src/read.rs:435:26-435:48)
  4: StorageLive(_10)
    SourceInfo(src/read.rs:435:37-435:47)
  5: _10 = ((*_1).1: usize)
    SourceInfo(src/read.rs:435:37-435:47)
  6: _11 = Len((*((*_1).0: &[u8])))
    SourceInfo(src/read.rs:435:26-435:48)
  7: _12 = Lt(_10, _11)
    SourceInfo(src/read.rs:435:26-435:48)
  Terminator {
      source_info: SourceInfo(src/read.rs:435:26-435:48)
      kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind: bb53]
  }
  preds [bb1]
  succs [bb4, bb53]

bb4
  0: _9 = (*((*_1).0: &[u8]))[_10]
    SourceInfo(src/read.rs:435:26-435:48)
  1: StorageLive(_13)
    SourceInfo(src/read.rs:435:50-435:75)
  2: _13 = _2
    SourceInfo(src/read.rs:435:50-435:75)
  Terminator {
      source_info: SourceInfo(src/read.rs:435:16-435:76)
      kind: _8 = read::is_escape(move _9, move _13) -> [return: bb5, unwind: bb53]
  }
  preds [bb3]
  succs [bb5, bb53]

bb5
  Terminator {
      source_info: SourceInfo(src/read.rs:435:16-435:76)
      kind: switchInt(move _8) -> [0: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_13)
    SourceInfo(src/read.rs:435:75-435:76)
  1: StorageDead(_10)
    SourceInfo(src/read.rs:435:75-435:76)
  2: StorageDead(_9)
    SourceInfo(src/read.rs:435:75-435:76)
  Terminator {
      source_info: SourceInfo(src/read.rs:436:9-438:10)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  0: _0 = const ()
    SourceInfo(src/read.rs:437:13-437:19)
  1: StorageDead(_8)
    SourceInfo(src/read.rs:438:9-438:10)
  2: StorageDead(_4)
    SourceInfo(src/read.rs:438:9-438:10)
  3: StorageDead(_3)
    SourceInfo(src/read.rs:438:9-438:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb52
  }
  preds [bb2, bb6]
  succs [bb52]

bb8
  0: StorageDead(_13)
    SourceInfo(src/read.rs:435:75-435:76)
  1: StorageDead(_10)
    SourceInfo(src/read.rs:435:75-435:76)
  2: StorageDead(_9)
    SourceInfo(src/read.rs:435:75-435:76)
  3: _3 = const ()
    SourceInfo(src/read.rs:438:10-438:10)
  4: StorageDead(_8)
    SourceInfo(src/read.rs:438:9-438:10)
  5: StorageDead(_4)
    SourceInfo(src/read.rs:438:9-438:10)
  6: StorageDead(_3)
    SourceInfo(src/read.rs:438:9-438:10)
  7: _15 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(src/read.rs:439:9-439:24)
  Terminator {
      source_info: SourceInfo(src/read.rs:439:9-439:24)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb9, unwind: bb53]
  }
  preds [bb5]
  succs [bb9, bb53]

bb9
  0: ((*_1).1: usize) = move (_15.0: usize)
    SourceInfo(src/read.rs:439:9-439:24)
  1: StorageLive(_16)
    SourceInfo(src/read.rs:441:13-441:17)
  2: StorageLive(_17)
    SourceInfo(src/read.rs:441:31-441:45)
  3: StorageLive(_18)
    SourceInfo(src/read.rs:441:21-441:31)
  4: _18 = &(*((*_1).0: &[u8]))
    SourceInfo(src/read.rs:441:21-441:31)
  5: StorageLive(_19)
    SourceInfo(src/read.rs:441:32-441:44)
  6: StorageLive(_20)
    SourceInfo(src/read.rs:441:32-441:42)
  7: _20 = ((*_1).1: usize)
    SourceInfo(src/read.rs:441:32-441:42)
  8: _19 = core::ops::RangeFrom::<usize> { start: move _20 }
    SourceInfo(src/read.rs:441:32-441:44)
  9: StorageDead(_20)
    SourceInfo(src/read.rs:441:43-441:44)
  Terminator {
      source_info: SourceInfo(src/read.rs:441:31-441:45)
      kind: _17 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _18, move _19) -> [return: bb10, unwind: bb53]
  }
  preds [bb8]
  succs [bb10, bb53]

bb10
  0: StorageDead(_19)
    SourceInfo(src/read.rs:441:44-441:45)
  1: StorageDead(_18)
    SourceInfo(src/read.rs:441:44-441:45)
  2: _16 = &(*_17)
    SourceInfo(src/read.rs:441:20-441:45)
  3: FakeRead(ForLet(None), _16)
    SourceInfo(src/read.rs:441:13-441:17)
  4: StorageLive(_21)
    SourceInfo(src/read.rs:443:9-446:10)
  5: StorageLive(_22)
    SourceInfo(src/read.rs:443:13-443:38)
  6: _22 = _2
    SourceInfo(src/read.rs:443:13-443:38)
  Terminator {
      source_info: SourceInfo(src/read.rs:443:13-443:38)
      kind: switchInt(move _22) -> [0: bb11, otherwise: bb16]
  }
  preds [bb9]
  succs [bb11, bb16]

bb11
  0: StorageLive(_24)
    SourceInfo(src/read.rs:444:27-444:83)
  1: StorageLive(_25)
    SourceInfo(src/read.rs:444:27-444:61)
  2: StorageLive(_26)
    SourceInfo(src/read.rs:444:56-444:60)
  3: _26 = &(*_16)
    SourceInfo(src/read.rs:444:56-444:60)
  Terminator {
      source_info: SourceInfo(src/read.rs:444:27-444:61)
      kind: _25 = memchr::memchr2(const 34_u8, const 92_u8, move _26) -> [return: bb12, unwind: bb53]
  }
  preds [bb10]
  succs [bb12, bb53]

bb12
  0: StorageDead(_26)
    SourceInfo(src/read.rs:444:60-444:61)
  1: StorageLive(_27)
    SourceInfo(src/read.rs:444:72-444:82)
  2: StorageLive(_28)
    SourceInfo(src/read.rs:444:72-444:76)
  3: _28 = &(*_16)
    SourceInfo(src/read.rs:444:72-444:76)
  Terminator {
      source_info: SourceInfo(src/read.rs:444:72-444:82)
      kind: _27 = core::slice::<impl [u8]>::len(move _28) -> [return: bb13, unwind: bb53]
  }
  preds [bb11]
  succs [bb13, bb53]

bb13
  0: StorageDead(_28)
    SourceInfo(src/read.rs:444:81-444:82)
  Terminator {
      source_info: SourceInfo(src/read.rs:444:27-444:83)
      kind: _24 = core::option::Option::<usize>::unwrap_or(move _25, move _27) -> [return: bb14, unwind: bb53]
  }
  preds [bb12]
  succs [bb14, bb53]

bb14
  0: StorageDead(_27)
    SourceInfo(src/read.rs:444:82-444:83)
  1: StorageDead(_25)
    SourceInfo(src/read.rs:444:82-444:83)
  2: _29 = AddWithOverflow(((*_1).1: usize), _24)
    SourceInfo(src/read.rs:444:13-444:83)
  Terminator {
      source_info: SourceInfo(src/read.rs:444:13-444:83)
      kind: assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _24) -> [success: bb15, unwind: bb53]
  }
  preds [bb13]
  succs [bb15, bb53]

bb15
  0: ((*_1).1: usize) = move (_29.0: usize)
    SourceInfo(src/read.rs:444:13-444:83)
  1: StorageDead(_24)
    SourceInfo(src/read.rs:444:82-444:83)
  2: _0 = const ()
    SourceInfo(src/read.rs:445:13-445:19)
  3: StorageDead(_22)
    SourceInfo(src/read.rs:446:9-446:10)
  4: StorageDead(_21)
    SourceInfo(src/read.rs:446:9-446:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb51
  }
  preds [bb14]
  succs [bb51]

bb16
  0: _21 = const ()
    SourceInfo(src/read.rs:446:10-446:10)
  1: StorageDead(_22)
    SourceInfo(src/read.rs:446:9-446:10)
  2: StorageDead(_21)
    SourceInfo(src/read.rs:446:9-446:10)
  3: StorageLive(_30)
    SourceInfo(src/read.rs:463:9-477:10)
  4: StorageLive(_31)
    SourceInfo(src/read.rs:463:22-463:45)
  5: StorageLive(_32)
    SourceInfo(src/read.rs:463:22-463:45)
  6: StorageLive(_33)
    SourceInfo(src/read.rs:463:22-463:26)
  7: _33 = &(*_16)
    SourceInfo(src/read.rs:463:22-463:26)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:22-463:45)
      kind: _32 = core::slice::<impl [u8]>::chunks_exact(move _33, const read::SliceRead::<'a>::skip_to_escape::STEP) -> [return: bb17, unwind: bb53]
  }
  preds [bb10]
  succs [bb17, bb53]

bb17
  0: StorageDead(_33)
    SourceInfo(src/read.rs:463:44-463:45)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:22-463:45)
      kind: _31 = <core::slice::ChunksExact<'_, u8> as core::iter::IntoIterator>::into_iter(move _32) -> [return: bb18, unwind: bb53]
  }
  preds [bb16]
  succs [bb18, bb53]

bb18
  0: StorageDead(_32)
    SourceInfo(src/read.rs:463:44-463:45)
  1: PlaceMention(_31)
    SourceInfo(src/read.rs:463:22-463:45)
  2: StorageLive(_34)
    SourceInfo(src/read.rs:463:22-463:45)
  3: _34 = move _31
    SourceInfo(src/read.rs:463:22-463:45)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:9-477:10)
      kind: goto -> bb19
  }
  preds [bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/read.rs:463:9-477:10)
      kind: falseUnwind -> [real: bb20, unwind: bb53]
  }
  preds [bb18, bb45]
  succs [bb20, bb53]

bb20
  0: StorageLive(_36)
    SourceInfo(src/read.rs:463:22-463:45)
  1: StorageLive(_37)
    SourceInfo(src/read.rs:463:22-463:45)
  2: StorageLive(_38)
    SourceInfo(src/read.rs:463:22-463:45)
  3: StorageLive(_39)
    SourceInfo(src/read.rs:463:22-463:45)
  4: _39 = &mut _34
    SourceInfo(src/read.rs:463:22-463:45)
  5: _38 = &mut (*_39)
    SourceInfo(src/read.rs:463:22-463:45)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:22-463:45)
      kind: _37 = <core::slice::ChunksExact<'_, u8> as core::iter::Iterator>::next(move _38) -> [return: bb21, unwind: bb53]
  }
  preds [bb19]
  succs [bb21, bb53]

bb21
  0: StorageDead(_38)
    SourceInfo(src/read.rs:463:44-463:45)
  1: PlaceMention(_37)
    SourceInfo(src/read.rs:463:22-463:45)
  2: _40 = discriminant(_37)
    SourceInfo(src/read.rs:463:22-463:45)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:22-463:45)
      kind: switchInt(move _40) -> [0: bb23, 1: bb24, otherwise: bb22]
  }
  preds [bb20]
  succs [bb22, bb23, bb24]

bb22
  0: FakeRead(ForMatchedPlace(None), _37)
    SourceInfo(src/read.rs:463:22-463:45)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:22-463:45)
      kind: unreachable
  }
  preds [bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(src/read.rs:463:9-477:10)
      kind: falseEdge -> [real: bb25, imaginary: bb24]
  }
  preds [bb21]
  succs [bb24, bb25]

bb24
  0: StorageLive(_42)
    SourceInfo(src/read.rs:463:13-463:18)
  1: _42 = ((_37 as Some).0: &[u8])
    SourceInfo(src/read.rs:463:13-463:18)
  2: StorageLive(_43)
    SourceInfo(src/read.rs:464:17-464:22)
  3: StorageLive(_44)
    SourceInfo(src/read.rs:464:46-464:71)
  4: StorageLive(_45)
    SourceInfo(src/read.rs:464:46-464:62)
  5: StorageLive(_46)
    SourceInfo(src/read.rs:464:46-464:51)
  6: _46 = &(*_42)
    SourceInfo(src/read.rs:464:46-464:51)
  Terminator {
      source_info: SourceInfo(src/read.rs:464:46-464:62)
      kind: _45 = <&[u8] as core::convert::TryInto<[u8; 8]>>::try_into(move _46) -> [return: bb26, unwind: bb53]
  }
  preds [bb21, bb23]
  succs [bb26, bb53]

bb25
  0: _30 = const ()
    SourceInfo(src/read.rs:463:9-477:10)
  1: StorageDead(_39)
    SourceInfo(src/read.rs:477:9-477:10)
  2: StorageDead(_37)
    SourceInfo(src/read.rs:477:9-477:10)
  3: StorageDead(_36)
    SourceInfo(src/read.rs:477:9-477:10)
  4: StorageDead(_34)
    SourceInfo(src/read.rs:477:9-477:10)
  5: StorageDead(_31)
    SourceInfo(src/read.rs:477:9-477:10)
  6: StorageDead(_30)
    SourceInfo(src/read.rs:477:9-477:10)
  7: StorageLive(_98)
    SourceInfo(src/read.rs:479:23-479:47)
  8: StorageLive(_99)
    SourceInfo(src/read.rs:479:23-479:40)
  9: StorageLive(_100)
    SourceInfo(src/read.rs:479:23-479:33)
  10: StorageLive(_101)
    SourceInfo(src/read.rs:479:23-479:27)
  11: _101 = &(*_16)
    SourceInfo(src/read.rs:479:23-479:27)
  Terminator {
      source_info: SourceInfo(src/read.rs:479:23-479:33)
      kind: _100 = core::slice::<impl [u8]>::len(move _101) -> [return: bb46, unwind: bb53]
  }
  preds [bb23]
  succs [bb46, bb53]

bb26
  0: StorageDead(_46)
    SourceInfo(src/read.rs:464:61-464:62)
  Terminator {
      source_info: SourceInfo(src/read.rs:464:46-464:71)
      kind: _44 = core::result::Result::<[u8; 8], core::array::TryFromSliceError>::unwrap(move _45) -> [return: bb27, unwind: bb53]
  }
  preds [bb24]
  succs [bb27, bb53]

bb27
  0: StorageDead(_45)
    SourceInfo(src/read.rs:464:70-464:71)
  Terminator {
      source_info: SourceInfo(src/read.rs:464:25-464:72)
      kind: _43 = core::num::<impl u64>::from_le_bytes(move _44) -> [return: bb28, unwind: bb53]
  }
  preds [bb26]
  succs [bb28, bb53]

bb28
  0: StorageDead(_44)
    SourceInfo(src/read.rs:464:71-464:72)
  1: FakeRead(ForLet(None), _43)
    SourceInfo(src/read.rs:464:17-464:22)
  2: StorageLive(_47)
    SourceInfo(src/read.rs:465:17-465:30)
  3: StorageLive(_48)
    SourceInfo(src/read.rs:465:33-465:69)
  4: StorageLive(_49)
    SourceInfo(src/read.rs:465:33-465:38)
  5: _49 = _43
    SourceInfo(src/read.rs:465:33-465:38)
  6: StorageLive(_50)
    SourceInfo(src/read.rs:465:52-465:68)
  7: _51 = MulWithOverflow(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, const 32_u64)
    SourceInfo(src/read.rs:465:52-465:68)
  Terminator {
      source_info: SourceInfo(src/read.rs:465:52-465:68)
      kind: assert(!move (_51.1: bool), "attempt to compute `{} * {}`, which would overflow", const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, const 32_u64) -> [success: bb29, unwind: bb53]
  }
  preds [bb27]
  succs [bb29, bb53]

bb29
  0: _50 = move (_51.0: u64)
    SourceInfo(src/read.rs:465:52-465:68)
  Terminator {
      source_info: SourceInfo(src/read.rs:465:33-465:69)
      kind: _48 = core::num::<impl u64>::wrapping_sub(move _49, move _50) -> [return: bb30, unwind: bb53]
  }
  preds [bb28]
  succs [bb30, bb53]

bb30
  0: StorageDead(_50)
    SourceInfo(src/read.rs:465:68-465:69)
  1: StorageDead(_49)
    SourceInfo(src/read.rs:465:68-465:69)
  2: StorageLive(_52)
    SourceInfo(src/read.rs:465:72-465:78)
  3: StorageLive(_53)
    SourceInfo(src/read.rs:465:73-465:78)
  4: _53 = _43
    SourceInfo(src/read.rs:465:73-465:78)
  5: _52 = Not(move _53)
    SourceInfo(src/read.rs:465:72-465:78)
  6: StorageDead(_53)
    SourceInfo(src/read.rs:465:77-465:78)
  7: _47 = BitAnd(move _48, move _52)
    SourceInfo(src/read.rs:465:33-465:78)
  8: StorageDead(_52)
    SourceInfo(src/read.rs:465:77-465:78)
  9: StorageDead(_48)
    SourceInfo(src/read.rs:465:77-465:78)
  10: FakeRead(ForLet(None), _47)
    SourceInfo(src/read.rs:465:17-465:30)
  11: StorageLive(_54)
    SourceInfo(src/read.rs:466:17-466:28)
  12: StorageLive(_55)
    SourceInfo(src/read.rs:466:31-466:36)
  13: _55 = _43
    SourceInfo(src/read.rs:466:31-466:36)
  14: StorageLive(_56)
    SourceInfo(src/read.rs:466:39-466:70)
  15: StorageLive(_57)
    SourceInfo(src/read.rs:466:52-466:69)
  Terminator {
      source_info: SourceInfo(src/read.rs:466:52-466:69)
      kind: _57 = <u64 as core::convert::From<u8>>::from(const 34_u8) -> [return: bb31, unwind: bb53]
  }
  preds [bb29]
  succs [bb31, bb53]

bb31
  0: _58 = MulWithOverflow(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, _57)
    SourceInfo(src/read.rs:466:39-466:70)
  Terminator {
      source_info: SourceInfo(src/read.rs:466:39-466:70)
      kind: assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, move _57) -> [success: bb32, unwind: bb53]
  }
  preds [bb30]
  succs [bb32, bb53]

bb32
  0: _56 = move (_58.0: u64)
    SourceInfo(src/read.rs:466:39-466:70)
  1: StorageDead(_57)
    SourceInfo(src/read.rs:466:69-466:70)
  2: _54 = BitXor(move _55, move _56)
    SourceInfo(src/read.rs:466:31-466:70)
  3: StorageDead(_56)
    SourceInfo(src/read.rs:466:69-466:70)
  4: StorageDead(_55)
    SourceInfo(src/read.rs:466:69-466:70)
  5: FakeRead(ForLet(None), _54)
    SourceInfo(src/read.rs:466:17-466:28)
  6: StorageLive(_59)
    SourceInfo(src/read.rs:467:17-467:31)
  7: StorageLive(_60)
    SourceInfo(src/read.rs:467:34-467:69)
  8: StorageLive(_61)
    SourceInfo(src/read.rs:467:34-467:45)
  9: _61 = _54
    SourceInfo(src/read.rs:467:34-467:45)
  Terminator {
      source_info: SourceInfo(src/read.rs:467:34-467:69)
      kind: _60 = core::num::<impl u64>::wrapping_sub(move _61, const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES) -> [return: bb33, unwind: bb53]
  }
  preds [bb31]
  succs [bb33, bb53]

bb33
  0: StorageDead(_61)
    SourceInfo(src/read.rs:467:68-467:69)
  1: StorageLive(_62)
    SourceInfo(src/read.rs:467:72-467:84)
  2: StorageLive(_63)
    SourceInfo(src/read.rs:467:73-467:84)
  3: _63 = _54
    SourceInfo(src/read.rs:467:73-467:84)
  4: _62 = Not(move _63)
    SourceInfo(src/read.rs:467:72-467:84)
  5: StorageDead(_63)
    SourceInfo(src/read.rs:467:83-467:84)
  6: _59 = BitAnd(move _60, move _62)
    SourceInfo(src/read.rs:467:34-467:84)
  7: StorageDead(_62)
    SourceInfo(src/read.rs:467:83-467:84)
  8: StorageDead(_60)
    SourceInfo(src/read.rs:467:83-467:84)
  9: FakeRead(ForLet(None), _59)
    SourceInfo(src/read.rs:467:17-467:31)
  10: StorageLive(_64)
    SourceInfo(src/read.rs:468:17-468:32)
  11: StorageLive(_65)
    SourceInfo(src/read.rs:468:35-468:40)
  12: _65 = _43
    SourceInfo(src/read.rs:468:35-468:40)
  13: StorageLive(_66)
    SourceInfo(src/read.rs:468:43-468:75)
  14: StorageLive(_67)
    SourceInfo(src/read.rs:468:56-468:74)
  Terminator {
      source_info: SourceInfo(src/read.rs:468:56-468:74)
      kind: _67 = <u64 as core::convert::From<u8>>::from(const 92_u8) -> [return: bb34, unwind: bb53]
  }
  preds [bb32]
  succs [bb34, bb53]

bb34
  0: _68 = MulWithOverflow(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, _67)
    SourceInfo(src/read.rs:468:43-468:75)
  Terminator {
      source_info: SourceInfo(src/read.rs:468:43-468:75)
      kind: assert(!move (_68.1: bool), "attempt to compute `{} * {}`, which would overflow", const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, move _67) -> [success: bb35, unwind: bb53]
  }
  preds [bb33]
  succs [bb35, bb53]

bb35
  0: _66 = move (_68.0: u64)
    SourceInfo(src/read.rs:468:43-468:75)
  1: StorageDead(_67)
    SourceInfo(src/read.rs:468:74-468:75)
  2: _64 = BitXor(move _65, move _66)
    SourceInfo(src/read.rs:468:35-468:75)
  3: StorageDead(_66)
    SourceInfo(src/read.rs:468:74-468:75)
  4: StorageDead(_65)
    SourceInfo(src/read.rs:468:74-468:75)
  5: FakeRead(ForLet(None), _64)
    SourceInfo(src/read.rs:468:17-468:32)
  6: StorageLive(_69)
    SourceInfo(src/read.rs:469:17-469:35)
  7: StorageLive(_70)
    SourceInfo(src/read.rs:469:38-469:77)
  8: StorageLive(_71)
    SourceInfo(src/read.rs:469:38-469:53)
  9: _71 = _64
    SourceInfo(src/read.rs:469:38-469:53)
  Terminator {
      source_info: SourceInfo(src/read.rs:469:38-469:77)
      kind: _70 = core::num::<impl u64>::wrapping_sub(move _71, const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES) -> [return: bb36, unwind: bb53]
  }
  preds [bb34]
  succs [bb36, bb53]

bb36
  0: StorageDead(_71)
    SourceInfo(src/read.rs:469:76-469:77)
  1: StorageLive(_72)
    SourceInfo(src/read.rs:469:80-469:96)
  2: StorageLive(_73)
    SourceInfo(src/read.rs:469:81-469:96)
  3: _73 = _64
    SourceInfo(src/read.rs:469:81-469:96)
  4: _72 = Not(move _73)
    SourceInfo(src/read.rs:469:80-469:96)
  5: StorageDead(_73)
    SourceInfo(src/read.rs:469:95-469:96)
  6: _69 = BitAnd(move _70, move _72)
    SourceInfo(src/read.rs:469:38-469:96)
  7: StorageDead(_72)
    SourceInfo(src/read.rs:469:95-469:96)
  8: StorageDead(_70)
    SourceInfo(src/read.rs:469:95-469:96)
  9: FakeRead(ForLet(None), _69)
    SourceInfo(src/read.rs:469:17-469:35)
  10: StorageLive(_74)
    SourceInfo(src/read.rs:470:17-470:23)
  11: StorageLive(_75)
    SourceInfo(src/read.rs:470:26-470:79)
  12: StorageLive(_76)
    SourceInfo(src/read.rs:470:27-470:57)
  13: StorageLive(_77)
    SourceInfo(src/read.rs:470:27-470:40)
  14: _77 = _47
    SourceInfo(src/read.rs:470:27-470:40)
  15: StorageLive(_78)
    SourceInfo(src/read.rs:470:43-470:57)
  16: _78 = _59
    SourceInfo(src/read.rs:470:43-470:57)
  17: _76 = BitOr(move _77, move _78)
    SourceInfo(src/read.rs:470:27-470:57)
  18: StorageDead(_78)
    SourceInfo(src/read.rs:470:56-470:57)
  19: StorageDead(_77)
    SourceInfo(src/read.rs:470:56-470:57)
  20: StorageLive(_79)
    SourceInfo(src/read.rs:470:60-470:78)
  21: _79 = _69
    SourceInfo(src/read.rs:470:60-470:78)
  22: _75 = BitOr(move _76, move _79)
    SourceInfo(src/read.rs:470:26-470:79)
  23: StorageDead(_79)
    SourceInfo(src/read.rs:470:78-470:79)
  24: StorageDead(_76)
    SourceInfo(src/read.rs:470:78-470:79)
  25: StorageLive(_80)
    SourceInfo(src/read.rs:470:82-470:98)
  26: _81 = const 7_i32 as u32 (IntToInt)
    SourceInfo(src/read.rs:470:82-470:98)
  27: _82 = Lt(move _81, const 64_u32)
    SourceInfo(src/read.rs:470:82-470:98)
  Terminator {
      source_info: SourceInfo(src/read.rs:470:82-470:98)
      kind: assert(move _82, "attempt to shift left by `{}`, which would overflow", const 7_i32) -> [success: bb37, unwind: bb53]
  }
  preds [bb35]
  succs [bb37, bb53]

bb37
  0: _80 = Shl(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, const 7_i32)
    SourceInfo(src/read.rs:470:82-470:98)
  1: _74 = BitAnd(move _75, move _80)
    SourceInfo(src/read.rs:470:26-470:98)
  2: StorageDead(_80)
    SourceInfo(src/read.rs:470:97-470:98)
  3: StorageDead(_75)
    SourceInfo(src/read.rs:470:97-470:98)
  4: FakeRead(ForLet(None), _74)
    SourceInfo(src/read.rs:470:17-470:23)
  5: StorageLive(_83)
    SourceInfo(src/read.rs:471:16-471:27)
  6: StorageLive(_84)
    SourceInfo(src/read.rs:471:16-471:22)
  7: _84 = _74
    SourceInfo(src/read.rs:471:16-471:22)
  8: _83 = Ne(move _84, const 0_u64)
    SourceInfo(src/read.rs:471:16-471:27)
  Terminator {
      source_info: SourceInfo(src/read.rs:471:16-471:27)
      kind: switchInt(move _83) -> [0: bb45, otherwise: bb38]
  }
  preds [bb36]
  succs [bb38, bb45]

bb38
  0: StorageDead(_84)
    SourceInfo(src/read.rs:471:26-471:27)
  1: StorageLive(_86)
    SourceInfo(src/read.rs:473:30-473:97)
  2: StorageLive(_87)
    SourceInfo(src/read.rs:473:30-473:88)
  3: StorageLive(_88)
    SourceInfo(src/read.rs:473:39-473:53)
  4: StorageLive(_89)
    SourceInfo(src/read.rs:473:39-473:44)
  5: _89 = &(*_42)
    SourceInfo(src/read.rs:473:39-473:44)
  Terminator {
      source_info: SourceInfo(src/read.rs:473:39-473:53)
      kind: _88 = core::slice::<impl [u8]>::as_ptr(move _89) -> [return: bb39, unwind: bb53]
  }
  preds [bb37]
  succs [bb39, bb53]

bb39
  0: StorageDead(_89)
    SourceInfo(src/read.rs:473:52-473:53)
  1: StorageLive(_90)
    SourceInfo(src/read.rs:473:66-473:85)
  2: StorageLive(_91)
    SourceInfo(src/read.rs:473:66-473:76)
  3: _91 = &(*((*_1).0: &[u8]))
    SourceInfo(src/read.rs:473:66-473:76)
  Terminator {
      source_info: SourceInfo(src/read.rs:473:66-473:85)
      kind: _90 = core::slice::<impl [u8]>::as_ptr(move _91) -> [return: bb40, unwind: bb53]
  }
  preds [bb38]
  succs [bb40, bb53]

bb40
  0: StorageDead(_91)
    SourceInfo(src/read.rs:473:84-473:85)
  Terminator {
      source_info: SourceInfo(src/read.rs:473:39-473:86)
      kind: _87 = core::ptr::const_ptr::<impl *const u8>::offset_from(move _88, move _90) -> [return: bb41, unwind: bb53]
  }
  preds [bb39]
  succs [bb41, bb53]

bb41
  0: StorageDead(_90)
    SourceInfo(src/read.rs:473:85-473:86)
  1: StorageDead(_88)
    SourceInfo(src/read.rs:473:85-473:86)
  2: _86 = move _87 as usize (IntToInt)
    SourceInfo(src/read.rs:473:30-473:97)
  3: StorageDead(_87)
    SourceInfo(src/read.rs:473:96-473:97)
  4: StorageLive(_92)
    SourceInfo(src/read.rs:474:23-474:59)
  5: StorageLive(_93)
    SourceInfo(src/read.rs:474:23-474:55)
  6: StorageLive(_94)
    SourceInfo(src/read.rs:474:23-474:46)
  7: StorageLive(_95)
    SourceInfo(src/read.rs:474:23-474:29)
  8: _95 = _74
    SourceInfo(src/read.rs:474:23-474:29)
  Terminator {
      source_info: SourceInfo(src/read.rs:474:23-474:46)
      kind: _94 = core::num::<impl u64>::trailing_zeros(move _95) -> [return: bb42, unwind: bb53]
  }
  preds [bb40]
  succs [bb42, bb53]

bb42
  0: StorageDead(_95)
    SourceInfo(src/read.rs:474:45-474:46)
  1: _93 = move _94 as usize (IntToInt)
    SourceInfo(src/read.rs:474:23-474:55)
  2: StorageDead(_94)
    SourceInfo(src/read.rs:474:54-474:55)
  3: _96 = Eq(const 8_usize, const 0_usize)
    SourceInfo(src/read.rs:474:23-474:59)
  Terminator {
      source_info: SourceInfo(src/read.rs:474:23-474:59)
      kind: assert(!move _96, "attempt to divide `{}` by zero", _93) -> [success: bb43, unwind: bb53]
  }
  preds [bb41]
  succs [bb43, bb53]

bb43
  0: _92 = Div(move _93, const 8_usize)
    SourceInfo(src/read.rs:474:23-474:59)
  1: StorageDead(_93)
    SourceInfo(src/read.rs:474:58-474:59)
  2: _97 = AddWithOverflow(_86, _92)
    SourceInfo(src/read.rs:473:30-474:59)
  Terminator {
      source_info: SourceInfo(src/read.rs:473:30-474:59)
      kind: assert(!move (_97.1: bool), "attempt to compute `{} + {}`, which would overflow", move _86, move _92) -> [success: bb44, unwind: bb53]
  }
  preds [bb42]
  succs [bb44, bb53]

bb44
  0: ((*_1).1: usize) = move (_97.0: usize)
    SourceInfo(src/read.rs:473:17-474:59)
  1: StorageDead(_92)
    SourceInfo(src/read.rs:474:58-474:59)
  2: StorageDead(_86)
    SourceInfo(src/read.rs:474:58-474:59)
  3: _0 = const ()
    SourceInfo(src/read.rs:475:17-475:23)
  4: StorageDead(_83)
    SourceInfo(src/read.rs:476:13-476:14)
  5: StorageDead(_74)
    SourceInfo(src/read.rs:477:9-477:10)
  6: StorageDead(_69)
    SourceInfo(src/read.rs:477:9-477:10)
  7: StorageDead(_64)
    SourceInfo(src/read.rs:477:9-477:10)
  8: StorageDead(_59)
    SourceInfo(src/read.rs:477:9-477:10)
  9: StorageDead(_54)
    SourceInfo(src/read.rs:477:9-477:10)
  10: StorageDead(_47)
    SourceInfo(src/read.rs:477:9-477:10)
  11: StorageDead(_43)
    SourceInfo(src/read.rs:477:9-477:10)
  12: StorageDead(_42)
    SourceInfo(src/read.rs:477:9-477:10)
  13: StorageDead(_39)
    SourceInfo(src/read.rs:477:9-477:10)
  14: StorageDead(_37)
    SourceInfo(src/read.rs:477:9-477:10)
  15: StorageDead(_36)
    SourceInfo(src/read.rs:477:9-477:10)
  16: StorageDead(_34)
    SourceInfo(src/read.rs:477:9-477:10)
  17: StorageDead(_31)
    SourceInfo(src/read.rs:477:9-477:10)
  18: StorageDead(_30)
    SourceInfo(src/read.rs:477:9-477:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb51
  }
  preds [bb43]
  succs [bb51]

bb45
  0: StorageDead(_84)
    SourceInfo(src/read.rs:471:26-471:27)
  1: _36 = const ()
    SourceInfo(src/read.rs:476:14-476:14)
  2: StorageDead(_83)
    SourceInfo(src/read.rs:476:13-476:14)
  3: StorageDead(_74)
    SourceInfo(src/read.rs:477:9-477:10)
  4: StorageDead(_69)
    SourceInfo(src/read.rs:477:9-477:10)
  5: StorageDead(_64)
    SourceInfo(src/read.rs:477:9-477:10)
  6: StorageDead(_59)
    SourceInfo(src/read.rs:477:9-477:10)
  7: StorageDead(_54)
    SourceInfo(src/read.rs:477:9-477:10)
  8: StorageDead(_47)
    SourceInfo(src/read.rs:477:9-477:10)
  9: StorageDead(_43)
    SourceInfo(src/read.rs:477:9-477:10)
  10: StorageDead(_42)
    SourceInfo(src/read.rs:477:9-477:10)
  11: StorageDead(_39)
    SourceInfo(src/read.rs:477:9-477:10)
  12: StorageDead(_37)
    SourceInfo(src/read.rs:477:9-477:10)
  13: StorageDead(_36)
    SourceInfo(src/read.rs:477:9-477:10)
  14: _35 = const ()
    SourceInfo(src/read.rs:463:9-477:10)
  Terminator {
      source_info: SourceInfo(src/read.rs:463:9-477:10)
      kind: goto -> bb19
  }
  preds [bb37]
  succs [bb19]

bb46
  0: StorageDead(_101)
    SourceInfo(src/read.rs:479:32-479:33)
  1: _102 = Eq(const read::SliceRead::<'a>::skip_to_escape::STEP, const 0_usize)
    SourceInfo(src/read.rs:479:23-479:40)
  Terminator {
      source_info: SourceInfo(src/read.rs:479:23-479:40)
      kind: assert(!move _102, "attempt to divide `{}` by zero", _100) -> [success: bb47, unwind: bb53]
  }
  preds [bb25]
  succs [bb47, bb53]

bb47
  0: _99 = Div(move _100, const read::SliceRead::<'a>::skip_to_escape::STEP)
    SourceInfo(src/read.rs:479:23-479:40)
  1: StorageDead(_100)
    SourceInfo(src/read.rs:479:39-479:40)
  2: _103 = MulWithOverflow(_99, const read::SliceRead::<'a>::skip_to_escape::STEP)
    SourceInfo(src/read.rs:479:23-479:47)
  Terminator {
      source_info: SourceInfo(src/read.rs:479:23-479:47)
      kind: assert(!move (_103.1: bool), "attempt to compute `{} * {}`, which would overflow", move _99, const read::SliceRead::<'a>::skip_to_escape::STEP) -> [success: bb48, unwind: bb53]
  }
  preds [bb46]
  succs [bb48, bb53]

bb48
  0: _98 = move (_103.0: usize)
    SourceInfo(src/read.rs:479:23-479:47)
  1: StorageDead(_99)
    SourceInfo(src/read.rs:479:46-479:47)
  2: _104 = AddWithOverflow(((*_1).1: usize), _98)
    SourceInfo(src/read.rs:479:9-479:47)
  Terminator {
      source_info: SourceInfo(src/read.rs:479:9-479:47)
      kind: assert(!move (_104.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _98) -> [success: bb49, unwind: bb53]
  }
  preds [bb47]
  succs [bb49, bb53]

bb49
  0: ((*_1).1: usize) = move (_104.0: usize)
    SourceInfo(src/read.rs:479:9-479:47)
  1: StorageDead(_98)
    SourceInfo(src/read.rs:479:46-479:47)
  2: StorageLive(_105)
    SourceInfo(src/read.rs:480:9-480:35)
  3: StorageLive(_106)
    SourceInfo(src/read.rs:480:9-480:13)
  4: _106 = &mut (*_1)
    SourceInfo(src/read.rs:480:9-480:13)
  Terminator {
      source_info: SourceInfo(src/read.rs:480:9-480:35)
      kind: _105 = read::SliceRead::<'_>::skip_to_escape_slow(move _106) -> [return: bb50, unwind: bb53]
  }
  preds [bb48]
  succs [bb50, bb53]

bb50
  0: StorageDead(_106)
    SourceInfo(src/read.rs:480:34-480:35)
  1: StorageDead(_105)
    SourceInfo(src/read.rs:480:35-480:36)
  2: _0 = const ()
    SourceInfo(src/read.rs:432:67-481:6)
  3: StorageDead(_17)
    SourceInfo(src/read.rs:481:5-481:6)
  4: StorageDead(_16)
    SourceInfo(src/read.rs:481:5-481:6)
  Terminator {
      source_info: SourceInfo(src/read.rs:481:6-481:6)
      kind: goto -> bb52
  }
  preds [bb49]
  succs [bb52]

bb51
  0: StorageDead(_17)
    SourceInfo(src/read.rs:481:5-481:6)
  1: StorageDead(_16)
    SourceInfo(src/read.rs:481:5-481:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb52
  }
  preds [bb15, bb44]
  succs [bb52]

bb52
  Terminator {
      source_info: SourceInfo(src/read.rs:481:6-481:6)
      kind: return
  }
  preds [bb7, bb50, bb51]
  succs []

bb53
  Terminator {
      source_info: SourceInfo(src/read.rs:432:5-481:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb8, bb9, bb11, bb12, bb13, bb14, bb16, bb17, bb19, bb20, bb24, bb25, bb26, bb27, bb28, bb29, bb30, bb31, bb32, bb33, bb34, bb35, bb36, bb38, bb39, bb40, bb41, bb42, bb43, bb46, bb47, bb48, bb49]
  succs []

