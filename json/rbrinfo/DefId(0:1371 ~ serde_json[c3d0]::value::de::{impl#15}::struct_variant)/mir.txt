bb0
  0: PlaceMention((_1.0: core::option::Option<&value::Value>))
    SourceInfo(src/value/de.rs:1110:15-1110:25)
  1: _5 = discriminant((_1.0: core::option::Option<&value::Value>))
    SourceInfo(src/value/de.rs:1110:15-1110:25)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1110:9-1110:25)
      kind: switchInt(move _5) -> [0: bb5, 1: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), (_1.0: core::option::Option<&value::Value>))
    SourceInfo(src/value/de.rs:1110:15-1110:25)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1110:15-1110:25)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  0: _4 = discriminant((*(((_1.0: core::option::Option<&value::Value>) as Some).0: &value::Value)))
    SourceInfo(src/value/de.rs:1110:15-1110:25)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1110:9-1110:25)
      kind: switchInt(move _4) -> [5: bb4, otherwise: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1112:13-1112:24)
      kind: falseEdge -> [real: bb8, imaginary: bb5]
  }
  preds [bb2, bb4]
  succs [bb5, bb8]

bb4
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1111:13-1111:35)
      kind: falseEdge -> [real: bb6, imaginary: bb3]
  }
  preds [bb2]
  succs [bb3, bb6]

bb5
  0: StorageLive(_17)
    SourceInfo(src/value/de.rs:1116:25-1119:14)
  1: StorageLive(_18)
    SourceInfo(src/value/de.rs:1117:17-1117:40)
  2: _18 = serde::de::Unexpected::<'_>::UnitVariant
    SourceInfo(src/value/de.rs:1117:17-1117:40)
  3: StorageLive(_19)
    SourceInfo(src/value/de.rs:1118:17-1118:34)
  4: StorageLive(_20)
    SourceInfo(src/value/de.rs:1118:17-1118:34)
  5: StorageLive(_21)
    SourceInfo(src/value/de.rs:1118:17-1118:34)
  6: StorageLive(_22)
    SourceInfo(src/value/de.rs:1118:18-1118:34)
  7: _22 = const "struct variant"
    SourceInfo(src/value/de.rs:1118:18-1118:34)
  8: _21 = &_22
    SourceInfo(src/value/de.rs:1118:17-1118:34)
  9: _20 = &(*_21)
    SourceInfo(src/value/de.rs:1118:17-1118:34)
  10: _19 = move _20 as &dyn serde::de::Expected (PointerCoercion(Unsize))
    SourceInfo(src/value/de.rs:1118:17-1118:34)
  11: StorageDead(_20)
    SourceInfo(src/value/de.rs:1118:33-1118:34)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1116:25-1119:14)
      kind: _17 = <error::Error as serde::de::Error>::invalid_type(move _18, move _19) -> [return: bb12, unwind: bb17]
  }
  preds [bb0, bb3]
  succs [bb12, bb17]

bb6
  0: StorageLive(_6)
    SourceInfo(src/value/de.rs:1111:32-1111:33)
  1: _6 = &(((*(((_1.0: core::option::Option<&value::Value>) as Some).0: &value::Value)) as Object).0: map::Map<alloc::string::String, value::Value>)
    SourceInfo(src/value/de.rs:1111:32-1111:33)
  2: StorageLive(_7)
    SourceInfo(src/value/de.rs:1111:39-1111:40)
  3: _7 = &(*_6)
    SourceInfo(src/value/de.rs:1111:39-1111:40)
  4: StorageLive(_8)
    SourceInfo(src/value/de.rs:1111:57-1111:64)
  5: _8 = move _3
    SourceInfo(src/value/de.rs:1111:57-1111:64)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1111:39-1111:65)
      kind: _0 = <&map::Map<alloc::string::String, value::Value> as serde::Deserializer<'_>>::deserialize_any::<V>(move _7, move _8) -> [return: bb7, unwind: bb16]
  }
  preds [bb4]
  succs [bb7, bb16]

bb7
  0: StorageDead(_8)
    SourceInfo(src/value/de.rs:1111:64-1111:65)
  1: StorageDead(_7)
    SourceInfo(src/value/de.rs:1111:64-1111:65)
  2: StorageDead(_6)
    SourceInfo(src/value/de.rs:1111:64-1111:65)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1111:64-1111:65)
      kind: goto -> bb14
  }
  preds [bb6]
  succs [bb14]

bb8
  0: StorageLive(_9)
    SourceInfo(src/value/de.rs:1112:18-1112:23)
  1: _9 = (((_1.0: core::option::Option<&value::Value>) as Some).0: &value::Value)
    SourceInfo(src/value/de.rs:1112:18-1112:23)
  2: StorageLive(_10)
    SourceInfo(src/value/de.rs:1112:32-1115:14)
  3: StorageLive(_11)
    SourceInfo(src/value/de.rs:1113:17-1113:35)
  4: StorageLive(_12)
    SourceInfo(src/value/de.rs:1113:17-1113:22)
  5: _12 = &(*_9)
    SourceInfo(src/value/de.rs:1113:17-1113:22)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1113:17-1113:35)
      kind: _11 = value::de::<impl value::Value>::unexpected(move _12) -> [return: bb9, unwind: bb17]
  }
  preds [bb3]
  succs [bb9, bb17]

bb9
  0: StorageDead(_12)
    SourceInfo(src/value/de.rs:1113:34-1113:35)
  1: StorageLive(_13)
    SourceInfo(src/value/de.rs:1114:17-1114:34)
  2: StorageLive(_14)
    SourceInfo(src/value/de.rs:1114:17-1114:34)
  3: StorageLive(_15)
    SourceInfo(src/value/de.rs:1114:17-1114:34)
  4: StorageLive(_16)
    SourceInfo(src/value/de.rs:1114:18-1114:34)
  5: _16 = const "struct variant"
    SourceInfo(src/value/de.rs:1114:18-1114:34)
  6: _15 = &_16
    SourceInfo(src/value/de.rs:1114:17-1114:34)
  7: _14 = &(*_15)
    SourceInfo(src/value/de.rs:1114:17-1114:34)
  8: _13 = move _14 as &dyn serde::de::Expected (PointerCoercion(Unsize))
    SourceInfo(src/value/de.rs:1114:17-1114:34)
  9: StorageDead(_14)
    SourceInfo(src/value/de.rs:1114:33-1114:34)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1112:32-1115:14)
      kind: _10 = <error::Error as serde::de::Error>::invalid_type(move _11, move _13) -> [return: bb10, unwind: bb17]
  }
  preds [bb8]
  succs [bb10, bb17]

bb10
  0: StorageDead(_13)
    SourceInfo(src/value/de.rs:1115:13-1115:14)
  1: StorageDead(_11)
    SourceInfo(src/value/de.rs:1115:13-1115:14)
  2: _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _10)
    SourceInfo(src/value/de.rs:1112:28-1115:15)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1115:14-1115:15)
      kind: drop(_10) -> [return: bb11, unwind: bb17]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageDead(_10)
    SourceInfo(src/value/de.rs:1115:14-1115:15)
  1: StorageDead(_16)
    SourceInfo(src/value/de.rs:1115:14-1115:15)
  2: StorageDead(_15)
    SourceInfo(src/value/de.rs:1115:14-1115:15)
  3: StorageDead(_9)
    SourceInfo(src/value/de.rs:1115:14-1115:15)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1115:14-1115:15)
      kind: goto -> bb14
  }
  preds [bb10]
  succs [bb14]

bb12
  0: StorageDead(_19)
    SourceInfo(src/value/de.rs:1119:13-1119:14)
  1: StorageDead(_18)
    SourceInfo(src/value/de.rs:1119:13-1119:14)
  2: _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _17)
    SourceInfo(src/value/de.rs:1116:21-1119:15)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1119:14-1119:15)
      kind: drop(_17) -> [return: bb13, unwind: bb17]
  }
  preds [bb5]
  succs [bb13, bb17]

bb13
  0: StorageDead(_17)
    SourceInfo(src/value/de.rs:1119:14-1119:15)
  1: StorageDead(_22)
    SourceInfo(src/value/de.rs:1119:14-1119:15)
  2: StorageDead(_21)
    SourceInfo(src/value/de.rs:1119:14-1119:15)
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1119:14-1119:15)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1121:5-1121:6)
      kind: drop(_3) -> [return: bb15, unwind: bb18]
  }
  preds [bb7, bb11, bb13]
  succs [bb15, bb18]

bb15
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1121:6-1121:6)
      kind: return
  }
  preds [bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1111:64-1111:65)
      kind: drop(_8) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1121:5-1121:6)
      kind: drop(_3) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb5, bb8, bb9, bb10, bb12, bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/value/de.rs:1102:5-1121:6)
      kind: resume
  }
  preds [bb14, bb17]
  succs []

