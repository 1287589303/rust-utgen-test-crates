[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(_1.0: alloc::borrow::Cow<'_, str>),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const "true",
            _5 = &_6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1269:12: 1269:30 (#0),
                    scope: scope[0],
                },
                kind: _3 = <alloc::borrow::Cow<'_, str> as core::cmp::PartialEq<&str>>::eq(move _4, move _5) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1269:12: 1269:30 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1270:13: 1270:37 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as serde::de::Visitor<'_>>::visit_bool::<error::Error>(move _7, const true) -> [return: bb3, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(_1.0: alloc::borrow::Cow<'_, str>),
            StorageLive(_10),
            StorageLive(_11),
            _11 = const "false",
            _10 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1271:19: 1271:38 (#0),
                    scope: scope[0],
                },
                kind: _8 = <alloc::borrow::Cow<'_, str> as core::cmp::PartialEq<&str>>::eq(move _9, move _10) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1271:19: 1271:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_12),
            _12 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1272:13: 1272:38 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as serde::de::Visitor<'_>>::visit_bool::<error::Error>(move _12, const false) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1271:16: 1278:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(_1.0: alloc::borrow::Cow<'_, str>),
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1275:33: 1275:42 (#0),
                    scope: scope[0],
                },
                kind: _16 = <alloc::borrow::Cow<'_, str> as core::ops::Deref>::deref(move _17) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
            _14 = serde::de::Unexpected::<'_>::Str(move _15),
            StorageDead(_15),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &_2,
            _20 = &(*_21),
            _19 = move _20 as &dyn serde::de::Expected (PointerCoercion(Unsize)),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1274:17: 1277:14 (#0),
                    scope: scope[0],
                },
                kind: _13 = <error::Error as serde::de::Error>::invalid_type(move _14, move _19) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_14),
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1277:14: 1277:15 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1271:16: 1278:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1279:5: 1279:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1279:5: 1279:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb15, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1279:6: 1279:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1272:37: 1272:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1270:36: 1270:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1279:5: 1279:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1279:5: 1279:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1265:5: 1279:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1265:49: 1265:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: value::de::MapKeyDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1265:28: 1265:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:1265:43: 1265:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1265:34: 1265:41 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1265:34: 1265:41 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1265:34: 1265:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1269:12: 1269:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1269:12: 1269:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1269:24: 1269:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1269:24: 1269:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1270:13: 1270:37 (#0),
                },
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1270:13: 1270:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1271:19: 1271:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1271:19: 1271:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1271:31: 1271:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1269:9: 1278:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1271:31: 1271:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1272:13: 1272:38 (#0),
                },
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1272:13: 1272:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1274:17: 1277:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: serde::de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1275:17: 1275:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1275:33: 1275:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1275:33: 1275:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1275:33: 1275:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1275:33: 1275:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(serde::de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1276:17: 1276:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: &'{erased} V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1276:17: 1276:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1274:13: 1277:15 (#0),
                },
            ),
        ),
        ty: &'{erased} V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1276:17: 1276:25 (#0),
            scope: scope[0],
        },
    },
]