[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:536:9: 536:24 (#0),
                    scope: scope[0],
                },
                kind: _5 = de::Deserializer::<R>::eat_char(move _6) -> [return: bb1, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            _7 = const 0_i32,
            FakeRead(ForLet(None), _7),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:9: 550:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:9: 550:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:42: 539:61 (#0),
                    scope: scope[2],
                },
                kind: _11 = de::Deserializer::<R>::peek_or_null(move _12) -> [return: bb4, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _13 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#32),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:42: 539:61 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#32),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_11 as Err).0: error::Error),
            StorageLive(_17),
            _17 = move _15,
            _0 = core::result::Result::<f64, error::Error>::Err(move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#32),
                    scope: scope[4],
                },
                kind: drop(_17) -> [return: bb9, unwind: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_11 as Ok).0: u8),
            _10 = _14,
            StorageDead(_14),
            PlaceMention(_10),
            _18 = Le(const 48_u8, _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:23: 539:34 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _18) -> [0: bb10, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#32),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb69, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_61),
            _8 = const (),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:550:9: 550:10 (#820),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb33, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:19: 539:20 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = Le(_10, const 57_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:23: 539:34 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb10, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = _10,
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _20,
            _24 = SubWithOverflow(_23, const 48_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:540:25: 540:35 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _23, const 48_u8) -> [success: bb14, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = move (_24.0: u8),
            StorageDead(_23),
            _21 = move _22 as u64 (IntToInt),
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = const core::num::<impl u64>::MAX,
            PlaceMention(_27),
            StorageLive(_28),
            _28 = _27,
            StorageLive(_29),
            StorageLive(_30),
            _30 = _3,
            StorageLive(_31),
            StorageLive(_32),
            _32 = _28,
            _33 = Eq(const 10_u64, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:24: 104:30 (#33),
                    scope: scope[6],
                },
                kind: assert(!move _33, "attempt to divide `{}` by zero", _32) -> [success: bb15, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = Div(move _32, const 10_u64),
            StorageDead(_32),
            _29 = Ge(move _30, move _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:18: 104:30 (#33),
                    scope: scope[6],
                },
                kind: switchInt(move _29) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _3,
            StorageLive(_36),
            StorageLive(_37),
            _37 = _28,
            _38 = Eq(const 10_u64, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:40: 104:46 (#33),
                    scope: scope[6],
                },
                kind: assert(!move _38, "attempt to divide `{}` by zero", _37) -> [success: bb18, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _26 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:18: 104:62 (#33),
                    scope: scope[6],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = Div(move _37, const 10_u64),
            StorageDead(_37),
            _34 = Gt(move _35, move _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:35: 104:46 (#33),
                    scope: scope[6],
                },
                kind: switchInt(move _34) -> [0: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            _26 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:34: 104:62 (#33),
                    scope: scope[6],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_39),
            _39 = _21,
            StorageLive(_40),
            StorageLive(_41),
            _41 = _28,
            _42 = Eq(const 10_u64, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:55: 104:61 (#33),
                    scope: scope[6],
                },
                kind: assert(!move _42, "attempt to calculate the remainder of `{}` with a divisor of zero", _41) -> [success: bb21, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = Rem(move _41, const 10_u64),
            StorageDead(_41),
            _26 = Gt(move _39, move _40),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:34: 104:62 (#33),
                    scope: scope[6],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:104:18: 104:62 (#33),
                    scope: scope[6],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:103:9: 105:10 (#33),
                    scope: scope[5],
                },
                kind: switchInt(move _26) -> [0: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _4,
            StorageLive(_46),
            _46 = _7,
            _47 = AddWithOverflow(_45, _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:543:32: 543:92 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, move _46) -> [success: bb26, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            _25 = const (),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:547:13: 547:28 (#0),
                    scope: scope[5],
                },
                kind: _52 = de::Deserializer::<R>::eat_char(move _53) -> [return: bb28, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = move (_47.0: i32),
            StorageDead(_46),
            StorageDead(_45),
            FakeRead(ForLet(None), _44),
            StorageLive(_48),
            _48 = &mut (*_1),
            StorageLive(_49),
            _49 = _2,
            StorageLive(_50),
            _50 = _3,
            StorageLive(_51),
            _51 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:544:24: 544:84 (#0),
                    scope: scope[7],
                },
                kind: _0 = de::Deserializer::<R>::parse_decimal_overflow(move _48, move _49, move _50, move _51) -> [return: bb27, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_44),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _3,
            _56 = MulWithOverflow(_55, const 10_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:548:27: 548:43 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_56.1: bool), "attempt to compute `{} * {}`, which would overflow", move _55, const 10_u64) -> [success: bb29, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = move (_56.0: u64),
            StorageDead(_55),
            StorageLive(_57),
            _57 = _21,
            _58 = AddWithOverflow(_54, _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:548:27: 548:51 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, move _57) -> [success: bb30, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_58.0: u64),
            StorageDead(_57),
            StorageDead(_54),
            _59 = SubWithOverflow(_7, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:549:13: 549:46 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_59.1: bool), "attempt to compute `{} - {}`, which would overflow", _7, const 1_i32) -> [success: bb31, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move (_59.0: i32),
            _9 = const (),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:550:9: 550:10 (#820),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb32, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:539:9: 550:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = _7,
            _64 = Eq(move _65, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:553:12: 553:45 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _64) -> [0: bb49, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:554:24: 554:35 (#0),
                    scope: scope[1],
                },
                kind: _67 = de::Deserializer::<R>::peek(move _68) -> [return: bb35, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            PlaceMention(_67),
            _69 = discriminant(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#34),
                    scope: scope[1],
                },
                kind: switchInt(move _69) -> [0: bb37, 1: bb38, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:554:24: 554:35 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#34),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_71),
            _71 = move ((_67 as Err).0: error::Error),
            StorageLive(_73),
            _73 = move _71,
            _0 = core::result::Result::<f64, error::Error>::Err(move _73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#34),
                    scope: scope[9],
                },
                kind: drop(_73) -> [return: bb40, unwind: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            _70 = ((_67 as Ok).0: core::option::Option<u8>),
            _66 = _70,
            StorageDead(_70),
            PlaceMention(_66),
            _74 = discriminant(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#34),
                    scope: scope[1],
                },
                kind: switchInt(move _74) -> [0: bb43, 1: bb42, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#34),
                    scope: scope[1],
                },
                kind: drop(_71) -> [return: bb66, unwind: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#34),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:555:17: 555:24 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            StorageLive(_81),
            _81 = &(*_1),
            StorageLive(_82),
            _82 = error::ErrorCode::EofWhileParsingValue,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:556:36: 556:84 (#0),
                    scope: scope[1],
                },
                kind: _80 = de::Deserializer::<R>::peek_error(move _81, move _82) -> [return: bb47, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            StorageLive(_77),
            _77 = &(*_1),
            StorageLive(_78),
            _78 = error::ErrorCode::InvalidNumber,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:555:39: 555:80 (#0),
                    scope: scope[1],
                },
                kind: _76 = de::Deserializer::<R>::peek_error(move _77, move _78) -> [return: bb45, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            _0 = core::result::Result::<f64, error::Error>::Err(move _76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:555:80: 555:81 (#0),
                    scope: scope[1],
                },
                kind: drop(_76) -> [return: bb46, unwind: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:555:28: 555:81 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageDead(_81),
            _0 = core::result::Result::<f64, error::Error>::Err(move _80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:556:84: 556:85 (#0),
                    scope: scope[1],
                },
                kind: drop(_80) -> [return: bb48, unwind: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:556:25: 556:85 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            _63 = const (),
            StorageDead(_64),
            StorageDead(_63),
            StorageLive(_83),
            StorageLive(_84),
            _84 = _4,
            StorageLive(_85),
            _85 = _7,
            _86 = AddWithOverflow(_84, _85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:560:24: 560:84 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_86.1: bool), "attempt to compute `{} + {}`, which would overflow", move _84, move _85) -> [success: bb50, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _83 = move (_86.0: i32),
            StorageDead(_85),
            StorageDead(_84),
            FakeRead(ForLet(None), _83),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:561:20: 561:39 (#0),
                    scope: scope[10],
                },
                kind: _88 = de::Deserializer::<R>::peek_or_null(move _89) -> [return: bb51, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            PlaceMention(_88),
            _90 = discriminant(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#35),
                    scope: scope[10],
                },
                kind: switchInt(move _90) -> [0: bb53, 1: bb54, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:561:20: 561:39 (#0),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#35),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            _92 = move ((_88 as Err).0: error::Error),
            StorageLive(_94),
            _94 = move _92,
            _0 = core::result::Result::<f64, error::Error>::Err(move _94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#35),
                    scope: scope[12],
                },
                kind: drop(_94) -> [return: bb56, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _91 = ((_88 as Ok).0: u8),
            _87 = _91,
            StorageDead(_91),
            PlaceMention(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#35),
                    scope: scope[10],
                },
                kind: switchInt(_87) -> [101: bb58, 69: bb58, otherwise: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#35),
                    scope: scope[10],
                },
                kind: drop(_92) -> [return: bb64, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_99),
            _99 = &mut (*_1),
            StorageLive(_100),
            _100 = _2,
            StorageLive(_101),
            _101 = _3,
            StorageLive(_102),
            _102 = _83,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:563:18: 563:70 (#0),
                    scope: scope[10],
                },
                kind: _0 = de::Deserializer::<R>::f64_from_parts(move _99, move _100, move _101, move _102) -> [return: bb61, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:562:13: 562:24 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb59, imaginary: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            _95 = &mut (*_1),
            StorageLive(_96),
            _96 = _2,
            StorageLive(_97),
            _97 = _3,
            StorageLive(_98),
            _98 = _83,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:562:28: 562:80 (#0),
                    scope: scope[10],
                },
                kind: _0 = de::Deserializer::<R>::parse_exponent(move _95, move _96, move _97, move _98) -> [return: bb60, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_96),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:562:79: 562:80 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
            StorageDead(_100),
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:563:69: 563:70 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:565:5: 565:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_88) -> [return: bb63, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:565:6: 565:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_83),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:565:5: 565:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_88) -> [return: bb65, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:558:9: 558:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_67) -> [return: bb68, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageDead(_64),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:550:9: 550:10 (#820),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb71, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:565:6: 565:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#35),
                    scope: scope[10],
                },
                kind: drop(_92) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:565:5: 565:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_88) -> [return: bb82, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:556:83: 556:84 (#0),
                    scope: scope[1],
                },
                kind: drop(_82) -> [return: bb79, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:555:79: 555:80 (#0),
                    scope: scope[1],
                },
                kind: drop(_78) -> [return: bb79, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#34),
                    scope: scope[1],
                },
                kind: drop(_71) -> [return: bb79, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:558:9: 558:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_67) -> [return: bb82, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#32),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb81, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:550:9: 550:10 (#820),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb82, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:530:5: 565:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<f64, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:535:10: 535:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:531:9: 531:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/de.rs:532:19: 532:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:532:9: 532:17 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:532:9: 532:17 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:532:9: 532:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/de.rs:533:26: 533:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:533:9: 533:24 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:533:9: 533:24 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:533:9: 533:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/de.rs:534:40: 534:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:534:9: 534:38 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:534:9: 534:38 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:534:9: 534:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:536:9: 536:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:536:9: 536:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:538:48: 538:49 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:538:13: 538:45 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:538:13: 538:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:9: 550:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:530:5: 565:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:539:9: 550:10 (#820),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:539:9: 550:10 (#820),
                },
            ),
        ),
        ty: core::result::Result<u8, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:42: 539:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:539:9: 550:10 (#820),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:42: 539:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/de.rs:539:42: 539:61 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#32),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#32),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/de.rs:539:42: 539:61 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#32),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#32),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:539:9: 550:10 (#820),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:23: 539:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:23: 539:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                src/lib.rs:408:9: 411:10 (#32),
                            ),
                        ),
                        pat_span: src/de.rs:539:19: 539:20 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:19: 539:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:540:25: 540:42 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:540:17: 540:22 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:540:17: 540:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:540:25: 540:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:540:26: 540:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:540:25: 540:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:542:13: 545:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:103:9: 105:10 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(1:30577 ~ core[a245]::num::{impl#9}::MAX),
            },
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:542:52: 542:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                src/de.rs:542:52: 542:60 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:104:13: 104:14 (#33),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:13: 104:14 (#33),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:18: 104:30 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:18: 104:20 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:24: 104:30 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:24: 104:25 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:24: 104:30 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:35: 104:46 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:35: 104:37 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:40: 104:46 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:40: 104:41 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:40: 104:46 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:50: 104:52 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:55: 104:61 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:55: 104:56 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:104:55: 104:61 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:542:62: 545:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:543:32: 543:92 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:543:21: 543:29 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:543:21: 543:29 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:543:32: 543:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:543:64: 543:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:543:32: 543:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:544:24: 544:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:544:52: 544:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:544:62: 544:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:544:75: 544:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:547:13: 547:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:547:13: 547:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:548:27: 548:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:548:27: 548:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:548:27: 548:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:548:46: 548:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:548:27: 548:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:549:13: 549:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:539:9: 550:10 (#820),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:9: 550:10 (#820),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:9: 550:10 (#820),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:539:9: 550:10 (#820),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:553:9: 558:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:553:12: 553:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:553:12: 553:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::option::Option<u8>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:554:24: 554:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:554:24: 554:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _67,
                                ),
                                src/de.rs:554:24: 554:35 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#34),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#34),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _67,
                                ),
                                src/de.rs:554:24: 554:35 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#34),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#34),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:555:17: 555:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:555:28: 555:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:555:39: 555:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: &'{erased} de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:555:39: 555:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: error::ErrorCode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:555:55: 555:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:556:25: 556:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:556:36: 556:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: &'{erased} de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:556:36: 556:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/de.rs:554:13: 557:14 (#0),
                },
            ),
        ),
        ty: error::ErrorCode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:556:52: 556:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:560:24: 560:84 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:560:13: 560:21 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:560:13: 560:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:560:24: 560:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:560:56: 560:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:560:24: 560:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#35),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<u8, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:561:20: 561:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:561:20: 561:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#35),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _88,
                                ),
                                src/de.rs:561:20: 561:39 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#35),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#35),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _88,
                                ),
                                src/de.rs:561:20: 561:39 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#35),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#35),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#35),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#35),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:562:28: 562:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:562:48: 562:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:562:58: 562:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:562:71: 562:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:563:18: 563:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:563:38: 563:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:563:48: 563:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:561:9: 564:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:563:61: 563:69 (#0),
            scope: scope[0],
        },
    },
]