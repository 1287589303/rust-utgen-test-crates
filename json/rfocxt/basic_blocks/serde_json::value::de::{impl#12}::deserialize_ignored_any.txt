[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:800:9: 800:29 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as serde::de::Visitor<'_>>::visit_unit::<error::Error>(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:801:5: 801:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:801:6: 801:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:800:28: 800:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:801:5: 801:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:796:5: 801:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:796:56: 796:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:796:35: 796:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:796:50: 796:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:796:41: 796:48 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:796:41: 796:48 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:796:41: 796:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:800:9: 800:29 (#0),
                },
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:800:9: 800:16 (#0),
            scope: scope[0],
        },
    },
]