[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _2,
            StorageLive(_4),
            _4 = move (_1.0: &mut de::Deserializer<R>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:2070:9: 2070:34 (#0),
                    scope: scope[0],
                },
                kind: _0 = <T as serde::de::DeserializeSeed<'_>>::deserialize::<&mut de::Deserializer<R>>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:2071:5: 2071:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:2071:6: 2071:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:2070:33: 2070:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:2071:5: 2071:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:2066:5: 2071:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [T/#3, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:2066:50: 2066:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: de::VariantAccess<'{erased}, R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:2066:32: 2066:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/de.rs:2066:44: 2066:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:2066:38: 2066:42 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:2066:38: 2066:42 (#0),
                    },
                ),
            ),
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:2066:38: 2066:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:2070:9: 2070:34 (#0),
                },
            ),
        ),
        ty: T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:2070:9: 2070:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:2070:9: 2070:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:2070:26: 2070:33 (#0),
            scope: scope[0],
        },
    },
]