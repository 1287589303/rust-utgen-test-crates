[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            PlaceMention(_1),
            _5 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:704:9: 704:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:704:15: 704:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:13: 705:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_1 as Occupied).0: map::OccupiedEntry<'_>),
            StorageLive(_13),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:706:39: 706:55 (#0),
                    scope: scope[2],
                },
                kind: _13 = map::OccupiedEntry::<'_>::into_mut(move _14) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_1 as Vacant).0: map::VacantEntry<'_>),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _6,
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _2,
            StorageLive(_11),
            _11 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:50: 705:59 (#0),
                    scope: scope[1],
                },
                kind: _9 = <F as core::ops::FnOnce<()>>::call_once(move _10, move _11) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:37: 705:60 (#0),
                    scope: scope[1],
                },
                kind: _7 = map::VacantEntry::<'_>::insert(move _8, move _9) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_7),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:59: 705:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:59: 705:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_13),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:706:54: 706:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            _0 = &mut (*_3),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:708:5: 708:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:708:5: 708:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:708:6: 708:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:59: 705:60 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:58: 705:59 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:59: 705:60 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:705:59: 705:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:708:5: 708:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:708:5: 708:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:700:5: 708:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:700:51: 700:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::Entry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:700:30: 700:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:700:45: 700:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:700:36: 700:43 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:700:36: 700:43 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:700:36: 700:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:704:9: 707:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:704:9: 707:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:13: 705:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:704:15: 704:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:705:13: 705:33 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:27: 705:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:37: 705:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: map::VacantEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:37: 705:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:50: 705:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:50: 705:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:705:50: 705:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:704:15: 704:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:706:13: 706:35 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:706:29: 706:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:706:39: 706:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:704:9: 707:10 (#0),
                },
            ),
        ),
        ty: map::OccupiedEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:706:39: 706:44 (#0),
            scope: scope[0],
        },
    },
]