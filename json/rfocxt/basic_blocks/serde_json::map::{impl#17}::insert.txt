[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut ((*_1).0: alloc::collections::btree_map::OccupiedEntry<'_, alloc::string::String, value::Value>),
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:917:9: 917:36 (#0),
                    scope: scope[0],
                },
                kind: _0 = alloc::collections::btree_map::OccupiedEntry::<'_, alloc::string::String, value::Value>::insert(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:918:5: 918:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:918:6: 918:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:917:35: 917:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:918:5: 918:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:916:5: 918:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:916:47: 916:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::OccupiedEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:916:19: 916:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:916:37: 916:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:916:30: 916:35 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:916:30: 916:35 (#0),
                    },
                ),
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:916:30: 916:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:917:9: 917:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::collections::btree_map::OccupiedEntry<'{erased}, alloc::string::String, value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:917:9: 917:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:917:9: 917:36 (#0),
                },
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:917:30: 917:35 (#0),
            scope: scope[0],
        },
    },
]