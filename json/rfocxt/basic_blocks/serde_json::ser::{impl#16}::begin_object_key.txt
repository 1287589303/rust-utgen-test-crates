[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2059:34: 2059:39 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            _10 = const b"\n",
            _9 = &(*_10),
            _7 = move _9 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2059:31: 2059:65 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            StorageLive(_12),
            _12 = const b",\n",
            _11 = &(*_12),
            _7 = move _11 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2059:31: 2059:65 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2059:14: 2059:66 (#0),
                    scope: scope[0],
                },
                kind: _5 = <W as std::io::Write>::write_all(move _6, move _7) -> [return: bb4, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            PlaceMention(_5),
            _13 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#308),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2059:14: 2059:66 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#308),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_5 as Err).0: std::io::Error),
            StorageLive(_17),
            _17 = move _15,
            _0 = core::result::Result::<(), std::io::Error>::Err(move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#308),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_5 as Ok).0: ()),
            _4 = _14,
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#308),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#308),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_18),
            _18 = &mut (*_2),
            StorageLive(_19),
            _19 = ((*_1).0: usize),
            StorageLive(_20),
            _20 = &(*((*_1).2: &[u8])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2060:9: 2060:57 (#0),
                    scope: scope[0],
                },
                kind: _0 = ser::indent::<W>(move _18, move _19, move _20) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2061:6: 2061:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#308),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb13, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2061:6: 2061:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2061:6: 2061:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#308),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#308),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2055:5: 2061:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2055:71: 2055:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ser::PrettyFormatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2055:28: 2055:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:2055:47: 2055:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:2055:39: 2055:45 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:2055:39: 2055:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2055:39: 2055:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:2055:62: 2055:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:2055:55: 2055:60 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:2055:55: 2055:60 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2055:55: 2055:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:14: 2059:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:14: 2059:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:31: 2059:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:34: 2059:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2059:42: 2059:47 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:42: 2059:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2059:42: 2059:47 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:42: 2059:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2059:57: 2059:63 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:57: 2059:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2059:57: 2059:63 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2059:57: 2059:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/ser.rs:2059:14: 2059:66 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#308),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/ser.rs:2059:14: 2059:66 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#308),
                    },
                ),
            ),
        ),
        ty: std::io::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::io::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#308),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2060:9: 2060:57 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2060:16: 2060:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2060:9: 2060:57 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2060:24: 2060:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2060:9: 2060:57 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2060:45: 2060:56 (#0),
            scope: scope[0],
        },
    },
]