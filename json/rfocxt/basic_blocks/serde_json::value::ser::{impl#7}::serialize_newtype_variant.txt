[
    BasicBlockData {
        statements: [
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:584:13: 584:35 (#0),
                    scope: scope[0],
                },
                kind: _6 = value::ser::key_must_be_a_string() -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<alloc::string::String, error::Error>::Err(move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:584:35: 584:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:585:6: 585:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:574:5: 585:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<alloc::string::String, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:580:10: 580:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: value::ser::MapKeySerializer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:575:9: 575:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:576:16: 576:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:576:9: 576:14 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:576:9: 576:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:576:9: 576:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:577:25: 577:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:577:9: 577:23 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:577:9: 577:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:577:9: 577:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:578:19: 578:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:578:9: 578:17 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:578:9: 578:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:578:9: 578:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:579:17: 579:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:579:9: 579:15 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:579:9: 579:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:579:9: 579:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:584:13: 584:35 (#0),
            scope: scope[0],
        },
    },
]