[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: alloc::vec::IntoIter<value::Value>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:640:15: 640:36 (#0),
                    scope: scope[0],
                },
                kind: _2 = <alloc::vec::IntoIter<value::Value> as core::iter::Iterator>::size_hint(move _3) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _5 = discriminant((_2.1: core::option::Option<usize>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:640:9: 640:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<usize>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:642:18: 642:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:641:13: 641:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &(_2.0: usize),
            StorageLive(_9),
            _9 = &(((_2.1: core::option::Option<usize>) as Some).0: usize),
            _4 = &fake shallow (_2.1: core::option::Option<usize>),
            StorageLive(_10),
            StorageLive(_11),
            _11 = (*_7),
            StorageLive(_12),
            _12 = (*_9),
            _10 = Eq(move _11, move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:641:37: 641:51 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForMatchGuard, _4),
            FakeRead(ForGuardBinding, _7),
            FakeRead(ForGuardBinding, _9),
            StorageLive(_6),
            _6 = (_2.0: usize),
            StorageLive(_8),
            _8 = (((_2.1: core::option::Option<usize>) as Some).0: usize),
            StorageLive(_13),
            _13 = _8,
            _0 = core::option::Option::<usize>::Some(move _13),
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_9),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:641:65: 641:66 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:641:37: 641:51 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:644:6: 644:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:639:5: 644:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:639:28: 639:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} value::de::SeqDeserializer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:639:18: 639:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:640:9: 643:10 (#0),
                },
            ),
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:640:15: 640:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:640:9: 643:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::IntoIter<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:640:15: 640:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:640:15: 640:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:21: 641:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/value/de.rs:640:15: 640:36 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:641:13: 641:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:14: 641:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:14: 641:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/value/de.rs:640:15: 640:36 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:641:13: 641:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:26: 641:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:26: 641:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:640:9: 643:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:37: 641:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:640:9: 643:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:37: 641:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:640:9: 643:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:46: 641:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:641:60: 641:65 (#0),
            scope: scope[0],
        },
    },
]