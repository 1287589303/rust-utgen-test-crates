[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:111:9: 111:24 (#0),
                    scope: scope[0],
                },
                kind: _3 = error::Error::classify(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &_3,
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = error::Category::Eof,
            _5 = &_6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:111:9: 111:41 (#0),
                    scope: scope[0],
                },
                kind: _0 = <error::Category as core::cmp::PartialEq>::eq(move _2, move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:112:6: 112:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:110:5: 112:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:110:29: 110:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:110:19: 110:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:111:9: 111:41 (#0),
                },
            ),
        ),
        ty: &'{erased} error::Category,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:111:9: 111:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:111:9: 111:41 (#0),
                },
            ),
        ),
        ty: error::Category,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:111:9: 111:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:111:9: 111:41 (#0),
                },
            ),
        ),
        ty: &'{erased} error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:111:9: 111:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:111:9: 111:41 (#0),
                },
            ),
        ),
        ty: &'{erased} error::Category,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:111:28: 111:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:111:9: 111:41 (#0),
                },
            ),
        ),
        ty: error::Category,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:111:28: 111:41 (#0),
            scope: scope[0],
        },
    },
]