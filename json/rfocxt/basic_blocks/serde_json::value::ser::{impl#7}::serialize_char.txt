[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:551:25: 551:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = alloc::string::String::new() -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _4,
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:552:13: 552:26 (#0),
                    scope: scope[1],
                },
                kind: _5 = alloc::string::String::push(move _6, move _7) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            _3 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:554:9: 554:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = core::result::Result::<alloc::string::String, error::Error>::Ok(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:554:10: 554:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:555:6: 555:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:554:9: 554:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:549:5: 555:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<alloc::string::String, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:549:45: 549:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: value::ser::MapKeySerializer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:549:23: 549:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:549:36: 549:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:549:29: 549:34 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:549:29: 549:34 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:549:29: 549:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:550:12: 554:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:551:25: 551:38 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:551:17: 551:22 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:551:17: 551:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:552:13: 552:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:552:13: 552:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:552:20: 552:25 (#0),
            scope: scope[0],
        },
    },
]