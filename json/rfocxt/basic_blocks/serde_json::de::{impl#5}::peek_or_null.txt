[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:224:17: 224:28 (#0),
                    scope: scope[0],
                },
                kind: _4 = de::Deserializer::<R>::peek(move _5) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _6 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#10),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:224:17: 224:28 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#10),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_4 as Err).0: error::Error),
            StorageLive(_10),
            _10 = move _8,
            _0 = core::result::Result::<u8, error::Error>::Err(move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#10),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_4 as Ok).0: core::option::Option<u8>),
            _3 = _7,
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:224:12: 224:48 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<u8>::unwrap_or(move _3, const 0_u8) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#10),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = core::result::Result::<u8, error::Error>::Ok(move _2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:225:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:225:6: 225:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:225:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:225:6: 225:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:225:6: 225:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#10),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:225:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:223:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u8, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:223:35: 223:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:223:21: 223:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:224:12: 224:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:224:9: 224:49 (#0),
                },
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#10),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:224:9: 224:49 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::option::Option<u8>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:224:17: 224:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:224:9: 224:49 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:224:17: 224:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#10),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/de.rs:224:17: 224:28 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#10),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#10),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/de.rs:224:17: 224:28 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#10),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#10),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:224:9: 224:49 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#10),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#10),
            scope: scope[0],
        },
    },
]