[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:112:13: 112:17 (#0),
                    scope: scope[0],
                },
                kind: _4 = <alloc::string::String as core::ops::Index<core::ops::RangeFull>>::index(move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            _7 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:112:9: 112:35 (#0),
                    scope: scope[0],
                },
                kind: _0 = <str as value::index::Index>::index_into_mut(move _3, move _7) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:113:6: 113:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:111:5: 113:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:111:55: 111:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:111:27: 111:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/index.rs:111:37: 111:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/index.rs:111:34: 111:35 (#0),
                            ),
                        ),
                        pat_span: src/value/index.rs:111:34: 111:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:111:34: 111:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:112:9: 112:35 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:112:9: 112:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:112:9: 112:35 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:112:13: 112:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:112:9: 112:35 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:112:9: 112:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:112:9: 112:35 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:112:14: 112:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:112:9: 112:35 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:112:33: 112:34 (#0),
            scope: scope[0],
        },
    },
]