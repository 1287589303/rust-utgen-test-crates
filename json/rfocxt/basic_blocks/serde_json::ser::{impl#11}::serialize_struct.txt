[
    BasicBlockData {
        statements: [
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1132:13: 1132:35 (#0),
                    scope: scope[0],
                },
                kind: _4 = ser::key_must_be_a_string() -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<serde::ser::Impossible<(), error::Error>, error::Error>::Err(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1132:35: 1132:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1133:6: 1133:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1131:5: 1133:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<serde::ser::Impossible<(), error::Error>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1131:68: 1131:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: ser::MapKeySerializer<'{erased}, W/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1131:25: 1131:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:1131:38: 1131:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:1131:31: 1131:36 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:1131:31: 1131:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1131:31: 1131:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:1131:58: 1131:63 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:1131:52: 1131:56 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:1131:52: 1131:56 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1131:52: 1131:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1132:13: 1132:35 (#0),
            scope: scope[0],
        },
    },
]