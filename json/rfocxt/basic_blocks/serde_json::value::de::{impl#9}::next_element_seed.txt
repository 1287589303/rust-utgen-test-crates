[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: alloc::vec::IntoIter<value::Value>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:633:15: 633:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = <alloc::vec::IntoIter<value::Value> as core::iter::Iterator>::next(move _4) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:633:9: 633:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:633:15: 633:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:13: 634:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = core::option::Option::<<T as serde::de::DeserializeSeed<'_>>::Value>::None,
            _0 = core::result::Result::<core::option::Option<<T as serde::de::DeserializeSeed<'_>>::Value>, error::Error>::Ok(move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:635:28: 635:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_3 as Some).0: value::Value),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _2,
            StorageLive(_9),
            _9 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:28: 634:51 (#0),
                    scope: scope[1],
                },
                kind: _7 = <T as serde::de::DeserializeSeed<'_>>::deserialize::<value::Value>(move _8, move _9) -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:28: 634:61 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::result::Result::<<T as serde::de::DeserializeSeed<'_>>::Value, error::Error>::map::<core::option::Option<<T as serde::de::DeserializeSeed<'_>>::Value>, fn(<T as serde::de::DeserializeSeed<'_>>::Value) -> core::option::Option<<T as serde::de::DeserializeSeed<'_>>::Value> {core::option::Option::<<T as serde::de::DeserializeSeed<'_>>::Value>::Some}>(move _7, core::option::Option::<<T as serde::de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:60: 634:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:60: 634:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:635:28: 635:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:637:5: 637:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:637:5: 637:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:637:6: 637:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:60: 634:61 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:50: 634:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:50: 634:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:634:60: 634:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:637:5: 637:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:637:5: 637:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:629:5: 637:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) })>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:629:52: 629:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut value::de::SeqDeserializer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:629:29: 629:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:629:46: 629:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:629:40: 629:44 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:629:40: 629:44 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:629:40: 629:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:633:9: 636:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:633:15: 633:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:633:9: 636:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::IntoIter<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:633:15: 633:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:634:13: 634:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/value/de.rs:633:15: 633:31 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:634:13: 634:24 (#0),
                    },
                ),
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:634:18: 634:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:633:9: 636:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:634:28: 634:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:633:9: 636:10 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:634:28: 634:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:633:9: 636:10 (#0),
                },
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:634:45: 634:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:635:24: 635:28 (#0),
            scope: scope[0],
        },
    },
]