[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1163:19: 1163:34 (#0),
                    scope: scope[0],
                },
                kind: _2 = <&map::Map<alloc::string::String, value::Value> as core::iter::IntoIterator>::into_iter(move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = core::option::Option::<&value::Value>::None,
            _0 = value::de::MapRefDeserializer::<'_> { iter: move _2, value: move _4 },
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1166:6: 1166:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1161:5: 1166:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: value::de::MapRefDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1161:45: 1161:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:1161:17: 1161:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1161:12: 1161:15 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1161:12: 1161:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1161:12: 1161:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::Iter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1163:19: 1163:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1162:9: 1165:10 (#0),
                },
            ),
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1163:19: 1163:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1164:20: 1164:24 (#0),
            scope: scope[0],
        },
    },
]