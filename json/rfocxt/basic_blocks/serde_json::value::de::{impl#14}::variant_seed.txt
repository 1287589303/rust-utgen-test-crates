[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*(_1.0: &str)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1046:23: 1046:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = <&str as serde::de::IntoDeserializer<'_, error::Error>>::into_deserializer(move _4) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = (_1.1: core::option::Option<&value::Value>),
            _5 = value::de::VariantRefDeserializer::<'_> { value: move _6 },
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _2,
            StorageLive(_9),
            _9 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1048:9: 1048:34 (#0),
                    scope: scope[2],
                },
                kind: _7 = <V as serde::de::DeserializeSeed<'_>>::deserialize::<serde::de::value::StrDeserializer<'_, error::Error>>(move _8, move _9) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
            _10 = {closure@src/value/de.rs:1048:39: 1048:42} { visitor: move _5 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1048:9: 1048:56 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::result::Result::<<V as serde::de::DeserializeSeed<'_>>::Value, error::Error>::map::<(<V as serde::de::DeserializeSeed<'_>>::Value, value::de::VariantRefDeserializer<'_>), {closure@src/value/de.rs:1048:39: 1048:42}>(move _7, move _10) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1049:5: 1049:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1049:6: 1049:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1048:55: 1048:56 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1048:33: 1048:34 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1049:5: 1049:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1042:5: 1049:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }), value::de::VariantRefDeserializer<'{erased}>), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1042:42: 1042:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: value::de::EnumRefDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1042:24: 1042:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:1042:36: 1042:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1042:30: 1042:34 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1042:30: 1042:34 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1042:30: 1042:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1046:23: 1046:55 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1046:13: 1046:20 (#0),
                    },
                ),
            ),
        ),
        ty: serde::de::value::StrDeserializer<'{erased}, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1046:13: 1046:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1046:23: 1046:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1047:23: 1047:67 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1047:13: 1047:20 (#0),
                    },
                ),
            ),
        ),
        ty: value::de::VariantRefDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1047:13: 1047:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1047:55: 1047:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1048:9: 1048:56 (#0),
                },
            ),
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1048:9: 1048:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1048:9: 1048:56 (#0),
                },
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1048:9: 1048:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1048:9: 1048:56 (#0),
                },
            ),
        ),
        ty: serde::de::value::StrDeserializer<'{erased}, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1048:26: 1048:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1048:9: 1048:56 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1353 ~ serde_json[c3d0]::value::de::{impl#14}::variant_seed::{closure#0}),
            [
                '{erased},
                V/#1,
                i32,
                Binder { value: extern "RustCall" fn((Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }),)) -> (Alias(Projection, AliasTy { args: [V/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }), value::de::VariantRefDeserializer<'{erased}>), bound_vars: [] },
                (value::de::VariantRefDeserializer<'{erased}>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1048:39: 1048:55 (#0),
            scope: scope[0],
        },
    },
]