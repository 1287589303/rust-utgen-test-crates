[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:323:31: 323:54 (#0),
                    scope: scope[0],
                },
                kind: _5 = de::Deserializer::<R>::parse_whitespace(move _6) -> [return: bb1, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _7 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#13),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:323:31: 323:54 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#13),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_5 as Err).0: error::Error),
            StorageLive(_11),
            _11 = move _9,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#13),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb6, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = ((_5 as Ok).0: core::option::Option<u8>),
            _4 = _8,
            StorageDead(_8),
            PlaceMention(_4),
            _12 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#13),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#13),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb57, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#13),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:324:13: 324:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
            StorageLive(_17),
            _17 = error::ErrorCode::EofWhileParsingValue,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:326:28: 326:76 (#0),
                    scope: scope[0],
                },
                kind: _15 = de::Deserializer::<R>::peek_error(move _16, move _17) -> [return: bb11, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_4 as Some).0: u8),
            _3 = _13,
            StorageDead(_13),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:328:10: 328:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb13, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:326:76: 326:77 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb12, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:326:17: 326:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_18),
            PlaceMention(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:330:21: 330:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(_3) -> [45: bb15, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut (*_1),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &_2,
            _44 = &(*_45),
            _43 = move _44 as &dyn serde::de::Expected (PointerCoercion(Unsize)),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:336:22: 336:54 (#0),
                    scope: scope[1],
                },
                kind: _41 = de::Deserializer::<R>::peek_invalid_type(move _42, move _43) -> [return: bb38, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:331:13: 331:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = Le(const 48_u8, _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:13: 335:24 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _19) -> [0: bb14, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:13: 335:24 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = Le(_3, const 57_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:13: 335:24 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb14, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:332:17: 332:32 (#0),
                    scope: scope[1],
                },
                kind: _21 = de::Deserializer::<R>::eat_char(move _22) -> [return: bb20, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:333:22: 333:47 (#0),
                    scope: scope[1],
                },
                kind: _24 = de::Deserializer::<R>::parse_integer(move _25, const false) -> [return: bb21, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _26 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#14),
                    scope: scope[1],
                },
                kind: switchInt(move _26) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:333:22: 333:47 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#14),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = move ((_24 as Err).0: error::Error),
            StorageLive(_30),
            _30 = move _28,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#14),
                    scope: scope[7],
                },
                kind: drop(_30) -> [return: bb26, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = move ((_24 as Ok).0: de::ParserNumber),
            _23 = move _27,
            StorageDead(_27),
            StorageLive(_31),
            _31 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:333:17: 333:63 (#0),
                    scope: scope[1],
                },
                kind: _18 = de::ParserNumber::visit::<'_, V>(move _23, move _31) -> [return: bb27, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#14),
                    scope: scope[1],
                },
                kind: drop(_28) -> [return: bb54, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:334:13: 334:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb28, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:334:13: 334:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:33: 335:57 (#0),
                    scope: scope[1],
                },
                kind: _33 = de::Deserializer::<R>::parse_integer(move _34, const true) -> [return: bb30, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            _35 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#15),
                    scope: scope[1],
                },
                kind: switchInt(move _35) -> [0: bb32, 1: bb33, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:33: 335:57 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#15),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = move ((_33 as Err).0: error::Error),
            StorageLive(_39),
            _39 = move _37,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#15),
                    scope: scope[9],
                },
                kind: drop(_39) -> [return: bb35, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = move ((_33 as Ok).0: de::ParserNumber),
            _32 = move _36,
            StorageDead(_36),
            StorageLive(_40),
            _40 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:28: 335:73 (#0),
                    scope: scope[1],
                },
                kind: _18 = de::ParserNumber::visit::<'_, V>(move _32, move _40) -> [return: bb36, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#15),
                    scope: scope[1],
                },
                kind: drop(_37) -> [return: bb52, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:72: 335:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb37, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:72: 335:73 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _18 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:336:54: 336:55 (#0),
                    scope: scope[1],
                },
                kind: drop(_41) -> [return: bb39, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:336:54: 336:55 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _18),
            PlaceMention(_18),
            _46 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:339:9: 339:20 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _46) -> [0: bb42, 1: bb43, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:339:15: 339:20 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:340:13: 340:22 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = move ((_18 as Err).0: error::Error),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &(*_1),
            StorageLive(_52),
            _52 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:341:29: 341:51 (#0),
                    scope: scope[11],
                },
                kind: _50 = de::Deserializer::<R>::fix_position(move _51, move _52) -> [return: bb47, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = move ((_18 as Ok).0: <V as serde::de::Visitor<'_>>::Value),
            StorageLive(_48),
            _48 = move _47,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Ok(move _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:340:34: 340:35 (#0),
                    scope: scope[10],
                },
                kind: drop(_48) -> [return: bb45, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:340:34: 340:35 (#0),
                    scope: scope[5],
                },
                kind: drop(_47) -> [return: bb46, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:340:34: 340:35 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:341:51: 341:52 (#0),
                    scope: scope[11],
                },
                kind: drop(_50) -> [return: bb48, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:341:51: 341:52 (#0),
                    scope: scope[5],
                },
                kind: drop(_49) -> [return: bb49, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:341:51: 341:52 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:343:5: 343:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb51, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:343:5: 343:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb61, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:72: 335:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb53, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:334:13: 334:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb55, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:328:10: 328:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb59, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:343:5: 343:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb61, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:343:6: 343:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:341:50: 341:51 (#0),
                    scope: scope[11],
                },
                kind: drop(_52) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:341:51: 341:52 (#0),
                    scope: scope[5],
                },
                kind: drop(_49) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:340:34: 340:35 (#0),
                    scope: scope[5],
                },
                kind: drop(_47) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:343:5: 343:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:72: 335:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_40) -> [return: bb68, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#15),
                    scope: scope[1],
                },
                kind: drop(_37) -> [return: bb68, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:335:72: 335:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:333:62: 333:63 (#0),
                    scope: scope[1],
                },
                kind: drop(_31) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#14),
                    scope: scope[1],
                },
                kind: drop(_28) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:334:13: 334:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:326:75: 326:76 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#13),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:328:10: 328:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:343:5: 343:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb76, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:319:5: 343:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:319:73: 319:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:319:47: 319:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/de.rs:319:67: 319:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:319:58: 319:65 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:319:58: 319:65 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:319:58: 319:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:323:20: 328:10 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:323:13: 323:17 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:323:13: 323:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#13),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<u8>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:323:31: 323:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:323:31: 323:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#13),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/de.rs:323:31: 323:54 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#13),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#13),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/de.rs:323:31: 323:54 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#13),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#13),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#13),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#13),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:324:13: 324:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/lib.rs:408:9: 411:10 (#13),
                            ),
                        ),
                        pat_span: src/de.rs:324:13: 324:20 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:324:18: 324:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:325:21: 327:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:326:28: 326:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:326:28: 326:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: error::ErrorCode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:326:44: 326:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:330:21: 337:10 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:330:13: 330:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:330:13: 330:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:335:13: 335:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:335:13: 335:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:332:17: 332:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:332:17: 332:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:333:17: 333:63 (#0),
                },
            ),
        ),
        ty: de::ParserNumber,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#14),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:333:17: 333:63 (#0),
                },
            ),
        ),
        ty: core::result::Result<de::ParserNumber, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:333:22: 333:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:333:17: 333:63 (#0),
                },
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:333:22: 333:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#14),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/de.rs:333:22: 333:47 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#14),
                    },
                ),
            ),
        ),
        ty: de::ParserNumber,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#14),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/de.rs:333:22: 333:47 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#14),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#14),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:333:17: 333:63 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#14),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#14),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:333:17: 333:63 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:333:55: 333:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: de::ParserNumber,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#15),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<de::ParserNumber, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:335:33: 335:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:335:33: 335:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#15),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                src/de.rs:335:33: 335:57 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#15),
                    },
                ),
            ),
        ),
        ty: de::ParserNumber,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#15),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                src/de.rs:335:33: 335:57 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#15),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#15),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#15),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#15),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:335:65: 335:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:336:22: 336:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:336:22: 336:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(serde::de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:336:45: 336:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:336:45: 336:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:336:45: 336:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:340:13: 340:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/de.rs:339:15: 339:20 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:340:13: 340:22 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:340:16: 340:21 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:340:29: 340:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/de.rs:339:15: 339:20 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:341:13: 341:21 (#0),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:341:17: 341:20 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:341:29: 341:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:339:9: 342:10 (#0),
                },
            ),
        ),
        ty: &'{erased} de::Deserializer<R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:341:29: 341:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:339:9: 342:10 (#0),
                },
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:341:47: 341:50 (#0),
            scope: scope[0],
        },
    },
]