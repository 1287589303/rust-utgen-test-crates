[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:247:25: 247:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::fmt::Formatter::<'_>::alternate(move _4) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
            _5 = <value::Value as core::fmt::Display>::fmt::WriterFormatter::<'_, '_> { inner: move _6 },
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            _7 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:249:12: 249:21 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _7) -> [0: bb5, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _5,
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:251:13: 251:56 (#0),
                    scope: scope[2],
                },
                kind: _8 = ser::to_writer_pretty::<&mut <value::Value as core::fmt::Display>::fmt::WriterFormatter<'_, '_>, value::Value>(move _9, move _10) -> [return: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_11),
            _11 = {closure@src/value/mod.rs:251:65: 251:68},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:251:13: 251:80 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::result::Result::<(), error::Error>::map_err::<core::fmt::Error, {closure@src/value/mod.rs:251:65: 251:68}>(move _8, move _11) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:249:9: 255:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _5,
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:254:13: 254:49 (#0),
                    scope: scope[2],
                },
                kind: _12 = ser::to_writer::<&mut <value::Value as core::fmt::Display>::fmt::WriterFormatter<'_, '_>, value::Value>(move _13, move _14) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_15),
            _15 = {closure@src/value/mod.rs:254:58: 254:61},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:254:13: 254:73 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::result::Result::<(), error::Error>::map_err::<core::fmt::Error, {closure@src/value/mod.rs:254:58: 254:61}>(move _12, move _15) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:249:9: 255:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:256:6: 256:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:254:72: 254:73 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:251:79: 251:80 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:222:5: 256:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:222:46: 222:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:222:12: 222:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/mod.rs:222:22: 222:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/mod.rs:222:19: 222:20 (#0),
                            ),
                        ),
                        pat_span: src/value/mod.rs:222:19: 222:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:222:19: 222:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/mod.rs:247:25: 247:38 (#0),
                            ),
                        ),
                        pat_span: src/value/mod.rs:247:13: 247:22 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:247:13: 247:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:247:25: 247:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/mod.rs:248:22: 248:50 (#0),
                            ),
                        ),
                        pat_span: src/value/mod.rs:248:13: 248:19 (#0),
                    },
                ),
            ),
        ),
        ty: <value::Value as core::fmt::Display>::fmt::WriterFormatter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:248:13: 248:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:248:47: 248:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:249:9: 255:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:249:12: 249:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:251:13: 251:80 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:251:13: 251:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:251:13: 251:80 (#0),
                },
            ),
        ),
        ty: &'{erased} mut <value::Value as core::fmt::Display>::fmt::WriterFormatter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:251:42: 251:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:251:13: 251:80 (#0),
                },
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:251:51: 251:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:251:13: 251:80 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1072 ~ serde_json[c3d0]::value::{impl#1}::fmt::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((error::Error,)) -> core::fmt::Error, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:251:65: 251:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:254:13: 254:73 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:254:13: 254:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:254:13: 254:73 (#0),
                },
            ),
        ),
        ty: &'{erased} mut <value::Value as core::fmt::Display>::fmt::WriterFormatter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:254:35: 254:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:254:13: 254:73 (#0),
                },
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:254:44: 254:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:254:13: 254:73 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1073 ~ serde_json[c3d0]::value::{impl#1}::fmt::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((error::Error,)) -> core::fmt::Error, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:254:58: 254:72 (#0),
            scope: scope[0],
        },
    },
]