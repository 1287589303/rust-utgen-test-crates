[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2174:19: 2174:42 (#0),
                    scope: scope[0],
                },
                kind: _3 = ser::Serializer::<W>::new(move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            _6 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2175:5: 2175:30 (#0),
                    scope: scope[1],
                },
                kind: _0 = <T as serde::Serialize>::serialize::<&mut ser::Serializer<W>>(move _5, move _6) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2176:1: 2176:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2176:1: 2176:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2176:2: 2176:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2176:1: 2176:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2174:41: 2174:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2176:1: 2176:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:2169:1: 2176:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2169:49: 2169:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:2169:32: 2169:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:2169:24: 2169:30 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:2169:24: 2169:30 (#0),
                    },
                ),
            ),
        ),
        ty: W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2169:24: 2169:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:2169:42: 2169:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:2169:35: 2169:40 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:2169:35: 2169:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2169:35: 2169:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:2174:19: 2174:42 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:2174:9: 2174:16 (#0),
                    },
                ),
            ),
        ),
        ty: ser::Serializer<W/#0, ser::CompactFormatter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2174:9: 2174:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2174:35: 2174:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2175:5: 2175:30 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2175:5: 2175:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:2175:5: 2175:30 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ser::Serializer<W/#0, ser::CompactFormatter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:2175:21: 2175:29 (#0),
            scope: scope[0],
        },
    },
]