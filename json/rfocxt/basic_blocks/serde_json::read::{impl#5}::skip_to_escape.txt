[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*_1).1: usize),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*((*_1).0: &[u8])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:434:26: 434:42 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb1, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _4 = Eq(move _5, move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:434:12: 434:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:436:9: 438:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = ((*_1).1: usize),
            _11 = Len((*((*_1).0: &[u8]))),
            _12 = Lt(_10, _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:435:26: 435:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = (*((*_1).0: &[u8]))[_10],
            StorageLive(_13),
            _13 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:435:16: 435:76 (#0),
                    scope: scope[0],
                },
                kind: _8 = read::is_escape(move _9, move _13) -> [return: bb5, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:435:16: 435:76 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:436:9: 438:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_9),
            _3 = const (),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            _15 = AddWithOverflow(((*_1).1: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:439:9: 439:24 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb9, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_15.0: usize),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*((*_1).0: &[u8])),
            StorageLive(_19),
            StorageLive(_20),
            _20 = ((*_1).1: usize),
            _19 = core::ops::RangeFrom::<usize> { start: move _20 },
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:441:31: 441:45 (#0),
                    scope: scope[0],
                },
                kind: _17 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _18, move _19) -> [return: bb10, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = &(*_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:443:13: 443:38 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _22) -> [0: bb11, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:444:27: 444:61 (#0),
                    scope: scope[1],
                },
                kind: _25 = memchr::memchr2(const 34_u8, const 92_u8, move _26) -> [return: bb12, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:444:72: 444:82 (#0),
                    scope: scope[1],
                },
                kind: _27 = core::slice::<impl [u8]>::len(move _28) -> [return: bb13, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:444:27: 444:83 (#0),
                    scope: scope[1],
                },
                kind: _24 = core::option::Option::<usize>::unwrap_or(move _25, move _27) -> [return: bb14, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
            _29 = AddWithOverflow(((*_1).1: usize), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:444:13: 444:83 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _24) -> [success: bb15, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_29.0: usize),
            StorageDead(_24),
            _0 = const (),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = const (),
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:22: 463:45 (#0),
                    scope: scope[1],
                },
                kind: _32 = core::slice::<impl [u8]>::chunks_exact(move _33, const read::SliceRead::<'a>::skip_to_escape::STEP) -> [return: bb17, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:22: 463:45 (#949),
                    scope: scope[1],
                },
                kind: _31 = <core::slice::ChunksExact<'_, u8> as core::iter::IntoIterator>::into_iter(move _32) -> [return: bb18, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            StorageLive(_34),
            _34 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:9: 477:10 (#948),
                    scope: scope[2],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:9: 477:10 (#948),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb20, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut _34,
            _38 = &mut (*_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:22: 463:45 (#949),
                    scope: scope[2],
                },
                kind: _37 = <core::slice::ChunksExact<'_, u8> as core::iter::Iterator>::next(move _38) -> [return: bb21, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            PlaceMention(_37),
            _40 = discriminant(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:22: 463:45 (#949),
                    scope: scope[2],
                },
                kind: switchInt(move _40) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:22: 463:45 (#949),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:9: 477:10 (#948),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = ((_37 as Some).0: &[u8]),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:464:46: 464:62 (#0),
                    scope: scope[3],
                },
                kind: _45 = <&[u8] as core::convert::TryInto<[u8; 8]>>::try_into(move _46) -> [return: bb26, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = const (),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            StorageLive(_101),
            _101 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:479:23: 479:33 (#0),
                    scope: scope[1],
                },
                kind: _100 = core::slice::<impl [u8]>::len(move _101) -> [return: bb46, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:464:46: 464:71 (#0),
                    scope: scope[3],
                },
                kind: _44 = core::result::Result::<[u8; 8], core::array::TryFromSliceError>::unwrap(move _45) -> [return: bb27, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:464:25: 464:72 (#0),
                    scope: scope[3],
                },
                kind: _43 = core::num::<impl u64>::from_le_bytes(move _44) -> [return: bb28, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            FakeRead(ForLet(None), _43),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _43,
            StorageLive(_50),
            _51 = MulWithOverflow(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, const 32_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:465:52: 465:68 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_51.1: bool), "attempt to compute `{} * {}`, which would overflow", const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, const 32_u64) -> [success: bb29, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = move (_51.0: u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:465:33: 465:69 (#0),
                    scope: scope[4],
                },
                kind: _48 = core::num::<impl u64>::wrapping_sub(move _49, move _50) -> [return: bb30, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_52),
            StorageLive(_53),
            _53 = _43,
            _52 = Not(move _53),
            StorageDead(_53),
            _47 = BitAnd(move _48, move _52),
            StorageDead(_52),
            StorageDead(_48),
            FakeRead(ForLet(None), _47),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _43,
            StorageLive(_56),
            StorageLive(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:466:52: 466:69 (#0),
                    scope: scope[5],
                },
                kind: _57 = <u64 as core::convert::From<u8>>::from(const 34_u8) -> [return: bb31, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = MulWithOverflow(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:466:39: 466:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, move _57) -> [success: bb32, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = move (_58.0: u64),
            StorageDead(_57),
            _54 = BitXor(move _55, move _56),
            StorageDead(_56),
            StorageDead(_55),
            FakeRead(ForLet(None), _54),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:467:34: 467:69 (#0),
                    scope: scope[6],
                },
                kind: _60 = core::num::<impl u64>::wrapping_sub(move _61, const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES) -> [return: bb33, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _54,
            _62 = Not(move _63),
            StorageDead(_63),
            _59 = BitAnd(move _60, move _62),
            StorageDead(_62),
            StorageDead(_60),
            FakeRead(ForLet(None), _59),
            StorageLive(_64),
            StorageLive(_65),
            _65 = _43,
            StorageLive(_66),
            StorageLive(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:468:56: 468:74 (#0),
                    scope: scope[7],
                },
                kind: _67 = <u64 as core::convert::From<u8>>::from(const 92_u8) -> [return: bb34, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = MulWithOverflow(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:468:43: 468:75 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_68.1: bool), "attempt to compute `{} * {}`, which would overflow", const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, move _67) -> [success: bb35, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = move (_68.0: u64),
            StorageDead(_67),
            _64 = BitXor(move _65, move _66),
            StorageDead(_66),
            StorageDead(_65),
            FakeRead(ForLet(None), _64),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:469:38: 469:77 (#0),
                    scope: scope[8],
                },
                kind: _70 = core::num::<impl u64>::wrapping_sub(move _71, const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES) -> [return: bb36, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = _64,
            _72 = Not(move _73),
            StorageDead(_73),
            _69 = BitAnd(move _70, move _72),
            StorageDead(_72),
            StorageDead(_70),
            FakeRead(ForLet(None), _69),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = _47,
            StorageLive(_78),
            _78 = _59,
            _76 = BitOr(move _77, move _78),
            StorageDead(_78),
            StorageDead(_77),
            StorageLive(_79),
            _79 = _69,
            _75 = BitOr(move _76, move _79),
            StorageDead(_79),
            StorageDead(_76),
            StorageLive(_80),
            _81 = const 7_i32 as u32 (IntToInt),
            _82 = Lt(move _81, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:470:82: 470:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _82, "attempt to shift left by `{}`, which would overflow", const 7_i32) -> [success: bb37, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _80 = Shl(const read::SliceRead::<'a>::skip_to_escape::ONE_BYTES, const 7_i32),
            _74 = BitAnd(move _75, move _80),
            StorageDead(_80),
            StorageDead(_75),
            FakeRead(ForLet(None), _74),
            StorageLive(_83),
            StorageLive(_84),
            _84 = _74,
            _83 = Ne(move _84, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:471:16: 471:27 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _83) -> [0: bb45, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &(*_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:473:39: 473:53 (#0),
                    scope: scope[10],
                },
                kind: _88 = core::slice::<impl [u8]>::as_ptr(move _89) -> [return: bb39, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = &(*((*_1).0: &[u8])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:473:66: 473:85 (#0),
                    scope: scope[10],
                },
                kind: _90 = core::slice::<impl [u8]>::as_ptr(move _91) -> [return: bb40, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:473:39: 473:86 (#0),
                    scope: scope[10],
                },
                kind: _87 = core::ptr::const_ptr::<impl *const u8>::offset_from(move _88, move _90) -> [return: bb41, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_88),
            _86 = move _87 as usize (IntToInt),
            StorageDead(_87),
            StorageLive(_92),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:474:23: 474:46 (#0),
                    scope: scope[10],
                },
                kind: _94 = core::num::<impl u64>::trailing_zeros(move _95) -> [return: bb42, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            _93 = move _94 as usize (IntToInt),
            StorageDead(_94),
            _96 = Eq(const 8_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:474:23: 474:59 (#0),
                    scope: scope[10],
                },
                kind: assert(!move _96, "attempt to divide `{}` by zero", _93) -> [success: bb43, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _92 = Div(move _93, const 8_usize),
            StorageDead(_93),
            _97 = AddWithOverflow(_86, _92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:473:30: 474:59 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_97.1: bool), "attempt to compute `{} + {}`, which would overflow", move _86, move _92) -> [success: bb44, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_97.0: usize),
            StorageDead(_92),
            StorageDead(_86),
            _0 = const (),
            StorageDead(_83),
            StorageDead(_74),
            StorageDead(_69),
            StorageDead(_64),
            StorageDead(_59),
            StorageDead(_54),
            StorageDead(_47),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            _36 = const (),
            StorageDead(_83),
            StorageDead(_74),
            StorageDead(_69),
            StorageDead(_64),
            StorageDead(_59),
            StorageDead(_54),
            StorageDead(_47),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:463:9: 477:10 (#948),
                    scope: scope[2],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            _102 = Eq(const read::SliceRead::<'a>::skip_to_escape::STEP, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:479:23: 479:40 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _102, "attempt to divide `{}` by zero", _100) -> [success: bb47, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _99 = Div(move _100, const read::SliceRead::<'a>::skip_to_escape::STEP),
            StorageDead(_100),
            _103 = MulWithOverflow(_99, const read::SliceRead::<'a>::skip_to_escape::STEP),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:479:23: 479:47 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_103.1: bool), "attempt to compute `{} * {}`, which would overflow", move _99, const read::SliceRead::<'a>::skip_to_escape::STEP) -> [success: bb48, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _98 = move (_103.0: usize),
            StorageDead(_99),
            _104 = AddWithOverflow(((*_1).1: usize), _98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:479:9: 479:47 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_104.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _98) -> [success: bb49, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_104.0: usize),
            StorageDead(_98),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:480:9: 480:35 (#0),
                    scope: scope[1],
                },
                kind: _105 = read::SliceRead::<'_>::skip_to_escape_slow(move _106) -> [return: bb50, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
            _0 = const (),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:481:6: 481:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:481:6: 481:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:432:5: 481:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:432:66: 432:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut read::SliceRead<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:432:23: 432:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/read.rs:432:61: 432:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:432:34: 432:59 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:432:34: 432:59 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:432:34: 432:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:434:9: 438:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:434:12: 434:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:434:12: 434:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:434:26: 434:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:434:26: 434:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:435:16: 435:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:435:26: 435:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:435:37: 435:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:435:26: 435:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:435:26: 435:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:435:50: 435:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:436:9: 438:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:439:9: 439:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:441:20: 441:45 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:441:13: 441:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:441:13: 441:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:441:31: 441:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:441:21: 441:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:441:32: 441:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:441:32: 441:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:443:9: 446:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:443:13: 443:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:443:39: 446:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:444:27: 444:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:444:27: 444:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:444:56: 444:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:444:72: 444:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:444:72: 444:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:444:13: 444:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:9: 477:10 (#948),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#949),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                src/read.rs:463:22: 463:45 (#949),
                            ),
                        ),
                        pat_span: src/read.rs:463:22: 463:45 (#949),
                    },
                ),
            ),
        ),
        ty: core::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#949),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:432:5: 481:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#949),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#949),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#949),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:22: 463:45 (#949),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:9: 477:10 (#948),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:9: 477:10 (#948),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _37,
                                ),
                                src/read.rs:463:22: 463:45 (#949),
                            ),
                        ),
                        pat_span: src/read.rs:463:13: 463:18 (#950),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:463:13: 463:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:464:25: 464:72 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:464:17: 464:22 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:464:17: 464:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:464:46: 464:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 8_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:464:46: 464:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:464:46: 464:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:465:33: 465:78 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:465:17: 465:30 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:17: 465:30 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:33: 465:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:33: 465:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:52: 465:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:52: 465:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:72: 465:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:465:73: 465:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:466:31: 466:70 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:466:17: 466:28 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:466:17: 466:28 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:466:31: 466:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:466:39: 466:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:466:52: 466:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:466:39: 466:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:467:34: 467:84 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:467:17: 467:31 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:467:17: 467:31 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:467:34: 467:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:467:34: 467:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:467:72: 467:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:467:73: 467:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:468:35: 468:75 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:468:17: 468:32 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:468:17: 468:32 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:468:35: 468:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:468:43: 468:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:468:56: 468:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:468:43: 468:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:469:38: 469:96 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:469:17: 469:35 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:469:17: 469:35 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:469:38: 469:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:469:38: 469:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:469:80: 469:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:469:81: 469:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:470:26: 470:98 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:470:17: 470:23 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:17: 470:23 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:26: 470:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:27: 470:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:27: 470:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:43: 470:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:60: 470:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:82: 470:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:82: 470:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:470:82: 470:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/read.rs:471:13: 476:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:471:16: 471:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/read.rs:471:13: 476:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:471:16: 471:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/read.rs:471:13: 476:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:471:28: 476:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:30: 473:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:30: 473:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:473:39: 473:86 (#0),
                },
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:39: 473:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:473:39: 473:86 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:39: 473:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:473:39: 473:86 (#0),
                },
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:66: 473:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:473:39: 473:86 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:66: 473:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:474:23: 474:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:474:23: 474:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:474:23: 474:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:474:23: 474:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:474:23: 474:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:473:30: 474:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:23: 479:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:23: 479:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:23: 479:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:23: 479:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:23: 479:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:23: 479:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:479:9: 479:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:480:9: 480:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut read::SliceRead<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:480:9: 480:13 (#0),
            scope: scope[0],
        },
    },
]