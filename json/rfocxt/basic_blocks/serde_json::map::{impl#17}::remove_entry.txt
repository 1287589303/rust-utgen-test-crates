[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move (_1.0: alloc::collections::btree_map::OccupiedEntry<'_, alloc::string::String, value::Value>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1013:16: 1013:44 (#0),
                    scope: scope[0],
                },
                kind: _0 = alloc::collections::btree_map::OccupiedEntry::<'_, alloc::string::String, value::Value>::remove_entry(move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1014:6: 1014:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1009:5: 1014:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (alloc::string::String, value::Value),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1009:34: 1009:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1009:25: 1009:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1009:50: 1014:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::collections::btree_map::OccupiedEntry<'{erased}, alloc::string::String, value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1013:16: 1013:29 (#0),
            scope: scope[0],
        },
    },
]