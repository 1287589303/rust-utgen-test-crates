[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(*_3),
            StorageLive(_5),
            _5 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:227:9: 227:30 (#0),
                    scope: scope[0],
                },
                kind: _0 = <T as serde::Serialize>::serialize::<&mut ser::Serializer<W, F>>(move _4, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:228:6: 228:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:223:5: 228:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:223:77: 223:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: &'{erased} mut ser::Serializer<W/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:223:36: 223:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:223:49: 223:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:223:42: 223:47 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:223:42: 223:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:223:42: 223:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:223:70: 223:72 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:223:63: 223:68 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:223:63: 223:68 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:223:63: 223:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:227:9: 227:30 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:227:9: 227:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:227:9: 227:30 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ser::Serializer<W/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:227:25: 227:29 (#0),
            scope: scope[0],
        },
    },
]