[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:835:12: 835:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::str::<impl str>::is_empty(move _5) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:835:12: 835:30 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            _7 = &mut (*_1),
            _0 = core::option::Option::<&mut value::Value>::Some(move _7),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:838:13: 838:37 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::str::<impl str>::starts_with::<'_, char>(move _10, const '/') -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:838:13: 838:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = const (),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:841:9: 842:24 (#0),
                    scope: scope[0],
                },
                kind: _15 = core::str::<impl str>::split::<'_, char>(move _16, const '/') -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _0 = core::option::Option::<&mut value::Value>::None,
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:841:9: 843:21 (#0),
                    scope: scope[0],
                },
                kind: _14 = <core::str::Split<'_, char> as core::iter::Iterator>::skip(move _15, const 1_usize) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_17),
            _17 = {closure@src/value/mod.rs:844:18: 844:21},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:841:9: 844:62 (#0),
                    scope: scope[0],
                },
                kind: _13 = <core::iter::Skip<core::str::Split<'_, char>> as core::iter::Iterator>::map::<alloc::string::String, {closure@src/value/mod.rs:844:18: 844:21}>(move _14, move _17) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &mut _13,
            StorageDead(_17),
            StorageDead(_14),
            StorageLive(_18),
            _18 = move _1,
            StorageLive(_19),
            _19 = {closure@src/value/mod.rs:845:29: 845:44},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::iter::Map<core::iter::Skip<core::str::Split<'_, char>>, {closure@src/value/mod.rs:844:18: 844:21}> as core::iter::Iterator>::try_fold::<&mut value::Value, {closure@src/value/mod.rs:845:29: 845:44}, core::option::Option<&mut value::Value>>(move _12, move _18, move _19) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:850:6: 850:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:850:6: 850:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/mod.rs:834:5: 850:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:834:53: 834:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:834:24: 834:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/mod.rs:834:44: 834:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/mod.rs:834:35: 834:42 (#0),
                            ),
                        ),
                        pat_span: src/value/mod.rs:834:35: 834:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:834:35: 834:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:835:9: 837:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:835:12: 835:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:835:12: 835:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:835:31: 837:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:836:25: 836:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:838:9: 840:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:838:13: 838:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:838:13: 838:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:838:38: 840:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::iter::Map<core::iter::Skip<core::str::Split<'{erased}, char>>, Closure(DefId(0:1105 ~ serde_json[c3d0]::value::{impl#2}::pointer_mut::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} str,)) -> alloc::string::String, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:841:9: 844:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::iter::Skip<core::str::Split<'{erased}, char>>, Closure(DefId(0:1105 ~ serde_json[c3d0]::value::{impl#2}::pointer_mut::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} str,)) -> alloc::string::String, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:841:9: 844:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: core::iter::Skip<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:841:9: 843:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:841:9: 842:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:841:9: 841:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1105 ~ serde_json[c3d0]::value::{impl#2}::pointer_mut::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} str,)) -> alloc::string::String, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:844:18: 844:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:845:23: 845:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/mod.rs:841:9: 849:15 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1106 ~ serde_json[c3d0]::value::{impl#2}::pointer_mut::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} mut value::Value, alloc::string::String)) -> core::option::Option<&'{erased} mut value::Value>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/mod.rs:845:29: 849:14 (#0),
            scope: scope[0],
        },
    },
]