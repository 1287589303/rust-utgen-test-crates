[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:13:5: 13:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [2: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:15:14: 15:19 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:14:9: 14:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_1) as Number).0: number::Number),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:14:29: 14:39 (#0),
                    scope: scope[1],
                },
                kind: _6 = number::Number::as_f32(move _7) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &_6,
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _2,
            _9 = core::option::Option::<f32>::Some(move _10),
            _8 = &_9,
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:14:29: 14:54 (#0),
                    scope: scope[1],
                },
                kind: _0 = <core::option::Option<f32> as core::cmp::PartialEq>::eq(move _5, move _8) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:14:53: 14:54 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:17:2: 17:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/partial_eq.rs:12:1: 17:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:12:41: 12:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/partial_eq.rs:12:18: 12:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/partial_eq.rs:12:11: 12:16 (#0),
                            ),
                        ),
                        pat_span: src/value/partial_eq.rs:12:11: 12:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:12:11: 12:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/partial_eq.rs:12:33: 12:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/partial_eq.rs:12:26: 12:31 (#0),
                            ),
                        ),
                        pat_span: src/value/partial_eq.rs:12:26: 12:31 (#0),
                    },
                ),
            ),
        ),
        ty: f32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:12:26: 12:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:9: 14:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/value/partial_eq.rs:13:11: 13:16 (#0),
                            ),
                        ),
                        pat_span: src/value/partial_eq.rs:14:9: 14:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} number::Number,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:23: 14:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/partial_eq.rs:13:5: 16:6 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:29: 14:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/partial_eq.rs:13:5: 16:6 (#0),
                },
            ),
        ),
        ty: core::option::Option<f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:29: 14:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/partial_eq.rs:13:5: 16:6 (#0),
                },
            ),
        ),
        ty: &'{erased} number::Number,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:29: 14:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/partial_eq.rs:13:5: 16:6 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:43: 14:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/partial_eq.rs:13:5: 16:6 (#0),
                },
            ),
        ),
        ty: core::option::Option<f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:43: 14:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: f32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/partial_eq.rs:14:48: 14:53 (#0),
            scope: scope[0],
        },
    },
]