[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*((*_1).0: alloc::boxed::Box<error::ErrorImpl>)).0: error::ErrorCode),
            PlaceMention(_2),
            _3 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:392:9: 392:29 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [1: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<&dyn core::error::Error>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:394:18: 394:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:393:13: 393:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_2) as Io).0: std::io::Error),
            StorageLive(_5),
            _5 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:393:35: 393:47 (#0),
                    scope: scope[1],
                },
                kind: _0 = <std::io::Error as core::error::Error>::source(move _5) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:393:46: 393:47 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:396:6: 396:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:391:5: 396:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:391:25: 391:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:391:15: 391:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:392:9: 395:10 (#0),
                },
            ),
        ),
        ty: &'{erased} error::ErrorCode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:392:15: 392:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:393:13: 393:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/error.rs:392:15: 392:29 (#0),
                            ),
                        ),
                        pat_span: src/error.rs:393:13: 393:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::io::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:393:27: 393:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:392:9: 395:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::io::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:393:35: 393:38 (#0),
            scope: scope[0],
        },
    },
]