[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:22: 182:35 (#0),
                    scope: scope[0],
                },
                kind: _4 = <alloc::vec::Vec<T> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:22: 182:51 (#0),
                    scope: scope[0],
                },
                kind: _3 = <alloc::vec::IntoIter<T> as core::iter::Iterator>::map::<value::Value, fn(T) -> value::Value {<T as core::convert::Into<value::Value>>::into}>(move _4, <T as core::convert::Into<value::Value>>::into) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:22: 182:61 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::iter::Map<alloc::vec::IntoIter<T>, fn(T) -> value::Value {<T as core::convert::Into<value::Value>>::into}> as core::iter::Iterator>::collect::<alloc::vec::Vec<value::Value>>(move _3) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = value::Value::Array(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:61: 182:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:183:5: 183:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:183:6: 183:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:60: 182:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:50: 182:51 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:182:34: 182:35 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:183:5: 183:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/from.rs:181:5: 183:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/from.rs:181:27: 181:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/from.rs:181:16: 181:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/from.rs:181:13: 181:14 (#0),
                            ),
                        ),
                        pat_span: src/value/from.rs:181:13: 181:14 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<T/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/from.rs:181:13: 181:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/from.rs:182:22: 182:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/from.rs:182:9: 182:62 (#0),
                },
            ),
        ),
        ty: core::iter::Map<alloc::vec::IntoIter<T/#0, alloc::alloc::Global>, FnDef(DefId(1:3066 ~ core[a245]::convert::Into::into), [T/#0, value::Value])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/from.rs:182:22: 182:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/from.rs:182:9: 182:62 (#0),
                },
            ),
        ),
        ty: alloc::vec::IntoIter<T/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/from.rs:182:22: 182:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/from.rs:182:9: 182:62 (#0),
                },
            ),
        ),
        ty: alloc::vec::Vec<T/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/from.rs:182:22: 182:23 (#0),
            scope: scope[0],
        },
    },
]