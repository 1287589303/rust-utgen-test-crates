[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: map::Iter<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1176:15: 1176:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::Iter<'_> as core::iter::Iterator>::next(move _4) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1176:9: 1176:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1176:15: 1176:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1177:13: 1177:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = core::option::Option::<<T as serde::de::DeserializeSeed<'_>>::Value>::None,
            _0 = core::result::Result::<core::option::Option<<T as serde::de::DeserializeSeed<'_>>::Value>, error::Error>::Ok(move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1184:28: 1184:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = (((_3 as Some).0: (&alloc::string::String, &value::Value)).0: &alloc::string::String),
            StorageLive(_7),
            _7 = (((_3 as Some).0: (&alloc::string::String, &value::Value)).1: &value::Value),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_7),
            _8 = core::option::Option::<&value::Value>::Some(move _9),
            StorageDead(_9),
            ((*_1).1: core::option::Option<&value::Value>) = move _8,
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1180:41: 1180:46 (#0),
                    scope: scope[1],
                },
                kind: _14 = <alloc::string::String as core::ops::Deref>::deref(move _15) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = &(*_14),
            _12 = &(*_13),
            _11 = alloc::borrow::Cow::<'_, str>::Borrowed(move _12),
            StorageDead(_12),
            _10 = value::de::MapKeyDeserializer::<'_> { key: move _11 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1181:17: 1181:18 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_16),
            StorageLive(_17),
            _17 = move _2,
            StorageLive(_18),
            _18 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1182:17: 1182:41 (#0),
                    scope: scope[2],
                },
                kind: _16 = <T as serde::de::DeserializeSeed<'_>>::deserialize::<value::de::MapKeyDeserializer<'_>>(move _17, move _18) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1182:17: 1182:51 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::result::Result::<<T as serde::de::DeserializeSeed<'_>>::Value, error::Error>::map::<core::option::Option<<T as serde::de::DeserializeSeed<'_>>::Value>, fn(<T as serde::de::DeserializeSeed<'_>>::Value) -> core::option::Option<<T as serde::de::DeserializeSeed<'_>>::Value> {core::option::Option::<<T as serde::de::DeserializeSeed<'_>>::Value>::Some}>(move _16, core::option::Option::<<T as serde::de::DeserializeSeed<'_>>::Value>::Some) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1183:13: 1183:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1183:13: 1183:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1184:28: 1184:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1186:5: 1186:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1186:6: 1186:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1182:50: 1182:51 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1182:40: 1182:41 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1182:40: 1182:41 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1183:13: 1183:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1186:5: 1186:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1172:5: 1186:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) })>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1172:48: 1172:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut value::de::MapRefDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1172:25: 1172:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:1172:42: 1172:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1172:36: 1172:40 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1172:36: 1172:40 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1172:36: 1172:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1176:9: 1185:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<(&'{erased} alloc::string::String, &'{erased} value::Value)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1176:15: 1176:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1176:9: 1185:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::Iter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1176:15: 1176:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1177:13: 1177:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/value/de.rs:1176:15: 1176:31 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1177:13: 1177:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1177:19: 1177:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/value/de.rs:1176:15: 1176:31 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1177:13: 1177:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1177:24: 1177:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1178:30: 1178:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1178:35: 1178:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:1179:30: 1181:18 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1179:21: 1179:27 (#0),
                    },
                ),
            ),
        ),
        ty: value::de::MapKeyDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1179:21: 1179:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1180:26: 1180:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1180:40: 1180:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1180:40: 1180:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1180:41: 1180:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1180:42: 1180:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1182:17: 1182:51 (#0),
                },
            ),
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1182:17: 1182:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1182:17: 1182:51 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1182:17: 1182:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1182:17: 1182:51 (#0),
                },
            ),
        ),
        ty: value::de::MapKeyDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1182:34: 1182:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [T/#1, '{erased}], def_id: DefId(20:1468 ~ serde[bd03]::de::DeserializeSeed::Value) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1184:24: 1184:28 (#0),
            scope: scope[0],
        },
    },
]