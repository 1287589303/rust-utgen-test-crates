[
    BasicBlockData {
        statements: [
            PlaceMention((*((*_1).0: &value::Value))),
            _3 = discriminant((*((*_1).0: &value::Value))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:148:9: 148:22 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*((*_1).0: &value::Value))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:148:15: 148:22 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:149:13: 149:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:150:13: 150:27 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:151:13: 151:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:152:13: 152:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:153:13: 153:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = &mut (*_2),
            StorageLive(_20),
            StorageLive(_21),
            _21 = const "object",
            _20 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:154:33: 154:62 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::Formatter::<'_>::write_str(move _19, move _20) -> [return: bb18, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut (*_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const "null",
            _5 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:149:28: 149:55 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::Formatter::<'_>::write_str(move _4, move _5) -> [return: bb9, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:149:54: 149:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &mut (*_2),
            StorageLive(_8),
            StorageLive(_9),
            _9 = const "boolean",
            _8 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:150:31: 150:61 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::Formatter::<'_>::write_str(move _7, move _8) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:150:60: 150:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &mut (*_2),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const "number",
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:151:33: 151:62 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::Formatter::<'_>::write_str(move _10, move _11) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:151:61: 151:62 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &mut (*_2),
            StorageLive(_14),
            StorageLive(_15),
            _15 = const "string",
            _14 = &(*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:152:33: 152:62 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::Formatter::<'_>::write_str(move _13, move _14) -> [return: bb15, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:152:61: 152:62 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &mut (*_2),
            StorageLive(_17),
            StorageLive(_18),
            _18 = const "array",
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:153:32: 153:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::fmt::Formatter::<'_>::write_str(move _16, move _17) -> [return: bb17, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:153:59: 153:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:154:61: 154:62 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:156:6: 156:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:147:5: 156:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:147:54: 147:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} value::index::Type<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:147:12: 147:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/index.rs:147:30: 147:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/index.rs:147:19: 147:28 (#0),
                            ),
                        ),
                        pat_span: src/value/index.rs:147:19: 147:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:147:19: 147:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:149:13: 149:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:149:28: 149:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:149:48: 149:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:149:48: 149:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:150:31: 150:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:150:51: 150:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:150:51: 150:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:151:33: 151:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:151:53: 151:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:151:53: 151:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:152:33: 152:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:152:53: 152:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:152:53: 152:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:153:32: 153:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:153:52: 153:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:153:52: 153:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:154:33: 154:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:154:53: 154:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:148:9: 155:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:154:53: 154:61 (#0),
            scope: scope[0],
        },
    },
]