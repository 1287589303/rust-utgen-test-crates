[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            StorageLive(_3),
            _3 = ser::CompactFormatter,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:27:9: 27:61 (#0),
                    scope: scope[0],
                },
                kind: _0 = ser::Serializer::<W>::with_formatter(move _2, move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:28:5: 28:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:28:6: 28:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:27:60: 27:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:28:5: 28:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:26:5: 28:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ser::Serializer<W/#0, ser::CompactFormatter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:26:30: 26:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:26:24: 26:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:26:16: 26:22 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:26:16: 26:22 (#0),
                    },
                ),
            ),
        ),
        ty: W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:26:16: 26:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:27:9: 27:61 (#0),
                },
            ),
        ),
        ty: W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:27:36: 27:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:27:9: 27:61 (#0),
                },
            ),
        ),
        ty: ser::CompactFormatter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:27:44: 27:60 (#0),
            scope: scope[0],
        },
    },
]