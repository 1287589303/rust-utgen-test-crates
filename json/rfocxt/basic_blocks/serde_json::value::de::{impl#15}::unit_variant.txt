[
    BasicBlockData {
        statements: [
            PlaceMention((_1.0: core::option::Option<&value::Value>)),
            _2 = discriminant((_1.0: core::option::Option<&value::Value>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1060:9: 1060:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb3, 1: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (_1.0: core::option::Option<&value::Value>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1060:15: 1060:25 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1061:13: 1061:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = (),
            _0 = core::result::Result::<(), error::Error>::Ok(move _5),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1062:26: 1062:27 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = (((_1.0: core::option::Option<&value::Value>) as Some).0: &value::Value),
            StorageLive(_4),
            _4 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1061:28: 1061:59 (#0),
                    scope: scope[1],
                },
                kind: _0 = <() as serde::Deserialize<'_>>::deserialize::<&value::Value>(move _4) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1061:58: 1061:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1064:6: 1064:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:1059:5: 1064:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1059:30: 1059:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: value::de::VariantRefDeserializer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1059:21: 1059:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1061:13: 1061:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: core::option::Option<&value::Value>),
                                ),
                                src/value/de.rs:1060:15: 1060:25 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:1061:13: 1061:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1061:18: 1061:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:1060:9: 1063:10 (#0),
                },
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1061:53: 1061:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:1062:24: 1062:26 (#0),
            scope: scope[0],
        },
    },
]