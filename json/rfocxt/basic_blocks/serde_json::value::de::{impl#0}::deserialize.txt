[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            StorageLive(_3),
            _3 = value::de::<impl serde::Deserialize<'de> for value::Value>::deserialize::ValueVisitor,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:151:9: 151:51 (#0),
                    scope: scope[0],
                },
                kind: _0 = <D as serde::Deserializer<'_>>::deserialize_any::<value::de::<impl serde::Deserialize<'de> for value::Value>::deserialize::ValueVisitor>(move _2, move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:152:5: 152:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:152:6: 152:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:151:50: 151:51 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:152:5: 152:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/de.rs:24:5: 152:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<value::Value, Alias(Projection, AliasTy { args: [D/#1, '{erased}], def_id: DefId(20:1479 ~ serde[bd03]::de::Deserializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:24:43: 24:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/de.rs:24:37: 24:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/de.rs:24:23: 24:35 (#0),
                            ),
                        ),
                        pat_span: src/value/de.rs:24:23: 24:35 (#0),
                    },
                ),
            ),
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:24:23: 24:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:151:9: 151:51 (#0),
                },
            ),
        ),
        ty: D/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:151:9: 151:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/de.rs:151:9: 151:51 (#0),
                },
            ),
        ),
        ty: value::de::<impl serde::Deserialize<'de> for value::Value>::deserialize::ValueVisitor,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/de.rs:151:38: 151:50 (#0),
            scope: scope[0],
        },
    },
]