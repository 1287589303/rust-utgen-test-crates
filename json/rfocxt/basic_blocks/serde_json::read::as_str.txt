[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:869:5: 869:26 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::str::from_utf8(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            _5 = {closure@src/read.rs:869:35: 869:38} { read: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:869:5: 869:87 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<&str, core::str::Utf8Error>::or_else::<error::Error, {closure@src/read.rs:869:35: 869:38}>(move _3, move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:870:2: 870:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read.rs:868:1: 870:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<&'{erased} str, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:868:64: 868:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/read.rs:868:40: 868:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:868:34: 868:38 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:868:34: 868:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:868:34: 868:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/read.rs:868:51: 868:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/read.rs:868:44: 868:49 (#0),
                            ),
                        ),
                        pat_span: src/read.rs:868:44: 868:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:868:44: 868:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:869:5: 869:87 (#0),
                },
            ),
        ),
        ty: core::result::Result<&'{erased} str, core::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:869:5: 869:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:869:5: 869:87 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:869:20: 869:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:869:5: 869:87 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2083 ~ serde_json[c3d0]::read::as_str::{closure#0}),
            [
                '{erased},
                R/#1,
                i32,
                Binder { value: extern "RustCall" fn((core::str::Utf8Error,)) -> core::result::Result<&'{erased} str, error::Error>, bound_vars: [] },
                (&'{erased} R/#1,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:869:35: 869:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/read.rs:869:5: 869:87 (#0),
                },
            ),
        ),
        ty: &'{erased} R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read.rs:869:35: 869:86 (#0),
            scope: scope[0],
        },
    },
]