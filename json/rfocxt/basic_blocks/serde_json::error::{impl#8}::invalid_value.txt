[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = [const "invalid value: ", const ", expected "],
            _5 = &_6,
            _4 = &(*_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _1,
            _13 = error::JsonUnexpected::<'_>(move _14),
            StorageDead(_14),
            _12 = &_13,
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:451:29: 451:31 (#209),
                    scope: scope[0],
                },
                kind: _10 = core::fmt::rt::Argument::<'_>::new_display::<error::JsonUnexpected<'_>>(move _11) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_2,
            _16 = &(*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:451:42: 451:44 (#209),
                    scope: scope[0],
                },
                kind: _15 = core::fmt::rt::Argument::<'_>::new_display::<&dyn serde::de::Expected>(move _16) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _9 = [move _10, move _15],
            StorageDead(_15),
            StorageDead(_10),
            _8 = &_9,
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:450:23: 454:10 (#209),
                    scope: scope[0],
                },
                kind: _3 = core::fmt::Arguments::<'_>::new_v1::<2, 2>(move _4, move _7) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:450:9: 454:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = <error::Error as serde::de::Error>::custom::<core::fmt::Arguments<'_>>(move _3) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_17),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:455:6: 455:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:449:5: 455:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:449:72: 449:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/error.rs:449:29: 449:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/error.rs:449:22: 449:27 (#0),
                            ),
                        ),
                        pat_span: src/error.rs:449:22: 449:27 (#0),
                    },
                ),
            ),
        ),
        ty: serde::de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:449:22: 449:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/error.rs:449:50: 449:67 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/error.rs:449:45: 449:48 (#0),
                            ),
                        ),
                        pat_span: src/error.rs:449:45: 449:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(serde::de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:449:45: 449:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:450:23: 454:10 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:451:13: 451:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:451:13: 451:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:451:13: 451:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:450:23: 454:10 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:450:23: 454:10 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:450:23: 454:10 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:451:29: 451:31 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} error::JsonUnexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:452:13: 452:34 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} error::JsonUnexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:452:13: 452:34 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: error::JsonUnexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:452:13: 452:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: serde::de::Unexpected<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:452:28: 452:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:451:42: 451:44 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} dyn [Binder { value: Trait(serde::de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:453:13: 453:16 (#209),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:450:9: 454:11 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} dyn [Binder { value: Trait(serde::de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:453:13: 453:16 (#209),
            scope: scope[0],
        },
    },
]