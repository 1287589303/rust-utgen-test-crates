[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: alloc::collections::BTreeMap<alloc::string::String, value::Value>),
            StorageLive(_5),
            _5 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:422:13: 422:33 (#0),
                    scope: scope[0],
                },
                kind: _3 = <alloc::collections::BTreeMap<alloc::string::String, value::Value> as core::hash::Hash>::hash::<H>(move _4, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:431:6: 431:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:419:5: 431:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:419:45: 419:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:419:24: 419:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:419:38: 419:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:419:31: 419:36 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:419:31: 419:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:419:31: 419:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:422:13: 422:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::collections::BTreeMap<alloc::string::String, value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:422:13: 422:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:422:27: 422:32 (#0),
            scope: scope[0],
        },
    },
]