[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move (_1.0: alloc::collections::btree_map::VacantEntry<'_, alloc::string::String, value::Value>),
            StorageLive(_6),
            _6 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:789:9: 789:34 (#0),
                    scope: scope[0],
                },
                kind: _4 = alloc::collections::btree_map::VacantEntry::<'_, alloc::string::String, value::Value>::insert(move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_6),
            StorageDead(_5),
            _0 = &mut (*_3),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:790:5: 790:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:790:5: 790:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:790:6: 790:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:789:33: 789:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:789:33: 789:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:790:5: 790:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:790:5: 790:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:788:5: 790:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:788:42: 788:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::VacantEntry<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:788:19: 788:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:788:32: 788:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:788:25: 788:30 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:788:25: 788:30 (#0),
                    },
                ),
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:788:25: 788:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:789:9: 789:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:789:9: 789:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:789:9: 789:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:789:9: 789:34 (#0),
                },
            ),
        ),
        ty: alloc::collections::btree_map::VacantEntry<'{erased}, alloc::string::String, value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:789:9: 789:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:789:9: 789:34 (#0),
                },
            ),
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:789:28: 789:33 (#0),
            scope: scope[0],
        },
    },
]