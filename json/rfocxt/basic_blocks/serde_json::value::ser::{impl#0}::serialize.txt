[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:17:9: 17:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:17:15: 17:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:18:13: 18:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:19:13: 19:27 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:20:13: 20:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:21:13: 21:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:22:13: 22:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = &(((*_1) as Object).0: map::Map<alloc::string::String, value::Value>),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = move _2,
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:66: 26:73 (#0),
                    scope: scope[5],
                },
                kind: _24 = map::Map::<alloc::string::String, value::Value>::len(move _25) -> [return: bb19, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:18:28: 18:55 (#0),
                    scope: scope[0],
                },
                kind: _0 = <S as serde::Serializer>::serialize_unit(move _4) -> [return: bb9, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:18:54: 18:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(((*_1) as Bool).0: bool),
            StorageLive(_6),
            _6 = move _2,
            StorageLive(_7),
            _7 = (*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:19:31: 19:60 (#0),
                    scope: scope[1],
                },
                kind: _0 = <S as serde::Serializer>::serialize_bool(move _6, move _7) -> [return: bb11, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:19:59: 19:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &(((*_1) as Number).0: number::Number),
            StorageLive(_9),
            _9 = &(*_8),
            StorageLive(_10),
            _10 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:20:33: 20:56 (#0),
                    scope: scope[2],
                },
                kind: _0 = <number::Number as serde::Serialize>::serialize::<S>(move _9, move _10) -> [return: bb13, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:20:55: 20:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_1) as String).0: alloc::string::String),
            StorageLive(_12),
            _12 = move _2,
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:21:58: 21:59 (#0),
                    scope: scope[3],
                },
                kind: _14 = <alloc::string::String as core::ops::Deref>::deref(move _15) -> [return: bb15, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:21:33: 21:60 (#0),
                    scope: scope[3],
                },
                kind: _0 = <S as serde::Serializer>::serialize_str(move _12, move _13) -> [return: bb16, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_14),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:21:59: 21:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &(((*_1) as Array).0: alloc::vec::Vec<value::Value>),
            StorageLive(_17),
            _17 = &(*_16),
            StorageLive(_18),
            _18 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:22:32: 22:55 (#0),
                    scope: scope[4],
                },
                kind: _0 = <alloc::vec::Vec<value::Value> as serde::Serialize>::serialize::<S>(move _17, move _18) -> [return: bb18, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:22:54: 22:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = core::option::Option::<usize>::Some(move _24),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:36: 26:75 (#0),
                    scope: scope[5],
                },
                kind: _21 = <S as serde::Serializer>::serialize_map(move _22, move _23) -> [return: bb20, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            PlaceMention(_21),
            _26 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#637),
                    scope: scope[5],
                },
                kind: switchInt(move _26) -> [0: bb22, 1: bb23, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:36: 26:75 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#637),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = move ((_21 as Err).0: <S as serde::Serializer>::Error),
            StorageLive(_30),
            _30 = move _28,
            _0 = core::result::Result::<<S as serde::Serializer>::Ok, <S as serde::Serializer>::Error>::Err(move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#637),
                    scope: scope[8],
                },
                kind: drop(_30) -> [return: bb26, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = move ((_21 as Ok).0: <S as serde::Serializer>::SerializeMap),
            _20 = move _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:48: 409:49 (#637),
                    scope: scope[5],
                },
                kind: drop(_27) -> [return: bb25, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            FakeRead(ForLet(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:76: 26:77 (#0),
                    scope: scope[5],
                },
                kind: drop(_21) -> [return: bb27, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#637),
                    scope: scope[5],
                },
                kind: drop(_28) -> [return: bb48, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:31: 27:32 (#934),
                    scope: scope[6],
                },
                kind: _32 = <&map::Map<alloc::string::String, value::Value> as core::iter::IntoIterator>::into_iter(move _33) -> [return: bb28, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            PlaceMention(_32),
            StorageLive(_34),
            _34 = move _32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:17: 29:18 (#933),
                    scope: scope[9],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:17: 29:18 (#933),
                    scope: scope[9],
                },
                kind: falseUnwind -> [real: bb30, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut _34,
            _38 = &mut (*_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:31: 27:32 (#934),
                    scope: scope[9],
                },
                kind: _37 = <map::Iter<'_> as core::iter::Iterator>::next(move _38) -> [return: bb31, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            PlaceMention(_37),
            _40 = discriminant(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:31: 27:32 (#934),
                    scope: scope[9],
                },
                kind: switchInt(move _40) -> [0: bb33, 1: bb34, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:31: 27:32 (#934),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:17: 29:18 (#933),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb35, imaginary: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = (((_37 as Some).0: (&alloc::string::String, &value::Value)).0: &alloc::string::String),
            StorageLive(_43),
            _43 = (((_37 as Some).0: (&alloc::string::String, &value::Value)).1: &value::Value),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &mut _20,
            StorageLive(_47),
            _47 = &(*_42),
            StorageLive(_48),
            _48 = &(*_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:28:26: 28:51 (#0),
                    scope: scope[10],
                },
                kind: _45 = <<S as serde::Serializer>::SerializeMap as serde::ser::SerializeMap>::serialize_entry::<alloc::string::String, value::Value>(move _46, move _47, move _48) -> [return: bb36, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = const (),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_54),
            _54 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:30:17: 30:26 (#0),
                    scope: scope[6],
                },
                kind: _0 = <<S as serde::Serializer>::SerializeMap as serde::ser::SerializeMap>::end(move _54) -> [return: bb43, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            PlaceMention(_45),
            _49 = discriminant(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#638),
                    scope: scope[10],
                },
                kind: switchInt(move _49) -> [0: bb38, 1: bb39, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:28:26: 28:51 (#0),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#638),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb40, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = move ((_45 as Err).0: <S as serde::Serializer>::Error),
            StorageLive(_53),
            _53 = move _51,
            _0 = core::result::Result::<<S as serde::Serializer>::Ok, <S as serde::Serializer>::Error>::Err(move _53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#638),
                    scope: scope[12],
                },
                kind: drop(_53) -> [return: bb41, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = ((_45 as Ok).0: ()),
            _44 = _50,
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#638),
                    scope: scope[10],
                },
                kind: drop(_45) -> [return: bb42, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#638),
                    scope: scope[10],
                },
                kind: drop(_51) -> [return: bb46, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            _36 = const (),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:27:17: 29:18 (#933),
                    scope: scope[9],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:31:13: 31:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_20) -> [return: bb44, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:31:13: 31:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:35:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb51, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#638),
                    scope: scope[10],
                },
                kind: drop(_45) -> [return: bb47, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:31:13: 31:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_20) -> [return: bb50, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:76: 26:77 (#0),
                    scope: scope[5],
                },
                kind: drop(_21) -> [return: bb49, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:35:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb51, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:35:6: 35:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:30:25: 30:26 (#0),
                    scope: scope[6],
                },
                kind: drop(_54) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#638),
                    scope: scope[10],
                },
                kind: drop(_51) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#638),
                    scope: scope[10],
                },
                kind: drop(_45) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:31:13: 31:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_20) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#637),
                    scope: scope[5],
                },
                kind: drop(_28) -> [return: bb57, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:76: 26:77 (#0),
                    scope: scope[5],
                },
                kind: drop(_21) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:26:74: 26:75 (#0),
                    scope: scope[5],
                },
                kind: drop(_22) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:22:54: 22:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:21:59: 21:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_12) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:20:55: 20:56 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:19:59: 19:60 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:18:54: 18:55 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:35:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:13:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(20:1987 ~ serde[bd03]::ser::Serializer::Ok) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:13:46: 13:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:13:21: 13:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:13:40: 13:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:13:28: 13:38 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:13:28: 13:38 (#0),
                    },
                ),
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:13:28: 13:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:18:13: 18:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:18:28: 18:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/value/ser.rs:17:15: 17:19 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:19:13: 19:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:19:25: 19:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:19:31: 19:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:19:57: 19:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/value/ser.rs:17:15: 17:19 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:20:13: 20:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} number::Number,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:20:27: 20:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: &'{erased} number::Number,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:20:33: 20:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:20:45: 20:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/value/ser.rs:17:15: 17:19 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:21:13: 21:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:21:27: 21:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:21:33: 21:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:21:58: 21:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:21:58: 21:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:21:58: 21:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/value/ser.rs:17:15: 17:19 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:22:13: 22:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:22:26: 22:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:22:32: 22:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:17:9: 34:10 (#0),
                },
            ),
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:22:44: 22:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/value/ser.rs:17:15: 17:19 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:24:13: 24:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:24:27: 24:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:408:9: 411:10 (#637),
                            ),
                        ),
                        pat_span: src/value/ser.rs:26:21: 26:28 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1993 ~ serde[bd03]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:26:21: 26:28 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(20:1993 ~ serde[bd03]::ser::Serializer::SerializeMap) }), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:26:36: 26:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:26:36: 26:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:26:61: 26:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:26:66: 26:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:26:66: 26:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#637),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                src/value/ser.rs:26:36: 26:75 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#637),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1993 ~ serde[bd03]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#637),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                src/value/ser.rs:26:36: 26:75 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#637),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#637),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#637),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#637),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:17: 29:18 (#933),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::Iter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#934),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::Map<alloc::string::String, value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                src/value/ser.rs:27:31: 27:32 (#934),
                            ),
                        ),
                        pat_span: src/value/ser.rs:27:31: 27:32 (#934),
                    },
                ),
            ),
        ),
        ty: map::Iter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#934),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:13:5: 35:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#934),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} alloc::string::String, &'{erased} value::Value)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#934),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::Iter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#934),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::Iter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:31: 27:32 (#934),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:17: 29:18 (#933),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:17: 29:18 (#933),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _37,
                                ),
                                src/value/ser.rs:27:31: 27:32 (#934),
                            ),
                        ),
                        pat_span: src/value/ser.rs:27:21: 27:27 (#935),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:22: 27:23 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _37,
                                ),
                                src/value/ser.rs:27:31: 27:32 (#934),
                            ),
                        ),
                        pat_span: src/value/ser.rs:27:21: 27:27 (#935),
                    },
                ),
            ),
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:27:25: 27:26 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#638),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:28:26: 28:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#0], def_id: DefId(20:1993 ~ serde[bd03]::ser::Serializer::SerializeMap) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:28:26: 28:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:28:46: 28:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:28:49: 28:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#638),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                src/value/ser.rs:28:26: 28:51 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#638),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#638),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _45,
                                ),
                                src/value/ser.rs:28:26: 28:51 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#638),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#638),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#638),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1988 ~ serde[bd03]::ser::Serializer::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#638),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/ser.rs:30:17: 30:26 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#0,
                ],
                def_id: DefId(20:1993 ~ serde[bd03]::ser::Serializer::SerializeMap),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:30:17: 30:20 (#0),
            scope: scope[0],
        },
    },
]