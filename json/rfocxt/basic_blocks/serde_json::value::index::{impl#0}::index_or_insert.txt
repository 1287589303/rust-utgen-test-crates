[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            PlaceMention(_2),
            _5 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:68:9: 68:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [4: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = [const "cannot access index ", const " of JSON "],
            _23 = &_24,
            _22 = &(*_23),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &_1,
            _29 = &(*_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:78:46: 78:48 (#631),
                    scope: scope[0],
                },
                kind: _28 = core::fmt::rt::Argument::<'_>::new_display::<&usize>(move _29) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:69:13: 69:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &mut (((*_2) as Array).0: alloc::vec::Vec<value::Value>),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:70:27: 70:36 (#0),
                    scope: scope[1],
                },
                kind: _8 = alloc::vec::Vec::<value::Value>::len(move _9) -> [return: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:71:17: 71:35 (#0),
                    scope: scope[2],
                },
                kind: _13 = <alloc::vec::Vec<value::Value> as core::ops::DerefMut>::deref_mut(move _14) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &mut (*_13),
            StorageDead(_14),
            StorageLive(_15),
            _15 = (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:71:17: 71:35 (#0),
                    scope: scope[2],
                },
                kind: _11 = core::slice::<impl [value::Value]>::get_mut::<usize>(move _12, move _15) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_12),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_1,
            StorageLive(_18),
            _18 = &_8,
            _16 = {closure@src/value/index.rs:71:51: 71:53} { self: move _17, len: move _18 },
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:71:17: 76:19 (#0),
                    scope: scope[2],
                },
                kind: _10 = core::option::Option::<&mut value::Value>::unwrap_or_else::<{closure@src/value/index.rs:71:51: 71:53}>(move _11, move _16) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut (*_10),
            StorageDead(_16),
            StorageDead(_11),
            StorageDead(_8),
            _4 = &mut (*_7),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
            _3 = &mut (*_4),
            _0 = &mut (*_3),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:80:6: 80:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_2),
            _34 = value::index::Type::<'_>(move _35),
            StorageDead(_35),
            _33 = &_34,
            _32 = &(*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:78:57: 78:59 (#631),
                    scope: scope[0],
                },
                kind: _31 = core::fmt::rt::Argument::<'_>::new_display::<value::index::Type<'_>>(move _32) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _27 = [move _28, move _31],
            StorageDead(_31),
            StorageDead(_28),
            _26 = &_27,
            _25 = &(*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#631),
                    scope: scope[0],
                },
                kind: _21 = core::fmt::Arguments::<'_>::new_v1::<2, 2>(move _22, move _25) -> [return: bb10, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#630),
                    scope: scope[0],
                },
                kind: _20 = core::panicking::panic_fmt(move _21) -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/index.rs:67:5: 80:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:67:56: 67:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:67:28: 67:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/index.rs:67:38: 67:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/index.rs:67:35: 67:36 (#0),
                            ),
                        ),
                        pat_span: src/value/index.rs:67:35: 67:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:67:35: 67:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:68:9: 79:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:68:9: 79:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:68:9: 79:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:69:13: 69:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/value/index.rs:68:15: 68:16 (#0),
                            ),
                        ),
                        pat_span: src/value/index.rs:69:13: 69:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:69:26: 69:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:68:9: 79:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:17: 76:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/index.rs:70:27: 70:36 (#0),
                            ),
                        ),
                        pat_span: src/value/index.rs:70:21: 70:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:70:21: 70:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:70:27: 70:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: &'{erased} mut value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:17: 76:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut value::Value>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:17: 71:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [value::Value],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:17: 71:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [value::Value],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:17: 71:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:17: 71:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:29: 71:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1540 ~ serde_json[c3d0]::value::index::{impl#0}::index_or_insert::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn(()) -> &'{erased} mut value::Value, bound_vars: [] },
                (&'{erased} &'{erased} usize, &'{erased} usize),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:51: 76:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:51: 76:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:71:17: 76:19 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:71:51: 76:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/value/index.rs:68:9: 79:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:25: 78:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:25: 78:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:25: 78:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:46: 78:48 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:62: 78:66 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:62: 78:66 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:57: 78:59 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} value::index::Type<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:68: 78:75 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} value::index::Type<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:68: 78:75 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: value::index::Type<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:68: 78:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/index.rs:78:73: 78:74 (#0),
            scope: scope[0],
        },
    },
]