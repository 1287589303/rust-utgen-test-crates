[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:173:19: 173:31 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u8]>::iter(move _6) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = {closure@src/value/ser.rs:173:36: 173:40},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:173:19: 173:65 (#0),
                    scope: scope[0],
                },
                kind: _4 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::map::<value::Value, {closure@src/value/ser.rs:173:36: 173:40}>(move _5, move _7) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:173:19: 173:75 (#0),
                    scope: scope[0],
                },
                kind: _3 = <core::iter::Map<core::slice::Iter<'_, u8>, {closure@src/value/ser.rs:173:36: 173:40}> as core::iter::Iterator>::collect::<alloc::vec::Vec<value::Value>>(move _4) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _3,
            _8 = value::Value::Array(move _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:174:28: 174:29 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _0 = core::result::Result::<value::Value, error::Error>::Ok(move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:174:29: 174:30 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:175:5: 175:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:175:6: 175:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:174:29: 174:30 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:175:5: 175:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/value/ser.rs:172:5: 175:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<value::Value, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:172:47: 172:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: value::ser::Serializer,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:172:24: 172:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/value/ser.rs:172:37: 172:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:172:30: 172:35 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:172:30: 172:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:172:30: 172:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/value/ser.rs:173:19: 173:75 (#0),
                            ),
                        ),
                        pat_span: src/value/ser.rs:173:13: 173:16 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:173:13: 173:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:1658 ~ serde_json[c3d0]::value::ser::{impl#1}::serialize_bytes::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> value::Value, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:173:19: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:173:19: 173:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:173:19: 173:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1658 ~ serde_json[c3d0]::value::ser::{impl#1}::serialize_bytes::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> value::Value, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:173:36: 173:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: value::Value,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:174:12: 174:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<value::Value, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/value/ser.rs:174:25: 174:28 (#0),
            scope: scope[0],
        },
    },
]