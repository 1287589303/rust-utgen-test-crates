[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*(_1.0: &mut ser::Serializer<W, F>)).1: F),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut ((*(_1.0: &mut ser::Serializer<W, F>)).0: W),
            _7 = &mut (*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:867:14: 870:48 (#0),
                    scope: scope[0],
                },
                kind: _5 = <F as ser::Formatter>::begin_string::<W>(move _6, move _7) -> [return: bb1, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:867:14: 871:32 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::result::Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {error::Error::io}>(move _5, error::Error::io) -> [return: bb2, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#270),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:867:14: 871:32 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#270),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_4 as Err).0: error::Error),
            StorageLive(_13),
            _13 = move _11,
            _0 = core::result::Result::<(), error::Error>::Err(move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#270),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb7, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_4 as Ok).0: ()),
            _3 = _10,
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#270),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#270),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb21, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*(_1.0: &mut ser::Serializer<W, F>)).1: F),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut ((*(_1.0: &mut ser::Serializer<W, F>)).0: W),
            _18 = &mut (*_19),
            StorageLive(_20),
            _20 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:872:14: 875:52 (#0),
                    scope: scope[0],
                },
                kind: _16 = <F as ser::Formatter>::write_i16::<W>(move _17, move _18, move _20) -> [return: bb9, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:872:14: 876:32 (#0),
                    scope: scope[0],
                },
                kind: _15 = core::result::Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {error::Error::io}>(move _16, error::Error::io) -> [return: bb10, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _21 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#271),
                    scope: scope[0],
                },
                kind: switchInt(move _21) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:872:14: 876:32 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#271),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = move ((_15 as Err).0: error::Error),
            StorageLive(_25),
            _25 = move _23,
            _0 = core::result::Result::<(), error::Error>::Err(move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#271),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_15 as Ok).0: ()),
            _14 = _22,
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#271),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb16, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#271),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb19, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut ((*(_1.0: &mut ser::Serializer<W, F>)).1: F),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut ((*(_1.0: &mut ser::Serializer<W, F>)).0: W),
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:877:9: 879:46 (#0),
                    scope: scope[0],
                },
                kind: _26 = <F as ser::Formatter>::end_string::<W>(move _27, move _28) -> [return: bb17, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:877:9: 880:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {error::Error::io}>(move _26, error::Error::io) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:881:6: 881:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#271),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb20, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#270),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:881:6: 881:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:880:31: 880:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_26) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#271),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#271),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:876:31: 876:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#270),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:411:9: 411:10 (#270),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:871:31: 871:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:866:5: 881:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:866:43: 866:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: ser::MapKeySerializer<'{erased}, W/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:866:22: 866:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:866:35: 866:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:866:28: 866:33 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:866:28: 866:33 (#0),
                    },
                ),
            ),
        ),
        ty: i16,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:866:28: 866:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:867:14: 871:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:867:14: 870:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:867:14: 869:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:870:27: 870:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:870:27: 870:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/ser.rs:867:14: 871:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#270),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/ser.rs:867:14: 871:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#270),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:872:14: 876:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:872:14: 875:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:872:14: 874:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:875:24: 875:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:875:24: 875:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i16,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:875:46: 875:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/ser.rs:872:14: 876:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#271),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/ser.rs:872:14: 876:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#271),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:877:9: 880:32 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:877:9: 879:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:877:9: 880:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:877:9: 878:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:877:9: 880:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:879:25: 879:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:877:9: 880:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:879:25: 879:45 (#0),
            scope: scope[0],
        },
    },
]