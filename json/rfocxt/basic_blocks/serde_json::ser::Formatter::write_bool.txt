[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1572:20: 1572:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const b"true",
            _7 = &(*_8),
            _6 = move _7 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_7),
            AscribeUserType(_6, o, UserTypeProjection { base: UserType(0), projs: [] }),
            _4 = _6,
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1572:17: 1576:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const b"false",
            _11 = &(*_12),
            _10 = move _11 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_11),
            AscribeUserType(_10, o, UserTypeProjection { base: UserType(1), projs: [] }),
            _9 = _10,
            _4 = &(*_9),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1572:17: 1576:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_13),
            _13 = &mut (*_2),
            StorageLive(_14),
            _14 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1577:9: 1577:28 (#0),
                    scope: scope[1],
                },
                kind: _0 = <W as std::io::Write>::write_all(move _13, move _14) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1578:6: 1578:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1568:5: 1578:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1568:65: 1568:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1568:22: 1568:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:1568:41: 1568:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:1568:33: 1568:39 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:1568:33: 1568:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1568:33: 1568:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:1568:56: 1568:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:1568:49: 1568:54 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:1568:49: 1568:54 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1568:49: 1568:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:1572:17: 1576:10 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:1572:13: 1572:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1572:13: 1572:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1572:20: 1572:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1573:13: 1573:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1573:13: 1573:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1573:13: 1573:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1573:13: 1573:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1573:13: 1573:29 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1573:13: 1573:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1575:13: 1575:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1575:13: 1575:30 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1575:13: 1575:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1575:13: 1575:30 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 5_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1575:13: 1575:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1575:13: 1575:30 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 5_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1575:13: 1575:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1577:9: 1577:28 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1577:9: 1577:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1577:9: 1577:28 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1577:26: 1577:27 (#0),
            scope: scope[0],
        },
    },
]