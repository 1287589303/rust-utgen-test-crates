[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (*(_1.0: &mut ser::Serializer<W, F>)),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = [const 0_u8; 4],
            _9 = &mut _10,
            _8 = &mut (*_9),
            _7 = move _8 as &mut [u8] (PointerCoercion(Unsize)),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1062:32: 1062:64 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::char::methods::<impl char>::encode_utf8(move _6, move _7) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                    scope: scope[0],
                },
                kind: _0 = <&mut ser::Serializer<W, F> as serde::Serializer>::serialize_str(move _3, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1063:6: 1063:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/ser.rs:1061:5: 1063:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1061:45: 1061:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: ser::MapKeySerializer<'{erased}, W/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1061:23: 1061:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/ser.rs:1061:36: 1061:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/ser.rs:1061:29: 1061:34 (#0),
                            ),
                        ),
                        pat_span: src/ser.rs:1061:29: 1061:34 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1061:29: 1061:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ser::Serializer<W/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:9: 1062:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:32: 1062:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:32: 1062:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:32: 1062:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:50: 1062:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:50: 1062:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:50: 1062:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/ser.rs:1062:9: 1062:65 (#0),
                },
            ),
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/ser.rs:1062:55: 1062:63 (#0),
            scope: scope[0],
        },
    },
]