[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1635:31: 1635:54 (#0),
                    scope: scope[0],
                },
                kind: _5 = de::Deserializer::<R>::parse_whitespace(move _6) -> [return: bb1, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _7 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#111),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1635:31: 1635:54 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#111),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_5 as Err).0: error::Error),
            StorageLive(_11),
            _11 = move _9,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#111),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb6, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = ((_5 as Ok).0: core::option::Option<u8>),
            _4 = _8,
            StorageDead(_8),
            PlaceMention(_4),
            _12 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#111),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#111),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb52, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#111),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1636:13: 1636:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
            StorageLive(_17),
            _17 = error::ErrorCode::EofWhileParsingValue,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1638:28: 1638:76 (#0),
                    scope: scope[0],
                },
                kind: _15 = de::Deserializer::<R>::peek_error(move _16, move _17) -> [return: bb11, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_4 as Some).0: u8),
            _3 = _13,
            StorageDead(_13),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1640:10: 1640:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb13, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1638:76: 1638:77 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb12, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1638:17: 1638:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_18),
            PlaceMention(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1642:21: 1642:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(_3) -> [34: bb15, 91: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            _43 = &mut (*_1),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &_2,
            _45 = &(*_46),
            _44 = move _45 as &dyn serde::de::Expected (PointerCoercion(Unsize)),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1652:22: 1652:54 (#0),
                    scope: scope[1],
                },
                kind: _42 = de::Deserializer::<R>::peek_invalid_type(move _43, move _44) -> [return: bb36, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1643:13: 1643:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1651:13: 1651:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            StorageLive(_20),
            _20 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1644:17: 1644:32 (#0),
                    scope: scope[1],
                },
                kind: _19 = de::Deserializer::<R>::eat_char(move _20) -> [return: bb18, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut ((*_1).1: alloc::vec::Vec<u8>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1645:17: 1645:37 (#0),
                    scope: scope[1],
                },
                kind: _21 = alloc::vec::Vec::<u8>::clear(move _22) -> [return: bb19, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut ((*_1).0: R),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut ((*_1).1: alloc::vec::Vec<u8>),
            _26 = &mut (*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1646:28: 1646:70 (#0),
                    scope: scope[1],
                },
                kind: _24 = <R as read::Read<'_>>::parse_str_raw(move _25, move _26) -> [return: bb20, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            PlaceMention(_24),
            _28 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 408:9 (#112),
                    scope: scope[1],
                },
                kind: switchInt(move _28) -> [0: bb22, 1: bb23, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1646:28: 1646:70 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:409:13: 409:42 (#112),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = move ((_24 as Err).0: error::Error),
            StorageLive(_32),
            _32 = move _30,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#112),
                    scope: scope[7],
                },
                kind: drop(_32) -> [return: bb25, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = move ((_24 as Ok).0: read::Reference<'_, '_, [u8]>),
            _23 = move _29,
            StorageDead(_29),
            PlaceMention(_23),
            _33 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#112),
                    scope: scope[1],
                },
                kind: switchInt(move _33) -> [0: bb27, 1: bb28, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#112),
                    scope: scope[1],
                },
                kind: drop(_30) -> [return: bb50, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:408:9: 411:10 (#112),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1647:21: 1647:43 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = ((_23 as Copied).0: &[u8]),
            StorageLive(_38),
            _38 = move _2,
            StorageLive(_39),
            _39 = &(*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1648:45: 1648:67 (#0),
                    scope: scope[9],
                },
                kind: _18 = <V as serde::de::Visitor<'_>>::visit_bytes::<error::Error>(move _38, move _39) -> [return: bb31, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = ((_23 as Borrowed).0: &[u8]),
            StorageLive(_35),
            _35 = move _2,
            StorageLive(_36),
            _36 = &(*_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1647:47: 1647:78 (#0),
                    scope: scope[8],
                },
                kind: _18 = <V as serde::de::Visitor<'_>>::visit_borrowed_bytes::<error::Error>(move _35, move _36) -> [return: bb30, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1647:77: 1647:78 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1648:66: 1648:67 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1650:13: 1650:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb33, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1650:13: 1650:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = &mut (*_1),
            StorageLive(_41),
            _41 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1651:21: 1651:50 (#0),
                    scope: scope[1],
                },
                kind: _18 = <&mut de::Deserializer<R> as serde::Deserializer<'_>>::deserialize_seq::<V>(move _40, move _41) -> [return: bb35, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1651:49: 1651:50 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            _18 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1652:54: 1652:55 (#0),
                    scope: scope[1],
                },
                kind: drop(_42) -> [return: bb37, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1652:54: 1652:55 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _18),
            PlaceMention(_18),
            _47 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1655:9: 1655:20 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _47) -> [0: bb40, 1: bb41, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1655:15: 1655:20 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1656:13: 1656:22 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = move ((_18 as Err).0: error::Error),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &(*_1),
            StorageLive(_53),
            _53 = move _50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1657:29: 1657:51 (#0),
                    scope: scope[11],
                },
                kind: _51 = de::Deserializer::<R>::fix_position(move _52, move _53) -> [return: bb45, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            _48 = move ((_18 as Ok).0: <V as serde::de::Visitor<'_>>::Value),
            StorageLive(_49),
            _49 = move _48,
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Ok(move _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1656:34: 1656:35 (#0),
                    scope: scope[10],
                },
                kind: drop(_49) -> [return: bb43, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1656:34: 1656:35 (#0),
                    scope: scope[5],
                },
                kind: drop(_48) -> [return: bb44, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1656:34: 1656:35 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            _0 = core::result::Result::<<V as serde::de::Visitor<'_>>::Value, error::Error>::Err(move _51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1657:51: 1657:52 (#0),
                    scope: scope[11],
                },
                kind: drop(_51) -> [return: bb46, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1657:51: 1657:52 (#0),
                    scope: scope[5],
                },
                kind: drop(_50) -> [return: bb47, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1657:51: 1657:52 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1659:5: 1659:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb49, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1659:5: 1659:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb56, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1650:13: 1650:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb51, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1640:10: 1640:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb54, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1659:5: 1659:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb56, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1659:6: 1659:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1657:50: 1657:51 (#0),
                    scope: scope[11],
                },
                kind: drop(_53) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1657:51: 1657:52 (#0),
                    scope: scope[5],
                },
                kind: drop(_50) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1656:34: 1656:35 (#0),
                    scope: scope[5],
                },
                kind: drop(_48) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1659:5: 1659:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1651:49: 1651:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_41) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1648:66: 1648:67 (#0),
                    scope: scope[9],
                },
                kind: drop(_38) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1647:77: 1647:78 (#0),
                    scope: scope[8],
                },
                kind: drop(_35) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#112),
                    scope: scope[1],
                },
                kind: drop(_30) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1650:13: 1650:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1638:75: 1638:76 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb68, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:83: 410:84 (#111),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb68, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1640:10: 1640:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1659:5: 1659:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/de.rs:1631:5: 1659:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1631:50: 1631:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: &'{erased} mut de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1631:29: 1631:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/de.rs:1631:44: 1631:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:1631:35: 1631:42 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:1631:35: 1631:42 (#0),
                    },
                ),
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1631:35: 1631:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:1635:20: 1640:10 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:1635:13: 1635:17 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1635:13: 1635:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<u8>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1635:31: 1635:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1635:31: 1635:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/de.rs:1635:31: 1635:54 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#111),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/de.rs:1635:31: 1635:54 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#111),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1636:13: 1636:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/lib.rs:408:9: 411:10 (#111),
                            ),
                        ),
                        pat_span: src/de.rs:1636:13: 1636:20 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1636:18: 1636:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1637:21: 1639:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1638:28: 1638:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1638:28: 1638:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: error::ErrorCode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1638:44: 1638:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/de.rs:1642:21: 1653:10 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:1642:13: 1642:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#3, '{erased}], def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1642:13: 1642:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1644:17: 1644:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1644:17: 1644:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1645:17: 1645:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1645:17: 1645:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: read::Reference<'{erased}, '{erased}, [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:408:9: 411:10 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: core::result::Result<read::Reference<'{erased}, '{erased}, [u8]>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1646:28: 1646:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1646:28: 1646:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1646:52: 1646:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1646:52: 1646:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:13: 409:42 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/de.rs:1646:28: 1646:70 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:409:13: 409:42 (#112),
                    },
                ),
            ),
        ),
        ty: read::Reference<'{erased}, '{erased}, [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:409:38: 409:41 (#112),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/de.rs:1646:28: 1646:70 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:410:13: 410:43 (#112),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:39: 410:42 (#112),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:47: 410:84 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:80: 410:83 (#112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1647:21: 1647:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                src/lib.rs:408:9: 411:10 (#112),
                            ),
                        ),
                        pat_span: src/de.rs:1647:21: 1647:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1647:41: 1647:42 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1647:47: 1647:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1647:76: 1647:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                src/lib.rs:408:9: 411:10 (#112),
                            ),
                        ),
                        pat_span: src/de.rs:1648:21: 1648:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1648:39: 1648:40 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1648:45: 1648:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1646:17: 1649:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1648:65: 1648:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1651:21: 1651:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1651:42: 1651:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1652:22: 1652:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1652:22: 1652:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(serde::de::Expected), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1652:45: 1652:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1652:45: 1652:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} V/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1652:45: 1652:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1656:13: 1656:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/de.rs:1655:15: 1655:20 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:1656:13: 1656:22 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1656:16: 1656:21 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    V/#3,
                    '{erased},
                ],
                def_id: DefId(20:1547 ~ serde[bd03]::de::Visitor::Value),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1656:29: 1656:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/de.rs:1655:15: 1655:20 (#0),
                            ),
                        ),
                        pat_span: src/de.rs:1657:13: 1657:21 (#0),
                    },
                ),
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1657:17: 1657:20 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1657:29: 1657:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1655:9: 1658:10 (#0),
                },
            ),
        ),
        ty: &'{erased} de::Deserializer<R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1657:29: 1657:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/de.rs:1655:9: 1658:10 (#0),
                },
            ),
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/de.rs:1657:47: 1657:50 (#0),
            scope: scope[0],
        },
    },
]