[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:55:9: 55:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:55:15: 55:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:56:13: 56:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:57:13: 57:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = (((*_1) as Float).0: f64),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _10,
            _11 = Eq(move _12, const 0f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:59:20: 59:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _11) -> [0: bb12, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = (((*_1) as PosInt).0: u64),
            StorageLive(_5),
            _5 = &_4,
            StorageLive(_6),
            _6 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:56:29: 56:38 (#0),
                    scope: scope[1],
                },
                kind: _0 = <u64 as core::hash::Hash>::hash::<H>(move _5, move _6) -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:56:37: 56:38 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = (((*_1) as NegInt).0: i64),
            StorageLive(_8),
            _8 = &_7,
            StorageLive(_9),
            _9 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:57:29: 57:38 (#0),
                    scope: scope[2],
                },
                kind: _0 = <i64 as core::hash::Hash>::hash::<H>(move _8, move _9) -> [return: bb8, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:57:37: 57:38 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:63:21: 63:37 (#0),
                    scope: scope[3],
                },
                kind: _15 = core::f64::<impl f64>::to_bits(const 0f64) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = &_15,
            StorageLive(_16),
            _16 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:63:21: 63:45 (#0),
                    scope: scope[3],
                },
                kind: _13 = <u64 as core::hash::Hash>::hash::<H>(move _14, move _16) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_15),
            StorageDead(_13),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:59:17: 66:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:65:21: 65:32 (#0),
                    scope: scope[3],
                },
                kind: _19 = core::f64::<impl f64>::to_bits(move _20) -> [return: bb13, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &_19,
            StorageDead(_20),
            StorageLive(_21),
            _21 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:65:21: 65:40 (#0),
                    scope: scope[3],
                },
                kind: _17 = <u64 as core::hash::Hash>::hash::<H>(move _18, move _21) -> [return: bb14, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_19),
            StorageDead(_17),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:59:17: 66:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:67:13: 67:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:69:6: 69:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/number.rs:54:5: 69:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:54:41: 54:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} number::N,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:54:24: 54:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/number.rs:54:34: 54:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/number.rs:54:31: 54:32 (#0),
                            ),
                        ),
                        pat_span: src/number.rs:54:31: 54:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:54:31: 54:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:56:13: 56:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                src/number.rs:55:15: 55:20 (#0),
                            ),
                        ),
                        pat_span: src/number.rs:56:13: 56:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:56:23: 56:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/number.rs:55:9: 68:10 (#0),
                },
            ),
        ),
        ty: &'{erased} u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:56:29: 56:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/number.rs:55:9: 68:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:56:36: 56:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                src/number.rs:55:15: 55:20 (#0),
                            ),
                        ),
                        pat_span: src/number.rs:57:13: 57:25 (#0),
                    },
                ),
            ),
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:57:23: 57:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/number.rs:55:9: 68:10 (#0),
                },
            ),
        ),
        ty: &'{erased} i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:57:29: 57:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/number.rs:55:9: 68:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:57:36: 57:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                src/number.rs:55:15: 55:20 (#0),
                            ),
                        ),
                        pat_span: src/number.rs:58:13: 58:24 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:58:22: 58:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/number.rs:59:17: 66:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:59:20: 59:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/number.rs:59:17: 66:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:59:20: 59:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:63:21: 63:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:63:21: 63:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:63:21: 63:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:63:43: 63:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:65:21: 65:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:65:21: 65:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:65:21: 65:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:65:21: 65:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut H/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/number.rs:65:38: 65:39 (#0),
            scope: scope[0],
        },
    },
]