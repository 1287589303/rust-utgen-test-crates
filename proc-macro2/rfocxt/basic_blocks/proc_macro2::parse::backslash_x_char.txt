[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#23),
                    scope: scope[0],
                },
                kind: _3 = <I as std::iter::Iterator>::next(move _4) -> [return: bb1, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:9: 625:28 (#23),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#23),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:626:13: 626:26 (#23),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _12),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:630:21: 630:39 (#23),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = (((_3 as Some).0: (usize, char)).1: char),
            PlaceMention(_6),
            _7 = Le(const '0', _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:639:22: 639:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb6, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _10),
            StorageDead(_10),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:639:22: 639:31 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = Le(_6, const '7'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:639:22: 639:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb6, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = _6,
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#24),
                    scope: scope[0],
                },
                kind: _14 = <I as std::iter::Iterator>::next(move _15) -> [return: bb10, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _16 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:9: 625:28 (#24),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb13, 1: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#24),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:626:13: 626:26 (#24),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _27),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:630:21: 630:39 (#24),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = (((_14 as Some).0: (usize, char)).1: char),
            PlaceMention(_17),
            _22 = Le(const '0', _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:22: 640:31 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _22) -> [0: bb16, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _25),
            StorageDead(_25),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = Le(const 'a', _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:34: 640:43 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _20) -> [0: bb17, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = Le(const 'A', _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:46: 640:55 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _18) -> [0: bb15, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = Le(_17, const 'F'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:46: 640:55 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb15, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = Le(_17, const 'f'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:34: 640:43 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _21) -> [0: bb17, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = Le(_17, const '9'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:22: 640:31 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _23) -> [0: bb16, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:640:22: 640:55 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = _17,
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_28),
            _28 = (),
            _0 = std::result::Result::<(), parse::Reject>::Ok(move _28),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:642:2: 642:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:642:2: 642:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:635:1: 642:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:635:42: 635:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:635:31: 635:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:635:24: 635:29 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:635:24: 635:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:635:24: 635:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:9: 631:10 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:28 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:21 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:13: 626:26 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/parse.rs:625:15: 625:28 (#23),
                            ),
                        ),
                        pat_span: src/parse.rs:626:13: 626:26 (#23),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:22: 626:24 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:639:22: 639:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:639:22: 639:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:22: 628:40 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:33: 628:39 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:21: 630:39 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:32: 630:38 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:9: 631:10 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:28 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:21 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:13: 626:26 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/parse.rs:625:15: 625:28 (#24),
                            ),
                        ),
                        pat_span: src/parse.rs:626:13: 626:26 (#24),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:22: 626:24 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:640:46: 640:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:640:46: 640:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:640:34: 640:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:640:34: 640:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:640:22: 640:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:640:22: 640:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:22: 628:40 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:33: 628:39 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:21: 630:39 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:32: 630:38 (#24),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:641:8: 641:10 (#0),
            scope: scope[0],
        },
    },
]