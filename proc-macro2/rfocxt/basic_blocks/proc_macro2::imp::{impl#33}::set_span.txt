[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            _5 = _2,
            _3 = (move _4, move _5),
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _8 = discriminant((*(_3.0: &mut imp::Literal))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:944:9: 944:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb2, 1: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:944:15: 944:27 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = discriminant((_3.1: imp::Span)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:944:9: 944:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:945:13: 945:56 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:947:13: 947:54 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = discriminant((_3.1: imp::Span)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:944:9: 944:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb7, 1: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:946:13: 946:56 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:948:58: 948:75 (#0),
                    scope: scope[0],
                },
                kind: _18 = imp::mismatch(const 948_u32) -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &mut (((*(_3.0: &mut imp::Literal)) as Compiler).0: proc_macro::Literal),
            StorageLive(_10),
            _10 = (((_3.1: imp::Span) as Compiler).0: proc_macro::Span),
            StorageLive(_11),
            _11 = &mut (*_9),
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:945:60: 945:75 (#0),
                    scope: scope[1],
                },
                kind: _0 = proc_macro::Literal::set_span(move _11, move _12) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:945:74: 945:75 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &mut (((*(_3.0: &mut imp::Literal)) as Fallback).0: fallback::Literal),
            StorageLive(_14),
            _14 = (((_3.1: imp::Span) as Fallback).0: fallback::Span),
            StorageLive(_15),
            _15 = &mut (*_13),
            StorageLive(_16),
            _16 = _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:946:60: 946:75 (#0),
                    scope: scope[2],
                },
                kind: _0 = fallback::Literal::set_span(move _15, move _16) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:946:74: 946:75 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:947:58: 947:75 (#0),
                    scope: scope[0],
                },
                kind: _17 = imp::mismatch(const 947_u32) -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:950:6: 950:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:943:5: 950:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:943:50: 943:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:943:28: 943:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:943:45: 943:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:943:39: 943:43 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:943:39: 943:43 (#0),
                    },
                ),
            ),
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:943:39: 943:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut imp::Literal, imp::Span),
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:944:15: 944:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:944:16: 944:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:944:22: 944:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:945:38: 945:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:946:38: 946:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:945:14: 945:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:944:15: 944:27 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:945:13: 945:56 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:945:32: 945:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:944:15: 944:27 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:945:13: 945:56 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:945:53: 945:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:945:60: 945:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:945:73: 945:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:944:15: 944:27 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:946:13: 946:56 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:946:32: 946:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:944:15: 944:27 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:946:13: 946:56 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:946:53: 946:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:946:60: 946:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:946:73: 946:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:947:58: 947:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/wrapper.rs:944:9: 949:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:948:58: 948:75 (#0),
            scope: scope[0],
        },
    },
]