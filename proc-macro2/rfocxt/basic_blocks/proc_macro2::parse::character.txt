[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_1,
            StorageLive(_6),
            StorageLive(_7),
            _7 = const "'",
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:604:17: 604:33 (#0),
                    scope: scope[0],
                },
                kind: _4 = parse::Cursor::<'_>::parse(move _5, move _6) -> [return: bb1, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:604:17: 604:34 (#279),
                    scope: scope[0],
                },
                kind: _3 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _8 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:604:17: 604:34 (#279),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:604:17: 604:34 (#279),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:604:33: 604:34 (#280),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_3 as Continue).0: parse::Cursor<'_>),
            _2 = _12,
            StorageDead(_12),
            FakeRead(ForLet(None), _2),
            StorageDead(_7),
            StorageDead(_3),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:605:21: 605:41 (#0),
                    scope: scope[1],
                },
                kind: _13 = parse::Cursor::<'_>::char_indices(move _14) -> [return: bb8, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:604:17: 604:34 (#279),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _11) -> [return: bb7, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:606:20: 606:32 (#0),
                    scope: scope[6],
                },
                kind: _17 = <std::str::CharIndices<'_> as std::iter::Iterator>::next(move _18) -> [return: bb9, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            _19 = {closure@src/parse.rs:606:37: 606:46},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:606:20: 606:50 (#0),
                    scope: scope[6],
                },
                kind: _16 = std::option::Option::<(usize, char)>::map::<char, {closure@src/parse.rs:606:37: 606:46}>(move _17, move _19) -> [return: bb10, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            PlaceMention(_16),
            _20 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:606:14: 606:50 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _20) -> [1: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = _16,
            StorageLive(_35),
            _35 = &_34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:613:15: 613:27 (#0),
                    scope: scope[8],
                },
                kind: _15 = std::option::Option::<char>::is_some(move _35) -> [return: bb30, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:606:14: 606:50 (#0),
                    scope: scope[6],
                },
                kind: switchInt(((_16 as Some).0: char)) -> [92: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:607:9: 607:19 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:607:29: 607:41 (#0),
                    scope: scope[6],
                },
                kind: _22 = <std::str::CharIndices<'_> as std::iter::Iterator>::next(move _23) -> [return: bb15, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageLive(_24),
            _24 = {closure@src/parse.rs:607:46: 607:55},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:607:29: 607:59 (#0),
                    scope: scope[6],
                },
                kind: _21 = std::option::Option::<(usize, char)>::map::<char, {closure@src/parse.rs:607:46: 607:55}>(move _22, move _24) -> [return: bb16, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            PlaceMention(_21),
            _25 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:607:23: 607:59 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _25) -> [1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:611:18: 611:23 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:607:23: 607:59 (#0),
                    scope: scope[6],
                },
                kind: switchInt(((_21 as Some).0: char)) -> [120: bb19, 117: bb20, 110: bb21, 114: bb21, 116: bb21, 92: bb21, 48: bb21, 39: bb21, 34: bb21, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:608:13: 608:22 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:609:13: 609:22 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:610:13: 610:60 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _13,
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:608:26: 608:54 (#0),
                    scope: scope[6],
                },
                kind: _27 = parse::backslash_x_char::<std::str::CharIndices<'_>>(move _28) -> [return: bb23, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &_27,
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:608:26: 608:62 (#0),
                    scope: scope[6],
                },
                kind: _15 = std::result::Result::<(), parse::Reject>::is_ok(move _26) -> [return: bb24, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_29),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:608:61: 608:62 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut _13,
            _32 = &mut (*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:609:26: 609:49 (#0),
                    scope: scope[6],
                },
                kind: _31 = parse::backslash_u::<std::str::CharIndices<'_>>(move _32) -> [return: bb26, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &_31,
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:609:26: 609:57 (#0),
                    scope: scope[6],
                },
                kind: _15 = std::result::Result::<char, parse::Reject>::is_ok(move _30) -> [return: bb27, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_33),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:609:56: 609:57 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:610:64: 610:68 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:612:9: 612:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:613:26: 613:27 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _15),
            StorageDead(_16),
            StorageLive(_36),
            StorageLive(_37),
            _37 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:615:9: 615:11 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _37) -> [0: bb32, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = parse::Reject,
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Err(move _39),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = const (),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:20: 618:32 (#0),
                    scope: scope[7],
                },
                kind: _44 = <std::str::CharIndices<'_> as std::iter::Iterator>::next(move _45) -> [return: bb34, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageLive(_46),
            _46 = parse::Reject,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:20: 618:46 (#0),
                    scope: scope[7],
                },
                kind: _43 = std::option::Option::<(usize, char)>::ok_or::<parse::Reject>(move _44, move _46) -> [return: bb35, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:20: 618:47 (#282),
                    scope: scope[7],
                },
                kind: _42 = <std::result::Result<(usize, char), parse::Reject> as std::ops::Try>::branch(move _43) -> [return: bb36, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            PlaceMention(_42),
            _47 = discriminant(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:20: 618:47 (#282),
                    scope: scope[7],
                },
                kind: switchInt(move _47) -> [0: bb39, 1: bb38, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:20: 618:47 (#282),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:46: 618:47 (#283),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb40, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = ((_42 as Continue).0: (usize, char)),
            _41 = _51,
            StorageDead(_51),
            PlaceMention(_41),
            StorageLive(_40),
            _40 = (_41.0: usize),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &_2,
            StorageLive(_58),
            _58 = _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:17: 619:35 (#0),
                    scope: scope[9],
                },
                kind: _56 = parse::Cursor::<'_>::advance(move _57, move _58) -> [return: bb42, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            _48 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>),
            StorageLive(_50),
            _50 = move _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:618:20: 618:47 (#282),
                    scope: scope[11],
                },
                kind: _0 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _50) -> [return: bb41, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = &_56,
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_59),
            StorageLive(_60),
            _60 = const "'",
            _59 = &(*_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:17: 619:46 (#0),
                    scope: scope[9],
                },
                kind: _54 = parse::Cursor::<'_>::parse(move _55, move _59) -> [return: bb43, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:17: 619:47 (#284),
                    scope: scope[9],
                },
                kind: _53 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::Try>::branch(move _54) -> [return: bb44, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            PlaceMention(_53),
            _61 = discriminant(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:17: 619:47 (#284),
                    scope: scope[9],
                },
                kind: switchInt(move _61) -> [0: bb47, 1: bb46, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:17: 619:47 (#284),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:46: 619:47 (#285),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb48, imaginary: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = ((_53 as Continue).0: parse::Cursor<'_>),
            _52 = _65,
            StorageDead(_65),
            FakeRead(ForLet(None), _52),
            StorageDead(_60),
            StorageDead(_56),
            StorageDead(_53),
            StorageLive(_66),
            StorageLive(_67),
            _67 = _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:620:8: 620:29 (#0),
                    scope: scope[14],
                },
                kind: _66 = parse::literal_suffix(move _67) -> [return: bb50, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>),
            StorageLive(_64),
            _64 = move _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:619:17: 619:47 (#284),
                    scope: scope[16],
                },
                kind: _0 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _64) -> [return: bb49, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_56),
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Ok(move _66),
            StorageDead(_66),
            StorageDead(_52),
            StorageDead(_40),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:621:2: 621:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:621:2: 621:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:621:2: 621:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:603:1: 621:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:603:32: 603:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:603:21: 603:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:603:14: 603:19 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:603:14: 603:19 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:603:14: 603:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:604:17: 604:34 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:604:9: 604:14 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:9: 604:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, parse::Reject>, parse::Cursor<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:17: 604:34 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:17: 604:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:17: 604:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:29: 604:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:29: 604:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:33: 604:34 (#280),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/parse.rs:604:17: 604:34 (#279),
                            ),
                        ),
                        pat_span: src/parse.rs:604:33: 604:34 (#280),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:33: 604:34 (#280),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:33: 604:34 (#280),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:33: 604:34 (#280),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/parse.rs:604:17: 604:34 (#279),
                            ),
                        ),
                        pat_span: src/parse.rs:604:17: 604:34 (#279),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:604:17: 604:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:605:21: 605:41 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:605:9: 605:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:605:9: 605:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:605:21: 605:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:606:14: 614:6 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:606:9: 606:11 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:606:9: 606:11 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:606:20: 606:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:606:20: 606:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:606:20: 606:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:84 ~ proc_macro2[acde]::parse::character::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn(((usize, char),)) -> char, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:606:37: 606:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:607:9: 607:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:607:29: 607:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:607:29: 607:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:607:29: 607:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:85 ~ proc_macro2[acde]::parse::character::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn(((usize, char),)) -> char, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:607:46: 607:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:608:13: 608:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::result::Result<(), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:608:26: 608:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:608:26: 608:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:608:43: 608:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:608:43: 608:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::result::Result<char, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:609:26: 609:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<char, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:609:26: 609:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:609:38: 609:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:609:38: 609:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/parse.rs:606:20: 606:50 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:613:9: 613:11 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:613:9: 613:11 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:613:15: 613:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:615:5: 617:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:615:9: 615:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:615:12: 617:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:616:20: 616:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                src/parse.rs:618:20: 618:47 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:618:9: 618:17 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:10: 618:13 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, char),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:20: 618:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, parse::Reject>, (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:20: 618:47 (#282),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(usize, char), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:20: 618:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:20: 618:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:20: 618:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:39: 618:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:46: 618:47 (#283),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                src/parse.rs:618:20: 618:47 (#282),
                            ),
                        ),
                        pat_span: src/parse.rs:618:46: 618:47 (#283),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:46: 618:47 (#283),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:46: 618:47 (#283),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:46: 618:47 (#283),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                src/parse.rs:618:20: 618:47 (#282),
                            ),
                        ),
                        pat_span: src/parse.rs:618:20: 618:47 (#282),
                    },
                ),
            ),
        ),
        ty: (usize, char),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:618:20: 618:47 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:619:17: 619:47 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:619:9: 619:14 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:9: 619:14 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, parse::Reject>, parse::Cursor<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:17: 619:47 (#284),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:17: 619:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:17: 619:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:17: 619:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:17: 619:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:31: 619:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:42: 619:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:42: 619:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:46: 619:47 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _53,
                                ),
                                src/parse.rs:619:17: 619:47 (#284),
                            ),
                        ),
                        pat_span: src/parse.rs:619:46: 619:47 (#285),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:46: 619:47 (#285),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:46: 619:47 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:46: 619:47 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _53,
                                ),
                                src/parse.rs:619:17: 619:47 (#284),
                            ),
                        ),
                        pat_span: src/parse.rs:619:17: 619:47 (#284),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:619:17: 619:47 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:620:8: 620:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:620:5: 620:30 (#0),
                },
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:620:23: 620:28 (#0),
            scope: scope[0],
        },
    },
]