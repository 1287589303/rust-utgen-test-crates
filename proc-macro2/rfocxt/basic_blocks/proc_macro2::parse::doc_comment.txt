[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:912:36: 912:63 (#0),
                    scope: scope[0],
                },
                kind: _8 = parse::doc_comment_contents(move _9) -> [return: bb1, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:912:36: 912:64 (#331),
                    scope: scope[0],
                },
                kind: _7 = <std::result::Result<(parse::Cursor<'_>, (&str, bool)), parse::Reject> as std::ops::Try>::branch(move _8) -> [return: bb2, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            _10 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:912:36: 912:64 (#331),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:912:36: 912:64 (#331),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:912:63: 912:64 (#332),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_7 as Continue).0: (parse::Cursor<'_>, (&str, bool))),
            _6 = _14,
            StorageDead(_14),
            PlaceMention(_6),
            StorageLive(_3),
            _3 = (_6.0: parse::Cursor<'_>),
            StorageLive(_4),
            _4 = ((_6.1: (&str, bool)).0: &str),
            StorageLive(_5),
            _5 = ((_6.1: (&str, bool)).1: bool),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_15),
            _15 = fallback::Span,
            FakeRead(ForLet(None), _15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:919:16: 919:57 (#0),
                    scope: scope[6],
                },
                kind: _16 = Span::_new_fallback(move _17) -> [return: bb8, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>),
            StorageLive(_13),
            _13 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:912:36: 912:64 (#331),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<(parse::Cursor<'_>, ()), parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _13) -> [return: bb7, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_18),
            _18 = _4,
            FakeRead(ForLet(None), _18),
            StorageLive(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:922:5: 928:6 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:922:5: 928:6 (#0),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb10, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:922:26: 922:53 (#0),
                    scope: scope[9],
                },
                kind: _21 = core::str::<impl str>::find::<'_, char>(move _22, const '\r') -> [return: bb11, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _23 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:922:15: 922:23 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _23) -> [1: bb12, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:922:15: 922:23 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_21 as Some).0: usize),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_18),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _24,
            _31 = AddWithOverflow(_30, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:923:38: 923:44 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> [success: bb14, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = move (_31.0: usize),
            StorageDead(_30),
            _28 = std::ops::RangeFrom::<usize> { start: move _29 },
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:923:37: 923:47 (#0),
                    scope: scope[9],
                },
                kind: _26 = <str as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _27, move _28) -> [return: bb15, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            _25 = &(*_26),
            FakeRead(ForLet(None), _25),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:924:13: 924:35 (#0),
                    scope: scope[10],
                },
                kind: _33 = core::str::<impl str>::starts_with::<'_, char>(move _34, const '\n') -> [return: bb16, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:924:13: 924:35 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _33) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _32 = const (),
            StorageDead(_33),
            StorageDead(_32),
            StorageLive(_37),
            _37 = &(*_25),
            _18 = move _37,
            StorageDead(_37),
            _20 = const (),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:922:5: 928:6 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageLive(_36),
            _36 = parse::Reject,
            _0 = std::result::Result::<(parse::Cursor<'_>, ()), parse::Reject>::Err(move _36),
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _19 = const (),
            StorageDead(_39),
            StorageDead(_21),
            StorageDead(_19),
            StorageLive(_41),
            StorageLive(_42),
            _42 = Spacing::Alone,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:930:21: 930:52 (#0),
                    scope: scope[8],
                },
                kind: _41 = Punct::new(const '#', move _42) -> [return: bb20, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            FakeRead(ForLet(None), _41),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &mut _41,
            StorageLive(_45),
            _45 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:931:5: 931:25 (#0),
                    scope: scope[11],
                },
                kind: _43 = Punct::set_span(move _44, move _45) -> [return: bb21, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &mut (*_2),
            StorageLive(_48),
            StorageLive(_49),
            _49 = move _41,
            _48 = TokenTree::Punct(move _49),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:932:5: 932:58 (#0),
                    scope: scope[11],
                },
                kind: _46 = fallback::TokenStreamBuilder::push_token_from_parser(move _47, move _48) -> [return: bb22, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_50),
            StorageLive(_51),
            _51 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:934:8: 934:13 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _51) -> [0: bb27, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            StorageLive(_53),
            _53 = Spacing::Alone,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:935:24: 935:55 (#0),
                    scope: scope[11],
                },
                kind: _52 = Punct::new(const '!', move _53) -> [return: bb24, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            FakeRead(ForLet(None), _52),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &mut _52,
            StorageLive(_56),
            _56 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:936:9: 936:28 (#0),
                    scope: scope[12],
                },
                kind: _54 = Punct::set_span(move _55, move _56) -> [return: bb25, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &mut (*_2),
            StorageLive(_59),
            StorageLive(_60),
            _60 = move _52,
            _59 = TokenTree::Punct(move _60),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:937:9: 937:61 (#0),
                    scope: scope[12],
                },
                kind: _57 = fallback::TokenStreamBuilder::push_token_from_parser(move _58, move _59) -> [return: bb26, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
            _50 = const (),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:934:5: 938:6 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:934:5: 938:6 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = const "doc",
            _63 = &(*_64),
            StorageLive(_65),
            _65 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:940:49: 940:91 (#0),
                    scope: scope[11],
                },
                kind: _62 = fallback::Ident::new_unchecked(move _63, move _65) -> [return: bb29, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:940:21: 940:92 (#0),
                    scope: scope[11],
                },
                kind: _61 = Ident::_new_fallback(move _62) -> [return: bb30, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            FakeRead(ForLet(None), _61),
            StorageDead(_64),
            StorageLive(_66),
            StorageLive(_67),
            _67 = Spacing::Alone,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:941:21: 941:52 (#0),
                    scope: scope[13],
                },
                kind: _66 = Punct::new(const '=', move _67) -> [return: bb31, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            FakeRead(ForLet(None), _66),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &mut _66,
            StorageLive(_70),
            _70 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:942:5: 942:25 (#0),
                    scope: scope[14],
                },
                kind: _68 = Punct::set_span(move _69, move _70) -> [return: bb32, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_68),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:943:53: 943:77 (#0),
                    scope: scope[14],
                },
                kind: _72 = fallback::Literal::string(move _73) -> [return: bb33, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:943:23: 943:78 (#0),
                    scope: scope[14],
                },
                kind: _71 = Literal::_new_fallback(move _72) -> [return: bb34, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            FakeRead(ForLet(None), _71),
            StorageLive(_74),
            StorageLive(_75),
            _75 = &mut _71,
            StorageLive(_76),
            _76 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:944:5: 944:27 (#0),
                    scope: scope[15],
                },
                kind: _74 = Literal::set_span(move _75, move _76) -> [return: bb35, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:945:25: 945:61 (#0),
                    scope: scope[15],
                },
                kind: _77 = fallback::TokenStreamBuilder::with_capacity(const 3_usize) -> [return: bb36, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _77),
            StorageLive(_78),
            StorageLive(_79),
            _79 = &mut _77,
            StorageLive(_80),
            StorageLive(_81),
            _81 = move _61,
            _80 = TokenTree::Ident(move _81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:946:64: 946:65 (#0),
                    scope: scope[16],
                },
                kind: drop(_81) -> [return: bb37, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:946:5: 946:66 (#0),
                    scope: scope[16],
                },
                kind: _78 = fallback::TokenStreamBuilder::push_token_from_parser(move _79, move _80) -> [return: bb38, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
            StorageDead(_78),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &mut _77,
            StorageLive(_84),
            StorageLive(_85),
            _85 = move _66,
            _84 = TokenTree::Punct(move _85),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:947:5: 947:62 (#0),
                    scope: scope[16],
                },
                kind: _82 = fallback::TokenStreamBuilder::push_token_from_parser(move _83, move _84) -> [return: bb39, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_86),
            StorageLive(_87),
            _87 = &mut _77,
            StorageLive(_88),
            StorageLive(_89),
            _89 = move _71,
            _88 = TokenTree::Literal(move _89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:948:64: 948:65 (#0),
                    scope: scope[16],
                },
                kind: drop(_89) -> [return: bb40, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:948:5: 948:66 (#0),
                    scope: scope[16],
                },
                kind: _86 = fallback::TokenStreamBuilder::push_token_from_parser(move _87, move _88) -> [return: bb41, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_90),
            StorageLive(_91),
            _91 = Delimiter::Bracket,
            StorageLive(_92),
            StorageLive(_93),
            _93 = move _77,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:949:48: 949:65 (#0),
                    scope: scope[16],
                },
                kind: _92 = fallback::TokenStreamBuilder::build(move _93) -> [return: bb42, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:949:17: 949:66 (#0),
                    scope: scope[16],
                },
                kind: _90 = fallback::Group::new(move _91, move _92) -> [return: bb43, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            FakeRead(ForLet(None), _90),
            StorageLive(_94),
            StorageLive(_95),
            _95 = move _90,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:950:21: 950:55 (#0),
                    scope: scope[17],
                },
                kind: _94 = Group::_new_fallback(move _95) -> [return: bb44, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            FakeRead(ForLet(None), _94),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &mut _94,
            StorageLive(_98),
            _98 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:951:5: 951:25 (#0),
                    scope: scope[18],
                },
                kind: _96 = Group::set_span(move _97, move _98) -> [return: bb45, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut (*_2),
            StorageLive(_101),
            StorageLive(_102),
            _102 = move _94,
            _101 = TokenTree::Group(move _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:952:56: 952:57 (#0),
                    scope: scope[18],
                },
                kind: drop(_102) -> [return: bb46, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:952:5: 952:58 (#0),
                    scope: scope[18],
                },
                kind: _99 = fallback::TokenStreamBuilder::push_token_from_parser(move _100, move _101) -> [return: bb47, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
            StorageDead(_99),
            StorageLive(_103),
            StorageLive(_104),
            _104 = _3,
            StorageLive(_105),
            _105 = (),
            _103 = (move _104, move _105),
            StorageDead(_105),
            StorageDead(_104),
            _0 = std::result::Result::<(parse::Cursor<'_>, ()), parse::Reject>::Ok(move _103),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[17],
                },
                kind: drop(_94) -> [return: bb48, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[16],
                },
                kind: drop(_90) -> [return: bb49, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[15],
                },
                kind: drop(_77) -> [return: bb50, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[14],
                },
                kind: drop(_71) -> [return: bb51, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[11],
                },
                kind: drop(_61) -> [return: bb52, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_41),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:2: 955:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:2: 955:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:952:57: 952:58 (#0),
                    scope: scope[18],
                },
                kind: drop(_101) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[17],
                },
                kind: drop(_94) -> [return: bb57, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:950:54: 950:55 (#0),
                    scope: scope[17],
                },
                kind: drop(_95) -> [return: bb57, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[16],
                },
                kind: drop(_90) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:949:65: 949:66 (#0),
                    scope: scope[16],
                },
                kind: drop(_92) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:949:64: 949:65 (#0),
                    scope: scope[16],
                },
                kind: drop(_93) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:948:65: 948:66 (#0),
                    scope: scope[16],
                },
                kind: drop(_88) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:947:61: 947:62 (#0),
                    scope: scope[16],
                },
                kind: drop(_84) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:946:65: 946:66 (#0),
                    scope: scope[16],
                },
                kind: drop(_80) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[15],
                },
                kind: drop(_77) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[14],
                },
                kind: drop(_71) -> [return: bb66, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:943:77: 943:78 (#0),
                    scope: scope[14],
                },
                kind: drop(_72) -> [return: bb66, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:955:1: 955:2 (#0),
                    scope: scope[11],
                },
                kind: drop(_61) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:940:91: 940:92 (#0),
                    scope: scope[11],
                },
                kind: drop(_62) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:937:60: 937:61 (#0),
                    scope: scope[12],
                },
                kind: drop(_59) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:932:57: 932:58 (#0),
                    scope: scope[11],
                },
                kind: drop(_48) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:909:1: 955:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, ()), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:909:74: 909:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:909:27: 909:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:909:20: 909:25 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:909:20: 909:25 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:909:20: 909:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:909:46: 909:69 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:909:39: 909:44 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:909:39: 909:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:909:39: 909:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/parse.rs:912:36: 912:64 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:912:9: 912:33 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:10: 912:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/parse.rs:912:36: 912:64 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:912:9: 912:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:17: 912:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/parse.rs:912:36: 912:64 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:912:9: 912:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:26: 912:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (parse::Cursor<'{erased}>, (&'{erased} str, bool)),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:36: 912:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, parse::Reject>, (parse::Cursor<'{erased}>, (&'{erased} str, bool))>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:36: 912:64 (#331),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, (&'{erased} str, bool)), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:36: 912:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:57: 912:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:63: 912:64 (#332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/parse.rs:912:36: 912:64 (#331),
                            ),
                        ),
                        pat_span: src/parse.rs:912:63: 912:64 (#332),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:63: 912:64 (#332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:63: 912:64 (#332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:63: 912:64 (#332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/parse.rs:912:36: 912:64 (#331),
                            ),
                        ),
                        pat_span: src/parse.rs:912:36: 912:64 (#331),
                    },
                ),
            ),
        ),
        ty: (parse::Cursor<'{erased}>, (&'{erased} str, bool)),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:912:36: 912:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:913:25: 918:6 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:913:9: 913:22 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:913:9: 913:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:919:16: 919:57 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:919:9: 919:13 (#0),
                    },
                ),
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:919:9: 919:13 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:919:43: 919:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:921:32: 921:39 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:921:9: 921:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:921:9: 921:29 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:5: 928:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:909:1: 955:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:922:5: 928:6 (#333),
                },
            ),
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:26: 922:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:922:5: 928:6 (#333),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:26: 922:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:15: 922:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                src/parse.rs:922:26: 922:53 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:922:15: 922:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:20: 922:22 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:923:20: 923:47 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:923:13: 923:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:13: 923:17 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:37: 923:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:21: 923:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:38: 923:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:38: 923:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:38: 923:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:923:38: 923:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:924:9: 926:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:924:13: 924:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:924:13: 924:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:924:36: 926:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:925:24: 925:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:927:28: 927:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:922:5: 928:6 (#333),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:5: 928:6 (#333),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:5: 928:6 (#333),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:922:5: 928:6 (#333),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:930:21: 930:52 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:930:9: 930:18 (#0),
                    },
                ),
            ),
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:930:9: 930:18 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Spacing,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:930:37: 930:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:931:5: 931:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:931:5: 931:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:931:20: 931:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:932:5: 932:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:932:5: 932:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:932:34: 932:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:932:51: 932:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:934:5: 938:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:934:8: 934:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:935:24: 935:55 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:935:13: 935:21 (#0),
                    },
                ),
            ),
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:935:13: 935:21 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Spacing,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:935:40: 935:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:936:9: 936:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:936:9: 936:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:936:23: 936:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:937:9: 937:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:937:9: 937:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:937:38: 937:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:937:55: 937:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:940:21: 940:92 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:940:9: 940:18 (#0),
                    },
                ),
            ),
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:940:9: 940:18 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:940:49: 940:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:940:70: 940:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:940:70: 940:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:940:77: 940:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:941:21: 941:52 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:941:9: 941:18 (#0),
                    },
                ),
            ),
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:941:9: 941:18 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Spacing,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:941:37: 941:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:942:5: 942:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:942:5: 942:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:942:20: 942:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:943:23: 943:78 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:943:9: 943:20 (#0),
                    },
                ),
            ),
        ),
        ty: Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:943:9: 943:20 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:943:53: 943:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:943:69: 943:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:944:5: 944:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:944:5: 944:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:944:22: 944:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:945:25: 945:61 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:945:9: 945:22 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:945:9: 945:22 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:946:5: 946:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:946:5: 946:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:946:38: 946:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:946:55: 946:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:947:5: 947:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:947:5: 947:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:947:38: 947:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:947:55: 947:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:948:5: 948:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:948:5: 948:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:948:38: 948:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:948:57: 948:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:949:17: 949:66 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:949:9: 949:14 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:949:9: 949:14 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:949:28: 949:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:949:48: 949:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:949:48: 949:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:950:21: 950:55 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:950:9: 950:18 (#0),
                    },
                ),
            ),
        ),
        ty: Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:950:9: 950:18 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:950:49: 950:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:951:5: 951:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:951:5: 951:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:951:20: 951:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:952:5: 952:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:952:5: 952:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:952:34: 952:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:952:51: 952:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (parse::Cursor<'{erased}>, ()),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:954:8: 954:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:954:5: 954:19 (#0),
                },
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:954:9: 954:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:954:5: 954:19 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:954:15: 954:17 (#0),
            scope: scope[0],
        },
    },
]