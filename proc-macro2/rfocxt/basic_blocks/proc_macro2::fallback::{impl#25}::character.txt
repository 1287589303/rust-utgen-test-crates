[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1062:24: 1062:37 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::string::String::new() -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1063:9: 1063:24 (#0),
                    scope: scope[1],
                },
                kind: _3 = std::string::String::push(move _4, const '\'') -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
            _6 = Eq(move _7, const '"'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1064:12: 1064:21 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _2,
            StorageLive(_10),
            _10 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1066:13: 1066:26 (#0),
                    scope: scope[1],
                },
                kind: _8 = std::string::String::push(move _9, move _10) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1064:9: 1069:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _2,
            StorageLive(_13),
            StorageLive(_14),
            _14 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1068:25: 1068:42 (#0),
                    scope: scope[1],
                },
                kind: _13 = std::char::methods::<impl char>::escape_debug(move _14) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1068:13: 1068:43 (#0),
                    scope: scope[1],
                },
                kind: _11 = <std::string::String as std::iter::Extend<char>>::extend::<std::char::EscapeDebug>(move _12, move _13) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1064:9: 1069:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1070:9: 1070:24 (#0),
                    scope: scope[1],
                },
                kind: _15 = std::string::String::push(move _16, const '\'') -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_17),
            _17 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1071:9: 1071:28 (#0),
                    scope: scope[1],
                },
                kind: _0 = fallback::Literal::_new(move _17) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1072:5: 1072:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1072:6: 1072:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1071:27: 1071:28 (#0),
                    scope: scope[1],
                },
                kind: drop(_17) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1072:5: 1072:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1061:5: 1072:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1061:42: 1061:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:1061:33: 1061:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:1061:29: 1061:31 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1061:29: 1061:31 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1061:29: 1061:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:1062:24: 1062:37 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1062:13: 1062:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1062:13: 1062:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1063:9: 1063:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1063:9: 1063:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1064:9: 1069:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1064:12: 1064:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1064:12: 1064:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1066:13: 1066:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1066:13: 1066:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1066:23: 1066:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1068:13: 1068:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1068:13: 1068:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::char::EscapeDebug,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1068:25: 1068:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1068:25: 1068:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1070:9: 1070:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1070:9: 1070:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:1071:9: 1071:28 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1071:23: 1071:27 (#0),
            scope: scope[0],
        },
    },
]