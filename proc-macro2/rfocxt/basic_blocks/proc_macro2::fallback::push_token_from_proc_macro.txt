[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            PlaceMention(_2),
            _7 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:102:5: 102:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [3: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = &mut _1,
            StorageLive(_18),
            _18 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:112:14: 112:29 (#0),
                    scope: scope[0],
                },
                kind: _3 = rcvec::RcVecMut::<'_, TokenTree>::push(move _17, move _18) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = discriminant((((_2 as Literal).0: Literal).0: imp::Literal)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:102:5: 102:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:103:9: 109:11 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &(((((_2 as Literal).0: Literal).0: imp::Literal) as Fallback).0: fallback::Literal),
            _4 = &fake shallow _2,
            _5 = &fake shallow (((_2 as Literal).0: Literal).0: imp::Literal),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_9).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:109:15: 109:44 (#0),
                    scope: scope[0],
                },
                kind: _12 = <std::string::String as std::ops::Deref>::deref(move _13) -> [return: bb5, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:109:15: 109:44 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::str::<impl str>::starts_with::<'_, char>(move _11, const '-') -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:109:15: 109:44 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForMatchGuard, _4),
            FakeRead(ForMatchGuard, _5),
            FakeRead(ForGuardBinding, _9),
            StorageLive(_8),
            _8 = move (((((_2 as Literal).0: Literal).0: imp::Literal) as Fallback).0: fallback::Literal),
            StorageLive(_14),
            StorageLive(_15),
            _15 = move _1,
            StorageLive(_16),
            _16 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:110:13: 110:48 (#0),
                    scope: scope[1],
                },
                kind: _14 = fallback::push_token_from_proc_macro::push_negative_literal(move _15, move _16) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:109:15: 109:44 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:111:9: 111:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:111:9: 111:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:112:28: 112:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:123:1: 123:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:123:2: 123:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:112:28: 112:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:110:47: 110:48 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:111:9: 111:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:123:1: 123:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:100:1: 123:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:100:78: 100:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:100:40: 100:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:100:31: 100:38 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:100:31: 100:38 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:100:31: 100:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:100:68: 100:77 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:100:61: 100:66 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:100:61: 100:66 (#0),
                    },
                ),
            ),
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:100:61: 100:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:102:5: 113:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:102:11: 102:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:102:11: 102:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:105:24: 105:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:103:9: 109:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/fallback.rs:102:11: 102:16 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:103:9: 109:11 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:105:54: 105:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:105:54: 105:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:109:15: 109:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:109:15: 109:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:109:15: 109:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:109:15: 109:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:110:13: 110:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:110:35: 110:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:110:40: 110:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:112:14: 112:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:112:23: 112:28 (#0),
            scope: scope[0],
        },
    },
]