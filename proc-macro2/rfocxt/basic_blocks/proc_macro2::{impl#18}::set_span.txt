[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:597:9: 597:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:597:15: 597:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:598:13: 598:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:599:13: 599:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:600:13: 600:32 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &mut (((*_1) as Literal).0: Literal),
            StorageLive(_14),
            _14 = &mut (*_13),
            StorageLive(_15),
            _15 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:601:38: 601:54 (#0),
                    scope: scope[4],
                },
                kind: _0 = Literal::set_span(move _14, move _15) -> [return: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut (((*_1) as Group).0: Group),
            StorageLive(_5),
            _5 = &mut (*_4),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:598:36: 598:52 (#0),
                    scope: scope[1],
                },
                kind: _0 = Group::set_span(move _5, move _6) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:598:51: 598:52 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &mut (((*_1) as Ident).0: Ident),
            StorageLive(_8),
            _8 = &mut (*_7),
            StorageLive(_9),
            _9 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:599:36: 599:52 (#0),
                    scope: scope[2],
                },
                kind: _0 = Ident::set_span(move _8, move _9) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:599:51: 599:52 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &mut (((*_1) as Punct).0: Punct),
            StorageLive(_11),
            _11 = &mut (*_10),
            StorageLive(_12),
            _12 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:600:36: 600:52 (#0),
                    scope: scope[3],
                },
                kind: _0 = Punct::set_span(move _11, move _12) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:600:51: 600:52 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:601:53: 601:54 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:603:6: 603:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:596:5: 603:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:596:43: 596:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:596:21: 596:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:596:38: 596:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:596:32: 596:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:596:32: 596:36 (#0),
                    },
                ),
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:596:32: 596:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:598:13: 598:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:597:15: 597:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:598:13: 598:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:598:30: 598:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:598:36: 598:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:598:47: 598:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:597:15: 597:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:599:13: 599:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:599:30: 599:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:599:36: 599:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:599:47: 599:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:597:15: 597:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:600:13: 600:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:600:30: 600:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:600:36: 600:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:600:47: 600:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:597:15: 597:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:601:13: 601:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:601:32: 601:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:601:38: 601:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:597:9: 602:10 (#0),
                },
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:601:49: 601:53 (#0),
            scope: scope[0],
        },
    },
]