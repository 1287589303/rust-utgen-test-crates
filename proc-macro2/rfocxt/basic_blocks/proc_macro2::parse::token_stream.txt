[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:169:21: 169:46 (#0),
                    scope: scope[0],
                },
                kind: _2 = fallback::TokenStreamBuilder::new() -> [return: bb1, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:170:21: 170:31 (#0),
                    scope: scope[1],
                },
                kind: _3 = std::vec::Vec::<(Delimiter, fallback::TokenStreamBuilder)>::new() -> [return: bb2, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:172:5: 250:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:172:5: 250:6 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:173:17: 173:39 (#0),
                    scope: scope[2],
                },
                kind: _6 = parse::skip_whitespace(move _7) -> [return: bb5, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _1 = move _6,
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _1,
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _2,
            _11 = &mut (*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:175:33: 175:63 (#0),
                    scope: scope[3],
                },
                kind: _9 = parse::doc_comment(move _10, move _11) -> [return: bb6, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_9),
            _13 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:175:16: 175:30 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _13) -> [0: bb7, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:175:16: 175:30 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = (((_9 as Ok).0: (parse::Cursor<'_>, ())).0: parse::Cursor<'_>),
            StorageLive(_16),
            _16 = _14,
            _1 = move _16,
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:183:27: 183:40 (#0),
                    scope: scope[2],
                },
                kind: _20 = parse::Cursor::<'_>::bytes(move _21) -> [return: bb10, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = &mut _20,
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:183:27: 183:47 (#0),
                    scope: scope[2],
                },
                kind: _18 = <std::str::Bytes<'_> as std::iter::Iterator>::next(move _19) -> [return: bb11, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            _22 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:183:21: 183:47 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _22) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:183:27: 183:47 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:184:13: 184:24 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:185:27: 185:39 (#0),
                    scope: scope[2],
                },
                kind: _26 = <std::vec::Vec<(Delimiter, fallback::TokenStreamBuilder)> as std::ops::Deref>::deref(move _27) -> [return: bb16, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = ((_18 as Some).0: u8),
            _17 = _23,
            StorageDead(_23),
            FakeRead(ForLet(None), _17),
            StorageDead(_20),
            StorageDead(_18),
            StorageLive(_36),
            PlaceMention(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:198:39: 198:50 (#0),
                    scope: scope[7],
                },
                kind: switchInt(_17) -> [40: bb25, 91: bb26, 123: bb27, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &(*_26),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:185:27: 185:39 (#0),
                    scope: scope[2],
                },
                kind: _24 = core::slice::<impl [(Delimiter, fallback::TokenStreamBuilder)]>::last(move _25) -> [return: bb17, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _28 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:185:21: 185:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _28) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:185:27: 185:39 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:186:17: 186:21 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = ((_24 as Some).0: &(Delimiter, fallback::TokenStreamBuilder)),
            StorageLive(_34),
            StorageLive(_35),
            _35 = fallback::Span,
            _34 = fallback::LexError { span: move _35 },
            StorageDead(_35),
            _0 = std::result::Result::<fallback::TokenStream, fallback::LexError>::Err(move _34),
            StorageDead(_34),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            _31 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:186:35: 186:48 (#0),
                    scope: scope[2],
                },
                kind: _30 = fallback::TokenStreamBuilder::build(move _31) -> [return: bb22, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _0 = std::result::Result::<fallback::TokenStream, fallback::LexError>::Ok(move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:186:48: 186:49 (#0),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb23, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:186:25: 186:49 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = std::option::Option::<Delimiter>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:202:18: 202:22 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:199:13: 199:17 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:200:13: 200:17 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:201:13: 201:17 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = &fake shallow _17,
            StorageLive(_38),
            StorageLive(_39),
            _39 = &_1,
            StorageLive(_40),
            StorageLive(_41),
            _41 = const parse::ERROR,
            _40 = &(*_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:199:22: 199:46 (#0),
                    scope: scope[7],
                },
                kind: _38 = parse::Cursor::<'_>::starts_with(move _39, move _40) -> [return: bb29, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:199:22: 199:46 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _38) -> [0: bb31, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:199:21: 199:46 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_41),
            FakeRead(ForMatchGuard, _37),
            StorageLive(_42),
            _42 = Delimiter::Parenthesis,
            _36 = std::option::Option::<Delimiter>::Some(move _42),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:199:77: 199:78 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = Delimiter::Bracket,
            _36 = std::option::Option::<Delimiter>::Some(move _43),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:200:44: 200:45 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = Delimiter::Brace,
            _36 = std::option::Option::<Delimiter>::Some(move _44),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:201:42: 201:43 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_36),
            _45 = discriminant(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:198:16: 198:36 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _45) -> [1: bb35, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:198:16: 198:36 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = ((_36 as Some).0: Delimiter),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:204:21: 204:37 (#0),
                    scope: scope[7],
                },
                kind: _47 = parse::Cursor::<'_>::advance(move _48, const 1_usize) -> [return: bb37, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            _1 = move _47,
            StorageDead(_47),
            StorageLive(_49),
            StorageLive(_50),
            _50 = _46,
            StorageLive(_51),
            _51 = move _2,
            _49 = (move _50, move _51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:205:47: 205:48 (#0),
                    scope: scope[7],
                },
                kind: drop(_51) -> [return: bb38, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            FakeRead(ForLet(None), _49),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut _3,
            StorageLive(_54),
            _54 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:208:13: 208:30 (#0),
                    scope: scope[8],
                },
                kind: _52 = std::vec::Vec::<(Delimiter, fallback::TokenStreamBuilder)>::push(move _53, move _54) -> [return: bb39, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:209:21: 209:46 (#0),
                    scope: scope[8],
                },
                kind: _55 = fallback::TokenStreamBuilder::new() -> [return: bb40, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:209:13: 209:18 (#0),
                    scope: scope[8],
                },
                kind: drop(_2) -> [return: bb41, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:209:45: 209:46 (#0),
                    scope: scope[8],
                },
                kind: drop(_55) -> [return: bb43, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:209:45: 209:46 (#0),
                    scope: scope[8],
                },
                kind: drop(_55) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:9: 210:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_49) -> [return: bb44, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:198:9: 249:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            PlaceMention(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:47: 210:58 (#0),
                    scope: scope[9],
                },
                kind: switchInt(_17) -> [41: bb47, 93: bb48, 125: bb49, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = std::option::Option::<Delimiter>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:214:18: 214:22 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:211:13: 211:17 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:212:13: 212:17 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb51, imaginary: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:213:13: 213:17 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = Delimiter::Parenthesis,
            _56 = std::option::Option::<Delimiter>::Some(move _57),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:211:48: 211:49 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_58),
            _58 = Delimiter::Bracket,
            _56 = std::option::Option::<Delimiter>::Some(move _58),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:212:44: 212:45 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            _59 = Delimiter::Brace,
            _56 = std::option::Option::<Delimiter>::Some(move _59),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:213:42: 213:43 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_56),
            _60 = discriminant(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:23: 210:44 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _60) -> [1: bb54, otherwise: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:23: 210:44 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_61),
            _61 = ((_56 as Some).0: Delimiter),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:216:31: 216:42 (#0),
                    scope: scope[9],
                },
                kind: _63 = std::vec::Vec::<(Delimiter, fallback::TokenStreamBuilder)>::pop(move _64) -> [return: bb56, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            PlaceMention(_63),
            _65 = discriminant(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:216:25: 216:42 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _65) -> [0: bb59, 1: bb58, otherwise: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:216:31: 216:42 (#0),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:217:17: 217:28 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb60, imaginary: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_68),
            StorageLive(_69),
            _69 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:218:36: 218:52 (#0),
                    scope: scope[9],
                },
                kind: _68 = parse::lex_error(move _69) -> [return: bb62, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = move ((_63 as Some).0: (Delimiter, fallback::TokenStreamBuilder)),
            _62 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:217:36: 217:37 (#0),
                    scope: scope[9],
                },
                kind: drop(_66) -> [return: bb61, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            FakeRead(ForLet(None), _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:219:14: 219:15 (#0),
                    scope: scope[9],
                },
                kind: drop(_63) -> [return: bb63, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            _0 = std::result::Result::<fallback::TokenStream, fallback::LexError>::Err(move _68),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:219:14: 219:15 (#0),
                    scope: scope[9],
                },
                kind: drop(_63) -> [return: bb100, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            PlaceMention(_62),
            StorageLive(_70),
            _70 = (_62.0: Delimiter),
            StorageLive(_71),
            _71 = move (_62.1: fallback::TokenStreamBuilder),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &_70,
            StorageLive(_75),
            _75 = &_61,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:223:16: 223:49 (#0),
                    scope: scope[12],
                },
                kind: _73 = <Delimiter as std::cmp::PartialEq>::ne(move _74, move _75) -> [return: bb64, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:223:16: 223:49 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _73) -> [0: bb67, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_77),
            StorageLive(_78),
            _78 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:224:28: 224:44 (#0),
                    scope: scope[12],
                },
                kind: _77 = parse::lex_error(move _78) -> [return: bb66, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            _0 = std::result::Result::<fallback::TokenStream, fallback::LexError>::Err(move _77),
            StorageDead(_77),
            StorageDead(_73),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[10],
                },
                kind: drop(_71) -> [return: bb99, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            _72 = const (),
            StorageDead(_73),
            StorageDead(_72),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:226:21: 226:37 (#0),
                    scope: scope[12],
                },
                kind: _79 = parse::Cursor::<'_>::advance(move _80, const 1_usize) -> [return: bb68, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            _1 = move _79,
            StorageDead(_79),
            StorageLive(_81),
            StorageLive(_82),
            _82 = _70,
            StorageLive(_83),
            StorageLive(_84),
            _84 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:227:52: 227:65 (#0),
                    scope: scope[12],
                },
                kind: _83 = fallback::TokenStreamBuilder::build(move _84) -> [return: bb69, unwind: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:227:25: 227:66 (#0),
                    scope: scope[12],
                },
                kind: _81 = fallback::Group::new(move _82, move _83) -> [return: bb70, unwind: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            FakeRead(ForLet(None), _81),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &mut _81,
            StorageLive(_87),
            _87 = fallback::Span,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:228:13: 233:15 (#0),
                    scope: scope[13],
                },
                kind: _85 = fallback::Group::set_span(move _86, move _87) -> [return: bb71, unwind: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            StorageDead(_85),
            StorageLive(_88),
            _88 = move _71,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:234:13: 234:18 (#0),
                    scope: scope[13],
                },
                kind: drop(_2) -> [return: bb72, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _88,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:234:25: 234:26 (#0),
                    scope: scope[13],
                },
                kind: drop(_88) -> [return: bb74, unwind: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _88,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:234:25: 234:26 (#0),
                    scope: scope[13],
                },
                kind: drop(_88) -> [return: bb114, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &mut _2,
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = move _81,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:235:59: 235:89 (#0),
                    scope: scope[13],
                },
                kind: _92 = Group::_new_fallback(move _93) -> [return: bb75, unwind: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            _91 = TokenTree::Group(move _92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:235:89: 235:90 (#0),
                    scope: scope[13],
                },
                kind: drop(_92) -> [return: bb76, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:235:13: 235:91 (#0),
                    scope: scope[13],
                },
                kind: _89 = fallback::TokenStreamBuilder::push_token_from_parser(move _90, move _91) -> [return: bb77, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
            StorageDead(_89),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[12],
                },
                kind: drop(_81) -> [return: bb78, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[10],
                },
                kind: drop(_71) -> [return: bb79, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[9],
                },
                kind: drop(_62) -> [return: bb80, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:16: 249:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:237:40: 237:57 (#0),
                    scope: scope[4],
                },
                kind: _97 = parse::leaf_token(move _98) -> [return: bb82, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            PlaceMention(_97),
            _99 = discriminant(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:237:34: 237:57 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _99) -> [0: bb84, 1: bb85, otherwise: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:237:40: 237:57 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:238:17: 238:31 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb86, imaginary: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_105),
            StorageLive(_106),
            _106 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:239:43: 239:59 (#0),
                    scope: scope[4],
                },
                kind: _105 = parse::lex_error(move _106) -> [return: bb89, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = (((_97 as Ok).0: (parse::Cursor<'_>, TokenTree)).0: parse::Cursor<'_>),
            StorageLive(_101),
            _101 = move (((_97 as Ok).0: (parse::Cursor<'_>, TokenTree)).1: TokenTree),
            StorageLive(_102),
            _102 = _100,
            StorageLive(_103),
            _103 = move _101,
            _96 = (move _102, move _103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:238:44: 238:45 (#0),
                    scope: scope[15],
                },
                kind: drop(_103) -> [return: bb87, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:238:44: 238:45 (#0),
                    scope: scope[4],
                },
                kind: drop(_101) -> [return: bb88, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
            PlaceMention(_96),
            StorageLive(_94),
            _94 = (_96.0: parse::Cursor<'_>),
            StorageLive(_95),
            _95 = move (_96.1: TokenTree),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:240:14: 240:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_96) -> [return: bb90, unwind: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            _0 = std::result::Result::<fallback::TokenStream, fallback::LexError>::Err(move _105),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:240:14: 240:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_97) -> [return: bb98, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:240:14: 240:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_97) -> [return: bb91, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_107),
            StorageLive(_108),
            _108 = &mut _95,
            StorageLive(_109),
            StorageLive(_110),
            _110 = fallback::Span,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:241:25: 246:15 (#0),
                    scope: scope[14],
                },
                kind: _109 = Span::_new_fallback(move _110) -> [return: bb92, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:241:13: 246:16 (#0),
                    scope: scope[14],
                },
                kind: _107 = TokenTree::set_span(move _108, move _109) -> [return: bb93, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_107),
            StorageLive(_111),
            StorageLive(_112),
            _112 = &mut _2,
            StorageLive(_113),
            _113 = move _95,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:247:13: 247:45 (#0),
                    scope: scope[14],
                },
                kind: _111 = fallback::TokenStreamBuilder::push_token_from_parser(move _112, move _113) -> [return: bb94, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageDead(_112),
            StorageDead(_111),
            StorageLive(_114),
            _114 = _94,
            _1 = move _114,
            StorageDead(_114),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:249:9: 249:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_95) -> [return: bb95, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:16: 249:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:198:9: 249:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:172:5: 250:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[9],
                },
                kind: drop(_62) -> [return: bb101, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb101,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_17),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:251:1: 251:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb105, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:251:1: 251:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb106, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:251:2: 251:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:247:44: 247:45 (#0),
                    scope: scope[14],
                },
                kind: drop(_113) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:240:14: 240:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_97) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:249:9: 249:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_95) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:238:44: 238:45 (#0),
                    scope: scope[4],
                },
                kind: drop(_101) -> [return: bb111, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:240:14: 240:15 (#0),
                    scope: scope[4],
                },
                kind: drop(_97) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:235:90: 235:91 (#0),
                    scope: scope[13],
                },
                kind: drop(_91) -> [return: bb114, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:235:88: 235:89 (#0),
                    scope: scope[13],
                },
                kind: drop(_93) -> [return: bb114, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[12],
                },
                kind: drop(_81) -> [return: bb117, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:227:65: 227:66 (#0),
                    scope: scope[12],
                },
                kind: drop(_83) -> [return: bb117, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:227:64: 227:65 (#0),
                    scope: scope[12],
                },
                kind: drop(_84) -> [return: bb117, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[10],
                },
                kind: drop(_71) -> [return: bb118, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:236:9: 236:10 (#0),
                    scope: scope[9],
                },
                kind: drop(_62) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:219:14: 219:15 (#0),
                    scope: scope[9],
                },
                kind: drop(_63) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:208:29: 208:30 (#0),
                    scope: scope[8],
                },
                kind: drop(_54) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:210:9: 210:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_49) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:186:47: 186:48 (#0),
                    scope: scope[2],
                },
                kind: drop(_31) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:251:1: 251:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb124, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:251:1: 251:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb125, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:168:1: 251:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<fallback::TokenStream, fallback::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:168:50: 168:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:168:39: 168:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:168:28: 168:37 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:168:28: 168:37 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:168:28: 168:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:169:21: 169:46 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:169:9: 169:18 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:169:9: 169:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:170:21: 170:31 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:170:9: 170:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<(Delimiter, fallback::TokenStreamBuilder), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:170:9: 170:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:172:5: 250:6 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:172:5: 250:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:168:1: 251:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:173:17: 173:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:173:33: 173:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:9: 178:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, ()), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:33: 175:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:45: 175:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:52: 175:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:52: 175:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:16: 175:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/parse.rs:175:33: 175:63 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:175:16: 175:30 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:20: 175:24 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:175:64: 178:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:176:21: 176:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:183:21: 196:10 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:183:13: 183:18 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:183:13: 183:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:183:27: 183:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:183:27: 183:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:183:27: 183:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:183:27: 183:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:184:13: 184:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/parse.rs:183:27: 183:47 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:184:13: 184:24 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:184:18: 184:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} (Delimiter, fallback::TokenStreamBuilder)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:185:27: 185:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(Delimiter, fallback::TokenStreamBuilder)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:185:27: 185:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(Delimiter, fallback::TokenStreamBuilder)],
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:185:27: 185:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(Delimiter, fallback::TokenStreamBuilder), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:185:27: 185:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:186:17: 186:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:186:25: 186:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:186:35: 186:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:186:35: 186:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/parse.rs:185:27: 185:39 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:194:17: 194:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} (Delimiter, fallback::TokenStreamBuilder),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:194:22: 194:28 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:194:33: 194:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:194:44: 194:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:194:61: 194:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:198:9: 249:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<Delimiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:198:39: 203:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:198:45: 198:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:198:9: 249:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:199:22: 199:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:198:9: 249:10 (#0),
                },
            ),
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:199:22: 199:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:198:9: 249:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:199:40: 199:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:59 ~ proc_macro2[acde]::parse::ERROR),
            },
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:199:40: 199:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:199:55: 199:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:200:26: 200:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:201:26: 201:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:198:16: 198:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                src/parse.rs:198:39: 203:10 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:198:16: 198:36 (#0),
                    },
                ),
            ),
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:198:21: 198:35 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:204:21: 204:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:204:21: 204:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:205:25: 205:48 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:205:17: 205:22 (#0),
                    },
                ),
            ),
        ),
        ty: (Delimiter, fallback::TokenStreamBuilder),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:205:17: 205:22 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:205:26: 205:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:205:42: 205:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:208:13: 208:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(Delimiter, fallback::TokenStreamBuilder), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:208:13: 208:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (Delimiter, fallback::TokenStreamBuilder),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:208:24: 208:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:209:21: 209:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:198:9: 249:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<Delimiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:210:47: 215:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:211:26: 211:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:212:26: 212:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:213:26: 213:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:210:23: 210:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                src/parse.rs:210:47: 215:10 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:210:23: 210:44 (#0),
                    },
                ),
            ),
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:210:28: 210:43 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:216:25: 219:14 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:216:17: 216:22 (#0),
                    },
                ),
            ),
        ),
        ty: (Delimiter, fallback::TokenStreamBuilder),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:216:17: 216:22 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(Delimiter, fallback::TokenStreamBuilder)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:216:31: 216:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(Delimiter, fallback::TokenStreamBuilder), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:216:31: 216:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:217:17: 217:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _63,
                                ),
                                src/parse.rs:216:31: 216:42 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:217:17: 217:28 (#0),
                    },
                ),
            ),
        ),
        ty: (Delimiter, fallback::TokenStreamBuilder),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:217:22: 217:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:218:25: 218:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:218:36: 218:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:218:46: 218:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                src/parse.rs:222:43: 222:48 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:222:17: 222:40 (#0),
                    },
                ),
            ),
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:222:18: 222:32 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                src/parse.rs:222:43: 222:48 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:222:17: 222:40 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:222:34: 222:39 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:223:13: 225:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:223:16: 223:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:223:16: 223:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:223:34: 223:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:223:50: 225:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:224:28: 224:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:224:38: 224:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:226:21: 226:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:226:21: 226:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:227:25: 227:66 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:227:17: 227:22 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:227:17: 227:22 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:227:36: 227:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:227:52: 227:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:227:52: 227:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:228:13: 233:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:228:13: 228:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:228:24: 233:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:234:21: 234:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:235:13: 235:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:235:13: 235:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:235:42: 235:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:235:59: 235:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:235:87: 235:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _96,
                                ),
                                src/parse.rs:237:34: 240:14 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:237:17: 237:31 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:237:18: 237:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _96,
                                ),
                                src/parse.rs:237:34: 240:14 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:237:17: 237:31 (#0),
                    },
                ),
            ),
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:237:24: 237:30 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (parse::Cursor<'{erased}>, TokenTree),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:237:34: 240:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, TokenTree), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:237:40: 237:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:237:51: 237:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:238:17: 238:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _97,
                                ),
                                src/parse.rs:237:40: 237:57 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:238:17: 238:31 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:238:21: 238:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _97,
                                ),
                                src/parse.rs:237:40: 237:57 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:238:17: 238:31 (#0),
                    },
                ),
            ),
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:238:27: 238:29 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:238:36: 238:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:238:42: 238:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:239:32: 239:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:239:43: 239:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:239:53: 239:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:241:13: 246:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:241:13: 241:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:241:25: 246:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:241:52: 246:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:247:13: 247:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut fallback::TokenStreamBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:247:13: 247:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:247:42: 247:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:248:21: 248:25 (#0),
            scope: scope[0],
        },
    },
]