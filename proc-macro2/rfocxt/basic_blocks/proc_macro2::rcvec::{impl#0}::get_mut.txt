[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: std::rc::Rc<std::vec::Vec<T>>),
            _5 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:47:21: 47:49 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::rc::Rc::<std::vec::Vec<T>>::get_mut(move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:47:21: 47:50 (#350),
                    scope: scope[0],
                },
                kind: _3 = <std::option::Option<&mut std::vec::Vec<T>> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _7 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:47:21: 47:50 (#350),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:47:21: 47:50 (#350),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:47:49: 47:50 (#351),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_3 as Continue).0: &mut std::vec::Vec<T>),
            _2 = move _11,
            StorageDead(_11),
            FakeRead(ForLet(None), _2),
            StorageDead(_6),
            StorageDead(_3),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut (*_2),
            _12 = rcvec::RcVecMut::<'_, T> { inner: move _13 },
            StorageDead(_13),
            _0 = std::option::Option::<rcvec::RcVecMut<'_, T>>::Some(move _12),
            StorageDead(_12),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:49:6: 49:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = ((_3 as Break).0: std::option::Option<std::convert::Infallible>),
            StorageLive(_10),
            _10 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:47:21: 47:50 (#350),
                    scope: scope[3],
                },
                kind: _0 = <std::option::Option<rcvec::RcVecMut<'_, T>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual(move _10) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:49:6: 49:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:49:6: 49:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:46:5: 49:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<rcvec::RcVecMut<'{erased}, T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:46:41: 46:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut rcvec::RcVec<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:46:27: 46:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rcvec.rs:47:21: 47:50 (#0),
                            ),
                        ),
                        pat_span: src/rcvec.rs:47:13: 47:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:13: 47:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, &'{erased} mut std::vec::Vec<T/#0, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:21: 47:50 (#350),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut std::vec::Vec<T/#0, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:21: 47:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::rc::Rc<std::vec::Vec<T/#0, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:33: 47:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::rc::Rc<std::vec::Vec<T/#0, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:33: 47:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:49: 47:50 (#351),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/rcvec.rs:47:21: 47:50 (#350),
                            ),
                        ),
                        pat_span: src/rcvec.rs:47:49: 47:50 (#351),
                    },
                ),
            ),
        ),
        ty: std::option::Option<std::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:49: 47:50 (#351),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:49: 47:50 (#351),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<std::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:49: 47:50 (#351),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/rcvec.rs:47:21: 47:50 (#350),
                            ),
                        ),
                        pat_span: src/rcvec.rs:47:21: 47:50 (#350),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:47:21: 47:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rcvec::RcVecMut<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:48:14: 48:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut std::vec::Vec<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:48:25: 48:30 (#0),
            scope: scope[0],
        },
    },
]