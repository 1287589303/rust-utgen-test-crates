[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:27: 300:46 (#0),
                    scope: scope[0],
                },
                kind: _4 = <I as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@src/lib.rs:300:51: 300:54},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:27: 300:63 (#0),
                    scope: scope[0],
                },
                kind: _3 = <<I as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::map::<imp::TokenStream, {closure@src/lib.rs:300:51: 300:54}>(move _4, move _6) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:27: 300:73 (#0),
                    scope: scope[0],
                },
                kind: _2 = <std::iter::Map<<I as std::iter::IntoIterator>::IntoIter, {closure@src/lib.rs:300:51: 300:54}> as std::iter::Iterator>::collect::<imp::TokenStream>(move _3) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:9: 300:74 (#0),
                    scope: scope[0],
                },
                kind: _0 = TokenStream::_new(move _2) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:301:5: 301:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:301:6: 301:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:73: 300:74 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:72: 300:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:62: 300:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:300:45: 300:46 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:301:5: 301:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:299:5: 301:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:299:70: 299:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:299:64: 299:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:299:55: 299:62 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:299:55: 299:62 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:299:55: 299:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:300:9: 300:74 (#0),
                },
            ),
        ),
        ty: imp::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:300:27: 300:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:300:9: 300:74 (#0),
                },
            ),
        ),
        ty: std::iter::Map<Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Closure(DefId(0:551 ~ proc_macro2[acde]::{impl#9}::from_iter::{closure#0}), [I/#0, i16, Binder { value: extern "RustCall" fn((TokenStream,)) -> imp::TokenStream, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:300:27: 300:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:300:9: 300:74 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:300:27: 300:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:300:9: 300:74 (#0),
                },
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:300:27: 300:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:300:9: 300:74 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:551 ~ proc_macro2[acde]::{impl#9}::from_iter::{closure#0}),
            [
                I/#0,
                i16,
                Binder { value: extern "RustCall" fn((TokenStream,)) -> imp::TokenStream, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:300:51: 300:62 (#0),
            scope: scope[0],
        },
    },
]