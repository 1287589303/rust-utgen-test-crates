[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            _5 = (_2.0: imp::Span),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1011:21: 1011:64 (#0),
                    scope: scope[0],
                },
                kind: _3 = imp::Ident::new_checked(move _4, move _5) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1011:9: 1011:65 (#0),
                    scope: scope[0],
                },
                kind: _0 = Ident::_new(move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:6: 1012:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1011:64: 1011:65 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1010:5: 1012:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1010:45: 1010:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1010:24: 1010:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1010:16: 1010:22 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1010:16: 1010:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1010:16: 1010:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1010:36: 1010:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1010:30: 1010:34 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1010:30: 1010:34 (#0),
                    },
                ),
            ),
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1010:30: 1010:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1011:65 (#0),
                },
            ),
        ),
        ty: imp::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1011:21: 1011:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1011:65 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1011:45: 1011:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1011:65 (#0),
                },
            ),
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1011:53: 1011:63 (#0),
            scope: scope[0],
        },
    },
]