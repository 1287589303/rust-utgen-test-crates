[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:971:26: 971:42 (#0),
                    scope: scope[0],
                },
                kind: _2 = fallback::get_cursor(move _3) -> [return: bb1, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:975:24: 975:52 (#0),
                    scope: scope[1],
                },
                kind: _4 = parse::Cursor::<'_>::starts_with_char(move _5, const '-') -> [return: bb2, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:976:12: 976:20 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _7) -> [0: bb9, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:977:22: 977:39 (#0),
                    scope: scope[2],
                },
                kind: _8 = parse::Cursor::<'_>::advance(move _9, const 1_usize) -> [return: bb4, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _2 = move _8,
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_2,
            StorageLive(_12),
            _12 = {closure@src/fallback.rs:978:39: 978:43},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:978:17: 978:64 (#0),
                    scope: scope[2],
                },
                kind: _10 = parse::Cursor::<'_>::starts_with_fn::<{closure@src/fallback.rs:978:39: 978:43}>(move _11, move _12) -> [return: bb5, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:978:17: 978:64 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _6 = const (),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:976:9: 981:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:979:28: 979:49 (#0),
                    scope: scope[2],
                },
                kind: _14 = fallback::LexError::call_site() -> [return: bb8, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = std::result::Result::<fallback::Literal, fallback::LexError>::Err(move _14),
            StorageDead(_14),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:976:9: 981:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:983:42: 983:64 (#0),
                    scope: scope[3],
                },
                kind: _16 = parse::literal(move _17) -> [return: bb11, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _18 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:983:16: 983:39 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _18) -> [0: bb12, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:983:16: 983:39 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = (((_16 as Ok).0: (parse::Cursor<'_>, fallback::Literal)).0: parse::Cursor<'_>),
            StorageLive(_20),
            _20 = move (((_16 as Ok).0: (parse::Cursor<'_>, fallback::Literal)).1: fallback::Literal),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:984:16: 984:31 (#0),
                    scope: scope[3],
                },
                kind: _21 = parse::Cursor::<'_>::is_empty(move _22) -> [return: bb14, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:984:16: 984:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _21) -> [0: bb21, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:985:20: 985:28 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _25) -> [0: bb18, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut (_20.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:986:21: 986:48 (#0),
                    scope: scope[3],
                },
                kind: _26 = std::string::String::insert(move _27, const 0_usize, const '-') -> [return: bb17, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:985:17: 987:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:985:17: 987:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_28),
            _28 = fallback::Span,
            (_20.1: fallback::Span) = move _28,
            StorageDead(_28),
            StorageLive(_29),
            _29 = move _20,
            _0 = std::result::Result::<fallback::Literal, fallback::LexError>::Ok(move _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:994:34: 994:35 (#0),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb20, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:996:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb27, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _15 = const (),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:996:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:983:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:983:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:996:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb25, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:997:13: 997:34 (#0),
                    scope: scope[2],
                },
                kind: _30 = fallback::LexError::call_site() -> [return: bb26, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = std::result::Result::<fallback::Literal, fallback::LexError>::Err(move _30),
            StorageDead(_30),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:998:6: 998:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:996:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb28, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:998:6: 998:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:998:6: 998:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:996:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:996:9: 996:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:970:5: 998:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<fallback::Literal, fallback::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:970:51: 970:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:970:42: 970:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:970:36: 970:40 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:970:36: 970:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:970:36: 970:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:971:26: 971:42 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:971:13: 971:23 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:971:13: 971:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:971:37: 971:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:975:24: 975:52 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:975:13: 975:21 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:975:13: 975:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:975:24: 975:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:976:9: 981:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:976:12: 976:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:977:22: 977:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:977:22: 977:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:978:13: 980:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:978:17: 978:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:978:13: 980:14 (#0),
                },
            ),
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:978:17: 978:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:978:13: 980:14 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:304 ~ proc_macro2[acde]::fallback::{impl#25}::from_str_checked::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((char,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:978:39: 978:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:978:13: 980:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:978:65: 980:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:979:28: 979:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:983:9: 996:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, fallback::Literal), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:983:42: 983:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:983:57: 983:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:983:16: 983:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/fallback.rs:983:42: 983:64 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:983:16: 983:39 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:983:20: 983:24 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/fallback.rs:983:42: 983:64 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:983:16: 983:39 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:983:26: 983:37 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:984:13: 995:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:984:16: 984:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:984:13: 995:14 (#0),
                },
            ),
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:984:16: 984:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:984:13: 995:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:984:32: 995:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:985:17: 987:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:985:20: 985:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:986:21: 986:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:986:21: 986:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:988:32: 993:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:994:27: 994:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:997:13: 997:34 (#0),
            scope: scope[0],
        },
    },
]