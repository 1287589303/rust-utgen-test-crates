[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1246:13: 1246:29 (#0),
                    scope: scope[0],
                },
                kind: _3 = <Self as fallback::FromStr2>::valid(move _4) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1246:13: 1246:29 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
            _8 = {closure@src/fallback.rs:1251:35: 1251:37} { src: move _9 },
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1251:15: 1251:58 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::panic::catch_unwind::<{closure@src/fallback.rs:1251:35: 1251:37}, std::result::Result<Self, proc_macro::LexError>>(move _8) -> [return: bb4, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_6),
            _6 = imp::LexError::CompilerPanic,
            _0 = std::result::Result::<Self, imp::LexError>::Err(move _6),
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1256:6: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            _11 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1251:9: 1251:58 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb6, 1: bb9, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1251:15: 1251:58 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = discriminant(((_7 as Ok).0: std::result::Result<Self, proc_macro::LexError>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1251:9: 1251:58 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb7, 1: bb8, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1252:13: 1252:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1253:13: 1253:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_7 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>),
            StorageLive(_18),
            _18 = imp::LexError::CompilerPanic,
            _0 = std::result::Result::<Self, imp::LexError>::Err(move _18),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1254:60: 1254:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((((_7 as Ok).0: std::result::Result<Self, proc_macro::LexError>) as Ok).0: Self),
            StorageLive(_13),
            _13 = move _12,
            _0 = std::result::Result::<Self, imp::LexError>::Ok(move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1252:32: 1252:33 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1252:32: 1252:33 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1252:32: 1252:33 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((((_7 as Ok).0: std::result::Result<Self, proc_macro::LexError>) as Err).0: proc_macro::LexError),
            StorageLive(_15),
            StorageLive(_16),
            _16 = move _14,
            _15 = imp::LexError::Compiler(move _16),
            StorageDead(_16),
            _0 = std::result::Result::<Self, imp::LexError>::Err(move _15),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1253:61: 1253:62 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1254:60: 1254:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1256:5: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1256:6: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1256:6: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1252:32: 1252:33 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1256:5: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1242:5: 1256:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<Self/#0, imp::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1242:39: 1242:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:1242:30: 1242:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:1242:25: 1242:28 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1242:25: 1242:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1242:25: 1242:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1246:9: 1248:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1246:13: 1246:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1246:25: 1246:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1246:30: 1248:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: imp::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1247:24: 1247:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:1251:9: 1255:10 (#0),
                },
            ),
        ),
        ty: std::result::Result<std::result::Result<Self/#0, proc_macro::LexError>, std::boxed::Box<dyn [Binder { value: Trait(std::any::Any), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:32818 ~ core[a245]::marker::Send)), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1251:15: 1251:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:1251:9: 1255:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:327 ~ proc_macro2[acde]::fallback::FromStr2::from_str_checked::{closure#0}),
            [
                Self/#0,
                i32,
                Binder { value: extern "RustCall" fn(()) -> std::result::Result<Self/#0, proc_macro::LexError>, bound_vars: [] },
                (&'{erased} str,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1251:35: 1251:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:1251:9: 1255:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1251:35: 1251:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1252:16: 1252:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1252:13: 1252:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/fallback.rs:1251:15: 1251:58 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1252:13: 1252:23 (#0),
                    },
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1252:19: 1252:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1252:30: 1252:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/fallback.rs:1251:15: 1251:58 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1253:13: 1253:25 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1253:20: 1253:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: imp::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1253:33: 1253:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1253:57: 1253:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/fallback.rs:1251:15: 1251:58 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1254:13: 1254:24 (#0),
                    },
                ),
            ),
        ),
        ty: std::boxed::Box<dyn [Binder { value: Trait(std::any::Any), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:32818 ~ core[a245]::marker::Send)), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1254:17: 1254:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: imp::LexError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1254:32: 1254:60 (#0),
            scope: scope[0],
        },
    },
]