[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#25),
                    scope: scope[0],
                },
                kind: _3 = <I as std::iter::Iterator>::next(move _4) -> [return: bb1, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:9: 625:28 (#25),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#25),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:626:13: 626:26 (#25),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _16),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:630:21: 630:39 (#25),
                    scope: scope[0],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = (((_3 as Some).0: (usize, u8)).1: u8),
            PlaceMention(_6),
            _11 = Le(const 48_u8, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:22: 648:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb7, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _14),
            StorageDead(_14),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = Le(const 97_u8, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:36: 648:47 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb8, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Le(const 65_u8, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:50: 648:61 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb6, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = Le(_6, const 70_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:50: 648:61 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb6, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = Le(_6, const 102_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:36: 648:47 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb8, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = Le(_6, const 57_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:22: 648:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb7, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:648:22: 648:61 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = _6,
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#26),
                    scope: scope[0],
                },
                kind: _18 = <I as std::iter::Iterator>::next(move _19) -> [return: bb14, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            _20 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:9: 625:28 (#26),
                    scope: scope[0],
                },
                kind: switchInt(move _20) -> [0: bb17, 1: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:625:15: 625:28 (#26),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:626:13: 626:26 (#26),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _31),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:630:21: 630:39 (#26),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = (((_18 as Some).0: (usize, u8)).1: u8),
            PlaceMention(_21),
            _26 = Le(const 48_u8, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:22: 649:33 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _26) -> [0: bb20, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = parse::Reject,
            _0 = std::result::Result::<(), parse::Reject>::Err(move _29),
            StorageDead(_29),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = Le(const 97_u8, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:36: 649:47 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _24) -> [0: bb21, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = Le(const 65_u8, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:50: 649:61 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _22) -> [0: bb19, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = Le(_21, const 70_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:50: 649:61 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _23) -> [0: bb19, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = Le(_21, const 102_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:36: 649:47 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _25) -> [0: bb21, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = Le(_21, const 57_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:22: 649:33 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _27) -> [0: bb20, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:649:22: 649:61 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = _21,
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_32),
            _32 = (),
            _0 = std::result::Result::<(), parse::Reject>::Ok(move _32),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:651:2: 651:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:651:2: 651:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:644:1: 651:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:644:42: 644:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:644:31: 644:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:644:24: 644:29 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:644:24: 644:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:644:24: 644:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:9: 631:10 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:28 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:21 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:13: 626:26 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/parse.rs:625:15: 625:28 (#25),
                            ),
                        ),
                        pat_span: src/parse.rs:626:13: 626:26 (#25),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:22: 626:24 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:648:50: 648:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:648:50: 648:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:648:36: 648:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:648:36: 648:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:648:22: 648:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:648:22: 648:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:22: 628:40 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:33: 628:39 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:21: 630:39 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:32: 630:38 (#25),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:9: 631:10 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:28 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:625:15: 625:21 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:13: 626:26 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/parse.rs:625:15: 625:28 (#26),
                            ),
                        ),
                        pat_span: src/parse.rs:626:13: 626:26 (#26),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:626:22: 626:24 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:649:50: 649:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:649:50: 649:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:649:36: 649:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:649:36: 649:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:649:22: 649:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:649:22: 649:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:22: 628:40 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:628:33: 628:39 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:21: 630:39 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:630:32: 630:38 (#26),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:650:8: 650:10 (#0),
            scope: scope[0],
        },
    },
]