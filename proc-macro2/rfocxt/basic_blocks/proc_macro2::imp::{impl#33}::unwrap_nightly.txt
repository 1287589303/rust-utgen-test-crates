[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:963:9: 963:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:963:15: 963:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:964:13: 964:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:965:37: 965:54 (#0),
                    scope: scope[0],
                },
                kind: _4 = imp::mismatch(const 965_u32) -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move ((_1 as Compiler).0: proc_macro::Literal),
            _0 = move _3,
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:967:5: 967:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:967:6: 967:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:967:5: 967:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:962:5: 967:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:962:32: 962:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:962:23: 962:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:964:13: 964:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:963:15: 963:19 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:964:13: 964:33 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:964:31: 964:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:963:9: 966:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:965:37: 965:54 (#0),
            scope: scope[0],
        },
    },
]