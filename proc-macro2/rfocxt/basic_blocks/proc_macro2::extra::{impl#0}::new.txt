[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention(_1),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:101:21: 101:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:101:27: 101:32 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:102:13: 102:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_1) as Fallback).0: fallback::Group),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:107:68: 107:80 (#0),
                    scope: scope[3],
                },
                kind: _12 = fallback::Group::span(move _13) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_1) as Compiler).0: proc_macro::Group),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:103:23: 103:35 (#0),
                    scope: scope[2],
                },
                kind: _5 = proc_macro::Group::span(move _6) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:104:23: 104:40 (#0),
                    scope: scope[2],
                },
                kind: _7 = proc_macro::Group::span_open(move _8) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:105:24: 105:42 (#0),
                    scope: scope[2],
                },
                kind: _9 = proc_macro::Group::span_close(move _10) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _2 = extra::DelimSpanEnum::Compiler { join: move _5, open: move _7, close: move _9 },
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:106:13: 106:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _2 = extra::DelimSpanEnum::Fallback(move _12),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:107:80: 107:81 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_14),
            _14 = _2,
            _0 = extra::DelimSpan { inner: move _14, _marker: const marker::MARKER },
            StorageDead(_14),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:117:6: 117:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:99:5: 117:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: extra::DelimSpan,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:99:46: 99:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/extra.rs:99:30: 99:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/extra.rs:99:23: 99:28 (#0),
                            ),
                        ),
                        pat_span: src/extra.rs:99:23: 99:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} imp::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:99:23: 99:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/extra.rs:101:21: 108:10 (#0),
                            ),
                        ),
                        pat_span: src/extra.rs:101:13: 101:18 (#0),
                    },
                ),
            ),
        ),
        ty: extra::DelimSpanEnum,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:101:13: 101:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:102:13: 102:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/extra.rs:101:27: 101:32 (#0),
                            ),
                        ),
                        pat_span: src/extra.rs:102:13: 102:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:102:34: 102:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:103:23: 103:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:103:23: 103:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:104:23: 104:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:104:23: 104:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:105:24: 105:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:105:24: 105:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/extra.rs:101:27: 101:32 (#0),
                            ),
                        ),
                        pat_span: src/extra.rs:107:13: 107:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:107:34: 107:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:107:68: 107:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:107:68: 107:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: extra::DelimSpanEnum,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:114:13: 114:18 (#0),
            scope: scope[0],
        },
    },
]