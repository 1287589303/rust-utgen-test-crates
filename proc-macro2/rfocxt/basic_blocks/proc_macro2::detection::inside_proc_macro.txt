[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = const {alloc1: &std::sync::atomic::AtomicUsize},
            _3 = &(*_4),
            StorageLive(_5),
            _5 = std::sync::atomic::Ordering::Relaxed,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:8:11: 8:40 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::sync::atomic::AtomicUsize::load(move _3, move _5) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
            PlaceMention(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:8:5: 8:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(_2) -> [1: bb3, 2: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _1 = const (),
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_1),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = const {alloc2: &std::sync::Once},
            _9 = &(*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:14:5: 14:31 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::sync::Once::call_once::<fn() {detection::initialize}>(move _9, detection::initialize) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:9:9: 9:10 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:10:9: 10:10 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:9:14: 9:26 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:10:14: 10:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:15:5: 15:24 (#0),
                    scope: scope[0],
                },
                kind: _0 = detection::inside_proc_macro() -> [return: bb9, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:16:2: 16:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:16:2: 16:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:7:1: 16:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:7:38: 7:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:8:5: 12:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:8:11: 8:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:8:11: 8:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:167 ~ proc_macro2[acde]::detection::WORKS),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} std::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:8:11: 8:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:8:22: 8:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:9:14: 9:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:10:14: 10:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:14:5: 14:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Once,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:14:5: 14:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:168 ~ proc_macro2[acde]::detection::INIT),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} std::sync::Once,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:14:5: 14:9 (#0),
            scope: scope[0],
        },
    },
]