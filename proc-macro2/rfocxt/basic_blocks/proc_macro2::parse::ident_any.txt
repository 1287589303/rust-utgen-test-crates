[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &_1,
            StorageLive(_4),
            StorageLive(_5),
            _5 = const "r#",
            _4 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:297:15: 297:38 (#0),
                    scope: scope[0],
                },
                kind: _2 = parse::Cursor::<'_>::starts_with(move _3, move _4) -> [return: bb1, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _2,
            _9 = move _10 as usize (IntToInt),
            StorageDead(_10),
            _11 = const 1_i32 as u32 (IntToInt),
            _12 = Lt(move _11, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:298:30: 298:49 (#0),
                    scope: scope[1],
                },
                kind: assert(move _12, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb2, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = Shl(move _9, const 1_i32),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:298:16: 298:50 (#0),
                    scope: scope[1],
                },
                kind: _6 = parse::Cursor::<'_>::advance(move _7, move _8) -> [return: bb3, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:300:23: 300:42 (#0),
                    scope: scope[2],
                },
                kind: _17 = parse::ident_not_raw(move _18) -> [return: bb4, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:300:23: 300:43 (#228),
                    scope: scope[2],
                },
                kind: _16 = <std::result::Result<(parse::Cursor<'_>, &str), parse::Reject> as std::ops::Try>::branch(move _17) -> [return: bb5, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:300:23: 300:43 (#228),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:300:23: 300:43 (#228),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:300:42: 300:43 (#229),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = ((_16 as Continue).0: (parse::Cursor<'_>, &str)),
            _15 = _23,
            StorageDead(_23),
            PlaceMention(_15),
            StorageLive(_13),
            _13 = (_15.0: parse::Cursor<'_>),
            StorageLive(_14),
            _14 = (_15.1: &str),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:302:9: 302:12 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _25) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>),
            StorageLive(_22),
            _22 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:300:23: 300:43 (#228),
                    scope: scope[5],
                },
                kind: _0 = <std::result::Result<(parse::Cursor<'_>, Ident), parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _22) -> [return: bb10, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_34),
            PlaceMention(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:9: 309:12 (#0),
                    scope: scope[3],
                },
                kind: _39 = <str as std::cmp::PartialEq>::eq(_14, const "_") -> [return: bb27, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*_14),
            StorageLive(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:304:67: 304:94 (#0),
                    scope: scope[3],
                },
                kind: _30 = fallback::Span::call_site() -> [return: bb13, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:304:41: 304:95 (#0),
                    scope: scope[3],
                },
                kind: _28 = fallback::Ident::new_unchecked(move _29, move _30) -> [return: bb14, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:304:13: 304:96 (#0),
                    scope: scope[3],
                },
                kind: _27 = Ident::_new_fallback(move _28) -> [return: bb15, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _13,
            StorageLive(_33),
            _33 = move _27,
            _31 = (move _32, move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:305:31: 305:32 (#0),
                    scope: scope[8],
                },
                kind: drop(_33) -> [return: bb16, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            _0 = std::result::Result::<(parse::Cursor<'_>, Ident), parse::Reject>::Ok(move _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:305:32: 305:33 (#0),
                    scope: scope[8],
                },
                kind: drop(_31) -> [return: bb17, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:306:5: 306:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_27) -> [return: bb36, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = const (),
            StorageDead(_34),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_14),
            StorageLive(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:314:67: 314:94 (#0),
                    scope: scope[3],
                },
                kind: _45 = fallback::Span::call_site() -> [return: bb30, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:15: 309:22 (#0),
                    scope: scope[3],
                },
                kind: _38 = <str as std::cmp::PartialEq>::eq(_14, const "super") -> [return: bb26, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:25: 309:31 (#0),
                    scope: scope[3],
                },
                kind: _37 = <str as std::cmp::PartialEq>::eq(_14, const "self") -> [return: bb25, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:34: 309:40 (#0),
                    scope: scope[3],
                },
                kind: _36 = <str as std::cmp::PartialEq>::eq(_14, const "Self") -> [return: bb24, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:43: 309:50 (#0),
                    scope: scope[3],
                },
                kind: _35 = <str as std::cmp::PartialEq>::eq(_14, const "crate") -> [return: bb23, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:43: 309:50 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _35) -> [0: bb18, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:34: 309:40 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _36) -> [0: bb22, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:25: 309:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _37) -> [0: bb21, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:15: 309:22 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _38) -> [0: bb20, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:9: 309:12 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _39) -> [0: bb19, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:309:9: 309:50 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = parse::Reject,
            _0 = std::result::Result::<(parse::Cursor<'_>, Ident), parse::Reject>::Err(move _41),
            StorageDead(_41),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:314:37: 314:95 (#0),
                    scope: scope[3],
                },
                kind: _43 = fallback::Ident::new_raw_unchecked(move _44, move _45) -> [return: bb31, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:314:9: 314:96 (#0),
                    scope: scope[3],
                },
                kind: _42 = Ident::_new_fallback(move _43) -> [return: bb32, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            FakeRead(ForLet(None), _42),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _13,
            StorageLive(_48),
            _48 = move _42,
            _46 = (move _47, move _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:315:20: 315:21 (#0),
                    scope: scope[9],
                },
                kind: drop(_48) -> [return: bb33, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            _0 = std::result::Result::<(parse::Cursor<'_>, Ident), parse::Reject>::Ok(move _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:315:21: 315:22 (#0),
                    scope: scope[9],
                },
                kind: drop(_46) -> [return: bb34, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:316:1: 316:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_42) -> [return: bb35, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:316:2: 316:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:316:2: 316:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:316:2: 316:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:315:21: 315:22 (#0),
                    scope: scope[9],
                },
                kind: drop(_46) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:316:1: 316:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_42) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:314:95: 314:96 (#0),
                    scope: scope[3],
                },
                kind: drop(_43) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:305:32: 305:33 (#0),
                    scope: scope[8],
                },
                kind: drop(_31) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:306:5: 306:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_27) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:304:95: 304:96 (#0),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:296:1: 316:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, Ident), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:296:32: 296:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:296:21: 296:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:296:14: 296:19 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:296:14: 296:19 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:296:14: 296:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:297:15: 297:38 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:297:9: 297:12 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:297:9: 297:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:297:15: 297:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:297:33: 297:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:297:33: 297:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:298:16: 298:50 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:298:9: 298:13 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:9: 298:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:16: 298:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:30: 298:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:30: 298:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:31: 298:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:30: 298:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:298:30: 298:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/parse.rs:300:23: 300:43 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:300:9: 300:20 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:10: 300:14 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/parse.rs:300:23: 300:43 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:300:9: 300:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:16: 300:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (parse::Cursor<'{erased}>, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:23: 300:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, parse::Reject>, (parse::Cursor<'{erased}>, &'{erased} str)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:23: 300:43 (#228),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, &'{erased} str), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:23: 300:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:37: 300:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:42: 300:43 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/parse.rs:300:23: 300:43 (#228),
                            ),
                        ),
                        pat_span: src/parse.rs:300:42: 300:43 (#229),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:42: 300:43 (#229),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:42: 300:43 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:42: 300:43 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/parse.rs:300:23: 300:43 (#228),
                            ),
                        ),
                        pat_span: src/parse.rs:300:23: 300:43 (#228),
                    },
                ),
            ),
        ),
        ty: (parse::Cursor<'{erased}>, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:300:23: 300:43 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:302:5: 306:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:302:9: 302:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:302:13: 306:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:304:13: 304:96 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:303:13: 303:18 (#0),
                    },
                ),
            ),
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:303:13: 303:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:304:41: 304:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:304:62: 304:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:304:67: 304:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (parse::Cursor<'{erased}>, Ident),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:305:19: 305:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:305:20: 305:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:305:26: 305:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:308:5: 311:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:43: 309:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:34: 309:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:25: 309:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:15: 309:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:9: 309:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:54: 309:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:309:65: 309:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:314:9: 314:96 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:313:9: 313:14 (#0),
                    },
                ),
            ),
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:313:9: 313:14 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:314:37: 314:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:314:62: 314:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:314:67: 314:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (parse::Cursor<'{erased}>, Ident),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:315:8: 315:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:315:5: 315:22 (#0),
                },
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:315:9: 315:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:315:5: 315:22 (#0),
                },
            ),
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:315:15: 315:20 (#0),
            scope: scope[0],
        },
    },
]