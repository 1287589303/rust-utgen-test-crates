[
    BasicBlockData {
        statements: [
            StorageLive(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:28:21: 28:47 (#0),
                    scope: scope[0],
                },
                kind: _1 = proc_macro::is_available() -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = const {alloc1: &std::sync::atomic::AtomicUsize},
            _3 = &(*_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
            _6 = move _7 as usize (IntToInt),
            StorageDead(_7),
            _8 = AddWithOverflow(_6, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:29:17: 29:39 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_usize) -> [success: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_8.0: usize),
            StorageDead(_6),
            StorageLive(_9),
            _9 = std::sync::atomic::Ordering::Relaxed,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:29:5: 29:59 (#0),
                    scope: scope[1],
                },
                kind: _2 = std::sync::atomic::AtomicUsize::store(move _3, move _5, move _9) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_4),
            StorageDead(_2),
            _0 = const (),
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:30:2: 30:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/detection.rs:27:1: 30:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:27:16: 27:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/detection.rs:28:21: 28:47 (#0),
                            ),
                        ),
                        pat_span: src/detection.rs:28:9: 28:18 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:28:9: 28:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:5: 29:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:5: 29:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:167 ~ proc_macro2[acde]::detection::WORKS),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} std::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:5: 29:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:17: 29:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:17: 29:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:17: 29:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:17: 29:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/detection.rs:29:41: 29:58 (#0),
            scope: scope[0],
        },
    },
]