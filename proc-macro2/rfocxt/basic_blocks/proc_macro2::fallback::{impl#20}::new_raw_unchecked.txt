[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:824:18: 824:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = <std::boxed::Box<str> as std::convert::From<&str>>::from(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            _5 = _2,
            _0 = fallback::Ident { sym: move _3, span: move _5, raw: const true },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:827:9: 827:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:828:6: 828:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:822:5: 828:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:822:66: 822:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:822:45: 822:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:822:37: 822:43 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:822:37: 822:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:822:37: 822:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:822:57: 822:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:822:51: 822:55 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:822:51: 822:55 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:822:51: 822:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::boxed::Box<str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:824:18: 824:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:823:9: 827:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:824:28: 824:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:825:13: 825:17 (#0),
            scope: scope[0],
        },
    },
]