[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &_1,
            StorageLive(_4),
            StorageLive(_5),
            _5 = const "b\"",
            _4 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:434:24: 434:42 (#0),
                    scope: scope[1],
                },
                kind: _2 = parse::Cursor::<'_>::parse(move _3, move _4) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            PlaceMention(_2),
            _6 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:434:12: 434:21 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb2, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:434:12: 434:21 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_2 as Ok).0: parse::Cursor<'_>),
            StorageLive(_8),
            _8 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:435:9: 435:34 (#0),
                    scope: scope[1],
                },
                kind: _0 = parse::cooked_byte_string(move _8) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:434:5: 440:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_1,
            StorageLive(_11),
            StorageLive(_12),
            _12 = const "br",
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:436:31: 436:48 (#0),
                    scope: scope[2],
                },
                kind: _9 = parse::Cursor::<'_>::parse(move _10, move _11) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_9),
            _13 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:436:19: 436:28 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [0: bb7, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:436:19: 436:28 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_9 as Ok).0: parse::Cursor<'_>),
            StorageLive(_15),
            _15 = _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:437:9: 437:31 (#0),
                    scope: scope[2],
                },
                kind: _0 = parse::raw_byte_string(move _15) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:436:12: 440:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = parse::Reject,
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Err(move _16),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:436:12: 440:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:434:5: 440:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:441:2: 441:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:433:1: 441:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:433:34: 433:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:433:23: 433:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:433:16: 433:21 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:433:16: 433:21 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:433:16: 433:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:434:24: 434:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:434:24: 434:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:434:36: 434:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:434:36: 434:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:434:12: 434:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/parse.rs:434:24: 434:42 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:434:12: 434:21 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:434:15: 434:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:435:9: 435:34 (#0),
                },
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:435:28: 435:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:436:31: 436:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:436:31: 436:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:436:43: 436:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:434:5: 440:6 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:436:43: 436:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:436:19: 436:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/parse.rs:436:31: 436:48 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:436:19: 436:28 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:436:22: 436:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:437:9: 437:31 (#0),
                },
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:437:25: 437:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:439:13: 439:19 (#0),
            scope: scope[0],
        },
    },
]