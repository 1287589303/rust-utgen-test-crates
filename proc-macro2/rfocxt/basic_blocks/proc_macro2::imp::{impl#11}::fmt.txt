[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:251:9: 251:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:251:15: 251:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:13: 252:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_1) as Fallback).0: fallback::TokenStream),
            StorageLive(_12),
            _12 = &(*_11),
            StorageLive(_13),
            _13 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:253:43: 253:61 (#0),
                    scope: scope[2],
                },
                kind: _0 = <fallback::TokenStream as std::fmt::Debug>::fmt(move _12, move _13) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_1) as Compiler).0: imp::DeferredTokenStream),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:55: 252:66 (#0),
                    scope: scope[1],
                },
                kind: _8 = <imp::DeferredTokenStream as std::clone::Clone>::clone(move _9) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:55: 252:86 (#0),
                    scope: scope[1],
                },
                kind: _7 = imp::DeferredTokenStream::into_token_stream(move _8) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = &_7,
            _5 = &(*_6),
            StorageLive(_10),
            _10 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:43: 252:90 (#0),
                    scope: scope[1],
                },
                kind: _0 = <proc_macro::TokenStream as std::fmt::Debug>::fmt(move _5, move _10) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:89: 252:90 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:89: 252:90 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:253:60: 253:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:255:6: 255:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:89: 252:90 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:252:85: 252:86 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:250:5: 255:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:250:46: 250:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} imp::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:250:12: 250:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:250:22: 250:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:250:19: 250:20 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:250:19: 250:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:250:19: 250:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:13: 252:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:251:15: 251:19 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:252:13: 252:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} imp::DeferredTokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:35: 252:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} proc_macro::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:54: 252:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} proc_macro::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:54: 252:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: proc_macro::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:55: 252:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: imp::DeferredTokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:55: 252:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} imp::DeferredTokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:55: 252:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:252:88: 252:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:251:15: 251:19 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:253:13: 253:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:253:35: 253:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:253:54: 253:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:251:9: 254:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:253:59: 253:60 (#0),
            scope: scope[0],
        },
    },
]