[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: extra::DelimSpanEnum),
            PlaceMention(_2),
            _3 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:121:9: 121:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:121:15: 121:26 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:123:13: 123:49 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &(((*_2) as Fallback).0: fallback::Span),
            StorageLive(_8),
            _8 = (*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:124:46: 124:72 (#0),
                    scope: scope[2],
                },
                kind: _0 = Span::_new_fallback(move _8) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_2) as Compiler).0: proc_macro::Span),
            StorageLive(_5),
            StorageLive(_6),
            _6 = (*_4),
            _5 = imp::Span::Compiler(move _6),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:123:53: 123:91 (#0),
                    scope: scope[1],
                },
                kind: _0 = Span::_new(move _5) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:123:90: 123:91 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:124:71: 124:72 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:126:6: 126:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/extra.rs:120:5: 126:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:120:27: 120:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} extra::DelimSpan,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:120:17: 120:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/extra.rs:121:9: 125:10 (#0),
                },
            ),
        ),
        ty: &'{erased} extra::DelimSpanEnum,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:121:15: 121:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:123:13: 123:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/extra.rs:121:15: 121:26 (#0),
                            ),
                        ),
                        pat_span: src/extra.rs:123:13: 123:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:123:39: 123:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/extra.rs:121:9: 125:10 (#0),
                },
            ),
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:123:64: 123:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:123:84: 123:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/extra.rs:121:15: 121:26 (#0),
                            ),
                        ),
                        pat_span: src/extra.rs:124:13: 124:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:124:37: 124:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/extra.rs:121:9: 125:10 (#0),
                },
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/extra.rs:124:66: 124:71 (#0),
            scope: scope[0],
        },
    },
]