[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = _1,
            StorageLive(_4),
            _4 = move _2,
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:728:19: 728:36 (#0),
                    scope: scope[0],
                },
                kind: _5 = fallback::Span::call_site() -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = fallback::Group { delimiter: move _3, stream: move _4, span: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:729:9: 729:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:730:5: 730:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:730:6: 730:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:729:9: 729:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:730:5: 730:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:724:5: 730:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:724:69: 724:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:724:34: 724:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:724:23: 724:32 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:724:23: 724:32 (#0),
                    },
                ),
            ),
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:724:23: 724:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:724:53: 724:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:724:45: 724:51 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:724:45: 724:51 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:724:45: 724:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:726:13: 726:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:727:13: 727:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:728:19: 728:36 (#0),
            scope: scope[0],
        },
    },
]