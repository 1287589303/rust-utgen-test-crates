[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:415:30: 415:60 (#0),
                    scope: scope[0],
                },
                kind: _6 = parse::delimiter_of_raw_string(move _7) -> [return: bb1, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:415:30: 415:61 (#244),
                    scope: scope[0],
                },
                kind: _5 = <std::result::Result<(parse::Cursor<'_>, &str), parse::Reject> as std::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _8 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:415:30: 415:61 (#244),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:415:30: 415:61 (#244),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:415:60: 415:61 (#245),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_5 as Continue).0: (parse::Cursor<'_>, &str)),
            _4 = _12,
            StorageDead(_12),
            PlaceMention(_4),
            StorageLive(_2),
            _2 = (_4.0: parse::Cursor<'_>),
            StorageLive(_3),
            _3 = (_4.1: &str),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:416:21: 416:34 (#0),
                    scope: scope[1],
                },
                kind: _14 = parse::Cursor::<'_>::bytes(move _15) -> [return: bb8, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:415:30: 415:61 (#244),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _11) -> [return: bb7, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:416:21: 416:46 (#0),
                    scope: scope[1],
                },
                kind: _13 = <std::str::Bytes<'_> as std::iter::Iterator>::enumerate(move _14) -> [return: bb9, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:417:5: 429:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:417:5: 429:6 (#0),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:417:33: 417:45 (#0),
                    scope: scope[7],
                },
                kind: _18 = <std::iter::Enumerate<std::str::Bytes<'_>> as std::iter::Iterator>::next(move _19) -> [return: bb12, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            _20 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:417:15: 417:30 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _20) -> [1: bb13, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:417:15: 417:30 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = (((_18 as Some).0: (usize, u8)).0: usize),
            StorageLive(_22),
            _22 = (((_18 as Some).0: (usize, u8)).1: u8),
            PlaceMention(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:418:9: 418:19 (#0),
                    scope: scope[7],
                },
                kind: switchInt(_22) -> [34: bb16, 13: bb17, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:427:18: 427:20 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:419:13: 419:17 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:423:13: 423:18 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &fake shallow _22,
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*(_2.0: &str)),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _21,
            _31 = AddWithOverflow(_30, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:419:32: 419:37 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> [success: bb19, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = move (_31.0: usize),
            StorageDead(_30),
            _28 = std::ops::RangeFrom::<usize> { start: move _29 },
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:419:31: 419:40 (#0),
                    scope: scope[7],
                },
                kind: _26 = <str as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _27, move _28) -> [return: bb20, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &(*_26),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_32),
            _32 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:419:21: 419:63 (#0),
                    scope: scope[7],
                },
                kind: _24 = core::str::<impl str>::starts_with::<'_, &str>(move _25, move _32) -> [return: bb21, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:419:21: 419:63 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _24) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            FakeRead(ForMatchGuard, _23),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_2,
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _21,
            _39 = AddWithOverflow(_38, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:420:42: 420:47 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, const 1_usize) -> [success: bb24, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:419:21: 419:63 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = move (_39.0: usize),
            StorageDead(_38),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:420:50: 420:65 (#0),
                    scope: scope[7],
                },
                kind: _40 = core::str::<impl str>::len(move _41) -> [return: bb25, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            _42 = AddWithOverflow(_37, _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:420:42: 420:65 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _37, move _40) -> [success: bb26, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = move (_42.0: usize),
            StorageDead(_40),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:420:28: 420:66 (#0),
                    scope: scope[7],
                },
                kind: _34 = parse::Cursor::<'_>::advance(move _35, move _36) -> [return: bb27, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            FakeRead(ForLet(None), _34),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:421:27: 421:47 (#0),
                    scope: scope[8],
                },
                kind: _43 = parse::literal_suffix(move _44) -> [return: bb28, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Ok(move _43),
            StorageDead(_43),
            StorageDead(_34),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            StorageLive(_46),
            _46 = &mut _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:423:28: 423:40 (#0),
                    scope: scope[7],
                },
                kind: _45 = <std::iter::Enumerate<std::str::Bytes<'_>> as std::iter::Iterator>::next(move _46) -> [return: bb30, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            PlaceMention(_45),
            _47 = discriminant(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:423:22: 423:40 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _47) -> [1: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
            StorageDead(_45),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:423:22: 423:40 (#0),
                    scope: scope[7],
                },
                kind: switchInt((((_45 as Some).0: (usize, u8)).1: u8)) -> [10: bb33, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:424:17: 424:33 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = const (),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:426:13: 426:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:417:5: 429:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _16 = const (),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageLive(_52),
            _52 = parse::Reject,
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Err(move _52),
            StorageDead(_52),
            StorageDead(_13),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:431:2: 431:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:431:2: 431:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:414:1: 431:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:414:33: 414:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:414:22: 414:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:414:15: 414:20 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:414:15: 414:20 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:414:15: 414:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/parse.rs:415:30: 415:61 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:415:9: 415:27 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:10: 415:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/parse.rs:415:30: 415:61 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:415:9: 415:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:17: 415:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (parse::Cursor<'{erased}>, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:30: 415:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, parse::Reject>, (parse::Cursor<'{erased}>, &'{erased} str)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:30: 415:61 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(parse::Cursor<'{erased}>, &'{erased} str), parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:30: 415:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:54: 415:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:60: 415:61 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/parse.rs:415:30: 415:61 (#244),
                            ),
                        ),
                        pat_span: src/parse.rs:415:60: 415:61 (#245),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:60: 415:61 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:60: 415:61 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:60: 415:61 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/parse.rs:415:30: 415:61 (#244),
                            ),
                        ),
                        pat_span: src/parse.rs:415:30: 415:61 (#244),
                    },
                ),
            ),
        ),
        ty: (parse::Cursor<'{erased}>, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:415:30: 415:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:416:21: 416:46 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:416:9: 416:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<std::str::Bytes<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:416:9: 416:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::str::Bytes<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:416:21: 416:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:416:21: 416:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:5: 429:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:414:1: 431:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:417:5: 429:6 (#246),
                },
            ),
        ),
        ty: std::option::Option<(usize, u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:33: 417:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:417:5: 429:6 (#246),
                },
            ),
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::str::Bytes<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:33: 417:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:15: 417:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/parse.rs:417:33: 417:45 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:417:15: 417:30 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:21: 417:22 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/parse.rs:417:33: 417:45 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:417:15: 417:30 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:24: 417:28 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:418:15: 418:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:21: 419:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:21: 419:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:31: 419:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:21: 419:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:32: 419:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:32: 419:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:32: 419:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:32: 419:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:53: 419:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:419:67: 422:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:420:28: 420:66 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:420:21: 420:25 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:21: 420:25 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:28: 420:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:42: 420:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:42: 420:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:42: 420:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:42: 420:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:50: 420:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:50: 420:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:420:42: 420:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:421:27: 421:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:421:42: 421:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<(usize, u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:423:28: 423:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::str::Bytes<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:423:28: 423:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:424:17: 424:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:418:9: 428:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:425:22: 425:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/parse.rs:417:5: 429:6 (#246),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:5: 429:6 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:5: 429:6 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:417:5: 429:6 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:430:9: 430:15 (#0),
            scope: scope[0],
        },
    },
]