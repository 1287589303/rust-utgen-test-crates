[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut (*(_1.0: &mut std::vec::Vec<T>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:110:19: 110:40 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::mem::take::<std::vec::Vec<T>>(move _3) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            _4 = move _2,
            _0 = rcvec::RcVecBuilder::<T> { inner: move _4 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:111:35: 111:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:112:5: 112:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:112:6: 112:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:112:5: 112:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:109:5: 112:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecBuilder<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:109:33: 109:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: rcvec::RcVecMut<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:109:24: 109:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rcvec.rs:110:19: 110:40 (#0),
                            ),
                        ),
                        pat_span: src/rcvec.rs:110:13: 110:16 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<T/#1, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:110:13: 110:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<T/#1, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:110:29: 110:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<T/#1, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:111:31: 111:34 (#0),
            scope: scope[0],
        },
    },
]