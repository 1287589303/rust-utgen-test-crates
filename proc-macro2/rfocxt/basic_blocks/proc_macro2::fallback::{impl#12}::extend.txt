[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: rcvec::RcVec<TokenTree>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:290:23: 290:44 (#0),
                    scope: scope[0],
                },
                kind: _3 = rcvec::RcVec::<TokenTree>::make_mut(move _4) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:291:9: 292:25 (#0),
                    scope: scope[1],
                },
                kind: _6 = <I as std::iter::IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _3,
            _8 = {closure@src/fallback.rs:293:23: 293:30} { vec: move _9 },
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:291:9: 293:79 (#0),
                    scope: scope[1],
                },
                kind: _5 = <<I as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::for_each::<{closure@src/fallback.rs:293:23: 293:30}>(move _6, move _8) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            _0 = const (),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:294:5: 294:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:294:6: 294:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:293:78: 293:79 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:292:24: 292:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:294:5: 294:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:289:5: 294:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:289:71: 289:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:289:50: 289:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:289:69: 289:70 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:289:61: 289:67 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:289:61: 289:67 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:289:61: 289:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:290:23: 290:44 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:290:13: 290:20 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:290:13: 290:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rcvec::RcVec<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:290:23: 290:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:291:9: 293:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:291:9: 292:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:291:9: 291:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:244 ~ proc_macro2[acde]::fallback::{impl#12}::extend::{closure#0}),
            [
                I/#0,
                i16,
                Binder { value: extern "RustCall" fn((TokenTree,)), bound_vars: [] },
                (&'{erased} mut rcvec::RcVecMut<'{erased}, TokenTree>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:293:23: 293:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:293:23: 293:78 (#0),
            scope: scope[0],
        },
    },
]