[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:128:25: 128:35 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::vec::Vec::<rcvec::RcVecIntoIter<TokenTree>>::new() -> [return: bb1, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: rcvec::RcVec<TokenTree>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:129:33: 129:53 (#0),
                    scope: scope[1],
                },
                kind: _4 = rcvec::RcVec::<TokenTree>::get_mut(move _5) -> [return: bb2, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _6 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:129:27: 129:53 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:129:33: 129:53 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:130:13: 130:24 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move ((_4 as Some).0: rcvec::RcVecMut<'_, TokenTree>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:130:28: 130:40 (#0),
                    scope: scope[3],
                },
                kind: _8 = rcvec::RcVecMut::<'_, TokenTree>::take(move _9) -> [return: bb7, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:130:28: 130:52 (#0),
                    scope: scope[3],
                },
                kind: _3 = <rcvec::RcVecBuilder<TokenTree> as std::iter::IntoIterator>::into_iter(move _8) -> [return: bb8, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:133:9: 154:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:133:9: 154:10 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb10, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:134:13: 149:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:134:13: 149:14 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb12, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:134:37: 134:51 (#0),
                    scope: scope[4],
                },
                kind: _14 = <rcvec::RcVecIntoIter<TokenTree> as std::iter::Iterator>::next(move _15) -> [return: bb13, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _16 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:134:23: 134:34 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _16) -> [1: bb14, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:134:23: 134:34 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_14 as Some).0: TokenTree),
            StorageLive(_18),
            PlaceMention(_17),
            _19 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:135:29: 135:40 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _19) -> [0: bb16, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:136:21: 136:44 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_17 as Group).0: Group),
            _18 = move (_20.0: imp::Group),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:136:58: 136:59 (#0),
                    scope: scope[4],
                },
                kind: drop(_20) -> [return: bb18, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            FakeRead(ForLet(None), _18),
            StorageLive(_22),
            PlaceMention(_18),
            _23 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:140:29: 140:40 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _23) -> [0: bb41, 1: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:140:35: 140:40 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:141:21: 141:55 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = move ((_18 as Fallback).0: fallback::Group),
            _22 = move _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:141:63: 141:64 (#0),
                    scope: scope[5],
                },
                kind: drop(_24) -> [return: bb22, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _22),
            StorageLive(_26),
            _26 = move _22,
            FakeRead(ForLet(None), _26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut ((_26.1: fallback::TokenStream).0: rcvec::RcVec<TokenTree>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:145:38: 145:66 (#0),
                    scope: scope[10],
                },
                kind: _27 = rcvec::RcVec::<TokenTree>::get_mut(move _28) -> [return: bb23, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _29 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:145:24: 145:35 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _29) -> [1: bb24, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:145:24: 145:35 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = move ((_27 as Some).0: rcvec::RcVecMut<'_, TokenTree>),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut _2,
            StorageLive(_33),
            _33 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:146:21: 146:40 (#0),
                    scope: scope[10],
                },
                kind: _31 = std::vec::Vec::<rcvec::RcVecIntoIter<TokenTree>>::push(move _32, move _33) -> [return: bb26, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:147:31: 147:43 (#0),
                    scope: scope[10],
                },
                kind: _35 = rcvec::RcVecMut::<'_, TokenTree>::take(move _36) -> [return: bb27, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:147:31: 147:55 (#0),
                    scope: scope[10],
                },
                kind: _34 = <rcvec::RcVecBuilder<TokenTree> as std::iter::IntoIterator>::into_iter(move _35) -> [return: bb28, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:147:21: 147:28 (#0),
                    scope: scope[10],
                },
                kind: drop(_3) -> [return: bb29, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:147:54: 147:55 (#0),
                    scope: scope[10],
                },
                kind: drop(_34) -> [return: bb31, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:147:54: 147:55 (#0),
                    scope: scope[10],
                },
                kind: drop(_34) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _12 = const (),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:145:17: 148:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:145:17: 148:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[7],
                },
                kind: drop(_26) -> [return: bb34, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_22) -> [return: bb35, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb36, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb38, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _13 = const (),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#353),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb40, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#353),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb39, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:134:13: 149:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:150:19: 150:30 (#0),
                    scope: scope[2],
                },
                kind: _40 = std::vec::Vec::<rcvec::RcVecIntoIter<TokenTree>>::pop(move _41) -> [return: bb45, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb42, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb43, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#353),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb44, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            PlaceMention(_40),
            _42 = discriminant(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:150:13: 150:30 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _42) -> [0: bb48, 1: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:150:19: 150:30 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:151:17: 151:27 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:154:9: 154:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_40) -> [return: bb55, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = move ((_40 as Some).0: rcvec::RcVecIntoIter<TokenTree>),
            StorageLive(_44),
            _44 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:151:31: 151:38 (#0),
                    scope: scope[11],
                },
                kind: drop(_3) -> [return: bb50, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _44,
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:151:44: 151:45 (#0),
                    scope: scope[11],
                },
                kind: drop(_44) -> [return: bb52, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:151:44: 151:45 (#0),
                    scope: scope[11],
                },
                kind: drop(_44) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:151:44: 151:45 (#0),
                    scope: scope[2],
                },
                kind: drop(_43) -> [return: bb53, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:154:9: 154:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_40) -> [return: bb54, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:133:9: 154:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:155:5: 155:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb56, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:155:5: 155:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb57, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:155:6: 155:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:151:44: 151:45 (#0),
                    scope: scope[2],
                },
                kind: drop(_43) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:154:9: 154:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_40) -> [return: bb67, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:147:54: 147:55 (#0),
                    scope: scope[10],
                },
                kind: drop(_35) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:146:39: 146:40 (#0),
                    scope: scope[10],
                },
                kind: drop(_33) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[7],
                },
                kind: drop(_26) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_22) -> [return: bb64, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb66, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:149:13: 149:14 (#353),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb67, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:155:5: 155:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:130:51: 130:52 (#0),
                    scope: scope[3],
                },
                kind: drop(_8) -> [return: bb69, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:155:5: 155:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:127:5: 155:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:127:23: 127:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:127:13: 127:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:128:25: 128:35 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:128:13: 128:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<rcvec::RcVecIntoIter<TokenTree>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:128:13: 128:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:129:27: 132:10 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:129:13: 129:24 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:129:13: 129:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<rcvec::RcVecMut<'{erased}, TokenTree>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:129:33: 129:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rcvec::RcVec<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:129:33: 129:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:130:13: 130:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/fallback.rs:129:33: 129:53 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:130:13: 130:24 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:130:18: 130:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecBuilder<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:130:28: 130:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:130:28: 130:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:131:21: 131:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:133:9: 154:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:133:9: 154:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:127:5: 155:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:13: 149:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:134:13: 149:14 (#353),
                },
            ),
        ),
        ty: std::option::Option<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:37: 134:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:134:13: 149:14 (#353),
                },
            ),
        ),
        ty: &'{erased} mut rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:37: 134:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:23: 134:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/fallback.rs:134:37: 134:51 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:134:23: 134:34 (#0),
                    },
                ),
            ),
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:28: 134:33 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:135:29: 138:18 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:135:21: 135:26 (#0),
                    },
                ),
            ),
        ),
        ty: imp::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:135:21: 135:26 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:136:21: 136:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/fallback.rs:135:35: 135:40 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:136:21: 136:44 (#0),
                    },
                ),
            ),
        ),
        ty: Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:136:38: 136:43 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:137:26: 137:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:140:29: 143:18 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:140:21: 140:26 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:140:21: 140:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:141:21: 141:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/fallback.rs:140:35: 140:40 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:141:21: 141:55 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:141:49: 141:54 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:142:55: 142:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:144:33: 144:38 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:144:21: 144:30 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:144:21: 144:30 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:145:17: 148:18 (#0),
                },
            ),
        ),
        ty: std::option::Option<rcvec::RcVecMut<'{erased}, TokenTree>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:145:38: 145:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:145:17: 148:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut rcvec::RcVec<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:145:38: 145:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:145:24: 145:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                src/fallback.rs:145:38: 145:66 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:145:24: 145:35 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:145:29: 145:34 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:146:21: 146:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<rcvec::RcVecIntoIter<TokenTree>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:146:21: 146:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:146:32: 146:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:147:31: 147:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecBuilder<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:147:31: 147:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:147:31: 147:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:134:13: 149:14 (#353),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:13: 149:14 (#353),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:13: 149:14 (#353),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:134:13: 149:14 (#353),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:150:13: 153:14 (#0),
                },
            ),
        ),
        ty: std::option::Option<rcvec::RcVecIntoIter<TokenTree>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:150:19: 150:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:150:13: 153:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<rcvec::RcVecIntoIter<TokenTree>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:150:19: 150:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:151:17: 151:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                src/fallback.rs:150:19: 150:30 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:151:17: 151:27 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:151:22: 151:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:150:13: 153:14 (#0),
                },
            ),
        ),
        ty: rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:151:41: 151:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/fallback.rs:150:13: 153:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:152:25: 152:31 (#0),
            scope: scope[0],
        },
    },
]