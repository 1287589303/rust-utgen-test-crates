[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: std::vec::IntoIter<T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:142:9: 142:31 (#0),
                    scope: scope[0],
                },
                kind: _0 = <std::vec::IntoIter<T> as std::iter::Iterator>::size_hint(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:143:6: 143:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rcvec.rs:141:5: 143:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, std::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:141:28: 141:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} rcvec::RcVecIntoIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:141:18: 141:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rcvec.rs:142:9: 142:31 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::IntoIter<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rcvec.rs:142:9: 142:19 (#0),
            scope: scope[0],
        },
    },
]