[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention(_1),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:329:21: 329:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:329:27: 329:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:13: 330:42 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &mut (((*_1) as Fallback).0: rcvec::RcVecIntoIter<TokenTree>),
            StorageLive(_15),
            _15 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:331:53: 331:64 (#0),
                    scope: scope[7],
                },
                kind: _0 = <rcvec::RcVecIntoIter<TokenTree> as std::iter::Iterator>::next(move _15) -> [return: bb14, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut (((*_1) as Compiler).0: proc_macro::token_stream::IntoIter),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:46: 330:57 (#0),
                    scope: scope[2],
                },
                kind: _6 = <proc_macro::token_stream::IntoIter as std::iter::Iterator>::next(move _7) -> [return: bb5, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:46: 330:58 (#420),
                    scope: scope[2],
                },
                kind: _5 = <std::option::Option<proc_macro::TokenTree> as std::ops::Try>::branch(move _6) -> [return: bb6, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _8 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:46: 330:58 (#420),
                    scope: scope[2],
                },
                kind: switchInt(move _8) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:46: 330:58 (#420),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:57: 330:58 (#421),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_5 as Continue).0: proc_macro::TokenTree),
            _2 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:57: 330:58 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb12, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = ((_5 as Break).0: std::option::Option<std::convert::Infallible>),
            StorageLive(_11),
            _11 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:46: 330:58 (#420),
                    scope: scope[4],
                },
                kind: _0 = <std::option::Option<TokenTree> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual(move _11) -> [return: bb11, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:57: 330:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb45, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:57: 330:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb13, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _2),
            StorageLive(_16),
            PlaceMention(_2),
            _17 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:333:14: 333:25 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb16, 1: bb18, 2: bb17, 3: bb19, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:333:20: 333:25 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:334:13: 334:45 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:337:13: 337:45 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:346:13: 346:44 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = move ((_2 as Literal).0: proc_macro::Literal),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = move _42,
            _44 = imp::Literal::Compiler(move _45),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:350:36: 350:78 (#0),
                    scope: scope[13],
                },
                kind: _43 = Literal::_new(move _44) -> [return: bb40, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = move ((_2 as Group).0: proc_macro::Group),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = move _18,
            _20 = imp::Group::Compiler(move _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:335:71: 335:72 (#0),
                    scope: scope[8],
                },
                kind: drop(_21) -> [return: bb21, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:335:34: 335:73 (#0),
                    scope: scope[8],
                },
                kind: _19 = Group::_new(move _20) -> [return: bb22, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _16 = TokenTree::Group(move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:335:73: 335:74 (#0),
                    scope: scope[8],
                },
                kind: drop(_19) -> [return: bb23, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:336:13: 336:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb24, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:336:13: 336:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_2 as Punct).0: proc_macro::Punct),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &_22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:338:37: 338:49 (#0),
                    scope: scope[9],
                },
                kind: _24 = proc_macro::Punct::spacing(move _25) -> [return: bb26, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _26 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:338:31: 338:49 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _26) -> [0: bb28, 1: bb29, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:338:37: 338:49 (#0),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:339:21: 339:47 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = Spacing::Alone,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:340:51: 340:65 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = Spacing::Joint,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:339:51: 339:65 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _23),
            StorageDead(_24),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:342:40: 342:52 (#0),
                    scope: scope[10],
                },
                kind: _28 = proc_macro::Punct::as_char(move _29) -> [return: bb32, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageLive(_30),
            _30 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:342:29: 342:62 (#0),
                    scope: scope[10],
                },
                kind: _27 = Punct::new(move _28, move _30) -> [return: bb33, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut _27,
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &_22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:343:61: 343:70 (#0),
                    scope: scope[11],
                },
                kind: _35 = proc_macro::Punct::span(move _36) -> [return: bb34, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            _34 = imp::Span::Compiler(move _35),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:343:28: 343:72 (#0),
                    scope: scope[11],
                },
                kind: _33 = Span::_new(move _34) -> [return: bb35, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:343:17: 343:73 (#0),
                    scope: scope[11],
                },
                kind: _31 = Punct::set_span(move _32, move _33) -> [return: bb36, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_37),
            _37 = move _27,
            _16 = TokenTree::Punct(move _37),
            StorageDead(_37),
            StorageDead(_27),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:345:13: 345:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = move ((_2 as Ident).0: proc_macro::Ident),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = move _38,
            _40 = imp::Ident::Compiler(move _41),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:347:34: 347:72 (#0),
                    scope: scope[12],
                },
                kind: _39 = Ident::_new(move _40) -> [return: bb38, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            _16 = TokenTree::Ident(move _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:347:72: 347:73 (#0),
                    scope: scope[12],
                },
                kind: drop(_39) -> [return: bb39, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:348:13: 348:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _16 = TokenTree::Literal(move _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:350:78: 350:79 (#0),
                    scope: scope[13],
                },
                kind: drop(_43) -> [return: bb41, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:351:13: 351:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = std::option::Option::<TokenTree>::Some(move _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:352:10: 352:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb43, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:353:5: 353:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb44, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:353:6: 353:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:353:6: 353:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:353:6: 353:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:350:77: 350:78 (#0),
                    scope: scope[13],
                },
                kind: drop(_44) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:347:71: 347:72 (#0),
                    scope: scope[12],
                },
                kind: drop(_40) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:335:72: 335:73 (#0),
                    scope: scope[8],
                },
                kind: drop(_20) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:336:13: 336:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:353:5: 353:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:57: 330:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:330:57: 330:58 (#420),
                    scope: scope[2],
                },
                kind: drop(_6) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:328:5: 353:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:328:27: 328:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut imp::TokenTreeIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:328:13: 328:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:329:21: 332:10 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:329:13: 329:18 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:329:13: 329:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:13: 330:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:329:27: 329:31 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:330:13: 330:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut proc_macro::token_stream::IntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:37: 330:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, proc_macro::TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:46: 330:58 (#420),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<proc_macro::TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:46: 330:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut proc_macro::token_stream::IntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:46: 330:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:57: 330:58 (#421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/wrapper.rs:330:46: 330:58 (#420),
                            ),
                        ),
                        pat_span: src/wrapper.rs:330:57: 330:58 (#421),
                    },
                ),
            ),
        ),
        ty: std::option::Option<std::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:57: 330:58 (#421),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:57: 330:58 (#421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<std::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:57: 330:58 (#421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/wrapper.rs:330:46: 330:58 (#420),
                            ),
                        ),
                        pat_span: src/wrapper.rs:330:46: 330:58 (#420),
                    },
                ),
            ),
        ),
        ty: proc_macro::TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:330:46: 330:58 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:329:27: 329:31 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:331:13: 331:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:331:37: 331:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:331:46: 331:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rcvec::RcVecIntoIter<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:331:53: 331:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:333:14: 352:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:334:13: 334:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/wrapper.rs:333:20: 333:25 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:334:13: 334:45 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:334:42: 334:44 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:335:34: 335:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:335:17: 335:74 (#0),
                },
            ),
        ),
        ty: imp::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:335:53: 335:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:335:69: 335:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/wrapper.rs:333:20: 333:25 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:337:13: 337:45 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:337:42: 337:44 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:338:31: 341:18 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:338:21: 338:28 (#0),
                    },
                ),
            ),
        ),
        ty: Spacing,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:338:21: 338:28 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: proc_macro::Spacing,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:338:37: 338:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro::Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:338:37: 338:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:339:21: 339:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:342:29: 342:62 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:342:21: 342:26 (#0),
                    },
                ),
            ),
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:342:21: 342:26 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:342:40: 342:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro::Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:342:40: 342:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Spacing,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:342:54: 342:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:343:17: 343:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:343:17: 343:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:343:28: 343:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:343:46: 343:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:343:61: 343:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} proc_macro::Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:343:61: 343:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Punct,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:344:34: 344:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/wrapper.rs:333:20: 333:25 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:346:13: 346:44 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:346:42: 346:43 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:347:34: 347:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:347:17: 347:73 (#0),
                },
            ),
        ),
        ty: imp::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:347:53: 347:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:347:69: 347:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/wrapper.rs:333:20: 333:25 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:349:13: 349:46 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:349:44: 349:45 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:350:36: 350:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:350:17: 350:79 (#0),
                },
            ),
        ),
        ty: imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:350:57: 350:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:350:75: 350:76 (#0),
            scope: scope[0],
        },
    },
]