[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:808:12: 808:31 (#0),
                    scope: scope[0],
                },
                kind: _2 = detection::inside_proc_macro() -> [return: bb1, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:808:12: 808:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb11, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:809:27: 809:70 (#0),
                    scope: scope[0],
                },
                kind: _5 = <proc_macro::Literal as fallback::FromStr2>::from_str_checked(move _6) -> [return: bb3, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:809:27: 809:71 (#429),
                    scope: scope[0],
                },
                kind: _4 = <std::result::Result<proc_macro::Literal, imp::LexError> as std::ops::Try>::branch(move _5) -> [return: bb4, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _7 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:809:27: 809:71 (#429),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb7, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:809:27: 809:71 (#429),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:809:70: 809:71 (#430),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_4 as Continue).0: proc_macro::Literal),
            _3 = move _11,
            StorageDead(_11),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _3,
            _12 = imp::Literal::Compiler(move _13),
            StorageDead(_13),
            _0 = std::result::Result::<imp::Literal, imp::LexError>::Ok(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:810:42: 810:43 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb10, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, imp::LexError>),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:809:27: 809:71 (#429),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<imp::Literal, imp::LexError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, imp::LexError>>>::from_residual(move _10) -> [return: bb9, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:808:9: 814:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:27: 812:68 (#0),
                    scope: scope[0],
                },
                kind: _16 = fallback::Literal::from_str_checked(move _17) -> [return: bb12, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:27: 812:69 (#431),
                    scope: scope[0],
                },
                kind: _15 = <std::result::Result<fallback::Literal, fallback::LexError> as std::ops::Try>::branch(move _16) -> [return: bb13, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _18 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:27: 812:69 (#431),
                    scope: scope[0],
                },
                kind: switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:27: 812:69 (#431),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:68: 812:69 (#432),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_15 as Continue).0: fallback::Literal),
            _14 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:68: 812:69 (#0),
                    scope: scope[0],
                },
                kind: drop(_22) -> [return: bb19, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, fallback::LexError>),
            StorageLive(_21),
            _21 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:27: 812:69 (#431),
                    scope: scope[8],
                },
                kind: _0 = <std::result::Result<imp::Literal, imp::LexError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, fallback::LexError>>>::from_residual(move _21) -> [return: bb18, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:69: 812:70 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb25, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:69: 812:70 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb20, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_23),
            StorageLive(_24),
            _24 = move _14,
            _23 = imp::Literal::Fallback(move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:813:41: 813:42 (#0),
                    scope: scope[6],
                },
                kind: drop(_24) -> [return: bb21, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _0 = std::result::Result::<imp::Literal, imp::LexError>::Ok(move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:813:42: 813:43 (#0),
                    scope: scope[6],
                },
                kind: drop(_23) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:814:9: 814:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:808:9: 814:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:815:6: 815:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:815:6: 815:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:815:6: 815:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:813:42: 813:43 (#0),
                    scope: scope[6],
                },
                kind: drop(_23) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:814:9: 814:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:69: 812:70 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:812:68: 812:69 (#431),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:807:5: 815:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<imp::Literal, imp::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:807:51: 807:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:807:42: 807:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:807:36: 807:40 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:807:36: 807:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:807:36: 807:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:808:9: 814:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:808:12: 808:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:809:27: 809:71 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:809:17: 809:24 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:17: 809:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, imp::LexError>, proc_macro::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:27: 809:71 (#429),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<proc_macro::Literal, imp::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:27: 809:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:65: 809:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:70: 809:71 (#430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/wrapper.rs:809:27: 809:71 (#429),
                            ),
                        ),
                        pat_span: src/wrapper.rs:809:70: 809:71 (#430),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, imp::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:70: 809:71 (#430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:70: 809:71 (#430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, imp::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:70: 809:71 (#430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/wrapper.rs:809:27: 809:71 (#429),
                            ),
                        ),
                        pat_span: src/wrapper.rs:809:27: 809:71 (#429),
                    },
                ),
            ),
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:809:27: 809:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:810:16: 810:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:810:34: 810:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:812:27: 812:69 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:812:17: 812:24 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:17: 812:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, fallback::LexError>, fallback::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:27: 812:69 (#431),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<fallback::Literal, fallback::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:27: 812:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:63: 812:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:68: 812:69 (#432),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/wrapper.rs:812:27: 812:69 (#431),
                            ),
                        ),
                        pat_span: src/wrapper.rs:812:68: 812:69 (#432),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, fallback::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:68: 812:69 (#432),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:68: 812:69 (#432),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, fallback::LexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:68: 812:69 (#432),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/wrapper.rs:812:27: 812:69 (#431),
                            ),
                        ),
                        pat_span: src/wrapper.rs:812:27: 812:69 (#431),
                    },
                ),
            ),
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:812:27: 812:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: imp::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:813:16: 813:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:813:34: 813:41 (#0),
            scope: scope[0],
        },
    },
]