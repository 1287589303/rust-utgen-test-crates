[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const "Ident",
            _5 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:922:25: 922:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::fmt::Formatter::<'_>::debug_tuple(move _4, move _5) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = [const ""],
            _14 = &_15,
            _13 = &(*_14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &_1,
            _20 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:923:36: 923:38 (#61),
                    scope: scope[1],
                },
                kind: _19 = core::fmt::rt::Argument::<'_>::new_display::<&fallback::Ident>(move _20) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _18 = [move _19],
            StorageDead(_19),
            _17 = &_18,
            _16 = &(*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:923:22: 923:46 (#61),
                    scope: scope[1],
                },
                kind: _12 = std::fmt::Arguments::<'_>::new_v1::<1, 1>(move _13, move _16) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_13),
            _11 = &_12,
            _10 = &(*_11),
            _9 = move _10 as &dyn std::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:923:9: 923:47 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::fmt::DebugTuple::<'_, '_>::field(move _8, move _9) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_7),
            StorageLive(_22),
            _22 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:924:9: 924:23 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::fmt::DebugTuple::<'_, '_>::finish(move _22) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:925:6: 925:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:921:5: 925:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:921:46: 921:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:921:12: 921:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:921:22: 921:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:921:19: 921:20 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:921:19: 921:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:921:19: 921:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:922:25: 922:47 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:922:13: 922:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:922:13: 922:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:922:25: 922:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:922:39: 922:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:922:39: 922:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:9: 923:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:9: 923:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(std::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:21: 923:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:21: 923:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:21: 923:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:22: 923:46 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:35: 923:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:35: 923:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:35: 923:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:22: 923:46 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:22: 923:46 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:22: 923:46 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:36: 923:38 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:41: 923:45 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:923:41: 923:45 (#61),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:924:9: 924:23 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:924:9: 924:14 (#0),
            scope: scope[0],
        },
    },
]