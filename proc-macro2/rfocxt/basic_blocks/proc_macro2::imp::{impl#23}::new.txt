[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            _3 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:584:9: 584:21 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:584:15: 584:21 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:585:13: 585:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_2 as Fallback).0: fallback::TokenStream),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _1,
            StorageLive(_14),
            _14 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:595:33: 595:72 (#0),
                    scope: scope[3],
                },
                kind: _12 = fallback::Group::new(move _13, move _14) -> [return: bb18, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move ((_2 as Compiler).0: imp::DeferredTokenStream),
            StorageLive(_5),
            PlaceMention(_1),
            _6 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:586:33: 586:48 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb6, 1: bb8, 2: bb7, 3: bb9, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:586:39: 586:48 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:587:21: 587:43 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:588:21: 588:39 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:589:21: 589:37 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = proc_macro::Delimiter::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:590:40: 590:67 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = proc_macro::Delimiter::Parenthesis,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:587:47: 587:81 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = proc_macro::Delimiter::Bracket,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:588:43: 588:73 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = proc_macro::Delimiter::Brace,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:589:41: 589:69 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _5,
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:592:67: 592:90 (#0),
                    scope: scope[2],
                },
                kind: _9 = imp::DeferredTokenStream::into_token_stream(move _10) -> [return: bb14, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:592:33: 592:91 (#0),
                    scope: scope[2],
                },
                kind: _7 = proc_macro::Group::new(move _8, move _9) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _0 = imp::Group::Compiler(move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:592:91: 592:92 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb16, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:593:13: 593:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb17, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:593:13: 593:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            _0 = imp::Group::Fallback(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:595:72: 595:73 (#0),
                    scope: scope[3],
                },
                kind: drop(_12) -> [return: bb19, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:596:13: 596:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:596:13: 596:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:598:5: 598:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:598:6: 598:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:595:71: 595:72 (#0),
                    scope: scope[3],
                },
                kind: drop(_14) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:596:13: 596:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:592:90: 592:91 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:592:89: 592:90 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:593:13: 593:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:598:5: 598:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:583:5: 598:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: imp::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:583:69: 583:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:583:34: 583:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:583:23: 583:32 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:583:23: 583:32 (#0),
                    },
                ),
            ),
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:583:23: 583:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:583:53: 583:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:583:45: 583:51 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:583:45: 583:51 (#0),
                    },
                ),
            ),
        ),
        ty: imp::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:583:45: 583:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:585:13: 585:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/wrapper.rs:584:15: 584:21 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:585:13: 585:39 (#0),
                    },
                ),
            ),
        ),
        ty: imp::DeferredTokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:585:35: 585:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:586:33: 591:18 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:586:21: 586:30 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:586:21: 586:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:587:21: 587:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:592:33: 592:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:592:17: 592:92 (#0),
                },
            ),
        ),
        ty: proc_macro::Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:592:56: 592:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:592:17: 592:92 (#0),
                },
            ),
        ),
        ty: proc_macro::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:592:67: 592:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:592:17: 592:92 (#0),
                },
            ),
        ),
        ty: imp::DeferredTokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:592:67: 592:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/wrapper.rs:584:15: 584:21 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:594:13: 594:42 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:594:35: 594:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:595:33: 595:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:595:17: 595:73 (#0),
                },
            ),
        ),
        ty: Delimiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:595:54: 595:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:595:17: 595:73 (#0),
                },
            ),
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:595:65: 595:71 (#0),
            scope: scope[0],
        },
    },
]