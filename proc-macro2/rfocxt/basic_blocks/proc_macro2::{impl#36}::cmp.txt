[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1061:9: 1061:25 (#0),
                    scope: scope[0],
                },
                kind: _4 = <Ident as std::string::ToString>::to_string(move _5) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &_4,
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1061:31: 1061:48 (#0),
                    scope: scope[0],
                },
                kind: _8 = <Ident as std::string::ToString>::to_string(move _9) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = &_8,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                    scope: scope[0],
                },
                kind: _0 = <std::string::String as std::cmp::Ord>::cmp(move _3, move _6) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1062:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1062:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1062:6: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1062:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1062:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1060:5: 1062:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::cmp::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1060:37: 1060:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1060:12: 1060:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1060:26: 1060:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1060:19: 1060:24 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1060:19: 1060:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1060:19: 1060:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:9: 1061:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:9: 1061:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: &'{erased} Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:9: 1061:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:30: 1061:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:30: 1061:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:31: 1061:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1061:9: 1061:49 (#0),
                },
            ),
        ),
        ty: &'{erased} Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1061:31: 1061:36 (#0),
            scope: scope[0],
        },
    },
]