[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:260:26: 260:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = rcvec::RcVecBuilder::<TokenTree>::new() -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:261:36: 261:51 (#0),
                    scope: scope[1],
                },
                kind: _4 = rcvec::RcVecBuilder::<TokenTree>::as_mut(move _5) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:261:9: 261:58 (#0),
                    scope: scope[1],
                },
                kind: _3 = fallback::push_token_from_proc_macro(move _4, move _6) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:263:20: 263:34 (#0),
                    scope: scope[1],
                },
                kind: _7 = rcvec::RcVecBuilder::<TokenTree>::build(move _8) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _0 = fallback::TokenStream { inner: move _7 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:264:9: 264:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:265:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:265:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:265:6: 265:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:263:33: 263:34 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:261:57: 261:58 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:265:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:265:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:259:5: 265:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::TokenStream,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:259:33: 259:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:259:19: 259:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:259:13: 259:17 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:259:13: 259:17 (#0),
                    },
                ),
            ),
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:259:13: 259:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:260:26: 260:45 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:260:13: 260:23 (#0),
                    },
                ),
            ),
        ),
        ty: rcvec::RcVecBuilder<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:260:13: 260:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:261:9: 261:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rcvec::RcVecMut<'{erased}, TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:261:36: 261:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rcvec::RcVecBuilder<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:261:36: 261:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: TokenTree,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:261:53: 261:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rcvec::RcVec<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:263:20: 263:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:262:9: 264:10 (#0),
                },
            ),
        ),
        ty: rcvec::RcVecBuilder<TokenTree>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:263:20: 263:26 (#0),
            scope: scope[0],
        },
    },
]