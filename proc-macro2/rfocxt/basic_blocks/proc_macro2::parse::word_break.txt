[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:158:11: 158:24 (#0),
                    scope: scope[0],
                },
                kind: _4 = parse::Cursor::<'_>::chars(move _5) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut _4,
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:158:11: 158:31 (#0),
                    scope: scope[0],
                },
                kind: _2 = <std::str::Chars<'_> as std::iter::Iterator>::next(move _3) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _7 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:158:5: 158:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:158:11: 158:31 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:159:9: 159:17 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = _1,
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Ok(move _13),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:160:35: 160:36 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &((_2 as Some).0: char),
            _6 = &fake shallow _2,
            StorageLive(_10),
            StorageLive(_11),
            _11 = (*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:159:21: 159:42 (#0),
                    scope: scope[0],
                },
                kind: _10 = fallback::is_ident_continue(move _11) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:159:21: 159:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForMatchGuard, _6),
            FakeRead(ForGuardBinding, _9),
            StorageLive(_8),
            _8 = ((_2 as Some).0: char),
            StorageLive(_12),
            _12 = parse::Reject,
            _0 = std::result::Result::<parse::Cursor<'_>, parse::Reject>::Err(move _12),
            StorageDead(_12),
            StorageDead(_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:159:56: 159:57 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:159:21: 159:42 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:162:2: 162:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/parse.rs:157:1: 162:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<parse::Cursor<'{erased}>, parse::Reject>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:157:33: 157:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/parse.rs:157:22: 157:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/parse.rs:157:15: 157:20 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:157:15: 157:20 (#0),
                    },
                ),
            ),
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:157:15: 157:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:158:5: 161:6 (#0),
                },
            ),
        ),
        ty: std::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:158:11: 158:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:158:5: 161:6 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:158:11: 158:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:158:5: 161:6 (#0),
                },
            ),
        ),
        ty: std::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:158:11: 158:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:158:5: 161:6 (#0),
                },
            ),
        ),
        ty: &'{erased} parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:158:11: 158:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} std::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:158:11: 158:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:159:9: 159:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/parse.rs:158:11: 158:31 (#0),
                            ),
                        ),
                        pat_span: src/parse.rs:159:9: 159:17 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:159:14: 159:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:159:14: 159:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:158:5: 161:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:159:21: 159:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/parse.rs:158:5: 161:6 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:159:39: 159:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Reject,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:159:50: 159:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parse::Cursor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/parse.rs:160:30: 160:35 (#0),
            scope: scope[0],
        },
    },
]