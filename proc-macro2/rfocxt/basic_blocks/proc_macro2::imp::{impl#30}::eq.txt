[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:750:21: 750:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = <T as std::convert::AsRef<str>>::as_ref(move _4) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            PlaceMention(_1),
            _5 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:751:9: 751:19 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:751:15: 751:19 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:752:13: 752:31 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_1) as Fallback).0: fallback::Ident),
            StorageLive(_12),
            _12 = &_11,
            StorageLive(_13),
            _13 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:753:35: 753:45 (#0),
                    scope: scope[3],
                },
                kind: _0 = <&fallback::Ident as std::cmp::PartialEq<&str>>::eq(move _12, move _13) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &(((*_1) as Compiler).0: proc_macro::Ident),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:752:35: 752:48 (#0),
                    scope: scope[2],
                },
                kind: _8 = <proc_macro::Ident as std::string::ToString>::to_string(move _9) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &_8,
            StorageDead(_9),
            StorageLive(_10),
            _10 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:752:35: 752:57 (#0),
                    scope: scope[2],
                },
                kind: _0 = <std::string::String as std::cmp::PartialEq<&str>>::eq(move _7, move _10) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:752:56: 752:57 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:752:56: 752:57 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:753:44: 753:45 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:755:6: 755:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:752:56: 752:57 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:749:5: 755:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:749:32: 749:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} imp::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:749:11: 749:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:749:25: 749:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:749:18: 749:23 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:749:18: 749:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:749:18: 749:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:750:21: 750:35 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:750:13: 750:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:750:13: 750:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:750:21: 750:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:752:13: 752:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:751:15: 751:19 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:752:13: 752:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} proc_macro::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:752:29: 752:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:751:9: 754:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:752:35: 752:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:751:9: 754:10 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:752:35: 752:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:751:9: 754:10 (#0),
                },
            ),
        ),
        ty: &'{erased} proc_macro::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:752:35: 752:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:751:9: 754:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:752:52: 752:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/wrapper.rs:751:15: 751:19 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:753:13: 753:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:753:29: 753:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:751:9: 754:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} fallback::Ident,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:753:35: 753:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:751:9: 754:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:753:40: 753:45 (#0),
            scope: scope[0],
        },
    },
]