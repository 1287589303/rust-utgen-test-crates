[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const "Literal",
            _5 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1205:25: 1205:52 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::fmt::Formatter::<'_>::debug_struct(move _4, move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            StorageLive(_9),
            StorageLive(_10),
            _10 = const "lit",
            _9 = &(*_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = [const ""],
            _16 = &_17,
            _15 = &(*_16),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &((*_1).0: std::string::String),
            _22 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1206:43: 1206:45 (#127),
                    scope: scope[1],
                },
                kind: _21 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _22) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _20 = [move _21],
            StorageDead(_21),
            _19 = &_20,
            _18 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1206:29: 1206:58 (#127),
                    scope: scope[1],
                },
                kind: _14 = std::fmt::Arguments::<'_>::new_v1::<1, 1>(move _15, move _18) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_15),
            _13 = &_14,
            _12 = &(*_13),
            _11 = move _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1206:9: 1206:59 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::fmt::DebugStruct::<'_, '_>::field(move _8, move _9, move _11) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_7),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _3,
            _25 = &mut (*_26),
            StorageLive(_27),
            _27 = ((*_1).1: fallback::Span),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1207:9: 1207:62 (#0),
                    scope: scope[1],
                },
                kind: _24 = fallback::debug_span_field_if_nontrivial(move _25, move _27) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_26),
            StorageDead(_24),
            StorageLive(_28),
            _28 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1208:9: 1208:23 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::fmt::DebugStruct::<'_, '_>::finish(move _28) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1209:6: 1209:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/fallback.rs:1204:5: 1209:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1204:48: 1204:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} fallback::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1204:12: 1204:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/fallback.rs:1204:24: 1204:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:1204:19: 1204:22 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1204:19: 1204:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1204:19: 1204:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/fallback.rs:1205:25: 1205:52 (#0),
                            ),
                        ),
                        pat_span: src/fallback.rs:1205:13: 1205:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1205:13: 1205:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1205:25: 1205:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1205:42: 1205:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1205:42: 1205:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:9: 1206:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:9: 1206:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:21: 1206:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:21: 1206:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(std::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:28: 1206:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:28: 1206:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:28: 1206:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:29: 1206:58 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:42: 1206:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:42: 1206:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:42: 1206:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:29: 1206:58 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:29: 1206:58 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:29: 1206:58 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:43: 1206:45 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:48: 1206:57 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1206:48: 1206:57 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1207:9: 1207:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1207:40: 1207:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1207:40: 1207:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1207:52: 1207:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/fallback.rs:1208:9: 1208:23 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/fallback.rs:1208:9: 1208:14 (#0),
            scope: scope[0],
        },
    },
]