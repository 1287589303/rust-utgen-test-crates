[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            StorageLive(_5),
            _5 = _2,
            _3 = (move _4, move _5),
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _8 = discriminant((*(_3.0: &imp::Span))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:435:9: 435:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb2, 1: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:435:15: 435:28 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = discriminant((_3.1: imp::Span)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:435:9: 435:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:436:13: 436:51 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:438:13: 438:51 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = discriminant((_3.1: imp::Span)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:435:9: 435:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb7, 1: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:437:13: 437:51 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:439:55: 439:72 (#0),
                    scope: scope[0],
                },
                kind: _20 = imp::mismatch(const 439_u32) -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &(((*(_3.0: &imp::Span)) as Compiler).0: proc_macro::Span),
            StorageLive(_10),
            _10 = (((_3.1: imp::Span) as Compiler).0: proc_macro::Span),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_9),
            StorageLive(_13),
            _13 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:436:70: 436:86 (#0),
                    scope: scope[1],
                },
                kind: _11 = proc_macro::Span::resolved_at(move _12, move _13) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _0 = imp::Span::Compiler(move _11),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:436:86: 436:87 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &(((*(_3.0: &imp::Span)) as Fallback).0: fallback::Span),
            StorageLive(_15),
            _15 = (((_3.1: imp::Span) as Fallback).0: fallback::Span),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_14),
            StorageLive(_18),
            _18 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:437:70: 437:86 (#0),
                    scope: scope[2],
                },
                kind: _16 = fallback::Span::resolved_at(move _17, move _18) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            _0 = imp::Span::Fallback(move _16),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:437:86: 437:87 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:438:55: 438:72 (#0),
                    scope: scope[0],
                },
                kind: _19 = imp::mismatch(const 438_u32) -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:441:6: 441:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/wrapper.rs:434:5: 441:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:434:54: 434:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:434:31: 434:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/wrapper.rs:434:45: 434:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/wrapper.rs:434:38: 434:43 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:434:38: 434:43 (#0),
                    },
                ),
            ),
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:434:38: 434:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: (&'{erased} imp::Span, imp::Span),
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:435:15: 435:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: &'{erased} imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:435:16: 435:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: imp::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:435:22: 435:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:33: 436:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:437:33: 437:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:14: 436:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:435:15: 435:28 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:436:13: 436:51 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:29: 436:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:435:15: 435:28 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:436:13: 436:51 (#0),
                    },
                ),
            ),
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:48: 436:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:70: 436:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: &'{erased} proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:70: 436:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: proc_macro::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:436:84: 436:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:435:15: 435:28 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:437:13: 437:51 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:437:29: 437:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/wrapper.rs:435:15: 435:28 (#0),
                            ),
                        ),
                        pat_span: src/wrapper.rs:437:13: 437:51 (#0),
                    },
                ),
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:437:48: 437:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:437:70: 437:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: &'{erased} fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:437:70: 437:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: fallback::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:437:84: 437:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:438:55: 438:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/wrapper.rs:435:9: 440:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/wrapper.rs:439:55: 439:72 (#0),
            scope: scope[0],
        },
    },
]