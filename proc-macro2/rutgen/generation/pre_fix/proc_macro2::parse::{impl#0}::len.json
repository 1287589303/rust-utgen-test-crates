{
  "name": "proc_macro2::parse::{impl#0}::len",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": false,
  "loc": "src/parse.rs:45:5:47:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.rest input string ranging from empty string (\"\"), single character (e.g. \"a\"), strings of varying lengths (1 to 1000 characters), up to maximum capacity limit of usize (e.g. 2^64 - 1) without exceeding memory limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"\" };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), 0);",
                "    let cursor_with_text = Cursor { rest: \"hello\" };",
                "    assert_eq!(cursor_with_text.len(), 5);",
                "    let cursor_with_whitespace = Cursor { rest: \"   \" };",
                "    assert_eq!(cursor_with_whitespace.len(), 3);",
                "    let cursor_with_special_chars = Cursor { rest: \"!@#$%\" };",
                "    assert_eq!(cursor_with_special_chars.len(), 6);",
                "    let cursor_with_empty_spaces = Cursor { rest: \"  text \" };",
                "    assert_eq!(cursor_with_empty_spaces.len(), 7);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"\" };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), 0);",
                "    let cursor_with_text = Cursor { rest: \"hello\" };",
                "    assert_eq!(cursor_with_text.len(), 5);",
                "    let cursor_with_whitespace = Cursor { rest: \"   \" };",
                "    assert_eq!(cursor_with_whitespace.len(), 3);",
                "    let cursor_with_special_chars = Cursor { rest: \"!@#$%\" };",
                "    assert_eq!(cursor_with_special_chars.len(), 6);",
                "    let cursor_with_empty_spaces = Cursor { rest: \"  text \" };",
                "    assert_eq!(cursor_with_empty_spaces.len(), 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"a\" };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), 1);",
                "    let cursor_empty = Cursor { rest: \"\" };",
                "    assert_eq!(cursor_empty.len(), 0);",
                "    let cursor_multiline = Cursor { rest: \"line1\\nline2\" };",
                "    assert_eq!(cursor_multiline.len(), 12);",
                "    let cursor_with_spaces = Cursor { rest: \"   \" };",
                "    assert_eq!(cursor_with_spaces.len(), 3);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"a\" };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), 1);",
                "    let cursor_empty = Cursor { rest: \"\" };",
                "    assert_eq!(cursor_empty.len(), 0);",
                "    let cursor_multiline = Cursor { rest: \"line1\\nline2\" };",
                "    assert_eq!(cursor_multiline.len(), 12);",
                "    let cursor_with_spaces = Cursor { rest: \"   \" };",
                "    assert_eq!(cursor_with_spaces.len(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), 5);",
                "    let cursor_empty = Cursor { rest: \"\" };",
                "    assert_eq!(cursor_empty.len(), 0);",
                "    let cursor_whitespace = Cursor { rest: \"   \" };",
                "    assert_eq!(cursor_whitespace.len(), 3);",
                "    let cursor_special_chars = Cursor { rest: \"!@#$%^&*()\" };",
                "    assert_eq!(cursor_special_chars.len(), 10);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), 5);",
                "    let cursor_empty = Cursor { rest: \"\" };",
                "    assert_eq!(cursor_empty.len(), 0);",
                "    let cursor_whitespace = Cursor { rest: \"   \" };",
                "    assert_eq!(cursor_whitespace.len(), 3);",
                "    let cursor_special_chars = Cursor { rest: \"!@#$%^&*()\" };",
                "    assert_eq!(cursor_special_chars.len(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"this is a test string with medium length\" };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), 43);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"this is a test string with medium length\" };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), 43);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let long_string = \"a\".repeat(1000);",
                "    let cursor = Cursor { rest: &long_string };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), 1000);"
              ],
              "code": [
                "{",
                "    let long_string = \"a\".repeat(1000);",
                "    let cursor = Cursor { rest: &long_string };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), 1000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let near_capacity_string = \"a\".repeat(usize::MAX as usize);",
                "    let cursor = Cursor { rest: &near_capacity_string };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), usize::MAX);"
              ],
              "code": [
                "{",
                "    let near_capacity_string = \"a\".repeat(usize::MAX as usize);",
                "    let cursor = Cursor { rest: &near_capacity_string };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let large_string = \"a\".repeat(usize::MAX as usize - 1);",
                "    let cursor = Cursor { rest: &large_string };",
                "    let _ = cursor.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.len(), large_string.len());",
                "    assert_eq!(cursor.len(), usize::MAX as usize - 1);",
                "    assert!(cursor.len() <= usize::MAX as usize);",
                "    assert!(cursor.len() > 0);"
              ],
              "code": [
                "{",
                "    let large_string = \"a\".repeat(usize::MAX as usize - 1);",
                "    let cursor = Cursor { rest: &large_string };",
                "    let _ = cursor.len();",
                "    assert_eq!(cursor.len(), large_string.len());",
                "    assert_eq!(cursor.len(), usize::MAX as usize - 1);",
                "    assert!(cursor.len() <= usize::MAX as usize);",
                "    assert!(cursor.len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}