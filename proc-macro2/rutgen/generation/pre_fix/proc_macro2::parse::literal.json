{
  "name": "proc_macro2::parse::literal",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": true,
  "loc": "src/parse.rs:337:1:341:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: literal_nocapture(input)? at line 338 is Err/None\n"
      ],
      "input_infer": "Cursor with a non-empty `rest` string containing various invalid formats; for example: \"abc\", \"123abc\", \"3.14abc\", \"-3.14abc\", or \"0x12\" (hexadecimal) to ensure literal_nocapture fails.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let _ = literal(cursor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-xyz\" }), Err(LexError::call_site()));",
                "    assert_eq!(literal(Cursor { rest: \"1.5.3\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"123abc456\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-123abc\" }), Err(LexError::call_site()));",
                "    assert_eq!(literal(Cursor { rest: \"+++\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"1,234\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"a123\" }), Err(Reject));"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let _ = literal(cursor);",
                "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-xyz\" }), Err(LexError::call_site()));",
                "    assert_eq!(literal(Cursor { rest: \"1.5.3\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"123abc456\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-123abc\" }), Err(LexError::call_site()));",
                "    assert_eq!(literal(Cursor { rest: \"+++\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"1,234\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"a123\" }), Err(Reject));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"123abc\" };",
                "    let _ = literal(cursor);",
                "}"
              ],
              "oracle": [
                "    let cursor = Cursor { rest: \"123abc\" };",
                "    let result = literal(cursor);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
                "    let cursor_invalid = Cursor { rest: \"abc\" };",
                "    let result_invalid = literal(cursor_invalid);",
                "    assert!(result_invalid.is_err());",
                "    let cursor_negative = Cursor { rest: \"-12abc\" };",
                "    let result_negative = literal(cursor_negative);",
                "    assert!(result_negative.is_err());",
                "    let cursor_empty = Cursor { rest: \"\" };",
                "    let result_empty = literal(cursor_empty);",
                "    assert!(result_empty.is_err());"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"123abc\" };",
                "    let _ = literal(cursor);",
                "    let cursor = Cursor { rest: \"123abc\" };",
                "    let result = literal(cursor);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
                "    let cursor_invalid = Cursor { rest: \"abc\" };",
                "    let result_invalid = literal(cursor_invalid);",
                "    assert!(result_invalid.is_err());",
                "    let cursor_negative = Cursor { rest: \"-12abc\" };",
                "    let result_negative = literal(cursor_negative);",
                "    assert!(result_negative.is_err());",
                "    let cursor_empty = Cursor { rest: \"\" };",
                "    let result_empty = literal(cursor_empty);",
                "    assert!(result_empty.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"3.14abc\" };",
                "    let _ = literal(cursor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal(Cursor { rest: \"3.14abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-3.14xyz\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"3.14\" }), Ok((Cursor { rest: \"\" }, Literal::_new(\"3.14\".to_string()))));"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"3.14abc\" };",
                "    let _ = literal(cursor);",
                "    assert_eq!(literal(Cursor { rest: \"3.14abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-3.14xyz\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"3.14\" }), Ok((Cursor { rest: \"\" }, Literal::_new(\"3.14\".to_string()))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"-3.14abc\" };",
                "    let _ = literal(cursor);",
                "}"
              ],
              "oracle": [
                "    let cursor = Cursor { rest: \"-3.14abc\" };",
                "    assert_eq!(literal(cursor).is_err(), true);",
                "    assert_eq!(literal(cursor), Err(LexError::call_site()));",
                "    let cursor = Cursor { rest: \"invalid_literal\" };",
                "    assert_eq!(literal(cursor).is_err(), true);",
                "    let cursor = Cursor { rest: \"\" };",
                "    assert_eq!(literal(cursor).is_err(), true);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"-3.14abc\" };",
                "    let _ = literal(cursor);",
                "    let cursor = Cursor { rest: \"-3.14abc\" };",
                "    assert_eq!(literal(cursor).is_err(), true);",
                "    assert_eq!(literal(cursor), Err(LexError::call_site()));",
                "    let cursor = Cursor { rest: \"invalid_literal\" };",
                "    assert_eq!(literal(cursor).is_err(), true);",
                "    let cursor = Cursor { rest: \"\" };",
                "    assert_eq!(literal(cursor).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"0x12\" };",
                "    let _ = literal(cursor);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(literal(Cursor { rest: \"0x12\" }), Err(Reject));",
                "    assert!(literal(Cursor { rest: \"\" }).is_err());",
                "    assert_eq!(literal(Cursor { rest: \"not_a_number\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-\"}), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"1.2.3\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"42abc\" }), Err(Reject));",
                "    assert!(literal(Cursor { rest: \"nan\" }).is_err());",
                "    assert!(literal(Cursor { rest: \"inf\" }).is_err());"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"0x12\" };",
                "    let _ = literal(cursor);",
                "    assert_eq!(literal(Cursor { rest: \"0x12\" }), Err(Reject));",
                "    assert!(literal(Cursor { rest: \"\" }).is_err());",
                "    assert_eq!(literal(Cursor { rest: \"not_a_number\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"-\"}), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"1.2.3\" }), Err(Reject));",
                "    assert_eq!(literal(Cursor { rest: \"42abc\" }), Err(Reject));",
                "    assert!(literal(Cursor { rest: \"nan\" }).is_err());",
                "    assert!(literal(Cursor { rest: \"inf\" }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: literal_nocapture(input)? at line 338 is Ok/Some\n",
        "expected return value/type: Ok((rest, Literal::_new(input.rest[..end].to_string())))\n"
      ],
      "input_infer": "Cursor with non-empty rest containing valid literals for string, byte string, character, float, or integer types; ensure cursor starts with valid case (e.g., starting from valid identifiers, ASCII digits, or negative sign); test both positive and negative values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"hello\" };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"hello\" };",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().1.repr == \"hello\");",
                "    assert!(result.unwrap().0.rest.is_empty());",
                "    assert!(result.unwrap().1.span == Span::call_site());"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"hello\" };",
                "    let result = literal(input);",
                "    let input = Cursor { rest: \"hello\" };",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().1.repr == \"hello\");",
                "    assert!(result.unwrap().0.rest.is_empty());",
                "    assert!(result.unwrap().1.span == Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"-123\" };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(literal.repr, \"-123\");",
                "    assert!(rest.is_empty());"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"-123\" };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(literal.repr, \"-123\");",
                "    assert!(rest.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"456\" };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(literal.repr, \"456\");",
                "    assert!(rest.len() < input.len());",
                "    assert_eq!(literal.span, Span::call_site());"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"456\" };",
                "    let result = literal(input);",
                "    assert_eq!(result.is_ok(), true);",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(literal.repr, \"456\");",
                "    assert!(rest.len() < input.len());",
                "    assert_eq!(literal.span, Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"3.14\" };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.rest, \"\"); // Assuming it consumes all input",
                "    assert_eq!(literal.repr, \"3.14\");",
                "    assert_eq!(literal.span(), Span::call_site()); // Check span if applicable",
                "    assert!(literal.is_empty() == false); // Literal should not be empty",
                "    assert!(literal.repr.chars().all(|ch| ch.is_numeric() || ch == '.')); // Validate characters in repr"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"3.14\" };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.rest, \"\"); // Assuming it consumes all input",
                "    assert_eq!(literal.repr, \"3.14\");",
                "    assert_eq!(literal.span(), Span::call_site()); // Check span if applicable",
                "    assert!(literal.is_empty() == false); // Literal should not be empty",
                "    assert!(literal.repr.chars().all(|ch| ch.is_numeric() || ch == '.')); // Validate characters in repr",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"'a'\" };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"'a'\" };",
                "    let expected_length = input.len();",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.len(), expected_length - literal.repr.len());",
                "    assert_eq!(literal.repr, \"'a'\");"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"'a'\" };",
                "    let result = literal(input);",
                "    let input = Cursor { rest: \"'a'\" };",
                "    let expected_length = input.len();",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.len(), expected_length - literal.repr.len());",
                "    assert_eq!(literal.repr, \"'a'\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: r#\"\"byte_string\"\"# };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: r#\"\"byte_string\"\"# };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.rest, \"\");",
                "    assert_eq!(literal.repr, r#\"\"byte_string\"\"#);"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: r#\"\"byte_string\"\"# };",
                "    let result = literal(input);",
                "    let input = Cursor { rest: r#\"\"byte_string\"\"# };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.rest, \"\");",
                "    assert_eq!(literal.repr, r#\"\"byte_string\"\"#);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: r#\"\"\"\"# };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: r#\"\"\"\"# };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.rest, \"\");",
                "    assert_eq!(literal.repr, \"\");",
                "    assert_eq!(literal.span(), Span::call_site());"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: r#\"\"\"\"# };",
                "    let result = literal(input);",
                "    let input = Cursor { rest: r#\"\"\"\"# };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(rest.rest, \"\");",
                "    assert_eq!(literal.repr, \"\");",
                "    assert_eq!(literal.span(), Span::call_site());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"-1.23\" };",
                "    let result = literal(input);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"-1.23\" };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(literal.repr, \"-1.23\");",
                "    assert!(rest.rest.is_empty());"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"-1.23\" };",
                "    let result = literal(input);",
                "    let input = Cursor { rest: \"-1.23\" };",
                "    let result = literal(input);",
                "    assert!(result.is_ok());",
                "    let (rest, literal) = result.unwrap();",
                "    assert_eq!(literal.repr, \"-1.23\");",
                "    assert!(rest.rest.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}