{
  "name": "proc_macro2::token_stream::{impl#0}::size_hint",
  "mod_info": {
    "name": "token_stream",
    "loc": "src/lib.rs:1337:1:1384:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1361:9:1363:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.inner must be initialized and must represent a valid TokenTreeIter; the return values must always be a tuple where the first element is a non-negative usize representing the minimum number of items and the second element is an Option<usize> representing the maximum number of items or None for unbounded sizes.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (0, Some(0)));",
                "    ",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Punct(Punct::new('+', Spacing::Alone))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Literal(Literal::new(\"2\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (0, Some(0)));",
                "    ",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Punct(Punct::new('+', Spacing::Alone))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Literal(Literal::new(\"2\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.size_hint(), (0, Some(0)));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    assert_eq!(iter.size_hint(), (0, Some(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\".into(), Span::call_site()))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\".into(), Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    let (lower_bound, upper_bound) = iter.size_hint();",
                "    assert_eq!(lower_bound, 1);",
                "    assert_eq!(upper_bound, Some(1));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\".into(), Span::call_site()))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\".into(), Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    let (lower_bound, upper_bound) = iter.size_hint();",
                "    assert_eq!(lower_bound, 1);",
                "    assert_eq!(upper_bound, Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test\"))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test\"))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    let (lower_bound, upper_bound) = iter.size_hint();",
                "    assert_eq!(lower_bound, 1);",
                "    assert_eq!(upper_bound, Some(1));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test\"))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test\"))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    let (lower_bound, upper_bound) = iter.size_hint();",
                "    assert_eq!(lower_bound, 1);",
                "    assert_eq!(upper_bound, Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test1\", Span::call_site())), TokenTree::Ident(Ident::new(\"test2\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test1\", Span::call_site())), TokenTree::Ident(Ident::new(\"test2\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter {",
                "    inner,",
                "    _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let (lower, upper) = iter.size_hint();",
                "    assert_eq!(lower, 2);",
                "    assert_eq!(upper, Some(2));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test1\", Span::call_site())), TokenTree::Ident(Ident::new(\"test2\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test1\", Span::call_site())), TokenTree::Ident(Ident::new(\"test2\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter {",
                "    inner,",
                "    _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let (lower, upper) = iter.size_hint();",
                "    assert_eq!(lower, 2);",
                "    assert_eq!(upper, Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test1\")), TokenTree::Literal(Literal::string(\"test2\"))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test1\")), TokenTree::Literal(Literal::string(\"test2\"))].into_iter()));",
                "    let iter = IntoIter {",
                "    inner,",
                "    _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    assert_eq!(iter.size_hint(), (2, Some(2)));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test1\")), TokenTree::Literal(Literal::string(\"test2\"))].into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"test1\")), TokenTree::Literal(Literal::string(\"test2\"))].into_iter()));",
                "    let iter = IntoIter {",
                "    inner,",
                "    _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    assert_eq!(iter.size_hint(), (2, Some(2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(Vec::<TokenTree>::new().into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(Vec::<TokenTree>::new().into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (0, Some(0)));",
                "    ",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"example\"))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Punct(Punct::new('+', Spacing::Alone))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));"
              ],
              "code": [
                "{",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(Vec::<TokenTree>::new().into_iter()));",
                "    let iter = IntoIter {",
                "        inner,",
                "        _marker: ProcMacroAutoTraits(PhantomData),",
                "    };",
                "    let _ = iter.size_hint();",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(Vec::<TokenTree>::new().into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (0, Some(0)));",
                "    ",
                "    let inner = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Literal(Literal::string(\"example\"))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "    ",
                "    let inner = TokenTreeIter::Fallback(fallback::TokenTreeIter::new(vec![TokenTree::Punct(Punct::new('+', Spacing::Alone))].into_iter()));",
                "    let iter = IntoIter { inner, _marker: ProcMacroAutoTraits(PhantomData) };",
                "    assert_eq!(iter.size_hint(), (1, Some(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}