{
  "name": "proc_macro2::fallback::{impl#3}::new",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:163:5:167:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: TokenStreamBuilder {\n            inner: RcVecBuilder::new(),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input required; test with default instantiation of TokenStreamBuilder.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tsb = TokenStreamBuilder::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tsb.inner, RcVecBuilder::new());",
                "    assert!(matches!(tsb.inner, RcVecBuilder { inner: vec }));",
                "    assert!(tsb.inner.inner.is_empty());",
                "    assert_eq!(std::mem::size_of_val(&tsb), std::mem::size_of::<TokenStreamBuilder>());"
              ],
              "code": [
                "{",
                "    let tsb = TokenStreamBuilder::new();",
                "    assert_eq!(tsb.inner, RcVecBuilder::new());",
                "    assert!(matches!(tsb.inner, RcVecBuilder { inner: vec }));",
                "    assert!(tsb.inner.inner.is_empty());",
                "    assert_eq!(std::mem::size_of_val(&tsb), std::mem::size_of::<TokenStreamBuilder>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tsb = TokenStreamBuilder::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tsb.inner.inner.len(), 0);",
                "    assert!(tsb.inner.inner.is_empty());",
                "    assert_eq!(TokenStreamBuilder::new(), TokenStreamBuilder { inner: RcVecBuilder::new() });",
                "    assert_eq!(tsb.inner.inner.capacity(), 0);",
                "    assert!(tsb.inner.inner.is_empty());"
              ],
              "code": [
                "{",
                "    let tsb = TokenStreamBuilder::with_capacity(0);",
                "    assert_eq!(tsb.inner.inner.len(), 0);",
                "    assert!(tsb.inner.inner.is_empty());",
                "    assert_eq!(TokenStreamBuilder::new(), TokenStreamBuilder { inner: RcVecBuilder::new() });",
                "    assert_eq!(tsb.inner.inner.capacity(), 0);",
                "    assert!(tsb.inner.inner.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tsb = TokenStreamBuilder::with_capacity(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tsb.inner.inner.len(), 0);",
                "    assert_eq!(tsb.inner.inner.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let tsb = TokenStreamBuilder::with_capacity(10);",
                "    assert_eq!(tsb.inner.inner.len(), 0);",
                "    assert_eq!(tsb.inner.inner.capacity(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}