{
  "name": "proc_macro2::fallback::get_cursor",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": false,
  "loc": "src/fallback.rs:204:1:206:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Cursor { rest: src }\n"
      ],
      "input_infer": "src: non-empty string, possibly including special characters, maximum length of 1024 characters\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src = \"example string\";",
                "    let cursor = get_cursor(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.rest, \"example string\");",
                "    assert_eq!(cursor.off, 0);"
              ],
              "code": [
                "{",
                "    let src = \"example string\";",
                "    let cursor = get_cursor(src);",
                "    assert_eq!(cursor.rest, \"example string\");",
                "    assert_eq!(cursor.off, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src = \"!@#$%^&*()_+[]{}|;':\\\",.<>?\";",
                "    let cursor = get_cursor(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.rest, \"!@#$%^&*()_+[]{}|;':\\\",.<>?\");",
                "    assert_eq!(cursor.off, 0);"
              ],
              "code": [
                "{",
                "    let src = \"!@#$%^&*()_+[]{}|;':\\\",.<>?\";",
                "    let cursor = get_cursor(src);",
                "    assert_eq!(cursor.rest, \"!@#$%^&*()_+[]{}|;':\\\",.<>?\");",
                "    assert_eq!(cursor.off, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src = \"a\".repeat(1024);",
                "    let cursor = get_cursor(&src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.rest, src);",
                "    assert!(cursor.rest.len() == 1024);",
                "    assert!(cursor.off == 0);"
              ],
              "code": [
                "{",
                "    let src = \"a\".repeat(1024);",
                "    let cursor = get_cursor(&src);",
                "    assert_eq!(cursor.rest, src);",
                "    assert!(cursor.rest.len() == 1024);",
                "    assert!(cursor.off == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src = \"\";",
                "    let cursor = get_cursor(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.rest, \"\");"
              ],
              "code": [
                "{",
                "    let src = \"\";",
                "    let cursor = get_cursor(src);",
                "    assert_eq!(cursor.rest, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}