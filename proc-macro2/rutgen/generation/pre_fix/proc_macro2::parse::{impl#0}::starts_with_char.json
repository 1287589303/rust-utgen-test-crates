{
  "name": "proc_macro2::parse::{impl#0}::starts_with_char",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": true,
  "loc": "src/parse.rs:30:5:32:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.rest should be a non-empty string containing various characters, ch should be a single character including special characters and whitespace, and cases where ch is either the first character, a middle character, or not present at all in self.rest.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), false);",
                "    assert_eq!(cursor.starts_with_char('c'), false);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), \"abc\".starts_with('a'));",
                "    assert_eq!(cursor.starts_with_char(''), false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('a');",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), false);",
                "    assert_eq!(cursor.starts_with_char('c'), false);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), \"abc\".starts_with('a'));",
                "    assert_eq!(cursor.starts_with_char(''), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('b');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.starts_with_char('b'), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('c'), false);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('b');",
                "    assert_eq!(cursor.starts_with_char('b'), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('c'), false);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('c');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), true);",
                "    assert_eq!(cursor.starts_with_char('c'), false);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char(char::from(0)), false);",
                "    assert_eq!(cursor.starts_with_char(char::from(255)), false);",
                "    assert_eq!(cursor.starts_with_char(''), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('c');",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), true);",
                "    assert_eq!(cursor.starts_with_char('c'), false);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char(char::from(0)), false);",
                "    assert_eq!(cursor.starts_with_char(char::from(255)), false);",
                "    assert_eq!(cursor.starts_with_char(''), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('d');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), true);",
                "    assert_eq!(cursor.starts_with_char('c'), true);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char('e'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), cursor.rest.starts_with('a'));",
                "    assert_eq!(cursor.starts_with_char('\\0'), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('z'), false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    cursor.starts_with_char('d');",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('b'), true);",
                "    assert_eq!(cursor.starts_with_char('c'), true);",
                "    assert_eq!(cursor.starts_with_char('d'), false);",
                "    assert_eq!(cursor.starts_with_char('e'), false);",
                "    assert_eq!(cursor.starts_with_char(' '), false);",
                "    assert_eq!(cursor.starts_with_char('a'), cursor.rest.starts_with('a'));",
                "    assert_eq!(cursor.starts_with_char('\\0'), false);",
                "    assert_eq!(cursor.starts_with_char('a'), true);",
                "    assert_eq!(cursor.starts_with_char('z'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
                "    cursor.starts_with_char('!');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.starts_with_char('!'), true);",
                "    assert_eq!(cursor.starts_with_char('@'), false);",
                "    assert_eq!(cursor.starts_with_char('#'), false);",
                "    assert_eq!(cursor.starts_with_char('$'), false);",
                "    assert_eq!(cursor.starts_with_char('%'), false);",
                "    assert_eq!(cursor.starts_with_char('^'), false);",
                "    assert_eq!(cursor.starts_with_char('&'), false);",
                "    assert_eq!(cursor.starts_with_char('*'), false);",
                "    assert_eq!(cursor.starts_with_char('('), false);",
                "    assert_eq!(cursor.starts_with_char(')'), false);",
                "    assert_eq!(cursor.starts_with_char('a'), false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
                "    cursor.starts_with_char('!');",
                "    assert_eq!(cursor.starts_with_char('!'), true);",
                "    assert_eq!(cursor.starts_with_char('@'), false);",
                "    assert_eq!(cursor.starts_with_char('#'), false);",
                "    assert_eq!(cursor.starts_with_char('$'), false);",
                "    assert_eq!(cursor.starts_with_char('%'), false);",
                "    assert_eq!(cursor.starts_with_char('^'), false);",
                "    assert_eq!(cursor.starts_with_char('&'), false);",
                "    assert_eq!(cursor.starts_with_char('*'), false);",
                "    assert_eq!(cursor.starts_with_char('('), false);",
                "    assert_eq!(cursor.starts_with_char(')'), false);",
                "    assert_eq!(cursor.starts_with_char('a'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \" hello\" };",
                "    cursor.starts_with_char(' ');",
                "}"
              ],
              "oracle": [
                "    assert!(cursor.starts_with_char(' '));",
                "    assert!(!cursor.starts_with_char('h'));",
                "    assert!(cursor.starts_with_char('h'));",
                "    assert!(!cursor.starts_with_char('e'));",
                "    assert!(!cursor.starts_with_char('!'));",
                "    assert!(!cursor.starts_with_char(''));",
                "    assert!(!cursor.starts_with_char('a'));"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \" hello\" };",
                "    cursor.starts_with_char(' ');",
                "    assert!(cursor.starts_with_char(' '));",
                "    assert!(!cursor.starts_with_char('h'));",
                "    assert!(cursor.starts_with_char('h'));",
                "    assert!(!cursor.starts_with_char('e'));",
                "    assert!(!cursor.starts_with_char('!'));",
                "    assert!(!cursor.starts_with_char(''));",
                "    assert!(!cursor.starts_with_char('a'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}