{
  "name": "proc_macro2::rcvec::{impl#1}::new",
  "mod_info": {
    "name": "rcvec",
    "loc": "src/lib.rs:143:1:143:11"
  },
  "visible": true,
  "loc": "src/rcvec.rs:65:5:67:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: RcVecBuilder { inner: Vec::new() }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input required, only test the creation of a new instance of RcVecBuilder.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder: RcVecBuilder<i32> = RcVecBuilder::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.inner.len(), 0);",
                "    assert!(builder.inner.is_empty());",
                "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<i32>>());",
                "    assert!(Rc::strong_count(&builder.inner).is_zero());"
              ],
              "code": [
                "{",
                "    let builder: RcVecBuilder<i32> = RcVecBuilder::new();",
                "    assert_eq!(builder.inner.len(), 0);",
                "    assert!(builder.inner.is_empty());",
                "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<i32>>());",
                "    assert!(Rc::strong_count(&builder.inner).is_zero());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder: RcVecBuilder<String> = RcVecBuilder::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.inner.len(), 0);",
                "    assert!(builder.inner.is_empty());",
                "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<String>>());"
              ],
              "code": [
                "{",
                "    let builder: RcVecBuilder<String> = RcVecBuilder::new();",
                "    assert_eq!(builder.inner.len(), 0);",
                "    assert!(builder.inner.is_empty());",
                "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<String>>());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}