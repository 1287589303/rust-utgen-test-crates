{
  "name": "proc_macro2::parse::is_whitespace",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": false,
  "loc": "src/parse.rs:152:1:155:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ch.is_whitespace() at line 154 is true\n",
        "expected return value/type: ch.is_whitespace() || ch == '\\u{200e}' || ch == '\\u{200f}'\n"
      ],
      "input_infer": "ch: any whitespace character (e.g., ' ', '\\n', '\\t', '\\r', '\\u{200e}', '\\u{200f}')\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace(' ');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\0');",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\0');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('\\n');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{2029}');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{3000}');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{2029}');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{3000}');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('\\t');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('\\r');",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert!(result == true);",
                "    let result = is_whitespace(' ');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\n');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\t');",
                "    assert!(result == true);",
                "    let result = is_whitespace('a');",
                "    assert!(result == false);",
                "    let result = is_whitespace('\\0');",
                "    assert!(result == false);",
                "    let result = is_whitespace('\\u{2028}');",
                "    assert!(result == false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('\\r');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert!(result == true);",
                "    let result = is_whitespace(' ');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\n');",
                "    assert!(result == true);",
                "    let result = is_whitespace('\\t');",
                "    assert!(result == true);",
                "    let result = is_whitespace('a');",
                "    assert!(result == false);",
                "    let result = is_whitespace('\\0');",
                "    assert!(result == false);",
                "    let result = is_whitespace('\\u{2028}');",
                "    assert!(result == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('\\u{200e}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200d}');",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), true);",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200d}');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('\\u{200f}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{202c}');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200d}');",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('\\u{200f}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\u{200e}');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace(' ');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\n');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('\\t');",
                "    assert_eq!(result, true);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{202c}');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200d}');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: ch.is_whitespace() at line 154 is false\n",
        "precondition: ch == '\\u{200e}' at line 154 is false\n",
        "expected return value/type: ch.is_whitespace() || ch == '\\u{200e}' || ch == '\\u{200f}'\n"
      ],
      "input_infer": "Test input conditions or ranges: ch should be any character that is neither a whitespace character nor the characters '\\u{200e}' or '\\u{200f}', such as 'a', '1', '@', or any other non-whitespace Unicode character.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(matches!(result, Ok(_)));"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    assert!(matches!(result, Ok(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('1');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200c}');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200d}');",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('1');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('a');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200c}');",
                "    assert_eq!(result, false);",
                "    let result = is_whitespace('\\u{200d}');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('@');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('@');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('!');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('!');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_whitespace('你'); // Non-whitespace Unicode character",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().1, false);",
                "    assert_eq!(result.unwrap().0, Cursor::new(&\"你\"[..]));"
              ],
              "code": [
                "{",
                "    let result = is_whitespace('你'); // Non-whitespace Unicode character",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().1, false);",
                "    assert_eq!(result.unwrap().0, Cursor::new(&\"你\"[..]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: ch.is_whitespace() at line 154 is false\n",
        "precondition: ch == '\\u{200e}' at line 154 is true\n",
        "expected return value/type: ch == '\\u{200f}'\n"
      ],
      "input_infer": "ch == '\\u{200f}' and ch is not a whitespace character\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{200e}'; // This character is expected to return true.",
                "    let _ = is_whitespace(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_whitespace('\\u{200e}'), true);",
                "    assert_eq!(is_whitespace('\\u{200f}'), false);"
              ],
              "code": [
                "{",
                "    let ch = '\\u{200e}'; // This character is expected to return true.",
                "    let _ = is_whitespace(ch);",
                "    assert_eq!(is_whitespace('\\u{200e}'), true);",
                "    assert_eq!(is_whitespace('\\u{200f}'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{200f}'; // This character is expected to return false.",
                "    let _ = is_whitespace(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_whitespace('\\u{200f}'), false);"
              ],
              "code": [
                "{",
                "    let ch = '\\u{200f}'; // This character is expected to return false.",
                "    let _ = is_whitespace(ch);",
                "    assert_eq!(is_whitespace('\\u{200f}'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = 'a'; // This character is expected to return false as it is not a whitespace.",
                "    let _ = is_whitespace(ch);",
                "}"
              ],
              "oracle": [
                "    let ch = '\\u{200e}'; assert_eq!(is_whitespace(ch), false);",
                "    let ch = '\\u{200f}'; assert_eq!(is_whitespace(ch), true);",
                "    let ch = '\\u{200e}'; assert_eq!(is_whitespace(ch), false);",
                "    let ch = ' '; assert_eq!(is_whitespace(ch), true);"
              ],
              "code": [
                "{",
                "    let ch = 'a'; // This character is expected to return false as it is not a whitespace.",
                "    let _ = is_whitespace(ch);",
                "    let ch = '\\u{200e}'; assert_eq!(is_whitespace(ch), false);",
                "    let ch = '\\u{200f}'; assert_eq!(is_whitespace(ch), true);",
                "    let ch = '\\u{200e}'; assert_eq!(is_whitespace(ch), false);",
                "    let ch = ' '; assert_eq!(is_whitespace(ch), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = ' '; // This character is expected to return true as it is a whitespace.",
                "    let _ = is_whitespace(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_whitespace('\\u{200e}'), true);",
                "    assert_eq!(is_whitespace('\\u{200f}'), false);",
                "    assert_eq!(is_whitespace('a'), false);",
                "    assert_eq!(is_whitespace('\\n'), true);",
                "    assert_eq!(is_whitespace('\\t'), true);"
              ],
              "code": [
                "{",
                "    let ch = ' '; // This character is expected to return true as it is a whitespace.",
                "    let _ = is_whitespace(ch);",
                "    assert_eq!(is_whitespace('\\u{200e}'), true);",
                "    assert_eq!(is_whitespace('\\u{200f}'), false);",
                "    assert_eq!(is_whitespace('a'), false);",
                "    assert_eq!(is_whitespace('\\n'), true);",
                "    assert_eq!(is_whitespace('\\t'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}