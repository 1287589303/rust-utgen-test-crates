{
  "name": "proc_macro2::parse::{impl#0}::starts_with_fn",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": true,
  "loc": "src/parse.rs:34:5:39:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Cursor<'a> should have a non-empty 'rest' string and the function 'f' should be a callable that accepts a char and returns a bool; edge cases include an empty Cursor, a Cursor with a single character, and various patterns for 'f' including always true, always false, and specific characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|_| true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"world\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'w');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"example\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'x');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|_| false);",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"rust\" };",
                "    let result = cursor.starts_with_fn(char::is_alphabetic);",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(char::is_digit);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|_| true);",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"world\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'w');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"example\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'x');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|_| false);",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"rust\" };",
                "    let result = cursor.starts_with_fn(char::is_alphabetic);",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(char::is_digit);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|_| false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|_| false);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "}"
              ],
              "oracle": [
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    assert_eq!(result, true);",
                "    let result = cursor.starts_with_fn(|ch| ch == 'e');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"h\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_alphabetic());",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_alphabetic());",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    assert_eq!(result, true);",
                "    let result = cursor.starts_with_fn(|ch| ch == 'e');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"h\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'h');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_alphabetic());",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_alphabetic());",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"a\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"b\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_numeric());",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_uppercase());",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"a\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"b\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_numeric());",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let result = cursor.starts_with_fn(|ch| ch.is_uppercase());",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|_| true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, true);",
                "    let result = cursor.starts_with_fn(|ch| ch == 'b');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(char::is_numeric);",
                "    assert_eq!(result, true);",
                "    let result = cursor.starts_with_fn(char::is_alphabetic);",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"!\" };",
                "    let result = cursor.starts_with_fn(|ch| !char::is_alphanumeric(ch));",
                "    assert_eq!(result, true);",
                "    let empty_cursor = Cursor { rest: \"\" };",
                "    let result = empty_cursor.starts_with_fn(|_| false);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"\" };",
                "    let result = cursor.starts_with_fn(|_| true);",
                "    assert_eq!(result, true);",
                "    let cursor = Cursor { rest: \"abc\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'a');",
                "    assert_eq!(result, true);",
                "    let result = cursor.starts_with_fn(|ch| ch == 'b');",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"123\" };",
                "    let result = cursor.starts_with_fn(char::is_numeric);",
                "    assert_eq!(result, true);",
                "    let result = cursor.starts_with_fn(char::is_alphabetic);",
                "    assert_eq!(result, false);",
                "    let cursor = Cursor { rest: \"!\" };",
                "    let result = cursor.starts_with_fn(|ch| !char::is_alphanumeric(ch));",
                "    assert_eq!(result, true);",
                "    let empty_cursor = Cursor { rest: \"\" };",
                "    let result = empty_cursor.starts_with_fn(|_| false);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let cursor = Cursor { rest: \"hello\" };",
                "    let result = cursor.starts_with_fn(|ch| ch == 'z');",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}