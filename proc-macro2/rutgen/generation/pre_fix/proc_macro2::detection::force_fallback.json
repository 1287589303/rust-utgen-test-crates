{
  "name": "proc_macro2::detection::force_fallback",
  "mod_info": {
    "name": "detection",
    "loc": "src/lib.rs:146:1:146:15"
  },
  "visible": true,
  "loc": "src/detection.rs:18:1:20:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: None (function doesn't take input and alters static state)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    force_fallback();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(WORKS.load(Ordering::Relaxed), 1);"
              ],
              "code": [
                "{",
                "    force_fallback();",
                "    assert_eq!(WORKS.load(Ordering::Relaxed), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let handles: Vec<_> = (0..10).map(|_| {",
                "        std::thread::spawn(|| {",
                "            force_fallback();",
                "        })",
                "    }).collect();",
                "",
                "    for handle in handles {",
                "        handle.join().unwrap();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(WORKS.load(Ordering::Relaxed), 1);"
              ],
              "code": [
                "{",
                "    let handles: Vec<_> = (0..10).map(|_| {",
                "        std::thread::spawn(|| {",
                "            force_fallback();",
                "        })",
                "    }).collect();",
                "",
                "    for handle in handles {",
                "        handle.join().unwrap();",
                "    }",
                "    assert_eq!(WORKS.load(Ordering::Relaxed), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}