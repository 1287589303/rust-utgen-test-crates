{
  "name": "proc_macro2::fallback::{impl#3}::with_capacity",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:169:5:173:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: TokenStreamBuilder {\n            inner: RcVecBuilder::with_capacity(cap),\n        }\n"
      ],
      "input_infer": "cap: 0 to maximum representable usize (0 <= cap <= usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cap: usize = 0;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "}"
              ],
              "oracle": [
                "    let cap: usize = 0;",
                "    let builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(builder.inner.inner.capacity(), cap);",
                "    assert_eq!(builder.inner.inner.len(), 0);",
                "    ",
                "    let cap: usize = 10;",
                "    let builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(builder.inner.inner.capacity(), cap);",
                "    assert_eq!(builder.inner.inner.len(), 0);",
                "    ",
                "    let cap: usize = 100;",
                "    let builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(builder.inner.inner.capacity(), cap);",
                "    assert_eq!(builder.inner.inner.len(), 0);"
              ],
              "code": [
                "{",
                "    let cap: usize = 0;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "    let cap: usize = 0;",
                "    let builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(builder.inner.inner.capacity(), cap);",
                "    assert_eq!(builder.inner.inner.len(), 0);",
                "    ",
                "    let cap: usize = 10;",
                "    let builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(builder.inner.inner.capacity(), cap);",
                "    assert_eq!(builder.inner.inner.len(), 0);",
                "    ",
                "    let cap: usize = 100;",
                "    let builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(builder.inner.inner.capacity(), cap);",
                "    assert_eq!(builder.inner.inner.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cap: usize = 1;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_builder.inner.inner.len(), 0);",
                "    assert_eq!(_builder.inner.inner.capacity(), cap);",
                "    assert!(std::mem::size_of_val(&_builder) > 0);"
              ],
              "code": [
                "{",
                "    let cap: usize = 1;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(_builder.inner.inner.len(), 0);",
                "    assert_eq!(_builder.inner.inner.capacity(), cap);",
                "    assert!(std::mem::size_of_val(&_builder) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cap: usize = 10;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_builder.inner.cap(), 10);",
                "    assert!(_builder.is_valid());",
                "    assert_eq!(std::mem::size_of_val(&_builder), std::mem::size_of::<TokenStreamBuilder>());",
                "    assert!(std::ptr::addr_of!(_builder.inner) != std::ptr::null());"
              ],
              "code": [
                "{",
                "    let cap: usize = 10;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(_builder.inner.cap(), 10);",
                "    assert!(_builder.is_valid());",
                "    assert_eq!(std::mem::size_of_val(&_builder), std::mem::size_of::<TokenStreamBuilder>());",
                "    assert!(std::ptr::addr_of!(_builder.inner) != std::ptr::null());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let cap: usize = usize::MAX;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_builder.inner.inner.len(), usize::MAX);",
                "    assert_eq!(_builder.inner.inner.capacity(), usize::MAX);",
                "    assert!(std::mem::size_of_val(&_builder) > 0);",
                "    assert!(_builder.inner.inner.is_empty());"
              ],
              "code": [
                "{",
                "    let cap: usize = usize::MAX;",
                "    let _builder = TokenStreamBuilder::with_capacity(cap);",
                "    assert_eq!(_builder.inner.inner.len(), usize::MAX);",
                "    assert_eq!(_builder.inner.inner.capacity(), usize::MAX);",
                "    assert!(std::mem::size_of_val(&_builder) > 0);",
                "    assert!(_builder.inner.inner.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}