[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = RcVecMut {",
          "        inner: &mut Vec::new(),",
          "    };",
          "    let token = TokenTree::Literal(Literal {",
          "        repr: String::from(\"5\"),",
          "        span: Span::default(),",
          "    });",
          "    push_token_from_proc_macro(vec, token);",
          "}"
        ],
        "oracle": [
          "    vec.inner.len() == 0",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"5\"), span: Span::default() }))",
          "    vec.inner.len() == 1",
          "    vec.inner[0] == TokenTree::Literal(Literal { repr: String::from(\"5\"), span: Span::default() })"
        ],
        "code": [
          "{",
          "    let mut vec = RcVecMut {",
          "        inner: &mut Vec::new(),",
          "    };",
          "    let token = TokenTree::Literal(Literal {",
          "        repr: String::from(\"5\"),",
          "        span: Span::default(),",
          "    });",
          "    push_token_from_proc_macro(vec, token);",
          "    vec.inner.len() == 0",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"5\"), span: Span::default() }))",
          "    vec.inner.len() == 1",
          "    vec.inner[0] == TokenTree::Literal(Literal { repr: String::from(\"5\"), span: Span::default() })",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = RcVecMut {",
          "        inner: &mut Vec::new(),",
          "    };",
          "    let token = TokenTree::Literal(Literal {",
          "        repr: String::from(\"abc\"),",
          "        span: Span::default(),",
          "    });",
          "    push_token_from_proc_macro(vec, token);",
          "}"
        ],
        "oracle": [
          "    vec.inner.len() == 0",
          "    vec.inner.is_empty()",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"abc\"), span: Span::default() })) == false",
          "    vec.inner.contains(&TokenTree::Punct(Punct::new('-', Spacing::Alone))) == false",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"abc\"), span: Span::default() })) == false"
        ],
        "code": [
          "{",
          "    let mut vec = RcVecMut {",
          "        inner: &mut Vec::new(),",
          "    };",
          "    let token = TokenTree::Literal(Literal {",
          "        repr: String::from(\"abc\"),",
          "        span: Span::default(),",
          "    });",
          "    push_token_from_proc_macro(vec, token);",
          "    vec.inner.len() == 0",
          "    vec.inner.is_empty()",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"abc\"), span: Span::default() })) == false",
          "    vec.inner.contains(&TokenTree::Punct(Punct::new('-', Spacing::Alone))) == false",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"abc\"), span: Span::default() })) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = RcVecMut {",
          "        inner: &mut Vec::new(),",
          "    };",
          "    let token = TokenTree::Literal(Literal {",
          "        repr: String::from(\"1000000\"),",
          "        span: Span::default(),",
          "    });",
          "    push_token_from_proc_macro(vec, token);",
          "}"
        ],
        "oracle": [
          "    vec.inner.len() == 0",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"1000000\"), span: Span::default() }))",
          "    vec.inner.len() == 1",
          "    vec.inner[0] == TokenTree::Literal(Literal { repr: String::from(\"1000000\"), span: Span::default() })",
          "    vec.inner.contains(&TokenTree::Punct(Punct::new('-', Spacing::Alone)))",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"1000000\"), span: Span::default() }))",
          "    vec.inner.len() == 1"
        ],
        "code": [
          "{",
          "    let mut vec = RcVecMut {",
          "        inner: &mut Vec::new(),",
          "    };",
          "    let token = TokenTree::Literal(Literal {",
          "        repr: String::from(\"1000000\"),",
          "        span: Span::default(),",
          "    });",
          "    push_token_from_proc_macro(vec, token);",
          "    vec.inner.len() == 0",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"1000000\"), span: Span::default() }))",
          "    vec.inner.len() == 1",
          "    vec.inner[0] == TokenTree::Literal(Literal { repr: String::from(\"1000000\"), span: Span::default() })",
          "    vec.inner.contains(&TokenTree::Punct(Punct::new('-', Spacing::Alone)))",
          "    vec.inner.contains(&TokenTree::Literal(Literal { repr: String::from(\"1000000\"), span: Span::default() }))",
          "    vec.inner.len() == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]