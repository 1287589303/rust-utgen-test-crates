[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cursor = Cursor { rest: \"\" };",
          "    let last = b'\\r';",
          "    let result = trailing_backslash(&mut cursor, last);",
          "}"
        ],
        "oracle": [
          "    let mut cursor = Cursor { rest: \"\" };",
          "    let last = b'\\r';",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let mut cursor = Cursor { rest: \"\" };",
          "    let last = b'\\r';",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    let mut cursor = Cursor { rest: \"\" };",
          "    let last = b'\\r';",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cursor = Cursor { rest: \"\" };",
          "    let last = b'\\r';",
          "    let result = trailing_backslash(&mut cursor, last);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(cursor.rest, \"\");",
          "    assert!(cursor.is_empty());",
          "    assert!(cursor.bytes().count() == 0);",
          "    assert!(cursor.starts_with(\"\"));"
        ],
        "code": [
          "{",
          "    let mut cursor = Cursor { rest: \"\" };",
          "    let last = b'\\r';",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(cursor.rest, \"\");",
          "    assert!(cursor.is_empty());",
          "    assert!(cursor.bytes().count() == 0);",
          "    assert!(cursor.starts_with(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]