[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cursor = Cursor { rest: \"abc def\\tghi\\r\\n\", off: 0 };",
          "    let last = b'a'; // last is not b'\\r'",
          "    let result = trailing_backslash(&mut cursor, last);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(cursor.rest, \"abc def\\tghi\\r\\n\");",
          "    assert_eq!(cursor.off, 0);"
        ],
        "code": [
          "{",
          "    let mut cursor = Cursor { rest: \"abc def\\tghi\\r\\n\", off: 0 };",
          "    let last = b'a'; // last is not b'\\r'",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(cursor.rest, \"abc def\\tghi\\r\\n\");",
          "    assert_eq!(cursor.off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cursor = Cursor { rest: \"   \\t \\n  \", off: 0 };",
          "    let last = b'x'; // last is not b'\\r'",
          "    let result = trailing_backslash(&mut cursor, last);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut cursor = Cursor { rest: \"   \\t \\n  \", off: 0 };",
          "    let last = b'x'; // last is not b'\\r'",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cursor = Cursor { rest: \"This is a \\t test string.\\nAnd more text here.\", off: 0 };",
          "    let last = b'x'; // last is not b'\\r'",
          "    let result = trailing_backslash(&mut cursor, last);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut cursor = Cursor { rest: \"This is a \\t test string.\\nAnd more text here.\", off: 0 };",
          "    let last = b'x'; // last is not b'\\r'",
          "    let result = trailing_backslash(&mut cursor, last);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]