[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Ident(Ident::new(\"empty\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "}"
        ],
        "oracle": [
          "    builder.inner.inner.len() == 1",
          "    builder.inner.inner[0] == TokenTree::Ident(Ident::new(\"empty\", Span::call_site()))"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Ident(Ident::new(\"empty\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "    builder.inner.inner.len() == 1",
          "    builder.inner.inner[0] == TokenTree::Ident(Ident::new(\"empty\", Span::call_site()))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Ident(Ident::new(\"identifier\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert!(matches!(builder.inner[0], TokenTree::Ident(_)));",
          "    assert!(matches!(builder.inner[0], TokenTree::Ident(ref ident) if ident.to_string() == \"identifier\"));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Ident(Ident::new(\"identifier\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert!(matches!(builder.inner[0], TokenTree::Ident(_)));",
          "    assert!(matches!(builder.inner[0], TokenTree::Ident(ref ident) if ident.to_string() == \"identifier\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Punct(Punct::new('+', Spacing::Alone));",
          "    builder.push_token_from_parser(token);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Punct(_)));",
          "    assert_eq!(if let TokenTree::Punct(ref punct) = builder.inner.inner[0] { punct.to_string() } else { String::new() }, \"+\");",
          "    assert_eq!(if let TokenTree::Punct(ref punct) = builder.inner.inner[0] { punct.spacing() } else { Spacing::Alone }, Spacing::Alone);"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Punct(Punct::new('+', Spacing::Alone));",
          "    builder.push_token_from_parser(token);",
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Punct(_)));",
          "    assert_eq!(if let TokenTree::Punct(ref punct) = builder.inner.inner[0] { punct.to_string() } else { String::new() }, \"+\");",
          "    assert_eq!(if let TokenTree::Punct(ref punct) = builder.inner.inner[0] { punct.spacing() } else { Spacing::Alone }, Spacing::Alone);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Literal(Literal::new(\"42\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "}"
        ],
        "oracle": [
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Literal(Literal::new(\"42\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert!(matches!(builder.inner[0], TokenTree::Literal(_)));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Literal(Literal::new(\"42\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Literal(Literal::new(\"42\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert!(matches!(builder.inner[0], TokenTree::Literal(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Group(Group::new(Delimiter::Parenthesis, RcVec::new()));",
          "    builder.push_token_from_parser(token);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert!(matches!(builder.inner[0], TokenTree::Group(_)));",
          "    assert!(builder.inner[0].is_group());",
          "    assert!(builder.inner[0].is_delimiter(Delimiter::Parenthesis));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    let token = TokenTree::Group(Group::new(Delimiter::Parenthesis, RcVec::new()));",
          "    builder.push_token_from_parser(token);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert!(matches!(builder.inner[0], TokenTree::Group(_)));",
          "    assert!(builder.inner[0].is_group());",
          "    assert!(builder.inner[0].is_delimiter(Delimiter::Parenthesis));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(100);",
          "    for i in 0..100 {",
          "        let token = TokenTree::Ident(Ident::new(&format!(\"ident_{}\", i), Span::call_site()));",
          "        builder.push_token_from_parser(token);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 100);",
          "    assert!(builder.inner.iter().all(|token| matches!(token, TokenTree::Ident(_))));",
          "    assert_eq!(matches!(builder.inner[0], TokenTree::Ident(Ident::new(\"ident_0\", _))), true);",
          "    assert_eq!(matches!(builder.inner[99], TokenTree::Ident(Ident::new(\"ident_99\", _))), true);",
          "    assert!(builder.inner.iter().enumerate().all(|(i, token)| matches!(token, TokenTree::Ident(Ident::new(&format!(\"ident_{}\", i), _)))));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(100);",
          "    for i in 0..100 {",
          "        let token = TokenTree::Ident(Ident::new(&format!(\"ident_{}\", i), Span::call_site()));",
          "        builder.push_token_from_parser(token);",
          "    }",
          "    assert_eq!(builder.inner.len(), 100);",
          "    assert!(builder.inner.iter().all(|token| matches!(token, TokenTree::Ident(_))));",
          "    assert_eq!(matches!(builder.inner[0], TokenTree::Ident(Ident::new(\"ident_0\", _))), true);",
          "    assert_eq!(matches!(builder.inner[99], TokenTree::Ident(Ident::new(\"ident_99\", _))), true);",
          "    assert!(builder.inner.iter().enumerate().all(|(i, token)| matches!(token, TokenTree::Ident(Ident::new(&format!(\"ident_{}\", i), _)))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(0);",
          "    let token = TokenTree::Literal(Literal::new(\"0\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Literal(_)));",
          "    assert_eq!(if let TokenTree::Literal(ref lit) = builder.inner.inner[0] { lit.to_string() } else { String::new() }, \"0\");"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(0);",
          "    let token = TokenTree::Literal(Literal::new(\"0\", Span::call_site()));",
          "    builder.push_token_from_parser(token);",
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Literal(_)));",
          "    assert_eq!(if let TokenTree::Literal(ref lit) = builder.inner.inner[0] { lit.to_string() } else { String::new() }, \"0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    let token1 = TokenTree::Ident(Ident::new(\"first\", Span::call_site()));",
          "    builder.push_token_from_parser(token1);",
          "    let token2 = TokenTree::Punct(Punct::new('-', Spacing::Joint));",
          "    builder.push_token_from_parser(token2);",
          "}"
        ],
        "oracle": [
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    let token1 = TokenTree::Ident(Ident::new(\"first\", Span::call_site()));",
          "    let token2 = TokenTree::Punct(Punct::new('-', Spacing::Joint));",
          "    assert_eq!(builder.inner.inner.len(), 0);",
          "    builder.push_token_from_parser(token1);",
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Ident(_)));",
          "    builder.push_token_from_parser(token2);",
          "    assert_eq!(builder.inner.inner.len(), 2);",
          "    assert!(matches!(builder.inner.inner[1], TokenTree::Punct(_)));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    let token1 = TokenTree::Ident(Ident::new(\"first\", Span::call_site()));",
          "    builder.push_token_from_parser(token1);",
          "    let token2 = TokenTree::Punct(Punct::new('-', Spacing::Joint));",
          "    builder.push_token_from_parser(token2);",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    let token1 = TokenTree::Ident(Ident::new(\"first\", Span::call_site()));",
          "    let token2 = TokenTree::Punct(Punct::new('-', Spacing::Joint));",
          "    assert_eq!(builder.inner.inner.len(), 0);",
          "    builder.push_token_from_parser(token1);",
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Ident(_)));",
          "    builder.push_token_from_parser(token2);",
          "    assert_eq!(builder.inner.inner.len(), 2);",
          "    assert!(matches!(builder.inner.inner[1], TokenTree::Punct(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]