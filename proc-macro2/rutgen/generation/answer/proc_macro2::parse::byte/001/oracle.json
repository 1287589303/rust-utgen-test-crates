[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\" };",
          "    let _result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));",
          "    assert!(matches!(_result, Err(_)));",
          "    assert!(matches!(_result, Err(Reject)));",
          "    assert!(!input.starts_with(\"b'\"));",
          "    assert!(input.is_empty());",
          "    assert_eq!(input.rest, \"b'\");",
          "    assert_eq!(input.len(), 2);",
          "    assert!(input.bytes().count() == 2);",
          "    assert!(input.chars().next() == Some('b'));",
          "    assert!(input.char_indices().next().is_some());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\" };",
          "    let _result = byte(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    assert!(matches!(_result, Err(_)));",
          "    assert!(matches!(_result, Err(Reject)));",
          "    assert!(!input.starts_with(\"b'\"));",
          "    assert!(input.is_empty());",
          "    assert_eq!(input.rest, \"b'\");",
          "    assert_eq!(input.len(), 2);",
          "    assert!(input.bytes().count() == 2);",
          "    assert!(input.chars().next() == Some('b'));",
          "    assert!(input.char_indices().next().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\z'\" };",
          "    let _result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte(Cursor { rest: \"b'\\\\z'\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\z'\" };",
          "    let _result = byte(cursor);",
          "    assert_eq!(byte(Cursor { rest: \"b'\\\\z'\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\xG'\" };",
          "    let _result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"b'\\\\xG'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\\\z'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\x80'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\\\q'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\\\l'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\xG'\" };",
          "    let _result = byte(cursor);",
          "    let cursor = Cursor { rest: \"b'\\\\xG'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\\\z'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\x80'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\\\q'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'\\\\l'\" };",
          "    assert_eq!(byte(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\n\" };",
          "    let _result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\n\" };",
          "    let _result = byte(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]