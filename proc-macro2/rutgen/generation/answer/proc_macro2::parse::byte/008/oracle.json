[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\nextra\", off: 0 };",
          "    let result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"b'\\\\nextra\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"extra\");",
          "    assert!(next_cursor.starts_with(\"'\"));",
          "    assert!(next_cursor.chars().as_str().is_char_boundary(0));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\nextra\", off: 0 };",
          "    let result = byte(cursor);",
          "    let cursor = Cursor { rest: \"b'\\\\nextra\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"extra\");",
          "    assert!(next_cursor.starts_with(\"'\"));",
          "    assert!(next_cursor.chars().as_str().is_char_boundary(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\t more\", off: 0 };",
          "    let result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"b'\\\\t more\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest == \" more\");",
          "    assert_eq!(result.unwrap().off, 0);",
          "    let cursor = Cursor { rest: \"b'\\\\x12 extra\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest == \" extra\");",
          "    let cursor = Cursor { rest: \"b'\\\\ random\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    let cursor = Cursor { rest: \"b'\\\\\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    let cursor = Cursor { rest: \"b'\\\\x\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\t more\", off: 0 };",
          "    let result = byte(cursor);",
          "    let cursor = Cursor { rest: \"b'\\\\t more\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest == \" more\");",
          "    assert_eq!(result.unwrap().off, 0);",
          "    let cursor = Cursor { rest: \"b'\\\\x12 extra\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest == \" extra\");",
          "    let cursor = Cursor { rest: \"b'\\\\ random\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    let cursor = Cursor { rest: \"b'\\\\\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    let cursor = Cursor { rest: \"b'\\\\x\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\' back\", off: 0 };",
          "    let result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));",
          "    assert!(cursor.rest == \"b'\\\\' back\");",
          "    assert!(cursor.off == 0);",
          "    assert!(matches!(result, Err(_)));",
          "    assert!(result.is_err());",
          "    assert!(cursor.starts_with(\"b'\"));",
          "    assert!(cursor.starts_with_char('b'));",
          "    assert!(cursor.bytes().count() > 0);",
          "    assert!(cursor.chars().count() > 0);",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor.parse(\"b'\").is_ok());",
          "    assert!(cursor.char_indices().count() > 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\' back\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    assert!(cursor.rest == \"b'\\\\' back\");",
          "    assert!(cursor.off == 0);",
          "    assert!(matches!(result, Err(_)));",
          "    assert!(result.is_err());",
          "    assert!(cursor.starts_with(\"b'\"));",
          "    assert!(cursor.starts_with_char('b'));",
          "    assert!(cursor.bytes().count() > 0);",
          "    assert!(cursor.chars().count() > 0);",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor.parse(\"b'\").is_ok());",
          "    assert!(cursor.char_indices().count() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\\\\" not closing\", off: 0 };",
          "    let result = byte(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \" not closing\");",
          "    assert_eq!(next_cursor.off, 0);",
          "    assert!(next_cursor.chars().as_str().is_char_boundary(7));",
          "    assert!(next_cursor.starts_with(\"'\"));",
          "    assert!(next_cursor.bytes().count() > 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'\\\\\\\" not closing\", off: 0 };",
          "    let result = byte(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \" not closing\");",
          "    assert_eq!(next_cursor.off, 0);",
          "    assert!(next_cursor.chars().as_str().is_char_boundary(7));",
          "    assert!(next_cursor.starts_with(\"'\"));",
          "    assert!(next_cursor.bytes().count() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]