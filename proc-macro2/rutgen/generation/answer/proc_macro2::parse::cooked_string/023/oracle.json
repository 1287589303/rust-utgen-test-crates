[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"some text\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"some text\\\"\", off: 0 })));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"some text\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "    assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"some text\\\"\", off: 0 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    if let Ok(cursor) = result {",
          "    assert_eq!(cursor.rest, \"\");",
          "    }"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    if let Ok(cursor) = result {",
          "    assert_eq!(cursor.rest, \"\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"some \\\\\\\"escaped\\\\\\\" text\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"some \\\\\\\"escaped\\\\\\\" text\\\"\", off: 0 })));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"some \\\\\\\"escaped\\\\\\\" text\\\"\", off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"some \\\\\\\"escaped\\\\\\\" text\\\"\", off: 0 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]