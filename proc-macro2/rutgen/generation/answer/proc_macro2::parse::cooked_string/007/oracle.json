[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\u1234 valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\u1234 valid text\".into(), off: 0 }), Ok(Cursor { rest: \" valid text\".into(), off: 0 }));",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\xAB valid text\".into(), off: 0 }), Ok(Cursor { rest: \" valid text\".into(), off: 0 }));",
          "    assert!(cooked_string(Cursor { rest: \"\\\\n valid text\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\r valid text\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\t valid text\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\ valid text\".into(), off: 0 }).is_err());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\u123G invalid text\".into(), off: 0 }).is_err());",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\\\\\ valid text\".into(), off: 0 }), Ok(Cursor { rest: \" valid text\".into(), off: 0 }));",
          "    assert!(cooked_string(Cursor { rest: \"\\\\ invalid text\".into(), off: 0 }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\u1234 valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\u1234 valid text\".into(), off: 0 }), Ok(Cursor { rest: \" valid text\".into(), off: 0 }));",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\xAB valid text\".into(), off: 0 }), Ok(Cursor { rest: \" valid text\".into(), off: 0 }));",
          "    assert!(cooked_string(Cursor { rest: \"\\\\n valid text\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\r valid text\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\t valid text\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\ valid text\".into(), off: 0 }).is_err());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\u123G invalid text\".into(), off: 0 }).is_err());",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\\\\\ valid text\".into(), off: 0 }), Ok(Cursor { rest: \" valid text\".into(), off: 0 }));",
          "    assert!(cooked_string(Cursor { rest: \"\\\\ invalid text\".into(), off: 0 }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\xFF valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\\xFF valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\u{FFFF} valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\r\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\t valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\ valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\' valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\\\\" valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\0 valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\\\\\\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "    let cursor = Cursor { rest: \"\\\\x invalid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "    let cursor = Cursor { rest: \"\\\\u{ invalid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "    let cursor = Cursor { rest: \"\\\\text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\xFF valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\\xFF valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\u{FFFF} valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\r\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\t valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\ valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\' valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\\\\" valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\0 valid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"\\\\\\\\\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "    let cursor = Cursor { rest: \"\\\\x invalid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "    let cursor = Cursor { rest: \"\\\\u{ invalid text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "    let cursor = Cursor { rest: \"\\\\text\".into(), #[cfg(span_locations)] off: 0 }; assert!(cooked_string(cursor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\n valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    assert!(cursor.rest == \" valid text\");",
          "    assert_eq!(cursor.rest.chars().next(), Some(' '));",
          "    assert!(cursor.is_empty() == false);",
          "    assert_eq!(cursor.advance(1).rest, \"\\\\valid text\");",
          "    assert!(cursor.starts_with(\"\\\\n\"));",
          "    assert!(cursor.starts_with_char('\\\\'));",
          "    assert!(cursor.starts_with_fn(|c| c == '\\\\'));",
          "    assert!(cooked_string(Cursor { rest: \"\\\\u1234\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\xFF\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\\\r\\n\".into(), off: 0 }).is_err());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\n\".into(), off: 0 }).is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\n valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    assert!(cursor.rest == \" valid text\");",
          "    assert_eq!(cursor.rest.chars().next(), Some(' '));",
          "    assert!(cursor.is_empty() == false);",
          "    assert_eq!(cursor.advance(1).rest, \"\\\\valid text\");",
          "    assert!(cursor.starts_with(\"\\\\n\"));",
          "    assert!(cursor.starts_with_char('\\\\'));",
          "    assert!(cursor.starts_with_fn(|c| c == '\\\\'));",
          "    assert!(cooked_string(Cursor { rest: \"\\\\u1234\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\xFF\".into(), off: 0 }).is_ok());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\\\r\\n\".into(), off: 0 }).is_err());",
          "    assert!(cooked_string(Cursor { rest: \"\\\\n\".into(), off: 0 }).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\ \\nvalid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\\u1234valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\xFFvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\nvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\r\\nvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\tvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\'valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\\\\"valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\0valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\ \\rvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\ \\nvalid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\\u1234valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\xFFvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\nvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\r\\nvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\tvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\'valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\\\\"valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\0valid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\\ \\rvalid text\".into(), off: 0 }; assert_eq!(cooked_string(cursor).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\n\\\\t\\\\r valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\\n\\\\t\\\\r valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\x41 valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\u{0041} valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\\\r valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\\\n\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\n\\\\t\\\\r valid text\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    cooked_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\\n\\\\t\\\\r valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\x41 valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\u{0041} valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\\\r valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\\\\n\\\\n valid text\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(cursor).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]