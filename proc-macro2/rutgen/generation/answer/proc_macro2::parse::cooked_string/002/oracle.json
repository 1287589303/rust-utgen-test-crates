[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "    let input_str = \"\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"\\r\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"\\\"some string \\\\\\\" with escape\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\n\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\u{1234}\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\xFF\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\\\\"\\\\n\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\\\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input_str = \"\\r\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input_str = \"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"\\r\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "    let input_str = \"\\\"some string \\\\\\\" with escape\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\n\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\u{1234}\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\xFF\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\"some string \\\\\\\"\\\\n\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input_str = \"\\\\\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input_str = \"\\r\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input_str = \"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = cooked_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"\\\"abc\\\\\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\\\n\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\r\\n\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"abc\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "    let input_str = \"\\\"abc\\\\\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\\\n\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\r\\n\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"abc\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"a\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\r\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Ok(Cursor { rest: \"\" }));",
          "    ",
          "    let input_str = \"abc\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"a\\\\b\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"a\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "    let input_str = \"\\\\\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\r\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"\\\"\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Ok(Cursor { rest: \"\" }));",
          "    ",
          "    let input_str = \"abc\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "    ",
          "    let input_str = \"a\\\\b\";",
          "    let cursor = Cursor { rest: input_str };",
          "    assert_eq!(cooked_string(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"\\\\\\r\\\"a\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\\\r\\\"a\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"\\\\\\r\\\"a\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _ = cooked_string(cursor);",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\\\r\\\"a\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]