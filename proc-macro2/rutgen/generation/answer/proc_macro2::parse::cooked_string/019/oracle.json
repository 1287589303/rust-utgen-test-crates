[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x41\\\\notherText\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x41\\\\notherText\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_string(input);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\\\\\notherText\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\\\\\\\notherText\", #[cfg(span_locations)] off: 0 };",
          "    let _result = cooked_string(input);",
          "    assert!(matches!(_result, Err(Reject)));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\\\\\notherText\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\\\\\\\notherText\", #[cfg(span_locations)] off: 0 };",
          "    let _result = cooked_string(input);",
          "    assert!(matches!(_result, Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x41\\\\n\\\\t\\\\\\\"\\\\'otherText\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(_result.err().is_some());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "    assert!(input.rest.starts_with(\"\\\\n\"));",
          "    assert!(input.rest.starts_with(\"\\\\x41\"));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x41\\\\n\\\\t\\\\\\\"\\\\'otherText\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_string(input);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(_result.err().is_some());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "    assert!(input.rest.starts_with(\"\\\\n\"));",
          "    assert!(input.rest.starts_with(\"\\\\x41\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]