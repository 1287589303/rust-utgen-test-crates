[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u0041\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u0041\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x41\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\n\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\'\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\"\\\\u0041\\\"\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u0041\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\u0041\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x41\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\n\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\'\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\"\\\\u0041\\\"\".into(), off: 0 };",
          "    assert_eq!(cooked_string(input).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x41\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u1234\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\uABCD\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\u{1F600}\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\u00FF\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\x7F\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\n\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\r\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\t\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\\\\\\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x41\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\u1234\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\uABCD\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\u{1F600}\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\u00FF\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\x7F\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\n\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\r\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\t\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    let input = Cursor { rest: \"\\\\\\\\\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\\\n\".into(), off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\\\n\".into(), off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\n\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\n\".into(), off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\n\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "    assert_eq!(cooked_string(Cursor { rest: \"\\\\n\".into(), off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u0041\\\\n\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u0041\\\\n\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\u0041\\\\n\".into(), off: 0 };",
          "    let output = cursor.starts_with(\"\\\\u0041\");",
          "    assert!(output);",
          "    let cursor_empty = Cursor { rest: \"\".into(), off: 0 };",
          "    assert!(cursor_empty.is_empty());",
          "    let cursor_with_escape = Cursor { rest: \"\\\\u0041\".into(), off: 0 };",
          "    assert!(!cursor_with_escape.is_empty());",
          "    assert!(cursor_with_escape.starts_with_char('\\\\'));",
          "    let input_invalid = Cursor { rest: \"\\\\x\".into(), off: 0 };",
          "    let result_invalid = cooked_string(input_invalid);",
          "    assert_eq!(result_invalid, Err(Reject));",
          "    let input_only_escape = Cursor { rest: \"\\\\\".into(), off: 0 };",
          "    let result_only_escape = cooked_string(input_only_escape);",
          "    assert_eq!(result_only_escape, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u0041\\\\n\".into(), ",
          "        off: 0,",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\u0041\\\\n\".into(), off: 0 };",
          "    let result = cooked_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\u0041\\\\n\".into(), off: 0 };",
          "    let output = cursor.starts_with(\"\\\\u0041\");",
          "    assert!(output);",
          "    let cursor_empty = Cursor { rest: \"\".into(), off: 0 };",
          "    assert!(cursor_empty.is_empty());",
          "    let cursor_with_escape = Cursor { rest: \"\\\\u0041\".into(), off: 0 };",
          "    assert!(!cursor_with_escape.is_empty());",
          "    assert!(cursor_with_escape.starts_with_char('\\\\'));",
          "    let input_invalid = Cursor { rest: \"\\\\x\".into(), off: 0 };",
          "    let result_invalid = cooked_string(input_invalid);",
          "    assert_eq!(result_invalid, Err(Reject));",
          "    let input_only_escape = Cursor { rest: \"\\\\\".into(), off: 0 };",
          "    let result_only_escape = cooked_string(input_only_escape);",
          "    assert_eq!(result_only_escape, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]