[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\g\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\g\", off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err(), ERROR);",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\g\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\g\", off: 0 };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err(), ERROR);",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\g\\\\z\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\g\\\\z\", #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\g\\\\z\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\g\\\\z\", #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\m\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\m\", off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\m\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\m\", off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\n\\\\g\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\n\\\\g\", #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { ",
          "        rest: \"\\\\n\\\\g\", ",
          "        #[cfg(span_locations)]",
          "        off: 0 ",
          "    };",
          "    let _ = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\n\\\\g\", #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(cooked_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]