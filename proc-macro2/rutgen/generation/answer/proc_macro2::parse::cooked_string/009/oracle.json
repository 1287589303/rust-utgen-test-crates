[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\u0061test\" };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u0061test\" };",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\u0061test\" };",
          "    let result = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\u0061test\" };",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\x61test\" };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u1234test\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x61\\\\u1234test\" }; assert_eq!(cooked_string(input).is_ok(), true);",
          "    let input = Cursor { rest: \"\\\\n\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\'\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\"\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\0\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\a\" }; assert_eq!(cooked_string(input).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\x61test\" };",
          "    let result = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\u1234test\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x61\\\\u1234test\" }; assert_eq!(cooked_string(input).is_ok(), true);",
          "    let input = Cursor { rest: \"\\\\n\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\'\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\"\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\0\" }; assert_eq!(cooked_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\a\" }; assert_eq!(cooked_string(input).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\uZZZZ\" };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\uZZZZ\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\\\n\" };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(input.rest, \"\\\\\\n\");",
          "    assert_eq!(input.off, 0);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\\\n\" };",
          "    let result = cooked_string(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(input.rest, \"\\\\\\n\");",
          "    assert_eq!(input.off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    assert!(matches!(cooked_string(input), Err(Reject)));",
          "    ",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    assert!(matches!(cooked_string(input), Err(Reject)));",
          "    ",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\r\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\t\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\"\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\'\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\0\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\u1234\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\r\\\\n\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_string(input);",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    assert!(matches!(cooked_string(input), Err(Reject)));",
          "    ",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    assert!(matches!(cooked_string(input), Err(Reject)));",
          "    ",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\r\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\t\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\"\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\'\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\0\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\u1234\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\r\\\\n\" };",
          "    let result = cooked_string(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]