[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec: RcVec<i32> = RcVec {",
          "        inner: Rc::new(vec![]),",
          "    };",
          "    rc_vec.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(rc_vec.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let rc_vec: RcVec<i32> = RcVec {",
          "        inner: Rc::new(vec![]),",
          "    };",
          "    rc_vec.is_empty();",
          "    assert!(rc_vec.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec: RcVec<i32> = RcVec {",
          "        inner: Rc::new(vec![1]),",
          "    };",
          "    rc_vec.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rc_vec.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let rc_vec: RcVec<i32> = RcVec {",
          "        inner: Rc::new(vec![1]),",
          "    };",
          "    rc_vec.is_empty();",
          "    assert_eq!(rc_vec.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec: RcVec<i32> = RcVec {",
          "        inner: Rc::new(vec![1, 2, 3]),",
          "    };",
          "    rc_vec.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rc_vec.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let rc_vec: RcVec<i32> = RcVec {",
          "        inner: Rc::new(vec![1, 2, 3]),",
          "    };",
          "    rc_vec.is_empty();",
          "    assert_eq!(rc_vec.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]