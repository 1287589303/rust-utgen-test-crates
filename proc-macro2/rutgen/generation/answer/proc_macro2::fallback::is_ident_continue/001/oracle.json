[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('a');",
          "}"
        ],
        "oracle": [
          "    assert!(result);",
          "    let result = is_ident_continue('1');",
          "    assert!(result);",
          "    let result = is_ident_continue('_');",
          "    assert!(result);",
          "    let result = is_ident_continue('-');",
          "    assert!(!result);",
          "    let result = is_ident_continue('@');",
          "    assert!(!result);",
          "    let result = is_ident_continue(' ');",
          "    assert!(!result);",
          "    let result = is_ident_continue('á');",
          "    assert!(result);",
          "    let result = is_ident_continue('Z');",
          "    assert!(result);",
          "    let result = is_ident_continue('\\u{7F}');",
          "    assert!(!result);",
          "    let result = is_ident_continue('𝓐');",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('a');",
          "    assert!(result);",
          "    let result = is_ident_continue('1');",
          "    assert!(result);",
          "    let result = is_ident_continue('_');",
          "    assert!(result);",
          "    let result = is_ident_continue('-');",
          "    assert!(!result);",
          "    let result = is_ident_continue('@');",
          "    assert!(!result);",
          "    let result = is_ident_continue(' ');",
          "    assert!(!result);",
          "    let result = is_ident_continue('á');",
          "    assert!(result);",
          "    let result = is_ident_continue('Z');",
          "    assert!(result);",
          "    let result = is_ident_continue('\\u{7F}');",
          "    assert!(!result);",
          "    let result = is_ident_continue('𝓐');",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('1');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('-');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\0');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('!');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('$');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('A');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('-');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\0');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('!');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('$');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('A');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('_');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ident_continue('_'), true);",
          "    assert_eq!(is_ident_continue('a'), true);",
          "    assert_eq!(is_ident_continue('1'), true);",
          "    assert_eq!(is_ident_continue('-'), false);",
          "    assert_eq!(is_ident_continue(' '), false);",
          "    assert_eq!(is_ident_continue('\\0'), false);",
          "    assert_eq!(is_ident_continue('~'), false);",
          "    assert_eq!(is_ident_continue('ä'), true);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(is_ident_continue('_'), true);",
          "    assert_eq!(is_ident_continue('a'), true);",
          "    assert_eq!(is_ident_continue('1'), true);",
          "    assert_eq!(is_ident_continue('-'), false);",
          "    assert_eq!(is_ident_continue(' '), false);",
          "    assert_eq!(is_ident_continue('\\0'), false);",
          "    assert_eq!(is_ident_continue('~'), false);",
          "    assert_eq!(is_ident_continue('ä'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue(' ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(is_ident_continue('a'), true);",
          "    assert_eq!(is_ident_continue('1'), true);",
          "    assert_eq!(is_ident_continue('_'), true);",
          "    assert_eq!(is_ident_continue('\\u{007F}'), false);",
          "    assert_eq!(is_ident_continue('\\u{00A0}'), true);",
          "    assert_eq!(is_ident_continue('!'), false);",
          "    assert_eq!(is_ident_continue('ç'), true);",
          "    assert_eq!(is_ident_continue('6'), true);",
          "    assert_eq!(is_ident_continue(' '), false);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);",
          "    assert_eq!(is_ident_continue('a'), true);",
          "    assert_eq!(is_ident_continue('1'), true);",
          "    assert_eq!(is_ident_continue('_'), true);",
          "    assert_eq!(is_ident_continue('\\u{007F}'), false);",
          "    assert_eq!(is_ident_continue('\\u{00A0}'), true);",
          "    assert_eq!(is_ident_continue('!'), false);",
          "    assert_eq!(is_ident_continue('ç'), true);",
          "    assert_eq!(is_ident_continue('6'), true);",
          "    assert_eq!(is_ident_continue(' '), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('!');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('$');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('ç');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\0');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('©');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('!');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('$');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('ç');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\0');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('©');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('\\u{0000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\u{007F}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{FFFF}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{2050}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{0041}');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('\\u{0000}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\u{007F}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{FFFF}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{2050}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{0041}');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('\\u{FFFF}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('$');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\u{7F}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{10000}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{A9}');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('👾');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\u{D800}');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('\\u{FFFF}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('$');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\u{7F}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{10000}');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('\\u{A9}');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('👾');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('\\u{D800}');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_ident_continue('#');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_ident_continue('#');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue('a');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('_');",
          "    assert_eq!(result, true);",
          "    let result = is_ident_continue('1');",
          "    assert_eq!(result, false);",
          "    let result = is_ident_continue(' ');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]