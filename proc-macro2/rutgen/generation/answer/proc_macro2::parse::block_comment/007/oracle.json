[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"/* Comment /* Nested comment\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"/* Comment /* Nested comment\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"/* Comment /* Nested comment */ /* Another unclosed comment\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.err(), Some(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"/* Comment /* Nested comment */ /* Another unclosed comment\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.err(), Some(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"/*\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "    assert!(cursor.starts_with(\"/*\"));",
          "    assert!(cursor.as_bytes().len() > 0);",
          "    assert!(cursor.rest.len() == 2);",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor.len() > 0);",
          "    assert!(cursor.bytes().len() == cursor.rest.len());",
          "    assert!(cursor.chars().count() == cursor.rest.chars().count());",
          "    assert!(cursor.char_indices().count() == cursor.rest.chars().count());",
          "    assert!(cursor.advance(2).is_empty() == true);",
          "    assert!(cursor.starts_with(\"/*\") == true);",
          "    assert!(cursor.starts_with_fn(|ch| ch == '/') == true);",
          "    assert!(depth == 0);",
          "    assert!(i == upper);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"/*\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "    assert!(cursor.starts_with(\"/*\"));",
          "    assert!(cursor.as_bytes().len() > 0);",
          "    assert!(cursor.rest.len() == 2);",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor.len() > 0);",
          "    assert!(cursor.bytes().len() == cursor.rest.len());",
          "    assert!(cursor.chars().count() == cursor.rest.chars().count());",
          "    assert!(cursor.char_indices().count() == cursor.rest.chars().count());",
          "    assert!(cursor.advance(2).is_empty() == true);",
          "    assert!(cursor.starts_with(\"/*\") == true);",
          "    assert!(cursor.starts_with_fn(|ch| ch == '/') == true);",
          "    assert!(depth == 0);",
          "    assert!(i == upper);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]