[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* comment /* nested comment */ comment */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let (new_cursor, output) = _result.unwrap();",
          "    assert_eq!(output, \"/* comment /* nested comment */\");",
          "    assert_eq!(new_cursor.rest, \" comment */\");"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* comment /* nested comment */ comment */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "    assert!(_result.is_ok());",
          "    let (new_cursor, output) = _result.unwrap();",
          "    assert_eq!(output, \"/* comment /* nested comment */\");",
          "    assert_eq!(new_cursor.rest, \" comment */\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* outer /* inner /* deeper */ inner end */ outer end */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok((Cursor { rest: \" inner end */\", off: 0 }, \"/* outer /* inner /* deeper */\")));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* outer /* inner /* deeper */ inner end */ outer end */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "    assert_eq!(_result, Ok((Cursor { rest: \" inner end */\", off: 0 }, \"/* outer /* inner /* deeper */\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* single /* nested */ comment */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let (next_cursor, comment) = _result.unwrap();",
          "    assert_eq!(comment, \"/* single /* nested */ comment */\");",
          "    assert_eq!(next_cursor.rest, \"\");"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* single /* nested */ comment */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "    assert!(_result.is_ok());",
          "    let (next_cursor, comment) = _result.unwrap();",
          "    assert_eq!(comment, \"/* single /* nested */ comment */\");",
          "    assert_eq!(next_cursor.rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* start /* middle */ end */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let (next_cursor, comment) = _result.unwrap();",
          "    assert_eq!(next_cursor.rest, \" end */\");",
          "    assert_eq!(comment, \"/* start /* middle */\");",
          "    assert!(next_cursor.starts_with(\" end */\"));",
          "    assert!(!next_cursor.starts_with(\"/* start\"));",
          "    assert!(comment.contains(\"start\"));",
          "    assert!(comment.contains(\"middle\"));",
          "    assert_eq!(comment.matches(\"/*\").count(), 2);",
          "    assert_eq!(comment.matches(\"*/\").count(), 1);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/* start /* middle */ end */\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = block_comment(input);",
          "    assert!(_result.is_ok());",
          "    let (next_cursor, comment) = _result.unwrap();",
          "    assert_eq!(next_cursor.rest, \" end */\");",
          "    assert_eq!(comment, \"/* start /* middle */\");",
          "    assert!(next_cursor.starts_with(\" end */\"));",
          "    assert!(!next_cursor.starts_with(\"/* start\"));",
          "    assert!(comment.contains(\"start\"));",
          "    assert!(comment.contains(\"middle\"));",
          "    assert_eq!(comment.matches(\"/*\").count(), 2);",
          "    assert_eq!(comment.matches(\"*/\").count(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]