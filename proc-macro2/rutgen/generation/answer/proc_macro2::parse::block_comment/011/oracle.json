[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"some random text\" };",
          "    let _result = block_comment(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"some random text\" };",
          "    let _result = block_comment(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _result = block_comment(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = block_comment(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _result = block_comment(cursor);",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = block_comment(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/// this is not a comment\" };",
          "    let _result = block_comment(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/// this is not a comment\" };",
          "    let _result = block_comment(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]