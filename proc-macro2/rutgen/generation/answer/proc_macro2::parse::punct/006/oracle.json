[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'+\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'+\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(rest.rest, \"+\");",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'+\" };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"'+\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(rest.rest, \"+\");",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'-\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok((_, Punct { ch: '\\'', spacing: Spacing::Joint, .. }))))",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.as_ref().unwrap().1.ch, '\\'');",
          "    assert_eq!(result.as_ref().unwrap().1.spacing, Spacing::Joint);",
          "    assert!(result.as_ref().unwrap().0.starts_with(\"-\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'-\" };",
          "    let result = punct(cursor);",
          "    assert!(matches!(result, Ok((_, Punct { ch: '\\'', spacing: Spacing::Joint, .. }))))",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.as_ref().unwrap().1.ch, '\\'');",
          "    assert_eq!(result.as_ref().unwrap().1.spacing, Spacing::Joint);",
          "    assert!(result.as_ref().unwrap().0.starts_with(\"-\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'=\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'=\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert!(rest.starts_with('='));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'=\" };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"'=\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert!(rest.starts_with('='));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"';:\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"';:\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(rest.rest, \";:\");",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"';:\" };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"';:\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(rest.rest, \";:\");",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'*+\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'*+\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert_eq!(rest, \"*+\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'*+\" };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"'*+\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert_eq!(rest, \"*+\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]