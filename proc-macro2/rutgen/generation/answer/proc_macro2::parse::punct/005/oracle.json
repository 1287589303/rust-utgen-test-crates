[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'abc\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'abc\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert!(!rest.starts_with_char('\\''));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'abc\" };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"'abc\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert!(!rest.starts_with_char('\\''));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'ident\" };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'ident\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert!(punct_char(rest).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'ident\" };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"'ident\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, punct) = result.unwrap();",
          "    assert_eq!(punct.as_char(), '\\'');",
          "    assert_eq!(punct.spacing(), Spacing::Joint);",
          "    assert!(punct_char(rest).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]