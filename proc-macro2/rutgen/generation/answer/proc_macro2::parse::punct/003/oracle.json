[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$'ident\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$'ident\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$ 'ident\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"$ 'ident\", off: 0 };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(reject) => assert_eq!(reject, Reject),",
          "    _ => panic!(\"Expected Err(Reject)\")",
          "    }"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$ 'ident\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"$ 'ident\", off: 0 };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(reject) => assert_eq!(reject, Reject),",
          "    _ => panic!(\"Expected Err(Reject)\")",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$'ident1 'ident2\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"$'ident1 'ident2\", off: 0 };",
          "    let result = punct(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$'ident1 'ident2\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"$'ident1 'ident2\", off: 0 };",
          "    let result = punct(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$; 'ident\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"$; 'ident\", off: 0 };",
          "    let result = punct(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"$; 'ident\",",
          "        off: 0,",
          "    };",
          "    let result = punct(cursor);",
          "    let cursor = Cursor { rest: \"$; 'ident\", off: 0 };",
          "    let result = punct(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]