[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"// comment\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"/* comment */\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \" \" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"abc\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"#\"; }; assert_eq!(punct(cursor).unwrap().1.as_char(), '#');",
          "    let cursor = Cursor { rest: \"+\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '+');",
          "    let cursor = Cursor { rest: \"'x\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"'*'\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '\\'');",
          "    let cursor = Cursor { rest: \"!\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '!');",
          "    let cursor = Cursor { rest: \"?\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '?');",
          "    let cursor = Cursor { rest: \"=\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '=');",
          "    let cursor = Cursor { rest: \"('\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '(',);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = punct(cursor);",
          "    let cursor = Cursor { rest: \"// comment\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"/* comment */\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \" \" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"abc\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"#\"; }; assert_eq!(punct(cursor).unwrap().1.as_char(), '#');",
          "    let cursor = Cursor { rest: \"+\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '+');",
          "    let cursor = Cursor { rest: \"'x\" }; assert!(punct(cursor).is_err());",
          "    let cursor = Cursor { rest: \"'*'\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '\\'');",
          "    let cursor = Cursor { rest: \"!\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '!');",
          "    let cursor = Cursor { rest: \"?\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '?');",
          "    let cursor = Cursor { rest: \"=\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '=');",
          "    let cursor = Cursor { rest: \"('\" }; assert_eq!(punct(cursor).unwrap().1.as_char(), '(',);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"    \" };",
          "    let _ = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_ == Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"    \" };",
          "    let _ = punct(cursor);",
          "    assert!(_ == Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"a\" };",
          "    let _ = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let cursor_invalid_punct = Cursor { rest: \"// comment\" };",
          "    let cursor_invalid_punct2 = Cursor { rest: \"/* block comment */\" };",
          "    let cursor_valid_punct_alone = Cursor { rest: \"+\" };",
          "    let cursor_valid_punct_joint = Cursor { rest: \"++\" };",
          "    let result_empty = punct(cursor_empty);",
          "    let result_invalid_punct = punct(cursor_invalid_punct);",
          "    let result_invalid_punct2 = punct(cursor_invalid_punct2);",
          "    let result_valid_punct_alone = punct(cursor_valid_punct_alone);",
          "    let result_valid_punct_joint = punct(cursor_valid_punct_joint);",
          "    assert!(result_empty.is_err());",
          "    assert!(result_invalid_punct.is_err());",
          "    assert!(result_invalid_punct2.is_err());",
          "    assert!(matches!(result_valid_punct_alone, Ok(_)));",
          "    assert!(matches!(result_valid_punct_joint, Ok(_)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"a\" };",
          "    let _ = punct(cursor);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let cursor_invalid_punct = Cursor { rest: \"// comment\" };",
          "    let cursor_invalid_punct2 = Cursor { rest: \"/* block comment */\" };",
          "    let cursor_valid_punct_alone = Cursor { rest: \"+\" };",
          "    let cursor_valid_punct_joint = Cursor { rest: \"++\" };",
          "    let result_empty = punct(cursor_empty);",
          "    let result_invalid_punct = punct(cursor_invalid_punct);",
          "    let result_invalid_punct2 = punct(cursor_invalid_punct2);",
          "    let result_valid_punct_alone = punct(cursor_valid_punct_alone);",
          "    let result_valid_punct_joint = punct(cursor_valid_punct_joint);",
          "    assert!(result_empty.is_err());",
          "    assert!(result_invalid_punct.is_err());",
          "    assert!(result_invalid_punct2.is_err());",
          "    assert!(matches!(result_valid_punct_alone, Ok(_)));",
          "    assert!(matches!(result_valid_punct_joint, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"// comment\" };",
          "    let _ = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"// comment\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"// comment\" };",
          "    let _ = punct(cursor);",
          "    let cursor = Cursor { rest: \"// comment\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* comment */\" };",
          "    let _ = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"/* comment */\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* comment */\" };",
          "    let _ = punct(cursor);",
          "    let cursor = Cursor { rest: \"/* comment */\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"&\" };",
          "    let _ = punct(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"&\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert_eq!(result.is_ok(), false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"&\" };",
          "    let _ = punct(cursor);",
          "    let cursor = Cursor { rest: \"&\" };",
          "    let result = punct(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert_eq!(result.is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]