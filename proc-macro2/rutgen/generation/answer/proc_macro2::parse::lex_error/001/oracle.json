[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let _ = lex_error(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "    assert_eq!(result.span, Span { lo: 0, hi: 0 });",
          "    let cursor = Cursor { rest: \"test\", off: 5 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "    assert_eq!(result.span, Span { lo: 5, hi: 5 });",
          "    let cursor = Cursor { rest: \"test\", off: 10 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "    assert_eq!(result.span, Span { lo: 10, hi: 10 });"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let _ = lex_error(cursor);",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "    assert_eq!(result.span, Span { lo: 0, hi: 0 });",
          "    let cursor = Cursor { rest: \"test\", off: 5 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "    assert_eq!(result.span, Span { lo: 5, hi: 5 });",
          "    let cursor = Cursor { rest: \"test\", off: 10 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "    assert_eq!(result.span, Span { lo: 10, hi: 10 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"a\", off: 1 };",
          "    let _ = lex_error(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"a\", off: 1 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"a\", off: 1 };",
          "    let _ = lex_error(cursor);",
          "    let cursor = Cursor { rest: \"a\", off: 1 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, cursor.off);",
          "    assert_eq!(result.span.hi, cursor.off);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello\", off: 10 };",
          "    let _ = lex_error(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"hello\", off: 10 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, 10);",
          "    assert_eq!(result.span.hi, 10);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello\", off: 10 };",
          "    let _ = lex_error(cursor);",
          "    let cursor = Cursor { rest: \"hello\", off: 10 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, 10);",
          "    assert_eq!(result.span.hi, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"text\", off: u32::MAX };",
          "    let _ = lex_error(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"text\", off: u32::MAX };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, u32::MAX);",
          "    assert_eq!(result.span.hi, u32::MAX);",
          "    assert!(matches!(result, LexError { span: Span { lo: _, hi: _ } }));",
          "    let cursor_zero = Cursor { rest: \"text\", off: 0 };",
          "    let result_zero = lex_error(cursor_zero);",
          "    assert_eq!(result_zero.span.lo, 0);",
          "    assert_eq!(result_zero.span.hi, 0);",
          "    let cursor_mid = Cursor { rest: \"text\", off: 10 };",
          "    let result_mid = lex_error(cursor_mid);",
          "    assert_eq!(result_mid.span.lo, 10);",
          "    assert_eq!(result_mid.span.hi, 10);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"text\", off: u32::MAX };",
          "    let _ = lex_error(cursor);",
          "    let cursor = Cursor { rest: \"text\", off: u32::MAX };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, u32::MAX);",
          "    assert_eq!(result.span.hi, u32::MAX);",
          "    assert!(matches!(result, LexError { span: Span { lo: _, hi: _ } }));",
          "    let cursor_zero = Cursor { rest: \"text\", off: 0 };",
          "    let result_zero = lex_error(cursor_zero);",
          "    assert_eq!(result_zero.span.lo, 0);",
          "    assert_eq!(result_zero.span.hi, 0);",
          "    let cursor_mid = Cursor { rest: \"text\", off: 10 };",
          "    let result_mid = lex_error(cursor_mid);",
          "    assert_eq!(result_mid.span.lo, 10);",
          "    assert_eq!(result_mid.span.hi, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[cfg(not(span_locations))]"
        ],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"some text\", off: 5 };",
          "    let _ = lex_error(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"some text\", off: 5 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, 5);",
          "    assert_eq!(result.span.hi, 5);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"some text\", off: 5 };",
          "    let _ = lex_error(cursor);",
          "    let cursor = Cursor { rest: \"some text\", off: 5 };",
          "    let result = lex_error(cursor);",
          "    assert_eq!(result.span.lo, 5);",
          "    assert_eq!(result.span.hi, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]