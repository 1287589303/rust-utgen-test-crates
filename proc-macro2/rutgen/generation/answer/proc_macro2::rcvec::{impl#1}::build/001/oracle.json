[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = RcVecBuilder::<i32>::new();",
          "    let rc_vec = builder.build();",
          "}"
        ],
        "oracle": [
          "    let builder = RcVecBuilder::<i32>::new();",
          "    let rc_vec = builder.build();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    assert!(rc_vec.inner.as_slice().is_empty());",
          "    let builder_with_capacity = RcVecBuilder::<i32>::with_capacity(10);",
          "    let rc_vec_with_capacity = builder_with_capacity.build();",
          "    assert!(Rc::strong_count(&rc_vec_with_capacity.inner) == 1);",
          "    assert!(rc_vec_with_capacity.inner.capacity() == 10);"
        ],
        "code": [
          "{",
          "    let builder = RcVecBuilder::<i32>::new();",
          "    let rc_vec = builder.build();",
          "    let builder = RcVecBuilder::<i32>::new();",
          "    let rc_vec = builder.build();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    assert!(rc_vec.inner.as_slice().is_empty());",
          "    let builder_with_capacity = RcVecBuilder::<i32>::with_capacity(10);",
          "    let rc_vec_with_capacity = builder_with_capacity.build();",
          "    assert!(Rc::strong_count(&rc_vec_with_capacity.inner) == 1);",
          "    assert!(rc_vec_with_capacity.inner.capacity() == 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(1);",
          "    let rc_vec = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(rc_vec.inner.len(), 0);",
          "    let mut builder_with_capacity = RcVecBuilder::<i32>::with_capacity(5);",
          "    assert!(Rc::strong_count(&builder_with_capacity.build().inner) == 1);",
          "    builder_with_capacity.push(2);",
          "    let rc_vec_with_elements = builder_with_capacity.build();",
          "    assert_eq!(rc_vec_with_elements.inner.len(), 1);",
          "    assert_eq!(Rc::strong_count(&rc_vec_with_elements.inner), 1);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(1);",
          "    let rc_vec = builder.build();",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(rc_vec.inner.len(), 0);",
          "    let mut builder_with_capacity = RcVecBuilder::<i32>::with_capacity(5);",
          "    assert!(Rc::strong_count(&builder_with_capacity.build().inner) == 1);",
          "    builder_with_capacity.push(2);",
          "    let rc_vec_with_elements = builder_with_capacity.build();",
          "    assert_eq!(rc_vec_with_elements.inner.len(), 1);",
          "    assert_eq!(Rc::strong_count(&rc_vec_with_elements.inner), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(1);",
          "    builder.push(2);",
          "    builder.push(3);",
          "    let rc_vec = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    assert!(rc_vec.inner.len() == 3);",
          "    assert!(rc_vec.inner[0] == 1);",
          "    assert!(rc_vec.inner[1] == 2);",
          "    assert!(rc_vec.inner[2] == 3);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(1);",
          "    builder.push(2);",
          "    builder.push(3);",
          "    let rc_vec = builder.build();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    assert!(rc_vec.inner.len() == 3);",
          "    assert!(rc_vec.inner[0] == 1);",
          "    assert!(rc_vec.inner[1] == 2);",
          "    assert!(rc_vec.inner[2] == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = RcVecBuilder::<i32>::with_capacity(0);",
          "    let rc_vec = builder.build();",
          "}"
        ],
        "oracle": [
          "    let builder = RcVecBuilder::<i32>::with_capacity(0);",
          "    let rc_vec = builder.build();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    assert!(rc_vec.inner.len() == 0);",
          "    assert!(Rc::weak_count(&rc_vec.inner) == 0);",
          "    let builder_with_capacity = RcVecBuilder::<i32>::with_capacity(10);",
          "    let rc_vec_with_capacity = builder_with_capacity.build();",
          "    assert!(Rc::strong_count(&rc_vec_with_capacity.inner) == 1);",
          "    assert!(rc_vec_with_capacity.inner.capacity() == 10);",
          "    assert!(rc_vec_with_capacity.inner.len() == 0);"
        ],
        "code": [
          "{",
          "    let builder = RcVecBuilder::<i32>::with_capacity(0);",
          "    let rc_vec = builder.build();",
          "    let builder = RcVecBuilder::<i32>::with_capacity(0);",
          "    let rc_vec = builder.build();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    assert!(rc_vec.inner.len() == 0);",
          "    assert!(Rc::weak_count(&rc_vec.inner) == 0);",
          "    let builder_with_capacity = RcVecBuilder::<i32>::with_capacity(10);",
          "    let rc_vec_with_capacity = builder_with_capacity.build();",
          "    assert!(Rc::strong_count(&rc_vec_with_capacity.inner) == 1);",
          "    assert!(rc_vec_with_capacity.inner.capacity() == 10);",
          "    assert!(rc_vec_with_capacity.inner.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(3);",
          "    builder.push(1);",
          "    builder.push(2);",
          "    builder.push(3);",
          "    let rc_vec = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rc_vec.inner.as_ref().len(), 3);",
          "    assert_eq!(rc_vec.inner.as_ref()[0], 1);",
          "    assert_eq!(rc_vec.inner.as_ref()[1], 2);",
          "    assert_eq!(rc_vec.inner.as_ref()[2], 3);",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    let _rc_vec_clone = rc_vec.clone();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 2);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(3);",
          "    builder.push(1);",
          "    builder.push(2);",
          "    builder.push(3);",
          "    let rc_vec = builder.build();",
          "    assert_eq!(rc_vec.inner.as_ref().len(), 3);",
          "    assert_eq!(rc_vec.inner.as_ref()[0], 1);",
          "    assert_eq!(rc_vec.inner.as_ref()[1], 2);",
          "    assert_eq!(rc_vec.inner.as_ref()[2], 3);",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 1);",
          "    let _rc_vec_clone = rc_vec.clone();",
          "    assert!(Rc::strong_count(&rc_vec.inner) == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(3);",
          "    builder.push(1);",
          "    builder.push(2);",
          "    builder.push(3);",
          "    let rc_vec = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(rc_vec.inner.as_ref(), Rc::new(vec![1, 2, 3])));",
          "    assert_eq!(rc_vec.inner.len(), 3);",
          "    assert_eq!(rc_vec.inner.get(0), Some(&1));",
          "    assert_eq!(rc_vec.inner.get(1), Some(&2));",
          "    assert_eq!(rc_vec.inner.get(2), Some(&3));",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(3);",
          "    builder.push(1);",
          "    builder.push(2);",
          "    builder.push(3);",
          "    let rc_vec = builder.build();",
          "    assert!(matches!(rc_vec.inner.as_ref(), Rc::new(vec![1, 2, 3])));",
          "    assert_eq!(rc_vec.inner.len(), 3);",
          "    assert_eq!(rc_vec.inner.get(0), Some(&1));",
          "    assert_eq!(rc_vec.inner.get(1), Some(&2));",
          "    assert_eq!(rc_vec.inner.get(2), Some(&3));",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]