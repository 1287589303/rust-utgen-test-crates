[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::new();",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    let token_stream = TokenStream::new();",
          "    assert!(_iter.is_empty());",
          "    let _iter = token_stream.into_iter();",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert!(matches!(_iter, TokenTreeIter::Compiler(_)));"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::new();",
          "    let _iter = token_stream.into_iter();",
          "    let token_stream = TokenStream::new();",
          "    assert!(_iter.is_empty());",
          "    let _iter = token_stream.into_iter();",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert!(matches!(_iter, TokenTreeIter::Compiler(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from_str_unchecked(\"let x = 5;\");",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.clone().count(), 5);",
          "    assert!(!_iter.clone().is_empty());",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"let\");",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"x\");",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"=\");",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"5\");",
          "    assert!(_iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from_str_unchecked(\"let x = 5;\");",
          "    let _iter = token_stream.into_iter();",
          "    assert_eq!(_iter.clone().count(), 5);",
          "    assert!(!_iter.clone().is_empty());",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"let\");",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"x\");",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"=\");",
          "    assert_eq!(_iter.next().unwrap().to_string(), \"5\");",
          "    assert!(_iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.is_empty(), true);",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert!(matches!(_iter, TokenTreeIter::Compiler(_)).is_err());"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "    assert_eq!(_iter.is_empty(), true);",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert!(matches!(_iter, TokenTreeIter::Compiler(_)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"\\u{feff}\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.collect::<Vec<TokenTree>>(), vec![]);",
          "    assert_eq!(token_stream.is_empty(), true);",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert!(matches!(token_stream.take_inner(), RcVecBuilder::<TokenTree>::make_owned()));",
          "    assert_eq!(token_stream.inner.inner.len(), 0);"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"\\u{feff}\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "    assert_eq!(_iter.collect::<Vec<TokenTree>>(), vec![]);",
          "    assert_eq!(token_stream.is_empty(), true);",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert!(matches!(token_stream.take_inner(), RcVecBuilder::<TokenTree>::make_owned()));",
          "    assert_eq!(token_stream.inner.inner.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"identifier\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(_iter.is_empty() == true);",
          "    assert!(_iter.next().is_none());",
          "    assert!(_iter.size_hint() == (0, None));"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"identifier\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "    assert!(_iter.is_empty() == true);",
          "    assert!(_iter.next().is_none());",
          "    assert!(_iter.size_hint() == (0, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"42\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert_eq!(token_stream.is_empty(), false);",
          "    assert!(token_stream.into_iter().len() > 0);",
          "    assert!(matches!(token_stream.into_iter().next(), Some(TokenTree::Literal(Literal::Int(42)))));",
          "    assert!(token_stream.take_inner().is_empty() == true);"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"42\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "    assert!(matches!(_iter, TokenTreeIter::Fallback(_)));",
          "    assert_eq!(token_stream.is_empty(), false);",
          "    assert!(token_stream.into_iter().len() > 0);",
          "    assert!(matches!(token_stream.into_iter().next(), Some(TokenTree::Literal(Literal::Int(42)))));",
          "    assert!(token_stream.take_inner().is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"+\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.next().is_some(), true);",
          "    assert_eq!(_iter.next().unwrap(), TokenTree::Punct(Punct::new('+', Spacing::Alone)));",
          "    assert_eq!(_iter.next().is_none(), true);",
          "    assert!(token_stream.is_empty() == false);",
          "    let empty_token_stream = TokenStream::new();",
          "    let empty_iter = empty_token_stream.into_iter();",
          "    assert_eq!(empty_iter.next().is_none(), true);"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::from_str_checked(\"+\").unwrap();",
          "    let _iter = token_stream.into_iter();",
          "    assert_eq!(_iter.next().is_some(), true);",
          "    assert_eq!(_iter.next().unwrap(), TokenTree::Punct(Punct::new('+', Spacing::Alone)));",
          "    assert_eq!(_iter.next().is_none(), true);",
          "    assert!(token_stream.is_empty() == false);",
          "    let empty_token_stream = TokenStream::new();",
          "    let empty_iter = empty_token_stream.into_iter();",
          "    assert_eq!(empty_iter.next().is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]