[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct GroupCompiler;",
          "",
          "    impl GroupCompiler {",
          "        fn span(&self) -> proc_macro::Span { proc_macro::Span::call_site() }",
          "        fn span_open(&self) -> proc_macro::Span { proc_macro::Span::call_site() }",
          "        fn span_close(&self) -> proc_macro::Span { proc_macro::Span::call_site() }",
          "    }",
          "",
          "    let group = GroupCompiler;",
          "",
          "    let delim_span = DelimSpan::new(&group);",
          "    let _result = delim_span.close();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Span::_new(imp::Span::Compiler(proc_macro::Span::call_site())));",
          "    assert!(matches!(delim_span.inner, DelimSpanEnum::Compiler { .. }));"
        ],
        "code": [
          "{",
          "    struct GroupCompiler;",
          "",
          "    impl GroupCompiler {",
          "        fn span(&self) -> proc_macro::Span { proc_macro::Span::call_site() }",
          "        fn span_open(&self) -> proc_macro::Span { proc_macro::Span::call_site() }",
          "        fn span_close(&self) -> proc_macro::Span { proc_macro::Span::call_site() }",
          "    }",
          "",
          "    let group = GroupCompiler;",
          "",
          "    let delim_span = DelimSpan::new(&group);",
          "    let _result = delim_span.close();",
          "    assert_eq!(_result, Span::_new(imp::Span::Compiler(proc_macro::Span::call_site())));",
          "    assert!(matches!(delim_span.inner, DelimSpanEnum::Compiler { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct GroupFallback;",
          "",
          "    impl GroupFallback {",
          "        fn span(&self) -> fallback::Span { fallback::Span::default() }",
          "    }",
          "",
          "    let group = GroupFallback;",
          "",
          "    let delim_span = DelimSpan::new(&group);",
          "    let _result = delim_span.close();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Compiler { close: /* expected close span */, .. });",
          "    assert_eq!(_result, Span::_new(imp::Span::Compiler(/* expected close span */)));",
          "    assert!(matches!(delim_span.inner, DelimSpanEnum::Compiler { .. }));"
        ],
        "code": [
          "{",
          "    struct GroupFallback;",
          "",
          "    impl GroupFallback {",
          "        fn span(&self) -> fallback::Span { fallback::Span::default() }",
          "    }",
          "",
          "    let group = GroupFallback;",
          "",
          "    let delim_span = DelimSpan::new(&group);",
          "    let _result = delim_span.close();",
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Compiler { close: /* expected close span */, .. });",
          "    assert_eq!(_result, Span::_new(imp::Span::Compiler(/* expected close span */)));",
          "    assert!(matches!(delim_span.inner, DelimSpanEnum::Compiler { .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]