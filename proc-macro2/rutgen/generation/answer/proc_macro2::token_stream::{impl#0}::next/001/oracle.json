[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"a\", Span::call_site()))]));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result = into_iter.next();",
          "}"
        ],
        "oracle": [
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"a\", Span::call_site()))]));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result = into_iter.next();",
          "    assert_eq!(result, Some(TokenTree::Ident(Ident::new(\"a\", Span::call_site()))));",
          "    ",
          "    let token_tree_iter_empty = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![]));",
          "    let mut into_iter_empty = IntoIter { inner: token_tree_iter_empty, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result_empty = into_iter_empty.next();",
          "    assert_eq!(result_empty, None);"
        ],
        "code": [
          "{",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"a\", Span::call_site()))]));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result = into_iter.next();",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![TokenTree::Ident(Ident::new(\"a\", Span::call_site()))]));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result = into_iter.next();",
          "    assert_eq!(result, Some(TokenTree::Ident(Ident::new(\"a\", Span::call_site()))));",
          "    ",
          "    let token_tree_iter_empty = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![]));",
          "    let mut into_iter_empty = IntoIter { inner: token_tree_iter_empty, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result_empty = into_iter_empty.next();",
          "    assert_eq!(result_empty, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tokens = vec![",
          "        TokenTree::Ident(Ident::new(\"a\", Span::call_site())),",
          "        TokenTree::Punct(Punct::new('+', Spacing::Alone)),",
          "        TokenTree::Ident(Ident::new(\"b\", Span::call_site())),",
          "    ];",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(tokens));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    ",
          "    let result1 = into_iter.next();",
          "    let result2 = into_iter.next();",
          "    let result3 = into_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(TokenTree::Ident(Ident::new(\"a\", Span::call_site()))));",
          "    assert_eq!(result2, Some(TokenTree::Punct(Punct::new('+', Spacing::Alone))));",
          "    assert_eq!(result3, Some(TokenTree::Ident(Ident::new(\"b\", Span::call_site()))));",
          "    assert_eq!(into_iter.next(), None);"
        ],
        "code": [
          "{",
          "    let tokens = vec![",
          "        TokenTree::Ident(Ident::new(\"a\", Span::call_site())),",
          "        TokenTree::Punct(Punct::new('+', Spacing::Alone)),",
          "        TokenTree::Ident(Ident::new(\"b\", Span::call_site())),",
          "    ];",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(tokens));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    ",
          "    let result1 = into_iter.next();",
          "    let result2 = into_iter.next();",
          "    let result3 = into_iter.next();",
          "    assert_eq!(result1, Some(TokenTree::Ident(Ident::new(\"a\", Span::call_site()))));",
          "    assert_eq!(result2, Some(TokenTree::Punct(Punct::new('+', Spacing::Alone))));",
          "    assert_eq!(result3, Some(TokenTree::Ident(Ident::new(\"b\", Span::call_site()))));",
          "    assert_eq!(into_iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![]));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result = into_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let token_tree_iter = TokenTreeIter::Compiler(proc_macro::token_stream::IntoIter::new(vec![]));",
          "    let mut into_iter = IntoIter { inner: token_tree_iter, _marker: ProcMacroAutoTraits(PhantomData) };",
          "    let result = into_iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]