[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 0;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.capacity(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    ",
          "    let cap = 10;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 10);",
          "    assert!(builder.inner.is_empty());",
          "    ",
          "    let cap = usize::MAX;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), cap);",
          "    assert!(builder.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let cap = 0;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    ",
          "    let cap = 10;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 10);",
          "    assert!(builder.inner.is_empty());",
          "    ",
          "    let cap = usize::MAX;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), cap);",
          "    assert!(builder.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 1;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.capacity(), cap);",
          "    assert!(builder.inner.is_empty());",
          "    let builder_zero = RcVecBuilder::with_capacity(0);",
          "    assert_eq!(builder_zero.inner.capacity(), 0);",
          "    assert!(builder_zero.inner.is_empty());",
          "    let builder_ten = RcVecBuilder::with_capacity(10);",
          "    assert_eq!(builder_ten.inner.capacity(), 10);",
          "    assert!(builder_ten.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let cap = 1;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), cap);",
          "    assert!(builder.inner.is_empty());",
          "    let builder_zero = RcVecBuilder::with_capacity(0);",
          "    assert_eq!(builder_zero.inner.capacity(), 0);",
          "    assert!(builder_zero.inner.is_empty());",
          "    let builder_ten = RcVecBuilder::with_capacity(10);",
          "    assert_eq!(builder_ten.inner.capacity(), 10);",
          "    assert!(builder_ten.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 100;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.capacity(), cap);",
          "    assert!(builder.inner.is_empty());",
          "    assert!(mem::size_of::<RcVecBuilder<i32>>() > 0);",
          "    assert!(mem::size_of::<RcVecBuilder<()>>() > 0);",
          "    assert!(cap > 0);",
          "    assert!(builder.inner.len() == 0);"
        ],
        "code": [
          "{",
          "    let cap = 100;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), cap);",
          "    assert!(builder.inner.is_empty());",
          "    assert!(mem::size_of::<RcVecBuilder<i32>>() > 0);",
          "    assert!(mem::size_of::<RcVecBuilder<()>>() > 0);",
          "    assert!(cap > 0);",
          "    assert!(builder.inner.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 1024;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.capacity(), 1024);",
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let cap = 1024;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 1024);",
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = usize::MAX;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "}"
        ],
        "oracle": [
          "    let cap = 0;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 0);",
          "    ",
          "    let cap = 10;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 10);",
          "    ",
          "    let cap = 1;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 1);",
          "    ",
          "    let cap = usize::MAX;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), usize::MAX);",
          "    ",
          "    let cap = usize::MAX - 1;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), usize::MAX - 1);"
        ],
        "code": [
          "{",
          "    let cap = usize::MAX;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    let cap = 0;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 0);",
          "    ",
          "    let cap = 10;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 10);",
          "    ",
          "    let cap = 1;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), 1);",
          "    ",
          "    let cap = usize::MAX;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), usize::MAX);",
          "    ",
          "    let cap = usize::MAX - 1;",
          "    let builder = RcVecBuilder::with_capacity(cap);",
          "    assert_eq!(builder.inner.capacity(), usize::MAX - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]