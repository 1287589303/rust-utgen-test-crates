[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"example string\" };",
          "    let result = cursor.parse(\"test\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"example string\" };",
          "    let result = cursor.parse(\"test\");",
          "    assert!(matches!(result, Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"another example\" };",
          "    let result = cursor.parse(\"example\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"another example\" };",
          "    let result = cursor.parse(\"example\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"non-empty\" };",
          "    let result = cursor.parse(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"non-empty\" };",
          "    let result = cursor.parse(\"\");",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = cursor.parse(\"longtag\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = cursor.parse(\"longtag\");",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]