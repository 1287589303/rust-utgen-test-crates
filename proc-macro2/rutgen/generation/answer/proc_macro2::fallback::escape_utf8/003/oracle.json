[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"abcdef\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"abcdef\");",
          "    assert!(output.is_ascii());",
          "    assert!(!output.contains('\\0'));",
          "    assert!(!output.contains(\"'\\\\\"));",
          "    assert!(output.chars().all(|c| c.is_ascii() || c.is_control()));"
        ],
        "code": [
          "{",
          "    let input = \"abcdef\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "    assert_eq!(output, \"abcdef\");",
          "    assert!(output.is_ascii());",
          "    assert!(!output.contains('\\0'));",
          "    assert!(!output.contains(\"'\\\\\"));",
          "    assert!(output.chars().all(|c| c.is_ascii() || c.is_control()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"XYZ\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"XYZ\");",
          "    assert!(output.chars().all(|c| c != '\\0'));",
          "    assert!(!output.contains(r\"\\x00\"));",
          "    assert!(!output.contains(r\"\\0\"));"
        ],
        "code": [
          "{",
          "    let input = \"XYZ\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "    assert_eq!(output, \"XYZ\");",
          "    assert!(output.chars().all(|c| c != '\\0'));",
          "    assert!(!output.contains(r\"\\x00\"));",
          "    assert!(!output.contains(r\"\\0\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"!@#$%^&*()\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "}"
        ],
        "oracle": [
          "    let input = \"!@#$%^&*()\";",
          "    let expected_output = r\"!@#$%^&*()\";",
          "    assert_eq!(output, expected_output);"
        ],
        "code": [
          "{",
          "    let input = \"!@#$%^&*()\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "    let input = \"!@#$%^&*()\";",
          "    let expected_output = r\"!@#$%^&*()\";",
          "    assert_eq!(output, expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"AbCdEfG123\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"AbCdEfG123\");",
          "    assert_eq!(output.contains(r\"\\0\"), false);",
          "    assert_eq!(output.contains(r\"\\x00\"), false);",
          "    assert!(output.chars().all(|c| c != '\\0'));",
          "    assert!(output.contains(\"'\"));",
          "    assert!(output.len() > 0);",
          "    assert_eq!(output.chars().count(), input.chars().count());"
        ],
        "code": [
          "{",
          "    let input = \"AbCdEfG123\";",
          "    let mut output = String::new();",
          "    escape_utf8(input, &mut output);",
          "    assert_eq!(output, \"AbCdEfG123\");",
          "    assert_eq!(output.contains(r\"\\0\"), false);",
          "    assert_eq!(output.contains(r\"\\x00\"), false);",
          "    assert!(output.chars().all(|c| c != '\\0'));",
          "    assert!(output.contains(\"'\"));",
          "    assert!(output.len() > 0);",
          "    assert_eq!(output.chars().count(), input.chars().count());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]