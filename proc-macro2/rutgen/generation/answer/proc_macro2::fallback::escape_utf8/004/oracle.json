[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Hello\\0World0\", &mut repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr, \"Hello\\\\x00World0\");"
        ],
        "code": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Hello\\0World0\", &mut repr);",
          "    assert_eq!(repr, \"Hello\\\\x00World0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Test\\0Example1\\0Another2\", &mut repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr, \"Test\\\\x00Example1\\\\x00Another2\");"
        ],
        "code": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Test\\0Example1\\0Another2\", &mut repr);",
          "    assert_eq!(repr, \"Test\\\\x00Example1\\\\x00Another2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Start\\0End8\", &mut repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr, \"Start\\\\x00End8\");"
        ],
        "code": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Start\\0End8\", &mut repr);",
          "    assert_eq!(repr, \"Start\\\\x00End8\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Data\\0CheckA\", &mut repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(repr, \"Data\\\\0CheckA\");",
          "    assert!(repr.contains(\"\\\\0\"));",
          "    assert!(!repr.contains(\"'\"));",
          "    assert_eq!(repr.len(), 13);"
        ],
        "code": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Data\\0CheckA\", &mut repr);",
          "    assert_eq!(repr, \"Data\\\\0CheckA\");",
          "    assert!(repr.contains(\"\\\\0\"));",
          "    assert!(!repr.contains(\"'\"));",
          "    assert_eq!(repr.len(), 13);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Sample\\0\", &mut repr);",
          "}"
        ],
        "oracle": [
          "    repr == \"\\\\x00\"",
          "    repr != \"'\"",
          "    repr.len() == 7",
          "    repr.contains('\\\\')",
          "    repr.contains(\"Sample\")"
        ],
        "code": [
          "{",
          "    let mut repr = String::new();",
          "    escape_utf8(\"Sample\\0\", &mut repr);",
          "    repr == \"\\\\x00\"",
          "    repr != \"'\"",
          "    repr.len() == 7",
          "    repr.contains('\\\\')",
          "    repr.contains(\"Sample\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]