[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"//! This is a documentation comment.\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"//! This is a documentation comment.\\n\" };",
          "    let expected_result = Ok((Cursor { rest: \"\\n\" }, (\" This is a documentation comment.\", true)));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"//! This is a documentation comment.\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "    let cursor = Cursor { rest: \"//! This is a documentation comment.\\n\" };",
          "    let expected_result = Ok((Cursor { rest: \"\\n\" }, (\" This is a documentation comment.\", true)));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"//!A\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (next_cursor, (content, is_doc)) = result.unwrap();",
          "    assert_eq!(content, \"A\");",
          "    assert!(is_doc);",
          "    assert!(next_cursor.starts_with(\"\\n\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"//!A\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, (content, is_doc)) = result.unwrap();",
          "    assert_eq!(content, \"A\");",
          "    assert!(is_doc);",
          "    assert!(next_cursor.starts_with(\"\\n\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"//!Some more text before newline.\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    let (remaining_cursor, (doc_content, is_block)) = result.unwrap();",
          "    assert_eq!(doc_content, \"Some more text before newline.\");",
          "    assert_eq!(is_block, true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"//!Some more text before newline.\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let (remaining_cursor, (doc_content, is_block)) = result.unwrap();",
          "    assert_eq!(doc_content, \"Some more text before newline.\");",
          "    assert_eq!(is_block, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"//!This comment goes until EOF\" };",
          "    let result = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (remaining_cursor, (comment, is_doc)) = result.unwrap();",
          "    assert_eq!(comment, \"This comment goes until EOF\");",
          "    assert!(is_doc);",
          "    assert!(remaining_cursor.is_empty());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"//!This comment goes until EOF\" };",
          "    let result = doc_comment_contents(cursor);",
          "    assert!(result.is_ok());",
          "    let (remaining_cursor, (comment, is_doc)) = result.unwrap();",
          "    assert_eq!(comment, \"This comment goes until EOF\");",
          "    assert!(is_doc);",
          "    assert!(remaining_cursor.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"//!\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"//!\\n\" };",
          "    let expected = Ok((Cursor { rest: \"\\n\" }, (\"\", true)));",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"//!\\n\" };",
          "    let result = doc_comment_contents(cursor);",
          "    let cursor = Cursor { rest: \"//!\\n\" };",
          "    let expected = Ok((Cursor { rest: \"\\n\" }, (\"\", true)));",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]