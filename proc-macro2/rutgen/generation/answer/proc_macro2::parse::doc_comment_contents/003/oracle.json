[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/*! This is a block comment */\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(doc_comment_contents(cursor), Ok((_, (_, true)))));",
          "    assert_eq!(cursor.rest, \"*/\");",
          "    assert_eq!(doc_comment_contents(cursor).unwrap().1, \" This is a block comment \");",
          "    assert!(doc_comment_contents(cursor).is_ok());"
        ],
        "code": [
          "{",
          "    let input_str = \"/*! This is a block comment */\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    assert!(matches!(doc_comment_contents(cursor), Ok((_, (_, true)))));",
          "    assert_eq!(cursor.rest, \"*/\");",
          "    assert_eq!(doc_comment_contents(cursor).unwrap().1, \" This is a block comment \");",
          "    assert!(doc_comment_contents(cursor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/*! This is a block comment\\n spanning multiple lines */\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(doc_comment_contents(cursor), Ok((Cursor { rest: \"\\n spanning multiple lines */\", off: 0 }, (\" This is a block comment\", true)));"
        ],
        "code": [
          "{",
          "    let input_str = \"/*! This is a block comment\\n spanning multiple lines */\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    assert_eq!(doc_comment_contents(cursor), Ok((Cursor { rest: \"\\n spanning multiple lines */\", off: 0 }, (\" This is a block comment\", true)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/*! Block comment with special chars: @#$%^&*() */\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(doc_comment_contents(Cursor { rest: \"/*! Block comment with special chars: @#$%^&*() */\", off: 0 }), Ok((Cursor { rest: \"\", off: 0 }, \" Block comment with special chars: @#$%^&*() \")));"
        ],
        "code": [
          "{",
          "    let input_str = \"/*! Block comment with special chars: @#$%^&*() */\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    assert_eq!(doc_comment_contents(Cursor { rest: \"/*! Block comment with special chars: @#$%^&*() */\", off: 0 }), Ok((Cursor { rest: \"\", off: 0 }, \" Block comment with special chars: @#$%^&*() \")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]