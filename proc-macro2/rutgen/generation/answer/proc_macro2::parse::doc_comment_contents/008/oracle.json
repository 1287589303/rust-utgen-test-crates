[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/** This is a block comment */ Next line\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"/** This is a block comment */ Next line\";",
          "    let cursor = Cursor { rest: input_str, #[cfg(span_locations)] off: 0 };",
          "    let result = doc_comment_contents(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, comment) = result.unwrap();",
          "    assert_eq!(comment, (\" This is a block comment \", false));",
          "    assert_eq!(new_cursor.rest, \" Next line\");"
        ],
        "code": [
          "{",
          "    let input_str = \"/** This is a block comment */ Next line\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    let input_str = \"/** This is a block comment */ Next line\";",
          "    let cursor = Cursor { rest: input_str, #[cfg(span_locations)] off: 0 };",
          "    let result = doc_comment_contents(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, comment) = result.unwrap();",
          "    assert_eq!(comment, (\" This is a block comment \", false));",
          "    assert_eq!(new_cursor.rest, \" Next line\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/** Valid comment without an asterisk after **/\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(doc_comment_contents(cursor), Ok((Cursor { rest: \"\", off: 0 }, (\" Valid comment without an asterisk after \", false))));"
        ],
        "code": [
          "{",
          "    let input_str = \"/** Valid comment without an asterisk after **/\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    assert_eq!(doc_comment_contents(cursor), Ok((Cursor { rest: \"\", off: 0 }, (\" Valid comment without an asterisk after \", false))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/** Another valid comment */ Some text\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.starts_with(\"//!\"), false);",
          "    assert_eq!(input.starts_with(\"/*!\"), false);",
          "    assert_eq!(input.starts_with(\"///\"), false);",
          "    assert_eq!(input.starts_with(\"/**\"), true);",
          "    assert_eq!(input.rest[3..].starts_with('*'), false);",
          "    assert!(block_comment(input).is_ok());",
          "    assert_eq!(doc_comment_contents(cursor), Ok((cursor.advance(36), (\" Another valid comment \", false))));"
        ],
        "code": [
          "{",
          "    let input_str = \"/** Another valid comment */ Some text\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    assert_eq!(input.starts_with(\"//!\"), false);",
          "    assert_eq!(input.starts_with(\"/*!\"), false);",
          "    assert_eq!(input.starts_with(\"///\"), false);",
          "    assert_eq!(input.starts_with(\"/**\"), true);",
          "    assert_eq!(input.rest[3..].starts_with('*'), false);",
          "    assert!(block_comment(input).is_ok());",
          "    assert_eq!(doc_comment_contents(cursor), Ok((cursor.advance(36), (\" Another valid comment \", false))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/** Yet another comment without trailing asterisk \";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"/** Yet another comment without trailing asterisk \";",
          "    let cursor = Cursor {",
          "    rest: input_str,",
          "    #[cfg(span_locations)]",
          "    off: 0,",
          "    };",
          "    assert!(doc_comment_contents(cursor).is_ok());",
          "    let (remaining, (comment, is_doc)) = doc_comment_contents(cursor).unwrap();",
          "    assert_eq!(comment, \" Yet another comment without trailing asterisk \");",
          "    assert_eq!(is_doc, false);"
        ],
        "code": [
          "{",
          "    let input_str = \"/** Yet another comment without trailing asterisk \";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    let input_str = \"/** Yet another comment without trailing asterisk \";",
          "    let cursor = Cursor {",
          "    rest: input_str,",
          "    #[cfg(span_locations)]",
          "    off: 0,",
          "    };",
          "    assert!(doc_comment_contents(cursor).is_ok());",
          "    let (remaining, (comment, is_doc)) = doc_comment_contents(cursor).unwrap();",
          "    assert_eq!(comment, \" Yet another comment without trailing asterisk \");",
          "    assert_eq!(is_doc, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"/** A comment containing multiple lines\\r\\nthat extends over the line.\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(doc_comment_contents(cursor), Ok((_, (_, false)))));",
          "    ",
          "    let input_str = \"/** A comment containing multiple lines\\r\\nthat extends over the line.\";",
          "    let cursor = Cursor { rest: input_str, off: 0 };",
          "    let result = doc_comment_contents(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let (remaining_input, (comment, is_doc)) = result.unwrap();",
          "    assert_eq!(comment, \" A comment containing multiple lines\\r\\nthat extends over the line.\");",
          "    assert_eq!(is_doc, false);"
        ],
        "code": [
          "{",
          "    let input_str = \"/** A comment containing multiple lines\\r\\nthat extends over the line.\";",
          "    let cursor = Cursor {",
          "        rest: input_str,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = doc_comment_contents(cursor);",
          "    assert!(matches!(doc_comment_contents(cursor), Ok((_, (_, false)))));",
          "    ",
          "    let input_str = \"/** A comment containing multiple lines\\r\\nthat extends over the line.\";",
          "    let cursor = Cursor { rest: input_str, off: 0 };",
          "    let result = doc_comment_contents(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let (remaining_input, (comment, is_doc)) = result.unwrap();",
          "    assert_eq!(comment, \" A comment containing multiple lines\\r\\nthat extends over the line.\");",
          "    assert_eq!(is_doc, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]