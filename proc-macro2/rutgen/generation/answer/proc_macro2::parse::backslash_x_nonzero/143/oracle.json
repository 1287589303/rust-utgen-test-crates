[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = vec![(0, 'a'), (1, '0')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let chars = vec![(0, 'a'), (1, '0')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = vec![(0, 'b'), (1, '0')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let chars = vec![(0, 'b'), (1, '0')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = vec![(0, 'c'), (1, '0')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()))"
        ],
        "code": [
          "{",
          "    let chars = vec![(0, 'c'), (1, '0')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "    assert_eq!(result, Ok(()))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = vec![(0, 'd'), (1, '1')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let chars = vec![(0, 'd'), (1, '1')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = vec![(0, 'e'), (1, '2')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let chars = vec![(0, 'e'), (1, '2')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = vec![(0, 'f'), (1, '3')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let chars = vec![(0, 'f'), (1, '3')].into_iter();",
          "    let result = backslash_x_nonzero(&mut chars);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]