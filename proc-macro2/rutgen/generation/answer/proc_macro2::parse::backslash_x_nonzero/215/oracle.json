[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![(0, 'A'), (1, 'G')].into_iter(); // 'G' is not a valid hex character",
          "    let result = backslash_x_nonzero(&mut input);",
          "}"
        ],
        "oracle": [
          "    let input = vec![(0, 'A'), (1, 'G')].into_iter(); // 'G' is not a valid hex character",
          "    assert_eq!(backslash_x_nonzero(&mut input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, 'A'), (1, 'G')].into_iter(); // 'G' is not a valid hex character",
          "    let result = backslash_x_nonzero(&mut input);",
          "    let input = vec![(0, 'A'), (1, 'G')].into_iter(); // 'G' is not a valid hex character",
          "    assert_eq!(backslash_x_nonzero(&mut input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![(0, 'A'), (1, '0')].into_iter(); // Both are valid hex but both '0'",
          "    let result = backslash_x_nonzero(&mut input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, 'A'), (1, '0')].into_iter(); // Both are valid hex but both '0'",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![(0, 'A'), (1, '0')].into_iter(); // Invalid: first character is valid, second is '0'",
          "    let result = backslash_x_nonzero(&mut input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, 'A'), (1, '0')].into_iter(); // Invalid: first character is valid, second is '0'",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![(0, 'A'), (1, '1')].into_iter(); // Valid hex representation",
          "    let result = backslash_x_nonzero(&mut input);",
          "}"
        ],
        "oracle": [
          "    let input = vec![(0, 'A'), (1, '0')].into_iter(); // First valid, second zero",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'A')].into_iter(); // Both valid hex characters",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Ok(()));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'F')].into_iter(); // First valid, second valid hex character",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Ok(()));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'G')].into_iter(); // Invalid second hex character",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result.is_err(), true);",
          "    ",
          "    let input = vec![(0, 'A'), (1, '0'), (2, '0')].into_iter(); // First valid, second and third zero, non-zero sequence",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'F'), (2, '9')].into_iter(); // Valid hex characters",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, 'A'), (1, '1')].into_iter(); // Valid hex representation",
          "    let result = backslash_x_nonzero(&mut input);",
          "    let input = vec![(0, 'A'), (1, '0')].into_iter(); // First valid, second zero",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'A')].into_iter(); // Both valid hex characters",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Ok(()));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'F')].into_iter(); // First valid, second valid hex character",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Ok(()));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'G')].into_iter(); // Invalid second hex character",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result.is_err(), true);",
          "    ",
          "    let input = vec![(0, 'A'), (1, '0'), (2, '0')].into_iter(); // First valid, second and third zero, non-zero sequence",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input = vec![(0, 'A'), (1, 'F'), (2, '9')].into_iter(); // Valid hex characters",
          "    let result = backslash_x_nonzero(&mut input);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![(0, 'A'), (1, 'F')].into_iter(); // Valid hex representation",
          "    let result = backslash_x_nonzero(&mut input);",
          "}"
        ],
        "oracle": [
          "    Err(Reject)"
        ],
        "code": [
          "{",
          "    let input = vec![(0, 'A'), (1, 'F')].into_iter(); // Valid hex representation",
          "    let result = backslash_x_nonzero(&mut input);",
          "    Err(Reject)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]