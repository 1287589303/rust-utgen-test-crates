[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"//! Example comment\\rNot followed by newline\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "",
          "    let result = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"//! Example comment\\rNot followed by newline\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "",
          "    let result = doc_comment(input, &mut trees);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "",
          "    let result = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "",
          "    let result = doc_comment(input, &mut trees);",
          "    let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "",
          "    let result = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "",
          "    let result = doc_comment(input, &mut trees);",
          "    let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref(), off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]