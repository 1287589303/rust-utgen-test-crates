[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"//! invalid comment\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(doc_comment(Cursor { rest: \"//! invalid comment\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"//! invalid comment\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "    assert_eq!(doc_comment(Cursor { rest: \"//! invalid comment\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"/*! invalid block comment */\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    assert!(doc_comment(Cursor { rest: \"/*! invalid block comment */\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"//! invalid line comment\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"///\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"/* this is a comment \", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"/*! malformed comment *\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"/*! invalid block comment */\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "    assert!(doc_comment(Cursor { rest: \"/*! invalid block comment */\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"//! invalid line comment\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"///\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"/* this is a comment \", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "    assert!(doc_comment(Cursor { rest: \"/*! malformed comment *\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
          "    assert_eq!(trees.inner.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"/// invalid\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"/// invalid\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"/// invalid\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "    let input = Cursor { rest: \"/// invalid\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"/** invalid block comment without closing\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(doc_comment(Cursor { rest: \"/** invalid block comment without closing\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"/** invalid block comment without closing\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "    assert_eq!(doc_comment(Cursor { rest: \"/** invalid block comment without closing\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"//! Comment\\r without newline\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"//! Comment\\r without newline\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"//! Comment\\r without newline\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "    let input = Cursor { rest: \"//! Comment\\r without newline\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let result = doc_comment(input, &mut trees);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(doc_comment(Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 };",
          "    let mut trees = TokenStreamBuilder::new();",
          "    let _ = doc_comment(input, &mut trees);",
          "    assert_eq!(doc_comment(Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]