[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_string = \"/* This is a block comment */ \";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(!result_cursor.is_empty());",
          "    assert_eq!(result_cursor.rest, \" \");",
          "    assert_eq!(result_cursor.rest.len(), 1);",
          "    assert!(result_cursor.starts_with(\" \"));",
          "    assert!(!result_cursor.starts_with(\"/*\"));",
          "    assert_eq!(result_cursor.as_bytes()[0], b' ');",
          "    assert!(!result_cursor.starts_with(\"//\"));",
          "    assert!(!result_cursor.starts_with(\"/**/\"));",
          "    assert!(!result_cursor.starts_with(\"/**\"));",
          "    assert!(!result_cursor.starts_with(\"/*!\"));",
          "    assert!(result_cursor.len() == 1);"
        ],
        "code": [
          "{",
          "    let input_string = \"/* This is a block comment */ \";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "    assert!(!result_cursor.is_empty());",
          "    assert_eq!(result_cursor.rest, \" \");",
          "    assert_eq!(result_cursor.rest.len(), 1);",
          "    assert!(result_cursor.starts_with(\" \"));",
          "    assert!(!result_cursor.starts_with(\"/*\"));",
          "    assert_eq!(result_cursor.as_bytes()[0], b' ');",
          "    assert!(!result_cursor.starts_with(\"//\"));",
          "    assert!(!result_cursor.starts_with(\"/**/\"));",
          "    assert!(!result_cursor.starts_with(\"/**\"));",
          "    assert!(!result_cursor.starts_with(\"/*!\"));",
          "    assert!(result_cursor.len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_string = \"/* Outer comment /* Inner comment */ */ some code\";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(!result_cursor.is_empty());",
          "    assert!(result_cursor.starts_with(\" some code\"));",
          "    assert_eq!(result_cursor.as_bytes()[0], b' ');",
          "    assert!(!result_cursor.starts_with(\"//\"));",
          "    assert!(!result_cursor.starts_with(\"/**/\"));",
          "    assert!(result_cursor.starts_with(\"/*\"));",
          "    assert!(!result_cursor.starts_with(\"/**\"));",
          "    assert!(!result_cursor.starts_with(\"/*!\"));",
          "    assert!(matches!(block_comment(result_cursor), Ok(_)));"
        ],
        "code": [
          "{",
          "    let input_string = \"/* Outer comment /* Inner comment */ */ some code\";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "    assert!(!result_cursor.is_empty());",
          "    assert!(result_cursor.starts_with(\" some code\"));",
          "    assert_eq!(result_cursor.as_bytes()[0], b' ');",
          "    assert!(!result_cursor.starts_with(\"//\"));",
          "    assert!(!result_cursor.starts_with(\"/**/\"));",
          "    assert!(result_cursor.starts_with(\"/*\"));",
          "    assert!(!result_cursor.starts_with(\"/**\"));",
          "    assert!(!result_cursor.starts_with(\"/*!\"));",
          "    assert!(matches!(block_comment(result_cursor), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_string = \"/* Comment here */   \";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result_cursor.rest == \"   \");",
          "    assert!(result_cursor.is_empty() == false);",
          "    assert!(result_cursor.starts_with(\"   \") == true);",
          "    assert!(result_cursor.starts_with(\"//\") == false);",
          "    assert!(result_cursor.starts_with(\"/**/\") == false);",
          "    assert!(result_cursor.starts_with(\"/*\") == false);",
          "    assert!(result_cursor.starts_with(\"/**\") == false);",
          "    assert!(result_cursor.starts_with(\"/*!\") == false);"
        ],
        "code": [
          "{",
          "    let input_string = \"/* Comment here */   \";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "    assert!(result_cursor.rest == \"   \");",
          "    assert!(result_cursor.is_empty() == false);",
          "    assert!(result_cursor.starts_with(\"   \") == true);",
          "    assert!(result_cursor.starts_with(\"//\") == false);",
          "    assert!(result_cursor.starts_with(\"/**/\") == false);",
          "    assert!(result_cursor.starts_with(\"/*\") == false);",
          "    assert!(result_cursor.starts_with(\"/**\") == false);",
          "    assert!(result_cursor.starts_with(\"/*!\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_string = \"/* Valid block comment */ additional text\";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(!result_cursor.is_empty());",
          "    assert!(result_cursor.rest.starts_with(\"additional text\"));",
          "    assert!(result_cursor.rest.len() == input_string.len() - \"/* Valid block comment */ \".len());",
          "    assert!(result_cursor.as_bytes()[0] != b'/');",
          "    assert!(!result_cursor.starts_with(\"//\"));",
          "    assert!(!result_cursor.starts_with(\"/**/\"));",
          "    assert!(result_cursor.starts_with(\"/*\"));",
          "    assert!(!result_cursor.starts_with(\"/**\"));",
          "    assert!(!result_cursor.starts_with(\"/*!\"));",
          "    assert!(block_comment(result_cursor).is_ok());",
          "    assert!(result_cursor.is_empty());"
        ],
        "code": [
          "{",
          "    let input_string = \"/* Valid block comment */ additional text\";",
          "    let input_cursor = Cursor {",
          "        rest: input_string,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result_cursor = skip_whitespace(input_cursor);",
          "    assert!(!result_cursor.is_empty());",
          "    assert!(result_cursor.rest.starts_with(\"additional text\"));",
          "    assert!(result_cursor.rest.len() == input_string.len() - \"/* Valid block comment */ \".len());",
          "    assert!(result_cursor.as_bytes()[0] != b'/');",
          "    assert!(!result_cursor.starts_with(\"//\"));",
          "    assert!(!result_cursor.starts_with(\"/**/\"));",
          "    assert!(result_cursor.starts_with(\"/*\"));",
          "    assert!(!result_cursor.starts_with(\"/**\"));",
          "    assert!(!result_cursor.starts_with(\"/*!\"));",
          "    assert!(block_comment(result_cursor).is_ok());",
          "    assert!(result_cursor.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]