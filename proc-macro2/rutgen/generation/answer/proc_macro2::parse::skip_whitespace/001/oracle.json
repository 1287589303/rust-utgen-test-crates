[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"// This is a line comment\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.rest, \"// This is a line comment\");",
          "    assert!(result.is_empty());",
          "    assert!(result.starts_with(\"// This is a line comment\"));",
          "    assert!(!result.starts_with(\"//!\"));",
          "    assert!(!result.starts_with(\"/**/\"));",
          "    assert!(!result.starts_with(\"/*\"));",
          "    assert!(!result.starts_with(\"// This is a line comment\\n\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"// This is a line comment\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"// This is a line comment\");",
          "    assert!(result.is_empty());",
          "    assert!(result.starts_with(\"// This is a line comment\"));",
          "    assert!(!result.starts_with(\"//!\"));",
          "    assert!(!result.starts_with(\"/**/\"));",
          "    assert!(!result.starts_with(\"/*\"));",
          "    assert!(!result.starts_with(\"// This is a line comment\\n\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* This is a block comment */ some code\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"\");",
          "    assert!(result.is_empty());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* This is a block comment */ some code\" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"\");",
          "    assert!(result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"    // Line comment\\n    /* Block comment */\\n   code\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.starts_with(\"/* Block comment */\\n   code\"));",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.as_bytes()[0], b'c');",
          "    assert!(result.len() > 0);",
          "    assert!(result.chars().next().unwrap().is_whitespace() == false);",
          "    assert!(result.starts_with(\"// Line comment\") == false);",
          "    assert!(result.starts_with(\"/*\") == false);",
          "    assert!(result.starts_with(\"//!\") == false);",
          "    assert!(result.starts_with(\"   code\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"    // Line comment\\n    /* Block comment */\\n   code\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert!(result.starts_with(\"/* Block comment */\\n   code\"));",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.as_bytes()[0], b'c');",
          "    assert!(result.len() > 0);",
          "    assert!(result.chars().next().unwrap().is_whitespace() == false);",
          "    assert!(result.starts_with(\"// Line comment\") == false);",
          "    assert!(result.starts_with(\"/*\") == false);",
          "    assert!(result.starts_with(\"//!\") == false);",
          "    assert!(result.starts_with(\"   code\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"    \\t  \\n\\r \" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"    \\t  \\n\\r \" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"    \\t  \\n\\r \");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"    \\t  \\n\\r \" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"    \\t  \\n\\r \" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"    \\t  \\n\\r \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]