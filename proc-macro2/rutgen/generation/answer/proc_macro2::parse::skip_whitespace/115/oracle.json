[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/ followed by content\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"/**/ followed by content\".into(), off: 0 };",
          "    let expected_result = Cursor { rest: \" followed by content\".into(), off: 0 };",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/ followed by content\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "    let input = Cursor { rest: \"/**/ followed by content\".into(), off: 0 };",
          "    let expected_result = Cursor { rest: \" followed by content\".into(), off: 0 };",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty());",
          "    assert_eq!(result.rest, \"\");",
          "    assert_eq!(result.off, 0);",
          "    assert!(result.starts_with(\"/\"));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.rest, \"\");",
          "    assert_eq!(result.off, 0);",
          "    assert!(result.starts_with(\"/\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/\\nmore content\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"/**/\\nmore content\".into(), #[cfg(span_locations)] off: 0 };",
          "    let result = skip_whitespace(input);",
          "    assert_eq!(result.rest, \"\\nmore content\");",
          "    assert!(!result.is_empty());"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/\\nmore content\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "    let input = Cursor { rest: \"/**/\\nmore content\".into(), #[cfg(span_locations)] off: 0 };",
          "    let result = skip_whitespace(input);",
          "    assert_eq!(result.rest, \"\\nmore content\");",
          "    assert!(!result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/    extra whitespace\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Cursor { rest: \"    extra whitespace\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"/**/    extra whitespace\".into(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = skip_whitespace(input);",
          "    let expected_result = Cursor { rest: \"    extra whitespace\".into(), #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]