[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.starts_with(\"comment\"));",
          "    assert!(!result.starts_with(\"//\"));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.chars().count(), 0);",
          "    assert_eq!(result.rest, \"comment\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert!(result.starts_with(\"comment\"));",
          "    assert!(!result.starts_with(\"//\"));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.chars().count(), 0);",
          "    assert_eq!(result.rest, \"comment\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"   // this is a comment\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"   // this is a comment\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"this is a comment\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"   // this is a comment\" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"   // this is a comment\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"this is a comment\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment with trailing whitespace   \" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"   // comment with trailing whitespace   \" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"   \");",
          "    assert!(result.is_empty());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment with trailing whitespace   \" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"   // comment with trailing whitespace   \" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"   \");",
          "    assert!(result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment followed by code\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"// comment followed by code\"));",
          "    assert_eq!(result.as_bytes()[0], b' ');",
          "    assert_eq!(result.len(), 30);",
          "    assert!(result.chars().next().unwrap().is_whitespace());",
          "    assert!(result.starts_with_fn(|ch| ch.is_ascii()));",
          "    assert!(result.starts_with_char(' '));",
          "    assert!(result.starts_with(\"//\"));",
          "    assert!(!result.starts_with(\"///\"));",
          "    assert!(result.starts_with(\"//!\"));",
          "    assert!(!result.starts_with(\"/**/\"));",
          "    assert!(!result.starts_with(\"/*\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment followed by code\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"// comment followed by code\"));",
          "    assert_eq!(result.as_bytes()[0], b' ');",
          "    assert_eq!(result.len(), 30);",
          "    assert!(result.chars().next().unwrap().is_whitespace());",
          "    assert!(result.starts_with_fn(|ch| ch.is_ascii()));",
          "    assert!(result.starts_with_char(' '));",
          "    assert!(result.starts_with(\"//\"));",
          "    assert!(!result.starts_with(\"///\"));",
          "    assert!(result.starts_with(\"//!\"));",
          "    assert!(!result.starts_with(\"/**/\"));",
          "    assert!(!result.starts_with(\"/*\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment\\n   int x = 0;\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"   // comment\\n   int x = 0;\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"int x = 0;\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"   // comment\\n   int x = 0;\" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"   // comment\\n   int x = 0;\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"int x = 0;\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]