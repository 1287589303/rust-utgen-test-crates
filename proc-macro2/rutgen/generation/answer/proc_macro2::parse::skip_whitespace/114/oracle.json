[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"// comment\\n\" };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    Cursor { rest: \"// comment\\n\" } => skip_whitespace(Cursor { rest: \"\\n\" })"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"// comment\\n\" };",
          "    let result = skip_whitespace(input);",
          "    Cursor { rest: \"// comment\\n\" } => skip_whitespace(Cursor { rest: \"\\n\" })",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"// comment with spaces\\n\" };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    result.rest == \"\\n\"",
          "    result.rest != \"// comment with spaces\\n\"",
          "    result.is_empty() == false",
          "    result.starts_with(\"//\") == false",
          "    result.starts_with(\"//!\") == false",
          "    result.starts_with(\"///\") == false",
          "    result.starts_with('/n') == true",
          "    result.len() == 0",
          "    result.chars().count() == 0"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"// comment with spaces\\n\" };",
          "    let result = skip_whitespace(input);",
          "    result.rest == \"\\n\"",
          "    result.rest != \"// comment with spaces\\n\"",
          "    result.is_empty() == false",
          "    result.starts_with(\"//\") == false",
          "    result.starts_with(\"//!\") == false",
          "    result.starts_with(\"///\") == false",
          "    result.starts_with('/n') == true",
          "    result.len() == 0",
          "    result.chars().count() == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"// comment with no trailing newline\" };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.starts_with(\"// comment with no trailing newline\"));",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.len(), 0);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"// comment with no trailing newline\" };",
          "    let result = skip_whitespace(input);",
          "    assert!(result.starts_with(\"// comment with no trailing newline\"));",
          "    assert!(!result.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"// comment\\n\\n\" };",
          "    let result = skip_whitespace(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty() == true);",
          "    assert!(result.rest == \"\\n\\n\");",
          "    assert!(result.as_bytes()[0] == b'\\n');",
          "    assert!(result.len() == 2);",
          "    assert!(result.starts_with(\"// comment\") == false);",
          "    assert!(result.starts_with(\"\\n\") == true);",
          "    assert!(result.starts_with_char('\\n') == true);",
          "    assert!(result.chars().next() == Some('\\n'));",
          "    assert!(result.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"// comment\\n\\n\" };",
          "    let result = skip_whitespace(input);",
          "    assert!(result.is_empty() == true);",
          "    assert!(result.rest == \"\\n\\n\");",
          "    assert!(result.as_bytes()[0] == b'\\n');",
          "    assert!(result.len() == 2);",
          "    assert!(result.starts_with(\"// comment\") == false);",
          "    assert!(result.starts_with(\"\\n\") == true);",
          "    assert!(result.starts_with_char('\\n') == true);",
          "    assert!(result.chars().next() == Some('\\n'));",
          "    assert!(result.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]