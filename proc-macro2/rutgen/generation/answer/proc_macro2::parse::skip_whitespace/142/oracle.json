[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* unclosed comment\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"/* unclosed comment\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"/* unclosed comment\");",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.starts_with(\"/*\") == true);",
          "    assert!(result.starts_with(\"//\") == false);",
          "    assert!(result.starts_with(\"/**/\") == false);",
          "    assert!(result.starts_with(\"/**\") == false);",
          "    assert!(result.starts_with(\"/*!\") == false);",
          "    assert!(block_comment(result).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* unclosed comment\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"/* unclosed comment\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"/* unclosed comment\");",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.starts_with(\"/*\") == true);",
          "    assert!(result.starts_with(\"//\") == false);",
          "    assert!(result.starts_with(\"/**/\") == false);",
          "    assert!(result.starts_with(\"/**\") == false);",
          "    assert!(result.starts_with(\"/*!\") == false);",
          "    assert!(block_comment(result).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* not terminated\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    cursor.rest == \"/* not terminated\"",
          "    result.is_empty() == false",
          "    result.starts_with(\"/* not terminated\") == true",
          "    result.starts_with(\"//\") == false",
          "    result.starts_with(\"/**/\") == false",
          "    result.starts_with(\"/*\") == true",
          "    result.starts_with(\"/**\") == false",
          "    result.starts_with(\"/*!\") == false",
          "    result == cursor"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* not terminated\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    cursor.rest == \"/* not terminated\"",
          "    result.is_empty() == false",
          "    result.starts_with(\"/* not terminated\") == true",
          "    result.starts_with(\"//\") == false",
          "    result.starts_with(\"/**/\") == false",
          "    result.starts_with(\"/*\") == true",
          "    result.starts_with(\"/**\") == false",
          "    result.starts_with(\"/*!\") == false",
          "    result == cursor",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* still open\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.rest == \"/* still open\");",
          "    assert!(result.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* still open\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    assert!(result.rest == \"/* still open\");",
          "    assert!(result.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* this should fail\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"/* this should fail\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    assert!(result.rest == \"/* this should fail\");",
          "    assert!(result.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* this should fail\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"/* this should fail\", off: 0 };",
          "    let result = skip_whitespace(cursor);",
          "    assert!(result.rest == \"/* this should fail\");",
          "    assert!(result.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]