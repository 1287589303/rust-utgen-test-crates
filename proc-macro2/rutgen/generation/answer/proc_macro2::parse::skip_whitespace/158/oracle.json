[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"// this is a comment\\n remaining text\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.rest, \" remaining text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"//\"));",
          "    assert!(result.starts_with_char('\\n'));",
          "    assert_eq!(result.as_bytes().len(), 19);",
          "    assert!(!result.starts_with(\"/*\"));",
          "    assert!(result.bytes().len() > 0);",
          "    assert!(result.chars().any(|c| c == ' '));",
          "    assert_eq!(result.len(), 19);",
          "    assert!(!result.starts_with(\"//!\"));",
          "    assert!(result.starts_with_fn(|c| c.is_whitespace()));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"// this is a comment\\n remaining text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \" remaining text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"//\"));",
          "    assert!(result.starts_with_char('\\n'));",
          "    assert_eq!(result.as_bytes().len(), 19);",
          "    assert!(!result.starts_with(\"/*\"));",
          "    assert!(result.bytes().len() > 0);",
          "    assert!(result.chars().any(|c| c == ' '));",
          "    assert_eq!(result.len(), 19);",
          "    assert!(!result.starts_with(\"//!\"));",
          "    assert!(result.starts_with_fn(|c| c.is_whitespace()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* this is a block comment */ remaining text\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"/* this is a block comment */ remaining text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \" remaining text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\" remaining text\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* this is a block comment */ remaining text\" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"/* this is a block comment */ remaining text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \" remaining text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\" remaining text\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/    some valid text\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"/    some valid text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"some valid text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"some\"));",
          "    assert!(!result.starts_with(\"//\"));",
          "    assert!(result.starts_with_char('s'));",
          "    assert_eq!(result.as_bytes(), b\"some valid text\");",
          "    assert_eq!(result.len(), \"some valid text\".len());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/    some valid text\" };",
          "    let result = skip_whitespace(cursor);",
          "    let cursor = Cursor { rest: \"/    some valid text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"some valid text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"some\"));",
          "    assert!(!result.starts_with(\"//\"));",
          "    assert!(result.starts_with_char('s'));",
          "    assert_eq!(result.as_bytes(), b\"some valid text\");",
          "    assert_eq!(result.len(), \"some valid text\".len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/**/ some other text\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.rest, \"some other text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"some\"));",
          "    assert!(result.starts_with_char('s'));",
          "    assert_eq!(result.length(), 17);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/**/ some other text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"some other text\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with(\"some\"));",
          "    assert!(result.starts_with_char('s'));",
          "    assert_eq!(result.length(), 17);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"/* comment /* nested */ */ text\" };",
          "    let result = skip_whitespace(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.rest, \"text\");",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.as_bytes(), b\"text\");",
          "    assert!(result.starts_with(\"text\"));",
          "    assert!(!result.starts_with(\"//\"));",
          "    assert!(!result.starts_with(\"/*\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"/* comment /* nested */ */ text\" };",
          "    let result = skip_whitespace(cursor);",
          "    assert_eq!(result.rest, \"text\");",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.as_bytes(), b\"text\");",
          "    assert!(result.starts_with(\"text\"));",
          "    assert!(!result.starts_with(\"//\"));",
          "    assert!(!result.starts_with(\"/*\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]