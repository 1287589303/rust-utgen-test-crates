[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    let _result = builder.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    let result = builder.as_mut();",
          "    assert!(mem::size_of_val(&result) == mem::size_of::<RcVecMut<i32>>());",
          "    assert!(result.inner as *mut _ == builder.inner as *mut _);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    let _result = builder.as_mut();",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    let result = builder.as_mut();",
          "    assert!(mem::size_of_val(&result) == mem::size_of::<RcVecMut<i32>>());",
          "    assert!(result.inner as *mut _ == builder.inner as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(1);",
          "    builder.push(2);",
          "    let _result = builder.as_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.inner as *mut _ == &mut builder.inner as *mut _);",
          "    assert_eq!(_result.inner.len(), builder.inner.len());",
          "    assert_eq!(_result.inner.get(0), builder.inner.get(0));",
          "    assert_eq!(_result.inner.get(1), builder.inner.get(1));",
          "    assert!(_result.inner.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(1);",
          "    builder.push(2);",
          "    let _result = builder.as_mut();",
          "    assert!(_result.inner as *mut _ == &mut builder.inner as *mut _);",
          "    assert_eq!(_result.inner.len(), builder.inner.len());",
          "    assert_eq!(_result.inner.get(0), builder.inner.get(0));",
          "    assert_eq!(_result.inner.get(1), builder.inner.get(1));",
          "    assert!(_result.inner.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(5);",
          "    builder.push(3);",
          "    let _result = builder.as_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.inner, &mut builder.inner);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(5);",
          "    builder.push(3);",
          "    let _result = builder.as_mut();",
          "    assert_eq!(_result.inner, &mut builder.inner);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.extend(vec![4, 5, 6]);",
          "    let _result = builder.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    assert_eq!(builder.inner.len(), 0);",
          "    builder.extend(vec![4, 5, 6]);",
          "    let result = builder.as_mut();",
          "    assert!(result.inner.len() == 3);",
          "    assert_eq!(result.inner[0], 4);",
          "    assert_eq!(result.inner[1], 5);",
          "    assert_eq!(result.inner[2], 6);",
          "    assert!(mem::transmute::<&mut Vec<i32>, &mut Vec<i32>>(&mut builder.inner) == result.inner);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.extend(vec![4, 5, 6]);",
          "    let _result = builder.as_mut();",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    assert_eq!(builder.inner.len(), 0);",
          "    builder.extend(vec![4, 5, 6]);",
          "    let result = builder.as_mut();",
          "    assert!(result.inner.len() == 3);",
          "    assert_eq!(result.inner[0], 4);",
          "    assert_eq!(result.inner[1], 5);",
          "    assert_eq!(result.inner[2], 6);",
          "    assert!(mem::transmute::<&mut Vec<i32>, &mut Vec<i32>>(&mut builder.inner) == result.inner);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(7);",
          "    let _result = builder.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(7);",
          "    let result = builder.as_mut();",
          "    assert!(mem::size_of_val(&result) == mem::size_of::<RcVecMut<i32>>());",
          "    assert!(result.inner == &mut builder.inner);",
          "    assert!(Rc::strong_count(result.inner) == 1);",
          "    assert!(Rc::strong_count(builder.inner) == 1);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(7);",
          "    let _result = builder.as_mut();",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(7);",
          "    let result = builder.as_mut();",
          "    assert!(mem::size_of_val(&result) == mem::size_of::<RcVecMut<i32>>());",
          "    assert!(result.inner == &mut builder.inner);",
          "    assert!(Rc::strong_count(result.inner) == 1);",
          "    assert!(Rc::strong_count(builder.inner) == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]