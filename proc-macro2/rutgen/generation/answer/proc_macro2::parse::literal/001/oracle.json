[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let _ = literal(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-xyz\" }), Err(LexError::call_site()));",
          "    assert_eq!(literal(Cursor { rest: \"1.5.3\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"123abc456\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-123abc\" }), Err(LexError::call_site()));",
          "    assert_eq!(literal(Cursor { rest: \"+++\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"1,234\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"a123\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let _ = literal(cursor);",
          "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-xyz\" }), Err(LexError::call_site()));",
          "    assert_eq!(literal(Cursor { rest: \"1.5.3\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"123abc456\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-123abc\" }), Err(LexError::call_site()));",
          "    assert_eq!(literal(Cursor { rest: \"+++\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"1,234\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"a123\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _ = literal(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let result = literal(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "    let cursor_invalid = Cursor { rest: \"abc\" };",
          "    let result_invalid = literal(cursor_invalid);",
          "    assert!(result_invalid.is_err());",
          "    let cursor_negative = Cursor { rest: \"-12abc\" };",
          "    let result_negative = literal(cursor_negative);",
          "    assert!(result_negative.is_err());",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result_empty = literal(cursor_empty);",
          "    assert!(result_empty.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _ = literal(cursor);",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let result = literal(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "    let cursor_invalid = Cursor { rest: \"abc\" };",
          "    let result_invalid = literal(cursor_invalid);",
          "    assert!(result_invalid.is_err());",
          "    let cursor_negative = Cursor { rest: \"-12abc\" };",
          "    let result_negative = literal(cursor_negative);",
          "    assert!(result_negative.is_err());",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result_empty = literal(cursor_empty);",
          "    assert!(result_empty.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"3.14abc\" };",
          "    let _ = literal(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal(Cursor { rest: \"3.14abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-3.14xyz\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"3.14\" }), Ok((Cursor { rest: \"\" }, Literal::_new(\"3.14\".to_string()))));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"3.14abc\" };",
          "    let _ = literal(cursor);",
          "    assert_eq!(literal(Cursor { rest: \"3.14abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-3.14xyz\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"3.14\" }), Ok((Cursor { rest: \"\" }, Literal::_new(\"3.14\".to_string()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"-3.14abc\" };",
          "    let _ = literal(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"-3.14abc\" };",
          "    assert_eq!(literal(cursor).is_err(), true);",
          "    assert_eq!(literal(cursor), Err(LexError::call_site()));",
          "    let cursor = Cursor { rest: \"invalid_literal\" };",
          "    assert_eq!(literal(cursor).is_err(), true);",
          "    let cursor = Cursor { rest: \"\" };",
          "    assert_eq!(literal(cursor).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"-3.14abc\" };",
          "    let _ = literal(cursor);",
          "    let cursor = Cursor { rest: \"-3.14abc\" };",
          "    assert_eq!(literal(cursor).is_err(), true);",
          "    assert_eq!(literal(cursor), Err(LexError::call_site()));",
          "    let cursor = Cursor { rest: \"invalid_literal\" };",
          "    assert_eq!(literal(cursor).is_err(), true);",
          "    let cursor = Cursor { rest: \"\" };",
          "    assert_eq!(literal(cursor).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0x12\" };",
          "    let _ = literal(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal(Cursor { rest: \"0x12\" }), Err(Reject));",
          "    assert!(literal(Cursor { rest: \"\" }).is_err());",
          "    assert_eq!(literal(Cursor { rest: \"not_a_number\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-\"}), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"1.2.3\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"42abc\" }), Err(Reject));",
          "    assert!(literal(Cursor { rest: \"nan\" }).is_err());",
          "    assert!(literal(Cursor { rest: \"inf\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0x12\" };",
          "    let _ = literal(cursor);",
          "    assert_eq!(literal(Cursor { rest: \"0x12\" }), Err(Reject));",
          "    assert!(literal(Cursor { rest: \"\" }).is_err());",
          "    assert_eq!(literal(Cursor { rest: \"not_a_number\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"-\"}), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"1.2.3\" }), Err(Reject));",
          "    assert_eq!(literal(Cursor { rest: \"42abc\" }), Err(Reject));",
          "    assert!(literal(Cursor { rest: \"nan\" }).is_err());",
          "    assert!(literal(Cursor { rest: \"inf\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]