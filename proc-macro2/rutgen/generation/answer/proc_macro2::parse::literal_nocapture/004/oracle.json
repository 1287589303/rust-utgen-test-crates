[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"b'c' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"'\\\\n' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"3.14 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"42 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"b'c' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"'\\\\n' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"3.14 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"42 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\", off: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"b'valid byte' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"'c' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"3.14 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"42 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"b'valid byte' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"'c' rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"3.14 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    ",
          "    let input = Cursor { rest: \"42 rest\" };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"b'valid byte' rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"'a' rest\" }; assert_eq!(literal_nocapture(input).is_ok(), false);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid string\\\" rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\" rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\" rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"b'valid byte' rest\" }; assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"'a' rest\" }; assert_eq!(literal_nocapture(input).is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"b'c' rest\" };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"string\\\" rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    let input = Cursor { rest: \"b\\\"byte string\\\" rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    let input = Cursor { rest: \"c\\\"cooked\\\" rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    let input = Cursor { rest: \"b'c' rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"b'c' rest\" };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"string\\\" rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    let input = Cursor { rest: \"b\\\"byte string\\\" rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    let input = Cursor { rest: \"c\\\"cooked\\\" rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "    let input = Cursor { rest: \"b'c' rest\" }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \" rest\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]