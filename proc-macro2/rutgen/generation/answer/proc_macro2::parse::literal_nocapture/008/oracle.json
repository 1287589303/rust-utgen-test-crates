[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"123abc\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"123abc\", off: 0 };",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap().rest, \"abc\");",
          "    assert_eq!(_result.unwrap().off, 0);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"123abc\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"123abc\", off: 0 };",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap().rest, \"abc\");",
          "    assert_eq!(_result.unwrap().off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"xyz\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"validstring\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b\\\"validbyte\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"c\\\"validCString\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b'v'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"42\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"xyz\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"validstring\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b\\\"validbyte\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"c\\\"validCString\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b'v'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"42\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"invalid_c_string\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"invalid_c_string\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"invalid_c_string\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"invalid_c_string\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"b'\\\\z'\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"b'\\\\z'\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"b'\\\\z'\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"b'\\\\z'\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"'invalid_character'\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"'invalid_character'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"'invalid_character'\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"'invalid_character'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"not_a_float123\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid_string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid_byte_string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid_c_string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"b'valid_byte'\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"'a'\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"12345\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"not_a_float123\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid_string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid_byte_string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid_c_string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"b'valid_byte'\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"'a'\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    ",
          "    let input = Cursor { rest: \"12345\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"abc123\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"abc\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b\\\"abc\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"abc\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'a'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'\\\\n'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"123\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"abc123\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"abc\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b\\\"abc\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"abc\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'a'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'\\\\n'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"123\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"b\\\"byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"cooked string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"r\\\"raw string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'\\\\x48'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'\\\\u{48}'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"100\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\", off: 0 };",
          "    let _result = literal_nocapture(input);",
          "    let input = Cursor { rest: \"b\\\"byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"cooked string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"r\\\"raw string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'\\\\x48'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'\\\\u{48}'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"100\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]