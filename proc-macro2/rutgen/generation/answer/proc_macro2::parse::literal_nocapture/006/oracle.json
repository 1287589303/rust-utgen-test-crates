[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"invalid c string\\\"\" }; assert_eq!(literal_nocapture(cursor).is_err(), true);",
          "    let cursor = Cursor { rest: \"b\\\"other valid byte string\\\"\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"\\'c\\'\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"3.14\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"42\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"invalid c string\\\"\" }; assert_eq!(literal_nocapture(cursor).is_err(), true);",
          "    let cursor = Cursor { rest: \"b\\\"other valid byte string\\\"\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"\\'c\\'\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"3.14\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"42\" }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"r\\\"raw string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"r\\\"raw string\\\"\" };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    let ok_value = result.unwrap();",
          "    assert_eq!(ok_value.rest, \"\");",
          "    assert!(ok_value.1.is::<String>());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"r\\\"raw string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"r\\\"raw string\\\"\" };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    let ok_value = result.unwrap();",
          "    assert_eq!(ok_value.rest, \"\");",
          "    assert!(ok_value.1.is::<String>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"invalid string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_nocapture(Cursor { rest: \"\\\"valid string\\\"\" }).is_ok(), true);",
          "    assert_eq!(literal_nocapture(Cursor { rest: \"b\\\"valid byte string\\\"\" }).is_ok(), true);",
          "    assert_eq!(literal_nocapture(Cursor { rest: \"c\\\"invalid string\\\"\" }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"invalid string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "    assert_eq!(literal_nocapture(Cursor { rest: \"\\\"valid string\\\"\" }).is_ok(), true);",
          "    assert_eq!(literal_nocapture(Cursor { rest: \"b\\\"valid byte string\\\"\" }).is_ok(), true);",
          "    assert_eq!(literal_nocapture(Cursor { rest: \"c\\\"invalid string\\\"\" }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"byte string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" };",
          "    assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\" };",
          "    assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\" };",
          "    assert_eq!(literal_nocapture(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"byte string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" };",
          "    assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\" };",
          "    assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\" };",
          "    assert_eq!(literal_nocapture(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"br\\\"raw byte string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" }; // should satisfy string precondition",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok()); // expected Ok(ok)",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\" }; // should satisfy byte_string precondition",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok()); // expected Ok(ok)",
          "    ",
          "    let cursor = Cursor { rest: \"r\\\"raw string\\\"\" }; // should not satisfy c_string precondition",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_err()); // expected Err(Reject)"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"br\\\"raw byte string\\\"\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\" }; // should satisfy string precondition",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok()); // expected Ok(ok)",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\" }; // should satisfy byte_string precondition",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok()); // expected Ok(ok)",
          "    ",
          "    let cursor = Cursor { rest: \"r\\\"raw string\\\"\" }; // should not satisfy c_string precondition",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_err()); // expected Err(Reject)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]