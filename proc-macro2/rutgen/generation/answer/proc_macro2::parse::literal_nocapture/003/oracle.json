[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\" and some other text\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor1 = Cursor { rest: \"\\\"valid string\\\" and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor1).is_ok(), true);",
          "    ",
          "    let cursor2 = Cursor { rest: \"b\\\"valid byte string\\\" and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor2).is_ok(), true);",
          "    ",
          "    let cursor3 = Cursor { rest: \"c\\\"valid c string\\\" and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor3).is_ok(), true);",
          "    ",
          "    let cursor4 = Cursor { rest: \"b'valid byte' and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor4).is_ok(), true);",
          "    ",
          "    let cursor5 = Cursor { rest: \"'a' and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor5).is_ok(), true);",
          "    ",
          "    let cursor6 = Cursor { rest: \"3.14 and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor6).is_ok(), false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\" and some other text\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor1 = Cursor { rest: \"\\\"valid string\\\" and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor1).is_ok(), true);",
          "    ",
          "    let cursor2 = Cursor { rest: \"b\\\"valid byte string\\\" and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor2).is_ok(), true);",
          "    ",
          "    let cursor3 = Cursor { rest: \"c\\\"valid c string\\\" and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor3).is_ok(), true);",
          "    ",
          "    let cursor4 = Cursor { rest: \"b'valid byte' and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor4).is_ok(), true);",
          "    ",
          "    let cursor5 = Cursor { rest: \"'a' and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor5).is_ok(), true);",
          "    ",
          "    let cursor6 = Cursor { rest: \"3.14 and some other text\" };",
          "    assert_eq!(literal_nocapture(cursor6).is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\" and more text\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"valid string\"\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: r#\"r\"valid raw string\"\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\" and more text\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid byte'\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'a'\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14\" }; let result = literal_nocapture(cursor); assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\" and more text\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: r#\"\"valid string\"\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: r#\"r\"valid raw string\"\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\" and more text\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid byte'\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'a'\" }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14\" }; let result = literal_nocapture(cursor); assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"valid C string\\\" and additional text\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor1 = Cursor { rest: \"\\\"valid string\\\" extra\" }; assert_eq!(literal_nocapture(cursor1), Ok(/* match captured value */));",
          "    let cursor2 = Cursor { rest: \"b\\\"valid byte string\\\" additional\" }; assert_eq!(literal_nocapture(cursor2), Ok(/* match captured value */));",
          "    let cursor3 = Cursor { rest: \"c\\\"valid C string\\\" more text\" }; assert_eq!(literal_nocapture(cursor3), Ok(/* match captured value */));",
          "    let cursor4 = Cursor { rest: \"b'valid byte' text\" }; assert_eq!(literal_nocapture(cursor4), Ok(/* match captured value */));",
          "    let cursor5 = Cursor { rest: \"'a' additional chars\" }; assert_eq!(literal_nocapture(cursor5), Ok(/* match captured value */));",
          "    let cursor6 = Cursor { rest: \"1234 extra\" }; assert_eq!(literal_nocapture(cursor6), Ok(/* match captured value */));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"valid C string\\\" and additional text\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor1 = Cursor { rest: \"\\\"valid string\\\" extra\" }; assert_eq!(literal_nocapture(cursor1), Ok(/* match captured value */));",
          "    let cursor2 = Cursor { rest: \"b\\\"valid byte string\\\" additional\" }; assert_eq!(literal_nocapture(cursor2), Ok(/* match captured value */));",
          "    let cursor3 = Cursor { rest: \"c\\\"valid C string\\\" more text\" }; assert_eq!(literal_nocapture(cursor3), Ok(/* match captured value */));",
          "    let cursor4 = Cursor { rest: \"b'valid byte' text\" }; assert_eq!(literal_nocapture(cursor4), Ok(/* match captured value */));",
          "    let cursor5 = Cursor { rest: \"'a' additional chars\" }; assert_eq!(literal_nocapture(cursor5), Ok(/* match captured value */));",
          "    let cursor6 = Cursor { rest: \"1234 extra\" }; assert_eq!(literal_nocapture(cursor6), Ok(/* match captured value */));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'c' and other data\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor_string = Cursor { rest: \"\\\"some string\\\" and other data\" }; assert_eq!(literal_nocapture(cursor_string).is_ok(), true);",
          "    let cursor_byte_string = Cursor { rest: \"b\\\"some byte string\\\" and other data\" }; assert_eq!(literal_nocapture(cursor_byte_string).is_ok(), true);",
          "    let cursor_c_string = Cursor { rest: \"c\\\"some C string\\\" and other data\" }; assert_eq!(literal_nocapture(cursor_c_string).is_ok(), true);",
          "    let cursor_byte = Cursor { rest: \"b'c' and other data\" }; assert_eq!(literal_nocapture(cursor_byte).is_ok(), true);",
          "    let cursor_character = Cursor { rest: \"'a' and other data\" }; assert_eq!(literal_nocapture(cursor_character).is_ok(), true);",
          "    let cursor_float_false = Cursor { rest: \"3.14extra data\" }; assert_eq!(literal_nocapture(cursor_float_false).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'c' and other data\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor_string = Cursor { rest: \"\\\"some string\\\" and other data\" }; assert_eq!(literal_nocapture(cursor_string).is_ok(), true);",
          "    let cursor_byte_string = Cursor { rest: \"b\\\"some byte string\\\" and other data\" }; assert_eq!(literal_nocapture(cursor_byte_string).is_ok(), true);",
          "    let cursor_c_string = Cursor { rest: \"c\\\"some C string\\\" and other data\" }; assert_eq!(literal_nocapture(cursor_c_string).is_ok(), true);",
          "    let cursor_byte = Cursor { rest: \"b'c' and other data\" }; assert_eq!(literal_nocapture(cursor_byte).is_ok(), true);",
          "    let cursor_character = Cursor { rest: \"'a' and other data\" }; assert_eq!(literal_nocapture(cursor_character).is_ok(), true);",
          "    let cursor_float_false = Cursor { rest: \"3.14extra data\" }; assert_eq!(literal_nocapture(cursor_float_false).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123.45.67 and more text\" };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor_string = Cursor { rest: \"\\\"Hello, World!\\\"\" }; assert_eq!(literal_nocapture(cursor_string).is_ok(), true);",
          "    let cursor_byte_string = Cursor { rest: \"b\\\"Hello, World!\\\"\" }; assert_eq!(literal_nocapture(cursor_byte_string).is_ok(), true);",
          "    let cursor_c_string = Cursor { rest: \"c\\\"Hello, World!\\\"\" }; assert_eq!(literal_nocapture(cursor_c_string).is_ok(), true);",
          "    let cursor_byte = Cursor { rest: \"b'A'\" }; assert_eq!(literal_nocapture(cursor_byte).is_ok(), true);",
          "    let cursor_character = Cursor { rest: \"'A'\" }; assert_eq!(literal_nocapture(cursor_character).is_ok(), true);",
          "    let cursor_float_false = Cursor { rest: \"123.45.67\" }; assert_eq!(literal_nocapture(cursor_float_false).is_ok(), false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123.45.67 and more text\" };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor_string = Cursor { rest: \"\\\"Hello, World!\\\"\" }; assert_eq!(literal_nocapture(cursor_string).is_ok(), true);",
          "    let cursor_byte_string = Cursor { rest: \"b\\\"Hello, World!\\\"\" }; assert_eq!(literal_nocapture(cursor_byte_string).is_ok(), true);",
          "    let cursor_c_string = Cursor { rest: \"c\\\"Hello, World!\\\"\" }; assert_eq!(literal_nocapture(cursor_c_string).is_ok(), true);",
          "    let cursor_byte = Cursor { rest: \"b'A'\" }; assert_eq!(literal_nocapture(cursor_byte).is_ok(), true);",
          "    let cursor_character = Cursor { rest: \"'A'\" }; assert_eq!(literal_nocapture(cursor_character).is_ok(), true);",
          "    let cursor_float_false = Cursor { rest: \"123.45.67\" }; assert_eq!(literal_nocapture(cursor_float_false).is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]