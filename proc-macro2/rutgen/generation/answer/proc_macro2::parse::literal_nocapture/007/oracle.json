[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"test\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"test\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, 0);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"test\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"test\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"test\\\\n\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"test\\\\n\\\"\", off: 0 };",
          "    assert!(literal_nocapture(input).is_ok());",
          "    let result = literal_nocapture(input).unwrap();",
          "    assert_eq!(result.rest, \"\");",
          "    assert!(result.off >= 0);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"test\\\\n\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"test\\\\n\\\"\", off: 0 };",
          "    assert!(literal_nocapture(input).is_ok());",
          "    let result = literal_nocapture(input).unwrap();",
          "    assert_eq!(result.rest, \"\");",
          "    assert!(result.off >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"test \\\\\\\"quoted\\\\\\\"\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"test \\\\\\\"quoted\\\\\\\"\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"test \\\\\\\"quoted\\\\\\\"\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"test \\\\\\\"quoted\\\\\\\"\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    assert_eq!(literal_nocapture(input).unwrap().rest, \"\\\"\\\"\");",
          "    assert_eq!(literal_nocapture(input).unwrap_err().is_err(), false);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    assert_eq!(literal_nocapture(input).unwrap().rest, \"\\\"\\\"\");",
          "    assert_eq!(literal_nocapture(input).unwrap_err().is_err(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"not a byte string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"\\\"another valid string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"\\\"not a byte string\\\"\", off: 0 };",
          "    assert!(literal_nocapture(input).is_err());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"not a byte string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"\\\"another valid string\\\"\", off: 0 };",
          "    assert_eq!(literal_nocapture(input).is_ok(), true);",
          "    let input = Cursor { rest: \"\\\"not a byte string\\\"\", off: 0 };",
          "    assert!(literal_nocapture(input).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]