[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"invalid\\\" extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid_string\\\"\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid_byte_string\\\"\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid_c_string\\\"\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid_byte'\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'c'\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"42\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"unexpected_token\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"invalid\\\" extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid_string\\\"\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid_byte_string\\\"\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid_c_string\\\"\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid_byte'\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'c'\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"42\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"unexpected_token\", off: 0 }; let result = literal_nocapture(cursor); assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"invalid\\\" extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor1 = Cursor { rest: \"\\\"valid_string\\\"\", off: 0 }; assert!(literal_nocapture(cursor1).is_ok());",
          "    let cursor2 = Cursor { rest: \"b\\\"valid_byte_string\\\"\", off: 0 }; assert!(literal_nocapture(cursor2).is_ok());",
          "    let cursor3 = Cursor { rest: \"c\\\"valid_c_string\\\"\", off: 0 }; assert!(literal_nocapture(cursor3).is_ok());",
          "    let cursor4 = Cursor { rest: \"b'valid_byte'\", off: 0 }; assert!(literal_nocapture(cursor4).is_ok());",
          "    let cursor5 = Cursor { rest: \"'a'\", off: 0 }; assert!(literal_nocapture(cursor5).is_ok());",
          "    let cursor6 = Cursor { rest: \"3.14\", off: 0 }; assert!(literal_nocapture(cursor6).is_ok());",
          "    let cursor7 = Cursor { rest: \"42\", off: 0 }; assert!(literal_nocapture(cursor7).is_ok());",
          "    let cursor8 = Cursor { rest: \"invalid_input\", off: 0 }; assert!(literal_nocapture(cursor8).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"invalid\\\" extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor1 = Cursor { rest: \"\\\"valid_string\\\"\", off: 0 }; assert!(literal_nocapture(cursor1).is_ok());",
          "    let cursor2 = Cursor { rest: \"b\\\"valid_byte_string\\\"\", off: 0 }; assert!(literal_nocapture(cursor2).is_ok());",
          "    let cursor3 = Cursor { rest: \"c\\\"valid_c_string\\\"\", off: 0 }; assert!(literal_nocapture(cursor3).is_ok());",
          "    let cursor4 = Cursor { rest: \"b'valid_byte'\", off: 0 }; assert!(literal_nocapture(cursor4).is_ok());",
          "    let cursor5 = Cursor { rest: \"'a'\", off: 0 }; assert!(literal_nocapture(cursor5).is_ok());",
          "    let cursor6 = Cursor { rest: \"3.14\", off: 0 }; assert!(literal_nocapture(cursor6).is_ok());",
          "    let cursor7 = Cursor { rest: \"42\", off: 0 }; assert!(literal_nocapture(cursor7).is_ok());",
          "    let cursor8 = Cursor { rest: \"invalid_input\", off: 0 }; assert!(literal_nocapture(cursor8).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"invalid\\\" extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"'valid_char'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"42\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"invalid\", off: 0 }; assert_eq!(literal_nocapture(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"invalid\\\" extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"'valid_char'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"42\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"invalid\", off: 0 }; assert_eq!(literal_nocapture(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b'invalid' extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"'c'\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"3.14 extra\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"42 extra\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"invalid input\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b'invalid' extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"'c'\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"3.14 extra\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"42 extra\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"invalid input\", off: 0 }; assert_eq!(literal_nocapture(cursor).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'invalid' extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'a'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"42\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'invalid' extra\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'invalid' extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'a'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"42\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'invalid' extra\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"3.14invalid extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b'\\\\n'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"'\\\\n'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"42\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"3.14invalid extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"b'\\\\n'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"'\\\\n'\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "    let cursor = Cursor { rest: \"42\", off: 0 }; assert_eq!(literal_nocapture(cursor), Ok(cursor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123invalid extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14invalid\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"1234invalid\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123invalid extra\", off: 0 };",
          "    let _ = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"b'valid byte'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"3.14invalid\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"1234invalid\", off: 0 };",
          "    let result = literal_nocapture(cursor);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]