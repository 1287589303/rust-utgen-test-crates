[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"b'valid byte'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"'valid char'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"b'valid byte'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"'valid char'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "    let input = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(/*expected_cursor_value*/));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"r\\\"valid raw string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'valid byte'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"42\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"valid string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"r\\\"valid raw string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"valid c string\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'valid byte'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"42\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"c\\\"valid C string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input_string = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input_string), Ok(input_string));",
          "    let input_byte_string = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input_byte_string), Ok(input_byte_string));",
          "    let input_c_string = Cursor { rest: \"c\\\"valid C string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input_c_string), Ok(input_c_string));",
          "    let input_byte = Cursor { rest: \"b'\\\\x41'\", off: 0 }; assert_eq!(literal_nocapture(input_byte), Ok(input_byte));",
          "    let input_character = Cursor { rest: \"'a'\", off: 0 }; assert_eq!(literal_nocapture(input_character), Ok(input_character));",
          "    let input_float = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(input_float), Ok(input_float));",
          "    let input_int = Cursor { rest: \"42\", off: 0 }; assert_ne!(literal_nocapture(input_int), Ok(input_int));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"c\\\"valid C string\\\"\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input_string = Cursor { rest: \"\\\"valid string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input_string), Ok(input_string));",
          "    let input_byte_string = Cursor { rest: \"b\\\"valid byte string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input_byte_string), Ok(input_byte_string));",
          "    let input_c_string = Cursor { rest: \"c\\\"valid C string\\\"\", off: 0 }; assert_eq!(literal_nocapture(input_c_string), Ok(input_c_string));",
          "    let input_byte = Cursor { rest: \"b'\\\\x41'\", off: 0 }; assert_eq!(literal_nocapture(input_byte), Ok(input_byte));",
          "    let input_character = Cursor { rest: \"'a'\", off: 0 }; assert_eq!(literal_nocapture(input_character), Ok(input_character));",
          "    let input_float = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(input_float), Ok(input_float));",
          "    let input_int = Cursor { rest: \"42\", off: 0 }; assert_ne!(literal_nocapture(input_int), Ok(input_int));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"b'c'\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"hello\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b\\\"hello\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"hello\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"12345\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"b'c'\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"hello\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b\\\"hello\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"c\\\"hello\\\"\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"b'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"12345\", off: 0 };",
          "    let result = literal_nocapture(input);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"hello\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"b\\\"world\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"c\\\"foo\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"b'\\\\n'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"'a'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"'c'\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"hello\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"b\\\"world\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"c\\\"foo\\\"\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"b'\\\\n'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"'a'\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "    let input = Cursor { rest: \"3.14\", off: 0 }; assert_eq!(literal_nocapture(input), Ok(Cursor { rest: \"\", off: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\"Hello\\\"\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b\\\"Hello\\\"\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"c\\\"Hello\\\"\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b'\\\\x41'\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"'\\\\n'\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"3.14\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"123\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_err();"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"3.14\", off: 0 };",
          "    let _ = literal_nocapture(input);",
          "    let input = Cursor { rest: \"\\\"Hello\\\"\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b\\\"Hello\\\"\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"c\\\"Hello\\\"\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"b'\\\\x41'\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"'\\\\n'\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"3.14\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"123\", off: 0 }; let result = literal_nocapture(input); assert!(result.is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]