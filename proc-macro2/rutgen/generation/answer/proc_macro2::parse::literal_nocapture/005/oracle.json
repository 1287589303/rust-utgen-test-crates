[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b\\\"hello\\\"\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b'c'\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b\\\"hello\\\"\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"b'c'\".to_string().as_str() };",
          "    assert_eq!(literal_nocapture(cursor).is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"r\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"b\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'red'\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"'x'\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"3.14\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"42\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"b\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"r\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"b\\\"hello\\\"\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"b'red'\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"'x'\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"3.14\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "    let cursor = Cursor { rest: \"42\".to_string().as_str() }; assert_eq!(literal_nocapture(cursor), Ok(Cursor { rest: \"\", .. }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().rest.is_empty());",
          "    assert!(result.unwrap().rest.contains(\"\\\"hello\\\"\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "    let cursor = Cursor { rest: \"c\\\"hello\\\"\".to_string().as_str() };",
          "    let result = literal_nocapture(cursor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().rest.is_empty());",
          "    assert!(result.unwrap().rest.contains(\"\\\"hello\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]