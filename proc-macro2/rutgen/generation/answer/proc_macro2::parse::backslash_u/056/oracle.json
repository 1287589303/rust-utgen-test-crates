[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::empty());",
          "    let result = backslash_u(chars);",
          "}"
        ],
        "oracle": [
          "    let chars_empty = &mut std::iter::once((0, '{')).chain(std::iter::empty());",
          "    assert_eq!(backslash_u(chars_empty), Err(Reject));",
          "    let chars_invalid = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '}')));",
          "    assert_eq!(backslash_u(chars_invalid), Err(Reject));",
          "    let chars_excess_length = &mut std::iter::once((0, '{')).chain(std::iter::once((1, 'a'))).chain(std::iter::once((2, 'b'))).chain(std::iter::once((3, 'c'))).chain(std::iter::once((4, 'd'))).chain(std::iter::once((5, 'e'))).chain(std::iter::once((6, '}')));",
          "    assert_eq!(backslash_u(chars_excess_length), Err(Reject));",
          "    let chars_malformed = &mut std::iter::once((0, '{')).chain(std::iter::once((1, 'g'))).chain(std::iter::once((2, '}')));",
          "    assert_eq!(backslash_u(chars_malformed), Err(Reject));",
          "    let chars_short = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '1'))).chain(std::iter::once((2, '}')));",
          "    assert_eq!(backslash_u(chars_short), Err(Reject));"
        ],
        "code": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::empty());",
          "    let result = backslash_u(chars);",
          "    let chars_empty = &mut std::iter::once((0, '{')).chain(std::iter::empty());",
          "    assert_eq!(backslash_u(chars_empty), Err(Reject));",
          "    let chars_invalid = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '}')));",
          "    assert_eq!(backslash_u(chars_invalid), Err(Reject));",
          "    let chars_excess_length = &mut std::iter::once((0, '{')).chain(std::iter::once((1, 'a'))).chain(std::iter::once((2, 'b'))).chain(std::iter::once((3, 'c'))).chain(std::iter::once((4, 'd'))).chain(std::iter::once((5, 'e'))).chain(std::iter::once((6, '}')));",
          "    assert_eq!(backslash_u(chars_excess_length), Err(Reject));",
          "    let chars_malformed = &mut std::iter::once((0, '{')).chain(std::iter::once((1, 'g'))).chain(std::iter::once((2, '}')));",
          "    assert_eq!(backslash_u(chars_malformed), Err(Reject));",
          "    let chars_short = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '1'))).chain(std::iter::once((2, '}')));",
          "    assert_eq!(backslash_u(chars_short), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::once((1, 'g')));",
          "    let result = backslash_u(chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::once((1, 'g')));",
          "    let result = backslash_u(chars);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '1')).chain(std::iter::once((2, '2'))));",
          "    let result = backslash_u(chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '1')).chain(std::iter::once((2, '2'))));",
          "    let result = backslash_u(chars);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '1')).chain(std::iter::once((2, '}')).chain(std::iter::once((3, 'z')))));",
          "    let result = backslash_u(chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let chars = &mut std::iter::once((0, '{')).chain(std::iter::once((1, '1')).chain(std::iter::once((2, '}')).chain(std::iter::once((3, 'z')))));",
          "    let result = backslash_u(chars);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]