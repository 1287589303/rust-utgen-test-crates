[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = r#\"r\"valid\\string\\rx\\x00extra\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = r#\"r\"valid\\string\\rx\\x00extra\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input_str = r#\"r\"valid\\string\\rx\\x00extra\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    let input_str = r#\"r\"valid\\string\\rx\\x00extra\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = r#\"r\"valid\\string\\rx\\xa\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = r#\"r\"valid\\string\\rx\\xa\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert!(result.unwrap_err().is::<Reject>());"
        ],
        "code": [
          "{",
          "    let input_str = r#\"r\"valid\\string\\rx\\xa\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    let input_str = r#\"r\"valid\\string\\rx\\xa\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert!(result.unwrap_err().is::<Reject>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = r#\"r\"valid\\string\\x00\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = r#\"r\"valid\\string\\x00\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = r#\"r\"valid\\string\"extra\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\\r\\n\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\\x00\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\\r\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\"\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));"
        ],
        "code": [
          "{",
          "    let input_str = r#\"r\"valid\\string\"extra\"#;",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\\r\\n\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\\x00\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\\r\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    let cursor = Cursor { rest: r#\"r\"valid\\string\"\"# };",
          "    let result = raw_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]