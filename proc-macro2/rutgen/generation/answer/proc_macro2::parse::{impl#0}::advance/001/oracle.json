[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_cursor.rest, \"test\");",
          "    assert_eq!(new_cursor.off, 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(0);",
          "    assert_eq!(new_cursor.rest, \"test\");",
          "    assert_eq!(new_cursor.off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_cursor.rest, \"est\");",
          "    assert_eq!(new_cursor.off, 1);",
          "    assert!(new_cursor.rest.len() == 3);",
          "    assert!(cursor.rest.len() == 4);",
          "    assert!(new_cursor.rest.starts_with(\"e\"));",
          "    assert!(cursor.advance(0).rest == cursor.rest);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(1);",
          "    assert_eq!(new_cursor.rest, \"est\");",
          "    assert_eq!(new_cursor.off, 1);",
          "    assert!(new_cursor.rest.len() == 3);",
          "    assert!(cursor.rest.len() == 4);",
          "    assert!(new_cursor.rest.starts_with(\"e\"));",
          "    assert!(cursor.advance(0).rest == cursor.rest);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert_eq!(new_cursor.off, 4);",
          "    assert!(new_cursor.rest.is_empty());",
          "    assert!(cursor.rest.starts_with(\"test\"));",
          "    assert!(!cursor.is_empty());",
          "    assert_eq!(cursor.len(), 4);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(4);",
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert_eq!(new_cursor.off, 4);",
          "    assert!(new_cursor.rest.is_empty());",
          "    assert!(cursor.rest.starts_with(\"test\"));",
          "    assert!(!cursor.is_empty());",
          "    assert_eq!(cursor.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert_eq!(new_cursor.off, 4);",
          "    assert!(new_cursor.rest.is_empty());",
          "    assert!(!cursor.is_empty());",
          "    assert_eq!(cursor.len(), 4);",
          "    assert_eq!(cursor.as_bytes(), b\"test\");",
          "    assert_eq!(cursor.chars().collect::<Vec<_>>(), vec!['t', 'e', 's', 't']);",
          "    assert_eq!(cursor.char_indices().next().unwrap().0, 0);",
          "    assert_eq!(cursor.starts_with(\"te\"));",
          "    assert!(!cursor.starts_with(\"xyz\"));",
          "    assert!(cursor.starts_with_char('t'));",
          "    assert!(!cursor.starts_with_char('a'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"test\", off: 0 };",
          "    let new_cursor = cursor.advance(5);",
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert_eq!(new_cursor.off, 4);",
          "    assert!(new_cursor.rest.is_empty());",
          "    assert!(!cursor.is_empty());",
          "    assert_eq!(cursor.len(), 4);",
          "    assert_eq!(cursor.as_bytes(), b\"test\");",
          "    assert_eq!(cursor.chars().collect::<Vec<_>>(), vec!['t', 'e', 's', 't']);",
          "    assert_eq!(cursor.char_indices().next().unwrap().0, 0);",
          "    assert_eq!(cursor.starts_with(\"te\"));",
          "    assert!(!cursor.starts_with(\"xyz\"));",
          "    assert!(cursor.starts_with_char('t'));",
          "    assert!(!cursor.starts_with_char('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"sample\", off: 5 };",
          "    let new_cursor = cursor.advance(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_cursor.rest, \"ple\");",
          "    assert_eq!(new_cursor.off, 8);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"sample\", off: 5 };",
          "    let new_cursor = cursor.advance(3);",
          "    assert_eq!(new_cursor.rest, \"ple\");",
          "    assert_eq!(new_cursor.off, 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let new_cursor = cursor.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert_eq!(new_cursor.off, 0);",
          "    ",
          "    let cursor = Cursor { rest: \"abcdef\", off: 0 };",
          "    let new_cursor = cursor.advance(3);",
          "    assert_eq!(new_cursor.rest, \"def\");",
          "    assert_eq!(new_cursor.off, 3);",
          "    ",
          "    let cursor = Cursor { rest: \"abcdef\", off: 5 };",
          "    let new_cursor = cursor.advance(2);",
          "    assert_eq!(new_cursor.rest, \"ef\");",
          "    assert_eq!(new_cursor.off, 5);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let new_cursor = cursor.advance(0);",
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert_eq!(new_cursor.off, 0);",
          "    ",
          "    let cursor = Cursor { rest: \"abcdef\", off: 0 };",
          "    let new_cursor = cursor.advance(3);",
          "    assert_eq!(new_cursor.rest, \"def\");",
          "    assert_eq!(new_cursor.off, 3);",
          "    ",
          "    let cursor = Cursor { rest: \"abcdef\", off: 5 };",
          "    let new_cursor = cursor.advance(2);",
          "    assert_eq!(new_cursor.rest, \"ef\");",
          "    assert_eq!(new_cursor.off, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]