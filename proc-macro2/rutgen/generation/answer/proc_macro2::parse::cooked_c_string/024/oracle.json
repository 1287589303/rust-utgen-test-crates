[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Hello, World!\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"Hello, World!\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Hello, World!\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"Hello, World!\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Say \\\"Hello\\\" to everyone.\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"Say \\\"Hello\\\" to everyone.\"\"# };",
          "    assert_eq!(result, Ok(literal_suffix(Cursor { rest: r#\"Say \\\"Hello\\\" to everyone.\"\"# })));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Say \\\"Hello\\\" to everyone.\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: r#\"\"Say \\\"Hello\\\" to everyone.\"\"# };",
          "    assert_eq!(result, Ok(literal_suffix(Cursor { rest: r#\"Say \\\"Hello\\\" to everyone.\"\"# })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"First Line\\nSecond Line\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"First Line\\nSecond Line\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(new_cursor.rest.is_empty());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"First Line\\nSecond Line\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: r#\"\"First Line\\nSecond Line\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(new_cursor.rest.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"First Line\\r\\nSecond Line\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(literal_suffix(cursor.advance(13))));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"First Line\\r\\nSecond Line\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert_eq!(result, Ok(literal_suffix(cursor.advance(13))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"   Leading spaces\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"   Leading spaces\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    let output = result.unwrap();",
          "    assert_eq!(output.rest, \"   Leading spaces\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"   Leading spaces\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: r#\"\"   Leading spaces\"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    let output = result.unwrap();",
          "    assert_eq!(output.rest, \"   Leading spaces\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Trailing spaces   \"\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"Trailing spaces   \");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Trailing spaces   \"\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"Trailing spaces   \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"This is a backslash: \\\\\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"This is a backslash: \\\\\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, r#\"This is a backslash: \\\\\"#);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"This is a backslash: \\\\\"# };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: r#\"\"This is a backslash: \\\\\"# };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, r#\"This is a backslash: \\\\\"#);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Tab character:\\tNew line:\\nBackslash:\\\\\\\"# };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"Tab character:\\tNew line:\\nBackslash:\\\\\\\"# };",
          "    assert_eq!(result, Ok(literal_suffix(input)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"\"Tab character:\\tNew line:\\nBackslash:\\\\\\\"# };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: r#\"\"Tab character:\\tNew line:\\nBackslash:\\\\\\\"# };",
          "    assert_eq!(result, Ok(literal_suffix(input)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]