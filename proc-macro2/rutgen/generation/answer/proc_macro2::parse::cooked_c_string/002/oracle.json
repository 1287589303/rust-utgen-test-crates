[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor1 = Cursor { rest: \"\\\"valid string\" }; // Input string containing starting quote.",
          "    let result1 = cooked_c_string(cursor1); // Expected: Ok(Cursor)",
          "    assert!(result1.is_ok());",
          "    ",
          "    let cursor2 = Cursor { rest: \"unmatched \\\\c\" }; // Input string containing backslash with no valid escape.",
          "    let result2 = cooked_c_string(cursor2); // Expected: Err(Reject)",
          "    assert!(result2.is_err());",
          "    ",
          "    let cursor3 = Cursor { rest: \"newline\\r\\nanother line\" }; // Input string containing line break sequence.",
          "    let result3 = cooked_c_string(cursor3); // Expected: Ok(Cursor)",
          "    assert!(result3.is_ok());",
          "    ",
          "    let cursor4 = Cursor { rest: \"text with trailing backslash\\\\\" }; // Input string with trailing backslash.",
          "    let result4 = cooked_c_string(cursor4); // Expected: Err(Reject)",
          "    assert!(result4.is_err());",
          "    ",
          "    let cursor5 = Cursor { rest: \"control char \\0\" }; // Input string containing null character.",
          "    let result5 = cooked_c_string(cursor5); // Expected: Err(Reject)",
          "    assert!(result5.is_err());",
          "    ",
          "    let cursor6 = Cursor { rest: \"mixed escape \\\\n \\\\t end\" }; // Input string containing mixed escape sequences.",
          "    let result6 = cooked_c_string(cursor6); // Expected: Ok(Cursor)",
          "    assert!(result6.is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = cooked_c_string(cursor);",
          "    let cursor1 = Cursor { rest: \"\\\"valid string\" }; // Input string containing starting quote.",
          "    let result1 = cooked_c_string(cursor1); // Expected: Ok(Cursor)",
          "    assert!(result1.is_ok());",
          "    ",
          "    let cursor2 = Cursor { rest: \"unmatched \\\\c\" }; // Input string containing backslash with no valid escape.",
          "    let result2 = cooked_c_string(cursor2); // Expected: Err(Reject)",
          "    assert!(result2.is_err());",
          "    ",
          "    let cursor3 = Cursor { rest: \"newline\\r\\nanother line\" }; // Input string containing line break sequence.",
          "    let result3 = cooked_c_string(cursor3); // Expected: Ok(Cursor)",
          "    assert!(result3.is_ok());",
          "    ",
          "    let cursor4 = Cursor { rest: \"text with trailing backslash\\\\\" }; // Input string with trailing backslash.",
          "    let result4 = cooked_c_string(cursor4); // Expected: Err(Reject)",
          "    assert!(result4.is_err());",
          "    ",
          "    let cursor5 = Cursor { rest: \"control char \\0\" }; // Input string containing null character.",
          "    let result5 = cooked_c_string(cursor5); // Expected: Err(Reject)",
          "    assert!(result5.is_err());",
          "    ",
          "    let cursor6 = Cursor { rest: \"mixed escape \\\\n \\\\t end\" }; // Input string containing mixed escape sequences.",
          "    let result6 = cooked_c_string(cursor6); // Expected: Ok(Cursor)",
          "    assert!(result6.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\" };",
          "    let _ = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"\\\\x\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"\\\\u0000\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"hello\\r\\n\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"\\\\\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\0\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"some text\\\\\\r\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\" };",
          "    let _ = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"hello\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"\\\\x\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"\\\\u0000\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"hello\\r\\n\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_ok(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"\\\\\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\0\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "    ",
          "    let cursor = Cursor { rest: \"\\\"some text\\\\\\r\\\"\" }; let result = cooked_c_string(cursor); assert_eq!(result.is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\\\xFF\" };",
          "    let _ = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let cursor_with_quotes = Cursor { rest: \"\\\"hello\\\"\" };",
          "    let cursor_with_escape_sequence = Cursor { rest: \"\\\\nexample\" };",
          "    let cursor_with_carriage_return = Cursor { rest: \"\\r\\n\" };",
          "    let cursor_with_zero_char = Cursor { rest: \"\\0\" };",
          "    let cursor_with_other_char = Cursor { rest: \"a\" };",
          "    let cursor_with_mixed_escape = Cursor { rest: \"\\\\xFF\" };",
          "    let cursor_with_backslash = Cursor { rest: \"\\\\\" };",
          "    assert_eq!(cooked_c_string(cursor_with_quotes), Ok(literal_suffix(Cursor { rest: \"\" })));",
          "    assert_eq!(cooked_c_string(cursor_with_escape_sequence), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_carriage_return), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_zero_char), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_other_char), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_mixed_escape), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_backslash), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\\\xFF\" };",
          "    let _ = cooked_c_string(cursor);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let cursor_with_quotes = Cursor { rest: \"\\\"hello\\\"\" };",
          "    let cursor_with_escape_sequence = Cursor { rest: \"\\\\nexample\" };",
          "    let cursor_with_carriage_return = Cursor { rest: \"\\r\\n\" };",
          "    let cursor_with_zero_char = Cursor { rest: \"\\0\" };",
          "    let cursor_with_other_char = Cursor { rest: \"a\" };",
          "    let cursor_with_mixed_escape = Cursor { rest: \"\\\\xFF\" };",
          "    let cursor_with_backslash = Cursor { rest: \"\\\\\" };",
          "    assert_eq!(cooked_c_string(cursor_with_quotes), Ok(literal_suffix(Cursor { rest: \"\" })));",
          "    assert_eq!(cooked_c_string(cursor_with_escape_sequence), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_carriage_return), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_zero_char), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_other_char), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_mixed_escape), Err(Reject));",
          "    assert_eq!(cooked_c_string(cursor_with_backslash), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\nhello\" };",
          "    let _ = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"string\" }; assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(cursor.advance(8))));",
          "    let cursor = Cursor { rest: \"\\\\n\" }; assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(cursor.advance(2))));",
          "    let cursor = Cursor { rest: \"\\\\xFF\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\0\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"hello\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\u003F\" }; assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(cursor.advance(8))));",
          "    let cursor = Cursor { rest: \"\\\\\\r\\n\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\some\\\\\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\r\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\nhello\" };",
          "    let _ = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"string\" }; assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(cursor.advance(8))));",
          "    let cursor = Cursor { rest: \"\\\\n\" }; assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(cursor.advance(2))));",
          "    let cursor = Cursor { rest: \"\\\\xFF\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\0\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"hello\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\u003F\" }; assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(cursor.advance(8))));",
          "    let cursor = Cursor { rest: \"\\\\\\r\\n\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\some\\\\\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\r\" }; assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"some text\\0\" };",
          "    let _ = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"some text\\0\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"some text\\0\" };",
          "    let _ = cooked_c_string(cursor);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"some text\\0\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let _ = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"hello world\\\"\" };",
          "    assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(Cursor { rest: \"hello world\" })));",
          "    let cursor = Cursor { rest: \"\\r\\nhello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\nhello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(Cursor { rest: \"hello world\" })));",
          "    let cursor = Cursor { rest: \"\\\\x20hello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(Cursor { rest: \"hello world\" })));",
          "    let cursor = Cursor { rest: \"\\0hello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"some string with backslash\\\\hello\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"text \\rother text\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"just normal text\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let _ = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"hello world\\\"\" };",
          "    assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(Cursor { rest: \"hello world\" })));",
          "    let cursor = Cursor { rest: \"\\r\\nhello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\nhello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(Cursor { rest: \"hello world\" })));",
          "    let cursor = Cursor { rest: \"\\\\x20hello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Ok(literal_suffix(Cursor { rest: \"hello world\" })));",
          "    let cursor = Cursor { rest: \"\\0hello world\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"some string with backslash\\\\hello\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"text \\rother text\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"just normal text\" };",
          "    assert_eq!(cooked_c_string(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]