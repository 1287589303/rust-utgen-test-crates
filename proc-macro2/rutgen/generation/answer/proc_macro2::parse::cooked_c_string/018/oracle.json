[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\nAdditional text\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\nAdditional text\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\xExtra\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\\\\\\\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\nExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\rExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\tExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\'Extra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\\\\"Extra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\uExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\x\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\n\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\r\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\t\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\'\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\\\\"\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\u\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\xExtra\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\\\\\\\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\nExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\rExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\tExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\'Extra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\\\\"Extra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\uExtra\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\x\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\n\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\r\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\t\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\'\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\\\\"\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "    let cursor = Cursor { rest: \"\\\\u\" }; let _result = cooked_c_string(cursor); assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\r\\nMore text\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\r\\nMore text\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\nNot valid escape\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\nNot valid escape\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\\"Quote here\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\\\\\"Quote here\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]