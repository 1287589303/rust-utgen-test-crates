[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n \" };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\r\\n \" };",
          "    let result = cooked_c_string(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n \" };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\r\\n \" };",
          "    let result = cooked_c_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\r\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    let cursor = Cursor { rest: \"\\r\\r\\n\" };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n    \" };",
          "    let result = cooked_c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.is_ok() == false);",
          "    assert!(result.unwrap_err() == Reject);",
          "    assert!(result.unwrap_or_else(|_| Reject).is_err());",
          "    assert!(result.map(|_| ()).is_err());",
          "    assert!(result.expect(ERROR).is_err());",
          "    assert!(result.as_ref().is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\r\\n    \" };",
          "    let result = cooked_c_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.is_ok() == false);",
          "    assert!(result.unwrap_err() == Reject);",
          "    assert!(result.unwrap_or_else(|_| Reject).is_err());",
          "    assert!(result.map(|_| ()).is_err());",
          "    assert!(result.expect(ERROR).is_err());",
          "    assert!(result.as_ref().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]