[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\z\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\z\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\xG\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\u{XYZ}\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\ntext\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\rtext\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\z\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\z\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\xG\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\u{XYZ}\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\ntext\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "    let input = Cursor { rest: \"\\\\rtext\", off: 0 };",
          "    assert!(matches!(cooked_c_string(input), Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u0061\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\\\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\\\\\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\'\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\"\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u0061\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\\\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\\\\\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\'\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\"\\n\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u1234\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\n\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\r\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u1234\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\n\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\r\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\xg\\\\y\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\xg\\\\y\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\xg\\\\y\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\xg\\\\y\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]