[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u0000\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u0000\", off: 0 };",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u0000\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\u0000\", off: 0 };",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\uXYZ\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\uXYZ\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\uXYZ\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\uXYZ\", off: 0 };",
          "    assert_eq!(cooked_c_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\\\n\", off: 0 };",
          "    let _result = cooked_c_string(input);",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\\\n\", off: 0 };",
          "    let _result = cooked_c_string(input);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\r\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\\\r\", off: 0 };",
          "    let _result = cooked_c_string(input);",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\r\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\\\r\", off: 0 };",
          "    let _result = cooked_c_string(input);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u\", off: 0 };",
          "    let _result = cooked_c_string(input);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u\", ",
          "        off: 0,",
          "    };",
          "    let _result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\u\", off: 0 };",
          "    let _result = cooked_c_string(input);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]