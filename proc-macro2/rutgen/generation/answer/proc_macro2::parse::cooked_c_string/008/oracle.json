[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x7f\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x7f\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\".as_ref() }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u{00}\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\".as_ref() }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\n\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u{001}\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".as_ref() }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x00\".as_ref() }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x7f\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x7f\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\".as_ref() }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u{00}\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\".as_ref() }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\n\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u{001}\".as_ref() }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".as_ref() }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x00\".as_ref() }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\\\n\".into(), off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\'\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\uFEFF\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x41\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\x0\".into(), off: 0 }), Err(Reject)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\xFE\".into(), off: 0 }), Err(Reject)));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\n\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\\\n\".into(), off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\'\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\uFEFF\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x41\".into(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\x0\".into(), off: 0 }), Err(Reject)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\xFE\".into(), off: 0 }), Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\r\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".as_str(), off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\n\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u1234\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\xFF\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\n\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\r\\n\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\n \".as_str(), off: 0 }), Ok(Cursor { rest: \" \", off: 2 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\r \".as_str(), off: 0 }), Ok(Cursor { rest: \" \", off: 2 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\r\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".as_str(), off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\n\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u1234\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\xFF\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\n\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\r\\n\".as_str(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\n \".as_str(), off: 0 }), Ok(Cursor { rest: \" \", off: 2 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\r \".as_str(), off: 0 }), Ok(Cursor { rest: \" \", off: 2 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\n\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\".as_ref(), off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u{1F600}\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\'\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\n\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\".as_ref(), off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u{1F600}\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\\\\\\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\'\".as_ref(), off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\t\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\t\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_err());",
          "    ",
          "    let input = Cursor { rest: \"\\\\n\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\u0000\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_err());",
          "    ",
          "    let input = Cursor { rest: \"\\\\xFF\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\r\\\\n\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_err());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\\\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\'\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\"\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\x12\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\u1234\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\t\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\t\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_err());",
          "    ",
          "    let input = Cursor { rest: \"\\\\n\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\u0000\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_err());",
          "    ",
          "    let input = Cursor { rest: \"\\\\xFF\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\r\\\\n\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_err());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\\\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\'\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\"\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\x12\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\u1234\".to_string().as_str(), off: 0 };",
          "    assert!(cooked_c_string(input).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\'\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\n\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\'\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\\\\"\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\x20\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\u{1234}\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\'\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\n\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\t\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\\\\\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\'\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\\\\"\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\x20\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "    let input = Cursor { rest: \"\\\\u{1234}\".to_string().as_str(), #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Ok(literal_suffix(Cursor { rest: \"\".as_ref(), #[cfg(span_locations)] off: 0 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\\"\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".as_str(), off: 0 }).is_ok());",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\xFF\".as_str(), off: 0 }), Err(Reject)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\u{0}\".as_str(), off: 0 }), Err(Reject)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\n\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\r\\\\n\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\t\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\\\\\\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\'\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".as_str(), off: 0 }).unwrap().rest == \"\");"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\\\\"\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".as_str(), off: 0 }).is_ok());",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\xFF\".as_str(), off: 0 }), Err(Reject)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\u{0}\".as_str(), off: 0 }), Err(Reject)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\n\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\r\\\\n\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\t\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\\\\\\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(matches!(cooked_c_string(Cursor { rest: \"\\\\'\".as_str(), off: 0 }), Ok(_)));",
          "    assert!(cooked_c_string(Cursor { rest: \"\\\\\\\"\".as_str(), off: 0 }).unwrap().rest == \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]