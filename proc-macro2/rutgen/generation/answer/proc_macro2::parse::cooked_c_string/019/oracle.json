[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x\".as_ref(), off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\x\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x\".as_ref(), off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"\\\\x\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"\\\\n\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\t\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\\\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\'\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\"\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\u\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\u\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"\\\\x\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"\\\\n\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\t\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\\\\\\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\\'\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    ",
          "    let input = Cursor { rest: \"\\\"\".to_string().as_str(), #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\n\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_?.rest, \"\\\\n\");",
          "    assert!(_?.is_empty());",
          "    assert_err!(_);",
          "    assert!(_?.char_indices().next().is_some());",
          "    assert_eq!(_?.char_indices().next().unwrap().1, '\\\\');",
          "    assert!(matches!(backslash_x_nonzero(&mut chars), Err(_)));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\n\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(_?.rest, \"\\\\n\");",
          "    assert!(_?.is_empty());",
          "    assert_err!(_);",
          "    assert!(_?.char_indices().next().is_some());",
          "    assert_eq!(_?.char_indices().next().unwrap().1, '\\\\');",
          "    assert!(matches!(backslash_x_nonzero(&mut chars), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\t\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\", off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x\", off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u\", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"\\\\t\".to_string().as_str(),",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\t\", off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\x\", off: 0 }), Err(Reject));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\n\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\r\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(cooked_c_string(Cursor { rest: \"\\\\u\", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]