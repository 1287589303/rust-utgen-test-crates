[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert_eq!(result.unwrap(), Cursor { rest: \"\\n\" });"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert_eq!(result.unwrap(), Cursor { rest: \"\\n\" });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\xAF\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u00\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u1234\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\uABCD\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\n\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u0\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\xAF\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u00\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u1234\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\uABCD\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\n\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u0\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\r\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\r\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\r\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\r\" };",
          "    let result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\r\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"\\\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"\\\\r\\n\" };",
          "    let result = cooked_c_string(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\t\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert!(input.rest == \"\\\\t\");",
          "    assert!(result.is_err());",
          "    assert!(result.is_ok() == false);",
          "    assert!(backslash_u(&mut chars).is_err());",
          "    assert!(chars.next().is_some());",
          "    assert!(chars.clone().next().unwrap().1 == '\\\\');"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\t\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert!(input.rest == \"\\\\t\");",
          "    assert!(result.is_err());",
          "    assert!(result.is_ok() == false);",
          "    assert!(backslash_u(&mut chars).is_err());",
          "    assert!(chars.next().is_some());",
          "    assert!(chars.clone().next().unwrap().1 == '\\\\');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\'\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\\\\x\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\n\" }; assert_eq!(cooked_c_string(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"\\\\u123\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\"; }; assert_eq!(cooked_c_string(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"\\\\t\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\" }; assert_eq!(cooked_c_string(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"\\\\u00\" }; assert_eq!(cooked_c_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\'\" };",
          "    let result = cooked_c_string(input);",
          "    let input = Cursor { rest: \"\\\\x\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\n\" }; assert_eq!(cooked_c_string(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"\\\\u123\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\r\"; }; assert_eq!(cooked_c_string(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"\\\\t\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "    let input = Cursor { rest: \"\\\\\" }; assert_eq!(cooked_c_string(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"\\\\u00\" }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\\\\\" };",
          "    let result = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u00\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u000Z\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\nonexistent\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\\\\\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u00\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\u000Z\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\x\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "    let input = Cursor { rest: \"\\\\nonexistent\" };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]