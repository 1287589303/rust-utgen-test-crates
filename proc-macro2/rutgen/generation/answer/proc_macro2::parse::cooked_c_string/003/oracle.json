[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Hello\\0World\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"Hello\\0World\", #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Hello\\0World\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"Hello\\0World\", #[cfg(span_locations)] off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Line1\\0Line2\\0Line3\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"Line1\\0Line2\\0Line3\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Line1\\0Line2\\0Line3\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"Line1\\0Line2\\0Line3\", off: 0 };",
          "    let result = cooked_c_string(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Sample text with a null character\\0\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"Sample text with a null character\\0\", #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Sample text with a null character\\0\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_c_string(input);",
          "    let input = Cursor { rest: \"Sample text with a null character\\0\", #[cfg(span_locations)] off: 0 }; assert_eq!(cooked_c_string(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]