[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x1aA_\" };",
          "    let _ = int(input);",
          "}"
        ],
        "oracle": [
          "    assert!(int(Cursor { rest: \"0x1aA_\" }).is_ok());",
          "    let result = int(Cursor { rest: \"0x1aA_\" }).unwrap();",
          "    assert!(result.rest == \"\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with_char('_'));",
          "    assert!(result.len() == 0);",
          "    assert!(result.chars().next().is_none());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x1aA_\" };",
          "    let _ = int(input);",
          "    assert!(int(Cursor { rest: \"0x1aA_\" }).is_ok());",
          "    let result = int(Cursor { rest: \"0x1aA_\" }).unwrap();",
          "    assert!(result.rest == \"\");",
          "    assert!(!result.is_empty());",
          "    assert!(result.starts_with_char('_'));",
          "    assert!(result.len() == 0);",
          "    assert!(result.chars().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0o57a\" };",
          "    let _ = int(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0o57a\" };",
          "    let result = int(input);",
          "    assert!(result.is_ok());",
          "    let cursor = result.unwrap();",
          "    assert!(cursor.starts_with(\"a\"));",
          "    assert!(cursor.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0o57a\" };",
          "    let _ = int(input);",
          "    let input = Cursor { rest: \"0o57a\" };",
          "    let result = int(input);",
          "    assert!(result.is_ok());",
          "    let cursor = result.unwrap();",
          "    assert!(cursor.starts_with(\"a\"));",
          "    assert!(cursor.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0b1010_\" };",
          "    let _ = int(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0b1010_\" };",
          "    let result = int(input);",
          "    assert!(result.is_ok());",
          "    let rest = result.unwrap();",
          "    assert!(rest.starts_with(\"0b1010_\"));",
          "    let ch = rest.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(rest);",
          "    assert!(ident_result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0b1010_\" };",
          "    let _ = int(input);",
          "    let input = Cursor { rest: \"0b1010_\" };",
          "    let result = int(input);",
          "    assert!(result.is_ok());",
          "    let rest = result.unwrap();",
          "    assert!(rest.starts_with(\"0b1010_\"));",
          "    let ch = rest.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(rest);",
          "    assert!(ident_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1234_\" };",
          "    let _ = int(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"1234_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"0b1010_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"0o755_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"0x1A3F_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"42_abc\" }), Ok(Cursor { rest: \"abc\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1234_\" };",
          "    let _ = int(input);",
          "    assert_eq!(int(Cursor { rest: \"1234_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"0b1010_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"0o755_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"0x1A3F_\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(int(Cursor { rest: \"42_abc\" }), Ok(Cursor { rest: \"abc\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0xF1n\" };",
          "    let _ = int(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0xF1n\" };",
          "    let result = int(input);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.chars().next().is_none());",
          "    let ch = next_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(next_cursor);",
          "    assert!(ident_result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0xF1n\" };",
          "    let _ = int(input);",
          "    let input = Cursor { rest: \"0xF1n\" };",
          "    let result = int(input);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.chars().next().is_none());",
          "    let ch = next_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(next_cursor);",
          "    assert!(ident_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]