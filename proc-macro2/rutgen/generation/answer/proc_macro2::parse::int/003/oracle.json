[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0x1A _\" };",
          "    let result = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert!(result.as_ref().unwrap().0.rest == \" _\");",
          "    assert!(result.as_ref().unwrap().0.len() == 3);",
          "    assert!(result.as_ref().unwrap().0.starts_with(\" _\"));",
          "    assert!(result.as_ref().unwrap().1 == \"1A\");",
          "    assert!(result.as_ref().unwrap().0.starts_with_char(' '));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0x1A _\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.as_ref().unwrap().0.rest == \" _\");",
          "    assert!(result.as_ref().unwrap().0.len() == 3);",
          "    assert!(result.as_ref().unwrap().0.starts_with(\" _\"));",
          "    assert!(result.as_ref().unwrap().1 == \"1A\");",
          "    assert!(result.as_ref().unwrap().0.starts_with_char(' '));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0x1A\" };",
          "    let result = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"A\");",
          "    assert!(next_cursor.starts_with(\"A\"));",
          "    assert!(next_cursor.chars().next().is_some());",
          "    assert!(next_cursor.chars().next().unwrap().is_alphabetic());",
          "    assert!(is_ident_start(next_cursor.chars().next().unwrap()));",
          "    assert!(ident_not_raw(next_cursor).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0x1A\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"A\");",
          "    assert!(next_cursor.starts_with(\"A\"));",
          "    assert!(next_cursor.chars().next().is_some());",
          "    assert!(next_cursor.chars().next().unwrap().is_alphabetic());",
          "    assert!(is_ident_start(next_cursor.chars().next().unwrap()));",
          "    assert!(ident_not_raw(next_cursor).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0o77 _\" };",
          "    let result = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0o77 _\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(next_cursor.starts_with(\" _\"));",
          "    assert!(next_cursor.is_empty() == false);",
          "    let ch = next_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(next_cursor);",
          "    assert!(ident_result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0o77 _\" };",
          "    let result = int(cursor);",
          "    let cursor = Cursor { rest: \"0o77 _\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(next_cursor.starts_with(\" _\"));",
          "    assert!(next_cursor.is_empty() == false);",
          "    let ch = next_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(next_cursor);",
          "    assert!(ident_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0o77\" };",
          "    let result = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0o77\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    let ch = next_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(next_cursor);",
          "    assert!(ident_result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0o77\" };",
          "    let result = int(cursor);",
          "    let cursor = Cursor { rest: \"0o77\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    let ch = next_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    let ident_result = ident_not_raw(next_cursor);",
          "    assert!(ident_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0b1010 _\" };",
          "    let result = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0b1010 _\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(next_cursor.starts_with(\" _\"));",
          "    assert!(next_cursor.is_empty() == false);",
          "    assert!(next_cursor.chars().next().unwrap() == ' ');",
          "    assert!(next_cursor.rest == \" _\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0b1010 _\" };",
          "    let result = int(cursor);",
          "    let cursor = Cursor { rest: \"0b1010 _\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(next_cursor.starts_with(\" _\"));",
          "    assert!(next_cursor.is_empty() == false);",
          "    assert!(next_cursor.chars().next().unwrap() == ' ');",
          "    assert!(next_cursor.rest == \" _\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0b1010\" };",
          "    let result = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0b1010\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert_eq!(new_cursor.rest, \"0\");",
          "    let ch = new_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    assert!(ident_not_raw(new_cursor).is_err());",
          "    assert!(word_break(new_cursor).is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0b1010\" };",
          "    let result = int(cursor);",
          "    let cursor = Cursor { rest: \"0b1010\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert_eq!(new_cursor.rest, \"0\");",
          "    let ch = new_cursor.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    assert!(ident_not_raw(new_cursor).is_err());",
          "    assert!(word_break(new_cursor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]