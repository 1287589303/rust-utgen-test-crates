[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123a\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"123a\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"123a\" }).unwrap().rest, \"a\");",
          "    assert_eq!(int(Cursor { rest: \"123a\" }).unwrap().rest, \"a\"); // Valid digit followed by non-ident character",
          "    assert_eq!(int(Cursor { rest: \"456b\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"456b\" }).unwrap().rest, \"b\");",
          "    assert_eq!(int(Cursor { rest: \"789c\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"789c\" }).unwrap().rest, \"c\");",
          "    assert_eq!(int(Cursor { rest: \"0x123d\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"0x123d\" }).unwrap().rest, \"d\");",
          "    assert_eq!(int(Cursor { rest: \"0o77e\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"0o77e\" }).unwrap().rest, \"e\");",
          "    assert_eq!(int(Cursor { rest: \"0b110f\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"0b110f\" }).unwrap().rest, \"f\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123a\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"123a\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"123a\" }).unwrap().rest, \"a\");",
          "    assert_eq!(int(Cursor { rest: \"123a\" }).unwrap().rest, \"a\"); // Valid digit followed by non-ident character",
          "    assert_eq!(int(Cursor { rest: \"456b\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"456b\" }).unwrap().rest, \"b\");",
          "    assert_eq!(int(Cursor { rest: \"789c\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"789c\" }).unwrap().rest, \"c\");",
          "    assert_eq!(int(Cursor { rest: \"0x123d\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"0x123d\" }).unwrap().rest, \"d\");",
          "    assert_eq!(int(Cursor { rest: \"0o77e\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"0o77e\" }).unwrap().rest, \"e\");",
          "    assert_eq!(int(Cursor { rest: \"0b110f\" }).is_ok(), true);",
          "    assert_eq!(int(Cursor { rest: \"0b110f\" }).unwrap().rest, \"f\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0x1A!\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0x1A!\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest_cursor, _) = result.unwrap();",
          "    assert!(rest_cursor.starts_with(\"!\"));",
          "    assert_eq!(rest_cursor.rest, \"!\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0x1A!\" };",
          "    let _ = int(cursor);",
          "    let cursor = Cursor { rest: \"0x1A!\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest_cursor, _) = result.unwrap();",
          "    assert!(rest_cursor.starts_with(\"!\"));",
          "    assert_eq!(rest_cursor.rest, \"!\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0o755%\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"0o755%\" }), Ok(Cursor { rest: \"%\" }));",
          "    assert_eq!(int(Cursor { rest: \"0x1A2B@\" }), Ok(Cursor { rest: \"@\" }));",
          "    assert_eq!(int(Cursor { rest: \"1234$\" }), Ok(Cursor { rest: \"$\" }));",
          "    assert_eq!(int(Cursor { rest: \"0b10101*\" }), Ok(Cursor { rest: \"*\" }));",
          "    assert_eq!(int(Cursor { rest: \"0o7_5_5!\" }), Ok(Cursor { rest: \"!\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0o755%\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"0o755%\" }), Ok(Cursor { rest: \"%\" }));",
          "    assert_eq!(int(Cursor { rest: \"0x1A2B@\" }), Ok(Cursor { rest: \"@\" }));",
          "    assert_eq!(int(Cursor { rest: \"1234$\" }), Ok(Cursor { rest: \"$\" }));",
          "    assert_eq!(int(Cursor { rest: \"0b10101*\" }), Ok(Cursor { rest: \"*\" }));",
          "    assert_eq!(int(Cursor { rest: \"0o7_5_5!\" }), Ok(Cursor { rest: \"!\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0b101#\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0b101#\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(new_cursor.starts_with(\"#\"));",
          "    assert!(new_cursor.is_empty() == false);",
          "    assert!(new_cursor.chars().next().unwrap() == '#');"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0b101#\" };",
          "    let _ = int(cursor);",
          "    let cursor = Cursor { rest: \"0b101#\" };",
          "    let result = int(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(new_cursor.starts_with(\"#\"));",
          "    assert!(new_cursor.is_empty() == false);",
          "    assert!(new_cursor.chars().next().unwrap() == '#');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"123abc\" }), Ok(Cursor { rest: \"abc\" }));",
          "    assert_eq!(int(Cursor { rest: \"456def\" }), Ok(Cursor { rest: \"def\" }));",
          "    assert!(int(Cursor { rest: \"789ghi\" }).is_ok());",
          "    assert!(int(Cursor { rest: \"0x1a\" }).is_ok());",
          "    assert!(int(Cursor { rest: \"0b101\" }).is_ok());",
          "    assert!(int(Cursor { rest: \"0o77\" }).is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"123abc\" }), Ok(Cursor { rest: \"abc\" }));",
          "    assert_eq!(int(Cursor { rest: \"456def\" }), Ok(Cursor { rest: \"def\" }));",
          "    assert!(int(Cursor { rest: \"789ghi\" }).is_ok());",
          "    assert!(int(Cursor { rest: \"0x1a\" }).is_ok());",
          "    assert!(int(Cursor { rest: \"0b101\" }).is_ok());",
          "    assert!(int(Cursor { rest: \"0o77\" }).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]