[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result_empty = int(cursor_empty);",
          "    assert!(result_empty.is_err());",
          "    assert_eq!(result_empty.unwrap_err(), Reject);",
          "    let cursor_invalid_digit = Cursor { rest: \"abc\" };",
          "    let result_invalid_digit = int(cursor_invalid_digit);",
          "    assert!(result_invalid_digit.is_err());",
          "    assert_eq!(result_invalid_digit.unwrap_err(), Reject);",
          "    let cursor_invalid_base16 = Cursor { rest: \"0xGH\" };",
          "    let result_invalid_base16 = int(cursor_invalid_base16);",
          "    assert!(result_invalid_base16.is_err());",
          "    assert_eq!(result_invalid_base16.unwrap_err(), Reject);",
          "    let cursor_invalid_base8 = Cursor { rest: \"0o89\" };",
          "    let result_invalid_base8 = int(cursor_invalid_base8);",
          "    assert!(result_invalid_base8.is_err());",
          "    assert_eq!(result_invalid_base8.unwrap_err(), Reject);",
          "    let cursor_invalid_base2 = Cursor { rest: \"0b12\" };",
          "    let result_invalid_base2 = int(cursor_invalid_base2);",
          "    assert!(result_invalid_base2.is_err());",
          "    assert_eq!(result_invalid_base2.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = int(cursor);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result_empty = int(cursor_empty);",
          "    assert!(result_empty.is_err());",
          "    assert_eq!(result_empty.unwrap_err(), Reject);",
          "    let cursor_invalid_digit = Cursor { rest: \"abc\" };",
          "    let result_invalid_digit = int(cursor_invalid_digit);",
          "    assert!(result_invalid_digit.is_err());",
          "    assert_eq!(result_invalid_digit.unwrap_err(), Reject);",
          "    let cursor_invalid_base16 = Cursor { rest: \"0xGH\" };",
          "    let result_invalid_base16 = int(cursor_invalid_base16);",
          "    assert!(result_invalid_base16.is_err());",
          "    assert_eq!(result_invalid_base16.unwrap_err(), Reject);",
          "    let cursor_invalid_base8 = Cursor { rest: \"0o89\" };",
          "    let result_invalid_base8 = int(cursor_invalid_base8);",
          "    assert!(result_invalid_base8.is_err());",
          "    assert_eq!(result_invalid_base8.unwrap_err(), Reject);",
          "    let cursor_invalid_base2 = Cursor { rest: \"0b12\" };",
          "    let result_invalid_base2 = int(cursor_invalid_base2);",
          "    assert!(result_invalid_base2.is_err());",
          "    assert_eq!(result_invalid_base2.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0xg\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o9\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b2a\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0_0\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"12_34\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0abcdef\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123456789abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o8\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b3_2\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"__abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"abc123\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0xg\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o9\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b2a\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0_0\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"12_34\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0abcdef\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123456789abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o8\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b3_2\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"__abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"abc123\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"xyz123\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(int(Cursor { rest: \"xyz123\" }).is_err());",
          "    assert_eq!(int(Cursor { rest: \"xyz123\" }).unwrap_err(), Reject);",
          "    assert!(int(Cursor { rest: \"0xG\" }).is_err());",
          "    assert!(int(Cursor { rest: \"0o8\" }).is_err());",
          "    assert_eq!(int(Cursor { rest: \"0b2x\" }).unwrap_err(), Reject);",
          "    assert!(int(Cursor { rest: \"abc\" }).is_err());",
          "    assert!(int(Cursor { rest: \"someone@\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"xyz123\" };",
          "    let _ = int(cursor);",
          "    assert!(int(Cursor { rest: \"xyz123\" }).is_err());",
          "    assert_eq!(int(Cursor { rest: \"xyz123\" }).unwrap_err(), Reject);",
          "    assert!(int(Cursor { rest: \"0xG\" }).is_err());",
          "    assert!(int(Cursor { rest: \"0o8\" }).is_err());",
          "    assert_eq!(int(Cursor { rest: \"0b2x\" }).unwrap_err(), Reject);",
          "    assert!(int(Cursor { rest: \"abc\" }).is_err());",
          "    assert!(int(Cursor { rest: \"someone@\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0abc\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"0abc\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0abc\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"0abc\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0xgh\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(int(Cursor { rest: \"0xgh\" }), Err(Reject)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0xgh\" };",
          "    let _ = int(cursor);",
          "    assert!(matches!(int(Cursor { rest: \"0xgh\" }), Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0o89\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"0o89\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0x1G\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b12\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o_\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0xFFG\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b10_2\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0o89\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"0o89\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0x1G\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b12\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o_\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0xFFG\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b10_2\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0b12\" };",
          "    let _ = int(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(int(Cursor { rest: \"0b12\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0xG\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o9\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123_\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b0_0\" }), Ok(Cursor { rest: \"_0\" }));",
          "    assert_eq!(int(Cursor { rest: \"0x1F\" }), Ok(Cursor { rest: \"F\" }));",
          "    assert_eq!(int(Cursor { rest: \"0o7\" }), Ok(Cursor { rest: \"\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0b12\" };",
          "    let _ = int(cursor);",
          "    assert_eq!(int(Cursor { rest: \"0b12\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0xG\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0o9\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"123_\" }), Err(Reject));",
          "    assert_eq!(int(Cursor { rest: \"0b0_0\" }), Ok(Cursor { rest: \"_0\" }));",
          "    assert_eq!(int(Cursor { rest: \"0x1F\" }), Ok(Cursor { rest: \"F\" }));",
          "    assert_eq!(int(Cursor { rest: \"0o7\" }), Ok(Cursor { rest: \"\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]