[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"a\".repeat(256) + \"\\rnon_new_line_character\";",
          "    let cursor = Cursor { rest: &input_str };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"a\".repeat(256) + \"\\rnon_new_line_character\";",
          "    let cursor = Cursor { rest: &input_str };",
          "    let result = raw_byte_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"a\".repeat(256) + \"\\rnot_a_new_line\\ranother_character\";",
          "    let cursor = Cursor { rest: &input_str };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    assert!(input_str.len() > 255);"
        ],
        "code": [
          "{",
          "    let input_str = \"a\".repeat(256) + \"\\rnot_a_new_line\\ranother_character\";",
          "    let cursor = Cursor { rest: &input_str };",
          "    let result = raw_byte_string(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    assert!(input_str.len() > 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"a\".repeat(256) + \"\\r\";",
          "    let cursor = Cursor { rest: &input_str };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"a\".repeat(256) + \"\\r\";",
          "    let cursor = Cursor { rest: &input_str };",
          "    let result = raw_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]