[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"#some raw string with a return character \\r and some other text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"#some raw string with a return character \\r and some other text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"#some raw string with a return character \\r and some other text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "    let cursor = Cursor { rest: \"#some raw string with a return character \\r and some other text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"#another raw string before the delimiter \\rnon-newline text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(cursor.rest.contains(\"\\r\"));",
          "    assert!(cursor.rest.contains(\"\\\"\"));",
          "    assert!(cursor.rest.contains(\"#\"));",
          "    assert!(cursor.rest.len() > 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"#another raw string before the delimiter \\rnon-newline text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(cursor.rest.contains(\"\\r\"));",
          "    assert!(cursor.rest.contains(\"\\\"\"));",
          "    assert!(cursor.rest.contains(\"#\"));",
          "    assert!(cursor.rest.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"#yet another raw string with return \\rθ and then text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"#yet another raw string with return \\rθ and then text\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"#short \\rstring that does not end with newline\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"#short \\rstring that does not end with newline\\\"\".into() };",
          "    let result = raw_byte_string(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]