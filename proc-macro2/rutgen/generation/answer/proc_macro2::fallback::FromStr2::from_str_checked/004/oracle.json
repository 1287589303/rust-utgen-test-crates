[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"invalid_token_stream_1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"invalid_token_stream_1\");",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"malformed@token#stream\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), imp::LexError::CompilerPanic);"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"malformed@token#stream\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), imp::LexError::CompilerPanic);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"unexpected_characters_*!&%\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"unexpected_characters_*!&%\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"\");",
          "}"
        ],
        "oracle": [
          "    let result = Dummy::from_str_checked(\"\");",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"\");",
          "    let result = Dummy::from_str_checked(\"\");",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"1234567890\"); ",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    ",
          "    impl FromStr2 for Dummy {",
          "        fn valid(src: &str) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let result = Dummy::from_str_checked(\"1234567890\"); ",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(imp::LexError::CompilerPanic));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]