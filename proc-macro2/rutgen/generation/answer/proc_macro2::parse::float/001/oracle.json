[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float(Cursor { rest: \"\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1a\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1a\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1.\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1.a\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.a\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1e\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1e\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1e+\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1e+\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1e-9\" }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.0e10\" }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.0e+10\" }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.0e-10\" }).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = float(cursor);",
          "    assert_eq!(float(Cursor { rest: \"\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1a\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1a\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1.\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1.a\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.a\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1e\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1e\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1e+\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"1e+\" }).unwrap_err(), Reject);",
          "    assert_eq!(float(Cursor { rest: \"1e-9\" }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.0e10\" }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.0e+10\" }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.0e-10\" }).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().is_empty(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().len(), 0);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().starts_with(ERROR), false);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().starts_with_char('a'), false);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_empty(), false);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).chars().count(), 3);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).chars().collect::<String>(), \"abc\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let _ = float(cursor);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().is_empty(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().len(), 0);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().starts_with(ERROR), false);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).unwrap_err().starts_with_char('a'), false);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_empty(), false);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).chars().count(), 3);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).chars().collect::<String>(), \"abc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"12a\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float(Cursor { rest: \"12a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12e3a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12.\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12_34\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12.34a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12e34a\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"12a\" };",
          "    let _ = float(cursor);",
          "    assert_eq!(float(Cursor { rest: \"12a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12e3a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12.\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12_34\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12.34a\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"12e34a\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0.abc\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float(Cursor { rest: \"0.abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123.45e\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123.45e+\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123.45e-1.5\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123..45\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"12a3\" }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0.abc\" };",
          "    let _ = float(cursor);",
          "    assert_eq!(float(Cursor { rest: \"0.abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"abc\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123.45e\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123.45e+\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123.45e-1.5\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"123..45\" }).is_err(), true);",
          "    assert_eq!(float(Cursor { rest: \"12a3\" }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"__\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float(Cursor { rest: \"__\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2.3\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"...\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc123\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1_2_3\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1e2e3\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"__\" };",
          "    let _ = float(cursor);",
          "    assert_eq!(float(Cursor { rest: \"__\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2.3\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"...\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc123\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1_2_3\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"123abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1e2e3\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1.23e\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(float(Cursor { rest: \"1.23e\" }).is_err());",
          "    assert!(float(Cursor { rest: \"123e\" }).is_err());",
          "    assert!(float(Cursor { rest: \"0.1e+\" }).is_err());",
          "    assert!(float(Cursor { rest: \"3.14e-2\" }).is_ok());",
          "    assert!(float(Cursor { rest: \"3..14\" }).is_err());",
          "    assert!(float(Cursor { rest: \"abc\" }).is_err());",
          "    assert!(float(Cursor { rest: \"1.2.3\" }).is_err());",
          "    assert!(float(Cursor { rest: \"1_.0\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1.23e\" };",
          "    let _ = float(cursor);",
          "    assert!(float(Cursor { rest: \"1.23e\" }).is_err());",
          "    assert!(float(Cursor { rest: \"123e\" }).is_err());",
          "    assert!(float(Cursor { rest: \"0.1e+\" }).is_err());",
          "    assert!(float(Cursor { rest: \"3.14e-2\" }).is_ok());",
          "    assert!(float(Cursor { rest: \"3..14\" }).is_err());",
          "    assert!(float(Cursor { rest: \"abc\" }).is_err());",
          "    assert!(float(Cursor { rest: \"1.2.3\" }).is_err());",
          "    assert!(float(Cursor { rest: \"1_.0\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"2.5abc\" };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float(Cursor { rest: \"2.5abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \".5\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"2.5e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.0e+\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.0e2abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e-3abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float(Cursor { rest: \"1.2e+3.4\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e-3.4\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"2.5abc\" };",
          "    let _ = float(cursor);",
          "    assert_eq!(float(Cursor { rest: \"2.5abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \".5\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"2.5e\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.0e+\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.0e2abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e-3abc\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float(Cursor { rest: \"1.2e+3.4\" }), Err(Reject));",
          "    assert_eq!(float(Cursor { rest: \"1.2e-3.4\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]