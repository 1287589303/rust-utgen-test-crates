[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"3.14a\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"3.14a\", off: 0 };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    assert!(next_cursor.starts_with(\"a\"));",
          "    assert!(next_cursor.starts_with_char('a'));",
          "    assert!(is_ident_start(next_cursor.chars().next().unwrap()));",
          "    assert!(ident_not_raw(next_cursor).is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"3.14a\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "    let cursor = Cursor { rest: \"3.14a\", off: 0 };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    assert!(next_cursor.starts_with(\"a\"));",
          "    assert!(next_cursor.starts_with_char('a'));",
          "    assert!(is_ident_start(next_cursor.chars().next().unwrap()));",
          "    assert!(ident_not_raw(next_cursor).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"2.718zeta\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"2.718zeta\", off: 0 }).is_ok(), true);",
          "    assert!(Cursor { rest: \"2.718zeta\", off: 0 }.chars().next().is_some());",
          "    assert!(is_ident_start('z'));",
          "    assert_eq!(ident_not_raw(Cursor { rest: \"2.718zeta\", off: 0 }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"2.718zeta\", off: 0 }).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"2.718zeta\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"2.718zeta\", off: 0 }).is_ok(), true);",
          "    assert!(Cursor { rest: \"2.718zeta\", off: 0 }.chars().next().is_some());",
          "    assert!(is_ident_start('z'));",
          "    assert_eq!(ident_not_raw(Cursor { rest: \"2.718zeta\", off: 0 }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"2.718zeta\", off: 0 }).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"1.5e10b\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"1.5e10b\", off: 0 }).is_ok(), true);",
          "    assert_eq!(Cursor { rest: \"1.5e10b\", off: 0 }.chars().next().is_some(), true);",
          "    assert_eq!(is_ident_start(Cursor { rest: \"1.5e10b\", off: 0 }.chars().next().unwrap()), true);",
          "    assert_eq!(ident_not_raw(Cursor { rest: \"1.5e10b\", off: 0 }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.5e10b\", off: 0 }).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"1.5e10b\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"1.5e10b\", off: 0 }).is_ok(), true);",
          "    assert_eq!(Cursor { rest: \"1.5e10b\", off: 0 }.chars().next().is_some(), true);",
          "    assert_eq!(is_ident_start(Cursor { rest: \"1.5e10b\", off: 0 }.chars().next().unwrap()), true);",
          "    assert_eq!(ident_not_raw(Cursor { rest: \"1.5e10b\", off: 0 }).is_ok(), true);",
          "    assert_eq!(float(Cursor { rest: \"1.5e10b\", off: 0 }).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"7.22e-5x\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"7.22e-5x\", off: 0 }).is_ok(), true);",
          "    assert!(Cursor { rest: \"7.22e-5x\", off: 0 }.chars().next().is_some());",
          "    assert!(is_ident_start('x'));",
          "    assert_eq!(ident_not_raw(Cursor { rest: \"7.22e-5x\", off: 0 }).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"7.22e-5x\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"7.22e-5x\", off: 0 }).is_ok(), true);",
          "    assert!(Cursor { rest: \"7.22e-5x\", off: 0 }.chars().next().is_some());",
          "    assert!(is_ident_start('x'));",
          "    assert_eq!(ident_not_raw(Cursor { rest: \"7.22e-5x\", off: 0 }).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"4.0_abc\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"4.0_abc\", off: 0 }).is_ok(), true);",
          "    let rest = float_digits(Cursor { rest: \"4.0_abc\", off: 0 }).unwrap();",
          "    assert!(!rest.is_empty());",
          "    let ch = rest.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    assert_eq!(ident_not_raw(rest).is_ok(), true);",
          "    assert_eq!(word_break(rest).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"4.0_abc\",",
          "        off: 0,",
          "    };",
          "    let _ = float(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"4.0_abc\", off: 0 }).is_ok(), true);",
          "    let rest = float_digits(Cursor { rest: \"4.0_abc\", off: 0 }).unwrap();",
          "    assert!(!rest.is_empty());",
          "    let ch = rest.chars().next().unwrap();",
          "    assert!(is_ident_start(ch));",
          "    assert_eq!(ident_not_raw(rest).is_ok(), true);",
          "    assert_eq!(word_break(rest).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]