[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"3.14a\" };",
          "    let result = float(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"3.14a\" };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    assert!(next_cursor.starts_with_char('a'));",
          "    assert!(next_cursor.chars().next().unwrap() == 'a');",
          "    assert!(next_cursor.rest == \"a\");",
          "    assert!(next_cursor.len() == 1);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"3.14a\" };",
          "    let result = float(cursor);",
          "    let cursor = Cursor { rest: \"3.14a\" };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    assert!(next_cursor.starts_with_char('a'));",
          "    assert!(next_cursor.chars().next().unwrap() == 'a');",
          "    assert!(next_cursor.rest == \"a\");",
          "    assert!(next_cursor.len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"2.7e10\" };",
          "    let result = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"e10\");",
          "    assert_eq!(next_cursor.len(), 3);",
          "    assert!(!next_cursor.starts_with('1'));",
          "    assert!(!next_cursor.starts_with('2'));",
          "    assert!(!next_cursor.starts_with('3'));",
          "    assert!(!next_cursor.starts_with('4'));",
          "    assert!(!next_cursor.starts_with('5'));",
          "    assert!(!next_cursor.starts_with('6'));",
          "    assert!(!next_cursor.starts_with('7'));",
          "    assert!(!next_cursor.starts_with('8'));",
          "    assert!(!next_cursor.starts_with('9'));",
          "    assert!(!next_cursor.starts_with('0'));",
          "    assert!(next_cursor.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"2.7e10\" };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"e10\");",
          "    assert_eq!(next_cursor.len(), 3);",
          "    assert!(!next_cursor.starts_with('1'));",
          "    assert!(!next_cursor.starts_with('2'));",
          "    assert!(!next_cursor.starts_with('3'));",
          "    assert!(!next_cursor.starts_with('4'));",
          "    assert!(!next_cursor.starts_with('5'));",
          "    assert!(!next_cursor.starts_with('6'));",
          "    assert!(!next_cursor.starts_with('7'));",
          "    assert!(!next_cursor.starts_with('8'));",
          "    assert!(!next_cursor.starts_with('9'));",
          "    assert!(!next_cursor.starts_with('0'));",
          "    assert!(next_cursor.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1_000.25b\" };",
          "    let result = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"b\");",
          "    assert_eq!(next_cursor.len(), 0);",
          "    assert!(next_cursor.starts_with(\"b\") == true);",
          "    assert!(next_cursor.chars().next().is_none());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1_000.25b\" };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"b\");",
          "    assert_eq!(next_cursor.len(), 0);",
          "    assert!(next_cursor.starts_with(\"b\") == true);",
          "    assert!(next_cursor.chars().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0.99!\" };",
          "    let result = float(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap().rest, \"0.99!\");",
          "    assert_eq!(result.unwrap().len(), 1);",
          "    assert_eq!(result.unwrap().chars().next(), Some('!'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0.99!\" };",
          "    let result = float(cursor);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap().rest, \"0.99!\");",
          "    assert_eq!(result.unwrap().len(), 1);",
          "    assert_eq!(result.unwrap().chars().next(), Some('!'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"5.0e+3x\" };",
          "    let result = float(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"5.0e+3x\" };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest_cursor, _) = result.unwrap();",
          "    assert_eq!(rest_cursor.rest, \"x\");",
          "    assert!(rest_cursor.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"5.0e+3x\" };",
          "    let result = float(cursor);",
          "    let cursor = Cursor { rest: \"5.0e+3x\" };",
          "    let result = float(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest_cursor, _) = result.unwrap();",
          "    assert_eq!(rest_cursor.rest, \"x\");",
          "    assert!(rest_cursor.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]