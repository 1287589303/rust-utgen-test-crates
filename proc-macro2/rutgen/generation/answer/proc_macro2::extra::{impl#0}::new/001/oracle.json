[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyDelimiter;",
          "    struct DummyTokenStream;",
          "",
          "    let group = imp::Group::new(DummyDelimiter, DummyTokenStream);",
          "    let delim_span = DelimSpan::new(&group);",
          "}"
        ],
        "oracle": [
          "    let group = imp::Group::Fallback(fallback::Group::new(DummyDelimiter, DummyTokenStream));",
          "    let delim_span = DelimSpan::new(&group);",
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Fallback(group.span()));",
          "    assert_eq!(delim_span._marker, MARKER);"
        ],
        "code": [
          "{",
          "    struct DummyDelimiter;",
          "    struct DummyTokenStream;",
          "",
          "    let group = imp::Group::new(DummyDelimiter, DummyTokenStream);",
          "    let delim_span = DelimSpan::new(&group);",
          "    let group = imp::Group::Fallback(fallback::Group::new(DummyDelimiter, DummyTokenStream));",
          "    let delim_span = DelimSpan::new(&group);",
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Fallback(group.span()));",
          "    assert_eq!(delim_span._marker, MARKER);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomDelimiter;",
          "    struct CustomTokenStream;",
          "",
          "    let group = imp::Group::new(CustomDelimiter, CustomTokenStream);",
          "    let delim_span = DelimSpan::new(&group);",
          "}"
        ],
        "oracle": [
          "    let group = imp::Group::new(CustomDelimiter, CustomTokenStream);",
          "    let delim_span = DelimSpan::new(&group);",
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Fallback(group.span()));",
          "    assert_eq!(delim_span._marker, MARKER);"
        ],
        "code": [
          "{",
          "    struct CustomDelimiter;",
          "    struct CustomTokenStream;",
          "",
          "    let group = imp::Group::new(CustomDelimiter, CustomTokenStream);",
          "    let delim_span = DelimSpan::new(&group);",
          "    let group = imp::Group::new(CustomDelimiter, CustomTokenStream);",
          "    let delim_span = DelimSpan::new(&group);",
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Fallback(group.span()));",
          "    assert_eq!(delim_span._marker, MARKER);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]