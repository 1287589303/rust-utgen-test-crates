[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyDelimiter;",
          "    ",
          "    impl DummyDelimiter {",
          "        fn new() -> Self {",
          "            DummyDelimiter",
          "        }",
          "    }",
          "    ",
          "    struct DummyTokenStream;",
          "    ",
          "    impl DummyTokenStream {",
          "        fn new() -> Self {",
          "            DummyTokenStream",
          "        }",
          "    }",
          "",
          "    let delimiter = DummyDelimiter::new();",
          "    let stream = DummyTokenStream::new();",
          "    ",
          "    let compiler_group = imp::Group::new(delimiter, stream);",
          "    ",
          "    let delim_span = DelimSpan::new(&compiler_group);",
          "    let _ = delim_span.join();",
          "    let _ = delim_span.open();",
          "    let _ = delim_span.close();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Compiler { join: compiler_group.span(), open: compiler_group.span_open(), close: compiler_group.span_close() });",
          "    assert_eq!(delim_span._marker, MARKER);"
        ],
        "code": [
          "{",
          "    struct DummyDelimiter;",
          "    ",
          "    impl DummyDelimiter {",
          "        fn new() -> Self {",
          "            DummyDelimiter",
          "        }",
          "    }",
          "    ",
          "    struct DummyTokenStream;",
          "    ",
          "    impl DummyTokenStream {",
          "        fn new() -> Self {",
          "            DummyTokenStream",
          "        }",
          "    }",
          "",
          "    let delimiter = DummyDelimiter::new();",
          "    let stream = DummyTokenStream::new();",
          "    ",
          "    let compiler_group = imp::Group::new(delimiter, stream);",
          "    ",
          "    let delim_span = DelimSpan::new(&compiler_group);",
          "    let _ = delim_span.join();",
          "    let _ = delim_span.open();",
          "    let _ = delim_span.close();",
          "    assert_eq!(delim_span.inner, DelimSpanEnum::Compiler { join: compiler_group.span(), open: compiler_group.span_open(), close: compiler_group.span_close() });",
          "    assert_eq!(delim_span._marker, MARKER);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]