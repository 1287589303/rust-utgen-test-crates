[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"!example\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"!example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '!')));",
          "    let cursor = Cursor { rest: \"#example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '#')));",
          "    let cursor = Cursor { rest: \"$example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '$')));",
          "    let cursor = Cursor { rest: \"%example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '%')));",
          "    let cursor = Cursor { rest: \"^example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '^')));",
          "    let cursor = Cursor { rest: \"&example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '&')));",
          "    let cursor = Cursor { rest: \"*example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '*')));",
          "    let cursor = Cursor { rest: \"(example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '(')));",
          "    let cursor = Cursor { rest: \")example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, ')')));",
          "    let cursor = Cursor { rest: \"-example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '-')));",
          "    let cursor = Cursor { rest: \"+example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '+')));",
          "    let cursor = Cursor { rest: \"|example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '|')));",
          "    let cursor = Cursor { rest: \";example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, ';')));",
          "    let cursor = Cursor { rest: \":\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"\", off: 1 }, ':')));",
          "    let cursor = Cursor { rest: \"<example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '<')));",
          "    let cursor = Cursor { rest: \".example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '.')));",
          "    let cursor = Cursor { rest: \">example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '>')));",
          "    let cursor = Cursor { rest: \"/example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '/')));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"!example\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "    let cursor = Cursor { rest: \"!example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '!')));",
          "    let cursor = Cursor { rest: \"#example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '#')));",
          "    let cursor = Cursor { rest: \"$example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '$')));",
          "    let cursor = Cursor { rest: \"%example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '%')));",
          "    let cursor = Cursor { rest: \"^example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '^')));",
          "    let cursor = Cursor { rest: \"&example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '&')));",
          "    let cursor = Cursor { rest: \"*example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '*')));",
          "    let cursor = Cursor { rest: \"(example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '(')));",
          "    let cursor = Cursor { rest: \")example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, ')')));",
          "    let cursor = Cursor { rest: \"-example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '-')));",
          "    let cursor = Cursor { rest: \"+example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '+')));",
          "    let cursor = Cursor { rest: \"|example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '|')));",
          "    let cursor = Cursor { rest: \";example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, ';')));",
          "    let cursor = Cursor { rest: \":\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"\", off: 1 }, ':')));",
          "    let cursor = Cursor { rest: \"<example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '<')));",
          "    let cursor = Cursor { rest: \".example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '.')));",
          "    let cursor = Cursor { rest: \">example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '>')));",
          "    let cursor = Cursor { rest: \"/example\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((Cursor { rest: \"example\", off: 1 }, '/')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"@test\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"@test\", off: 0 };",
          "    assert!(cursor.starts_with(\"//\") == false);",
          "    assert!(cursor.starts_with(\"/*\") == false);",
          "    assert!(cursor.chars().next().is_some());",
          "    assert!(cursor.chars().next().unwrap() == '@');",
          "    assert!(recognized.contains(cursor.chars().next().unwrap()));",
          "    let result = punct_char(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, first_char) = result.unwrap();",
          "    assert!(new_cursor.rest == \"test\");",
          "    assert!(first_char == '@');"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"@test\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "    let cursor = Cursor { rest: \"@test\", off: 0 };",
          "    assert!(cursor.starts_with(\"//\") == false);",
          "    assert!(cursor.starts_with(\"/*\") == false);",
          "    assert!(cursor.chars().next().is_some());",
          "    assert!(cursor.chars().next().unwrap() == '@');",
          "    assert!(recognized.contains(cursor.chars().next().unwrap()));",
          "    let result = punct_char(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, first_char) = result.unwrap();",
          "    assert!(new_cursor.rest == \"test\");",
          "    assert!(first_char == '@');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"#hash\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_?, Ok((Cursor { rest: \"hash\", off: 0 }, '#')));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"#hash\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "    assert_eq!(_?, Ok((Cursor { rest: \"hash\", off: 0 }, '#')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"$money\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"$money\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '$')));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"$money\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "    let cursor = Cursor { rest: \"$money\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '$')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"%percent\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"%percent\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '%')));",
          "    ",
          "    let cursor = Cursor { rest: \"&and\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '&')));",
          "    ",
          "    let cursor = Cursor { rest: \"*star\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '*')));",
          "    ",
          "    let cursor = Cursor { rest: \"$dollar\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '$')));",
          "    ",
          "    let cursor = Cursor { rest: \"#hash\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '#')));",
          "    ",
          "    let cursor = Cursor { rest: \"!exclaim\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '!')));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"%percent\", off: 0 };",
          "    let _ = punct_char(cursor);",
          "    let cursor = Cursor { rest: \"%percent\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '%')));",
          "    ",
          "    let cursor = Cursor { rest: \"&and\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '&')));",
          "    ",
          "    let cursor = Cursor { rest: \"*star\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '*')));",
          "    ",
          "    let cursor = Cursor { rest: \"$dollar\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '$')));",
          "    ",
          "    let cursor = Cursor { rest: \"#hash\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '#')));",
          "    ",
          "    let cursor = Cursor { rest: \"!exclaim\", off: 0 };",
          "    assert_eq!(punct_char(cursor), Ok((cursor.advance(1), '!')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]