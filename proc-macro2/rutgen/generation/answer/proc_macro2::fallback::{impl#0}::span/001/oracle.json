[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::Compiler(proc_macro::Span::call_site());",
          "    let lex_error = LexError { span };",
          "    let returned_span = lex_error.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span, Span::Compiler(proc_macro::Span::call_site()));"
        ],
        "code": [
          "{",
          "    let span = Span::Compiler(proc_macro::Span::call_site());",
          "    let lex_error = LexError { span };",
          "    let returned_span = lex_error.span();",
          "    assert_eq!(returned_span, Span::Compiler(proc_macro::Span::call_site()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::Fallback(Span { lo: 0, hi: 10 });",
          "    let lex_error = LexError { span };",
          "    let returned_span = lex_error.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span, Span::Fallback(Span { lo: 0, hi: 10 }));",
          "    assert!(returned_span == lex_error.span());",
          "    assert!(matches!(returned_span, Span::Fallback(_)));",
          "    assert!(returned_span.inner == lex_error.span().inner);"
        ],
        "code": [
          "{",
          "    let span = Span::Fallback(Span { lo: 0, hi: 10 });",
          "    let lex_error = LexError { span };",
          "    let returned_span = lex_error.span();",
          "    assert_eq!(returned_span, Span::Fallback(Span { lo: 0, hi: 10 }));",
          "    assert!(returned_span == lex_error.span());",
          "    assert!(matches!(returned_span, Span::Fallback(_)));",
          "    assert!(returned_span.inner == lex_error.span().inner);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span_low = Span::Fallback(Span { lo: u32::MIN, hi: u32::MIN });",
          "    let lex_error_low = LexError { span: span_low };",
          "    let returned_span_low = lex_error_low.span();",
          "",
          "    let span_high = Span::Fallback(Span { lo: u32::MAX, hi: u32::MAX });",
          "    let lex_error_high = LexError { span: span_high };",
          "    let returned_span_high = lex_error_high.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span_low, span_low);",
          "    assert_eq!(returned_span_high, span_high);"
        ],
        "code": [
          "{",
          "    let span_low = Span::Fallback(Span { lo: u32::MIN, hi: u32::MIN });",
          "    let lex_error_low = LexError { span: span_low };",
          "    let returned_span_low = lex_error_low.span();",
          "",
          "    let span_high = Span::Fallback(Span { lo: u32::MAX, hi: u32::MAX });",
          "    let lex_error_high = LexError { span: span_high };",
          "    let returned_span_high = lex_error_high.span();",
          "    assert_eq!(returned_span_low, span_low);",
          "    assert_eq!(returned_span_high, span_high);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]