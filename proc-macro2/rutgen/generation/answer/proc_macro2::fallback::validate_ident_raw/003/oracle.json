[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    validate_ident_raw(\"self\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"self\")).is_err(), true);"
        ],
        "code": [
          "{",
          "    validate_ident_raw(\"self\");",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"self\")).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    validate_ident_raw(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"self\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"Self\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"crate\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"super\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"_\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"valid_ident\")).is_err(), false);"
        ],
        "code": [
          "{",
          "    validate_ident_raw(\"\");",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"self\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"Self\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"crate\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"super\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"_\")).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| validate_ident_raw(\"valid_ident\")).is_err(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    validate_ident_raw(\"123\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(validate_ident_raw(\"self\"), panic!(\"`r{}` cannot be a raw identifier\", \"self\"));",
          "    assert_eq!(validate_ident_raw(\"super\"), panic!(\"`r{}` cannot be a raw identifier\", \"super\"));",
          "    assert_eq!(validate_ident_raw(\"Self\"), panic!(\"`r{}` cannot be a raw identifier\", \"Self\"));",
          "    assert_eq!(validate_ident_raw(\"crate\"), panic!(\"`r{}` cannot be a raw identifier\", \"crate\"));",
          "    assert_eq!(validate_ident_raw(\"_\"), panic!(\"`r{}` cannot be a raw identifier\", \"_\"));",
          "    assert_eq!(validate_ident_raw(\"valid_ident_1\"), ());"
        ],
        "code": [
          "{",
          "    validate_ident_raw(\"123\");",
          "    assert_eq!(validate_ident_raw(\"self\"), panic!(\"`r{}` cannot be a raw identifier\", \"self\"));",
          "    assert_eq!(validate_ident_raw(\"super\"), panic!(\"`r{}` cannot be a raw identifier\", \"super\"));",
          "    assert_eq!(validate_ident_raw(\"Self\"), panic!(\"`r{}` cannot be a raw identifier\", \"Self\"));",
          "    assert_eq!(validate_ident_raw(\"crate\"), panic!(\"`r{}` cannot be a raw identifier\", \"crate\"));",
          "    assert_eq!(validate_ident_raw(\"_\"), panic!(\"`r{}` cannot be a raw identifier\", \"_\"));",
          "    assert_eq!(validate_ident_raw(\"valid_ident_1\"), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    validate_ident_raw(\"123abc\");",
          "}"
        ],
        "oracle": [
          "    panic!(\"Ident cannot be a number; use Literal instead\");",
          "    validate_ident_raw(\"\");",
          "    panic!(\"Ident is not allowed to be empty; use Option<Ident>\");",
          "    validate_ident_raw(\"super\");",
          "    panic!(\"`r#super` cannot be a raw identifier\");",
          "    validate_ident_raw(\"self\");",
          "    panic!(\"`r#self` cannot be a raw identifier\");",
          "    validate_ident_raw(\"abcd\");"
        ],
        "code": [
          "{",
          "    validate_ident_raw(\"123abc\");",
          "    panic!(\"Ident cannot be a number; use Literal instead\");",
          "    validate_ident_raw(\"\");",
          "    panic!(\"Ident is not allowed to be empty; use Option<Ident>\");",
          "    validate_ident_raw(\"super\");",
          "    panic!(\"`r#super` cannot be a raw identifier\");",
          "    validate_ident_raw(\"self\");",
          "    panic!(\"`r#self` cannot be a raw identifier\");",
          "    validate_ident_raw(\"abcd\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]