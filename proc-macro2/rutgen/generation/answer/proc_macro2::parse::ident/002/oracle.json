[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello\" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(ident(Cursor { rest: \"hello\" }).is_ok());",
          "    assert_eq!(ident(Cursor { rest: \"hello\" }).unwrap().1.sym, \"hello\");",
          "    assert!(ident(Cursor { rest: \"hello\" }).unwrap().1.raw == false);",
          "    assert!(ident(Cursor { rest: \"super\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"self\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"crate\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"r\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"b\\'\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"c\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"br\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"r#\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"r##\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"br#\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello\" };",
          "    let _ = ident(cursor);",
          "    assert!(ident(Cursor { rest: \"hello\" }).is_ok());",
          "    assert_eq!(ident(Cursor { rest: \"hello\" }).unwrap().1.sym, \"hello\");",
          "    assert!(ident(Cursor { rest: \"hello\" }).unwrap().1.raw == false);",
          "    assert!(ident(Cursor { rest: \"super\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"self\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"crate\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"r\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"b\\'\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"c\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"br\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"r#\\\"\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"r##\" }).is_err());",
          "    assert!(ident(Cursor { rest: \"br#\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"valid_ident\" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ident(Cursor { rest: \"valid_ident\" }).is_ok(), true);",
          "    assert!(matches!(ident(Cursor { rest: \"valid_ident\" }).unwrap().1, crate::Ident::_new_fallback(_)));",
          "    assert_eq!(ident(Cursor { rest: \"valid_ident\" }).unwrap().0.rest, \"\");",
          "    assert!(ident(Cursor { rest: \"valid_ident\" }).unwrap().1.span.is_call_site());",
          "    assert_eq!(ident(Cursor { rest: \"valid_ident\" }).unwrap_err(), Err(Reject));",
          "    assert!(ident(Cursor { rest: \"super\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"valid_ident\" };",
          "    let _ = ident(cursor);",
          "    assert_eq!(ident(Cursor { rest: \"valid_ident\" }).is_ok(), true);",
          "    assert!(matches!(ident(Cursor { rest: \"valid_ident\" }).unwrap().1, crate::Ident::_new_fallback(_)));",
          "    assert_eq!(ident(Cursor { rest: \"valid_ident\" }).unwrap().0.rest, \"\");",
          "    assert!(ident(Cursor { rest: \"valid_ident\" }).unwrap().1.span.is_call_site());",
          "    assert_eq!(ident(Cursor { rest: \"valid_ident\" }).unwrap_err(), Err(Reject));",
          "    assert!(ident(Cursor { rest: \"super\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"foo_bar\" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ident(Cursor { rest: \"foo_bar\" }).is_ok(), true);",
          "    assert!(matches!(ident(Cursor { rest: \"foo_bar\" }).unwrap().1, crate::Ident::Fallback(_)));",
          "    assert_eq!(ident(Cursor { rest: \"foo_bar\" }).unwrap().0.rest, \"\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"foo_bar\" };",
          "    let _ = ident(cursor);",
          "    assert_eq!(ident(Cursor { rest: \"foo_bar\" }).is_ok(), true);",
          "    assert!(matches!(ident(Cursor { rest: \"foo_bar\" }).unwrap().1, crate::Ident::Fallback(_)));",
          "    assert_eq!(ident(Cursor { rest: \"foo_bar\" }).unwrap().0.rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"valid_identifier\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, ident) = result.unwrap();",
          "    assert_eq!(rest, \"\");",
          "    assert!(matches!(ident, crate::Ident::Fallback(_)));",
          "    ",
          "    let cursor = Cursor { rest: \"super\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"self\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"r#self\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"r\\\"invalid\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"b'char\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"invalid_identifier\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = ident(cursor);",
          "    let cursor = Cursor { rest: \"valid_identifier\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, ident) = result.unwrap();",
          "    assert_eq!(rest, \"\");",
          "    assert!(matches!(ident, crate::Ident::Fallback(_)));",
          "    ",
          "    let cursor = Cursor { rest: \"super\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"self\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"r#self\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"r\\\"invalid\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"b'char\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_err());",
          "    ",
          "    let cursor = Cursor { rest: \"invalid_identifier\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \" \" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"valid_ident\" }; let result = ident(cursor); assert!(result.is_ok());",
          "    let cursor = Cursor { rest: \"valid_ident\" }; let result = ident(cursor); assert_eq!(result.unwrap().1.to_string(), \"valid_ident\");",
          "    let cursor = Cursor { rest: \"super\" }; let result = ident(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"self\" }; let result = ident(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"crate\" }; let result = ident(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"r#valid_ident\" }; let result = ident(cursor); assert!(result.is_ok());",
          "    let cursor = Cursor { rest: \"r#self\" }; let result = ident(cursor); assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \" \" };",
          "    let _ = ident(cursor);",
          "    let cursor = Cursor { rest: \"valid_ident\" }; let result = ident(cursor); assert!(result.is_ok());",
          "    let cursor = Cursor { rest: \"valid_ident\" }; let result = ident(cursor); assert_eq!(result.unwrap().1.to_string(), \"valid_ident\");",
          "    let cursor = Cursor { rest: \"super\" }; let result = ident(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"self\" }; let result = ident(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"crate\" }; let result = ident(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"r#valid_ident\" }; let result = ident(cursor); assert!(result.is_ok());",
          "    let cursor = Cursor { rest: \"r#self\" }; let result = ident(cursor); assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1.sym, \"123abc\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _ = ident(cursor);",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1.sym, \"123abc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"!@#$%\" };",
          "    let _ = ident(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"!@#$%\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1.span, Span::call_site());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"!@#$%\" };",
          "    let _ = ident(cursor);",
          "    let cursor = Cursor { rest: \"!@#$%\" };",
          "    let result = ident(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1.span, Span::call_site());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]