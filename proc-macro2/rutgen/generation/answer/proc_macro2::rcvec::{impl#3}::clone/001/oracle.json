[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);"
        ],
        "code": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![1]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner));"
        ],
        "code": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![1]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![1, 2, 3]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);",
          "    assert_eq!(*cloned.inner, vec![1, 2, 3]);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);"
        ],
        "code": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![1, 2, 3]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);",
          "    assert_eq!(*cloned.inner, vec![1, 2, 3]);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new((1..=100).collect::<Vec<_>>()),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert_eq!(rc_vec.inner.len(), cloned.inner.len());",
          "    assert_eq!(rc_vec.inner, cloned.inner);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner));"
        ],
        "code": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new((1..=100).collect::<Vec<_>>()),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert_eq!(rc_vec.inner.len(), cloned.inner.len());",
          "    assert_eq!(rc_vec.inner, cloned.inner);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![\"hello\".to_string(), \"world\".to_string()]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "}"
        ],
        "oracle": [
          "    let rc_vec = RcVec { inner: Rc::new(vec![\"hello\".to_string(), \"world\".to_string()]) };",
          "    let cloned = rc_vec.clone();",
          "    assert!(Rc::ptr_eq(&cloned.inner, &rc_vec.inner));",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 2);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert_eq!(&*cloned.inner, &*rc_vec.inner);"
        ],
        "code": [
          "{",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![\"hello\".to_string(), \"world\".to_string()]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "    let rc_vec = RcVec { inner: Rc::new(vec![\"hello\".to_string(), \"world\".to_string()]) };",
          "    let cloned = rc_vec.clone();",
          "    assert!(Rc::ptr_eq(&cloned.inner, &rc_vec.inner));",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 2);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert_eq!(&*cloned.inner, &*rc_vec.inner);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone)]",
          "    struct CustomType {",
          "        value: i32,",
          "    }",
          "    ",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![CustomType { value: 1 }, CustomType { value: 2 }]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);",
          "    assert_eq!(cloned.inner.get(0).unwrap().value, 1);",
          "    assert_eq!(cloned.inner.get(1).unwrap().value, 2);"
        ],
        "code": [
          "{",
          "    #[derive(Clone)]",
          "    struct CustomType {",
          "        value: i32,",
          "    }",
          "    ",
          "    let rc_vec = RcVec {",
          "        inner: Rc::new(vec![CustomType { value: 1 }, CustomType { value: 2 }]),",
          "    };",
          "    let cloned = rc_vec.clone();",
          "    assert_eq!(Rc::strong_count(&rc_vec.inner), 1);",
          "    assert_eq!(Rc::strong_count(&cloned.inner), 2);",
          "    assert!(Rc::ptr_eq(&rc_vec.inner, &cloned.inner) == false);",
          "    assert_eq!(cloned.inner.get(0).unwrap().value, 1);",
          "    assert_eq!(cloned.inner.get(1).unwrap().value, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial = RcVec {",
          "        inner: Rc::new(vec![1, 2, 3]),",
          "    };",
          "    let cloned_once = initial.clone();",
          "    let cloned_twice = cloned_once.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_once.inner.as_ref(), initial.inner.as_ref());",
          "    assert!(Rc::ptr_eq(&cloned_once.inner, &initial.inner));",
          "    assert_eq!(cloned_twice.inner.as_ref(), cloned_once.inner.as_ref());",
          "    assert!(Rc::ptr_eq(&cloned_twice.inner, &cloned_once.inner));",
          "    assert!(Rc::ptr_eq(&cloned_twice.inner, &initial.inner));"
        ],
        "code": [
          "{",
          "    let initial = RcVec {",
          "        inner: Rc::new(vec![1, 2, 3]),",
          "    };",
          "    let cloned_once = initial.clone();",
          "    let cloned_twice = cloned_once.clone();",
          "    assert_eq!(cloned_once.inner.as_ref(), initial.inner.as_ref());",
          "    assert!(Rc::ptr_eq(&cloned_once.inner, &initial.inner));",
          "    assert_eq!(cloned_twice.inner.as_ref(), cloned_once.inner.as_ref());",
          "    assert!(Rc::ptr_eq(&cloned_twice.inner, &cloned_once.inner));",
          "    assert!(Rc::ptr_eq(&cloned_twice.inner, &initial.inner));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]