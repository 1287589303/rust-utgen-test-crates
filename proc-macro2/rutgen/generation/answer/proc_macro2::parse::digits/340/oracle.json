[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123\" };",
          "    let result = digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, cursor.off + 3);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123\" };",
          "    let result = digits(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, cursor.off + 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"42_0\" };",
          "    let result = digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"0\");",
          "    assert_eq!(result.unwrap().off, cursor.off + 3);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"42_0\" };",
          "    let result = digits(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"0\");",
          "    assert_eq!(result.unwrap().off, cursor.off + 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1_2_3\" };",
          "    let result = digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert!(advanced_cursor.starts_with(\"\"));",
          "    assert_eq!(advanced_cursor.rest, \"3\");",
          "    assert_eq!(advanced_cursor.len(), 5);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1_2_3\" };",
          "    let result = digits(cursor);",
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert!(advanced_cursor.starts_with(\"\"));",
          "    assert_eq!(advanced_cursor.rest, \"3\");",
          "    assert_eq!(advanced_cursor.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"000\" };",
          "    let result = digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"001\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"123\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"42\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"7\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"123_456\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"0\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"000\" };",
          "    let result = digits(cursor);",
          "    let cursor = Cursor { rest: \"001\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"123\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"42\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"7\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"123_456\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "    let cursor = Cursor { rest: \"0\" }; assert_eq!(digits(cursor), Ok(Cursor { rest: \"\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"100_200\" };",
          "    let result = digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert_eq!(new_cursor.rest, \"200\");",
          "    assert_eq!(new_cursor as Cursor, cursor.advance(6));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"100_200\" };",
          "    let result = digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert_eq!(new_cursor.rest, \"200\");",
          "    assert_eq!(new_cursor as Cursor, cursor.advance(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0\" };",
          "    let result = digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert_eq!(advanced_cursor.rest, \"\");",
          "    assert_eq!(advanced_cursor.len(), 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0\" };",
          "    let result = digits(cursor);",
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert_eq!(advanced_cursor.rest, \"\");",
          "    assert_eq!(advanced_cursor.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]