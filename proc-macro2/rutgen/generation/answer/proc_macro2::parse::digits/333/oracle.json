[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"12_34a\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"a\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"12_34a\" };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"a\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1_2_3_\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"_3_\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1_2_3_\" };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"_3_\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"9_\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(input.advance(2)));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"9_\" };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(input.advance(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"_23a\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert_eq!(advanced_cursor.rest, \"23a\");",
          "    assert_eq!(advanced_cursor.off, input.off + 1);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"_23a\" };",
          "    let result = digits(input);",
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert_eq!(advanced_cursor.rest, \"23a\");",
          "    assert_eq!(advanced_cursor.off, input.off + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"123_abc\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let expected_cursor = Cursor { rest: \"abc\", off: input.off + 7 }; // 7 characters advanced",
          "    assert_eq!(result.unwrap(), expected_cursor);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"123_abc\" };",
          "    let result = digits(input);",
          "    assert!(result.is_ok());",
          "    let expected_cursor = Cursor { rest: \"abc\", off: input.off + 7 }; // 7 characters advanced",
          "    assert_eq!(result.unwrap(), expected_cursor);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]