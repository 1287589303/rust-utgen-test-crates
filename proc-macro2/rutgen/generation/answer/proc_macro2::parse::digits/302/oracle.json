[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"abcdef\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"abcdef\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"\", off: 6 }));",
          "    let input = Cursor { rest: \"abcde\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"f\", off: 5 }));",
          "    let input = Cursor { rest: \"abc_def\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"ef\", off: 6 }));",
          "    let input = Cursor { rest: \"abc\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"\", off: 3 }));",
          "    let input = Cursor { rest: \"abc_123\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"123\", off: 6 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"abcdef\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"abcdef\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"\", off: 6 }));",
          "    let input = Cursor { rest: \"abcde\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"f\", off: 5 }));",
          "    let input = Cursor { rest: \"abc_def\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"ef\", off: 6 }));",
          "    let input = Cursor { rest: \"abc\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"\", off: 3 }));",
          "    let input = Cursor { rest: \"abc_123\", off: 0 };",
          "    assert_eq!(digits(input), Ok(Cursor { rest: \"123\", off: 6 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"ABCDEF\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"ABCDEF\", off: 0 };",
          "    assert_eq!(digits(input), Ok(input.advance(6)));",
          "    assert!(input.starts_with(\"ABCDEF\"));",
          "    assert!(!input.is_empty());",
          "    assert_eq!(input.bytes().count(), 0);",
          "    assert_eq!(input.rest.len(), 0);",
          "    assert!(matches!(digits(Cursor { rest: \"Aa\", off: 0 }), Ok(_)));",
          "    assert!(matches!(digits(Cursor { rest: \"ABC\", off: 0 }), Ok(_)));",
          "    assert!(matches!(digits(Cursor { rest: \"abcdef\", off: 0 }), Ok(_)));",
          "    assert!(matches!(digits(Cursor { rest: \"ABC_123\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(digits(Cursor { rest: \"ABC_GHI\", off: 0 }), Ok(_)));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"ABCDEF\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"ABCDEF\", off: 0 };",
          "    assert_eq!(digits(input), Ok(input.advance(6)));",
          "    assert!(input.starts_with(\"ABCDEF\"));",
          "    assert!(!input.is_empty());",
          "    assert_eq!(input.bytes().count(), 0);",
          "    assert_eq!(input.rest.len(), 0);",
          "    assert!(matches!(digits(Cursor { rest: \"Aa\", off: 0 }), Ok(_)));",
          "    assert!(matches!(digits(Cursor { rest: \"ABC\", off: 0 }), Ok(_)));",
          "    assert!(matches!(digits(Cursor { rest: \"abcdef\", off: 0 }), Ok(_)));",
          "    assert!(matches!(digits(Cursor { rest: \"ABC_123\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(digits(Cursor { rest: \"ABC_GHI\", off: 0 }), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"aBcDeF\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).is_ok(), true);",
          "    assert_eq!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).unwrap().rest, \"BcDeF\");",
          "    assert_eq!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).unwrap().off, 0);",
          "    assert!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).unwrap().rest.starts_with(\"BcDeF\"));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"aBcDeF\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "    assert_eq!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).is_ok(), true);",
          "    assert_eq!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).unwrap().rest, \"BcDeF\");",
          "    assert_eq!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).unwrap().off, 0);",
          "    assert!(digits(Cursor { rest: \"aBcDeF\", off: 0 }).unwrap().rest.starts_with(\"BcDeF\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"a_b_c_d_e_f\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_input.rest, \"a_b_c_d_e_f\");",
          "    assert!(matches!(digits(input), Ok(_)));",
          "    assert!(input.starts_with(\"a_b_c_d_e_f\"));",
          "    assert!(!input.is_empty());",
          "    assert_eq!(input.advance(len).rest, \"_c_d_e_f\");",
          "    assert!(len > 0);",
          "    assert!(!empty);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"a_b_c_d_e_f\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "    assert_eq!(_input.rest, \"a_b_c_d_e_f\");",
          "    assert!(matches!(digits(input), Ok(_)));",
          "    assert!(input.starts_with(\"a_b_c_d_e_f\"));",
          "    assert!(!input.is_empty());",
          "    assert_eq!(input.advance(len).rest, \"_c_d_e_f\");",
          "    assert!(len > 0);",
          "    assert!(!empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"abc\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(digits(Cursor { rest: \"abc\", off: 0 }), Ok(Cursor { rest: \"\", off: 3 }));",
          "    assert_eq!(digits(Cursor { rest: \"abc_\", off: 0 }), Ok(Cursor { rest: \"\", off: 4 }));",
          "    assert_eq!(digits(Cursor { rest: \"abcdef\", off: 0 }), Ok(Cursor { rest: \"\", off: 6 }));",
          "    assert_eq!(digits(Cursor { rest: \"a\", off: 0 }), Ok(Cursor { rest: \"\", off: 1 }));",
          "    assert_eq!(digits(Cursor { rest: \"a_\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(digits(Cursor { rest: \"aa\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(digits(Cursor { rest: \"abcde\", off: 0 }), Ok(Cursor { rest: \"\", off: 5 }));",
          "    assert_eq!(digits(Cursor { rest: \"a_a_b\", off: 0 }), Ok(Cursor { rest: \"\", off: 5 }));",
          "    assert_eq!(digits(Cursor { rest: \"abcdefg\", off: 0 }), Ok(Cursor { rest: \"\", off: 6 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"abc\",",
          "        off: 0,",
          "    };",
          "    let _ = digits(input);",
          "    assert_eq!(digits(Cursor { rest: \"abc\", off: 0 }), Ok(Cursor { rest: \"\", off: 3 }));",
          "    assert_eq!(digits(Cursor { rest: \"abc_\", off: 0 }), Ok(Cursor { rest: \"\", off: 4 }));",
          "    assert_eq!(digits(Cursor { rest: \"abcdef\", off: 0 }), Ok(Cursor { rest: \"\", off: 6 }));",
          "    assert_eq!(digits(Cursor { rest: \"a\", off: 0 }), Ok(Cursor { rest: \"\", off: 1 }));",
          "    assert_eq!(digits(Cursor { rest: \"a_\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(digits(Cursor { rest: \"aa\", off: 0 }), Ok(Cursor { rest: \"\", off: 2 }));",
          "    assert_eq!(digits(Cursor { rest: \"abcde\", off: 0 }), Ok(Cursor { rest: \"\", off: 5 }));",
          "    assert_eq!(digits(Cursor { rest: \"a_a_b\", off: 0 }), Ok(Cursor { rest: \"\", off: 5 }));",
          "    assert_eq!(digits(Cursor { rest: \"abcdefg\", off: 0 }), Ok(Cursor { rest: \"\", off: 6 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]