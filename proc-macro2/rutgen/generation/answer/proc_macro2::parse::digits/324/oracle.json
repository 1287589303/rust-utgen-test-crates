[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"AFA\", off: 0 };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"AFA\", off: 0 };",
          "    let expected_result = Ok(input.advance(3));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"AFA\", off: 0 };",
          "    let result = digits(input);",
          "    let input = Cursor { rest: \"AFA\", off: 0 };",
          "    let expected_result = Ok(input.advance(3));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"B\", off: 0 };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, 1);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"B\", off: 0 };",
          "    let result = digits(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"C_D_E\", off: 0 };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"_E\", off: 0 }));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.as_ref().unwrap().rest, \"_E\");",
          "    assert_eq!(result.as_ref().unwrap().off, 0);",
          "    assert_ne!(result.unwrap().rest, \"C_D_E\");",
          "    assert!(result.unwrap().rest.contains('_'));",
          "    assert!(result.unwrap().rest.len() < input.rest.len());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"C_D_E\", off: 0 };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"_E\", off: 0 }));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.as_ref().unwrap().rest, \"_E\");",
          "    assert_eq!(result.as_ref().unwrap().off, 0);",
          "    assert_ne!(result.unwrap().rest, \"C_D_E\");",
          "    assert!(result.unwrap().rest.contains('_'));",
          "    assert!(result.unwrap().rest.len() < input.rest.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"F0F1F2F3F4F5F6F7\", off: 0 };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"0F1F2F3F4F5F6F7\", off: 2 }));",
          "    assert!(result.is_ok());",
          "    assert!(result.as_ref().unwrap().rest == \"0F1F2F3F4F5F6F7\");",
          "    assert!(result.as_ref().unwrap().off == 2);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"F0F1F2F3F4F5F6F7\", off: 0 };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"0F1F2F3F4F5F6F7\", off: 2 }));",
          "    assert!(result.is_ok());",
          "    assert!(result.as_ref().unwrap().rest == \"0F1F2F3F4F5F6F7\");",
          "    assert!(result.as_ref().unwrap().off == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"AA\", off: 0 };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"\", off: 2 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"AA\", off: 0 };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"\", off: 2 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]