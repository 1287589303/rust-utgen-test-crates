[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x10\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x10\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x10\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x10\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x0\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x0\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x0\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x0\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x1_2\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x2\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x3\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x4\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x5\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x6\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x7\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x8\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x9\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x1a\" }; let result = digits(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"0x1A\" }; let result = digits(input); assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x1_2\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x2\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x3\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x4\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x5\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x6\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x7\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x8\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x9\" }; let result = digits(input); assert!(result.is_err());",
          "    let input = Cursor { rest: \"0x1a\" }; let result = digits(input); assert!(result.is_ok());",
          "    let input = Cursor { rest: \"0x1A\" }; let result = digits(input); assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x10_1\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x10_1\" };",
          "    assert_eq!(digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x10_1\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x10_1\" };",
          "    assert_eq!(digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0xgg\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x0\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0x1a\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0x1f\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0x10g\" }; assert_eq!(digits(input), Err(Reject));",
          "    let input = Cursor { rest: \"0x2a_\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0xhell\" }; assert_eq!(digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0xgg\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x0\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0x1a\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0x1f\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0x10g\" }; assert_eq!(digits(input), Err(Reject));",
          "    let input = Cursor { rest: \"0x2a_\" }; assert_eq!(digits(input), Ok(Cursor { rest: \"\" }));",
          "    let input = Cursor { rest: \"0xhell\" }; assert_eq!(digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x1234567890abcdef\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x1234567890abcdef\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x1234567890abcdef\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x1234567890abcdef\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x1_2a_3\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0x1_2a_3\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    let error = result.err().unwrap();",
          "    assert!(std::mem::discriminant(&error) == std::mem::discriminant(&Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x1_2a_3\" };",
          "    let _ = digits(input);",
          "    let input = Cursor { rest: \"0x1_2a_3\" };",
          "    let result = digits(input);",
          "    assert!(result.is_err());",
          "    let error = result.err().unwrap();",
          "    assert!(std::mem::discriminant(&error) == std::mem::discriminant(&Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0x1_2_3\" };",
          "    let _ = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(Reject), digits(Cursor { rest: \"0x1_2_3\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0x1_2_3\" };",
          "    let _ = digits(input);",
          "    assert_eq!(Err(Reject), digits(Cursor { rest: \"0x1_2_3\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]