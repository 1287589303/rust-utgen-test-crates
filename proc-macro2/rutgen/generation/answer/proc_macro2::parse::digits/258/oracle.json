[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"123\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"123\" };",
          "    let expected_result = Ok(Cursor { rest: \"\" });",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"123\" };",
          "    let result = digits(input);",
          "    let input = Cursor { rest: \"123\" };",
          "    let expected_result = Ok(Cursor { rest: \"\" });",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"42\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"\" }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"42\" };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"100\" };",
          "    let result = digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Cursor { rest: \"\" }));",
          "    assert!(input.rest == \"100\");",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest.is_empty());",
          "    assert!(result.unwrap().rest.len() == 0);",
          "    assert!(result.unwrap().starts_with(\"\"));",
          "    assert!(result.unwrap().as_bytes().is_empty());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"100\" };",
          "    let result = digits(input);",
          "    assert_eq!(result, Ok(Cursor { rest: \"\" }));",
          "    assert!(input.rest == \"100\");",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest.is_empty());",
          "    assert!(result.unwrap().rest.len() == 0);",
          "    assert!(result.unwrap().starts_with(\"\"));",
          "    assert!(result.unwrap().as_bytes().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]