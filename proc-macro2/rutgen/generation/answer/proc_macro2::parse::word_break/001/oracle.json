[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"abc\", // Non-empty rest containing valid identifier continuation",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(word_break(Cursor { rest: \"abc\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"d\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"1abc\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"_valid\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"valid_char$\", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"abc\", // Non-empty rest containing valid identifier continuation",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = word_break(cursor);",
          "    assert_eq!(word_break(Cursor { rest: \"abc\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"d\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"1abc\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"_valid\", off: 0 }), Err(Reject));",
          "    assert_eq!(word_break(Cursor { rest: \"valid_char$\", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"d\", // Non-empty rest with a single valid identifier continuation character",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"d\", ..Default::default() }; // Valid identifier continuation character 'd'",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"9\", ..Default::default() }; // Valid identifier continuation character '9'",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"__\", ..Default::default() }; // Valid identifier continuation character '_'",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"国\", ..Default::default() }; // Valid identifier continuation character in Unicode",
          "    assert_eq!(word_break(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"d\", // Non-empty rest with a single valid identifier continuation character",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = word_break(cursor);",
          "    let cursor = Cursor { rest: \"d\", ..Default::default() }; // Valid identifier continuation character 'd'",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"9\", ..Default::default() }; // Valid identifier continuation character '9'",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"__\", ..Default::default() }; // Valid identifier continuation character '_'",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"国\", ..Default::default() }; // Valid identifier continuation character in Unicode",
          "    assert_eq!(word_break(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"_example\", // Non-empty rest with a valid identifier continuation starting with an underscore",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"_example\", #[cfg(span_locations)] off: 0 }; assert_eq!(word_break(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"_example\", // Non-empty rest with a valid identifier continuation starting with an underscore",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = word_break(cursor);",
          "    let cursor = Cursor { rest: \"_example\", #[cfg(span_locations)] off: 0 }; assert_eq!(word_break(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]