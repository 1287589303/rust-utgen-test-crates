[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _result = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"a\" }; // character 'a' is valid and should not trigger Err",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"1\" }; // character '1' is valid, not an identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"_\" }; // underscore is valid but treated as an identifier start, should not trigger Err",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"#\" }; // '#' is not a valid identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \" \" }; // space is not a valid identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"@\" }; // '@' is not a valid identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"abc\" }; // 'a' is valid, next characters 'bc' ignored for initial check",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _result = word_break(cursor);",
          "    let cursor = Cursor { rest: \"a\" }; // character 'a' is valid and should not trigger Err",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"1\" }; // character '1' is valid, not an identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"_\" }; // underscore is valid but treated as an identifier start, should not trigger Err",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"#\" }; // '#' is not a valid identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \" \" }; // space is not a valid identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"@\" }; // '@' is not a valid identifier continuation",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "    ",
          "    let cursor = Cursor { rest: \"abc\" }; // 'a' is valid, next characters 'bc' ignored for initial check",
          "    let _result = word_break(cursor); // Expected: Ok(cursor)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _result = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let result = word_break(cursor);",
          "    assert_eq!(result, Ok(cursor));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let _result = word_break(cursor);",
          "    let cursor = Cursor { rest: \"123abc\" };",
          "    let result = word_break(cursor);",
          "    assert_eq!(result, Ok(cursor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"@abc\" };",
          "    let _result = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Cursor { rest: \"@abc\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"@abc\" };",
          "    let _result = word_break(cursor);",
          "    assert_eq!(_result, Ok(Cursor { rest: \"@abc\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \" abc\" };",
          "    let _result = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Cursor { rest: \" abc\" }));",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_eq!(_result.unwrap().rest, \" abc\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \" abc\" };",
          "    let _result = word_break(cursor);",
          "    assert_eq!(_result, Ok(Cursor { rest: \" abc\" }));",
          "    assert!(_result.is_ok());",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_eq!(_result.unwrap().rest, \" abc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"#$%\" };",
          "    let _result = word_break(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"a\" };",
          "    let result = word_break(cursor);",
          "    assert_eq!(result, Ok(cursor));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"#$%\" };",
          "    let _result = word_break(cursor);",
          "    let cursor = Cursor { rest: \"a\" };",
          "    let result = word_break(cursor);",
          "    assert_eq!(result, Ok(cursor));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]