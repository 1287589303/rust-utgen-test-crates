[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let streams: Vec<TokenStream> = Vec::new();",
          "    let result = TokenStream::from_iter(streams);",
          "}"
        ],
        "oracle": [
          "    assert!(result.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let streams: Vec<TokenStream> = Vec::new();",
          "    let result = TokenStream::from_iter(streams);",
          "    assert!(result.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonTokenStream;",
          "",
          "    impl IntoIterator for NonTokenStream {",
          "        type Item = TokenStream;",
          "        type IntoIter = std::iter::empty<TokenStream>;",
          "",
          "        fn into_iter(self) -> Self::IntoIter {",
          "            std::iter::empty()",
          "        }",
          "    }",
          "",
          "    let streams = NonTokenStream;",
          "    let result = TokenStream::from_iter(streams);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, TokenStream::new());"
        ],
        "code": [
          "{",
          "    struct NonTokenStream;",
          "",
          "    impl IntoIterator for NonTokenStream {",
          "        type Item = TokenStream;",
          "        type IntoIter = std::iter::empty<TokenStream>;",
          "",
          "        fn into_iter(self) -> Self::IntoIter {",
          "            std::iter::empty()",
          "        }",
          "    }",
          "",
          "    let streams = NonTokenStream;",
          "    let result = TokenStream::from_iter(streams);",
          "    assert_eq!(result, TokenStream::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]