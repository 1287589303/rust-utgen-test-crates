[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Hello \\\\Z\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"Hello \\\\Z\", off: 0 };",
          "    let result = cooked_byte_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Hello \\\\Z\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "    let input = Cursor { rest: \"Hello \\\\Z\", off: 0 };",
          "    let result = cooked_byte_string(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Line 1\\\\A Line 2\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Line 1\\\\A Line 2\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "    assert_eq!(_ , Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"A\\\\B C\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"A\\\\B C\", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"A\\\\B C\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"A\\\\B C\", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Test\\\\C\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"Test\\\\C\", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"Test\\\\C\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = cooked_byte_string(input);",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"Test\\\\C\", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]