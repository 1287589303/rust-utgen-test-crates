[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"abc\"def\"# };",
          "    let _ = cooked_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"\"abc\"# }; let result = cooked_byte_string(cursor); assert!(result.is_ok());",
          "    let cursor = Cursor { rest: r#\"abc\\r\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\\\\\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\\x\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\\x00\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"abc\"def\"# };",
          "    let _ = cooked_byte_string(cursor);",
          "    let cursor = Cursor { rest: r#\"\"abc\"# }; let result = cooked_byte_string(cursor); assert!(result.is_ok());",
          "    let cursor = Cursor { rest: r#\"abc\\r\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\\\\\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\\x\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    let cursor = Cursor { rest: r#\"abc\\x00\"# }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\\rdef\" };",
          "    let _ = cooked_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cooked_byte_string(Cursor { rest: r#\"abc\"def\"# }), Ok(Cursor { rest: \"def\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\r\\ndef\" }), Ok(Cursor { rest: \"def\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\n\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\r\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\xFF\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\x00\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\t\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\\\\\\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\"def\" }), Ok(Cursor { rest: \"def\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\\rdef\" };",
          "    let _ = cooked_byte_string(cursor);",
          "    assert_eq!(cooked_byte_string(Cursor { rest: r#\"abc\"def\"# }), Ok(Cursor { rest: \"def\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\r\\ndef\" }), Ok(Cursor { rest: \"def\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\n\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\r\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\xFF\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\x00\" }), Err(Reject));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\t\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\\\\\\\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(cooked_byte_string(Cursor { rest: \"abc\\\"def\" }), Ok(Cursor { rest: \"def\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\\\\def\" };",
          "    let _ = cooked_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"abc\\\\def\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\"def\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\r\\n\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\xFFdef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\ndef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\rdef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\tdef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\0def\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\\\\def\" };",
          "    let _ = cooked_byte_string(cursor);",
          "    let cursor = Cursor { rest: \"abc\\\\def\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\"def\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\r\\n\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\xFFdef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert!(result.is_ok());",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\ndef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\rdef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\tdef\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\0def\" };",
          "    let result = cooked_byte_string(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\\\\x10def\" };",
          "    let _ = cooked_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"abc\\\"def\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(8))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\r\\ndef\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(8))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\n\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(6))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\\\\\\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(7))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\x1\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\x10\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\x\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\r\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(6))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\n\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(6))));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\\\\x10def\" };",
          "    let _ = cooked_byte_string(cursor);",
          "    let cursor = Cursor { rest: \"abc\\\"def\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(8))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\r\\ndef\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(8))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\n\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(6))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\\\\\\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(7))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\x1\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\x10\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\x\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Err(Reject));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\r\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(6))));",
          "    ",
          "    let cursor = Cursor { rest: \"abc\\\\n\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(cursor.advance(6))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc def\" };",
          "    let _ = cooked_byte_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"abc\\\\def\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"abc\\\\def\" })));",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\\\r\\n def\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\x12\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\n\\\"\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"abc\\\\n\" })));",
          "    let cursor = Cursor { rest: \"\\\"abc \\\\\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\\\t def\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\''\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"abc\\\\'\" })));",
          "    let cursor = Cursor { rest: \"\\\"abc\\\"efg\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"efg\" })));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc def\" };",
          "    let _ = cooked_byte_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\def\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"abc\\\\def\" })));",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\\\r\\n def\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\x12\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\n\\\"\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"abc\\\\n\" })));",
          "    let cursor = Cursor { rest: \"\\\"abc \\\\\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\\\t def\" }; let result = cooked_byte_string(cursor); assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"\\\"abc\\\\''\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"abc\\\\'\" })));",
          "    let cursor = Cursor { rest: \"\\\"abc\\\"efg\" }; let result = cooked_byte_string(cursor); assert_eq!(result, Ok(literal_suffix(Cursor { rest: \"efg\" })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]