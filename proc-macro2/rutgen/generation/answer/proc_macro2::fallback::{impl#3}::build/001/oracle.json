[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = TokenStreamBuilder::new();",
          "    let _token_stream = builder.build();",
          "}"
        ],
        "oracle": [
          "    let builder = TokenStreamBuilder::new();",
          "    assert!(builder.inner.is_empty());",
          "    let token_stream = builder.build();",
          "    assert!(Rc::strong_count(&token_stream.inner) == 1);",
          "    assert!(token_stream.inner.inner.is_empty());",
          "    let builder_with_capacity = TokenStreamBuilder::with_capacity(10);",
          "    assert_eq!(builder_with_capacity.inner.inner.capacity(), 10);",
          "    let token_stream_with_capacity = builder_with_capacity.build();",
          "    assert!(Rc::strong_count(&token_stream_with_capacity.inner) == 1);",
          "    assert!(token_stream_with_capacity.inner.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let builder = TokenStreamBuilder::new();",
          "    let _token_stream = builder.build();",
          "    let builder = TokenStreamBuilder::new();",
          "    assert!(builder.inner.is_empty());",
          "    let token_stream = builder.build();",
          "    assert!(Rc::strong_count(&token_stream.inner) == 1);",
          "    assert!(token_stream.inner.inner.is_empty());",
          "    let builder_with_capacity = TokenStreamBuilder::with_capacity(10);",
          "    assert_eq!(builder_with_capacity.inner.inner.capacity(), 10);",
          "    let token_stream_with_capacity = builder_with_capacity.build();",
          "    assert!(Rc::strong_count(&token_stream_with_capacity.inner) == 1);",
          "    assert!(token_stream_with_capacity.inner.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"test_ident\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "}"
        ],
        "oracle": [
          "    let expected_token_stream = TokenStream { inner: RcVec::new() };",
          "    assert_eq!(_token_stream.inner, expected_token_stream.inner);",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    assert_eq!(builder.inner.inner.len(), 0);",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"test_ident\", Span::call_site())));",
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Ident(_)));",
          "    let constructed_token_stream = builder.build();",
          "    assert!(constructed_token_stream.inner.inner.contains(&builder.inner.inner[0]));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"test_ident\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "    let expected_token_stream = TokenStream { inner: RcVec::new() };",
          "    assert_eq!(_token_stream.inner, expected_token_stream.inner);",
          "    let mut builder = TokenStreamBuilder::with_capacity(1);",
          "    assert_eq!(builder.inner.inner.len(), 0);",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"test_ident\", Span::call_site())));",
          "    assert_eq!(builder.inner.inner.len(), 1);",
          "    assert!(matches!(builder.inner.inner[0], TokenTree::Ident(_)));",
          "    let constructed_token_stream = builder.build();",
          "    assert!(constructed_token_stream.inner.inner.contains(&builder.inner.inner[0]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(3);",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"ident_1\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"ident_2\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"ident_3\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_token_stream.inner.len(), 3);",
          "    assert!(_token_stream.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident::new(\"ident_1\", _)))));",
          "    assert!(_token_stream.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident::new(\"ident_2\", _)))));",
          "    assert!(_token_stream.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident::new(\"ident_3\", _)))));",
          "    assert!(std::ptr::eq(&_token_stream.inner, &builder.inner.build()));",
          "    assert!(std::mem::size_of_val(&_token_stream) > 0);"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::with_capacity(3);",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"ident_1\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"ident_2\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"ident_3\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "    assert_eq!(_token_stream.inner.len(), 3);",
          "    assert!(_token_stream.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident::new(\"ident_1\", _)))));",
          "    assert!(_token_stream.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident::new(\"ident_2\", _)))));",
          "    assert!(_token_stream.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident::new(\"ident_3\", _)))));",
          "    assert!(std::ptr::eq(&_token_stream.inner, &builder.inner.build()));",
          "    assert!(std::mem::size_of_val(&_token_stream) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"mixed_ident\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Punct(Punct::new('+', Spacing::Alone)));",
          "    builder.push_token_from_parser(TokenTree::Literal(Literal::new(\"123\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "}"
        ],
        "oracle": [
          "    let builder = TokenStreamBuilder::new();",
          "    assert_eq!(builder.inner.inner.len(), 0);",
          "    let mut builder_with_capacity = TokenStreamBuilder::with_capacity(5);",
          "    assert_eq!(builder_with_capacity.inner.inner.capacity(), 5);",
          "    builder_with_capacity.push_token_from_parser(TokenTree::Ident(Ident::new(\"test_ident\", Span::call_site())));",
          "    assert_eq!(builder_with_capacity.inner.inner.len(), 1);",
          "    builder_with_capacity.push_token_from_parser(TokenTree::Punct(Punct::new('-', Spacing::Alone)));",
          "    assert_eq!(builder_with_capacity.inner.inner.len(), 2);",
          "    builder_with_capacity.push_token_from_parser(TokenTree::Literal(Literal::new(\"456\", Span::call_site())));",
          "    assert_eq!(builder_with_capacity.inner.inner.len(), 3);",
          "    let token_stream = builder_with_capacity.build();",
          "    assert!(token_stream.inner.inner.len() == 3);"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    builder.push_token_from_parser(TokenTree::Ident(Ident::new(\"mixed_ident\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Punct(Punct::new('+', Spacing::Alone)));",
          "    builder.push_token_from_parser(TokenTree::Literal(Literal::new(\"123\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "    let builder = TokenStreamBuilder::new();",
          "    assert_eq!(builder.inner.inner.len(), 0);",
          "    let mut builder_with_capacity = TokenStreamBuilder::with_capacity(5);",
          "    assert_eq!(builder_with_capacity.inner.inner.capacity(), 5);",
          "    builder_with_capacity.push_token_from_parser(TokenTree::Ident(Ident::new(\"test_ident\", Span::call_site())));",
          "    assert_eq!(builder_with_capacity.inner.inner.len(), 1);",
          "    builder_with_capacity.push_token_from_parser(TokenTree::Punct(Punct::new('-', Spacing::Alone)));",
          "    assert_eq!(builder_with_capacity.inner.inner.len(), 2);",
          "    builder_with_capacity.push_token_from_parser(TokenTree::Literal(Literal::new(\"456\", Span::call_site())));",
          "    assert_eq!(builder_with_capacity.inner.inner.len(), 3);",
          "    let token_stream = builder_with_capacity.build();",
          "    assert!(token_stream.inner.inner.len() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    builder.push_token_from_parser(TokenTree::Literal(Literal::new(\"ùîò\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Literal(Literal::new(\"‚ö†Ô∏è\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert!(_token_stream.is::<TokenStream>());",
          "    assert_eq!(_token_stream.inner.len(), 2);",
          "    assert!(matches!(_token_stream.inner.get(0), Some(TokenTree::Literal(_))));",
          "    assert!(matches!(_token_stream.inner.get(1), Some(TokenTree::Literal(_))));"
        ],
        "code": [
          "{",
          "    let mut builder = TokenStreamBuilder::new();",
          "    builder.push_token_from_parser(TokenTree::Literal(Literal::new(\"ùîò\", Span::call_site())));",
          "    builder.push_token_from_parser(TokenTree::Literal(Literal::new(\"‚ö†Ô∏è\", Span::call_site())));",
          "    let _token_stream = builder.build();",
          "    assert!(_token_stream.is::<TokenStream>());",
          "    assert_eq!(_token_stream.inner.len(), 2);",
          "    assert!(matches!(_token_stream.inner.get(0), Some(TokenTree::Literal(_))));",
          "    assert!(matches!(_token_stream.inner.get(1), Some(TokenTree::Literal(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]