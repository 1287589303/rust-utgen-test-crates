[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\x\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\x\" };",
          "    let _expected_result = Err(Reject);",
          "    assert_eq!(character(cursor), _expected_result);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\x\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\x\" };",
          "    let _expected_result = Err(Reject);",
          "    assert_eq!(character(cursor), _expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\u\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\u\" };",
          "    let result = character(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\u\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\u\" };",
          "    let result = character(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\n\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\n\" };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\n\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\n\" };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\r\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\r\" };",
          "    let result = character(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\r\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\r\" };",
          "    let result = character(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\t\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\t\" };",
          "    let _result = character(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\t\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\t\" };",
          "    let _result = character(cursor);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\\\\\\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    cursor = Cursor { rest: \"'\\\\\\\\\" };",
          "    assert_eq!(character(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\\\\\\" };",
          "    let _result = character(cursor);",
          "    cursor = Cursor { rest: \"'\\\\\\\\\" };",
          "    assert_eq!(character(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\0\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\0\" };",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\0\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\0\" };",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\'\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\'\" };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\'\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\'\" };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\" };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\" };",
          "    let result = character(cursor);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\" };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\" };",
          "    let result = character(cursor);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]