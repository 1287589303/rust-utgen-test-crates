[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"'\\\\n\" };",
          "    let _ = character(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"'\\\\n\" };",
          "    let result = character(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(input.starts_with(\"'\"));",
          "    assert!(input.rest.starts_with(\"\\\\n\"));",
          "    assert!(input.char_indices().next().is_some());",
          "    assert_eq!(input.len(), 3);",
          "    assert_eq!(input.advance(2).len(), 1);",
          "    assert!(input.starts_with_char('\\\\'));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"'\\\\n\" };",
          "    let _ = character(input);",
          "    let input = Cursor { rest: \"'\\\\n\" };",
          "    let result = character(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(input.starts_with(\"'\"));",
          "    assert!(input.rest.starts_with(\"\\\\n\"));",
          "    assert!(input.char_indices().next().is_some());",
          "    assert_eq!(input.len(), 3);",
          "    assert_eq!(input.advance(2).len(), 1);",
          "    assert!(input.starts_with_char('\\\\'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"'\\\\x\" };",
          "    let _ = character(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"'\\\\x\" };",
          "    let result = character(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"'\\\\x\" };",
          "    let _ = character(input);",
          "    let input = Cursor { rest: \"'\\\\x\" };",
          "    let result = character(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"'\\\\u\" };",
          "    let _ = character(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"'\\\\u\" };",
          "    let result = character(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"'\\\\u\" };",
          "    let _ = character(input);",
          "    let input = Cursor { rest: \"'\\\\u\" };",
          "    let result = character(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]