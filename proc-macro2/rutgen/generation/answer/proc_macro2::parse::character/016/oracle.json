[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\n'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\n'\".to_string().as_str() };",
          "    let result = character(cursor);",
          "    assert!(result.is_ok());",
          "    let cursor_result = result.unwrap();",
          "    assert_eq!(cursor_result.rest, \"'\");",
          "    assert!(cursor_result.is_empty());",
          "    assert_eq!(cursor_result.len(), 0);",
          "    let input_after = cursor.advance(3);",
          "    assert!(input_after.starts_with(\"'\"));",
          "    let result_after = input_after.parse(\"'\");",
          "    assert!(result_after.is_ok());",
          "    let literal_cursor = literal_suffix(input_after);",
          "    assert!(literal_cursor.rest.is_empty());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\n'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\n'\".to_string().as_str() };",
          "    let result = character(cursor);",
          "    assert!(result.is_ok());",
          "    let cursor_result = result.unwrap();",
          "    assert_eq!(cursor_result.rest, \"'\");",
          "    assert!(cursor_result.is_empty());",
          "    assert_eq!(cursor_result.len(), 0);",
          "    let input_after = cursor.advance(3);",
          "    assert!(input_after.starts_with(\"'\"));",
          "    let result_after = input_after.parse(\"'\");",
          "    assert!(result_after.is_ok());",
          "    let literal_cursor = literal_suffix(input_after);",
          "    assert!(literal_cursor.rest.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\u1234'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\xAB'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(6).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\n'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\0'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\r'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\t'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\''\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(4).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\"'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\\\\\'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(4).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\uABCD'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(7).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\'\" + \"'\".to_string() }; assert_eq!(character(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\u1234'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\xAB'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(6).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\n'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\0'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\r'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\t'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\''\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(4).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\"'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(3).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\\\\\'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(4).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\uABCD'\".to_string().as_str() }; assert_eq!(character(cursor), Ok(literal_suffix(cursor.advance(7).parse(\"'\").unwrap())));",
          "    let cursor = Cursor { rest: \"'\\\\'\" + \"'\".to_string() }; assert_eq!(character(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\xFF'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\xFF'\".to_string().as_str() };",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap().rest, \"'\");",
          "    assert!(cursor.starts_with(\"'\\\\xFF'\"));",
          "    assert!(cursor.char_indices().next().is_some());",
          "    assert!(cursor.advance(3).starts_with(\"'\"));",
          "    assert!(cursor.starts_with_char('\\\\'));",
          "    assert!(cursor.char_indices().next().map(|(_, ch)| ch) == Some('\\\\'));",
          "    assert!(cursor.char_indices().nth(1).map(|(_, ch)| ch) == Some('x'));",
          "    assert!(cursor.char_indices().nth(2).map(|(_, ch)| ch) == Some('F'));",
          "    assert!(cursor.char_indices().nth(3).map(|(_, ch)| ch) == Some('F'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\xFF'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\xFF'\".to_string().as_str() };",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap().rest, \"'\");",
          "    assert!(cursor.starts_with(\"'\\\\xFF'\"));",
          "    assert!(cursor.char_indices().next().is_some());",
          "    assert!(cursor.advance(3).starts_with(\"'\"));",
          "    assert!(cursor.starts_with_char('\\\\'));",
          "    assert!(cursor.char_indices().next().map(|(_, ch)| ch) == Some('\\\\'));",
          "    assert!(cursor.char_indices().nth(1).map(|(_, ch)| ch) == Some('x'));",
          "    assert!(cursor.char_indices().nth(2).map(|(_, ch)| ch) == Some('F'));",
          "    assert!(cursor.char_indices().nth(3).map(|(_, ch)| ch) == Some('F'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\''\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\''\".to_string().as_str() };",
          "    let result = character(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), literal_suffix(cursor));",
          "    assert!(cursor.starts_with(\"'\"));",
          "    assert!(cursor.starts_with_char('\\\\'));",
          "    assert!(cursor.starts_with_fn(|ch| ch == '\\''));",
          "    let chars = cursor.char_indices();",
          "    assert!(chars.clone().next().map(|(_, ch)| ch) == Some('\\\\'));",
          "    assert!(chars.clone().nth(1).map(|(_, ch)| ch) == Some('\\''));",
          "    assert!(chars.clone().nth(2).is_none());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\''\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\''\".to_string().as_str() };",
          "    let result = character(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), literal_suffix(cursor));",
          "    assert!(cursor.starts_with(\"'\"));",
          "    assert!(cursor.starts_with_char('\\\\'));",
          "    assert!(cursor.starts_with_fn(|ch| ch == '\\''));",
          "    let chars = cursor.char_indices();",
          "    assert!(chars.clone().next().map(|(_, ch)| ch) == Some('\\\\'));",
          "    assert!(chars.clone().nth(1).map(|(_, ch)| ch) == Some('\\''));",
          "    assert!(chars.clone().nth(2).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\".to_string().as_str() };",
          "    let result = character(cursor);",
          "    assert!(result.is_ok());",
          "    let cursor_after = result.unwrap();",
          "    assert!(cursor_after.rest.starts_with(\"'\"));",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor_after != cursor);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\".to_string().as_str() };",
          "    let _result = character(cursor);",
          "    let cursor = Cursor { rest: \"'\\\\\\\"'\".to_string().as_str() };",
          "    let result = character(cursor);",
          "    assert!(result.is_ok());",
          "    let cursor_after = result.unwrap();",
          "    assert!(cursor_after.rest.starts_with(\"'\"));",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor_after != cursor);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]