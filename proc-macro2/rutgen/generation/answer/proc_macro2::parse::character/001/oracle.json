[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"abc\", off: 0 };",
          "    let _ = character(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(character(Cursor { rest: \"abc\", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"abc\", off: 0 };",
          "    let _ = character(cursor);",
          "    assert_eq!(character(Cursor { rest: \"abc\", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"   \", off: 0 };",
          "    let _ = character(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(character(Cursor { rest: \"   \", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"   \", off: 0 };",
          "    let _ = character(cursor);",
          "    assert_eq!(character(Cursor { rest: \"   \", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"x'y\", off: 0 };",
          "    let _ = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"x'y\", off: 0 };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"x'y\", off: 0 };",
          "    let _ = character(cursor);",
          "    let cursor = Cursor { rest: \"x'y\", off: 0 };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"xyz123\", off: 0 };",
          "    let _ = character(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(character(Cursor { rest: \"xyz123\", off: 0 }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"xyz123\", off: 0 };",
          "    let _ = character(cursor);",
          "    assert_eq!(character(Cursor { rest: \"xyz123\", off: 0 }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let _ = character(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "    let cursor_non_empty = Cursor { rest: \"a\", off: 0 };",
          "    let result_non_empty = character(cursor_non_empty);",
          "    assert!(result_non_empty.is_ok());",
          "    let cursor_with_invalid_escape = Cursor { rest: \"'\\\\z'\", off: 0 };",
          "    let result_invalid_escape = character(cursor_with_invalid_escape);",
          "    assert!(result_invalid_escape.is_err());",
          "    assert_eq!(result_invalid_escape.unwrap_err().to_string(), ERROR);",
          "    let cursor_with_multiple_escapes = Cursor { rest: \"'\\\\n\\\\t'\", off: 0 };",
          "    let result_multiple_escapes = character(cursor_with_multiple_escapes);",
          "    assert!(result_multiple_escapes.is_ok());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let _ = character(cursor);",
          "    let cursor = Cursor { rest: \"\", off: 0 };",
          "    let result = character(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "    let cursor_non_empty = Cursor { rest: \"a\", off: 0 };",
          "    let result_non_empty = character(cursor_non_empty);",
          "    assert!(result_non_empty.is_ok());",
          "    let cursor_with_invalid_escape = Cursor { rest: \"'\\\\z'\", off: 0 };",
          "    let result_invalid_escape = character(cursor_with_invalid_escape);",
          "    assert!(result_invalid_escape.is_err());",
          "    assert_eq!(result_invalid_escape.unwrap_err().to_string(), ERROR);",
          "    let cursor_with_multiple_escapes = Cursor { rest: \"'\\\\n\\\\t'\", off: 0 };",
          "    let result_multiple_escapes = character(cursor_with_multiple_escapes);",
          "    assert!(result_multiple_escapes.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]