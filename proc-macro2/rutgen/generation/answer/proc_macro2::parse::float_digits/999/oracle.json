[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"0..\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"0..\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = float_digits(input);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"0.a\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"0.a\", off: 0 };",
          "    let expected: Result<Cursor, Reject> = Err(Reject);",
          "    assert_eq!(float_digits(input), expected);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"0.a\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = float_digits(input);",
          "    let input = Cursor { rest: \"0.a\", off: 0 };",
          "    let expected: Result<Cursor, Reject> = Err(Reject);",
          "    assert_eq!(float_digits(input), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]