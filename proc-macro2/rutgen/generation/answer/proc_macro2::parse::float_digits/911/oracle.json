[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1.23e+45\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"1.23e+45\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1.23e+45\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"1.23e+45\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "    assert_eq!(result.unwrap().off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0.5E-12\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0.5E-12\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert!(new_cursor.is_empty());",
          "    assert!(new_cursor.starts_with(\"\"));",
          "    assert!(new_cursor.starts_with_char('E'));",
          "    assert!(new_cursor.starts_with_fn(|ch| ch == 'E' || ch == '-'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0.5E-12\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"0.5E-12\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert_eq!(new_cursor.rest, \"\");",
          "    assert!(new_cursor.is_empty());",
          "    assert!(new_cursor.starts_with(\"\"));",
          "    assert!(new_cursor.starts_with_char('E'));",
          "    assert!(new_cursor.starts_with_fn(|ch| ch == 'E' || ch == '-'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"12.34E56\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let cursor_advanced = _result.unwrap();",
          "    assert_eq!(cursor_advanced.rest, \"E56\");",
          "    assert_eq!(cursor_advanced.off, 0);",
          "    assert_eq!(cursor_advanced.rest.len(), 6);",
          "    assert!(cursor_advanced.starts_with(\"E56\"));",
          "    assert!(!cursor_advanced.is_empty());",
          "    assert!(cursor_advanced.starts_with_char('E'));",
          "    assert!(cursor_advanced.starts_with_fn(|c| c.is_digit(10)));",
          "    assert_eq!(cursor_advanced.len(), 6);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"12.34E56\" };",
          "    let _result = float_digits(cursor);",
          "    assert!(_result.is_ok());",
          "    let cursor_advanced = _result.unwrap();",
          "    assert_eq!(cursor_advanced.rest, \"E56\");",
          "    assert_eq!(cursor_advanced.off, 0);",
          "    assert_eq!(cursor_advanced.rest.len(), 6);",
          "    assert!(cursor_advanced.starts_with(\"E56\"));",
          "    assert!(!cursor_advanced.is_empty());",
          "    assert!(cursor_advanced.starts_with_char('E'));",
          "    assert!(cursor_advanced.starts_with_fn(|c| c.is_digit(10)));",
          "    assert_eq!(cursor_advanced.len(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]