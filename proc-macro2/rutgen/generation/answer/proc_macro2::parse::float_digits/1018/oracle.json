[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1.2e+3\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"1.2e+3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.5e-6\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"2.\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"10.5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12e10\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14e+15\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"4.2e-\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"5.e+3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"6_7.8\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"9_9.9e0\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"invalid\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1.2e+3\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"1.2e+3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.5e-6\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"2.\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"10.5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12e10\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14e+15\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"4.2e-\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"5.e+3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"6_7.8\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"9_9.9e0\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"invalid\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0.123\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"0.123\" }), Ok(Cursor { rest: \"123\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.0\" }), Ok(Cursor { rest: \"0\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123e45\" }), Ok(Cursor { rest: \"e45\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123e+5\" }), Ok(Cursor { rest: \"e+5\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123e-5\" }), Ok(Cursor { rest: \"e-5\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14e2\" }), Ok(Cursor { rest: \"e2\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"9.81e-10\" }), Ok(Cursor { rest: \"e-10\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"5e10\" }), Ok(Cursor { rest: \"10\" }));",
          "    assert!(float_digits(Cursor { rest: \"0.\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0..1\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0e\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0.123e+G\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0.123+\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \".\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"abc123\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0.123\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123\" }), Ok(Cursor { rest: \"123\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.0\" }), Ok(Cursor { rest: \"0\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123e45\" }), Ok(Cursor { rest: \"e45\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123e+5\" }), Ok(Cursor { rest: \"e+5\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.123e-5\" }), Ok(Cursor { rest: \"e-5\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14e2\" }), Ok(Cursor { rest: \"e2\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"9.81e-10\" }), Ok(Cursor { rest: \"e-10\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"5e10\" }), Ok(Cursor { rest: \"10\" }));",
          "    assert!(float_digits(Cursor { rest: \"0.\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0..1\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0e\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0.123e+G\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"0.123+\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \".\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"abc123\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"2.3e3\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"2.3e3\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(!new_cursor.is_empty());",
          "    assert_eq!(new_cursor.rest, \"\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"2.3e3\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"2.3e3\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(!new_cursor.is_empty());",
          "    assert_eq!(new_cursor.rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"10_000\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"10_000\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1e+2\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"1234.567e-8\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14\" }), Ok(Cursor { rest: \"\"}));",
          "    assert_eq!(float_digits(Cursor { rest: \"2.3.4\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \".5e2\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"1e1\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"1..2\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"1.2e+\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"1.2e-2\" }), Ok(Cursor { rest: \"\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"10_000\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"10_000\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1e+2\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"1234.567e-8\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14\" }), Ok(Cursor { rest: \"\"}));",
          "    assert_eq!(float_digits(Cursor { rest: \"2.3.4\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \".5e2\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"1e1\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"1..2\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"1.2e+\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"1.2e-2\" }), Ok(Cursor { rest: \"\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"10e-5\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"10e-5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"x\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"1.0.0\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"1e\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"5.5e+3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"1e3.5\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"12_34.56\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"+1.0\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"1.0e-10\" }), Ok(Cursor { rest: \"\" }));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"10e-5\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"10e-5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"x\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"1.0.0\" }).is_err());",
          "    assert!(float_digits(Cursor { rest: \"1e\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"5.5e+3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"3.14\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"1e3.5\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"12_34.56\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"+1.0\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"1.0e-10\" }), Ok(Cursor { rest: \"\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]