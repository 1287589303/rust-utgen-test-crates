[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1.0\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"1.0e2\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"e2\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0_3\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"_3\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0e+3\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"+3\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0e-3\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"-3\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0.2\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1._2\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1e2_\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1.0e\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1.0\", off: 0 };",
          "    float_digits(input);",
          "    let input = Cursor { rest: \"1.0e2\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"e2\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0_3\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"_3\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0e+3\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"+3\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0e-3\", off: 0 };",
          "    assert_eq!(float_digits(input), Ok(Cursor { rest: \"-3\", off: 0 }));",
          "    ",
          "    let input = Cursor { rest: \"1.0.2\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1._2\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1e2_\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1.0e\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1e10\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"1e10\", off: 0 }).is_ok(), true);",
          "    assert!(matches!(float_digits(Cursor { rest: \"1e10\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1e10\", off: 0 }), Ok(cursor) if cursor.rest == \"10\"));",
          "    assert_eq!(float_digits(Cursor { rest: \"1e10\", off: 0 }).unwrap().rest, \"10\");",
          "    assert!(float_digits(Cursor { rest: \"1e10\", off: 0 }).unwrap().rest.len() < 5);",
          "    assert!(float_digits(Cursor { rest: \"1e10\", off: 0 }).unwrap().rest.chars().all(|c| c.is_digit(10) || c == '_'));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1e10\", off: 0 };",
          "    float_digits(input);",
          "    assert_eq!(float_digits(Cursor { rest: \"1e10\", off: 0 }).is_ok(), true);",
          "    assert!(matches!(float_digits(Cursor { rest: \"1e10\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1e10\", off: 0 }), Ok(cursor) if cursor.rest == \"10\"));",
          "    assert_eq!(float_digits(Cursor { rest: \"1e10\", off: 0 }).unwrap().rest, \"10\");",
          "    assert!(float_digits(Cursor { rest: \"1e10\", off: 0 }).unwrap().rest.len() < 5);",
          "    assert!(float_digits(Cursor { rest: \"1e10\", off: 0 }).unwrap().rest.chars().all(|c| c.is_digit(10) || c == '_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1E-10\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).is_ok(), true);",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).unwrap().rest, \"-10\");",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).unwrap().off, 3);",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1E-10\", off: 0 };",
          "    float_digits(input);",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).is_ok(), true);",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).unwrap().rest, \"-10\");",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).unwrap().off, 3);",
          "    assert_eq!(float_digits(Cursor { rest: \"1E-10\", off: 0 }).unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1.0e+1\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"1.0e+1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0e\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "    let input = Cursor { rest: \"1.0e+1_2\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0e+_1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "    let input = Cursor { rest: \"1e10\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"0_0\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "    let input = Cursor { rest: \"1.e1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0e--1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1.0e+1\", off: 0 };",
          "    float_digits(input);",
          "    let input = Cursor { rest: \"1.0e+1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0e\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "    let input = Cursor { rest: \"1.0e+1_2\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0e+_1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "    let input = Cursor { rest: \"1e10\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"0_0\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "    let input = Cursor { rest: \"1.e1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_ok(), true);",
          "    let input = Cursor { rest: \"1.0e--1\", off: 0 };",
          "    assert_eq!(float_digits(input).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1_0.0\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"1_0.0\", off: 0 }), Ok(Cursor { rest: \".0\", off: 2 }));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0E\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E-\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E+3\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E4_\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E-4\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0..E-4\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0.5\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0..5\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_.0\", off: 0 }), Err(Reject)));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1_0.0\", off: 0 };",
          "    float_digits(input);",
          "    assert_eq!(float_digits(Cursor { rest: \"1_0.0\", off: 0 }), Ok(Cursor { rest: \".0\", off: 2 }));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0E\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E-\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E+3\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E4_\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0E-4\", off: 0 }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0..E-4\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0.0.5\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_0..5\", off: 0 }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"1_.0\", off: 0 }), Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1_0e-1\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"1_0e-1\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap().rest, \"\");"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1_0e-1\", off: 0 };",
          "    float_digits(input);",
          "    let input = Cursor { rest: \"1_0e-1\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap().rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"01.0.1\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"01.0.1\", off: 0 }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1_0e1\", off: 0 }), Ok(Cursor { rest: \"_e1\", off: 0 }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0_1.e+2\", off: 0 }), Ok(Cursor { rest: \"+2\", off: 0 }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0_1e-2\", off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1e10\", off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"01.0.1\", off: 0 };",
          "    float_digits(input);",
          "    assert_eq!(float_digits(Cursor { rest: \"01.0.1\", off: 0 }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1_0e1\", off: 0 }), Ok(Cursor { rest: \"_e1\", off: 0 }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0_1.e+2\", off: 0 }), Ok(Cursor { rest: \"+2\", off: 0 }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0_1e-2\", off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "    assert_eq!(float_digits(Cursor { rest: \"0.1e10\", off: 0 }), Ok(Cursor { rest: \"\", off: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"1e1.0\", off: 0 };",
          "    float_digits(input);",
          "}"
        ],
        "oracle": [
          "    assert!(float_digits(Cursor { rest: \"1e1.0\", off: 0 }).is_ok());",
          "    let result = float_digits(Cursor { rest: \"1e1.0\", off: 0 }).unwrap();",
          "    assert_eq!(result.rest, \"0\");",
          "    assert!(result.off > 0);",
          "    assert!(result.rest.len() < 6);",
          "    assert!(result.rest.chars().all(|c| c.is_digit(10) || c == 'e' || c == 'E' || c == '.'));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"1e1.0\", off: 0 };",
          "    float_digits(input);",
          "    assert!(float_digits(Cursor { rest: \"1e1.0\", off: 0 }).is_ok());",
          "    let result = float_digits(Cursor { rest: \"1e1.0\", off: 0 }).unwrap();",
          "    assert_eq!(result.rest, \"0\");",
          "    assert!(result.off > 0);",
          "    assert!(result.rest.len() < 6);",
          "    assert!(result.rest.chars().all(|c| c.is_digit(10) || c == 'e' || c == 'E' || c == '.'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]