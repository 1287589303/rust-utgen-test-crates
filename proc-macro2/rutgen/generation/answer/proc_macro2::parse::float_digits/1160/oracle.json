[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1_2E\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Cursor { rest: \"E\" }));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(matches!(_result, Err(Reject)) == false);",
          "    assert!(cursor.rest.len() > 0);",
          "    assert!(cursor.rest.starts_with(\"1_2E\"));",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor.advance(1).rest == \"2E\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1_2E\" };",
          "    let _result = float_digits(cursor);",
          "    assert_eq!(_result, Ok(Cursor { rest: \"E\" }));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(matches!(_result, Err(Reject)) == false);",
          "    assert!(cursor.rest.len() > 0);",
          "    assert!(cursor.rest.starts_with(\"1_2E\"));",
          "    assert!(cursor.is_empty() == false);",
          "    assert!(cursor.advance(1).rest == \"2E\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    let result = float_digits(cursor).unwrap();",
          "    assert!(result.rest.is_empty());",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    let result = float_digits(cursor).unwrap();",
          "    assert!(result.rest == \"\");",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    assert!(result.off == 0);",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    assert!(float_digits(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"1_2\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"2.5E+\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"3E2\" };",
          "    let result = float_digits(cursor).unwrap();",
          "    assert!(result.rest.is_empty());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    let result = float_digits(cursor).unwrap();",
          "    assert!(result.rest.is_empty());",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    let result = float_digits(cursor).unwrap();",
          "    assert!(result.rest == \"\");",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    assert!(result.off == 0);",
          "    let cursor = Cursor { rest: \"1_2E+\" };",
          "    assert!(float_digits(cursor).is_ok());",
          "    let cursor = Cursor { rest: \"1_2\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"2.5E+\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"3E2\" };",
          "    let result = float_digits(cursor).unwrap();",
          "    assert!(result.rest.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1.2E+\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    let (next_cursor, _) = _result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"\");",
          "    assert!(!next_cursor.starts_with(\".\"));",
          "    assert!(next_cursor.starts_with_char('E'));",
          "    assert!(next_cursor.starts_with_char('+'));",
          "    assert!(next_cursor.is_empty() == true);",
          "    assert_eq!(next_cursor.len(), 0);",
          "    assert!(next_cursor.rest.chars().all(|c| c.is_numeric() || c == '.' || c == 'E' || c == '+' || c == '-'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1.2E+\" };",
          "    let _result = float_digits(cursor);",
          "    assert!(_result.is_ok());",
          "    let (next_cursor, _) = _result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"\");",
          "    assert!(!next_cursor.starts_with(\".\"));",
          "    assert!(next_cursor.starts_with_char('E'));",
          "    assert!(next_cursor.starts_with_char('+'));",
          "    assert!(next_cursor.is_empty() == true);",
          "    assert_eq!(next_cursor.len(), 0);",
          "    assert!(next_cursor.rest.chars().all(|c| c.is_numeric() || c == '.' || c == 'E' || c == '+' || c == '-'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1_2E-\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(Reject));",
          "    assert!(matches!(_result, Err(Reject)));",
          "    assert!(_result.is_err());",
          "    assert!(cursor.rest == \"1_2E-\");",
          "    assert!(cursor.rest.len() == 6);",
          "    assert!(cursor.starts_with(\"1_2E-\"));",
          "    assert!(!cursor.is_empty());",
          "    assert_eq!(cursor.advance(2).rest, \"_2E-\");",
          "    assert!(_result.is_ok() == false);",
          "    assert!(cursor.chars().count() == 5);",
          "    assert!(!cursor.starts_with_char(' '));",
          "    assert!(cursor.starts_with(\"1\"));",
          "    assert!(cursor.peek().is_some());",
          "    assert!(cursor.advance(0).rest == \"1_2E-\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1_2E-\" };",
          "    let _result = float_digits(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    assert!(matches!(_result, Err(Reject)));",
          "    assert!(_result.is_err());",
          "    assert!(cursor.rest == \"1_2E-\");",
          "    assert!(cursor.rest.len() == 6);",
          "    assert!(cursor.starts_with(\"1_2E-\"));",
          "    assert!(!cursor.is_empty());",
          "    assert_eq!(cursor.advance(2).rest, \"_2E-\");",
          "    assert!(_result.is_ok() == false);",
          "    assert!(cursor.chars().count() == 5);",
          "    assert!(!cursor.starts_with_char(' '));",
          "    assert!(cursor.starts_with(\"1\"));",
          "    assert!(cursor.peek().is_some());",
          "    assert!(cursor.advance(0).rest == \"1_2E-\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1__2E\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    let cursor = Cursor { rest: \"1__2E\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(new_cursor.rest == \"\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1__2E\" };",
          "    let _result = float_digits(cursor);",
          "    plaintext",
          "    let cursor = Cursor { rest: \"1__2E\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, _) = result.unwrap();",
          "    assert!(new_cursor.rest == \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]