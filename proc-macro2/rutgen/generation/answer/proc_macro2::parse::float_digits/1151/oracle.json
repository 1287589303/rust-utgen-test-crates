[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0_._1e+2\" };",
          "    let result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(Reject)));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.is_ok(), false);",
          "    assert!(result.err().is_some());",
          "    assert!(result.unwrap_err().is::<Reject>());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "    assert!(result.is_err());",
          "    assert!(result.is_err());",
          "    assert!(result.err().is_some());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0_._1e+2\" };",
          "    let result = float_digits(cursor);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.is_ok(), false);",
          "    assert!(result.err().is_some());",
          "    assert!(result.unwrap_err().is::<Reject>());",
          "    assert_eq!(result.unwrap_err().to_string(), ERROR);",
          "    assert!(result.is_err());",
          "    assert!(result.is_err());",
          "    assert!(result.err().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0_1e+2\" };",
          "    let result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0_1e+2\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert_eq!(advanced_cursor.rest, \"\");",
          "    assert!(advanced_cursor.starts_with(\"\"));",
          "    assert!(advanced_cursor.is_empty());",
          "    assert!(advanced_cursor.chars().count() == 0);",
          "    assert!(advanced_cursor.bytes().is_empty());",
          "    assert!(advanced_cursor.len() == 0);",
          "    assert!(advanced_cursor.as_bytes() == &[]);",
          "    assert!(advanced_cursor.starts_with_char('0'));",
          "    assert!(advanced_cursor.starts_with_fn(|ch| ch == 'e'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0_1e+2\" };",
          "    let result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"0_1e+2\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let advanced_cursor = result.unwrap();",
          "    assert_eq!(advanced_cursor.rest, \"\");",
          "    assert!(advanced_cursor.starts_with(\"\"));",
          "    assert!(advanced_cursor.is_empty());",
          "    assert!(advanced_cursor.chars().count() == 0);",
          "    assert!(advanced_cursor.bytes().is_empty());",
          "    assert!(advanced_cursor.len() == 0);",
          "    assert!(advanced_cursor.as_bytes() == &[]);",
          "    assert!(advanced_cursor.starts_with_char('0'));",
          "    assert!(advanced_cursor.starts_with_fn(|ch| ch == 'e'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0_1e-2\" };",
          "    let result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"\");",
          "    assert_eq!(next_cursor.off, 0);",
          "    assert!(result.map(|(_, res)| res).is_ok());",
          "    assert!(result.map(|(_, res)| matches!(res, Ok(_))).unwrap());",
          "    assert!(result.is_ok());",
          "    assert!(next_cursor.starts_with(\"\"));",
          "    assert!(next_cursor.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0_1e-2\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert_eq!(next_cursor.rest, \"\");",
          "    assert_eq!(next_cursor.off, 0);",
          "    assert!(result.map(|(_, res)| res).is_ok());",
          "    assert!(result.map(|(_, res)| matches!(res, Ok(_))).unwrap());",
          "    assert!(result.is_ok());",
          "    assert!(next_cursor.starts_with(\"\"));",
          "    assert!(next_cursor.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0_1e+_\" };",
          "    let result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(chars.peek().is_some());",
          "    assert_eq!(chars.peek(), Some(&'_'));",
          "    assert!(has_dot == false);",
          "    assert!(has_exp == true);",
          "    assert!(has_exp_value == false);",
          "    assert!(token_before_exp.is_err());",
          "    assert_eq!(token_before_exp.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0_1e+_\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(chars.peek().is_some());",
          "    assert_eq!(chars.peek(), Some(&'_'));",
          "    assert!(has_dot == false);",
          "    assert!(has_exp == true);",
          "    assert!(has_exp_value == false);",
          "    assert!(token_before_exp.is_err());",
          "    assert_eq!(token_before_exp.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]