[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"a\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"a\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"a\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"a\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"#10\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"#10\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"#10\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"#10\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"e10\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"e10\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"e10\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"e10\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"0.1.2\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"a.1\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1.2e3\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_ne!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"12.34e+56\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_ne!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"5e-3\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_ne!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \".5e3\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"0.1.2\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"a.1\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"1.2e3\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_ne!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"12.34e+56\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_ne!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \"5e-3\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_ne!(result, Err(Reject));",
          "    ",
          "    let input = Cursor { rest: \".5e3\", off: 0 };",
          "    let result = float_digits(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"12.34e\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"ab\", off: 0 }; assert_eq!(float_digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"12.34e\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"ab\", off: 0 }; assert_eq!(float_digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"2..3\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"2..3\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"2..3\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"2..3\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"9a\", off: 0 };",
          "    let _ = float_digits(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"9a\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"9a\", off: 0 };",
          "    let _ = float_digits(input);",
          "    let input = Cursor { rest: \"9a\", off: 0 };",
          "    assert_eq!(float_digits(input), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]