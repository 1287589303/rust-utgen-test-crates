[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"3.5E+2\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(cursor.advance(6)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_eq!(cursor.rest, \"3.5E+2\");",
          "    assert!(cursor.starts_with(\"3.5E+2\"));",
          "    assert!(!cursor.is_empty());",
          "    assert!(cursor.chars().count() > 0);",
          "    assert_eq!(cursor.len(), 6);",
          "    assert!(cursor.starts_with_char('3'));",
          "    assert!(cursor.starts_with_fn(|ch| ch.is_digit(10)));",
          "    assert!(cursor.bytes().len() >= 6);",
          "    assert!(cursor.char_indices().count() >= 6);",
          "    assert!(cursor.as_bytes().len() >= 6);",
          "    assert_eq!(chars.peek().unwrap(), 'E');",
          "    assert!(chars.next().is_some());",
          "    assert!(chars.peek().is_some());",
          "    assert!(has_exp);",
          "    assert!(has_dot);",
          "    assert!(has_sign);",
          "    assert!(has_exp_value);",
          "    assert!(matches!(_result, Ok(Cursor { .. })));",
          "    assert!(input.is_empty() == false);",
          "    assert!(matches!(input.parse(\"tag\"), Err(Reject)));",
          "    assert!(len > 0);",
          "    assert!(chars.peek().map_or(false, |&ch| ch == '+' || ch == '-'));",
          "    assert!(chars.peek().map_or(false, |&ch| ch.is_digit(10)));",
          "    assert!(chars.peek().is_some() && chars.peek() == Some(&'_'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"3.5E+2\" };",
          "    let _result = float_digits(cursor);",
          "    assert_eq!(_result, Ok(cursor.advance(6)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_eq!(cursor.rest, \"3.5E+2\");",
          "    assert!(cursor.starts_with(\"3.5E+2\"));",
          "    assert!(!cursor.is_empty());",
          "    assert!(cursor.chars().count() > 0);",
          "    assert_eq!(cursor.len(), 6);",
          "    assert!(cursor.starts_with_char('3'));",
          "    assert!(cursor.starts_with_fn(|ch| ch.is_digit(10)));",
          "    assert!(cursor.bytes().len() >= 6);",
          "    assert!(cursor.char_indices().count() >= 6);",
          "    assert!(cursor.as_bytes().len() >= 6);",
          "    assert_eq!(chars.peek().unwrap(), 'E');",
          "    assert!(chars.next().is_some());",
          "    assert!(chars.peek().is_some());",
          "    assert!(has_exp);",
          "    assert!(has_dot);",
          "    assert!(has_sign);",
          "    assert!(has_exp_value);",
          "    assert!(matches!(_result, Ok(Cursor { .. })));",
          "    assert!(input.is_empty() == false);",
          "    assert!(matches!(input.parse(\"tag\"), Err(Reject)));",
          "    assert!(len > 0);",
          "    assert!(chars.peek().map_or(false, |&ch| ch == '+' || ch == '-'));",
          "    assert!(chars.peek().map_or(false, |&ch| ch.is_digit(10)));",
          "    assert!(chars.peek().is_some() && chars.peek() == Some(&'_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"4.0e-1\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap().rest, \"\");",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(matches!(_result, Err(Reject)) == false);",
          "    assert!(matches!(_result.unwrap().rest, \"\") || matches!(_result.unwrap().rest, \"e\" | \"E\" | \"0\" | \"1\" | \".\" | \"-\" | \"+\" | \"_\"));",
          "    assert!(matches!(_result.unwrap(), Cursor { rest: \"\" }));",
          "    assert_eq!(_result.unwrap().chars().count(), 0);",
          "    assert!(cursor.starts_with(\"4.0e-1\"));",
          "    assert!(cursor.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"4.0e-1\" };",
          "    let _result = float_digits(cursor);",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap().rest, \"\");",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert!(matches!(_result, Err(Reject)) == false);",
          "    assert!(matches!(_result.unwrap().rest, \"\") || matches!(_result.unwrap().rest, \"e\" | \"E\" | \"0\" | \"1\" | \".\" | \"-\" | \"+\" | \"_\"));",
          "    assert!(matches!(_result.unwrap(), Cursor { rest: \"\" }));",
          "    assert_eq!(_result.unwrap().chars().count(), 0);",
          "    assert!(cursor.starts_with(\"4.0e-1\"));",
          "    assert!(cursor.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"2_3.0_1E+4\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor_valid = Cursor { rest: \"2_3.0_1E+4\" };",
          "    let cursor_invalid_char = Cursor { rest: \"2_3.0_1E+\" };",
          "    let cursor_no_exp = Cursor { rest: \"2_3.0_\" };",
          "    let cursor_no_digits = Cursor { rest: \"E+4\" };",
          "    let cursor_multiple_dots = Cursor { rest: \"2.3.0E+4\" };",
          "    let cursor_invalid_exponent_sign = Cursor { rest: \"2.3E++4\" };",
          "    let cursor_only_sign_exp = Cursor { rest: \"2.3E+\" };",
          "    let cursor_underscore_in_exp = Cursor { rest: \"2.3E+_4\" };",
          "    let cursor_no_value_exp = Cursor { rest: \"2.3E+\" };",
          "    let cursor_digit_exp = Cursor { rest: \"2.3E4\" };",
          "    let cursor_underscore_in_number = Cursor { rest: \"2_3.0E3\" };",
          "    let cursor_missing_digit_after_exp = Cursor { rest: \"2.3E\" };",
          "    ",
          "    assert_eq!(float_digits(cursor_valid), Ok(cursor_valid.advance(10)));",
          "    assert_eq!(float_digits(cursor_invalid_char), Err(Reject));",
          "    assert_eq!(float_digits(cursor_no_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_no_digits), Err(Reject));",
          "    assert_eq!(float_digits(cursor_multiple_dots), Err(Reject));",
          "    assert_eq!(float_digits(cursor_invalid_exponent_sign), Err(Reject));",
          "    assert_eq!(float_digits(cursor_only_sign_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_underscore_in_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_no_value_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_digit_exp), Ok(cursor_valid.advance(8)));",
          "    assert_eq!(float_digits(cursor_underscore_in_number), Ok(cursor_valid.advance(8)));",
          "    assert_eq!(float_digits(cursor_missing_digit_after_exp), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"2_3.0_1E+4\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor_valid = Cursor { rest: \"2_3.0_1E+4\" };",
          "    let cursor_invalid_char = Cursor { rest: \"2_3.0_1E+\" };",
          "    let cursor_no_exp = Cursor { rest: \"2_3.0_\" };",
          "    let cursor_no_digits = Cursor { rest: \"E+4\" };",
          "    let cursor_multiple_dots = Cursor { rest: \"2.3.0E+4\" };",
          "    let cursor_invalid_exponent_sign = Cursor { rest: \"2.3E++4\" };",
          "    let cursor_only_sign_exp = Cursor { rest: \"2.3E+\" };",
          "    let cursor_underscore_in_exp = Cursor { rest: \"2.3E+_4\" };",
          "    let cursor_no_value_exp = Cursor { rest: \"2.3E+\" };",
          "    let cursor_digit_exp = Cursor { rest: \"2.3E4\" };",
          "    let cursor_underscore_in_number = Cursor { rest: \"2_3.0E3\" };",
          "    let cursor_missing_digit_after_exp = Cursor { rest: \"2.3E\" };",
          "    ",
          "    assert_eq!(float_digits(cursor_valid), Ok(cursor_valid.advance(10)));",
          "    assert_eq!(float_digits(cursor_invalid_char), Err(Reject));",
          "    assert_eq!(float_digits(cursor_no_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_no_digits), Err(Reject));",
          "    assert_eq!(float_digits(cursor_multiple_dots), Err(Reject));",
          "    assert_eq!(float_digits(cursor_invalid_exponent_sign), Err(Reject));",
          "    assert_eq!(float_digits(cursor_only_sign_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_underscore_in_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_no_value_exp), Err(Reject));",
          "    assert_eq!(float_digits(cursor_digit_exp), Ok(cursor_valid.advance(8)));",
          "    assert_eq!(float_digits(cursor_underscore_in_number), Ok(cursor_valid.advance(8)));",
          "    assert_eq!(float_digits(cursor_missing_digit_after_exp), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"5..3E1\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"5..3E1\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E+1\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"5.3E-1\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"5.3E1\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"5.3E\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E+1.2\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E1_\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3.3\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E1_1\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5_.3E1\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"5..3E1\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"5..3E1\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E+1\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"5.3E-1\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"5.3E1\" };",
          "    assert!(matches!(float_digits(cursor), Ok(_)));",
          "    let cursor = Cursor { rest: \"5.3E\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E+1.2\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E1_\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3.3\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5.3E1_1\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "    let cursor = Cursor { rest: \"5_.3E1\" };",
          "    assert!(matches!(float_digits(cursor), Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"1.5E\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"1.5E\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    assert_eq!(next_cursor.rest, \"\");",
          "    let second_cursor = next_cursor.advance(0);",
          "    assert!(second_cursor.starts_with_char('E'));",
          "    assert!(second_cursor.starts_with_fn(|c| c == 'E' || c == 'e'));",
          "    assert!(second_cursor.chars().all(|c| c.is_digit(10) || c == '+' || c == '-' || c == '_'));",
          "    assert_eq!(result.unwrap().0.rest, \"\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"1.5E\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"1.5E\" };",
          "    let result = float_digits(cursor);",
          "    assert!(result.is_ok());",
          "    let (next_cursor, _) = result.unwrap();",
          "    assert!(!next_cursor.is_empty());",
          "    assert_eq!(next_cursor.rest, \"\");",
          "    let second_cursor = next_cursor.advance(0);",
          "    assert!(second_cursor.starts_with_char('E'));",
          "    assert!(second_cursor.starts_with_fn(|c| c == 'E' || c == 'e'));",
          "    assert!(second_cursor.chars().all(|c| c.is_digit(10) || c == '+' || c == '-' || c == '_'));",
          "    assert_eq!(result.unwrap().0.rest, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"6.3E+\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(cursor.advance(5)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_eq!(cursor.rest, \"3E+\");",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.\" }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E\" }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E+\" }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E-5\" }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E+0\" }), Ok(_)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"6.3E+\" };",
          "    let _result = float_digits(cursor);",
          "    assert_eq!(_result, Ok(cursor.advance(5)));",
          "    assert!(matches!(_result, Ok(_)));",
          "    assert_eq!(cursor.rest, \"3E+\");",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.\" }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E\" }), Err(Reject)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E+\" }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E-5\" }), Ok(_)));",
          "    assert!(matches!(float_digits(Cursor { rest: \"6.3E+0\" }), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"9.8E++1\" };",
          "    let _result = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"9.8E++1\" };",
          "    assert_eq!(_result, Err(Reject));",
          "    assert!(cursor.starts_with(\"9.8E++1\"));",
          "    assert!(cursor.rest.is_empty());",
          "    assert!(cursor.len() == 7);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"9.8E++1\" };",
          "    let _result = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"9.8E++1\" };",
          "    assert_eq!(_result, Err(Reject));",
          "    assert!(cursor.starts_with(\"9.8E++1\"));",
          "    assert!(cursor.rest.is_empty());",
          "    assert!(cursor.len() == 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]