[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"0\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"0\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"9\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"00\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"123\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"456\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"789\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"0.1\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(3)));",
          "    let cursor = Cursor { rest: \"123.456e\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(8)));",
          "    let cursor = Cursor { rest: \"0e+10\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(5)));",
          "    let cursor = Cursor { rest: \"9.8e-5\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(7)));",
          "    let cursor = Cursor { rest: \"12.34E56\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(9)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"0\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"0\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"9\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"00\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"123\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"456\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"789\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"0.1\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(3)));",
          "    let cursor = Cursor { rest: \"123.456e\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(8)));",
          "    let cursor = Cursor { rest: \"0e+10\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(5)));",
          "    let cursor = Cursor { rest: \"9.8e-5\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(7)));",
          "    let cursor = Cursor { rest: \"12.34E56\" };",
          "    assert_eq!(float_digits(cursor), Ok(cursor.advance(9)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"4\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"4\" }).is_err(), true);",
          "    assert_eq!(float_digits(Cursor { rest: \"4\" }).unwrap_err() as *const _ as usize, &Reject as *const _ as usize);",
          "    assert!(float_digits(Cursor { rest: \"4\" }).unwrap_err().is_a::<Reject>());",
          "    assert!(float_digits(Cursor { rest: \"4\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"4\" }).unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"4\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"4\" }).is_err(), true);",
          "    assert_eq!(float_digits(Cursor { rest: \"4\" }).unwrap_err() as *const _ as usize, &Reject as *const _ as usize);",
          "    assert!(float_digits(Cursor { rest: \"4\" }).unwrap_err().is_a::<Reject>());",
          "    assert!(float_digits(Cursor { rest: \"4\" }).is_err());",
          "    assert_eq!(float_digits(Cursor { rest: \"4\" }).unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"5_6\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"5_6\" };",
          "    let result = float_digits(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"5_6\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"5_6\" };",
          "    let result = float_digits(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"123456\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"123456\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"0\" }).is_ok());",
          "    assert!(float_digits(Cursor { rest: \"9\" }).is_ok());",
          "    assert!(float_digits(Cursor { rest: \"12_34\" }).is_ok());",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12e3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e+5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e-5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e5_'some_invalid_character'\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e5.6\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12..34\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e+\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e-+\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"123456\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"123456\" }), Ok(Cursor { rest: \"\" }));",
          "    assert!(float_digits(Cursor { rest: \"0\" }).is_ok());",
          "    assert!(float_digits(Cursor { rest: \"9\" }).is_ok());",
          "    assert!(float_digits(Cursor { rest: \"12_34\" }).is_ok());",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12e3\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e+5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e-5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e5\" }), Ok(Cursor { rest: \"\" }));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e5_'some_invalid_character'\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e5.6\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12..34\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e+\" }), Err(Reject));",
          "    assert_eq!(float_digits(Cursor { rest: \"12.34e-+\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"789abc\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(float_digits(Cursor { rest: \"789abc\" }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"789abc\" };",
          "    let _ = float_digits(cursor);",
          "    assert!(float_digits(Cursor { rest: \"789abc\" }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"00_0_7\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"00_0_7\" };",
          "    let result = float_digits(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"00_0_7\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"00_0_7\" };",
          "    let result = float_digits(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"3_6\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(float_digits(Cursor { rest: \"3_6\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"3_6\" };",
          "    let _ = float_digits(cursor);",
          "    assert_eq!(float_digits(Cursor { rest: \"3_6\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"8.a\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"8.a\" };",
          "    let result = float_digits(cursor);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"8.a\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"8.a\" };",
          "    let result = float_digits(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"2e\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"2e\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"2e\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"2e\" };",
          "    assert_eq!(float_digits(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"9e+\" };",
          "    let _ = float_digits(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"9e+\" }; assert_eq!(float_digits(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"9e+\" };",
          "    let _ = float_digits(cursor);",
          "    let cursor = Cursor { rest: \"9e+\" }; assert_eq!(float_digits(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]