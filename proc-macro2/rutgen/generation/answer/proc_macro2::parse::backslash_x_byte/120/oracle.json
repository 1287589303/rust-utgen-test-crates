[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let input = vec![(0, b'g'), (1, b'1')].into_iter();",
          "    let mut chars = input;",
          "    let _ = backslash_x_byte(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(backslash_x_byte(&mut vec![(0, b'g'), (1, b'1')].into_iter()), Err(Reject)));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, b'g'), (1, b'1')].into_iter();",
          "    let mut chars = input;",
          "    let _ = backslash_x_byte(&mut chars);",
          "    assert!(matches!(backslash_x_byte(&mut vec![(0, b'g'), (1, b'1')].into_iter()), Err(Reject)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let input = vec![(0, b'1'), (1, b'z')].into_iter();",
          "    let mut chars = input;",
          "    let _ = backslash_x_byte(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(backslash_x_byte(&mut vec![(0, b'1'), (1, b'z')].into_iter()), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, b'1'), (1, b'z')].into_iter();",
          "    let mut chars = input;",
          "    let _ = backslash_x_byte(&mut chars);",
          "    assert_eq!(backslash_x_byte(&mut vec![(0, b'1'), (1, b'z')].into_iter()), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let input = vec![(0, b'z'), (1, b'y')].into_iter();",
          "    let mut chars = input;",
          "    let _ = backslash_x_byte(&mut chars);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(backslash_x_byte(&mut vec![(0, b'z'), (1, b'y')].into_iter()), Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = vec![(0, b'z'), (1, b'y')].into_iter();",
          "    let mut chars = input;",
          "    let _ = backslash_x_byte(&mut chars);",
          "    assert_eq!(backslash_x_byte(&mut vec![(0, b'z'), (1, b'y')].into_iter()), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]