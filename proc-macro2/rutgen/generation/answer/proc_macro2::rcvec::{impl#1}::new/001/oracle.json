[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder: RcVecBuilder<i32> = RcVecBuilder::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<i32>>());",
          "    assert!(Rc::strong_count(&builder.inner).is_zero());"
        ],
        "code": [
          "{",
          "    let builder: RcVecBuilder<i32> = RcVecBuilder::new();",
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<i32>>());",
          "    assert!(Rc::strong_count(&builder.inner).is_zero());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder: RcVecBuilder<String> = RcVecBuilder::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<String>>());"
        ],
        "code": [
          "{",
          "    let builder: RcVecBuilder<String> = RcVecBuilder::new();",
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    assert_eq!(mem::size_of_val(&builder.inner), mem::size_of::<Vec<String>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]