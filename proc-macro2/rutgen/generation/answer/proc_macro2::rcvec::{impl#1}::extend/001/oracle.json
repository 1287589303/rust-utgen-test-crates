[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter: Vec<i32> = vec![];",
          "    builder.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    builder.extend(vec![1, 2, 3]);",
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[0], 1);",
          "    assert_eq!(builder.inner[1], 2);",
          "    assert_eq!(builder.inner[2], 3);",
          "    builder.extend(vec![4, 5]);",
          "    assert_eq!(builder.inner.len(), 5);",
          "    assert_eq!(builder.inner[3], 4);",
          "    assert_eq!(builder.inner[4], 5);",
          "    builder.extend(vec![]);",
          "    assert_eq!(builder.inner.len(), 5);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter: Vec<i32> = vec![];",
          "    builder.extend(iter);",
          "    assert_eq!(builder.inner.len(), 0);",
          "    assert!(builder.inner.is_empty());",
          "    builder.extend(vec![1, 2, 3]);",
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[0], 1);",
          "    assert_eq!(builder.inner[1], 2);",
          "    assert_eq!(builder.inner[2], 3);",
          "    builder.extend(vec![4, 5]);",
          "    assert_eq!(builder.inner.len(), 5);",
          "    assert_eq!(builder.inner[3], 4);",
          "    assert_eq!(builder.inner[4], 5);",
          "    builder.extend(vec![]);",
          "    assert_eq!(builder.inner.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter = vec![42];",
          "    builder.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 42);",
          "    assert!(builder.inner.capacity() >= 1);",
          "    assert_eq!(builder.inner, vec![42]);",
          "    assert!(builder.inner.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter = vec![42];",
          "    builder.extend(iter);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 42);",
          "    assert!(builder.inner.capacity() >= 1);",
          "    assert_eq!(builder.inner, vec![42]);",
          "    assert!(builder.inner.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter = vec![1, 2, 3, 4, 5];",
          "    builder.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 5);",
          "    assert_eq!(builder.inner[0], 1);",
          "    assert_eq!(builder.inner[1], 2);",
          "    assert_eq!(builder.inner[2], 3);",
          "    assert_eq!(builder.inner[3], 4);",
          "    assert_eq!(builder.inner[4], 5);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter = vec![1, 2, 3, 4, 5];",
          "    builder.extend(iter);",
          "    assert_eq!(builder.inner.len(), 5);",
          "    assert_eq!(builder.inner[0], 1);",
          "    assert_eq!(builder.inner[1], 2);",
          "    assert_eq!(builder.inner[2], 3);",
          "    assert_eq!(builder.inner[3], 4);",
          "    assert_eq!(builder.inner[4], 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::with_capacity(3);",
          "    let iter = vec![6, 7, 8, 9, 10];",
          "    builder.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 5);",
          "    assert_eq!(builder.inner[0], 6);",
          "    assert_eq!(builder.inner[1], 7);",
          "    assert_eq!(builder.inner[2], 8);",
          "    assert_eq!(builder.inner[3], 9);",
          "    assert_eq!(builder.inner[4], 10);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::with_capacity(3);",
          "    let iter = vec![6, 7, 8, 9, 10];",
          "    builder.extend(iter);",
          "    assert_eq!(builder.inner.len(), 5);",
          "    assert_eq!(builder.inner[0], 6);",
          "    assert_eq!(builder.inner[1], 7);",
          "    assert_eq!(builder.inner[2], 8);",
          "    assert_eq!(builder.inner[3], 9);",
          "    assert_eq!(builder.inner[4], 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MixedType;",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter: Vec<MixedType> = vec![MixedType, MixedType];",
          "    builder.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 2);",
          "    assert!(builder.inner.get(0).is_some());",
          "    assert!(builder.inner.get(1).is_some());",
          "    assert_eq!(builder.inner.get(0).unwrap().type_id(), std::any::TypeId::of::<MixedType>());",
          "    assert_eq!(builder.inner.get(1).unwrap().type_id(), std::any::TypeId::of::<MixedType>());"
        ],
        "code": [
          "{",
          "    struct MixedType;",
          "    let mut builder = RcVecBuilder::new();",
          "    let iter: Vec<MixedType> = vec![MixedType, MixedType];",
          "    builder.extend(iter);",
          "    assert_eq!(builder.inner.len(), 2);",
          "    assert!(builder.inner.get(0).is_some());",
          "    assert!(builder.inner.get(1).is_some());",
          "    assert_eq!(builder.inner.get(0).unwrap().type_id(), std::any::TypeId::of::<MixedType>());",
          "    assert_eq!(builder.inner.get(1).unwrap().type_id(), std::any::TypeId::of::<MixedType>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = core::usize::MAX;",
          "    let mut builder = RcVecBuilder::with_capacity(capacity);",
          "    let iter = vec![1; capacity];",
          "    builder.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), capacity);",
          "    assert_eq!(builder.inner.capacity(), capacity);",
          "    assert!(builder.inner.iter().all(|&x| x == 1));",
          "    assert!(builder.inner.iter().len() <= capacity);",
          "    assert!(capacity > 0);"
        ],
        "code": [
          "{",
          "    let capacity = core::usize::MAX;",
          "    let mut builder = RcVecBuilder::with_capacity(capacity);",
          "    let iter = vec![1; capacity];",
          "    builder.extend(iter);",
          "    assert_eq!(builder.inner.len(), capacity);",
          "    assert_eq!(builder.inner.capacity(), capacity);",
          "    assert!(builder.inner.iter().all(|&x| x == 1));",
          "    assert!(builder.inner.iter().len() <= capacity);",
          "    assert!(capacity > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]