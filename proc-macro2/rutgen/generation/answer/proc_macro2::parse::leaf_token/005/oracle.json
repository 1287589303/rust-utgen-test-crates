[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"+some_identifier\" };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"+some_identifier\" };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    match token_tree {",
          "    TokenTree::Literal(_) => panic!(\"Expected TokenTree to not be Literal\"),",
          "    _ => {}",
          "    }"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"+some_identifier\" };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"+some_identifier\" };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    match token_tree {",
          "    TokenTree::Literal(_) => panic!(\"Expected TokenTree to not be Literal\"),",
          "    _ => {}",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"some_id\" };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().is_instance_of::<Reject>());",
          "    assert!(cursor.rest == \"some_id\");",
          "    assert!(result.is_ok() == false);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert!(cursor.starts_with(ERROR) == false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"some_id\" };",
          "    let result = leaf_token(cursor);",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err().is_instance_of::<Reject>());",
          "    assert!(cursor.rest == \"some_id\");",
          "    assert!(result.is_ok() == false);",
          "    assert!(matches!(result, Err(Reject)));",
          "    assert!(cursor.starts_with(ERROR) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"some_invalid_literal/*ERROR*/\" };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"some_invalid_literal/*ERROR*/\" };",
          "    let expected_result = Ok((Cursor { rest: \"/*ERROR*/\" }, TokenTree::Literal(crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned())))));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"some_invalid_literal/*ERROR*/\" };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"some_invalid_literal/*ERROR*/\" };",
          "    let expected_result = Ok((Cursor { rest: \"/*ERROR*/\" }, TokenTree::Literal(crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned())))));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"valid_token\" };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"valid_token\" };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    if let Ok((input, token_tree)) = result {",
          "    match token_tree {",
          "    TokenTree::Literal(_) => {}",
          "    _ => panic!(\"Expected TokenTree::Literal\")",
          "    }",
          "    } else {",
          "    panic!(\"Expected Ok result\");",
          "    }",
          "    assert_eq!(result, Ok((cursor, TokenTree::Literal(crate::Literal::_new_fallback(...)))));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"valid_token\" };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"valid_token\" };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    if let Ok((input, token_tree)) = result {",
          "    match token_tree {",
          "    TokenTree::Literal(_) => {}",
          "    _ => panic!(\"Expected TokenTree::Literal\")",
          "    }",
          "    } else {",
          "    panic!(\"Expected Ok result\");",
          "    }",
          "    assert_eq!(result, Ok((cursor, TokenTree::Literal(crate::Literal::_new_fallback(...)))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]