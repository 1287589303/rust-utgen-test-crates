[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"\" };",
          "    let result = leaf_token(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"\" };",
          "    let result = leaf_token(input);",
          "    let input = Cursor { rest: \"\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"invalid\" };",
          "    let result = leaf_token(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"invalid\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"invalid\" };",
          "    let result = leaf_token(input);",
          "    let input = Cursor { rest: \"invalid\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"123abc\" };",
          "    let result = leaf_token(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"123abc\" };",
          "    let result = leaf_token(input);",
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"123abc\" };",
          "    let result = leaf_token(input);",
          "    let input = Cursor { rest: \"123abc\" };",
          "    let result = leaf_token(input);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"ERROR\" };",
          "    let result = leaf_token(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"ERROR\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"ERROR\" };",
          "    let result = leaf_token(input);",
          "    let input = Cursor { rest: \"ERROR\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"not_a_valid_literal_or_ident\" };",
          "    let result = leaf_token(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"valid_literal\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"valid_punct\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"valid_ident\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"/*ERROR*/\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"not_a_valid_literal_or_ident\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"not_a_valid_literal_or_ident\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input = Cursor { rest: \"valid_literal\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"valid_punct\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"valid_ident\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"/*ERROR*/\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_ok());",
          "    let input = Cursor { rest: \"not_a_valid_literal_or_ident\" };",
          "    let result = leaf_token(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]