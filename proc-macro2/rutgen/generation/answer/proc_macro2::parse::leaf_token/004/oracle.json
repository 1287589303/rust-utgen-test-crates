[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_cursor = Cursor { rest: \"42 +\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok((Cursor { rest: \" +\", off: 0 }, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"42\".to_string())))));"
        ],
        "code": [
          "{",
          "    let initial_cursor = Cursor { rest: \"42 +\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "    assert_eq!(result, Ok((Cursor { rest: \" +\", off: 0 }, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"42\".to_string())))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_cursor = Cursor { rest: \"\\\"hello\\\" -\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    assert_eq!(token_tree, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"\\\"hello\\\"\".to_owned()))));",
          "    assert_eq!(input.rest, \" -\");",
          "    assert_eq!(input.off, 0);"
        ],
        "code": [
          "{",
          "    let initial_cursor = Cursor { rest: \"\\\"hello\\\" -\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    assert_eq!(token_tree, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"\\\"hello\\\"\".to_owned()))));",
          "    assert_eq!(input.rest, \" -\");",
          "    assert_eq!(input.off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let initial_cursor = Cursor { rest: \"'char' *\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "}"
        ],
        "oracle": [
          "    let initial_cursor = Cursor { rest: \"'char' *\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    assert!(matches!(token_tree, TokenTree::Literal(_)));"
        ],
        "code": [
          "{",
          "    let initial_cursor = Cursor { rest: \"'char' *\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "    let initial_cursor = Cursor { rest: \"'char' *\", off: 0 };",
          "    let result = leaf_token(initial_cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    assert!(matches!(token_tree, TokenTree::Literal(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]