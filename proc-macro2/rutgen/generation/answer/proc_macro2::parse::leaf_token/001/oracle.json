[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: r#\"\"valid literal\"\"#,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(r#\"\"valid literal\"\"#.to_owned()))));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: r#\"\"valid literal\"\"#,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(r#\"\"valid literal\"\"#.to_owned()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: r#\"+ valid punct\"#,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"+ valid punct\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Punct(Punct::new('+', Spacing::Joint)));",
          "    ",
          "    let cursor = Cursor { rest: r#\"42\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"42\".to_owned()))));",
          "    ",
          "    let cursor = Cursor { rest: r#\"\"string\"\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::string(\"string\"))));",
          "    ",
          "    let cursor = Cursor { rest: r#\"error\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(ERROR.to_owned()))));",
          "    ",
          "    let cursor = Cursor { rest: r#\"unknown\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: r#\"+ valid punct\"#,",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: r#\"+ valid punct\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Punct(Punct::new('+', Spacing::Joint)));",
          "    ",
          "    let cursor = Cursor { rest: r#\"42\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"42\".to_owned()))));",
          "    ",
          "    let cursor = Cursor { rest: r#\"\"string\"\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::string(\"string\"))));",
          "    ",
          "    let cursor = Cursor { rest: r#\"error\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(ERROR.to_owned()))));",
          "    ",
          "    let cursor = Cursor { rest: r#\"unknown\"#, #[cfg(span_locations)] off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"valid_identifier\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.unwrap().0.rest, \"\");",
          "    assert!(matches!(result.unwrap().1, TokenTree::Ident(_)));",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned()))));",
          "    assert!(result.is_ok());",
          "    assert!(result.is_err() == false);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(input.starts_with(\"valid_identifier\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"valid_identifier\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    assert_eq!(result.unwrap().0.rest, \"\");",
          "    assert!(matches!(result.unwrap().1, TokenTree::Ident(_)));",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned()))));",
          "    assert!(result.is_ok());",
          "    assert!(result.is_err() == false);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(input.starts_with(\"valid_identifier\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"(/*ERROR*/) additional text\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (rest, token_tree) = result.unwrap();",
          "    assert_eq!(rest.rest, \" additional text\");",
          "    assert!(matches!(token_tree, TokenTree::Literal(_)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"(/*ERROR*/) additional text\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    let (rest, token_tree) = result.unwrap();",
          "    assert_eq!(rest.rest, \" additional text\");",
          "    assert!(matches!(token_tree, TokenTree::Literal(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]