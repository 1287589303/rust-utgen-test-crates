[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"123,\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"123,\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let (input_after, token_tree) = result.unwrap();",
          "    assert!(matches!(token_tree, TokenTree::Literal(_)));",
          "    assert_eq!(input_after.rest, \",\");",
          "    assert_eq!(input_after.off, 0);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"123,\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"123,\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert_eq!(result.is_ok(), true);",
          "    let (input_after, token_tree) = result.unwrap();",
          "    assert!(matches!(token_tree, TokenTree::Literal(_)));",
          "    assert_eq!(input_after.rest, \",\");",
          "    assert_eq!(input_after.off, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"+error\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"+error\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    match token_tree {",
          "    TokenTree::Ident(_) => assert!(false, \"Expected not to parse an Ident\"),",
          "    _ => {}",
          "    }",
          "    assert_eq!(input.rest, \"error\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"+error\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"+error\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    let (input, token_tree) = result.unwrap();",
          "    match token_tree {",
          "    TokenTree::Ident(_) => assert!(false, \"Expected not to parse an Ident\"),",
          "    _ => {}",
          "    }",
          "    assert_eq!(input.rest, \"error\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#hello\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"r#hello\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Ident(/*Expected Ident instance*/));",
          "    assert!(input.starts_with(\"r#hello\") == true);",
          "    assert!(input.len() == /*Expected remaining length of Cursor*/);",
          "    assert!(input.rest == /*Expected remaining string after parsing*/);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#hello\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"r#hello\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().1, TokenTree::Ident(/*Expected Ident instance*/));",
          "    assert!(input.starts_with(\"r#hello\") == true);",
          "    assert!(input.len() == /*Expected remaining length of Cursor*/);",
          "    assert!(input.rest == /*Expected remaining string after parsing*/);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"(/*ERROR*/)\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"123\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok((_, TokenTree::Literal(_)))));",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"123\".to_owned()))));",
          "    let cursor = Cursor { rest: \"+\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok((_, TokenTree::Punct(_)))));",
          "    let cursor = Cursor { rest: \"identifier\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"(/*ERROR*/)\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok((_, TokenTree::Literal(_)))));",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(ERROR.to_owned()))));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"(/*ERROR*/)\",",
          "        off: 0,",
          "    };",
          "    let result = leaf_token(cursor);",
          "    let cursor = Cursor { rest: \"123\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok((_, TokenTree::Literal(_)))));",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(\"123\".to_owned()))));",
          "    let cursor = Cursor { rest: \"+\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok((_, TokenTree::Punct(_)))));",
          "    let cursor = Cursor { rest: \"identifier\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_err());",
          "    let cursor = Cursor { rest: \"(/*ERROR*/)\", off: 0 };",
          "    let result = leaf_token(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok((_, TokenTree::Literal(_)))));",
          "    assert_eq!(result.unwrap().1, TokenTree::Literal(Literal::_new_fallback(Literal::_new(ERROR.to_owned()))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]