[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_char = '_';",
          "    let result = is_ident_start(input_char);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let input_char = '_';",
          "    let result = is_ident_start(input_char);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_char = 'A'; // 'A' is a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ident_start('_'), true);",
          "    assert_eq!(is_ident_start('A'), true);",
          "    assert_eq!(is_ident_start('1'), false);",
          "    assert_eq!(is_ident_start('$'), false);",
          "    assert_eq!(is_ident_start('\\0'), false);"
        ],
        "code": [
          "{",
          "    let input_char = 'A'; // 'A' is a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "    assert_eq!(is_ident_start('_'), true);",
          "    assert_eq!(is_ident_start('A'), true);",
          "    assert_eq!(is_ident_start('1'), false);",
          "    assert_eq!(is_ident_start('$'), false);",
          "    assert_eq!(is_ident_start('\\0'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_char = '1'; // '1' is not a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "}"
        ],
        "oracle": [
          "    assert!(!result);"
        ],
        "code": [
          "{",
          "    let input_char = '1'; // '1' is not a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "    assert!(!result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_char = '\\u{2160}'; // 'â… ' is a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_ident_start('_'), true);",
          "    assert_eq!(is_ident_start('\\u{2160}'), true);",
          "    assert_eq!(is_ident_start('a'), false);",
          "    assert_eq!(is_ident_start('1'), false);",
          "    assert_eq!(is_ident_start('-'), false);",
          "    assert_eq!(is_ident_start(' '), false);",
          "    assert_eq!(is_ident_start('\\u{FFFD}'), false);",
          "    assert_eq!(is_ident_start('\\u{307B}'), true);"
        ],
        "code": [
          "{",
          "    let input_char = '\\u{2160}'; // 'â… ' is a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "    assert_eq!(is_ident_start('_'), true);",
          "    assert_eq!(is_ident_start('\\u{2160}'), true);",
          "    assert_eq!(is_ident_start('a'), false);",
          "    assert_eq!(is_ident_start('1'), false);",
          "    assert_eq!(is_ident_start('-'), false);",
          "    assert_eq!(is_ident_start(' '), false);",
          "    assert_eq!(is_ident_start('\\u{FFFD}'), false);",
          "    assert_eq!(is_ident_start('\\u{307B}'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_char = '@'; // '@' is not a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let input_char = '@'; // '@' is not a valid XID start character",
          "    let result = is_ident_start(input_char);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]