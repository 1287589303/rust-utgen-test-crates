[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\"valid cooked string\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid cooked string\\\"\", off: 0 };",
          "    let result = string(cursor);",
          "    assert!(result.is_ok());",
          "    let cursor_result = result.unwrap();",
          "    assert!(cursor_result.rest == \"valid cooked string\\\"\");",
          "    let invalid_cursor = Cursor { rest: \"rvalid raw string\", off: 0 };",
          "    assert!(invalid_cursor.parse(\"r\").is_err());",
          "    assert!(cursor_result.rest.starts_with(\"valid cooked string\"));",
          "    assert!(cursor_result.rest.contains(\"\\\"\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\"valid cooked string\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid cooked string\\\"\", off: 0 };",
          "    let result = string(cursor);",
          "    assert!(result.is_ok());",
          "    let cursor_result = result.unwrap();",
          "    assert!(cursor_result.rest == \"valid cooked string\\\"\");",
          "    let invalid_cursor = Cursor { rest: \"rvalid raw string\", off: 0 };",
          "    assert!(invalid_cursor.parse(\"r\").is_err());",
          "    assert!(cursor_result.rest.starts_with(\"valid cooked string\"));",
          "    assert!(cursor_result.rest.contains(\"\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\"valid cooked string\\\" and not r\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"valid cooked string\\\" and not r\", #[cfg(span_locations)] off: 0 };",
          "    let expected_result = Ok(Cursor { rest: \" valid cooked string\\\" and not r\", #[cfg(span_locations)] off: 0 });",
          "    assert_eq!(_result, expected_result);",
          "    assert!(_result.is_ok());",
          "    assert!(_result.unwrap().starts_with(\"\\\"valid cooked string\\\"\"));",
          "    assert!(_result.unwrap().rest.contains(\"r\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\"valid cooked string\\\" and not r\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"valid cooked string\\\" and not r\", #[cfg(span_locations)] off: 0 };",
          "    let expected_result = Ok(Cursor { rest: \" valid cooked string\\\" and not r\", #[cfg(span_locations)] off: 0 });",
          "    assert_eq!(_result, expected_result);",
          "    assert!(_result.is_ok());",
          "    assert!(_result.unwrap().starts_with(\"\\\"valid cooked string\\\"\"));",
          "    assert!(_result.unwrap().rest.contains(\"r\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]