[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"rThis is a raw string\" };",
          "    let _ = string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"This is not a valid string\" }; assert_eq!(string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"rThis is a raw string\" }; assert_eq!(string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\"\" }; assert_eq!(string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"r\" }; assert_eq!(string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"r\\\"\" }; assert_eq!(string(cursor), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"rThis is a raw string\" };",
          "    let _ = string(cursor);",
          "    let cursor = Cursor { rest: \"This is not a valid string\" }; assert_eq!(string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"rThis is a raw string\" }; assert_eq!(string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"\\\"\" }; assert_eq!(string(cursor), Err(Reject));",
          "    let cursor = Cursor { rest: \"r\" }; assert_eq!(string(cursor).is_ok(), true);",
          "    let cursor = Cursor { rest: \"r\\\"\" }; assert_eq!(string(cursor), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"random string without quotes\" };",
          "    let _ = string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"random string without quotes\" };",
          "    let _ = string(cursor);",
          "    assert_eq!(_ , Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"input not starting with r or \\\"\" };",
          "    let _ = string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string(Cursor { rest: \"input not starting with r or \\\"\" }), Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"input not starting with r or \\\"\" };",
          "    let _ = string(cursor);",
          "    assert_eq!(string(Cursor { rest: \"input not starting with r or \\\"\" }), Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]