[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"Hello, World!\", off: 0 };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"Hello, World!\", off: 0 };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    assert_eq!(result.0.rest, \"Hello, World!\");",
          "    assert_eq!(result.1, \"Hello, World!\");",
          "    let cursor_newline = Cursor { rest: \"Hello\\nWorld!\", off: 0 };",
          "    let result_newline = take_until_newline_or_eof(cursor_newline);",
          "    assert_eq!(result_newline.0.rest, \"World!\");",
          "    assert_eq!(result_newline.1, \"Hello\");",
          "    let cursor_carriage_return = Cursor { rest: \"Hello\\r\\nWorld!\", off: 0 };",
          "    let result_carriage_return = take_until_newline_or_eof(cursor_carriage_return);",
          "    assert_eq!(result_carriage_return.0.rest, \"World!\");",
          "    assert_eq!(result_carriage_return.1, \"Hello\");",
          "    let cursor_eof = Cursor { rest: \"Hello, World!\", off: 0 };",
          "    let result_eof = take_until_newline_or_eof(cursor_eof);",
          "    assert_eq!(result_eof.0.rest, \"Hello, World!\");",
          "    assert_eq!(result_eof.1, \"Hello, World!\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"Hello, World!\", off: 0 };",
          "    take_until_newline_or_eof(cursor);",
          "    let cursor = Cursor { rest: \"Hello, World!\", off: 0 };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    assert_eq!(result.0.rest, \"Hello, World!\");",
          "    assert_eq!(result.1, \"Hello, World!\");",
          "    let cursor_newline = Cursor { rest: \"Hello\\nWorld!\", off: 0 };",
          "    let result_newline = take_until_newline_or_eof(cursor_newline);",
          "    assert_eq!(result_newline.0.rest, \"World!\");",
          "    assert_eq!(result_newline.1, \"Hello\");",
          "    let cursor_carriage_return = Cursor { rest: \"Hello\\r\\nWorld!\", off: 0 };",
          "    let result_carriage_return = take_until_newline_or_eof(cursor_carriage_return);",
          "    assert_eq!(result_carriage_return.0.rest, \"World!\");",
          "    assert_eq!(result_carriage_return.1, \"Hello\");",
          "    let cursor_eof = Cursor { rest: \"Hello, World!\", off: 0 };",
          "    let result_eof = take_until_newline_or_eof(cursor_eof);",
          "    assert_eq!(result_eof.0.rest, \"Hello, World!\");",
          "    assert_eq!(result_eof.1, \"Hello, World!\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"This line ends with a character.\", off: 0 };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"This line ends with a character.\", off: 0 }), (Cursor { rest: \"This line ends with a character.\", off: 0 }, \"This line ends with a character.\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"This line ends with a newline.\\n\", off: 0 }), (Cursor { rest: \"\\n\", off: 27 }, \"This line ends with a newline.\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Line 1\\r\\nLine 2\", off: 0 }), (Cursor { rest: \"Line 2\", off: 7 }, \"Line 1\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"No newline at end of line\", off: 0 }), (Cursor { rest: \"\", off: 28 }, \"No newline at end of line\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\\n\", off: 0 }), (Cursor { rest: \"\", off: 2 }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Single carriage return\\rText after\", off: 0 }), (Cursor { rest: \"Text after\", off: 20 }, \"Single carriage return\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"This line ends with a character.\", off: 0 };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"This line ends with a character.\", off: 0 }), (Cursor { rest: \"This line ends with a character.\", off: 0 }, \"This line ends with a character.\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"This line ends with a newline.\\n\", off: 0 }), (Cursor { rest: \"\\n\", off: 27 }, \"This line ends with a newline.\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Line 1\\r\\nLine 2\", off: 0 }), (Cursor { rest: \"Line 2\", off: 7 }, \"Line 1\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"No newline at end of line\", off: 0 }), (Cursor { rest: \"\", off: 28 }, \"No newline at end of line\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\\n\", off: 0 }), (Cursor { rest: \"\", off: 2 }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Single carriage return\\rText after\", off: 0 }), (Cursor { rest: \"Text after\", off: 20 }, \"Single carriage return\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]