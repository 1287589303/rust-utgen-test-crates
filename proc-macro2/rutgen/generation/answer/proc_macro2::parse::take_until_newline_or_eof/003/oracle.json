[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\n\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\\n\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\" }), (Cursor { rest: \"abc\\r\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\rabc\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\nabc\" }), (Cursor { rest: \"abc\" }, \"\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\n\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\\n\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\" }), (Cursor { rest: \"abc\\r\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\rabc\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\nabc\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"a\" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"a\" }), (Cursor { rest: \"\" }, \"a\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\n\" }), (Cursor { rest: \"c\\n\" }, \"ab\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"ch\\rd\" }), (Cursor { rest: \"d\" }, \"ch\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"hello\\r\\nworld\" }), (Cursor { rest: \"world\" }, \"hello\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"hello\" }), (Cursor { rest: \"\" }, \"hello\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"a\" };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"a\" }), (Cursor { rest: \"\" }, \"a\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\n\" }), (Cursor { rest: \"c\\n\" }, \"ab\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"ch\\rd\" }), (Cursor { rest: \"d\" }, \"ch\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"hello\\r\\nworld\" }), (Cursor { rest: \"world\" }, \"hello\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"hello\" }), (Cursor { rest: \"\" }, \"hello\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"ab\" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"ab\" }), (Cursor { rest: \"\" }, \"ab\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"ab\" };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"ab\" }), (Cursor { rest: \"\" }, \"ab\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"this is a test string without newlines\" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"this is a test string without newlines\" }), (Cursor { rest: \"\" }, \"this is a test string without newlines\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"this is a test string without newlines\" };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"this is a test string without newlines\" }), (Cursor { rest: \"\" }, \"this is a test string without newlines\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \" \" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \" \" }), (Cursor { rest: \" \" }, \" \"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\rabc\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\\n\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\" }), (Cursor { rest: \"\" }, \"abc\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \" \" };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \" \" }), (Cursor { rest: \" \" }, \" \"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\r\\n\" }), (Cursor { rest: \"\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\rabc\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\\n\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\\r\" }), (Cursor { rest: \"abc\" }, \"\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"abc\" }), (Cursor { rest: \"\" }, \"abc\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\\t\" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\t\" }), (Cursor { rest: \"\" }, \"\\t\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Hello\\nWorld\" }), (Cursor { rest: \"World\" }, \"Hello\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Line1\\r\\nLine2\" }), (Cursor { rest: \"Line2\" }, \"Line1\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"NoNewLineHere\" }), (Cursor { rest: \"\" }, \"NoNewLineHere\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\\t\" };",
          "    take_until_newline_or_eof(cursor);",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"\\t\" }), (Cursor { rest: \"\" }, \"\\t\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Hello\\nWorld\" }), (Cursor { rest: \"World\" }, \"Hello\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"Line1\\r\\nLine2\" }), (Cursor { rest: \"Line2\" }, \"Line1\"));",
          "    assert_eq!(take_until_newline_or_eof(Cursor { rest: \"NoNewLineHere\" }), (Cursor { rest: \"\" }, \"NoNewLineHere\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
          "    take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
          "    let (new_cursor, result) = take_until_newline_or_eof(cursor);",
          "    assert_eq!(new_cursor.rest, \"!@#$%^&*()\");",
          "    assert_eq!(result, \"!@#$%^&*()\");",
          "    assert!(new_cursor.len() < cursor.len());",
          "    assert!(new_cursor.is_empty() == false);",
          "    assert!(new_cursor.starts_with(\"!\"));",
          "    assert!(new_cursor.starts_with_fn(|ch| ch.is_ascii()));",
          "    assert!(new_cursor.starts_with_char('!'));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
          "    take_until_newline_or_eof(cursor);",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
          "    let (new_cursor, result) = take_until_newline_or_eof(cursor);",
          "    assert_eq!(new_cursor.rest, \"!@#$%^&*()\");",
          "    assert_eq!(result, \"!@#$%^&*()\");",
          "    assert!(new_cursor.len() < cursor.len());",
          "    assert!(new_cursor.is_empty() == false);",
          "    assert!(new_cursor.starts_with(\"!\"));",
          "    assert!(new_cursor.starts_with_fn(|ch| ch.is_ascii()));",
          "    assert!(new_cursor.starts_with_char('!'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]