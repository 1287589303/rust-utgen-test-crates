[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"Hello, World!\\r\\nThis is a test.\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0.rest, \"This is a test.\");",
          "    assert_eq!(result.1, \"Hello, World!\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"Hello, World!\\r\\nThis is a test.\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    assert_eq!(result.0.rest, \"This is a test.\");",
          "    assert_eq!(result.1, \"Hello, World!\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\r\\nThis is a test.\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\r\\nThis is a test.\", off: 0 };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    assert_eq!(result.0.rest, \"This is a test.\");",
          "    assert_eq!(result.1, \"\");",
          "    assert!(result.0.starts_with_char('\\n'));",
          "    assert_eq!(result.0.len(), 15);",
          "    assert_eq!(result.0.off, 1);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\r\\nThis is a test.\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    let cursor = Cursor { rest: \"\\r\\nThis is a test.\", off: 0 };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    assert_eq!(result.0.rest, \"This is a test.\");",
          "    assert_eq!(result.1, \"\");",
          "    assert!(result.0.starts_with_char('\\n'));",
          "    assert_eq!(result.0.len(), 15);",
          "    assert_eq!(result.0.off, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"Line 1\\nLine 2\\r\\nLine 3\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = take_until_newline_or_eof(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0.rest, \"Line 2\\r\\nLine 3\");",
          "    assert_eq!(result.1, \"Line 1\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"Line 1\\nLine 2\\r\\nLine 3\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = take_until_newline_or_eof(cursor);",
          "    assert_eq!(result.0.rest, \"Line 2\\r\\nLine 3\");",
          "    assert_eq!(result.1, \"Line 1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]