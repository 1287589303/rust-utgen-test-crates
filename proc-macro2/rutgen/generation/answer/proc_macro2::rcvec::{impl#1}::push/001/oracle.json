[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(0);",
          "    builder.push(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 1);",
          "    assert!(builder.inner.is_empty() == false);",
          "    assert!(builder.inner.capacity() >= 1);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(0);",
          "    builder.push(1);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 1);",
          "    assert!(builder.inner.is_empty() == false);",
          "    assert!(builder.inner.capacity() >= 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(10);",
          "    builder.push(2);",
          "}"
        ],
        "oracle": [
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(10);",
          "    assert_eq!(builder.inner.len(), 0);",
          "    builder.push(2);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 2);",
          "    builder.push(5);",
          "    assert_eq!(builder.inner.len(), 2);",
          "    assert_eq!(builder.inner[1], 5);",
          "    builder.push(-3);",
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[2], -3);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(10);",
          "    builder.push(2);",
          "    let mut builder = RcVecBuilder::<i32>::with_capacity(10);",
          "    assert_eq!(builder.inner.len(), 0);",
          "    builder.push(2);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 2);",
          "    builder.push(5);",
          "    assert_eq!(builder.inner.len(), 2);",
          "    assert_eq!(builder.inner[1], 5);",
          "    builder.push(-3);",
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[2], -3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(10);",
          "    builder.push(20);",
          "    builder.push(30);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[0], 10);",
          "    assert_eq!(builder.inner[1], 20);",
          "    assert_eq!(builder.inner[2], 30);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<i32>::new();",
          "    builder.push(10);",
          "    builder.push(20);",
          "    builder.push(30);",
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[0], 10);",
          "    assert_eq!(builder.inner[1], 20);",
          "    assert_eq!(builder.inner[2], 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<usize>::with_capacity(100);",
          "    for i in 0..100 {",
          "        builder.push(i);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 100);",
          "    assert_eq!(builder.inner[0], 0);",
          "    assert_eq!(builder.inner[99], 99);",
          "    assert!(builder.inner.iter().all(|&x| (0..100).contains(&x)));",
          "    assert_eq!(builder.inner.capacity(), 100);",
          "    builder.push(100);",
          "    assert_eq!(builder.inner.len(), 101);",
          "    assert_eq!(builder.inner[100], 100);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<usize>::with_capacity(100);",
          "    for i in 0..100 {",
          "        builder.push(i);",
          "    }",
          "    assert_eq!(builder.inner.len(), 100);",
          "    assert_eq!(builder.inner[0], 0);",
          "    assert_eq!(builder.inner[99], 99);",
          "    assert!(builder.inner.iter().all(|&x| (0..100).contains(&x)));",
          "    assert_eq!(builder.inner.capacity(), 100);",
          "    builder.push(100);",
          "    assert_eq!(builder.inner.len(), 101);",
          "    assert_eq!(builder.inner[100], 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<Option<String>>::new();",
          "    builder.push(None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], None);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<Option<String>>::new();",
          "    builder.push(None);",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RcVecBuilder::<String>::new();",
          "    builder.push(\"Hello\".to_string());",
          "    builder.push(\"World\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 2);",
          "    assert_eq!(builder.inner[0], \"Hello\".to_string());",
          "    assert_eq!(builder.inner[1], \"World\".to_string());",
          "    assert!(builder.inner.capacity() >= 2);"
        ],
        "code": [
          "{",
          "    let mut builder = RcVecBuilder::<String>::new();",
          "    builder.push(\"Hello\".to_string());",
          "    builder.push(\"World\".to_string());",
          "    assert_eq!(builder.inner.len(), 2);",
          "    assert_eq!(builder.inner[0], \"Hello\".to_string());",
          "    assert_eq!(builder.inner[1], \"World\".to_string());",
          "    assert!(builder.inner.capacity() >= 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]