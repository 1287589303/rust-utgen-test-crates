[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(Vec::new()),",
          "    };",
          "    assert!(rc_vec.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert!(rc_vec.is_empty() == true);",
          "    assert!(RcVec::<TokenTree>::is_empty(&RcVec { inner: Rc::new(Vec::new()) }) == true);",
          "    assert!(RcVec::<TokenTree>::is_empty(&RcVec { inner: Rc::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]) }) == false);",
          "    assert!(RcVec::<TokenTree>::is_empty(&RcVec { inner: Rc::new(vec![TokenTree::Punct(Punct::new('+', Spacing::Alone))]) }) == false);"
        ],
        "code": [
          "{",
          "    let rc_vec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(Vec::new()),",
          "    };",
          "    assert!(rc_vec.is_empty());",
          "    assert!(rc_vec.is_empty() == true);",
          "    assert!(RcVec::<TokenTree>::is_empty(&RcVec { inner: Rc::new(Vec::new()) }) == true);",
          "    assert!(RcVec::<TokenTree>::is_empty(&RcVec { inner: Rc::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]) }) == false);",
          "    assert!(RcVec::<TokenTree>::is_empty(&RcVec { inner: Rc::new(vec![TokenTree::Punct(Punct::new('+', Spacing::Alone))]) }) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]),",
          "    };",
          "    assert!(!rc_vec.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert!(rc_vec.is_empty() == false);",
          "    assert!(rc_vec.len() == 1);",
          "    assert!(rc_vec.is_empty() == true);",
          "    let rc_vec_empty: RcVec<TokenTree> = RcVec { inner: Rc::new(vec![]) };",
          "    assert!(rc_vec_empty.is_empty());",
          "    assert!(rc_vec_empty.len() == 0);"
        ],
        "code": [
          "{",
          "    let rc_vec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]),",
          "    };",
          "    assert!(!rc_vec.is_empty());",
          "    assert!(rc_vec.is_empty() == false);",
          "    assert!(rc_vec.len() == 1);",
          "    assert!(rc_vec.is_empty() == true);",
          "    let rc_vec_empty: RcVec<TokenTree> = RcVec { inner: Rc::new(vec![]) };",
          "    assert!(rc_vec_empty.is_empty());",
          "    assert!(rc_vec_empty.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let token_stream = TokenStream::new();",
          "    assert!(token_stream.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert!(TokenStream::new().inner.len() == 0);",
          "    assert!(TokenStream::new().is_empty() == true);"
        ],
        "code": [
          "{",
          "    let token_stream = TokenStream::new();",
          "    assert!(token_stream.is_empty());",
          "    assert!(TokenStream::new().inner.len() == 0);",
          "    assert!(TokenStream::new().is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rc_vec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]),",
          "    };",
          "    let token_stream = TokenStream { inner: rc_vec };",
          "    assert!(!token_stream.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert!(token_stream.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let rc_vec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(vec![TokenTree::Ident(Ident::new(\"test\", Span::call_site()))]),",
          "    };",
          "    let token_stream = TokenStream { inner: rc_vec };",
          "    assert!(!token_stream.is_empty());",
          "    assert!(token_stream.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]