[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = cursor.char_indices();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cursor.char_indices().collect::<Vec<_>>(), Vec::<(usize, char)>::new());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"\" };",
          "    let _ = cursor.char_indices();",
          "    assert_eq!(cursor.char_indices().collect::<Vec<_>>(), Vec::<(usize, char)>::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"a\" };",
          "    let _ = cursor.char_indices();",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 0);",
          "    ",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 3);",
          "    ",
          "    let cursor = Cursor { rest: \"é\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 1);",
          "    ",
          "    let cursor = Cursor { rest: \"abé\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().collect::<Vec<_>>() == vec![(0, 'a'), (1, 'b'), (2, 'é')]);",
          "    ",
          "    let cursor = Cursor { rest: \"☺\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 1);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"a\" };",
          "    let _ = cursor.char_indices();",
          "    let cursor = Cursor { rest: \"\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 0);",
          "    ",
          "    let cursor = Cursor { rest: \"abc\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 3);",
          "    ",
          "    let cursor = Cursor { rest: \"é\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 1);",
          "    ",
          "    let cursor = Cursor { rest: \"abé\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().collect::<Vec<_>>() == vec![(0, 'a'), (1, 'b'), (2, 'é')]);",
          "    ",
          "    let cursor = Cursor { rest: \"☺\" };",
          "    let indices = cursor.char_indices();",
          "    assert!(indices.clone().count() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello\" };",
          "    let _ = cursor.char_indices();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cursor.char_indices().collect::<Vec<_>>(), vec![(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')]);",
          "    assert!(cursor.char_indices().count() == 5);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    assert!(cursor_empty.char_indices().collect::<Vec<_>>().is_empty());",
          "    assert_eq!(cursor.char_indices().next(), Some((0, 'h')));",
          "    assert!(cursor.char_indices().last().unwrap().0 == 4);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello\" };",
          "    let _ = cursor.char_indices();",
          "    assert_eq!(cursor.char_indices().collect::<Vec<_>>(), vec![(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')]);",
          "    assert!(cursor.char_indices().count() == 5);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    assert!(cursor_empty.char_indices().collect::<Vec<_>>().is_empty());",
          "    assert_eq!(cursor.char_indices().next(), Some((0, 'h')));",
          "    assert!(cursor.char_indices().last().unwrap().0 == 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
          "    let _ = cursor.char_indices();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cursor.char_indices().count(), 10);",
          "    assert!(cursor.char_indices().eq(vec![(0, '!'), (1, '@'), (2, '#'), (3, '$'), (4, '%'), (5, '^'), (6, '&'), (7, '*'), (8, '('), (9, ')').into_iter()));",
          "    cursor.rest = \"\";",
          "    assert_eq!(cursor.char_indices().count(), 0);",
          "    cursor.rest = \"abc\";",
          "    let mut indices = cursor.char_indices();",
          "    assert_eq!(indices.next(), Some((0, 'a')));",
          "    assert_eq!(indices.next(), Some((1, 'b')));",
          "    assert_eq!(indices.next(), Some((2, 'c')));",
          "    assert_eq!(indices.next(), None);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" };",
          "    let _ = cursor.char_indices();",
          "    assert_eq!(cursor.char_indices().count(), 10);",
          "    assert!(cursor.char_indices().eq(vec![(0, '!'), (1, '@'), (2, '#'), (3, '$'), (4, '%'), (5, '^'), (6, '&'), (7, '*'), (8, '('), (9, ')').into_iter()));",
          "    cursor.rest = \"\";",
          "    assert_eq!(cursor.char_indices().count(), 0);",
          "    cursor.rest = \"abc\";",
          "    let mut indices = cursor.char_indices();",
          "    assert_eq!(indices.next(), Some((0, 'a')));",
          "    assert_eq!(indices.next(), Some((1, 'b')));",
          "    assert_eq!(indices.next(), Some((2, 'c')));",
          "    assert_eq!(indices.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let _ = cursor.char_indices();",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    assert_eq!(cursor.char_indices().collect::<Vec<_>>(), vec![(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o'), (5, ' '), (6, 'w'), (7, 'o'), (8, 'r'), (9, 'l'), (10, 'd')]);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    assert_eq!(cursor_empty.char_indices().collect::<Vec<_>>(), vec![]);",
          "    let cursor_spaces = Cursor { rest: \"   \" };",
          "    assert_eq!(cursor_spaces.char_indices().collect::<Vec<_>>(), vec![(0, ' '), (1, ' '), (2, ' ')]);",
          "    let cursor_mixed = Cursor { rest: \"a b c\" };",
          "    assert_eq!(cursor_mixed.char_indices().collect::<Vec<_>>(), vec![(0, 'a'), (1, ' '), (2, 'b'), (3, ' '), (4, 'c')]);",
          "    let cursor_special = Cursor { rest: \"hello@world!\" };",
          "    assert_eq!(cursor_special.char_indices().collect::<Vec<_>>(), vec![(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o'), (5, '@'), (6, 'w'), (7, 'o'), (8, 'r'), (9, 'l'), (10, 'd'), (11, '!')]);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let _ = cursor.char_indices();",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    assert_eq!(cursor.char_indices().collect::<Vec<_>>(), vec![(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o'), (5, ' '), (6, 'w'), (7, 'o'), (8, 'r'), (9, 'l'), (10, 'd')]);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    assert_eq!(cursor_empty.char_indices().collect::<Vec<_>>(), vec![]);",
          "    let cursor_spaces = Cursor { rest: \"   \" };",
          "    assert_eq!(cursor_spaces.char_indices().collect::<Vec<_>>(), vec![(0, ' '), (1, ' '), (2, ' ')]);",
          "    let cursor_mixed = Cursor { rest: \"a b c\" };",
          "    assert_eq!(cursor_mixed.char_indices().collect::<Vec<_>>(), vec![(0, 'a'), (1, ' '), (2, 'b'), (3, ' '), (4, 'c')]);",
          "    let cursor_special = Cursor { rest: \"hello@world!\" };",
          "    assert_eq!(cursor_special.char_indices().collect::<Vec<_>>(), vec![(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o'), (5, '@'), (6, 'w'), (7, 'o'), (8, 'r'), (9, 'l'), (10, 'd'), (11, '!')]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"a\".repeat(10_000) }; // maximum length test",
          "    let _ = cursor.char_indices();",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\" }; // empty string test",
          "    let cursor = Cursor { rest: \"abc\" }; // non-empty string test",
          "    let cursor = Cursor { rest: \"a\" }; // single character test",
          "    let cursor = Cursor { rest: \"abcxyz\" }; // multiple characters test",
          "    let cursor = Cursor { rest: \"a\".repeat(10_000) }; // maximum length test",
          "    let cursor = Cursor { rest: \"123456\" }; // numeric characters test",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" }; // special characters test",
          "    let cursor = Cursor { rest: \"a b c\" }; // string with spaces test",
          "    let result = cursor.char_indices(); assert_eq!(result.len(), cursor.rest.len()); // check number of indices matches string length",
          "    let result = cursor.char_indices(); assert!(result.all(|(idx, _)| idx < cursor.rest.len())); // check indices are within bounds"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"a\".repeat(10_000) }; // maximum length test",
          "    let _ = cursor.char_indices();",
          "    let cursor = Cursor { rest: \"\" }; // empty string test",
          "    let cursor = Cursor { rest: \"abc\" }; // non-empty string test",
          "    let cursor = Cursor { rest: \"a\" }; // single character test",
          "    let cursor = Cursor { rest: \"abcxyz\" }; // multiple characters test",
          "    let cursor = Cursor { rest: \"a\".repeat(10_000) }; // maximum length test",
          "    let cursor = Cursor { rest: \"123456\" }; // numeric characters test",
          "    let cursor = Cursor { rest: \"!@#$%^&*()\" }; // special characters test",
          "    let cursor = Cursor { rest: \"a b c\" }; // string with spaces test",
          "    let result = cursor.char_indices(); assert_eq!(result.len(), cursor.rest.len()); // check number of indices matches string length",
          "    let result = cursor.char_indices(); assert!(result.all(|(idx, _)| idx < cursor.rest.len())); // check indices are within bounds",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]