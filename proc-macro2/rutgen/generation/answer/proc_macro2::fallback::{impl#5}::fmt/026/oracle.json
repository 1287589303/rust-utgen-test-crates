[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_stream = TokenStream {",
          "        inner: RcVec::new(),",
          "    };",
          "    let mut output = String::new();",
          "    empty_stream.fmt(&mut output).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"\");"
        ],
        "code": [
          "{",
          "    let empty_stream = TokenStream {",
          "        inner: RcVec::new(),",
          "    };",
          "    let mut output = String::new();",
          "    empty_stream.fmt(&mut output).unwrap();",
          "    assert_eq!(output, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_rcvec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(Vec::new()),",
          "    };",
          "    let empty_stream = TokenStream {",
          "        inner: empty_rcvec,",
          "    };",
          "    let mut output = String::new();",
          "    empty_stream.fmt(&mut output).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"\");"
        ],
        "code": [
          "{",
          "    let empty_rcvec: RcVec<TokenTree> = RcVec {",
          "        inner: Rc::new(Vec::new()),",
          "    };",
          "    let empty_stream = TokenStream {",
          "        inner: empty_rcvec,",
          "    };",
          "    let mut output = String::new();",
          "    empty_stream.fmt(&mut output).unwrap();",
          "    assert_eq!(output, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]