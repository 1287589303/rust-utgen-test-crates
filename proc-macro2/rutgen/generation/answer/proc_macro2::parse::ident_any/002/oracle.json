[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"r##super\" };",
          "    let result = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r##super\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"r##super\" };",
          "    let result = ident_any(input);",
          "    let input = Cursor { rest: \"r##super\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"r##self\" };",
          "    let result = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r##self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"r##self\" };",
          "    let result = ident_any(input);",
          "    let input = Cursor { rest: \"r##self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"r##Self\" };",
          "    let result = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r##Self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err().is::<Reject>());"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"r##Self\" };",
          "    let result = ident_any(input);",
          "    let input = Cursor { rest: \"r##Self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err().is::<Reject>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"r##crate\" };",
          "    let result = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r##_\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##super\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##Self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##crate\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"r##crate\" };",
          "    let result = ident_any(input);",
          "    let input = Cursor { rest: \"r##_\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##super\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##Self\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input = Cursor { rest: \"r##crate\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor { rest: \"r##_\" };",
          "    let result = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r##_\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor { rest: \"r##_\" };",
          "    let result = ident_any(input);",
          "    let input = Cursor { rest: \"r##_\" };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]