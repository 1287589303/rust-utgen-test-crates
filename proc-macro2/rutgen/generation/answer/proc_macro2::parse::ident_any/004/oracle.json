[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#self_extra\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#self_extra\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#crate_more\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#crate_more\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = ident_any(cursor);",
          "    assert_eq!(result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#super_additional\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"r#self_identifier\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let cursor = Cursor { rest: \"r#Self_function\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let cursor = Cursor { rest: \"r#crate_method\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let cursor = Cursor { rest: \"r#_\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"r#super_additional\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let result = ident_any(cursor);",
          "    let cursor = Cursor { rest: \"r#self_identifier\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let cursor = Cursor { rest: \"r#Self_function\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let cursor = Cursor { rest: \"r#crate_method\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let cursor = Cursor { rest: \"r#_\", off: 0 };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]