[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#crate\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r#crate\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#crate\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "    let input = Cursor { rest: \"r#crate\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#super\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ident_any(Cursor { rest: \"r#crate\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#self\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#Self\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#_\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#super\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#SSuper\", off: 0 }).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#super\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "    assert_eq!(ident_any(Cursor { rest: \"r#crate\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#self\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#Self\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#_\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#super\", off: 0 }), Err(Reject));",
          "    assert_eq!(ident_any(Cursor { rest: \"r#SSuper\", off: 0 }).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#self\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r#crate\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#self\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#super\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#_\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#plaindent\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#self\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "    let input = Cursor { rest: \"r#crate\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#self\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#super\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#_\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#plaindent\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#Self\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r#Self\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#Self\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "    let input = Cursor { rest: \"r#Self\", off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#_\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"r#crate\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#Super\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#Self\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#self\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#super\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#crate\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"r#_\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _ = ident_any(input);",
          "    let input = Cursor { rest: \"r#crate\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#Super\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#Self\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#self\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#super\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "    let input = Cursor { rest: \"r#crate\", #[cfg(span_locations)] off: 0 };",
          "    let result = ident_any(input);",
          "    assert!(result.is_err() && result.unwrap_err() == Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]