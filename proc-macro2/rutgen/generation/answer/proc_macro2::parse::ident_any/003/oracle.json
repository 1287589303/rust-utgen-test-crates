[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"r#super_extra\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"r#super_extra\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);"
        ],
        "code": [
          "{",
          "    let input_str = \"r#super_extra\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    let input_str = \"r#super_extra\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"r#self_more\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#superfluous\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let input_str = \"r#self_more\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Reject);",
          "    ",
          "    let input_str = \"r#superfluous\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"r#_additional\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#Self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input_str = \"r#_additional\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#Self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    ",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"r#crate_and_something\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#Self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));"
        ],
        "code": [
          "{",
          "    let input_str = \"r#crate_and_something\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#Self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "    ",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    assert_eq!(_result, Err(Reject));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_str = \"r#Self_something_else\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "}"
        ],
        "oracle": [
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);"
        ],
        "code": [
          "{",
          "    let input_str = \"r#Self_something_else\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let _result = ident_any(cursor);",
          "    let input_str = \"r#super\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input_str = \"r#self\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input_str = \"r#crate\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "    let input_str = \"r#_\";",
          "    let cursor = Cursor { rest: input_str };",
          "    let result = ident_any(cursor);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Reject);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]