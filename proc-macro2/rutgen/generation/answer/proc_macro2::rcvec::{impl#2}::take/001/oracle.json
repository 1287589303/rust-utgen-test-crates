[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = vec![1];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner, vec![]);",
          "    assert!(builder.inner.is_empty());",
          "    let builder_inner = builder.inner;",
          "    assert!(mem::size_of_val(&builder_inner) == 0);",
          "    assert!(RcVecBuilder::<i32>::is::<RcVecBuilder<i32>>(builder));"
        ],
        "code": [
          "{",
          "    let mut vec = vec![1];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "    assert_eq!(builder.inner, vec![]);",
          "    assert!(builder.inner.is_empty());",
          "    let builder_inner = builder.inner;",
          "    assert!(mem::size_of_val(&builder_inner) == 0);",
          "    assert!(RcVecBuilder::<i32>::is::<RcVecBuilder<i32>>(builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = vec![2, 3, 4];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "}"
        ],
        "oracle": [
          "    let mut vec = vec![2, 3, 4];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "    assert_eq!(builder.inner, vec);"
        ],
        "code": [
          "{",
          "    let mut vec = vec![2, 3, 4];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "    let mut vec = vec![2, 3, 4];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "    assert_eq!(builder.inner, vec);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec = vec![\"one\", \"two\", \"three\"];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[0], \"one\");",
          "    assert_eq!(builder.inner[1], \"two\");",
          "    assert_eq!(builder.inner[2], \"three\");",
          "    assert!(vec.is_empty());"
        ],
        "code": [
          "{",
          "    let mut vec = vec![\"one\", \"two\", \"three\"];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    let builder = rc_vec_mut.take();",
          "    assert_eq!(builder.inner.len(), 3);",
          "    assert_eq!(builder.inner[0], \"one\");",
          "    assert_eq!(builder.inner[1], \"two\");",
          "    assert_eq!(builder.inner[2], \"three\");",
          "    assert!(vec.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<i32> = vec![];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    rc_vec_mut.push(5);",
          "    let builder = rc_vec_mut.take();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 5);",
          "    assert!(rc_vec_mut.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<i32> = vec![];",
          "    let mut rc_vec_mut = RcVecMut { inner: &mut vec };",
          "    rc_vec_mut.push(5);",
          "    let builder = rc_vec_mut.take();",
          "    assert_eq!(builder.inner.len(), 1);",
          "    assert_eq!(builder.inner[0], 5);",
          "    assert!(rc_vec_mut.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]