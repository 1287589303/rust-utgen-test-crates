[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"c\\\"Hello, World!\"# };",
          "    let _ = c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(c_string(Cursor { rest: r#\"c\\\"Hello, World!\"# }), Ok(Cursor { rest: r#\"Hello, World!\"# }));",
          "    assert!(c_string(Cursor { rest: r#\"c\\\"Hello, World!\"# }).is_ok());",
          "    assert!(c_string(Cursor { rest: r#\"cr#Hello, World!\"# }).is_err());"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"c\\\"Hello, World!\"# };",
          "    let _ = c_string(cursor);",
          "    assert_eq!(c_string(Cursor { rest: r#\"c\\\"Hello, World!\"# }), Ok(Cursor { rest: r#\"Hello, World!\"# }));",
          "    assert!(c_string(Cursor { rest: r#\"c\\\"Hello, World!\"# }).is_ok());",
          "    assert!(c_string(Cursor { rest: r#\"cr#Hello, World!\"# }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: r#\"c\\\"Some text\" is not raw\"# };",
          "    let _ = c_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: r#\"c\\\"Some text\" is not raw\"# };",
          "    let result = c_string(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest == r#\" is not raw\"#);",
          "    assert!(result.unwrap().rest.starts_with(\"\\\"Some text\"));",
          "    assert!(result.unwrap().rest != \"cr\");"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: r#\"c\\\"Some text\" is not raw\"# };",
          "    let _ = c_string(cursor);",
          "    let cursor = Cursor { rest: r#\"c\\\"Some text\" is not raw\"# };",
          "    let result = c_string(cursor);",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().rest == r#\" is not raw\"#);",
          "    assert!(result.unwrap().rest.starts_with(\"\\\"Some text\"));",
          "    assert!(result.unwrap().rest != \"cr\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]