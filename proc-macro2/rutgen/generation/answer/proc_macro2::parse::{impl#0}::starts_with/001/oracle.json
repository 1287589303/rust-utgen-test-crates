[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"hello\");",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"hello world\" }; assert_eq!(cursor.starts_with(\"hello\"), true);",
          "    let cursor = Cursor { rest: \"hello world\" }; assert_eq!(cursor.starts_with(\"world\"), false);",
          "    let cursor = Cursor { rest: \"\" }; assert_eq!(cursor.starts_with(\"hello\"), false);",
          "    let cursor = Cursor { rest: \"hello\" }; assert_eq!(cursor.starts_with(\"hello\"), true);",
          "    let cursor = Cursor { rest: \"helicopter\" }; assert_eq!(cursor.starts_with(\"heli\"), true);",
          "    let cursor = Cursor { rest: \"helicopter\" }; assert_eq!(cursor.starts_with(\"h\"), true);",
          "    let cursor = Cursor { rest: \"h\" }; assert_eq!(cursor.starts_with(\"hello\"), false);",
          "    let cursor = Cursor { rest: \"hello hello\" }; assert_eq!(cursor.starts_with(\"hello \"), true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"hello\");",
          "    let cursor = Cursor { rest: \"hello world\" }; assert_eq!(cursor.starts_with(\"hello\"), true);",
          "    let cursor = Cursor { rest: \"hello world\" }; assert_eq!(cursor.starts_with(\"world\"), false);",
          "    let cursor = Cursor { rest: \"\" }; assert_eq!(cursor.starts_with(\"hello\"), false);",
          "    let cursor = Cursor { rest: \"hello\" }; assert_eq!(cursor.starts_with(\"hello\"), true);",
          "    let cursor = Cursor { rest: \"helicopter\" }; assert_eq!(cursor.starts_with(\"heli\"), true);",
          "    let cursor = Cursor { rest: \"helicopter\" }; assert_eq!(cursor.starts_with(\"h\"), true);",
          "    let cursor = Cursor { rest: \"h\" }; assert_eq!(cursor.starts_with(\"hello\"), false);",
          "    let cursor = Cursor { rest: \"hello hello\" }; assert_eq!(cursor.starts_with(\"hello \"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"\");",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"hello world\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result2 = cursor.starts_with(\"world\");",
          "    assert_eq!(result2, false);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result3 = cursor_empty.starts_with(\"\");",
          "    assert_eq!(result3, true);",
          "    let result4 = cursor_empty.starts_with(\"any\");",
          "    assert_eq!(result4, false);",
          "    let cursor_partial = Cursor { rest: \"hello world\" };",
          "    let result5 = cursor_partial.starts_with(\"hello\");",
          "    assert_eq!(result5, true);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"hello world\");",
          "    assert_eq!(result, true);",
          "    let result2 = cursor.starts_with(\"world\");",
          "    assert_eq!(result2, false);",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result3 = cursor_empty.starts_with(\"\");",
          "    assert_eq!(result3, true);",
          "    let result4 = cursor_empty.starts_with(\"any\");",
          "    assert_eq!(result4, false);",
          "    let cursor_partial = Cursor { rest: \"hello world\" };",
          "    let result5 = cursor_partial.starts_with(\"hello\");",
          "    assert_eq!(result5, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"world hello\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(cursor.rest, \"hello world\");",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result_empty = cursor_empty.starts_with(\"test\");",
          "    assert_eq!(result_empty, false);",
          "    let result_hello = cursor.starts_with(\"hello\");",
          "    assert_eq!(result_hello, true);",
          "    let result_world = cursor.starts_with(\"world\");",
          "    assert_eq!(result_world, false);"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"hello world\" };",
          "    let result = cursor.starts_with(\"world hello\");",
          "    assert_eq!(result, false);",
          "    assert_eq!(cursor.rest, \"hello world\");",
          "    let cursor_empty = Cursor { rest: \"\" };",
          "    let result_empty = cursor_empty.starts_with(\"test\");",
          "    assert_eq!(result_empty, false);",
          "    let result_hello = cursor.starts_with(\"hello\");",
          "    assert_eq!(result_hello, true);",
          "    let result_world = cursor.starts_with(\"world\");",
          "    assert_eq!(result_world, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor { rest: \"12345\" };",
          "    let result = cursor.starts_with(\"123\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(cursor.starts_with(\"1\"));",
          "    assert!(cursor.starts_with(\"12345\"));",
          "    assert!(!cursor.starts_with(\"123456\"));",
          "    assert!(!cursor.starts_with(\"234\"));",
          "    assert!(!cursor.starts_with(\"\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor { rest: \"12345\" };",
          "    let result = cursor.starts_with(\"123\");",
          "    assert_eq!(result, true);",
          "    assert!(cursor.starts_with(\"1\"));",
          "    assert!(cursor.starts_with(\"12345\"));",
          "    assert!(!cursor.starts_with(\"123456\"));",
          "    assert!(!cursor.starts_with(\"234\"));",
          "    assert!(!cursor.starts_with(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]