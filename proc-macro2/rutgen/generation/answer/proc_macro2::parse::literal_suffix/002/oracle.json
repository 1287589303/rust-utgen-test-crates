[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"abc123_def$ghi\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"abc123_def$ghi\", #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(literal_suffix(input), input);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"abc123_def$ghi\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "    let input = Cursor { rest: \"abc123_def$ghi\", #[cfg(span_locations)] off: 0 };",
          "    assert_eq!(literal_suffix(input), input);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"$validIdentifier123\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"$validIdentifier123\", #[cfg(span_locations)] off: 0 }; assert_eq!(literal_suffix(input), input);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"$validIdentifier123\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "    let input = Cursor { rest: \"$validIdentifier123\", #[cfg(span_locations)] off: 0 }; assert_eq!(literal_suffix(input), input);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"_leadingUnderscore\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_suffix(Cursor { rest: \"_leadingUnderscore\", ..Default::default() }), Cursor { rest: \"_leadingUnderscore\", ..Default::default() });"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"_leadingUnderscore\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "    assert_eq!(literal_suffix(Cursor { rest: \"_leadingUnderscore\", ..Default::default() }), Cursor { rest: \"_leadingUnderscore\", ..Default::default() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"A1B2C3_$D4E5F6G7\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "}"
        ],
        "oracle": [
          "    let input = Cursor { rest: \"A1B2C3_$D4E5F6G7\", off: 0 };",
          "    let result = literal_suffix(input);",
          "    assert_eq!(result, input);"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"A1B2C3_$D4E5F6G7\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "    let input = Cursor { rest: \"A1B2C3_$D4E5F6G7\", off: 0 };",
          "    let result = literal_suffix(input);",
          "    assert_eq!(result, input);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Cursor {",
          "        rest: \"a\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_suffix(Cursor { rest: \"a\", off: 0 }), Cursor { rest: \"a\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"identifier\", off: 0 }), Cursor { rest: \"identifier\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"x123\", off: 0 }), Cursor { rest: \"x123\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"valid_token\", off: 0 }), Cursor { rest: \"valid_token\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"anotherValidIdentifier\", off: 0 }), Cursor { rest: \"anotherValidIdentifier\", off: 0 });"
        ],
        "code": [
          "{",
          "    let input = Cursor {",
          "        rest: \"a\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    literal_suffix(input);",
          "    assert_eq!(literal_suffix(Cursor { rest: \"a\", off: 0 }), Cursor { rest: \"a\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"identifier\", off: 0 }), Cursor { rest: \"identifier\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"x123\", off: 0 }), Cursor { rest: \"x123\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"valid_token\", off: 0 }), Cursor { rest: \"valid_token\", off: 0 });",
          "    assert_eq!(literal_suffix(Cursor { rest: \"anotherValidIdentifier\", off: 0 }), Cursor { rest: \"anotherValidIdentifier\", off: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]