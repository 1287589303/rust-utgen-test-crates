[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = Vec::new();",
          "    token_stream.extend(tokens.into_iter());",
          "}"
        ],
        "oracle": [
          "    assert!(token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "    assert_eq!(token_stream.inner.iter().count(), 0);",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "    assert_eq!(token_stream.inner.iter().count(), 0);",
          "    let tokens: Vec<TokenTree> = vec![TokenTree::Ident(Ident::new(\"a\", Span::call_site()))];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert_eq!(token_stream.inner.len(), 1);",
          "    assert!(token_stream.inner.iter().next().is_some());",
          "    if let Some(token) = token_stream.inner.iter().next() {",
          "    assert!(matches!(token, TokenTree::Ident(_)));",
          "    }"
        ],
        "code": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = Vec::new();",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "    assert_eq!(token_stream.inner.iter().count(), 0);",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "    assert_eq!(token_stream.inner.iter().count(), 0);",
          "    let tokens: Vec<TokenTree> = vec![TokenTree::Ident(Ident::new(\"a\", Span::call_site()))];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert_eq!(token_stream.inner.len(), 1);",
          "    assert!(token_stream.inner.iter().next().is_some());",
          "    if let Some(token) = token_stream.inner.iter().next() {",
          "    assert!(matches!(token, TokenTree::Ident(_)));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![TokenTree::Ident(Ident)];",
          "    token_stream.extend(tokens.into_iter());",
          "}"
        ],
        "oracle": [
          "    assert!(token_stream.inner.is_empty() == false);",
          "    assert!(token_stream.inner.len() == 1);",
          "    assert!(token_stream.inner.iter().next().is_some());",
          "    assert!(matches!(token_stream.inner.iter().next().unwrap(), TokenTree::Ident(_)));"
        ],
        "code": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![TokenTree::Ident(Ident)];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(token_stream.inner.is_empty() == false);",
          "    assert!(token_stream.inner.len() == 1);",
          "    assert!(token_stream.inner.iter().next().is_some());",
          "    assert!(matches!(token_stream.inner.iter().next().unwrap(), TokenTree::Ident(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![",
          "        TokenTree::Ident(Ident),",
          "        TokenTree::Punct(Punct),",
          "        TokenTree::Literal(Literal),",
          "        TokenTree::Group(Group),",
          "    ];",
          "    token_stream.extend(tokens.into_iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(token_stream.inner.len(), 4);",
          "    assert!(!token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.iter().count(), 4);",
          "    assert_eq!(token_stream.inner.make_mut().inner.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![",
          "        TokenTree::Ident(Ident),",
          "        TokenTree::Punct(Punct),",
          "        TokenTree::Literal(Literal),",
          "        TokenTree::Group(Group),",
          "    ];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert_eq!(token_stream.inner.len(), 4);",
          "    assert!(!token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.iter().count(), 4);",
          "    assert_eq!(token_stream.inner.make_mut().inner.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![TokenTree::Punct(Punct)];",
          "    token_stream.extend(tokens.into_iter());",
          "}"
        ],
        "oracle": [
          "    assert!(!token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 1);",
          "    assert_eq!(token_stream.inner.iter().next().unwrap(), &TokenTree::Punct(Punct));"
        ],
        "code": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![TokenTree::Punct(Punct)];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(!token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 1);",
          "    assert_eq!(token_stream.inner.iter().next().unwrap(), &TokenTree::Punct(Punct));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![];",
          "    token_stream.extend(tokens.into_iter());",
          "}"
        ],
        "oracle": [
          "    assert!(token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![",
          "        TokenTree::Literal(Literal),",
          "        TokenTree::Literal(Literal),",
          "        TokenTree::Literal(Literal),",
          "    ];",
          "    token_stream.extend(tokens.into_iter());",
          "}"
        ],
        "oracle": [
          "    assert!(!token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 3);",
          "    assert_eq!(token_stream.inner.iter().count(), 3);",
          "    assert!(token_stream.inner.iter().all(|token| matches!(token, TokenTree::Literal(_))));"
        ],
        "code": [
          "{",
          "    let mut token_stream = TokenStream { inner: RcVec { inner: Rc::new(Vec::new()) } };",
          "    let tokens: Vec<TokenTree> = vec![",
          "        TokenTree::Literal(Literal),",
          "        TokenTree::Literal(Literal),",
          "        TokenTree::Literal(Literal),",
          "    ];",
          "    token_stream.extend(tokens.into_iter());",
          "    assert!(!token_stream.inner.is_empty());",
          "    assert_eq!(token_stream.inner.len(), 3);",
          "    assert_eq!(token_stream.inner.iter().count(), 3);",
          "    assert!(token_stream.inner.iter().all(|token| matches!(token, TokenTree::Literal(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]