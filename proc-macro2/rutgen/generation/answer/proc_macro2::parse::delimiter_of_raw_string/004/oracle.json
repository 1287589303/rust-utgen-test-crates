[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"#\\\"valid string\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = delimiter_of_raw_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"#\\\"valid string\\\"\", #[cfg(span_locations)] off: 0 };",
          "    let result = delimiter_of_raw_string(cursor);",
          "    assert_eq!(result, Ok((cursor.advance(15), \"valid string\")));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"#\\\"valid string\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = delimiter_of_raw_string(cursor);",
          "    let cursor = Cursor { rest: \"#\\\"valid string\\\"\", #[cfg(span_locations)] off: 0 };",
          "    let result = delimiter_of_raw_string(cursor);",
          "    assert_eq!(result, Ok((cursor.advance(15), \"valid string\")));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\"another valid string\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = delimiter_of_raw_string(cursor);",
          "}"
        ],
        "oracle": [
          "    let cursor = Cursor { rest: \"\\\"another valid string\\\"\", #[cfg(span_locations)] off: 0 };",
          "    let result = delimiter_of_raw_string(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, delimiter) = result.unwrap();",
          "    assert_eq!(delimiter, \"\");",
          "    assert!(new_cursor.starts_with(\"\\\"another valid string\\\"\"));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"\\\"another valid string\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = delimiter_of_raw_string(cursor);",
          "    let cursor = Cursor { rest: \"\\\"another valid string\\\"\", #[cfg(span_locations)] off: 0 };",
          "    let result = delimiter_of_raw_string(cursor);",
          "    assert!(result.is_ok());",
          "    let (new_cursor, delimiter) = result.unwrap();",
          "    assert_eq!(delimiter, \"\");",
          "    assert!(new_cursor.starts_with(\"\\\"another valid string\\\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"#\\\"a\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = delimiter_of_raw_string(cursor);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok((cursor.advance(3), \"#\")));"
        ],
        "code": [
          "{",
          "    let cursor = Cursor {",
          "        rest: \"#\\\"a\\\"\",",
          "        #[cfg(span_locations)]",
          "        off: 0,",
          "    };",
          "    let _result = delimiter_of_raw_string(cursor);",
          "    assert_eq!(_result, Ok((cursor.advance(3), \"#\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]