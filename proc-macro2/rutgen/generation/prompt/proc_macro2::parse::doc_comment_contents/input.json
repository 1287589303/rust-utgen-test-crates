{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {\n        self.rest.starts_with(s)\n    }\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {\n        self.rest.starts_with(ch)\n    }\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn doc_comment_contents(input: Cursor) -> PResult<(&str, bool)> {\n    if input.starts_with(\"//!\") {\n        let input = input.advance(3);\n        let (input, s) = take_until_newline_or_eof(input);\n        Ok((input, (s, true)))\n    } else if input.starts_with(\"/*!\") {\n        let (input, s) = block_comment(input)?;\n        Ok((input, (&s[3..s.len() - 2], true)))\n    } else if input.starts_with(\"///\") {\n        let input = input.advance(3);\n        if input.starts_with_char('/') {\n            return Err(Reject);\n        }\n        let (input, s) = take_until_newline_or_eof(input);\n        Ok((input, (s, false)))\n    } else if input.starts_with(\"/**\") && !input.rest[3..].starts_with('*') {\n        let (input, s) = block_comment(input)?;\n        Ok((input, (&s[3..s.len() - 2], false)))\n    } else {\n        Err(Reject)\n    }\n}\nfn take_until_newline_or_eof(input: Cursor) -> (Cursor, &str) {\n    let chars = input.char_indices();\n    for (i, ch) in chars {\n        if ch == '\\n' {\n            return (input.advance(i), &input.rest[..i]);\n        } else if ch == '\\r' && input.rest[i + 1..].starts_with('\\n') {\n            return (input.advance(i + 1), &input.rest[..i]);\n        }\n    }\n    (input.advance(input.len()), input.rest)\n}\nfn block_comment(input: Cursor) -> PResult<&str> {\n    if !input.starts_with(\"/*\") {\n        return Err(Reject);\n    }\n    let mut depth = 0usize;\n    let bytes = input.as_bytes();\n    let mut i = 0usize;\n    let upper = bytes.len() - 1;\n    while i < upper {\n        if bytes[i] == b'/' && bytes[i + 1] == b'*' {\n            depth += 1;\n            i += 1;\n        } else if bytes[i] == b'*' && bytes[i + 1] == b'/' {\n            depth -= 1;\n            if depth == 0 {\n                return Ok((input.advance(i + 2), &input.rest[..i + 2]));\n            }\n            i += 1;\n        }\n        i += 1;\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n957 fn doc_comment_contents(input: Cursor) -> PResult<(&str, bool)> {\n958     if input.starts_with(\"//!\") {\n959         let input = input.advance(3);\n960         let (input, s) = take_until_newline_or_eof(input);\n961         Ok((input, (s, true)))\n962     } else if input.starts_with(\"/*!\") {\n963         let (input, s) = block_comment(input)?;\n964         Ok((input, (&s[3..s.len() - 2], true)))\n965     } else if input.starts_with(\"///\") {\n966         let input = input.advance(3);\n967         if input.starts_with_char('/') {\n968             return Err(Reject);\n969         }\n970         let (input, s) = take_until_newline_or_eof(input);\n971         Ok((input, (s, false)))\n972     } else if input.starts_with(\"/**\") && !input.rest[3..].starts_with('*') {\n973         let (input, s) = block_comment(input)?;\n974         Ok((input, (&s[3..s.len() - 2], false)))\n975     } else {\n976         Err(Reject)\n977     }\n978 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}