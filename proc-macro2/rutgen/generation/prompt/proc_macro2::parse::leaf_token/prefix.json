{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\n#[derive(Clone)]\npub struct Literal {\n    inner: imp::Literal,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Ident {\n    inner: imp::Ident,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\npub(crate) struct Reject;\n#[derive(Clone)]\npub struct Punct {\n    ch: char,\n    spacing: Spacing,\n    span: Span,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\n#[derive(Clone)]\npub(crate) enum Ident {\n    Compiler(proc_macro::Ident),\n    Fallback(fallback::Ident),\n}\n#[derive(Clone)]\npub(crate) enum Literal {\n    Compiler(proc_macro::Literal),\n    Fallback(fallback::Literal),\n}\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {\n        self.rest.starts_with(s)\n    }\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nimpl Literal {\n    pub(crate) fn _new(repr: String) -> Self {\n        Literal {\n            repr,\n            span: Span::call_site(),\n        }\n    }\n    fn _new_fallback(inner: fallback::Literal) -> Self {\n        Literal {\n            inner: imp::Literal::from(inner),\n            _marker: MARKER,\n        }\n    }\n    pub fn f64_unsuffixed(f: f64) -> Literal {}\n    pub fn f64_suffixed(f: f64) -> Literal {}\n    pub fn f32_unsuffixed(f: f32) -> Literal {}\n    pub fn f32_suffixed(f: f32) -> Literal {}\n    pub fn string(string: &str) -> Literal {}\n    pub fn character(ch: char) -> Literal {}\n    pub fn byte_character(byte: u8) -> Literal {}\n    pub fn byte_string(bytes: &[u8]) -> Literal {}\n    pub fn c_string(string: &CStr) -> Literal {}\n    pub fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {}\n    pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {}\n    pub unsafe fn from_str_unchecked(repr: &str) -> Self {\n        Literal::_new(unsafe { imp::Literal::from_str_unchecked(repr) })\n    }\n}\nfn leaf_token(input: Cursor) -> PResult<TokenTree> {\n    if let Ok((input, l)) = literal(input) {\n        Ok((input, TokenTree::Literal(crate::Literal::_new_fallback(l))))\n    } else if let Ok((input, p)) = punct(input) {\n        Ok((input, TokenTree::Punct(p)))\n    } else if let Ok((input, i)) = ident(input) {\n        Ok((input, TokenTree::Ident(i)))\n    } else if input.starts_with(ERROR) {\n        let rest = input.advance(ERROR.len());\n        let repr = crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned()));\n        Ok((rest, TokenTree::Literal(repr)))\n    } else {\n        Err(Reject)\n    }\n}\nfn punct(input: Cursor) -> PResult<Punct> {\n    let (rest, ch) = punct_char(input)?;\n    if ch == '\\'' {\n        if ident_any(rest)?.0.starts_with_char('\\'') {\n            Err(Reject)\n        } else {\n            Ok((rest, Punct::new('\\'', Spacing::Joint)))\n        }\n    } else {\n        let kind = match punct_char(rest) {\n            Ok(_) => Spacing::Joint,\n            Err(Reject) => Spacing::Alone,\n        };\n        Ok((rest, Punct::new(ch, kind)))\n    }\n}\nfn ident(input: Cursor) -> PResult<crate::Ident> {\n    if [\"r\\\"\", \"r#\\\"\", \"r##\", \"b\\\"\", \"b\\'\", \"br\\\"\", \"br#\", \"c\\\"\", \"cr\\\"\", \"cr#\"]\n        .iter()\n        .any(|prefix| input.starts_with(prefix))\n    {\n        Err(Reject)\n    } else {\n        ident_any(input)\n    }\n}\npub(crate) fn literal(input: Cursor) -> PResult<Literal> {\n    let rest = literal_nocapture(input)?;\n    let end = input.len() - rest.len();\n    Ok((rest, Literal::_new(input.rest[..end].to_string())))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n266 fn leaf_token(input: Cursor) -> PResult<TokenTree> {\n267     if let Ok((input, l)) = literal(input) {\n268         // must be parsed before ident\n269         Ok((input, TokenTree::Literal(crate::Literal::_new_fallback(l))))\n270     } else if let Ok((input, p)) = punct(input) {\n271         Ok((input, TokenTree::Punct(p)))\n272     } else if let Ok((input, i)) = ident(input) {\n273         Ok((input, TokenTree::Ident(i)))\n274     } else if input.starts_with(ERROR) {\n275         let rest = input.advance(ERROR.len());\n276         let repr = crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned()));\n277         Ok((rest, TokenTree::Literal(repr)))\n278     } else {\n279         Err(Reject)\n280     }\n281 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}