{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\nuse crate::detection::inside_proc_macro;\nuse crate::fallback::{self, FromStr2 as _};\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::fmt::{self, Debug, Display};\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse std::ffi::CStr;\n#[cfg(super_unstable)]\nuse std::path::PathBuf;\n#[cfg(feature = \"proc-macro\")]\npub(crate) trait FromStr2: FromStr<Err = proc_macro::LexError> {\n    #[cfg(wrap_proc_macro)]\n    fn valid(src: &str) -> bool;\n    #[cfg(wrap_proc_macro)]\n    fn from_str_checked(src: &str) -> Result<Self, imp::LexError> {\n        if !Self::valid(src) {\n            return Err(imp::LexError::CompilerPanic);\n        }\n        match panic::catch_unwind(|| Self::from_str(src)) {\n            Ok(Ok(ok)) => Ok(ok),\n            Ok(Err(lex)) => Err(imp::LexError::Compiler(lex)),\n            Err(_panic) => Err(imp::LexError::CompilerPanic),\n        }\n    }\n    fn from_str_unchecked(src: &str) -> Self {\n        Self::from_str(src).unwrap()\n    }\n}\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\nimpl From<TokenStream> for proc_macro::TokenStream {\n    fn from(inner: TokenStream) -> Self {\n        match inner {\n            TokenStream::Compiler(inner) => inner.into_token_stream(),\n            TokenStream::Fallback(inner) => {\n                proc_macro::TokenStream::from_str_unchecked(&inner.to_string())\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n253 fn from(inner: TokenStream) -> Self {\n254     proc_macro::TokenStream::from_str_unchecked(&inner.to_string())\n255 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}