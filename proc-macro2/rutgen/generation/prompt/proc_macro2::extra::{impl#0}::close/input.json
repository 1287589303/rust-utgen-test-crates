{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/extra.rs\n// crate name is proc_macro2\nuse crate::fallback;\nuse crate::imp;\nuse crate::marker::{ProcMacroAutoTraits, MARKER};\nuse crate::Span;\nuse core::fmt::{self, Debug};\n#[derive(Copy, Clone)]\npub struct DelimSpan {\n    inner: DelimSpanEnum,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Copy, Clone)]\npub struct Span {\n    inner: imp::Span,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Copy, Clone)]\n#[cfg_attr(\n    all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)),\n    derive(PartialEq, Eq)\n)]\npub(crate) struct ProcMacroAutoTraits(PhantomData<Rc<()>>);\n#[derive(Copy, Clone)]\nenum DelimSpanEnum {\n    #[cfg(wrap_proc_macro)]\n    Compiler { join: proc_macro::Span, open: proc_macro::Span, close: proc_macro::Span },\n    Fallback(fallback::Span),\n}\n#[derive(Copy, Clone)]\npub(crate) enum Span {\n    Compiler(proc_macro::Span),\n    Fallback(fallback::Span),\n}\nimpl DelimSpan {\n    pub(crate) fn new(group: &imp::Group) -> Self {\n        #[cfg(wrap_proc_macro)]\n        let inner = match group {\n            imp::Group::Compiler(group) => {\n                DelimSpanEnum::Compiler {\n                    join: group.span(),\n                    open: group.span_open(),\n                    close: group.span_close(),\n                }\n            }\n            imp::Group::Fallback(group) => DelimSpanEnum::Fallback(group.span()),\n        };\n        #[cfg(not(wrap_proc_macro))]\n        let inner = DelimSpanEnum::Fallback(group.span());\n        DelimSpan {\n            inner,\n            _marker: MARKER,\n        }\n    }\n    pub fn join(&self) -> Span {}\n    pub fn open(&self) -> Span {}\n    pub fn close(&self) -> Span {\n        match &self.inner {\n            #[cfg(wrap_proc_macro)]\n            DelimSpanEnum::Compiler { close, .. } => {\n                Span::_new(imp::Span::Compiler(*close))\n            }\n            DelimSpanEnum::Fallback(span) => Span::_new_fallback(span.last_byte()),\n        }\n    }\n}\nimpl Span {\n    #[cfg(not(span_locations))]\n    pub(crate) fn call_site() -> Self {\n        Span {}\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn call_site() -> Self {\n        Span { lo: 0, hi: 0 }\n    }\n    pub(crate) fn mixed_site() -> Self {\n        Span::call_site()\n    }\n    #[cfg(procmacro2_semver_exempt)]\n    pub(crate) fn def_site() -> Self {\n        Span::call_site()\n    }\n    pub(crate) fn resolved_at(&self, _other: Span) -> Span {}\n    pub(crate) fn located_at(&self, other: Span) -> Span {}\n    #[cfg(procmacro2_semver_exempt)]\n    pub(crate) fn source_file(&self) -> SourceFile {}\n    #[cfg(span_locations)]\n    pub(crate) fn byte_range(&self) -> Range<usize> {}\n    #[cfg(span_locations)]\n    pub(crate) fn start(&self) -> LineColumn {}\n    #[cfg(span_locations)]\n    pub(crate) fn end(&self) -> LineColumn {}\n    #[cfg(not(span_locations))]\n    pub(crate) fn join(&self, _other: Span) -> Option<Span> {}\n    #[cfg(span_locations)]\n    pub(crate) fn join(&self, other: Span) -> Option<Span> {}\n    #[cfg(not(span_locations))]\n    pub(crate) fn source_text(&self) -> Option<String> {}\n    #[cfg(span_locations)]\n    pub(crate) fn source_text(&self) -> Option<String> {}\n    #[cfg(not(span_locations))]\n    pub(crate) fn first_byte(self) -> Self {\n        self\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn first_byte(self) -> Self {\n        Span {\n            lo: self.lo,\n            hi: cmp::min(self.lo.saturating_add(1), self.hi),\n        }\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn last_byte(self) -> Self {\n        Span {\n            lo: cmp::max(self.hi.saturating_sub(1), self.lo),\n            hi: self.hi,\n        }\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn last_byte(self) -> Self {\n        Span {\n            lo: cmp::max(self.hi.saturating_sub(1), self.lo),\n            hi: self.hi,\n        }\n    }\n    #[cfg(span_locations)]\n    fn is_call_site(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a span for the closing punctuation of the group only.\n138 pub fn close(&self) -> Span {\n139     match &self.inner {\n140         #[cfg(wrap_proc_macro)]\n141         DelimSpanEnum::Compiler { close, .. } => Span::_new(imp::Span::Compiler(*close)),\n142         DelimSpanEnum::Fallback(span) => Span::_new_fallback(span.last_byte()),\n143     }\n144 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}