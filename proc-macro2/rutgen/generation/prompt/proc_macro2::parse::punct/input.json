{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\n#[derive(Clone)]\npub struct Punct {\n    ch: char,\n    spacing: Spacing,\n    span: Span,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\npub(crate) struct Reject;\n#[derive(Clone)]\npub struct Ident {\n    inner: imp::Ident,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) enum Ident {\n    Compiler(proc_macro::Ident),\n    Fallback(fallback::Ident),\n}\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Spacing {\n    /// E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.\n    Alone,\n    /// E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`.\n    ///\n    /// Additionally, single quote `'` can join with identifiers to form\n    /// lifetimes `'ident`.\n    Joint,\n}\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {}\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {\n        self.rest.starts_with(ch)\n    }\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nimpl Punct {\n    pub fn new(ch: char, spacing: Spacing) -> Self {\n        if let '!' | '#' | '$' | '%' | '&' | '\\'' | '*' | '+' | ',' | '-' | '.' | '/'\n        | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '^' | '|' | '~' = ch {\n            Punct {\n                ch,\n                spacing,\n                span: Span::call_site(),\n            }\n        } else {\n            panic!(\"unsupported proc macro punctuation character {:?}\", ch);\n        }\n    }\n    pub fn as_char(&self) -> char {}\n    pub fn spacing(&self) -> Spacing {}\n    pub fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {}\n}\nfn punct(input: Cursor) -> PResult<Punct> {\n    let (rest, ch) = punct_char(input)?;\n    if ch == '\\'' {\n        if ident_any(rest)?.0.starts_with_char('\\'') {\n            Err(Reject)\n        } else {\n            Ok((rest, Punct::new('\\'', Spacing::Joint)))\n        }\n    } else {\n        let kind = match punct_char(rest) {\n            Ok(_) => Spacing::Joint,\n            Err(Reject) => Spacing::Alone,\n        };\n        Ok((rest, Punct::new(ch, kind)))\n    }\n}\nfn punct_char(input: Cursor) -> PResult<char> {\n    if input.starts_with(\"//\") || input.starts_with(\"/*\") {\n        return Err(Reject);\n    }\n    let mut chars = input.chars();\n    let first = match chars.next() {\n        Some(ch) => ch,\n        None => {\n            return Err(Reject);\n        }\n    };\n    let recognized = \"~!@#$%^&*-=+|;:,<.>/?'\";\n    if recognized.contains(first) {\n        Ok((input.advance(first.len_utf8()), first))\n    } else {\n        Err(Reject)\n    }\n}\nfn ident_any(input: Cursor) -> PResult<crate::Ident> {\n    let raw = input.starts_with(\"r#\");\n    let rest = input.advance((raw as usize) << 1);\n    let (rest, sym) = ident_not_raw(rest)?;\n    if !raw {\n        let ident = crate::Ident::_new_fallback(\n            Ident::new_unchecked(sym, fallback::Span::call_site()),\n        );\n        return Ok((rest, ident));\n    }\n    match sym {\n        \"_\" | \"super\" | \"self\" | \"Self\" | \"crate\" => return Err(Reject),\n        _ => {}\n    }\n    let ident = crate::Ident::_new_fallback(\n        Ident::new_raw_unchecked(sym, fallback::Span::call_site()),\n    );\n    Ok((rest, ident))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n871 fn punct(input: Cursor) -> PResult<Punct> {\n872     let (rest, ch) = punct_char(input)?;\n873     if ch == '\\'' {\n874         if ident_any(rest)?.0.starts_with_char('\\'') {\n875             Err(Reject)\n876         } else {\n877             Ok((rest, Punct::new('\\'', Spacing::Joint)))\n878         }\n879     } else {\n880         let kind = match punct_char(rest) {\n881             Ok(_) => Spacing::Joint,\n882             Err(Reject) => Spacing::Alone,\n883         };\n884         Ok((rest, Punct::new(ch, kind)))\n885     }\n886 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}