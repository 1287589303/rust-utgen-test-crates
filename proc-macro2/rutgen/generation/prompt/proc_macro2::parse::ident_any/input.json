{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Clone)]\npub struct Ident {\n    inner: imp::Ident,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\npub(crate) struct Reject;\n#[derive(Clone)]\npub(crate) enum Ident {\n    Compiler(proc_macro::Ident),\n    Fallback(fallback::Ident),\n}\nimpl Ident {\n    fn _new(inner: imp::Ident) -> Self {\n        Ident { inner, _marker: MARKER }\n    }\n    fn _new_fallback(inner: fallback::Ident) -> Self {\n        Ident {\n            inner: imp::Ident::from(inner),\n            _marker: MARKER,\n        }\n    }\n    #[track_caller]\n    pub fn new(string: &str, span: Span) -> Self {\n        Ident::_new(imp::Ident::new_checked(string, span.inner))\n    }\n    #[track_caller]\n    pub fn new_raw(string: &str, span: Span) -> Self {\n        Ident::_new(imp::Ident::new_raw_checked(string, span.inner))\n    }\n    pub fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {}\n}\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {\n        self.rest.starts_with(s)\n    }\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nimpl Span {\n    #[cfg(span_locations)]\n    pub(crate) fn call_site() -> Self {\n        Span { lo: 0, hi: 0 }\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn call_site() -> Self {\n        Span { lo: 0, hi: 0 }\n    }\n    pub(crate) fn mixed_site() -> Self {\n        Span::call_site()\n    }\n    #[cfg(procmacro2_semver_exempt)]\n    pub(crate) fn def_site() -> Self {\n        Span::call_site()\n    }\n    pub(crate) fn resolved_at(&self, _other: Span) -> Span {}\n    pub(crate) fn located_at(&self, other: Span) -> Span {}\n    #[cfg(procmacro2_semver_exempt)]\n    pub(crate) fn source_file(&self) -> SourceFile {}\n    #[cfg(span_locations)]\n    pub(crate) fn byte_range(&self) -> Range<usize> {}\n    #[cfg(span_locations)]\n    pub(crate) fn start(&self) -> LineColumn {}\n    #[cfg(span_locations)]\n    pub(crate) fn end(&self) -> LineColumn {}\n    #[cfg(not(span_locations))]\n    pub(crate) fn join(&self, _other: Span) -> Option<Span> {}\n    #[cfg(span_locations)]\n    pub(crate) fn join(&self, other: Span) -> Option<Span> {}\n    #[cfg(not(span_locations))]\n    pub(crate) fn source_text(&self) -> Option<String> {}\n    #[cfg(span_locations)]\n    pub(crate) fn source_text(&self) -> Option<String> {}\n    #[cfg(not(span_locations))]\n    pub(crate) fn first_byte(self) -> Self {\n        self\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn first_byte(self) -> Self {\n        Span {\n            lo: self.lo,\n            hi: cmp::min(self.lo.saturating_add(1), self.hi),\n        }\n    }\n    #[cfg(not(span_locations))]\n    pub(crate) fn last_byte(self) -> Self {\n        self\n    }\n    #[cfg(span_locations)]\n    pub(crate) fn last_byte(self) -> Self {\n        Span {\n            lo: cmp::max(self.hi.saturating_sub(1), self.lo),\n            hi: self.hi,\n        }\n    }\n    #[cfg(span_locations)]\n    fn is_call_site(&self) -> bool {}\n}\nfn ident_any(input: Cursor) -> PResult<crate::Ident> {\n    let raw = input.starts_with(\"r#\");\n    let rest = input.advance((raw as usize) << 1);\n    let (rest, sym) = ident_not_raw(rest)?;\n    if !raw {\n        let ident = crate::Ident::_new_fallback(\n            Ident::new_unchecked(sym, fallback::Span::call_site()),\n        );\n        return Ok((rest, ident));\n    }\n    match sym {\n        \"_\" | \"super\" | \"self\" | \"Self\" | \"crate\" => return Err(Reject),\n        _ => {}\n    }\n    let ident = crate::Ident::_new_fallback(\n        Ident::new_raw_unchecked(sym, fallback::Span::call_site()),\n    );\n    Ok((rest, ident))\n}\nfn ident_not_raw(input: Cursor) -> PResult<&str> {\n    let mut chars = input.char_indices();\n    match chars.next() {\n        Some((_, ch)) if is_ident_start(ch) => {}\n        _ => return Err(Reject),\n    }\n    let mut end = input.len();\n    for (i, ch) in chars {\n        if !is_ident_continue(ch) {\n            end = i;\n            break;\n        }\n    }\n    Ok((input.advance(end), &input.rest[..end]))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n296 fn ident_any(input: Cursor) -> PResult<crate::Ident> {\n297     let raw = input.starts_with(\"r#\");\n298     let rest = input.advance((raw as usize) << 1);\n299 \n300     let (rest, sym) = ident_not_raw(rest)?;\n301 \n302     if !raw {\n303         let ident =\n304             crate::Ident::_new_fallback(Ident::new_unchecked(sym, fallback::Span::call_site()));\n305         return Ok((rest, ident));\n306     }\n307 \n308     match sym {\n309         \"_\" | \"super\" | \"self\" | \"Self\" | \"crate\" => return Err(Reject),\n310         _ => {}\n311     }\n312 \n313     let ident =\n314         crate::Ident::_new_fallback(Ident::new_raw_unchecked(sym, fallback::Span::call_site()));\n315     Ok((rest, ident))\n316 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}