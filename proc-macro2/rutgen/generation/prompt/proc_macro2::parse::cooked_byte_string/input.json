{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {\n        self.rest.bytes()\n    }\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn cooked_byte_string(mut input: Cursor) -> Result<Cursor, Reject> {\n    let mut bytes = input.bytes().enumerate();\n    while let Some((offset, b)) = bytes.next() {\n        match b {\n            b'\"' => {\n                let input = input.advance(offset + 1);\n                return Ok(literal_suffix(input));\n            }\n            b'\\r' => {\n                match bytes.next() {\n                    Some((_, b'\\n')) => {}\n                    _ => break,\n                }\n            }\n            b'\\\\' => {\n                match bytes.next() {\n                    Some((_, b'x')) => {\n                        backslash_x_byte(&mut bytes)?;\n                    }\n                    Some((_, b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"')) => {}\n                    Some((newline, b @ (b'\\n' | b'\\r'))) => {\n                        input = input.advance(newline + 1);\n                        trailing_backslash(&mut input, b)?;\n                        bytes = input.bytes().enumerate();\n                    }\n                    _ => break,\n                }\n            }\n            b if b.is_ascii() => {}\n            _ => break,\n        }\n    }\n    Err(Reject)\n}\nfn literal_suffix(input: Cursor) -> Cursor {\n    match ident_not_raw(input) {\n        Ok((input, _)) => input,\n        Err(Reject) => input,\n    }\n}\nfn trailing_backslash(input: &mut Cursor, mut last: u8) -> Result<(), Reject> {\n    let mut whitespace = input.bytes().enumerate();\n    loop {\n        if last == b'\\r' && whitespace.next().map_or(true, |(_, b)| b != b'\\n') {\n            return Err(Reject);\n        }\n        match whitespace.next() {\n            Some((_, b @ (b' ' | b'\\t' | b'\\n' | b'\\r'))) => {\n                last = b;\n            }\n            Some((offset, _)) => {\n                *input = input.advance(offset);\n                return Ok(());\n            }\n            None => return Err(Reject),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n443 fn cooked_byte_string(mut input: Cursor) -> Result<Cursor, Reject> {\n444     let mut bytes = input.bytes().enumerate();\n445     while let Some((offset, b)) = bytes.next() {\n446         match b {\n447             b'\"' => {\n448                 let input = input.advance(offset + 1);\n449                 return Ok(literal_suffix(input));\n450             }\n451             b'\\r' => match bytes.next() {\n452                 Some((_, b'\\n')) => {}\n453                 _ => break,\n454             },\n455             b'\\\\' => match bytes.next() {\n456                 Some((_, b'x')) => {\n457                     backslash_x_byte(&mut bytes)?;\n458                 }\n459                 Some((_, b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"')) => {}\n460                 Some((newline, b @ (b'\\n' | b'\\r'))) => {\n461                     input = input.advance(newline + 1);\n462                     trailing_backslash(&mut input, b)?;\n463                     bytes = input.bytes().enumerate();\n464                 }\n465                 _ => break,\n466             },\n467             b if b.is_ascii() => {}\n468             _ => break,\n469         }\n470     }\n471     Err(Reject)\n472 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}