{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\nfn escape_utf8(string: &str, repr: &mut String) {\n    let mut chars = string.chars();\n    while let Some(ch) = chars.next() {\n        if ch == '\\0' {\n            repr.push_str(\n                if chars.as_str().starts_with(|next| '0' <= next && next <= '7') {\n                    r\"\\x00\"\n                } else {\n                    r\"\\0\"\n                },\n            );\n        } else if ch == '\\'' {\n            repr.push(ch);\n        } else {\n            repr.extend(ch.escape_debug());\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1212 fn escape_utf8(string: &str, repr: &mut String) {\n1213     let mut chars = string.chars();\n1214     while let Some(ch) = chars.next() {\n1215         if ch == '\\0' {\n1216             repr.push_str(\n1217                 if chars\n1218                     .as_str()\n1219                     .starts_with(|next| '0' <= next && next <= '7')\n1220                 {\n1221                     // circumvent clippy::octal_escapes lint\n1222                     r\"\\x00\"\n1223                 } else {\n1224                     r\"\\0\"\n1225                 },\n1226             );\n1227         } else if ch == '\\'' {\n1228             // escape_debug turns this into \"\\'\" which is unnecessary.\n1229             repr.push(ch);\n1230         } else {\n1231             repr.extend(ch.escape_debug());\n1232         }\n1233     }\n1234 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}