{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\npub(crate) struct Reject;\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\nfn literal_nocapture(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(ok) = string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = byte_string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = c_string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = byte(input) {\n        Ok(ok)\n    } else if let Ok(ok) = character(input) {\n        Ok(ok)\n    } else if let Ok(ok) = float(input) {\n        Ok(ok)\n    } else if let Ok(ok) = int(input) {\n        Ok(ok)\n    } else {\n        Err(Reject)\n    }\n}\nfn float(input: Cursor) -> Result<Cursor, Reject> {\n    let mut rest = float_digits(input)?;\n    if let Some(ch) = rest.chars().next() {\n        if is_ident_start(ch) {\n            rest = ident_not_raw(rest)?.0;\n        }\n    }\n    word_break(rest)\n}\nfn string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"\\\"\") {\n        cooked_string(input)\n    } else if let Ok(input) = input.parse(\"r\") {\n        raw_string(input)\n    } else {\n        Err(Reject)\n    }\n}\nfn character(input: Cursor) -> Result<Cursor, Reject> {\n    let input = input.parse(\"'\")?;\n    let mut chars = input.char_indices();\n    let ok = match chars.next().map(|(_, ch)| ch) {\n        Some('\\\\') => {\n            match chars.next().map(|(_, ch)| ch) {\n                Some('x') => backslash_x_char(&mut chars).is_ok(),\n                Some('u') => backslash_u(&mut chars).is_ok(),\n                Some('n' | 'r' | 't' | '\\\\' | '0' | '\\'' | '\"') => true,\n                _ => false,\n            }\n        }\n        ch => ch.is_some(),\n    };\n    if !ok {\n        return Err(Reject);\n    }\n    let (idx, _) = chars.next().ok_or(Reject)?;\n    let input = input.advance(idx).parse(\"'\")?;\n    Ok(literal_suffix(input))\n}\nfn c_string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"c\\\"\") {\n        cooked_c_string(input)\n    } else if let Ok(input) = input.parse(\"cr\") {\n        raw_c_string(input)\n    } else {\n        Err(Reject)\n    }\n}\nfn byte(input: Cursor) -> Result<Cursor, Reject> {\n    let input = input.parse(\"b'\")?;\n    let mut bytes = input.bytes().enumerate();\n    let ok = match bytes.next().map(|(_, b)| b) {\n        Some(b'\\\\') => {\n            match bytes.next().map(|(_, b)| b) {\n                Some(b'x') => backslash_x_byte(&mut bytes).is_ok(),\n                Some(b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"') => true,\n                _ => false,\n            }\n        }\n        b => b.is_some(),\n    };\n    if !ok {\n        return Err(Reject);\n    }\n    let (offset, _) = bytes.next().ok_or(Reject)?;\n    if !input.chars().as_str().is_char_boundary(offset) {\n        return Err(Reject);\n    }\n    let input = input.advance(offset).parse(\"'\")?;\n    Ok(literal_suffix(input))\n}\nfn int(input: Cursor) -> Result<Cursor, Reject> {\n    let mut rest = digits(input)?;\n    if let Some(ch) = rest.chars().next() {\n        if is_ident_start(ch) {\n            rest = ident_not_raw(rest)?.0;\n        }\n    }\n    word_break(rest)\n}\nfn byte_string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"b\\\"\") {\n        cooked_byte_string(input)\n    } else if let Ok(input) = input.parse(\"br\") {\n        raw_byte_string(input)\n    } else {\n        Err(Reject)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n343 fn literal_nocapture(input: Cursor) -> Result<Cursor, Reject> {\n344     if let Ok(ok) = string(input) {\n345         Ok(ok)\n346     } else if let Ok(ok) = byte_string(input) {\n347         Ok(ok)\n348     } else if let Ok(ok) = c_string(input) {\n349         Ok(ok)\n350     } else if let Ok(ok) = byte(input) {\n351         Ok(ok)\n352     } else if let Ok(ok) = character(input) {\n353         Ok(ok)\n354     } else if let Ok(ok) = float(input) {\n355         Ok(ok)\n356     } else if let Ok(ok) = int(input) {\n357         Ok(ok)\n358     } else {\n359         Err(Reject)\n360     }\n361 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}