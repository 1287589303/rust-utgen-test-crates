{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\npub(crate) struct Reject;\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\nfn literal_nocapture(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(ok) = string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = byte_string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = c_string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = byte(input) {\n        Ok(ok)\n    } else if let Ok(ok) = character(input) {\n        Ok(ok)\n    } else if let Ok(ok) = float(input) {\n        Ok(ok)\n    } else if let Ok(ok) = int(input) {\n        Ok(ok)\n    } else {\n        Err(Reject)\n    }\n}\nfn float(input: Cursor) -> Result<Cursor, Reject> {\n    let mut rest = float_digits(input)?;\n    if let Some(ch) = rest.chars().next() {\n        if is_ident_start(ch) {\n            rest = ident_not_raw(rest)?.0;\n        }\n    }\n    word_break(rest)\n}\nfn string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"\\\"\") {\n        cooked_string(input)\n    } else if let Ok(input) = input.parse(\"r\") {\n        raw_string(input)\n    } else {\n        Err(Reject)\n    }\n}\nfn character(input: Cursor) -> Result<Cursor, Reject> {\n    let input = input.parse(\"'\")?;\n    let mut chars = input.char_indices();\n    let ok = match chars.next().map(|(_, ch)| ch) {\n        Some('\\\\') => {\n            match chars.next().map(|(_, ch)| ch) {\n                Some('x') => backslash_x_char(&mut chars).is_ok(),\n                Some('u') => backslash_u(&mut chars).is_ok(),\n                Some('n' | 'r' | 't' | '\\\\' | '0' | '\\'' | '\"') => true,\n                _ => false,\n            }\n        }\n        ch => ch.is_some(),\n    };\n    if !ok {\n        return Err(Reject);\n    }\n    let (idx, _) = chars.next().ok_or(Reject)?;\n    let input = input.advance(idx).parse(\"'\")?;\n    Ok(literal_suffix(input))\n}\nfn c_string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"c\\\"\") {\n        cooked_c_string(input)\n    } else if let Ok(input) = input.parse(\"cr\") {\n        raw_c_string(input)\n    } else {\n        Err(Reject)\n    }\n}\nfn byte(input: Cursor) -> Result<Cursor, Reject> {\n    let input = input.parse(\"b'\")?;\n    let mut bytes = input.bytes().enumerate();\n    let ok = match bytes.next().map(|(_, b)| b) {\n        Some(b'\\\\') => {\n            match bytes.next().map(|(_, b)| b) {\n                Some(b'x') => backslash_x_byte(&mut bytes).is_ok(),\n                Some(b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"') => true,\n                _ => false,\n            }\n        }\n        b => b.is_some(),\n    };\n    if !ok {\n        return Err(Reject);\n    }\n    let (offset, _) = bytes.next().ok_or(Reject)?;\n    if !input.chars().as_str().is_char_boundary(offset) {\n        return Err(Reject);\n    }\n    let input = input.advance(offset).parse(\"'\")?;\n    Ok(literal_suffix(input))\n}\nfn int(input: Cursor) -> Result<Cursor, Reject> {\n    let mut rest = digits(input)?;\n    if let Some(ch) = rest.chars().next() {\n        if is_ident_start(ch) {\n            rest = ident_not_raw(rest)?.0;\n        }\n    }\n    word_break(rest)\n}\nfn byte_string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"b\\\"\") {\n        cooked_byte_string(input)\n    } else if let Ok(input) = input.parse(\"br\") {\n        raw_byte_string(input)\n    } else {\n        Err(Reject)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n343 fn literal_nocapture(input: Cursor) -> Result<Cursor, Reject> {\n344     if let Ok(ok) = string(input) {\n345         Ok(ok)\n346     } else if let Ok(ok) = byte_string(input) {\n347         Ok(ok)\n348     } else if let Ok(ok) = c_string(input) {\n349         Ok(ok)\n350     } else if let Ok(ok) = byte(input) {\n351         Ok(ok)\n352     } else if let Ok(ok) = character(input) {\n353         Ok(ok)\n354     } else if let Ok(ok) = float(input) {\n355         Ok(ok)\n356     } else if let Ok(ok) = int(input) {\n357         Ok(ok)\n358     } else {\n359         Err(Reject)\n360     }\n361 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}