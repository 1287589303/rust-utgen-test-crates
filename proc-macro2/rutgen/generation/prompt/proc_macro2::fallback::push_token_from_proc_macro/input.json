{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\npub(crate) struct RcVecMut<'a, T> {\n    inner: &'a mut Vec<T>,\n}\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\nimpl<'a, T> RcVecMut<'a, T> {\n    pub(crate) fn push(&mut self, element: T) {\n        self.inner.push(element);\n    }\n    pub(crate) fn extend(&mut self, iter: impl IntoIterator<Item = T>) {}\n    pub(crate) fn as_mut(&mut self) -> RcVecMut<T> {}\n    pub(crate) fn take(self) -> RcVecBuilder<T> {}\n}\nfn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree) {\n    match token {\n        TokenTree::Literal(\n            crate::Literal {\n                #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n                #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n                ..\n            },\n        ) if literal.repr.starts_with('-') => {\n            push_negative_literal(vec, literal);\n        }\n        _ => vec.push(token),\n    }\n    #[cold]\n    fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n        literal.repr.remove(0);\n        let mut punct = crate::Punct::new('-', Spacing::Alone);\n        punct.set_span(crate::Span::_new_fallback(literal.span));\n        vec.push(TokenTree::Punct(punct));\n        vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n    }\n}\n#[cold]\nfn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n    literal.repr.remove(0);\n    let mut punct = crate::Punct::new('-', Spacing::Alone);\n    punct.set_span(crate::Span::_new_fallback(literal.span));\n    vec.push(TokenTree::Punct(punct));\n    vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n100 fn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree) {\n101     // https://github.com/dtolnay/proc-macro2/issues/235\n102     match token {\n103         TokenTree::Literal(crate::Literal {\n104             #[cfg(wrap_proc_macro)]\n105                 inner: crate::imp::Literal::Fallback(literal),\n106             #[cfg(not(wrap_proc_macro))]\n107                 inner: literal,\n108             ..\n109         }) if literal.repr.starts_with('-') => {\n110             push_negative_literal(vec, literal);\n111         }\n112         _ => vec.push(token),\n113     }\n114 \n115     #[cold]\n116     fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n117         literal.repr.remove(0);\n118         let mut punct = crate::Punct::new('-', Spacing::Alone);\n119         punct.set_span(crate::Span::_new_fallback(literal.span));\n120         vec.push(TokenTree::Punct(punct));\n121         vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n122     }\n123 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}