{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\npub(crate) struct RcVecMut<'a, T> {\n    inner: &'a mut Vec<T>,\n}\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\nimpl<'a, T> RcVecMut<'a, T> {\n    pub(crate) fn push(&mut self, element: T) {\n        self.inner.push(element);\n    }\n    pub(crate) fn extend(&mut self, iter: impl IntoIterator<Item = T>) {}\n    pub(crate) fn as_mut(&mut self) -> RcVecMut<T> {}\n    pub(crate) fn take(self) -> RcVecBuilder<T> {}\n}\nfn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree) {\n    match token {\n        TokenTree::Literal(\n            crate::Literal {\n                #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n                #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n                ..\n            },\n        ) if literal.repr.starts_with('-') => {\n            push_negative_literal(vec, literal);\n        }\n        _ => vec.push(token),\n    }\n    #[cold]\n    fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n        literal.repr.remove(0);\n        let mut punct = crate::Punct::new('-', Spacing::Alone);\n        punct.set_span(crate::Span::_new_fallback(literal.span));\n        vec.push(TokenTree::Punct(punct));\n        vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n    }\n}\n#[cold]\nfn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n    literal.repr.remove(0);\n    let mut punct = crate::Punct::new('-', Spacing::Alone);\n    punct.set_span(crate::Span::_new_fallback(literal.span));\n    vec.push(TokenTree::Punct(punct));\n    vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n100 fn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree) {\n101     // https://github.com/dtolnay/proc-macro2/issues/235\n102     match token {\n103         TokenTree::Literal(crate::Literal {\n104             #[cfg(wrap_proc_macro)]\n105                 inner: crate::imp::Literal::Fallback(literal),\n106             #[cfg(not(wrap_proc_macro))]\n107                 inner: literal,\n108             ..\n109         }) if literal.repr.starts_with('-') => {\n110             push_negative_literal(vec, literal);\n111         }\n112         _ => vec.push(token),\n113     }\n114 \n115     #[cold]\n116     fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n117         literal.repr.remove(0);\n118         let mut punct = crate::Punct::new('-', Spacing::Alone);\n119         punct.set_span(crate::Span::_new_fallback(literal.span));\n120         vec.push(TokenTree::Punct(punct));\n121         vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n122     }\n123 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}