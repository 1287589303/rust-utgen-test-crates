{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[track_caller]\nfn validate_ident(string: &str) {\n    if string.is_empty() {\n        panic!(\"Ident is not allowed to be empty; use Option<Ident>\");\n    }\n    if string.bytes().all(|digit| b'0' <= digit && digit <= b'9') {\n        panic!(\"Ident cannot be a number; use Literal instead\");\n    }\n    fn ident_ok(string: &str) -> bool {\n        let mut chars = string.chars();\n        let first = chars.next().unwrap();\n        if !is_ident_start(first) {\n            return false;\n        }\n        for ch in chars {\n            if !is_ident_continue(ch) {\n                return false;\n            }\n        }\n        true\n    }\n    if !ident_ok(string) {\n        panic!(\"{:?} is not a valid Ident\", string);\n    }\n}\nfn ident_ok(string: &str) -> bool {\n    let mut chars = string.chars();\n    let first = chars.next().unwrap();\n    if !is_ident_start(first) {\n        return false;\n    }\n    for ch in chars {\n        if !is_ident_continue(ch) {\n            return false;\n        }\n    }\n    true\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n848 fn validate_ident(string: &str) {\n849     if string.is_empty() {\n850         panic!(\"Ident is not allowed to be empty; use Option<Ident>\");\n851     }\n852 \n853     if string.bytes().all(|digit| b'0' <= digit && digit <= b'9') {\n854         panic!(\"Ident cannot be a number; use Literal instead\");\n855     }\n856 \n857     fn ident_ok(string: &str) -> bool {\n858         let mut chars = string.chars();\n859         let first = chars.next().unwrap();\n860         if !is_ident_start(first) {\n861             return false;\n862         }\n863         for ch in chars {\n864             if !is_ident_continue(ch) {\n865                 return false;\n866             }\n867         }\n868         true\n869     }\n870 \n871     if !ident_ok(string) {\n872         panic!(\"{:?} is not a valid Ident\", string);\n873     }\n874 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}