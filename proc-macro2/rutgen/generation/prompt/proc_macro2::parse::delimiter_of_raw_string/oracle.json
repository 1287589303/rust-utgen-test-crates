{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {\n        self.rest.bytes()\n    }\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn delimiter_of_raw_string(input: Cursor) -> PResult<&str> {\n    for (i, byte) in input.bytes().enumerate() {\n        match byte {\n            b'\"' => {\n                if i > 255 {\n                    return Err(Reject);\n                }\n                return Ok((input.advance(i + 1), &input.rest[..i]));\n            }\n            b'#' => {}\n            _ => break,\n        }\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n474 fn delimiter_of_raw_string(input: Cursor) -> PResult<&str> {\n475     for (i, byte) in input.bytes().enumerate() {\n476         match byte {\n477             b'\"' => {\n478                 if i > 255 {\n479                     // https://github.com/rust-lang/rust/pull/95251\n480                     return Err(Reject);\n481                 }\n482                 return Ok((input.advance(i + 1), &input.rest[..i]));\n483             }\n484             b'#' => {}\n485             _ => break,\n486         }\n487     }\n488     Err(Reject)\n489 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}