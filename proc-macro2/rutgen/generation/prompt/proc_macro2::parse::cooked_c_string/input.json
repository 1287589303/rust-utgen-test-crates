{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {\n        self.rest.char_indices()\n    }\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn cooked_c_string(mut input: Cursor) -> Result<Cursor, Reject> {\n    let mut chars = input.char_indices();\n    while let Some((i, ch)) = chars.next() {\n        match ch {\n            '\"' => {\n                let input = input.advance(i + 1);\n                return Ok(literal_suffix(input));\n            }\n            '\\r' => {\n                match chars.next() {\n                    Some((_, '\\n')) => {}\n                    _ => break,\n                }\n            }\n            '\\\\' => {\n                match chars.next() {\n                    Some((_, 'x')) => {\n                        backslash_x_nonzero(&mut chars)?;\n                    }\n                    Some((_, 'n' | 'r' | 't' | '\\\\' | '\\'' | '\"')) => {}\n                    Some((_, 'u')) => {\n                        if backslash_u(&mut chars)? == '\\0' {\n                            break;\n                        }\n                    }\n                    Some((newline, ch @ ('\\n' | '\\r'))) => {\n                        input = input.advance(newline + 1);\n                        trailing_backslash(&mut input, ch as u8)?;\n                        chars = input.char_indices();\n                    }\n                    _ => break,\n                }\n            }\n            '\\0' => break,\n            _ch => {}\n        }\n    }\n    Err(Reject)\n}\nfn literal_suffix(input: Cursor) -> Cursor {\n    match ident_not_raw(input) {\n        Ok((input, _)) => input,\n        Err(Reject) => input,\n    }\n}\nfn trailing_backslash(input: &mut Cursor, mut last: u8) -> Result<(), Reject> {\n    let mut whitespace = input.bytes().enumerate();\n    loop {\n        if last == b'\\r' && whitespace.next().map_or(true, |(_, b)| b != b'\\n') {\n            return Err(Reject);\n        }\n        match whitespace.next() {\n            Some((_, b @ (b' ' | b'\\t' | b'\\n' | b'\\r'))) => {\n                last = b;\n            }\n            Some((offset, _)) => {\n                *input = input.advance(offset);\n                return Ok(());\n            }\n            None => return Err(Reject),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n544 fn cooked_c_string(mut input: Cursor) -> Result<Cursor, Reject> {\n545     let mut chars = input.char_indices();\n546 \n547     while let Some((i, ch)) = chars.next() {\n548         match ch {\n549             '\"' => {\n550                 let input = input.advance(i + 1);\n551                 return Ok(literal_suffix(input));\n552             }\n553             '\\r' => match chars.next() {\n554                 Some((_, '\\n')) => {}\n555                 _ => break,\n556             },\n557             '\\\\' => match chars.next() {\n558                 Some((_, 'x')) => {\n559                     backslash_x_nonzero(&mut chars)?;\n560                 }\n561                 Some((_, 'n' | 'r' | 't' | '\\\\' | '\\'' | '\"')) => {}\n562                 Some((_, 'u')) => {\n563                     if backslash_u(&mut chars)? == '\\0' {\n564                         break;\n565                     }\n566                 }\n567                 Some((newline, ch @ ('\\n' | '\\r'))) => {\n568                     input = input.advance(newline + 1);\n569                     trailing_backslash(&mut input, ch as u8)?;\n570                     chars = input.char_indices();\n571                 }\n572                 _ => break,\n573             },\n574             '\\0' => break,\n575             _ch => {}\n576         }\n577     }\n578     Err(Reject)\n579 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}