{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {\n        self.rest.starts_with(s)\n    }\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {\n        self.rest.chars()\n    }\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn punct_char(input: Cursor) -> PResult<char> {\n    if input.starts_with(\"//\") || input.starts_with(\"/*\") {\n        return Err(Reject);\n    }\n    let mut chars = input.chars();\n    let first = match chars.next() {\n        Some(ch) => ch,\n        None => {\n            return Err(Reject);\n        }\n    };\n    let recognized = \"~!@#$%^&*-=+|;:,<.>/?'\";\n    if recognized.contains(first) {\n        Ok((input.advance(first.len_utf8()), first))\n    } else {\n        Err(Reject)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n888 fn punct_char(input: Cursor) -> PResult<char> {\n889     if input.starts_with(\"//\") || input.starts_with(\"/*\") {\n890         // Do not accept `/` of a comment as a punct.\n891         return Err(Reject);\n892     }\n893 \n894     let mut chars = input.chars();\n895     let first = match chars.next() {\n896         Some(ch) => ch,\n897         None => {\n898             return Err(Reject);\n899         }\n900     };\n901     let recognized = \"~!@#$%^&*-=+|;:,<.>/?'\";\n902     if recognized.contains(first) {\n903         Ok((input.advance(first.len_utf8()), first))\n904     } else {\n905         Err(Reject)\n906     }\n907 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}