{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\npub(crate) struct RcVecMut<'a, T> {\n    inner: &'a mut Vec<T>,\n}\npub(crate) struct RcVec<T> {\n    inner: Rc<Vec<T>>,\n}\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Group {\n    inner: imp::Group,\n}\npub(crate) struct RcVecBuilder<T> {\n    inner: Vec<T>,\n}\n#[derive(Clone)]\npub(crate) struct RcVecIntoIter<T> {\n    inner: vec::IntoIter<T>,\n}\n#[derive(Clone)]\npub(crate) enum Group {\n    Compiler(proc_macro::Group),\n    Fallback(fallback::Group),\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\nimpl Drop for TokenStream {\n    fn drop(&mut self) {\n        let mut stack = Vec::new();\n        let mut current = match self.inner.get_mut() {\n            Some(inner) => inner.take().into_iter(),\n            None => return,\n        };\n        loop {\n            while let Some(token) = current.next() {\n                let group = match token {\n                    TokenTree::Group(group) => group.inner,\n                    _ => continue,\n                };\n                #[cfg(wrap_proc_macro)]\n                let group = match group {\n                    crate::imp::Group::Fallback(group) => group,\n                    crate::imp::Group::Compiler(_) => continue,\n                };\n                let mut group = group;\n                if let Some(inner) = group.stream.inner.get_mut() {\n                    stack.push(current);\n                    current = inner.take().into_iter();\n                }\n            }\n            match stack.pop() {\n                Some(next) => current = next,\n                None => return,\n            }\n        }\n    }\n}\nimpl<'a, T> RcVecMut<'a, T> {\n    pub(crate) fn push(&mut self, element: T) {}\n    pub(crate) fn extend(&mut self, iter: impl IntoIterator<Item = T>) {}\n    pub(crate) fn as_mut(&mut self) -> RcVecMut<T> {}\n    pub(crate) fn take(self) -> RcVecBuilder<T> {\n        let vec = mem::take(self.inner);\n        RcVecBuilder { inner: vec }\n    }\n}\nimpl<T> RcVec<T> {\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn len(&self) -> usize {}\n    pub(crate) fn iter(&self) -> slice::Iter<T> {}\n    pub(crate) fn make_mut(&mut self) -> RcVecMut<T>\n    where\n        T: Clone,\n    {}\n    pub(crate) fn get_mut(&mut self) -> Option<RcVecMut<T>> {\n        let inner = Rc::get_mut(&mut self.inner)?;\n        Some(RcVecMut { inner })\n    }\n    pub(crate) fn make_owned(mut self) -> RcVecBuilder<T>\n    where\n        T: Clone,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n127 fn drop(&mut self) {\n128     let mut stack = Vec::new();\n129     let mut current = match self.inner.get_mut() {\n130         Some(inner) => inner.take().into_iter(),\n131         None => return,\n132     };\n133     loop {\n134         while let Some(token) = current.next() {\n135             let group = match token {\n136                 TokenTree::Group(group) => group.inner,\n137                 _ => continue,\n138             };\n139             #[cfg(wrap_proc_macro)]\n140             let group = match group {\n141                 crate::imp::Group::Fallback(group) => group,\n142                 crate::imp::Group::Compiler(_) => continue,\n143             };\n144             let mut group = group;\n145             if let Some(inner) = group.stream.inner.get_mut() {\n146                 stack.push(current);\n147                 current = inner.take().into_iter();\n148             }\n149         }\n150         match stack.pop() {\n151             Some(next) => current = next,\n152             None => return,\n153         }\n154     }\n155 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}