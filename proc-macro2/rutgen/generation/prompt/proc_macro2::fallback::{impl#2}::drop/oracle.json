{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\npub(crate) struct RcVecMut<'a, T> {\n    inner: &'a mut Vec<T>,\n}\npub(crate) struct RcVec<T> {\n    inner: Rc<Vec<T>>,\n}\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Group {\n    inner: imp::Group,\n}\npub(crate) struct RcVecBuilder<T> {\n    inner: Vec<T>,\n}\n#[derive(Clone)]\npub(crate) struct RcVecIntoIter<T> {\n    inner: vec::IntoIter<T>,\n}\n#[derive(Clone)]\npub(crate) enum Group {\n    Compiler(proc_macro::Group),\n    Fallback(fallback::Group),\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\nimpl Drop for TokenStream {\n    fn drop(&mut self) {\n        let mut stack = Vec::new();\n        let mut current = match self.inner.get_mut() {\n            Some(inner) => inner.take().into_iter(),\n            None => return,\n        };\n        loop {\n            while let Some(token) = current.next() {\n                let group = match token {\n                    TokenTree::Group(group) => group.inner,\n                    _ => continue,\n                };\n                #[cfg(wrap_proc_macro)]\n                let group = match group {\n                    crate::imp::Group::Fallback(group) => group,\n                    crate::imp::Group::Compiler(_) => continue,\n                };\n                let mut group = group;\n                if let Some(inner) = group.stream.inner.get_mut() {\n                    stack.push(current);\n                    current = inner.take().into_iter();\n                }\n            }\n            match stack.pop() {\n                Some(next) => current = next,\n                None => return,\n            }\n        }\n    }\n}\nimpl<'a, T> RcVecMut<'a, T> {\n    pub(crate) fn push(&mut self, element: T) {}\n    pub(crate) fn extend(&mut self, iter: impl IntoIterator<Item = T>) {}\n    pub(crate) fn as_mut(&mut self) -> RcVecMut<T> {}\n    pub(crate) fn take(self) -> RcVecBuilder<T> {\n        let vec = mem::take(self.inner);\n        RcVecBuilder { inner: vec }\n    }\n}\nimpl<T> RcVec<T> {\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn len(&self) -> usize {}\n    pub(crate) fn iter(&self) -> slice::Iter<T> {}\n    pub(crate) fn make_mut(&mut self) -> RcVecMut<T>\n    where\n        T: Clone,\n    {}\n    pub(crate) fn get_mut(&mut self) -> Option<RcVecMut<T>> {\n        let inner = Rc::get_mut(&mut self.inner)?;\n        Some(RcVecMut { inner })\n    }\n    pub(crate) fn make_owned(mut self) -> RcVecBuilder<T>\n    where\n        T: Clone,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n127 fn drop(&mut self) {\n128     let mut stack = Vec::new();\n129     let mut current = match self.inner.get_mut() {\n130         Some(inner) => inner.take().into_iter(),\n131         None => return,\n132     };\n133     loop {\n134         while let Some(token) = current.next() {\n135             let group = match token {\n136                 TokenTree::Group(group) => group.inner,\n137                 _ => continue,\n138             };\n139             #[cfg(wrap_proc_macro)]\n140             let group = match group {\n141                 crate::imp::Group::Fallback(group) => group,\n142                 crate::imp::Group::Compiler(_) => continue,\n143             };\n144             let mut group = group;\n145             if let Some(inner) = group.stream.inner.get_mut() {\n146                 stack.push(current);\n147                 current = inner.take().into_iter();\n148             }\n149         }\n150         match stack.pop() {\n151             Some(next) => current = next,\n152             None => return,\n153         }\n154     }\n155 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}