{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {}\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {\n        self.rest.chars()\n    }\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn int(input: Cursor) -> Result<Cursor, Reject> {\n    let mut rest = digits(input)?;\n    if let Some(ch) = rest.chars().next() {\n        if is_ident_start(ch) {\n            rest = ident_not_raw(rest)?.0;\n        }\n    }\n    word_break(rest)\n}\nfn digits(mut input: Cursor) -> Result<Cursor, Reject> {\n    let base = if input.starts_with(\"0x\") {\n        input = input.advance(2);\n        16\n    } else if input.starts_with(\"0o\") {\n        input = input.advance(2);\n        8\n    } else if input.starts_with(\"0b\") {\n        input = input.advance(2);\n        2\n    } else {\n        10\n    };\n    let mut len = 0;\n    let mut empty = true;\n    for b in input.bytes() {\n        match b {\n            b'0'..=b'9' => {\n                let digit = (b - b'0') as u64;\n                if digit >= base {\n                    return Err(Reject);\n                }\n            }\n            b'a'..=b'f' => {\n                let digit = 10 + (b - b'a') as u64;\n                if digit >= base {\n                    break;\n                }\n            }\n            b'A'..=b'F' => {\n                let digit = 10 + (b - b'A') as u64;\n                if digit >= base {\n                    break;\n                }\n            }\n            b'_' => {\n                if empty && base == 10 {\n                    return Err(Reject);\n                }\n                len += 1;\n                continue;\n            }\n            _ => break,\n        }\n        len += 1;\n        empty = false;\n    }\n    if empty { Err(Reject) } else { Ok(input.advance(len)) }\n}\nfn word_break(input: Cursor) -> Result<Cursor, Reject> {\n    match input.chars().next() {\n        Some(ch) if is_ident_continue(ch) => Err(Reject),\n        Some(_) | None => Ok(input),\n    }\n}\nfn ident_not_raw(input: Cursor) -> PResult<&str> {\n    let mut chars = input.char_indices();\n    match chars.next() {\n        Some((_, ch)) if is_ident_start(ch) => {}\n        _ => return Err(Reject),\n    }\n    let mut end = input.len();\n    for (i, ch) in chars {\n        if !is_ident_continue(ch) {\n            end = i;\n            break;\n        }\n    }\n    Ok((input.advance(end), &input.rest[..end]))\n}\npub(crate) fn is_ident_start(c: char) -> bool {\n    c == '_' || unicode_ident::is_xid_start(c)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n806 fn int(input: Cursor) -> Result<Cursor, Reject> {\n807     let mut rest = digits(input)?;\n808     if let Some(ch) = rest.chars().next() {\n809         if is_ident_start(ch) {\n810             rest = ident_not_raw(rest)?.0;\n811         }\n812     }\n813     word_break(rest)\n814 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}