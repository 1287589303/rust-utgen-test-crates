{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {\n        self.rest.bytes()\n    }\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn raw_string(input: Cursor) -> Result<Cursor, Reject> {\n    let (input, delimiter) = delimiter_of_raw_string(input)?;\n    let mut bytes = input.bytes().enumerate();\n    while let Some((i, byte)) = bytes.next() {\n        match byte {\n            b'\"' if input.rest[i + 1..].starts_with(delimiter) => {\n                let rest = input.advance(i + 1 + delimiter.len());\n                return Ok(literal_suffix(rest));\n            }\n            b'\\r' => {\n                match bytes.next() {\n                    Some((_, b'\\n')) => {}\n                    _ => break,\n                }\n            }\n            _ => {}\n        }\n    }\n    Err(Reject)\n}\nfn delimiter_of_raw_string(input: Cursor) -> PResult<&str> {\n    for (i, byte) in input.bytes().enumerate() {\n        match byte {\n            b'\"' => {\n                if i > 255 {\n                    return Err(Reject);\n                }\n                return Ok((input.advance(i + 1), &input.rest[..i]));\n            }\n            b'#' => {}\n            _ => break,\n        }\n    }\n    Err(Reject)\n}\nfn literal_suffix(input: Cursor) -> Cursor {\n    match ident_not_raw(input) {\n        Ok((input, _)) => input,\n        Err(Reject) => input,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n414 fn raw_string(input: Cursor) -> Result<Cursor, Reject> {\n415     let (input, delimiter) = delimiter_of_raw_string(input)?;\n416     let mut bytes = input.bytes().enumerate();\n417     while let Some((i, byte)) = bytes.next() {\n418         match byte {\n419             b'\"' if input.rest[i + 1..].starts_with(delimiter) => {\n420                 let rest = input.advance(i + 1 + delimiter.len());\n421                 return Ok(literal_suffix(rest));\n422             }\n423             b'\\r' => match bytes.next() {\n424                 Some((_, b'\\n')) => {}\n425                 _ => break,\n426             },\n427             _ => {}\n428         }\n429     }\n430     Err(Reject)\n431 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}