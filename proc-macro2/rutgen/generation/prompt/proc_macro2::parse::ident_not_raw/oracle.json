{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {\n        self.rest.len()\n    }\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {\n        self.rest.char_indices()\n    }\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn ident_not_raw(input: Cursor) -> PResult<&str> {\n    let mut chars = input.char_indices();\n    match chars.next() {\n        Some((_, ch)) if is_ident_start(ch) => {}\n        _ => return Err(Reject),\n    }\n    let mut end = input.len();\n    for (i, ch) in chars {\n        if !is_ident_continue(ch) {\n            end = i;\n            break;\n        }\n    }\n    Ok((input.advance(end), &input.rest[..end]))\n}\npub(crate) fn is_ident_continue(c: char) -> bool {\n    unicode_ident::is_xid_continue(c)\n}\npub(crate) fn is_ident_start(c: char) -> bool {\n    c == '_' || unicode_ident::is_xid_start(c)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n318 fn ident_not_raw(input: Cursor) -> PResult<&str> {\n319     let mut chars = input.char_indices();\n320 \n321     match chars.next() {\n322         Some((_, ch)) if is_ident_start(ch) => {}\n323         _ => return Err(Reject),\n324     }\n325 \n326     let mut end = input.len();\n327     for (i, ch) in chars {\n328         if !is_ident_continue(ch) {\n329             end = i;\n330             break;\n331         }\n332     }\n333 \n334     Ok((input.advance(end), &input.rest[..end]))\n335 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}