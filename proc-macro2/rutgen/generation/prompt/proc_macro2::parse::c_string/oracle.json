{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {}\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {\n        if self.starts_with(tag) { Ok(self.advance(tag.len())) } else { Err(Reject) }\n    }\n}\nfn c_string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"c\\\"\") {\n        cooked_c_string(input)\n    } else if let Ok(input) = input.parse(\"cr\") {\n        raw_c_string(input)\n    } else {\n        Err(Reject)\n    }\n}\nfn raw_c_string(input: Cursor) -> Result<Cursor, Reject> {\n    let (input, delimiter) = delimiter_of_raw_string(input)?;\n    let mut bytes = input.bytes().enumerate();\n    while let Some((i, byte)) = bytes.next() {\n        match byte {\n            b'\"' if input.rest[i + 1..].starts_with(delimiter) => {\n                let rest = input.advance(i + 1 + delimiter.len());\n                return Ok(literal_suffix(rest));\n            }\n            b'\\r' => {\n                match bytes.next() {\n                    Some((_, b'\\n')) => {}\n                    _ => break,\n                }\n            }\n            b'\\0' => break,\n            _ => {}\n        }\n    }\n    Err(Reject)\n}\nfn cooked_c_string(mut input: Cursor) -> Result<Cursor, Reject> {\n    let mut chars = input.char_indices();\n    while let Some((i, ch)) = chars.next() {\n        match ch {\n            '\"' => {\n                let input = input.advance(i + 1);\n                return Ok(literal_suffix(input));\n            }\n            '\\r' => {\n                match chars.next() {\n                    Some((_, '\\n')) => {}\n                    _ => break,\n                }\n            }\n            '\\\\' => {\n                match chars.next() {\n                    Some((_, 'x')) => {\n                        backslash_x_nonzero(&mut chars)?;\n                    }\n                    Some((_, 'n' | 'r' | 't' | '\\\\' | '\\'' | '\"')) => {}\n                    Some((_, 'u')) => {\n                        if backslash_u(&mut chars)? == '\\0' {\n                            break;\n                        }\n                    }\n                    Some((newline, ch @ ('\\n' | '\\r'))) => {\n                        input = input.advance(newline + 1);\n                        trailing_backslash(&mut input, ch as u8)?;\n                        chars = input.char_indices();\n                    }\n                    _ => break,\n                }\n            }\n            '\\0' => break,\n            _ch => {}\n        }\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n514 fn c_string(input: Cursor) -> Result<Cursor, Reject> {\n515     if let Ok(input) = input.parse(\"c\\\"\") {\n516         cooked_c_string(input)\n517     } else if let Ok(input) = input.parse(\"cr\") {\n518         raw_c_string(input)\n519     } else {\n520         Err(Reject)\n521     }\n522 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}