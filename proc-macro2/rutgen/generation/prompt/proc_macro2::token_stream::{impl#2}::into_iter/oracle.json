{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is proc_macro2\nuse crate::marker::{ProcMacroAutoTraits, MARKER};\nuse crate::{imp, TokenTree};\nuse core::fmt::{self, Debug};\npub use crate::TokenStream;\n#[derive(Clone)]\npub struct TokenStream {\n    inner: imp::TokenStream,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub struct IntoIter {\n    inner: imp::TokenTreeIter,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Copy, Clone)]\n#[cfg_attr(\n    all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)),\n    derive(PartialEq, Eq)\n)]\npub(crate) struct ProcMacroAutoTraits(PhantomData<Rc<()>>);\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\n#[derive(Clone)]\npub(crate) enum TokenStream {\n    Compiler(DeferredTokenStream),\n    Fallback(fallback::TokenStream),\n}\nimpl IntoIterator for TokenStream {\n    type Item = TokenTree;\n    type IntoIter = IntoIter;\n    fn into_iter(self) -> IntoIter {\n        IntoIter {\n            inner: self.inner.into_iter(),\n            _marker: MARKER,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1377 fn into_iter(self) -> IntoIter {\n1378     IntoIter {\n1379         inner: self.inner.into_iter(),\n1380         _marker: MARKER,\n1381     }\n1382 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}