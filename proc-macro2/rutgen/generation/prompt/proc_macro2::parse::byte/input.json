{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {\n        self.rest.bytes()\n    }\n    fn chars(&self) -> Chars<'a> {\n        self.rest.chars()\n    }\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {\n        if self.starts_with(tag) { Ok(self.advance(tag.len())) } else { Err(Reject) }\n    }\n}\nfn byte(input: Cursor) -> Result<Cursor, Reject> {\n    let input = input.parse(\"b'\")?;\n    let mut bytes = input.bytes().enumerate();\n    let ok = match bytes.next().map(|(_, b)| b) {\n        Some(b'\\\\') => {\n            match bytes.next().map(|(_, b)| b) {\n                Some(b'x') => backslash_x_byte(&mut bytes).is_ok(),\n                Some(b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"') => true,\n                _ => false,\n            }\n        }\n        b => b.is_some(),\n    };\n    if !ok {\n        return Err(Reject);\n    }\n    let (offset, _) = bytes.next().ok_or(Reject)?;\n    if !input.chars().as_str().is_char_boundary(offset) {\n        return Err(Reject);\n    }\n    let input = input.advance(offset).parse(\"'\")?;\n    Ok(literal_suffix(input))\n}\nfn literal_suffix(input: Cursor) -> Cursor {\n    match ident_not_raw(input) {\n        Ok((input, _)) => input,\n        Err(Reject) => input,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n581 fn byte(input: Cursor) -> Result<Cursor, Reject> {\n582     let input = input.parse(\"b'\")?;\n583     let mut bytes = input.bytes().enumerate();\n584     let ok = match bytes.next().map(|(_, b)| b) {\n585         Some(b'\\\\') => match bytes.next().map(|(_, b)| b) {\n586             Some(b'x') => backslash_x_byte(&mut bytes).is_ok(),\n587             Some(b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"') => true,\n588             _ => false,\n589         },\n590         b => b.is_some(),\n591     };\n592     if !ok {\n593         return Err(Reject);\n594     }\n595     let (offset, _) = bytes.next().ok_or(Reject)?;\n596     if !input.chars().as_str().is_char_boundary(offset) {\n597         return Err(Reject);\n598     }\n599     let input = input.advance(offset).parse(\"'\")?;\n600     Ok(literal_suffix(input))\n601 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}