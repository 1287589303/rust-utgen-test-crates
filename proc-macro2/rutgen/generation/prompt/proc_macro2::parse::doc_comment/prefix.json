{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\npub(crate) struct TokenStreamBuilder {\n    inner: RcVecBuilder<TokenTree>,\n}\n#[derive(Clone)]\npub struct Punct {\n    ch: char,\n    spacing: Spacing,\n    span: Span,\n}\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Group {\n    inner: imp::Group,\n}\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Ident {\n    inner: imp::Ident,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\n#[derive(Copy, Clone)]\npub struct Span {\n    inner: imp::Span,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub struct Literal {\n    inner: imp::Literal,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\npub(crate) struct Reject;\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\n#[derive(Clone)]\npub(crate) enum Literal {\n    Compiler(proc_macro::Literal),\n    Fallback(fallback::Literal),\n}\n#[derive(Clone)]\npub(crate) enum Group {\n    Compiler(proc_macro::Group),\n    Fallback(fallback::Group),\n}\n#[derive(Clone)]\npub(crate) enum Ident {\n    Compiler(proc_macro::Ident),\n    Fallback(fallback::Ident),\n}\n#[derive(Copy, Clone)]\npub(crate) enum Span {\n    Compiler(proc_macro::Span),\n    Fallback(fallback::Span),\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Delimiter {\n    /// `( ... )`\n    Parenthesis,\n    /// `{ ... }`\n    Brace,\n    /// `[ ... ]`\n    Bracket,\n    /// `∅ ... ∅`\n    ///\n    /// An invisible delimiter, that may, for example, appear around tokens\n    /// coming from a \"macro variable\" `$var`. It is important to preserve\n    /// operator priorities in cases like `$var * 3` where `$var` is `1 + 2`.\n    /// Invisible delimiters may not survive roundtrip of a token stream through\n    /// a string.\n    ///\n    /// <div class=\"warning\">\n    ///\n    /// Note: rustc currently can ignore the grouping of tokens delimited by `None` in the output\n    /// of a proc_macro. Only `None`-delimited groups created by a macro_rules macro in the input\n    /// of a proc_macro macro are preserved, and only in very specific circumstances.\n    /// Any `None`-delimited groups (re)created by a proc_macro will therefore not preserve\n    /// operator priorities as indicated above. The other `Delimiter` variants should be used\n    /// instead in this context. This is a rustc bug. For details, see\n    /// [rust-lang/rust#67062](https://github.com/rust-lang/rust/issues/67062).\n    ///\n    /// </div>\n    None,\n}\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Spacing {\n    /// E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.\n    Alone,\n    /// E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`.\n    ///\n    /// Additionally, single quote `'` can join with identifiers to form\n    /// lifetimes `'ident`.\n    Joint,\n}\nimpl TokenStreamBuilder {\n    pub(crate) fn new() -> Self {\n        TokenStreamBuilder {\n            inner: RcVecBuilder::new(),\n        }\n    }\n    pub(crate) fn with_capacity(cap: usize) -> Self {\n        TokenStreamBuilder {\n            inner: RcVecBuilder::with_capacity(cap),\n        }\n    }\n    pub(crate) fn push_token_from_parser(&mut self, tt: TokenTree) {\n        self.inner.push(tt);\n    }\n    pub(crate) fn build(self) -> TokenStream {\n        TokenStream {\n            inner: self.inner.build(),\n        }\n    }\n}\nimpl Punct {\n    pub fn new(ch: char, spacing: Spacing) -> Self {\n        if let '!' | '#' | '$' | '%' | '&' | '\\'' | '*' | '+' | ',' | '-' | '.' | '/'\n        | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '^' | '|' | '~' = ch {\n            Punct {\n                ch,\n                spacing,\n                span: Span::call_site(),\n            }\n        } else {\n            panic!(\"unsupported proc macro punctuation character {:?}\", ch);\n        }\n    }\n    pub fn as_char(&self) -> char {}\n    pub fn spacing(&self) -> Spacing {}\n    pub fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {\n        self.span = span;\n    }\n}\nimpl Literal {\n    pub(crate) fn _new(repr: String) -> Self {\n        Literal {\n            repr,\n            span: Span::call_site(),\n        }\n    }\n    pub(crate) fn from_str_checked(repr: &str) -> Result<Self, LexError> {\n        let mut cursor = get_cursor(repr);\n        #[cfg(span_locations)]\n        let lo = cursor.off;\n        let negative = cursor.starts_with_char('-');\n        if negative {\n            cursor = cursor.advance(1);\n            if !cursor.starts_with_fn(|ch| ch.is_ascii_digit()) {\n                return Err(LexError::call_site());\n            }\n        }\n        if let Ok((rest, mut literal)) = parse::literal(cursor) {\n            if rest.is_empty() {\n                if negative {\n                    literal.repr.insert(0, '-');\n                }\n                literal.span = Span {\n                    #[cfg(span_locations)]\n                    lo,\n                    #[cfg(span_locations)]\n                    hi: rest.off,\n                };\n                return Ok(literal);\n            }\n        }\n        Err(LexError::call_site())\n    }\n    pub(crate) unsafe fn from_str_unchecked(repr: &str) -> Self {\n        Literal::_new(repr.to_owned())\n    }\n    pub(crate) fn f32_unsuffixed(f: f32) -> Literal {}\n    pub(crate) fn f64_unsuffixed(f: f64) -> Literal {}\n    pub(crate) fn string(string: &str) -> Literal {\n        let mut repr = String::with_capacity(string.len() + 2);\n        repr.push('\"');\n        escape_utf8(string, &mut repr);\n        repr.push('\"');\n        Literal::_new(repr)\n    }\n    pub(crate) fn character(ch: char) -> Literal {}\n    pub(crate) fn byte_character(byte: u8) -> Literal {}\n    pub(crate) fn byte_string(bytes: &[u8]) -> Literal {}\n    pub(crate) fn c_string(string: &CStr) -> Literal {}\n    pub(crate) fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {\n        self.inner.set_span(span.inner);\n    }\n    pub(crate) fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {}\n}\nimpl Group {\n    fn _new(inner: imp::Group) -> Self {\n        Group { inner }\n    }\n    fn _new_fallback(inner: fallback::Group) -> Self {\n        Group {\n            inner: imp::Group::from(inner),\n        }\n    }\n    pub(crate) fn new(delimiter: Delimiter, stream: TokenStream) -> Self {\n        Group {\n            delimiter,\n            stream,\n            span: Span::call_site(),\n        }\n    }\n    pub fn delimiter(&self) -> Delimiter {}\n    pub fn stream(&self) -> TokenStream {}\n    pub fn span(&self) -> Span {}\n    pub fn span_open(&self) -> Span {}\n    pub fn span_close(&self) -> Span {}\n    pub fn delim_span(&self) -> DelimSpan {}\n    pub(crate) fn set_span(&mut self, span: Span) {\n        self.span = span;\n    }\n}\nimpl Ident {\n    fn _new(inner: imp::Ident) -> Self {\n        Ident { inner, _marker: MARKER }\n    }\n    fn _new_fallback(inner: fallback::Ident) -> Self {\n        Ident {\n            inner: imp::Ident::from(inner),\n            _marker: MARKER,\n        }\n    }\n    #[track_caller]\n    pub fn new(string: &str, span: Span) -> Self {\n        Ident::_new(imp::Ident::new_checked(string, span.inner))\n    }\n    #[track_caller]\n    pub fn new_raw(string: &str, span: Span) -> Self {\n        Ident::_new(imp::Ident::new_raw_checked(string, span.inner))\n    }\n    pub fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {}\n}\nimpl Span {\n    fn _new(inner: imp::Span) -> Self {\n        Span { inner, _marker: MARKER }\n    }\n    fn _new_fallback(inner: fallback::Span) -> Self {\n        Span {\n            inner: imp::Span::from(inner),\n            _marker: MARKER,\n        }\n    }\n    pub fn call_site() -> Self {\n        Span::_new(imp::Span::call_site())\n    }\n    pub fn mixed_site() -> Self {\n        Span::_new(imp::Span::mixed_site())\n    }\n    #[cfg(procmacro2_semver_exempt)]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn def_site() -> Self {\n        Span::_new(imp::Span::def_site())\n    }\n    pub fn resolved_at(&self, other: Span) -> Span {}\n    pub fn located_at(&self, other: Span) -> Span {}\n    #[cfg(wrap_proc_macro)]\n    pub fn unwrap(self) -> proc_macro::Span {}\n    #[cfg(wrap_proc_macro)]\n    pub fn unstable(self) -> proc_macro::Span {}\n    #[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn source_file(&self) -> SourceFile {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn byte_range(&self) -> Range<usize> {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn start(&self) -> LineColumn {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn end(&self) -> LineColumn {}\n    pub fn join(&self, other: Span) -> Option<Span> {}\n    #[cfg(procmacro2_semver_exempt)]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn eq(&self, other: &Span) -> bool {}\n    pub fn source_text(&self) -> Option<String> {}\n}\nfn doc_comment<'a>(\n    input: Cursor<'a>,\n    trees: &mut TokenStreamBuilder,\n) -> PResult<'a, ()> {\n    #[cfg(span_locations)]\n    let lo = input.off;\n    let (rest, (comment, inner)) = doc_comment_contents(input)?;\n    let fallback_span = Span {\n        #[cfg(span_locations)]\n        lo,\n        #[cfg(span_locations)]\n        hi: rest.off,\n    };\n    let span = crate::Span::_new_fallback(fallback_span);\n    let mut scan_for_bare_cr = comment;\n    while let Some(cr) = scan_for_bare_cr.find('\\r') {\n        let rest = &scan_for_bare_cr[cr + 1..];\n        if !rest.starts_with('\\n') {\n            return Err(Reject);\n        }\n        scan_for_bare_cr = rest;\n    }\n    let mut pound = Punct::new('#', Spacing::Alone);\n    pound.set_span(span);\n    trees.push_token_from_parser(TokenTree::Punct(pound));\n    if inner {\n        let mut bang = Punct::new('!', Spacing::Alone);\n        bang.set_span(span);\n        trees.push_token_from_parser(TokenTree::Punct(bang));\n    }\n    let doc_ident = crate::Ident::_new_fallback(\n        Ident::new_unchecked(\"doc\", fallback_span),\n    );\n    let mut equal = Punct::new('=', Spacing::Alone);\n    equal.set_span(span);\n    let mut literal = crate::Literal::_new_fallback(Literal::string(comment));\n    literal.set_span(span);\n    let mut bracketed = TokenStreamBuilder::with_capacity(3);\n    bracketed.push_token_from_parser(TokenTree::Ident(doc_ident));\n    bracketed.push_token_from_parser(TokenTree::Punct(equal));\n    bracketed.push_token_from_parser(TokenTree::Literal(literal));\n    let group = Group::new(Delimiter::Bracket, bracketed.build());\n    let mut group = crate::Group::_new_fallback(group);\n    group.set_span(span);\n    trees.push_token_from_parser(TokenTree::Group(group));\n    Ok((rest, ()))\n}\nfn doc_comment_contents(input: Cursor) -> PResult<(&str, bool)> {\n    if input.starts_with(\"//!\") {\n        let input = input.advance(3);\n        let (input, s) = take_until_newline_or_eof(input);\n        Ok((input, (s, true)))\n    } else if input.starts_with(\"/*!\") {\n        let (input, s) = block_comment(input)?;\n        Ok((input, (&s[3..s.len() - 2], true)))\n    } else if input.starts_with(\"///\") {\n        let input = input.advance(3);\n        if input.starts_with_char('/') {\n            return Err(Reject);\n        }\n        let (input, s) = take_until_newline_or_eof(input);\n        Ok((input, (s, false)))\n    } else if input.starts_with(\"/**\") && !input.rest[3..].starts_with('*') {\n        let (input, s) = block_comment(input)?;\n        Ok((input, (&s[3..s.len() - 2], false)))\n    } else {\n        Err(Reject)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n909 fn doc_comment<'a>(input: Cursor<'a>, trees: &mut TokenStreamBuilder) -> PResult<'a, ()> {\n910     #[cfg(span_locations)]\n911     let lo = input.off;\n912     let (rest, (comment, inner)) = doc_comment_contents(input)?;\n913     let fallback_span = Span {\n914         #[cfg(span_locations)]\n915         lo,\n916         #[cfg(span_locations)]\n917         hi: rest.off,\n918     };\n919     let span = crate::Span::_new_fallback(fallback_span);\n920 \n921     let mut scan_for_bare_cr = comment;\n922     while let Some(cr) = scan_for_bare_cr.find('\\r') {\n923         let rest = &scan_for_bare_cr[cr + 1..];\n924         if !rest.starts_with('\\n') {\n925             return Err(Reject);\n926         }\n927         scan_for_bare_cr = rest;\n928     }\n929 \n930     let mut pound = Punct::new('#', Spacing::Alone);\n931     pound.set_span(span);\n932     trees.push_token_from_parser(TokenTree::Punct(pound));\n933 \n934     if inner {\n935         let mut bang = Punct::new('!', Spacing::Alone);\n936         bang.set_span(span);\n937         trees.push_token_from_parser(TokenTree::Punct(bang));\n938     }\n939 \n940     let doc_ident = crate::Ident::_new_fallback(Ident::new_unchecked(\"doc\", fallback_span));\n941     let mut equal = Punct::new('=', Spacing::Alone);\n942     equal.set_span(span);\n943     let mut literal = crate::Literal::_new_fallback(Literal::string(comment));\n944     literal.set_span(span);\n945     let mut bracketed = TokenStreamBuilder::with_capacity(3);\n946     bracketed.push_token_from_parser(TokenTree::Ident(doc_ident));\n947     bracketed.push_token_from_parser(TokenTree::Punct(equal));\n948     bracketed.push_token_from_parser(TokenTree::Literal(literal));\n949     let group = Group::new(Delimiter::Bracket, bracketed.build());\n950     let mut group = crate::Group::_new_fallback(group);\n951     group.set_span(span);\n952     trees.push_token_from_parser(TokenTree::Group(group));\n953 \n954     Ok((rest, ()))\n955 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}