{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/extra.rs\n// crate name is proc_macro2\nuse crate::fallback;\nuse crate::imp;\nuse crate::marker::{ProcMacroAutoTraits, MARKER};\nuse crate::Span;\nuse core::fmt::{self, Debug};\n#[derive(Copy, Clone)]\npub struct DelimSpan {\n    inner: DelimSpanEnum,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Copy, Clone)]\n#[cfg_attr(\n    all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)),\n    derive(PartialEq, Eq)\n)]\npub(crate) struct ProcMacroAutoTraits(PhantomData<Rc<()>>);\n#[derive(Copy, Clone)]\nenum DelimSpanEnum {\n    #[cfg(wrap_proc_macro)]\n    Compiler { join: proc_macro::Span, open: proc_macro::Span, close: proc_macro::Span },\n    Fallback(fallback::Span),\n}\nimpl DelimSpan {\n    pub(crate) fn new(group: &imp::Group) -> Self {\n        #[cfg(wrap_proc_macro)]\n        let inner = match group {\n            imp::Group::Compiler(group) => {\n                DelimSpanEnum::Compiler {\n                    join: group.span(),\n                    open: group.span_open(),\n                    close: group.span_close(),\n                }\n            }\n            imp::Group::Fallback(group) => DelimSpanEnum::Fallback(group.span()),\n        };\n        #[cfg(not(wrap_proc_macro))]\n        let inner = DelimSpanEnum::Fallback(group.span());\n        DelimSpan {\n            inner,\n            _marker: MARKER,\n        }\n    }\n    pub fn join(&self) -> Span {}\n    pub fn open(&self) -> Span {}\n    pub fn close(&self) -> Span {}\n}\nimpl Group {\n    pub(crate) fn new(delimiter: Delimiter, stream: TokenStream) -> Self {\n        Group {\n            delimiter,\n            stream,\n            span: Span::call_site(),\n        }\n    }\n    pub(crate) fn delimiter(&self) -> Delimiter {}\n    pub(crate) fn stream(&self) -> TokenStream {}\n    pub(crate) fn span(&self) -> Span {\n        self.span\n    }\n    pub(crate) fn span_open(&self) -> Span {}\n    pub(crate) fn span_close(&self) -> Span {}\n    pub(crate) fn set_span(&mut self, span: Span) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 99 pub(crate) fn new(group: &imp::Group) -> Self {\n100     #[cfg(wrap_proc_macro)]\n101     let inner = match group {\n102         imp::Group::Compiler(group) => DelimSpanEnum::Compiler {\n103             join: group.span(),\n104             open: group.span_open(),\n105             close: group.span_close(),\n106         },\n107         imp::Group::Fallback(group) => DelimSpanEnum::Fallback(group.span()),\n108     };\n109 \n110     #[cfg(not(wrap_proc_macro))]\n111     let inner = DelimSpanEnum::Fallback(group.span());\n112 \n113     DelimSpan {\n114         inner,\n115         _marker: MARKER,\n116     }\n117 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}