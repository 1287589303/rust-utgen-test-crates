{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {\n        self.rest.starts_with(s)\n    }\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {\n        self.rest.is_empty()\n    }\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {\n        self.rest.as_bytes()\n    }\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {\n        self.rest.chars()\n    }\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn skip_whitespace(input: Cursor) -> Cursor {\n    let mut s = input;\n    while !s.is_empty() {\n        let byte = s.as_bytes()[0];\n        if byte == b'/' {\n            if s.starts_with(\"//\") && (!s.starts_with(\"///\") || s.starts_with(\"////\"))\n                && !s.starts_with(\"//!\")\n            {\n                let (cursor, _) = take_until_newline_or_eof(s);\n                s = cursor;\n                continue;\n            } else if s.starts_with(\"/**/\") {\n                s = s.advance(4);\n                continue;\n            } else if s.starts_with(\"/*\")\n                && (!s.starts_with(\"/**\") || s.starts_with(\"/***\"))\n                && !s.starts_with(\"/*!\")\n            {\n                match block_comment(s) {\n                    Ok((rest, _)) => {\n                        s = rest;\n                        continue;\n                    }\n                    Err(Reject) => return s,\n                }\n            }\n        }\n        match byte {\n            b' ' | 0x09..=0x0d => {\n                s = s.advance(1);\n                continue;\n            }\n            b if b.is_ascii() => {}\n            _ => {\n                let ch = s.chars().next().unwrap();\n                if is_whitespace(ch) {\n                    s = s.advance(ch.len_utf8());\n                    continue;\n                }\n            }\n        }\n        return s;\n    }\n    s\n}\nfn is_whitespace(ch: char) -> bool {\n    ch.is_whitespace() || ch == '\\u{200e}' || ch == '\\u{200f}'\n}\nfn block_comment(input: Cursor) -> PResult<&str> {\n    if !input.starts_with(\"/*\") {\n        return Err(Reject);\n    }\n    let mut depth = 0usize;\n    let bytes = input.as_bytes();\n    let mut i = 0usize;\n    let upper = bytes.len() - 1;\n    while i < upper {\n        if bytes[i] == b'/' && bytes[i + 1] == b'*' {\n            depth += 1;\n            i += 1;\n        } else if bytes[i] == b'*' && bytes[i + 1] == b'/' {\n            depth -= 1;\n            if depth == 0 {\n                return Ok((input.advance(i + 2), &input.rest[..i + 2]));\n            }\n            i += 1;\n        }\n        i += 1;\n    }\n    Err(Reject)\n}\nfn take_until_newline_or_eof(input: Cursor) -> (Cursor, &str) {\n    let chars = input.char_indices();\n    for (i, ch) in chars {\n        if ch == '\\n' {\n            return (input.advance(i), &input.rest[..i]);\n        } else if ch == '\\r' && input.rest[i + 1..].starts_with('\\n') {\n            return (input.advance(i + 1), &input.rest[..i]);\n        }\n    }\n    (input.advance(input.len()), input.rest)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 77 fn skip_whitespace(input: Cursor) -> Cursor {\n 78     let mut s = input;\n 79 \n 80     while !s.is_empty() {\n 81         let byte = s.as_bytes()[0];\n 82         if byte == b'/' {\n 83             if s.starts_with(\"//\")\n 84                 && (!s.starts_with(\"///\") || s.starts_with(\"////\"))\n 85                 && !s.starts_with(\"//!\")\n 86             {\n 87                 let (cursor, _) = take_until_newline_or_eof(s);\n 88                 s = cursor;\n 89                 continue;\n 90             } else if s.starts_with(\"/**/\") {\n 91                 s = s.advance(4);\n 92                 continue;\n 93             } else if s.starts_with(\"/*\")\n 94                 && (!s.starts_with(\"/**\") || s.starts_with(\"/***\"))\n 95                 && !s.starts_with(\"/*!\")\n 96             {\n 97                 match block_comment(s) {\n 98                     Ok((rest, _)) => {\n 99                         s = rest;\n100                         continue;\n101                     }\n102                     Err(Reject) => return s,\n103                 }\n104             }\n105         }\n106         match byte {\n107             b' ' | 0x09..=0x0d => {\n108                 s = s.advance(1);\n109                 continue;\n110             }\n111             b if b.is_ascii() => {}\n112             _ => {\n113                 let ch = s.chars().next().unwrap();\n114                 if is_whitespace(ch) {\n115                     s = s.advance(ch.len_utf8());\n116                     continue;\n117                 }\n118             }\n119         }\n120         return s;\n121     }\n122     s\n123 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}