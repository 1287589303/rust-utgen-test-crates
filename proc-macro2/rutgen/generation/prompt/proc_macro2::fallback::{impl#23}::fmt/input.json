{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct TokenStream {\n    inner: imp::TokenStream,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Copy, Clone)]\npub struct Span {\n    inner: imp::Span,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\n#[derive(Clone)]\npub(crate) enum TokenStream {\n    Compiler(DeferredTokenStream),\n    Fallback(fallback::TokenStream),\n}\n#[derive(Copy, Clone)]\npub(crate) enum Span {\n    Compiler(proc_macro::Span),\n    Fallback(fallback::Span),\n}\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Delimiter {\n    /// `( ... )`\n    Parenthesis,\n    /// `{ ... }`\n    Brace,\n    /// `[ ... ]`\n    Bracket,\n    /// `∅ ... ∅`\n    ///\n    /// An invisible delimiter, that may, for example, appear around tokens\n    /// coming from a \"macro variable\" `$var`. It is important to preserve\n    /// operator priorities in cases like `$var * 3` where `$var` is `1 + 2`.\n    /// Invisible delimiters may not survive roundtrip of a token stream through\n    /// a string.\n    ///\n    /// <div class=\"warning\">\n    ///\n    /// Note: rustc currently can ignore the grouping of tokens delimited by `None` in the output\n    /// of a proc_macro. Only `None`-delimited groups created by a macro_rules macro in the input\n    /// of a proc_macro macro are preserved, and only in very specific circumstances.\n    /// Any `None`-delimited groups (re)created by a proc_macro will therefore not preserve\n    /// operator priorities as indicated above. The other `Delimiter` variants should be used\n    /// instead in this context. This is a rustc bug. For details, see\n    /// [rust-lang/rust#67062](https://github.com/rust-lang/rust/issues/67062).\n    ///\n    /// </div>\n    None,\n}\nimpl Debug for Group {\n    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n        let mut debug = fmt.debug_struct(\"Group\");\n        debug.field(\"delimiter\", &self.delimiter);\n        debug.field(\"stream\", &self.stream);\n        debug_span_field_if_nontrivial(&mut debug, self.span);\n        debug.finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n909 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n910     if self.raw {\n911         f.write_str(\"r#\")?;\n912     }\n913     Display::fmt(&self.sym, f)\n914 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}