{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct TokenStream {\n    inner: imp::TokenStream,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Copy, Clone)]\npub struct Span {\n    inner: imp::Span,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\n#[derive(Clone)]\npub(crate) enum TokenStream {\n    Compiler(DeferredTokenStream),\n    Fallback(fallback::TokenStream),\n}\n#[derive(Copy, Clone)]\npub(crate) enum Span {\n    Compiler(proc_macro::Span),\n    Fallback(fallback::Span),\n}\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Delimiter {\n    /// `( ... )`\n    Parenthesis,\n    /// `{ ... }`\n    Brace,\n    /// `[ ... ]`\n    Bracket,\n    /// `∅ ... ∅`\n    ///\n    /// An invisible delimiter, that may, for example, appear around tokens\n    /// coming from a \"macro variable\" `$var`. It is important to preserve\n    /// operator priorities in cases like `$var * 3` where `$var` is `1 + 2`.\n    /// Invisible delimiters may not survive roundtrip of a token stream through\n    /// a string.\n    ///\n    /// <div class=\"warning\">\n    ///\n    /// Note: rustc currently can ignore the grouping of tokens delimited by `None` in the output\n    /// of a proc_macro. Only `None`-delimited groups created by a macro_rules macro in the input\n    /// of a proc_macro macro are preserved, and only in very specific circumstances.\n    /// Any `None`-delimited groups (re)created by a proc_macro will therefore not preserve\n    /// operator priorities as indicated above. The other `Delimiter` variants should be used\n    /// instead in this context. This is a rustc bug. For details, see\n    /// [rust-lang/rust#67062](https://github.com/rust-lang/rust/issues/67062).\n    ///\n    /// </div>\n    None,\n}\nimpl Debug for Group {\n    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n        let mut debug = fmt.debug_struct(\"Group\");\n        debug.field(\"delimiter\", &self.delimiter);\n        debug.field(\"stream\", &self.stream);\n        debug_span_field_if_nontrivial(&mut debug, self.span);\n        debug.finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n909 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n910     if self.raw {\n911         f.write_str(\"r#\")?;\n912     }\n913     Display::fmt(&self.sym, f)\n914 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}