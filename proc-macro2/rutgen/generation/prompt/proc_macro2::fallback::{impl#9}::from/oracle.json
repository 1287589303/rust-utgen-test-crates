{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\npub(crate) struct RcVecBuilder<T> {\n    inner: Vec<T>,\n}\npub(crate) struct RcVecMut<'a, T> {\n    inner: &'a mut Vec<T>,\n}\npub(crate) struct RcVec<T> {\n    inner: Rc<Vec<T>>,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\nimpl From<TokenTree> for TokenStream {\n    fn from(tree: TokenTree) -> Self {\n        let mut stream = RcVecBuilder::new();\n        push_token_from_proc_macro(stream.as_mut(), tree);\n        TokenStream {\n            inner: stream.build(),\n        }\n    }\n}\nimpl<T> RcVecBuilder<T> {\n    pub(crate) fn new() -> Self {\n        RcVecBuilder { inner: Vec::new() }\n    }\n    pub(crate) fn with_capacity(cap: usize) -> Self {\n        RcVecBuilder {\n            inner: Vec::with_capacity(cap),\n        }\n    }\n    pub(crate) fn push(&mut self, element: T) {}\n    pub(crate) fn extend(&mut self, iter: impl IntoIterator<Item = T>) {}\n    pub(crate) fn as_mut(&mut self) -> RcVecMut<T> {\n        RcVecMut { inner: &mut self.inner }\n    }\n    pub(crate) fn build(self) -> RcVec<T> {\n        RcVec {\n            inner: Rc::new(self.inner),\n        }\n    }\n}\nfn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree) {\n    match token {\n        TokenTree::Literal(\n            crate::Literal {\n                #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n                #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n                ..\n            },\n        ) if literal.repr.starts_with('-') => {\n            push_negative_literal(vec, literal);\n        }\n        _ => vec.push(token),\n    }\n    #[cold]\n    fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {\n        literal.repr.remove(0);\n        let mut punct = crate::Punct::new('-', Spacing::Alone);\n        punct.set_span(crate::Span::_new_fallback(literal.span));\n        vec.push(TokenTree::Punct(punct));\n        vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n259 fn from(tree: TokenTree) -> Self {\n260     let mut stream = RcVecBuilder::new();\n261     push_token_from_proc_macro(stream.as_mut(), tree);\n262     TokenStream {\n263         inner: stream.build(),\n264     }\n265 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}