{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\npub(crate) struct Reject;\nfn backslash_u<I>(chars: &mut I) -> Result<char, Reject>\nwhere\n    I: Iterator<Item = (usize, char)>,\n{\n    next_ch!(chars @ '{');\n    let mut value = 0;\n    let mut len = 0;\n    for (_, ch) in chars {\n        let digit = match ch {\n            '0'..='9' => ch as u8 - b'0',\n            'a'..='f' => 10 + ch as u8 - b'a',\n            'A'..='F' => 10 + ch as u8 - b'A',\n            '_' if len > 0 => continue,\n            '}' if len > 0 => return char::from_u32(value).ok_or(Reject),\n            _ => break,\n        };\n        if len == 6 {\n            break;\n        }\n        value *= 0x10;\n        value += u32::from(digit);\n        len += 1;\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n666 fn backslash_u<I>(chars: &mut I) -> Result<char, Reject>\n667 where\n668     I: Iterator<Item = (usize, char)>,\n669 {\n670     next_ch!(chars @ '{');\n671     let mut value = 0;\n672     let mut len = 0;\n673     for (_, ch) in chars {\n674         let digit = match ch {\n675             '0'..='9' => ch as u8 - b'0',\n676             'a'..='f' => 10 + ch as u8 - b'a',\n677             'A'..='F' => 10 + ch as u8 - b'A',\n678             '_' if len > 0 => continue,\n679             '}' if len > 0 => return char::from_u32(value).ok_or(Reject),\n680             _ => break,\n681         };\n682         if len == 6 {\n683             break;\n684         }\n685         value *= 0x10;\n686         value += u32::from(digit);\n687         len += 1;\n688     }\n689     Err(Reject)\n690 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}