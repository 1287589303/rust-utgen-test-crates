{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\npub(crate) struct Reject;\nfn backslash_u<I>(chars: &mut I) -> Result<char, Reject>\nwhere\n    I: Iterator<Item = (usize, char)>,\n{\n    next_ch!(chars @ '{');\n    let mut value = 0;\n    let mut len = 0;\n    for (_, ch) in chars {\n        let digit = match ch {\n            '0'..='9' => ch as u8 - b'0',\n            'a'..='f' => 10 + ch as u8 - b'a',\n            'A'..='F' => 10 + ch as u8 - b'A',\n            '_' if len > 0 => continue,\n            '}' if len > 0 => return char::from_u32(value).ok_or(Reject),\n            _ => break,\n        };\n        if len == 6 {\n            break;\n        }\n        value *= 0x10;\n        value += u32::from(digit);\n        len += 1;\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n666 fn backslash_u<I>(chars: &mut I) -> Result<char, Reject>\n667 where\n668     I: Iterator<Item = (usize, char)>,\n669 {\n670     next_ch!(chars @ '{');\n671     let mut value = 0;\n672     let mut len = 0;\n673     for (_, ch) in chars {\n674         let digit = match ch {\n675             '0'..='9' => ch as u8 - b'0',\n676             'a'..='f' => 10 + ch as u8 - b'a',\n677             'A'..='F' => 10 + ch as u8 - b'A',\n678             '_' if len > 0 => continue,\n679             '}' if len > 0 => return char::from_u32(value).ok_or(Reject),\n680             _ => break,\n681         };\n682         if len == 6 {\n683             break;\n684         }\n685         value *= 0x10;\n686         value += u32::from(digit);\n687         len += 1;\n688     }\n689     Err(Reject)\n690 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}