{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {}\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {\n        self.rest.len()\n    }\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nimpl Literal {\n    pub(crate) fn _new(repr: String) -> Self {\n        Literal {\n            repr,\n            span: Span::call_site(),\n        }\n    }\n    pub(crate) fn from_str_checked(repr: &str) -> Result<Self, LexError> {\n        let mut cursor = get_cursor(repr);\n        #[cfg(span_locations)]\n        let lo = cursor.off;\n        let negative = cursor.starts_with_char('-');\n        if negative {\n            cursor = cursor.advance(1);\n            if !cursor.starts_with_fn(|ch| ch.is_ascii_digit()) {\n                return Err(LexError::call_site());\n            }\n        }\n        if let Ok((rest, mut literal)) = parse::literal(cursor) {\n            if rest.is_empty() {\n                if negative {\n                    literal.repr.insert(0, '-');\n                }\n                literal.span = Span {\n                    #[cfg(span_locations)]\n                    lo,\n                    #[cfg(span_locations)]\n                    hi: rest.off,\n                };\n                return Ok(literal);\n            }\n        }\n        Err(LexError::call_site())\n    }\n    pub(crate) unsafe fn from_str_unchecked(repr: &str) -> Self {\n        Literal::_new(repr.to_owned())\n    }\n    pub(crate) fn f32_unsuffixed(f: f32) -> Literal {}\n    pub(crate) fn f64_unsuffixed(f: f64) -> Literal {}\n    pub(crate) fn string(string: &str) -> Literal {}\n    pub(crate) fn character(ch: char) -> Literal {}\n    pub(crate) fn byte_character(byte: u8) -> Literal {}\n    pub(crate) fn byte_string(bytes: &[u8]) -> Literal {}\n    pub(crate) fn c_string(string: &CStr) -> Literal {}\n    pub(crate) fn span(&self) -> Span {}\n    pub(crate) fn set_span(&mut self, span: Span) {}\n    pub(crate) fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {}\n}\npub(crate) fn literal(input: Cursor) -> PResult<Literal> {\n    let rest = literal_nocapture(input)?;\n    let end = input.len() - rest.len();\n    Ok((rest, Literal::_new(input.rest[..end].to_string())))\n}\nfn literal_nocapture(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(ok) = string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = byte_string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = c_string(input) {\n        Ok(ok)\n    } else if let Ok(ok) = byte(input) {\n        Ok(ok)\n    } else if let Ok(ok) = character(input) {\n        Ok(ok)\n    } else if let Ok(ok) = float(input) {\n        Ok(ok)\n    } else if let Ok(ok) = int(input) {\n        Ok(ok)\n    } else {\n        Err(Reject)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n337 pub(crate) fn literal(input: Cursor) -> PResult<Literal> {\n338     let rest = literal_nocapture(input)?;\n339     let end = input.len() - rest.len();\n340     Ok((rest, Literal::_new(input.rest[..end].to_string())))\n341 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}