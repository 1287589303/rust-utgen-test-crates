{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is proc_macro2\n#[cfg(not(wrap_proc_macro))]\nuse crate::fallback as imp;\nuse crate::extra::DelimSpan;\nuse crate::marker::{ProcMacroAutoTraits, MARKER};\nuse core::cmp::Ordering;\nuse core::fmt::{self, Debug, Display};\nuse core::hash::{Hash, Hasher};\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::str::FromStr;\nuse std::error::Error;\nuse std::ffi::CStr;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[cfg(span_locations)]\n#[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\npub use crate::location::LineColumn;\npub struct LexError {\n    inner: imp::LexError,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Copy, Clone)]\npub struct Span {\n    inner: imp::Span,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Copy, Clone)]\n#[cfg_attr(\n    all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)),\n    derive(PartialEq, Eq)\n)]\npub(crate) struct ProcMacroAutoTraits(PhantomData<Rc<()>>);\n#[derive(Debug)]\npub(crate) struct LexError {\n    pub(crate) span: Span,\n}\npub(crate) enum LexError {\n    Compiler(proc_macro::LexError),\n    Fallback(fallback::LexError),\n    CompilerPanic,\n}\n#[derive(Copy, Clone)]\npub(crate) enum Span {\n    Compiler(proc_macro::Span),\n    Fallback(fallback::Span),\n}\nimpl LexError {\n    pub fn span(&self) -> Span {\n        Span::_new(self.inner.span())\n    }\n}\nimpl Span {\n    fn _new(inner: imp::Span) -> Self {\n        Span { inner, _marker: MARKER }\n    }\n    fn _new_fallback(inner: fallback::Span) -> Self {\n        Span {\n            inner: imp::Span::from(inner),\n            _marker: MARKER,\n        }\n    }\n    pub fn call_site() -> Self {\n        Span::_new(imp::Span::call_site())\n    }\n    pub fn mixed_site() -> Self {\n        Span::_new(imp::Span::mixed_site())\n    }\n    #[cfg(procmacro2_semver_exempt)]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn def_site() -> Self {\n        Span::_new(imp::Span::def_site())\n    }\n    pub fn resolved_at(&self, other: Span) -> Span {}\n    pub fn located_at(&self, other: Span) -> Span {}\n    #[cfg(wrap_proc_macro)]\n    pub fn unwrap(self) -> proc_macro::Span {}\n    #[cfg(wrap_proc_macro)]\n    pub fn unstable(self) -> proc_macro::Span {}\n    #[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn source_file(&self) -> SourceFile {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn byte_range(&self) -> Range<usize> {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn start(&self) -> LineColumn {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn end(&self) -> LineColumn {}\n    pub fn join(&self, other: Span) -> Option<Span> {}\n    #[cfg(procmacro2_semver_exempt)]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn eq(&self, other: &Span) -> bool {}\n    pub fn source_text(&self) -> Option<String> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n322 pub fn span(&self) -> Span {\n323     Span::_new(self.inner.span())\n324 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}