{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {}\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {\n        if self.starts_with(tag) { Ok(self.advance(tag.len())) } else { Err(Reject) }\n    }\n}\nfn byte_string(input: Cursor) -> Result<Cursor, Reject> {\n    if let Ok(input) = input.parse(\"b\\\"\") {\n        cooked_byte_string(input)\n    } else if let Ok(input) = input.parse(\"br\") {\n        raw_byte_string(input)\n    } else {\n        Err(Reject)\n    }\n}\nfn cooked_byte_string(mut input: Cursor) -> Result<Cursor, Reject> {\n    let mut bytes = input.bytes().enumerate();\n    while let Some((offset, b)) = bytes.next() {\n        match b {\n            b'\"' => {\n                let input = input.advance(offset + 1);\n                return Ok(literal_suffix(input));\n            }\n            b'\\r' => {\n                match bytes.next() {\n                    Some((_, b'\\n')) => {}\n                    _ => break,\n                }\n            }\n            b'\\\\' => {\n                match bytes.next() {\n                    Some((_, b'x')) => {\n                        backslash_x_byte(&mut bytes)?;\n                    }\n                    Some((_, b'n' | b'r' | b't' | b'\\\\' | b'0' | b'\\'' | b'\"')) => {}\n                    Some((newline, b @ (b'\\n' | b'\\r'))) => {\n                        input = input.advance(newline + 1);\n                        trailing_backslash(&mut input, b)?;\n                        bytes = input.bytes().enumerate();\n                    }\n                    _ => break,\n                }\n            }\n            b if b.is_ascii() => {}\n            _ => break,\n        }\n    }\n    Err(Reject)\n}\nfn raw_byte_string(input: Cursor) -> Result<Cursor, Reject> {\n    let (input, delimiter) = delimiter_of_raw_string(input)?;\n    let mut bytes = input.bytes().enumerate();\n    while let Some((i, byte)) = bytes.next() {\n        match byte {\n            b'\"' if input.rest[i + 1..].starts_with(delimiter) => {\n                let rest = input.advance(i + 1 + delimiter.len());\n                return Ok(literal_suffix(rest));\n            }\n            b'\\r' => {\n                match bytes.next() {\n                    Some((_, b'\\n')) => {}\n                    _ => break,\n                }\n            }\n            other => {\n                if !other.is_ascii() {\n                    break;\n                }\n            }\n        }\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n433 fn byte_string(input: Cursor) -> Result<Cursor, Reject> {\n434     if let Ok(input) = input.parse(\"b\\\"\") {\n435         cooked_byte_string(input)\n436     } else if let Ok(input) = input.parse(\"br\") {\n437         raw_byte_string(input)\n438     } else {\n439         Err(Reject)\n440     }\n441 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}