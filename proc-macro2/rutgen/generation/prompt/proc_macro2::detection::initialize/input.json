{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/detection.rs\n// crate name is proc_macro2\nuse core::sync::atomic::{AtomicUsize, Ordering};\nuse std::sync::Once;\nstatic WORKS: AtomicUsize = AtomicUsize::new(0);\nstatic INIT: Once = Once::new();\n#[cfg(no_is_available)]\nfn initialize() {\n    use std::panic::{self, PanicInfo};\n    type PanicHook = dyn Fn(&PanicInfo) + Sync + Send + 'static;\n    let null_hook: Box<PanicHook> = Box::new(|_panic_info| {});\n    let sanity_check = &*null_hook as *const PanicHook;\n    let original_hook = panic::take_hook();\n    panic::set_hook(null_hook);\n    let works = panic::catch_unwind(proc_macro::Span::call_site).is_ok();\n    WORKS.store(works as usize + 1, Ordering::Relaxed);\n    let hopefully_null_hook = panic::take_hook();\n    panic::set_hook(original_hook);\n    if sanity_check != &*hopefully_null_hook {\n        panic!(\"observed race condition in proc_macro2::inside_proc_macro\");\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n27 fn initialize() {\n28     let available = proc_macro::is_available();\n29     WORKS.store(available as usize + 1, Ordering::Relaxed);\n30 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}