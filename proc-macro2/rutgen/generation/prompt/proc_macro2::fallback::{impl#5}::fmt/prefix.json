{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[derive(Clone)]\npub(crate) struct TokenStream {\n    inner: RcVec<TokenTree>,\n}\n#[derive(Clone)]\npub struct Punct {\n    ch: char,\n    spacing: Spacing,\n    span: Span,\n}\npub(crate) struct RcVec<T> {\n    inner: Rc<Vec<T>>,\n}\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Group {\n    inner: imp::Group,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\n#[derive(Clone)]\npub struct Literal {\n    inner: imp::Literal,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Ident {\n    inner: imp::Ident,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Spacing {\n    /// E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.\n    Alone,\n    /// E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`.\n    ///\n    /// Additionally, single quote `'` can join with identifiers to form\n    /// lifetimes `'ident`.\n    Joint,\n}\n#[derive(Clone)]\npub(crate) enum Ident {\n    Compiler(proc_macro::Ident),\n    Fallback(fallback::Ident),\n}\n#[derive(Clone)]\npub(crate) enum Literal {\n    Compiler(proc_macro::Literal),\n    Fallback(fallback::Literal),\n}\n#[derive(Clone)]\npub(crate) enum Group {\n    Compiler(proc_macro::Group),\n    Fallback(fallback::Group),\n}\nimpl Display for TokenStream {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let mut joint = false;\n        for (i, tt) in self.inner.iter().enumerate() {\n            if i != 0 && !joint {\n                write!(f, \" \")?;\n            }\n            joint = false;\n            match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?;\n        }\n        Ok(())\n    }\n}\nimpl Punct {\n    pub fn new(ch: char, spacing: Spacing) -> Self {\n        if let '!' | '#' | '$' | '%' | '&' | '\\'' | '*' | '+' | ',' | '-' | '.' | '/'\n        | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '^' | '|' | '~' = ch {\n            Punct {\n                ch,\n                spacing,\n                span: Span::call_site(),\n            }\n        } else {\n            panic!(\"unsupported proc macro punctuation character {:?}\", ch);\n        }\n    }\n    pub fn as_char(&self) -> char {}\n    pub fn spacing(&self) -> Spacing {\n        self.spacing\n    }\n    pub fn span(&self) -> Span {}\n    pub fn set_span(&mut self, span: Span) {}\n}\nimpl<T> RcVec<T> {\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn len(&self) -> usize {}\n    pub(crate) fn iter(&self) -> slice::Iter<T> {\n        self.inner.iter()\n    }\n    pub(crate) fn make_mut(&mut self) -> RcVecMut<T>\n    where\n        T: Clone,\n    {}\n    pub(crate) fn get_mut(&mut self) -> Option<RcVecMut<T>> {}\n    pub(crate) fn make_owned(mut self) -> RcVecBuilder<T>\n    where\n        T: Clone,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n215 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n216     let mut joint = false;\n217     for (i, tt) in self.inner.iter().enumerate() {\n218         if i != 0 && !joint {\n219             write!(f, \" \")?;\n220         }\n221         joint = false;\n222         match tt {\n223             TokenTree::Group(tt) => Display::fmt(tt, f),\n224             TokenTree::Ident(tt) => Display::fmt(tt, f),\n225             TokenTree::Punct(tt) => {\n226                 joint = tt.spacing() == Spacing::Joint;\n227                 Display::fmt(tt, f)\n228             }\n229             TokenTree::Literal(tt) => Display::fmt(tt, f),\n230         }?;\n231     }\n232 \n233     Ok(())\n234 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}