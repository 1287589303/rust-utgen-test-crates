{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {\n        self.rest.char_indices()\n    }\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {\n        if self.starts_with(tag) { Ok(self.advance(tag.len())) } else { Err(Reject) }\n    }\n}\nfn character(input: Cursor) -> Result<Cursor, Reject> {\n    let input = input.parse(\"'\")?;\n    let mut chars = input.char_indices();\n    let ok = match chars.next().map(|(_, ch)| ch) {\n        Some('\\\\') => {\n            match chars.next().map(|(_, ch)| ch) {\n                Some('x') => backslash_x_char(&mut chars).is_ok(),\n                Some('u') => backslash_u(&mut chars).is_ok(),\n                Some('n' | 'r' | 't' | '\\\\' | '0' | '\\'' | '\"') => true,\n                _ => false,\n            }\n        }\n        ch => ch.is_some(),\n    };\n    if !ok {\n        return Err(Reject);\n    }\n    let (idx, _) = chars.next().ok_or(Reject)?;\n    let input = input.advance(idx).parse(\"'\")?;\n    Ok(literal_suffix(input))\n}\nfn literal_suffix(input: Cursor) -> Cursor {\n    match ident_not_raw(input) {\n        Ok((input, _)) => input,\n        Err(Reject) => input,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n603 fn character(input: Cursor) -> Result<Cursor, Reject> {\n604     let input = input.parse(\"'\")?;\n605     let mut chars = input.char_indices();\n606     let ok = match chars.next().map(|(_, ch)| ch) {\n607         Some('\\\\') => match chars.next().map(|(_, ch)| ch) {\n608             Some('x') => backslash_x_char(&mut chars).is_ok(),\n609             Some('u') => backslash_u(&mut chars).is_ok(),\n610             Some('n' | 'r' | 't' | '\\\\' | '0' | '\\'' | '\"') => true,\n611             _ => false,\n612         },\n613         ch => ch.is_some(),\n614     };\n615     if !ok {\n616         return Err(Reject);\n617     }\n618     let (idx, _) = chars.next().ok_or(Reject)?;\n619     let input = input.advance(idx).parse(\"'\")?;\n620     Ok(literal_suffix(input))\n621 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}