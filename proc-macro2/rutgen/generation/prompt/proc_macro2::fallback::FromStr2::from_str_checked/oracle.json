{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[cfg(feature = \"proc-macro\")]\npub(crate) trait FromStr2: FromStr<Err = proc_macro::LexError> {\n    #[cfg(wrap_proc_macro)]\n    fn valid(src: &str) -> bool;\n    #[cfg(wrap_proc_macro)]\n    fn from_str_checked(src: &str) -> Result<Self, imp::LexError> {\n        if !Self::valid(src) {\n            return Err(imp::LexError::CompilerPanic);\n        }\n        match panic::catch_unwind(|| Self::from_str(src)) {\n            Ok(Ok(ok)) => Ok(ok),\n            Ok(Err(lex)) => Err(imp::LexError::Compiler(lex)),\n            Err(_panic) => Err(imp::LexError::CompilerPanic),\n        }\n    }\n    fn from_str_unchecked(src: &str) -> Self {\n        Self::from_str(src).unwrap()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1242 fn from_str_checked(src: &str) -> Result<Self, imp::LexError> {\n1243     // Validate using fallback parser, because rustc is incapable of\n1244     // returning a recoverable Err for certain invalid token streams, and\n1245     // will instead permanently poison the compilation.\n1246     if !Self::valid(src) {\n1247         return Err(imp::LexError::CompilerPanic);\n1248     }\n1249 \n1250     // Catch panic to work around https://github.com/rust-lang/rust/issues/58736.\n1251     match panic::catch_unwind(|| Self::from_str(src)) {\n1252         Ok(Ok(ok)) => Ok(ok),\n1253         Ok(Err(lex)) => Err(imp::LexError::Compiler(lex)),\n1254         Err(_panic) => Err(imp::LexError::CompilerPanic),\n1255     }\n1256 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}