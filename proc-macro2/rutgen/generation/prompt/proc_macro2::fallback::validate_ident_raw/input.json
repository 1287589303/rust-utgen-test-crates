{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fallback.rs\n// crate name is proc_macro2\npub(crate) type TokenTreeIter = RcVecIntoIter<TokenTree>;\n#[cfg(wrap_proc_macro)]\nuse crate::imp;\n#[cfg(span_locations)]\nuse crate::location::LineColumn;\nuse crate::parse::{self, Cursor};\nuse crate::rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut};\nuse crate::{Delimiter, Spacing, TokenTree};\n#[cfg(all(span_locations, not(fuzzing)))]\nuse alloc::collections::BTreeMap;\n#[cfg(all(span_locations, not(fuzzing)))]\nuse core::cell::RefCell;\n#[cfg(span_locations)]\nuse core::cmp;\nuse core::fmt::{self, Debug, Display, Write};\nuse core::mem::ManuallyDrop;\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::ptr;\nuse core::str;\n#[cfg(feature = \"proc-macro\")]\nuse core::str::FromStr;\nuse std::ffi::CStr;\n#[cfg(wrap_proc_macro)]\nuse std::panic;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[track_caller]\nfn validate_ident_raw(string: &str) {\n    validate_ident(string);\n    match string {\n        \"_\" | \"super\" | \"self\" | \"Self\" | \"crate\" => {\n            panic!(\"`r#{}` cannot be a raw identifier\", string);\n        }\n        _ => {}\n    }\n}\n#[track_caller]\nfn validate_ident(string: &str) {\n    if string.is_empty() {\n        panic!(\"Ident is not allowed to be empty; use Option<Ident>\");\n    }\n    if string.bytes().all(|digit| b'0' <= digit && digit <= b'9') {\n        panic!(\"Ident cannot be a number; use Literal instead\");\n    }\n    fn ident_ok(string: &str) -> bool {\n        let mut chars = string.chars();\n        let first = chars.next().unwrap();\n        if !is_ident_start(first) {\n            return false;\n        }\n        for ch in chars {\n            if !is_ident_continue(ch) {\n                return false;\n            }\n        }\n        true\n    }\n    if !ident_ok(string) {\n        panic!(\"{:?} is not a valid Ident\", string);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n877 fn validate_ident_raw(string: &str) {\n878     validate_ident(string);\n879 \n880     match string {\n881         \"_\" | \"super\" | \"self\" | \"Self\" | \"crate\" => {\n882             panic!(\"`r#{}` cannot be a raw identifier\", string);\n883         }\n884         _ => {}\n885     }\n886 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}