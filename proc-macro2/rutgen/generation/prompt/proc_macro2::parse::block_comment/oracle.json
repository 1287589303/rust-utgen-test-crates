{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {\n        let (_front, rest) = self.rest.split_at(bytes);\n        Cursor {\n            rest,\n            #[cfg(span_locations)]\n            off: self.off + _front.chars().count() as u32,\n        }\n    }\n    pub(crate) fn starts_with(&self, s: &str) -> bool {\n        self.rest.starts_with(s)\n    }\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {\n        self.rest.as_bytes()\n    }\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {}\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn block_comment(input: Cursor) -> PResult<&str> {\n    if !input.starts_with(\"/*\") {\n        return Err(Reject);\n    }\n    let mut depth = 0usize;\n    let bytes = input.as_bytes();\n    let mut i = 0usize;\n    let upper = bytes.len() - 1;\n    while i < upper {\n        if bytes[i] == b'/' && bytes[i + 1] == b'*' {\n            depth += 1;\n            i += 1;\n        } else if bytes[i] == b'*' && bytes[i + 1] == b'/' {\n            depth -= 1;\n            if depth == 0 {\n                return Ok((input.advance(i + 2), &input.rest[..i + 2]));\n            }\n            i += 1;\n        }\n        i += 1;\n    }\n    Err(Reject)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n125 fn block_comment(input: Cursor) -> PResult<&str> {\n126     if !input.starts_with(\"/*\") {\n127         return Err(Reject);\n128     }\n129 \n130     let mut depth = 0usize;\n131     let bytes = input.as_bytes();\n132     let mut i = 0usize;\n133     let upper = bytes.len() - 1;\n134 \n135     while i < upper {\n136         if bytes[i] == b'/' && bytes[i + 1] == b'*' {\n137             depth += 1;\n138             i += 1; // eat '*'\n139         } else if bytes[i] == b'*' && bytes[i + 1] == b'/' {\n140             depth -= 1;\n141             if depth == 0 {\n142                 return Ok((input.advance(i + 2), &input.rest[..i + 2]));\n143             }\n144             i += 1; // eat '/'\n145         }\n146         i += 1;\n147     }\n148 \n149     Err(Reject)\n150 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}