{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is proc_macro2\n#[cfg(not(wrap_proc_macro))]\nuse crate::fallback as imp;\nuse crate::extra::DelimSpan;\nuse crate::marker::{ProcMacroAutoTraits, MARKER};\nuse core::cmp::Ordering;\nuse core::fmt::{self, Debug, Display};\nuse core::hash::{Hash, Hasher};\n#[cfg(span_locations)]\nuse core::ops::Range;\nuse core::ops::RangeBounds;\nuse core::str::FromStr;\nuse std::error::Error;\nuse std::ffi::CStr;\n#[cfg(procmacro2_semver_exempt)]\nuse std::path::PathBuf;\n#[cfg(span_locations)]\n#[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\npub use crate::location::LineColumn;\n#[derive(Clone)]\npub(crate) struct Literal {\n    pub(crate) repr: String,\n    span: Span,\n}\n#[derive(Clone)]\npub(crate) struct Group {\n    delimiter: Delimiter,\n    stream: TokenStream,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Group {\n    inner: imp::Group,\n}\n#[derive(Clone)]\npub struct Punct {\n    ch: char,\n    spacing: Spacing,\n    span: Span,\n}\n#[derive(Clone)]\npub struct Ident {\n    inner: imp::Ident,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub struct Literal {\n    inner: imp::Literal,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone)]\npub(crate) struct Ident {\n    sym: Box<str>,\n    span: Span,\n    raw: bool,\n}\n#[derive(Clone)]\npub enum TokenTree {\n    /// A token stream surrounded by bracket delimiters.\n    Group(Group),\n    /// An identifier.\n    Ident(Ident),\n    /// A single punctuation character (`+`, `,`, `$`, etc.).\n    Punct(Punct),\n    /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n    Literal(Literal),\n}\n#[derive(Clone)]\npub(crate) enum Literal {\n    Compiler(proc_macro::Literal),\n    Fallback(fallback::Literal),\n}\n#[derive(Clone)]\npub(crate) enum Ident {\n    Compiler(proc_macro::Ident),\n    Fallback(fallback::Ident),\n}\n#[derive(Clone)]\npub(crate) enum Group {\n    Compiler(proc_macro::Group),\n    Fallback(fallback::Group),\n}\nimpl Debug for TokenTree {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            TokenTree::Group(t) => Debug::fmt(t, f),\n            TokenTree::Ident(t) => {\n                let mut debug = f.debug_struct(\"Ident\");\n                debug.field(\"sym\", &format_args!(\"{}\", t));\n                imp::debug_span_field_if_nontrivial(&mut debug, t.span().inner);\n                debug.finish()\n            }\n            TokenTree::Punct(t) => Debug::fmt(t, f),\n            TokenTree::Literal(t) => Debug::fmt(t, f),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n793 fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n794     Display::fmt(&self.inner, formatter)\n795 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}