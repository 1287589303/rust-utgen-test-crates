{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/extra.rs\n// crate name is proc_macro2\nuse crate::fallback;\nuse crate::imp;\nuse crate::marker::{ProcMacroAutoTraits, MARKER};\nuse crate::Span;\nuse core::fmt::{self, Debug};\n#[derive(Copy, Clone)]\npub struct DelimSpan {\n    inner: DelimSpanEnum,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Copy, Clone)]\npub struct Span {\n    inner: imp::Span,\n    _marker: ProcMacroAutoTraits,\n}\n#[derive(Clone, Copy, PartialEq, Eq)]\npub(crate) struct Span {\n    #[cfg(span_locations)]\n    pub(crate) lo: u32,\n    #[cfg(span_locations)]\n    pub(crate) hi: u32,\n}\n#[derive(Copy, Clone)]\n#[cfg_attr(\n    all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)),\n    derive(PartialEq, Eq)\n)]\npub(crate) struct ProcMacroAutoTraits(PhantomData<Rc<()>>);\n#[derive(Copy, Clone)]\nenum DelimSpanEnum {\n    #[cfg(wrap_proc_macro)]\n    Compiler { join: proc_macro::Span, open: proc_macro::Span, close: proc_macro::Span },\n    Fallback(fallback::Span),\n}\n#[derive(Copy, Clone)]\npub(crate) enum Span {\n    Compiler(proc_macro::Span),\n    Fallback(fallback::Span),\n}\nimpl DelimSpan {\n    pub(crate) fn new(group: &imp::Group) -> Self {\n        #[cfg(wrap_proc_macro)]\n        let inner = match group {\n            imp::Group::Compiler(group) => {\n                DelimSpanEnum::Compiler {\n                    join: group.span(),\n                    open: group.span_open(),\n                    close: group.span_close(),\n                }\n            }\n            imp::Group::Fallback(group) => DelimSpanEnum::Fallback(group.span()),\n        };\n        #[cfg(not(wrap_proc_macro))]\n        let inner = DelimSpanEnum::Fallback(group.span());\n        DelimSpan {\n            inner,\n            _marker: MARKER,\n        }\n    }\n    pub fn join(&self) -> Span {\n        match &self.inner {\n            #[cfg(wrap_proc_macro)]\n            DelimSpanEnum::Compiler { join, .. } => {\n                Span::_new(imp::Span::Compiler(*join))\n            }\n            DelimSpanEnum::Fallback(span) => Span::_new_fallback(*span),\n        }\n    }\n    pub fn open(&self) -> Span {}\n    pub fn close(&self) -> Span {}\n}\nimpl Span {\n    fn _new(inner: imp::Span) -> Self {\n        Span { inner, _marker: MARKER }\n    }\n    fn _new_fallback(inner: fallback::Span) -> Self {\n        Span {\n            inner: imp::Span::from(inner),\n            _marker: MARKER,\n        }\n    }\n    pub fn call_site() -> Self {\n        Span::_new(imp::Span::call_site())\n    }\n    pub fn mixed_site() -> Self {\n        Span::_new(imp::Span::mixed_site())\n    }\n    #[cfg(procmacro2_semver_exempt)]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn def_site() -> Self {\n        Span::_new(imp::Span::def_site())\n    }\n    pub fn resolved_at(&self, other: Span) -> Span {}\n    pub fn located_at(&self, other: Span) -> Span {}\n    #[cfg(wrap_proc_macro)]\n    pub fn unwrap(self) -> proc_macro::Span {}\n    #[cfg(wrap_proc_macro)]\n    pub fn unstable(self) -> proc_macro::Span {}\n    #[cfg(all(procmacro2_semver_exempt, any(not(wrap_proc_macro), super_unstable)))]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn source_file(&self) -> SourceFile {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn byte_range(&self) -> Range<usize> {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn start(&self) -> LineColumn {}\n    #[cfg(span_locations)]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"span-locations\")))]\n    pub fn end(&self) -> LineColumn {}\n    pub fn join(&self, other: Span) -> Option<Span> {}\n    #[cfg(procmacro2_semver_exempt)]\n    #[cfg_attr(docsrs, doc(cfg(procmacro2_semver_exempt)))]\n    pub fn eq(&self, other: &Span) -> bool {}\n    pub fn source_text(&self) -> Option<String> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a span covering the entire delimited group.\n120 pub fn join(&self) -> Span {\n121     match &self.inner {\n122         #[cfg(wrap_proc_macro)]\n123         DelimSpanEnum::Compiler { join, .. } => Span::_new(imp::Span::Compiler(*join)),\n124         DelimSpanEnum::Fallback(span) => Span::_new_fallback(*span),\n125     }\n126 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}