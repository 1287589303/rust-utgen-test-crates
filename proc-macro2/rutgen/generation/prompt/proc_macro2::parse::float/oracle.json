{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/parse.rs\n// crate name is proc_macro2\ntype PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;\nuse crate::fallback::{\n    self, is_ident_continue, is_ident_start, Group, Ident, LexError, Literal, Span,\n    TokenStream, TokenStreamBuilder,\n};\nuse crate::{Delimiter, Punct, Spacing, TokenTree};\nuse core::char;\nuse core::str::{Bytes, CharIndices, Chars};\nconst ERROR: &str = \"(/*ERROR*/)\";\n#[derive(Copy, Clone, Eq, PartialEq)]\npub(crate) struct Cursor<'a> {\n    pub(crate) rest: &'a str,\n    #[cfg(span_locations)]\n    pub(crate) off: u32,\n}\npub(crate) struct Reject;\nimpl<'a> Cursor<'a> {\n    pub(crate) fn advance(&self, bytes: usize) -> Cursor<'a> {}\n    pub(crate) fn starts_with(&self, s: &str) -> bool {}\n    pub(crate) fn starts_with_char(&self, ch: char) -> bool {}\n    pub(crate) fn starts_with_fn<Pattern>(&self, f: Pattern) -> bool\n    where\n        Pattern: FnMut(char) -> bool,\n    {}\n    pub(crate) fn is_empty(&self) -> bool {}\n    fn len(&self) -> usize {}\n    fn as_bytes(&self) -> &'a [u8] {}\n    fn bytes(&self) -> Bytes<'a> {}\n    fn chars(&self) -> Chars<'a> {\n        self.rest.chars()\n    }\n    fn char_indices(&self) -> CharIndices<'a> {}\n    fn parse(&self, tag: &str) -> Result<Cursor<'a>, Reject> {}\n}\nfn float(input: Cursor) -> Result<Cursor, Reject> {\n    let mut rest = float_digits(input)?;\n    if let Some(ch) = rest.chars().next() {\n        if is_ident_start(ch) {\n            rest = ident_not_raw(rest)?.0;\n        }\n    }\n    word_break(rest)\n}\npub(crate) fn is_ident_start(c: char) -> bool {\n    c == '_' || unicode_ident::is_xid_start(c)\n}\nfn ident_not_raw(input: Cursor) -> PResult<&str> {\n    let mut chars = input.char_indices();\n    match chars.next() {\n        Some((_, ch)) if is_ident_start(ch) => {}\n        _ => return Err(Reject),\n    }\n    let mut end = input.len();\n    for (i, ch) in chars {\n        if !is_ident_continue(ch) {\n            end = i;\n            break;\n        }\n    }\n    Ok((input.advance(end), &input.rest[..end]))\n}\nfn word_break(input: Cursor) -> Result<Cursor, Reject> {\n    match input.chars().next() {\n        Some(ch) if is_ident_continue(ch) => Err(Reject),\n        Some(_) | None => Ok(input),\n    }\n}\nfn float_digits(input: Cursor) -> Result<Cursor, Reject> {\n    let mut chars = input.chars().peekable();\n    match chars.next() {\n        Some(ch) if '0' <= ch && ch <= '9' => {}\n        _ => return Err(Reject),\n    }\n    let mut len = 1;\n    let mut has_dot = false;\n    let mut has_exp = false;\n    while let Some(&ch) = chars.peek() {\n        match ch {\n            '0'..='9' | '_' => {\n                chars.next();\n                len += 1;\n            }\n            '.' => {\n                if has_dot {\n                    break;\n                }\n                chars.next();\n                if chars.peek().map_or(false, |&ch| ch == '.' || is_ident_start(ch)) {\n                    return Err(Reject);\n                }\n                len += 1;\n                has_dot = true;\n            }\n            'e' | 'E' => {\n                chars.next();\n                len += 1;\n                has_exp = true;\n                break;\n            }\n            _ => break,\n        }\n    }\n    if !(has_dot || has_exp) {\n        return Err(Reject);\n    }\n    if has_exp {\n        let token_before_exp = if has_dot {\n            Ok(input.advance(len - 1))\n        } else {\n            Err(Reject)\n        };\n        let mut has_sign = false;\n        let mut has_exp_value = false;\n        while let Some(&ch) = chars.peek() {\n            match ch {\n                '+' | '-' => {\n                    if has_exp_value {\n                        break;\n                    }\n                    if has_sign {\n                        return token_before_exp;\n                    }\n                    chars.next();\n                    len += 1;\n                    has_sign = true;\n                }\n                '0'..='9' => {\n                    chars.next();\n                    len += 1;\n                    has_exp_value = true;\n                }\n                '_' => {\n                    chars.next();\n                    len += 1;\n                }\n                _ => break,\n            }\n        }\n        if !has_exp_value {\n            return token_before_exp;\n        }\n    }\n    Ok(input.advance(len))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n711 fn float(input: Cursor) -> Result<Cursor, Reject> {\n712     let mut rest = float_digits(input)?;\n713     if let Some(ch) = rest.chars().next() {\n714         if is_ident_start(ch) {\n715             rest = ident_not_raw(rest)?.0;\n716         }\n717     }\n718     word_break(rest)\n719 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}