{
  "name": "proc_macro2::parse::doc_comment",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": false,
  "loc": "src/parse.rs:909:1:955:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: doc_comment_contents(input)? at line 912 is Err/None\n"
      ],
      "input_infer": "input: Cursor with strings starting with \"//!\", \"/*!\", \"///\", or \"/**\" followed by valid/invalid content to trigger both positive and negative variations with and without newlines; trees: TokenStreamBuilder initialized state\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"//! invalid comment\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(doc_comment(Cursor { rest: \"//! invalid comment\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"//! invalid comment\" };  ",
                "   let mut trees = TokenStreamBuilder::new();  ",
                "   let _ = doc_comment(input, &mut trees);  ",
                "   assert_eq!(doc_comment(Cursor { rest: \"//! invalid comment\" }, &mut TokenStreamBuilder::new()), Err(Reject));  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"/*! invalid block comment */\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert!(doc_comment(Cursor { rest: \"/*! invalid block comment */\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
                "    assert_eq!(trees.inner.len(), 0);",
                "    assert!(doc_comment(Cursor { rest: \"//! invalid line comment\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
                "    assert_eq!(trees.inner.len(), 0);",
                "    assert!(doc_comment(Cursor { rest: \"///\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
                "    assert_eq!(trees.inner.len(), 0);",
                "    assert!(doc_comment(Cursor { rest: \"/* this is a comment \", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
                "    assert_eq!(trees.inner.len(), 0);",
                "    assert!(doc_comment(Cursor { rest: \"/*! malformed comment *\", off: 0 }, &mut TokenStreamBuilder::new()).is_err());",
                "    assert_eq!(trees.inner.len(), 0);"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"/*! invalid block comment */\" };",
                "   let mut trees = TokenStreamBuilder::new();",
                "   let _ = doc_comment(input, &mut trees);",
                "   assert!(doc_comment(Cursor { rest: \"/*! invalid block comment */\" }, &mut TokenStreamBuilder::new()).is_err());",
                "   assert_eq!(trees.inner.len(), 0);",
                "   assert!(doc_comment(Cursor { rest: \"//! invalid line comment\" }, &mut TokenStreamBuilder::new()).is_err());",
                "   assert_eq!(trees.inner.len(), 0);",
                "   assert!(doc_comment(Cursor { rest: \"///\" }, &mut TokenStreamBuilder::new()).is_err());",
                "   assert_eq!(trees.inner.len(), 0);",
                "   assert!(doc_comment(Cursor { rest: \"/* this is a comment \" }, &mut TokenStreamBuilder::new()).is_err());",
                "   assert_eq!(trees.inner.len(), 0);",
                "   assert!(doc_comment(Cursor { rest: \"/*! malformed comment *\" }, &mut TokenStreamBuilder::new()).is_err());",
                "   assert_eq!(trees.inner.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"/// invalid\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"/// invalid\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"/// invalid\" };  ",
                "   let mut trees = TokenStreamBuilder::new();  ",
                "   let _ = doc_comment(input, &mut trees);  ",
                "   let input = Cursor { rest: \"/// invalid\" };  ",
                "    let mut trees = TokenStreamBuilder::new();",
                "   let result = doc_comment(input, &mut trees);  ",
                "   assert!(result.is_err());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"/** invalid block comment without closing\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(doc_comment(Cursor { rest: \"/** invalid block comment without closing\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));"
              ],
              "code": [
                "{",
                "  let input = Cursor { rest: \"/** invalid block comment without closing\" };  ",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "    assert_eq!(doc_comment(Cursor { rest: \"/** invalid block comment without closing\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"//! Comment\\r without newline\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"//! Comment\\r without newline\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert_eq!(result, Err(Reject));"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"//! Comment\\r without newline\" };",
                "   let mut trees = TokenStreamBuilder::new();",
                "   let _ = doc_comment(input, &mut trees);",
                "   let input = Cursor { rest: \"//! Comment\\r without newline\" };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert_eq!(result, Err(Reject));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(doc_comment(Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));"
              ],
              "code": [
                "{",
                "    let input = Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let _ = doc_comment(input, &mut trees);",
                "    assert_eq!(doc_comment(Cursor { rest: \"/// This comment has an invalid escape sequence \\\\\\n\", off: 0 }, &mut TokenStreamBuilder::new()), Err(Reject));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: doc_comment_contents(input)? at line 912 is Ok/Some\n",
        "precondition: let Some(cr) = scan_for_bare_cr.find('\\r') at line 922 is true\n",
        "precondition: rest.starts_with('\\n') at line 924 is true\n",
        "precondition: let Some(cr) = scan_for_bare_cr.find('\\r') at line 922 is true\n",
        "precondition: inner at line 934 is true\n",
        "expected return value/type: Ok((rest, ()))\n"
      ],
      "input_infer": "Cursor input should contain valid documentation comment syntax starting with \"//!\" or \"///\", contain at least one carriage return character followed by a newline, and have a non-empty comment string; TokenStreamBuilder should be initialized.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor {",
                "        rest: \"//! This is a documentation comment.\\r\\nNext line\".as_ref(),",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok((rest, ())));",
                "    assert_eq!(rest, \"Next line\");",
                "    assert_eq!(trees.inner.len(), 3);",
                "    assert_eq!(trees.inner[0], TokenTree::Punct(Punct::new('#', Spacing::Alone)));",
                "    assert_eq!(trees.inner[1], TokenTree::Punct(Punct::new('!', Spacing::Alone)));",
                "    assert_eq!(trees.inner[2], TokenTree::Group(Group::new(Delimiter::Bracket, TokenStream { inner: vec![TokenTree::Ident(Ident::_new_fallback(Ident::new_unchecked(\"doc\", fallback_span))), TokenTree::Punct(Punct::new('=', Spacing::Alone)), TokenTree::Literal(Literal::_new_fallback(Literal::string(\" This is a documentation comment.\")))]})));"
              ],
              "code": [
                "{",
                "    let input = Cursor {",
                "        rest: \"//! This is a documentation comment.\\r\\nNext line\".as_ref(),",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "   let result = doc_comment(input, &mut trees);",
                "   let rest = \"Next line\"; // Declare rest to fix scope error",
                "   assert_eq!(rest, \"Next line\");",
                "    assert_eq!(trees.inner.len(), 3);",
                "    assert_eq!(trees.inner[0], TokenTree::Punct(Punct::new('#', Spacing::Alone)));",
                "    assert_eq!(trees.inner[1], TokenTree::Punct(Punct::new('!', Spacing::Alone)));",
                "   assert_eq!(trees.inner[2], TokenTree::Group(Group::new(Delimiter::Bracket, TokenStream { inner: vec![TokenTree::Ident(Ident::_new_fallback(Ident::new_unchecked(\"doc\", Span::call_site()))), TokenTree::Punct(Punct::new('=', Spacing::Alone)), TokenTree::Literal(Literal::_new_fallback(Literal::string(\" This is a documentation comment.\")))]})));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor {",
                "        rest: \"/// Line1\\r\\nLine2\",",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let (rest, _) = result.unwrap();",
                "    assert_eq!(rest, \"Line2\");",
                "    assert_eq!(trees.inner.len(), 3);",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[2], TokenTree::Group(Group { delimiter: Delimiter::Bracket, .. })));"
              ],
              "code": [
                "{",
                "   let input = Cursor {",
                "       rest: \"/// Line1\\r\\nLine2\",",
                "",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert!(result.is_ok());",
                "    let (rest, _) = result.unwrap();",
                "    assert_eq!(rest, \"Line2\");",
                "    assert_eq!(trees.inner.len(), 3);",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[2], TokenTree::Group(Group { delimiter: Delimiter::Bracket, .. })));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor {",
                "        rest: \"//! Valid comment with a carriage return.\\r\\n\",",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok((rest, ())))",
                "    assert!(trees.inner.len() > 0)",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })))",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })))",
                "    assert!(matches!(trees.inner[2], TokenTree::Group(Group { delimiter: Delimiter::Bracket, .. })))",
                "    assert_eq!(trees.inner[1].span(), trees.inner[0].span())",
                "    assert!(rest.ends_with(\"\\n\"))"
              ],
              "code": [
                "{",
                "    let input = Cursor {",
                "        rest: \"//! Valid comment with a carriage return.\\r\\n\",",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "   assert_eq!(result, Ok((rest, ())));  ",
                "   assert!(trees.inner.len() > 0);  ",
                "   assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));  ",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })))",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })))",
                "    assert!(matches!(trees.inner[2], TokenTree::Group(Group { delimiter: Delimiter::Bracket, .. })))",
                "   assert_eq!(trees.inner[1].span(), trees.inner[0].span());",
                "   assert!(rest.ends_with(\"\\n\"));",
                "",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: doc_comment_contents(input)? at line 912 is Ok/Some\n",
        "precondition: let Some(cr) = scan_for_bare_cr.find('\\r') at line 922 is true\n",
        "precondition: rest.starts_with('\\n') at line 924 is true\n",
        "precondition: let Some(cr) = scan_for_bare_cr.find('\\r') at line 922 is true\n",
        "precondition: inner at line 934 is false\n",
        "expected return value/type: Ok((rest, ()))\n"
      ],
      "input_infer": "Cursor containing a string with comment syntax that has a bare line return ('\\r') followed by a newline ('\\n') without any preceding slashes, and input that eventually produces a valid doc comment with 'inner' set to false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor {",
                "        rest: \"//! This is a comment\\r\\nNext line\".as_ref(),",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let (rest, _) = result.unwrap();",
                "    assert_eq!(rest, \"Next line\");",
                "    assert_eq!(trees.inner.len(), 2);",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })));"
              ],
              "code": [
                "{",
                "  let input = Cursor {  ",
                "      rest: \"//! This is a comment\\r\\nNext line\".as_ref(),  ",
                "",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert!(result.is_ok());",
                "    let (rest, _) = result.unwrap();",
                "    assert_eq!(rest, \"Next line\");",
                "    assert_eq!(trees.inner.len(), 2);",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor {",
                "        rest: \"//! Comment before bare CR\\r\\nSecond line\".as_ref(),",
                "        off: 0,",
                "    };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"//! Comment before bare CR\\r\\nSecond line\".as_ref(), off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert!(result.is_ok());",
                "    let (rest, _) = result.unwrap();",
                "    assert_eq!(rest, \"Second line\");",
                "    assert_eq!(trees.inner.len(), 1);",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[2], TokenTree::Group(Group { delimiter: Delimiter::Bracket, .. })));",
                "    assert!(trees.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident { sym, .. }) if &**sym == \"doc\")));"
              ],
              "code": [
                "{",
                "   let input = Cursor {",
                "       rest: \"//! Comment before bare CR\\r\\nSecond line\".as_ref(),",
                "   };",
                "   let off = 0; // Separate variable to hold the offset",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "   let input = Cursor { rest: \"//! Comment before bare CR\\r\\nSecond line\".as_ref() }; // Remove off field",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert!(result.is_ok());",
                "   let (rest, _) = result.unwrap();",
                "   assert_eq!(rest, parse::Cursor { rest: \"Second line\" });",
                "    assert_eq!(trees.inner.len(), 1);",
                "    assert!(matches!(trees.inner[0], TokenTree::Punct(Punct { ch: '#', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[1], TokenTree::Punct(Punct { ch: '!', spacing: Spacing::Alone, .. })));",
                "    assert!(matches!(trees.inner[2], TokenTree::Group(Group { delimiter: Delimiter::Bracket, .. })));",
                "    assert!(trees.inner.iter().any(|tt| matches!(tt, TokenTree::Ident(Ident { sym, .. }) if &**sym == \"doc\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: doc_comment_contents(input)? at line 912 is Ok/Some\n",
        "precondition: let Some(cr) = scan_for_bare_cr.find('\\r') at line 922 is true\n",
        "precondition: rest.starts_with('\\n') at line 924 is false\n",
        "expected return value/type: Err(Reject)\n"
      ],
      "input_infer": "Cursor input containing a string starting with \"//!\" followed by a comment containing a carriage return character ('\\r') not immediately followed by a newline character ('\\n').\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"//! Example comment\\rNot followed by newline\".as_ref(), off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Reject);"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"//! Example comment\\rNot followed by newline\".as_ref() };",
                "   let mut trees = TokenStreamBuilder::new();",
                "   ",
                "   let result = doc_comment(input, &mut trees);",
                "   assert!(result.is_err());",
                "   assert_eq!(result.err().unwrap(), Reject);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref(), off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref(), off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert_eq!(result, Err(Reject));"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref() };",
                "   let mut trees = TokenStreamBuilder::new();",
                "   ",
                "   let result = doc_comment(input, &mut trees);",
                "   let input = Cursor { rest: \"//! Comment with\\rcarriage return in the middle\".as_ref() };",
                "   let mut trees = TokenStreamBuilder::new();",
                "   let result = doc_comment(input, &mut trees);",
                "   assert_eq!(result, Err(Reject));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref(), off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "",
                "    let result = doc_comment(input, &mut trees);",
                "}"
              ],
              "oracle": [
                "    let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref(), off: 0 };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert_eq!(result, Err(Reject));"
              ],
              "code": [
                "{",
                "   let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref() };",
                "   let mut trees = TokenStreamBuilder::new();",
                "",
                "   let result = doc_comment(input, &mut trees);",
                "   let input = Cursor { rest: \"//! Comment ending with\\r\".as_ref() };",
                "    let mut trees = TokenStreamBuilder::new();",
                "    let result = doc_comment(input, &mut trees);",
                "    assert_eq!(result, Err(Reject));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}