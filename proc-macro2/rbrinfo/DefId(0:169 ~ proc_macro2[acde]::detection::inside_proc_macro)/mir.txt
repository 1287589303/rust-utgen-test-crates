bb0
  0: StorageLive(_1)
    SourceInfo(src/detection.rs:8:5-12:6)
  1: StorageLive(_2)
    SourceInfo(src/detection.rs:8:11-8:40)
  2: StorageLive(_3)
    SourceInfo(src/detection.rs:8:11-8:16)
  3: StorageLive(_4)
    SourceInfo(src/detection.rs:8:11-8:16)
  4: _4 = const {alloc1: &std::sync::atomic::AtomicUsize}
    SourceInfo(src/detection.rs:8:11-8:16)
  5: _3 = &(*_4)
    SourceInfo(src/detection.rs:8:11-8:16)
  6: StorageLive(_5)
    SourceInfo(src/detection.rs:8:22-8:39)
  7: _5 = std::sync::atomic::Ordering::Relaxed
    SourceInfo(src/detection.rs:8:22-8:39)
  Terminator {
      source_info: SourceInfo(src/detection.rs:8:11-8:40)
      kind: _2 = std::sync::atomic::AtomicUsize::load(move _3, move _5) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_5)
    SourceInfo(src/detection.rs:8:39-8:40)
  1: StorageDead(_3)
    SourceInfo(src/detection.rs:8:39-8:40)
  2: PlaceMention(_2)
    SourceInfo(src/detection.rs:8:11-8:40)
  Terminator {
      source_info: SourceInfo(src/detection.rs:8:5-8:40)
      kind: switchInt(_2) -> [1: bb3, 2: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: _1 = const ()
    SourceInfo(src/detection.rs:11:14-11:16)
  1: StorageDead(_4)
    SourceInfo(src/detection.rs:12:5-12:6)
  2: StorageDead(_2)
    SourceInfo(src/detection.rs:12:5-12:6)
  3: StorageDead(_1)
    SourceInfo(src/detection.rs:12:5-12:6)
  4: StorageLive(_8)
    SourceInfo(src/detection.rs:14:5-14:31)
  5: StorageLive(_9)
    SourceInfo(src/detection.rs:14:5-14:9)
  6: StorageLive(_10)
    SourceInfo(src/detection.rs:14:5-14:9)
  7: _10 = const {alloc2: &std::sync::Once}
    SourceInfo(src/detection.rs:14:5-14:9)
  8: _9 = &(*_10)
    SourceInfo(src/detection.rs:14:5-14:9)
  Terminator {
      source_info: SourceInfo(src/detection.rs:14:5-14:31)
      kind: _8 = std::sync::Once::call_once::<fn() {detection::initialize}>(move _9, detection::initialize) -> [return: bb7, unwind: bb10]
  }
  preds [bb1, bb4]
  succs [bb7, bb10]

bb3
  Terminator {
      source_info: SourceInfo(src/detection.rs:9:9-9:10)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  Terminator {
      source_info: SourceInfo(src/detection.rs:10:9-10:10)
      kind: falseEdge -> [real: bb6, imaginary: bb2]
  }
  preds [bb1, bb3]
  succs [bb2, bb6]

bb5
  0: _0 = const false
    SourceInfo(src/detection.rs:9:21-9:26)
  Terminator {
      source_info: SourceInfo(src/detection.rs:9:14-9:26)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb6
  0: _0 = const true
    SourceInfo(src/detection.rs:10:21-10:25)
  Terminator {
      source_info: SourceInfo(src/detection.rs:10:14-10:25)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb7
  0: StorageDead(_9)
    SourceInfo(src/detection.rs:14:30-14:31)
  1: StorageDead(_10)
    SourceInfo(src/detection.rs:14:31-14:32)
  2: StorageDead(_8)
    SourceInfo(src/detection.rs:14:31-14:32)
  Terminator {
      source_info: SourceInfo(src/detection.rs:15:5-15:24)
      kind: _0 = detection::inside_proc_macro() -> [return: bb9, unwind: bb10]
  }
  preds [bb2]
  succs [bb9, bb10]

bb8
  0: StorageDead(_4)
    SourceInfo(src/detection.rs:12:5-12:6)
  1: StorageDead(_2)
    SourceInfo(src/detection.rs:12:5-12:6)
  2: StorageDead(_1)
    SourceInfo(src/detection.rs:12:5-12:6)
  Terminator {
      source_info: SourceInfo(src/detection.rs:16:2-16:2)
      kind: goto -> bb9
  }
  preds [bb5, bb6]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(src/detection.rs:16:2-16:2)
      kind: return
  }
  preds [bb7, bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(src/detection.rs:7:1-16:2)
      kind: resume
  }
  preds [bb0, bb2, bb7]
  succs []

