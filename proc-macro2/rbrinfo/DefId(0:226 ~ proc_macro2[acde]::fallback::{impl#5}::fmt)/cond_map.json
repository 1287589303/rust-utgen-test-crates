{
  "src/fallback.rs:226:29:226:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "tt.spacing() == Spacing::Joint",
          "lhs": "tt.spacing()",
          "rhs": "Spacing::Joint",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/fallback.rs:217:24:217:53": [
    {
      "For": {
        "iter_var": "(i, tt)",
        "iter_range": "self.inner.iter().enumerate()"
      }
    }
  ],
  "src/fallback.rs:222:19:222:21": [
    {
      "Match": {
        "match_source": "src/fallback.rs:222:19:222:21",
        "match_str": "tt",
        "match_kind": {
          "Enum": [
            "Group",
            "Ident",
            "Punct",
            "Literal"
          ]
        },
        "arms": {
          "src/fallback.rs:223:17:223:37": {
            "pat": {
              "pat_str": "TokenTree::Group(tt)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "src/fallback.rs:223:41:223:60"
          },
          "src/fallback.rs:224:17:224:37": {
            "pat": {
              "pat_str": "TokenTree::Ident(tt)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "src/fallback.rs:224:41:224:60"
          },
          "src/fallback.rs:229:17:229:39": {
            "pat": {
              "pat_str": "TokenTree::Literal(tt)",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "src/fallback.rs:229:43:229:62"
          },
          "src/fallback.rs:225:17:225:37": {
            "pat": {
              "pat_str": "TokenTree::Punct(tt)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "src/fallback.rs:225:41:228:18"
          }
        }
      }
    }
  ],
  "src/fallback.rs:219:17:219:32": [
    {
      "Try": "write!(f, \" \")?"
    }
  ],
  "src/fallback.rs:218:27:218:32": [
    {
      "Bool": {
        "Other": "joint"
      }
    }
  ],
  "src/fallback.rs:218:16:218:22": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "i != 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/fallback.rs:222:13:230:15": [
    {
      "Try": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?"
    }
  ]
}