bb0
  0: StorageLive(_3)
    SourceInfo(src/fallback.rs:239:9-239:37)
  1: StorageLive(_4)
    SourceInfo(src/fallback.rs:239:9-239:37)
  2: StorageLive(_5)
    SourceInfo(src/fallback.rs:239:9-239:36)
  3: StorageLive(_6)
    SourceInfo(src/fallback.rs:239:9-239:10)
  4: _6 = &mut (*_2)
    SourceInfo(src/fallback.rs:239:9-239:10)
  5: StorageLive(_7)
    SourceInfo(src/fallback.rs:239:21-239:35)
  6: StorageLive(_8)
    SourceInfo(src/fallback.rs:239:21-239:35)
  7: _8 = const "TokenStream "
    SourceInfo(src/fallback.rs:239:21-239:35)
  8: _7 = &(*_8)
    SourceInfo(src/fallback.rs:239:21-239:35)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:239:9-239:36)
      kind: _5 = std::fmt::Formatter::<'_>::write_str(move _6, move _7) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageDead(_7)
    SourceInfo(src/fallback.rs:239:35-239:36)
  1: StorageDead(_6)
    SourceInfo(src/fallback.rs:239:35-239:36)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:239:9-239:37)
      kind: _4 = <std::result::Result<(), std::fmt::Error> as std::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: StorageDead(_5)
    SourceInfo(src/fallback.rs:239:36-239:37)
  1: PlaceMention(_4)
    SourceInfo(src/fallback.rs:239:9-239:37)
  2: _9 = discriminant(_4)
    SourceInfo(src/fallback.rs:239:9-239:37)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:239:9-239:37)
      kind: switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(src/fallback.rs:239:9-239:37)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:239:9-239:37)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/fallback.rs:239:36-239:37)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_13)
    SourceInfo(src/fallback.rs:239:9-239:37)
  1: _13 = ((_4 as Continue).0: ())
    SourceInfo(src/fallback.rs:239:9-239:37)
  2: _3 = _13
    SourceInfo(src/fallback.rs:239:9-239:37)
  3: StorageDead(_13)
    SourceInfo(src/fallback.rs:239:36-239:37)
  4: StorageDead(_8)
    SourceInfo(src/fallback.rs:239:37-239:38)
  5: StorageDead(_4)
    SourceInfo(src/fallback.rs:239:37-239:38)
  6: StorageDead(_3)
    SourceInfo(src/fallback.rs:239:37-239:38)
  7: StorageLive(_14)
    SourceInfo(src/fallback.rs:240:9-240:45)
  8: StorageLive(_15)
    SourceInfo(src/fallback.rs:240:9-240:45)
  9: StorageLive(_16)
    SourceInfo(src/fallback.rs:240:9-240:23)
  10: StorageLive(_17)
    SourceInfo(src/fallback.rs:240:9-240:23)
  11: StorageLive(_18)
    SourceInfo(src/fallback.rs:240:9-240:10)
  12: _18 = &mut (*_2)
    SourceInfo(src/fallback.rs:240:9-240:10)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:240:9-240:23)
      kind: _17 = std::fmt::Formatter::<'_>::debug_list(move _18) -> [return: bb8, unwind: bb14]
  }
  preds [bb2, bb4]
  succs [bb8, bb14]

bb6
  0: StorageLive(_10)
    SourceInfo(src/fallback.rs:239:36-239:37)
  1: _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>)
    SourceInfo(src/fallback.rs:239:36-239:37)
  2: StorageLive(_12)
    SourceInfo(src/fallback.rs:239:36-239:37)
  3: _12 = _10
    SourceInfo(src/fallback.rs:239:36-239:37)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:239:9-239:37)
      kind: _0 = <std::result::Result<(), std::fmt::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::fmt::Error>>>::from_residual(move _12) -> [return: bb7, unwind: bb14]
  }
  preds [bb4]
  succs [bb7, bb14]

bb7
  0: StorageDead(_12)
    SourceInfo(src/fallback.rs:239:36-239:37)
  1: StorageDead(_10)
    SourceInfo(src/fallback.rs:239:36-239:37)
  2: StorageDead(_8)
    SourceInfo(src/fallback.rs:239:37-239:38)
  3: StorageDead(_4)
    SourceInfo(src/fallback.rs:239:37-239:38)
  4: StorageDead(_3)
    SourceInfo(src/fallback.rs:239:37-239:38)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:241:6-241:6)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb8
  0: _16 = &mut _17
    SourceInfo(src/fallback.rs:240:9-240:23)
  1: StorageDead(_18)
    SourceInfo(src/fallback.rs:240:22-240:23)
  2: StorageLive(_19)
    SourceInfo(src/fallback.rs:240:32-240:44)
  3: StorageLive(_20)
    SourceInfo(src/fallback.rs:240:32-240:36)
  4: _20 = &(*_1)
    SourceInfo(src/fallback.rs:240:32-240:36)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:240:32-240:44)
      kind: _19 = <fallback::TokenStream as std::clone::Clone>::clone(move _20) -> [return: bb9, unwind: bb14]
  }
  preds [bb5]
  succs [bb9, bb14]

bb9
  0: StorageDead(_20)
    SourceInfo(src/fallback.rs:240:43-240:44)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:240:9-240:45)
      kind: _15 = std::fmt::DebugList::<'_, '_>::entries::<TokenTree, fallback::TokenStream>(move _16, move _19) -> [return: bb10, unwind: bb13]
  }
  preds [bb8]
  succs [bb10, bb13]

bb10
  0: _14 = &mut (*_15)
    SourceInfo(src/fallback.rs:240:9-240:45)
  1: StorageDead(_19)
    SourceInfo(src/fallback.rs:240:44-240:45)
  2: StorageDead(_16)
    SourceInfo(src/fallback.rs:240:44-240:45)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:240:9-240:54)
      kind: _0 = std::fmt::DebugList::<'_, '_>::finish(move _14) -> [return: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_14)
    SourceInfo(src/fallback.rs:240:53-240:54)
  1: StorageDead(_17)
    SourceInfo(src/fallback.rs:241:5-241:6)
  2: StorageDead(_15)
    SourceInfo(src/fallback.rs:241:5-241:6)
  Terminator {
      source_info: SourceInfo(src/fallback.rs:241:6-241:6)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(src/fallback.rs:241:6-241:6)
      kind: return
  }
  preds [bb7, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(src/fallback.rs:240:44-240:45)
      kind: drop(_19) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb9]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/fallback.rs:238:5-241:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb6, bb8, bb10, bb13]
  succs []

