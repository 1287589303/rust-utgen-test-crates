bb0
  0: StorageLive(_2)
    SourceInfo(src/parse.rs:338:9-338:13)
  1: StorageLive(_3)
    SourceInfo(src/parse.rs:338:16-338:41)
  2: StorageLive(_4)
    SourceInfo(src/parse.rs:338:16-338:40)
  3: StorageLive(_5)
    SourceInfo(src/parse.rs:338:34-338:39)
  4: _5 = _1
    SourceInfo(src/parse.rs:338:34-338:39)
  Terminator {
      source_info: SourceInfo(src/parse.rs:338:16-338:40)
      kind: _4 = parse::literal_nocapture(move _5) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: StorageDead(_5)
    SourceInfo(src/parse.rs:338:39-338:40)
  Terminator {
      source_info: SourceInfo(src/parse.rs:338:16-338:41)
      kind: _3 = <std::result::Result<parse::Cursor<'_>, parse::Reject> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_4)
    SourceInfo(src/parse.rs:338:40-338:41)
  1: PlaceMention(_3)
    SourceInfo(src/parse.rs:338:16-338:41)
  2: _6 = discriminant(_3)
    SourceInfo(src/parse.rs:338:16-338:41)
  Terminator {
      source_info: SourceInfo(src/parse.rs:338:16-338:41)
      kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(src/parse.rs:338:16-338:41)
  Terminator {
      source_info: SourceInfo(src/parse.rs:338:16-338:41)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/parse.rs:338:40-338:41)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_10)
    SourceInfo(src/parse.rs:338:16-338:41)
  1: _10 = ((_3 as Continue).0: parse::Cursor<'_>)
    SourceInfo(src/parse.rs:338:16-338:41)
  2: _2 = _10
    SourceInfo(src/parse.rs:338:16-338:41)
  3: StorageDead(_10)
    SourceInfo(src/parse.rs:338:40-338:41)
  4: FakeRead(ForLet(None), _2)
    SourceInfo(src/parse.rs:338:9-338:13)
  5: StorageDead(_3)
    SourceInfo(src/parse.rs:338:41-338:42)
  6: StorageLive(_11)
    SourceInfo(src/parse.rs:339:9-339:12)
  7: StorageLive(_12)
    SourceInfo(src/parse.rs:339:15-339:26)
  8: StorageLive(_13)
    SourceInfo(src/parse.rs:339:15-339:20)
  9: _13 = &_1
    SourceInfo(src/parse.rs:339:15-339:20)
  Terminator {
      source_info: SourceInfo(src/parse.rs:339:15-339:26)
      kind: _12 = parse::Cursor::<'_>::len(move _13) -> [return: bb8, unwind: bb19]
  }
  preds [bb2, bb4]
  succs [bb8, bb19]

bb6
  0: StorageLive(_7)
    SourceInfo(src/parse.rs:338:40-338:41)
  1: _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, parse::Reject>)
    SourceInfo(src/parse.rs:338:40-338:41)
  2: StorageLive(_9)
    SourceInfo(src/parse.rs:338:40-338:41)
  3: _9 = move _7
    SourceInfo(src/parse.rs:338:40-338:41)
  Terminator {
      source_info: SourceInfo(src/parse.rs:338:16-338:41)
      kind: _0 = <std::result::Result<(parse::Cursor<'_>, fallback::Literal), parse::Reject> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, parse::Reject>>>::from_residual(move _9) -> [return: bb7, unwind: bb19]
  }
  preds [bb4]
  succs [bb7, bb19]

bb7
  0: StorageDead(_9)
    SourceInfo(src/parse.rs:338:40-338:41)
  1: StorageDead(_7)
    SourceInfo(src/parse.rs:338:40-338:41)
  2: StorageDead(_3)
    SourceInfo(src/parse.rs:338:41-338:42)
  3: StorageDead(_2)
    SourceInfo(src/parse.rs:341:1-341:2)
  Terminator {
      source_info: SourceInfo(src/parse.rs:341:2-341:2)
      kind: goto -> bb16
  }
  preds [bb6]
  succs [bb16]

bb8
  0: StorageDead(_13)
    SourceInfo(src/parse.rs:339:25-339:26)
  1: StorageLive(_14)
    SourceInfo(src/parse.rs:339:29-339:39)
  2: StorageLive(_15)
    SourceInfo(src/parse.rs:339:29-339:33)
  3: _15 = &_2
    SourceInfo(src/parse.rs:339:29-339:33)
  Terminator {
      source_info: SourceInfo(src/parse.rs:339:29-339:39)
      kind: _14 = parse::Cursor::<'_>::len(move _15) -> [return: bb9, unwind: bb19]
  }
  preds [bb5]
  succs [bb9, bb19]

bb9
  0: StorageDead(_15)
    SourceInfo(src/parse.rs:339:38-339:39)
  1: _16 = SubWithOverflow(_12, _14)
    SourceInfo(src/parse.rs:339:15-339:39)
  Terminator {
      source_info: SourceInfo(src/parse.rs:339:15-339:39)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _12, move _14) -> [success: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: _11 = move (_16.0: usize)
    SourceInfo(src/parse.rs:339:15-339:39)
  1: StorageDead(_14)
    SourceInfo(src/parse.rs:339:38-339:39)
  2: StorageDead(_12)
    SourceInfo(src/parse.rs:339:38-339:39)
  3: FakeRead(ForLet(None), _11)
    SourceInfo(src/parse.rs:339:9-339:12)
  4: StorageLive(_17)
    SourceInfo(src/parse.rs:340:8-340:60)
  5: StorageLive(_18)
    SourceInfo(src/parse.rs:340:9-340:13)
  6: _18 = _2
    SourceInfo(src/parse.rs:340:9-340:13)
  7: StorageLive(_19)
    SourceInfo(src/parse.rs:340:15-340:59)
  8: StorageLive(_20)
    SourceInfo(src/parse.rs:340:29-340:58)
  9: StorageLive(_21)
    SourceInfo(src/parse.rs:340:29-340:46)
  10: StorageLive(_22)
    SourceInfo(src/parse.rs:340:39-340:46)
  11: StorageLive(_23)
    SourceInfo(src/parse.rs:340:29-340:39)
  12: _23 = &(*(_1.0: &str))
    SourceInfo(src/parse.rs:340:29-340:39)
  13: StorageLive(_24)
    SourceInfo(src/parse.rs:340:40-340:45)
  14: StorageLive(_25)
    SourceInfo(src/parse.rs:340:42-340:45)
  15: _25 = _11
    SourceInfo(src/parse.rs:340:42-340:45)
  16: _24 = std::ops::RangeTo::<usize> { end: move _25 }
    SourceInfo(src/parse.rs:340:40-340:45)
  17: StorageDead(_25)
    SourceInfo(src/parse.rs:340:44-340:45)
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:39-340:46)
      kind: _22 = <str as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _23, move _24) -> [return: bb11, unwind: bb19]
  }
  preds [bb9]
  succs [bb11, bb19]

bb11
  0: _21 = &(*_22)
    SourceInfo(src/parse.rs:340:29-340:46)
  1: StorageDead(_24)
    SourceInfo(src/parse.rs:340:45-340:46)
  2: StorageDead(_23)
    SourceInfo(src/parse.rs:340:45-340:46)
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:29-340:58)
      kind: _20 = <str as std::string::ToString>::to_string(move _21) -> [return: bb12, unwind: bb19]
  }
  preds [bb10]
  succs [bb12, bb19]

bb12
  0: StorageDead(_21)
    SourceInfo(src/parse.rs:340:57-340:58)
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:15-340:59)
      kind: _19 = fallback::Literal::_new(move _20) -> [return: bb13, unwind: bb18]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  0: StorageDead(_20)
    SourceInfo(src/parse.rs:340:58-340:59)
  1: _17 = (move _18, move _19)
    SourceInfo(src/parse.rs:340:8-340:60)
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:59-340:60)
      kind: drop(_19) -> [return: bb14, unwind: bb17]
  }
  preds [bb12]
  succs [bb14, bb17]

bb14
  0: StorageDead(_19)
    SourceInfo(src/parse.rs:340:59-340:60)
  1: StorageDead(_18)
    SourceInfo(src/parse.rs:340:59-340:60)
  2: _0 = std::result::Result::<(parse::Cursor<'_>, fallback::Literal), parse::Reject>::Ok(move _17)
    SourceInfo(src/parse.rs:340:5-340:61)
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:60-340:61)
      kind: drop(_17) -> [return: bb15, unwind: bb19]
  }
  preds [bb13]
  succs [bb15, bb19]

bb15
  0: StorageDead(_17)
    SourceInfo(src/parse.rs:340:60-340:61)
  1: StorageDead(_11)
    SourceInfo(src/parse.rs:341:1-341:2)
  2: StorageDead(_2)
    SourceInfo(src/parse.rs:341:1-341:2)
  3: StorageDead(_22)
    SourceInfo(src/parse.rs:341:1-341:2)
  Terminator {
      source_info: SourceInfo(src/parse.rs:341:2-341:2)
      kind: goto -> bb16
  }
  preds [bb14]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(src/parse.rs:341:2-341:2)
      kind: return
  }
  preds [bb7, bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:60-340:61)
      kind: drop(_17) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb19]

bb18
  Terminator {
      source_info: SourceInfo(src/parse.rs:340:58-340:59)
      kind: drop(_20) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/parse.rs:337:1-341:2)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb6, bb8, bb9, bb10, bb11, bb14, bb17, bb18]
  succs []

