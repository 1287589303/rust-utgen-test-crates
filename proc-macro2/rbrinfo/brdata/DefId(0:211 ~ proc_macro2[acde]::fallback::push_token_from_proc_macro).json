{
  "name": "proc_macro2::fallback::push_token_from_proc_macro",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": false,
  "loc": "src/fallback.rs:100:1:123:2",
  "doc": "",
  "code": [
    "fn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree) {",
    "    // https://github.com/dtolnay/proc-macro2/issues/235",
    "    match token {",
    "        TokenTree::Literal(crate::Literal {",
    "            #[cfg(wrap_proc_macro)]",
    "                inner: crate::imp::Literal::Fallback(literal),",
    "            #[cfg(not(wrap_proc_macro))]",
    "                inner: literal,",
    "            ..",
    "        }) if literal.repr.starts_with('-') => {",
    "            push_negative_literal(vec, literal);",
    "        }",
    "        _ => vec.push(token),",
    "    }",
    "",
    "    #[cold]",
    "    fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal) {",
    "        literal.repr.remove(0);",
    "        let mut punct = crate::Punct::new('-', Spacing::Alone);",
    "        punct.set_span(crate::Span::_new_fallback(literal.span));",
    "        vec.push(TokenTree::Punct(punct));",
    "        vec.push(TokenTree::Literal(crate::Literal::_new_fallback(literal)));",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        },
        {
          "cond": "token matches _",
          "norm": null,
          "value": "true",
          "line": 112,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        },
        {
          "cond": "token matches _",
          "norm": null,
          "value": "true",
          "line": 112,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        1,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "token matches ",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "literal.repr.starts_with('-')",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "token matches ",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "token matches TokenTree::Literal(crate::Literal {\n            #[cfg(wrap_proc_macro)]\n                inner: crate::imp::Literal::Fallback(literal),\n            #[cfg(not(wrap_proc_macro))]\n                inner: literal,\n            ..\n        })",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "literal.repr.starts_with('-')",
          "norm": null,
          "value": "false",
          "line": 109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        8,
        1,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}