{
  "name": "proc_macro2::fallback::{impl#18}::fmt",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:765:5:781:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
    "    let (open, close) = match self.delimiter {",
    "        Delimiter::Parenthesis => (\"(\", \")\"),",
    "        Delimiter::Brace => (\"{ \", \"}\"),",
    "        Delimiter::Bracket => (\"[\", \"]\"),",
    "        Delimiter::None => (\"\", \"\"),",
    "    };",
    "",
    "    f.write_str(open)?;",
    "    Display::fmt(&self.stream, f)?;",
    "    if self.delimiter == Delimiter::Brace && !self.stream.inner.is_empty() {",
    "        f.write_str(\" \")?;",
    "    }",
    "    f.write_str(close)?;",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 36,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Err/None",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        9,
        10,
        11,
        13,
        15,
        16,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Err/None",
          "line": 774,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        20,
        22,
        23,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Err/None",
          "line": 776,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        32,
        34,
        35,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::None",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Err/None",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Err/None",
          "line": 774,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        20,
        22,
        23,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Err/None",
          "line": 776,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        32,
        34,
        35,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Bracket",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Err/None",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        13,
        15,
        16,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Err/None",
          "line": 774,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        20,
        22,
        23,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Err/None",
          "line": 776,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        32,
        34,
        35,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Brace",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        7,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Err/None",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        13,
        15,
        16,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Err/None",
          "line": 774,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        20,
        22,
        23,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Err/None",
          "line": 776,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        32,
        34,
        35,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "self.stream.inner.is_empty()",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(\" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 776,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        26,
        28,
        29,
        30,
        33,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Err/None",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "self.delimiter matches Delimiter::Parenthesis",
          "norm": null,
          "value": "true",
          "line": 766,
          "bound": null
        },
        {
          "cond": "f.write_str(open)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 773,
          "bound": null
        },
        {
          "cond": "Display::fmt(&self.stream, f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 774,
          "bound": null
        },
        {
          "cond": "self.delimiter == Delimiter::Brace",
          "norm": "Delimiter::Brace == self.delimiter",
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "f.write_str(close)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 778,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        6,
        9,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        36,
        37,
        38,
        39,
        40,
        43,
        47
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}