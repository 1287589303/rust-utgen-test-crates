{
  "name": "proc_macro2::imp::{impl#18}::next",
  "mod_info": {
    "name": "imp",
    "loc": "src/lib.rs:159:1:159:9"
  },
  "visible": true,
  "loc": "src/wrapper.rs:328:5:353:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<TokenTree> {",
    "    let token = match self {",
    "        TokenTreeIter::Compiler(iter) => iter.next()?,",
    "        TokenTreeIter::Fallback(iter) => return iter.next(),",
    "    };",
    "    Some(match token {",
    "        proc_macro::TokenTree::Group(tt) => {",
    "            TokenTree::Group(crate::Group::_new(Group::Compiler(tt)))",
    "        }",
    "        proc_macro::TokenTree::Punct(tt) => {",
    "            let spacing = match tt.spacing() {",
    "                proc_macro::Spacing::Joint => Spacing::Joint,",
    "                proc_macro::Spacing::Alone => Spacing::Alone,",
    "            };",
    "            let mut o = Punct::new(tt.as_char(), spacing);",
    "            o.set_span(crate::Span::_new(Span::Compiler(tt.span())));",
    "            TokenTree::Punct(o)",
    "        }",
    "        proc_macro::TokenTree::Ident(s) => {",
    "            TokenTree::Ident(crate::Ident::_new(Ident::Compiler(s)))",
    "        }",
    "        proc_macro::TokenTree::Literal(l) => {",
    "            TokenTree::Literal(crate::Literal::_new(Literal::Compiler(l)))",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Fallback(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        14,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Err/None",
          "line": 330,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        8,
        10,
        11,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 330,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Literal(l)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        }
      ],
      "ret": "Some(match token {\n            proc_macro::TokenTree::Group(tt) => {\n                TokenTree::Group(crate::Group::_new(Group::Compiler(tt)))\n            }\n            proc_macro::TokenTree::Punct(tt) => {\n                let spacing = match tt.spacing() {\n                    proc_macro::Spacing::Joint => Spacing::Joint,\n                    proc_macro::Spacing::Alone => Spacing::Alone,\n                };\n                let mut o = Punct::new(tt.as_char(), spacing);\n                o.set_span(crate::Span::_new(Span::Compiler(tt.span())));\n                TokenTree::Punct(o)\n            }\n            proc_macro::TokenTree::Ident(s) => {\n                TokenTree::Ident(crate::Ident::_new(Ident::Compiler(s)))\n            }\n            proc_macro::TokenTree::Literal(l) => {\n                TokenTree::Literal(crate::Literal::_new(Literal::Compiler(l)))\n            }\n        })",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        12,
        13,
        19,
        40,
        41,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 330,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        },
        {
          "cond": "tt.spacing() matches proc_macro::Spacing::Alone",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        }
      ],
      "ret": "Some(match token {\n            proc_macro::TokenTree::Group(tt) => {\n                TokenTree::Group(crate::Group::_new(Group::Compiler(tt)))\n            }\n            proc_macro::TokenTree::Punct(tt) => {\n                let spacing = match tt.spacing() {\n                    proc_macro::Spacing::Joint => Spacing::Joint,\n                    proc_macro::Spacing::Alone => Spacing::Alone,\n                };\n                let mut o = Punct::new(tt.as_char(), spacing);\n                o.set_span(crate::Span::_new(Span::Compiler(tt.span())));\n                TokenTree::Punct(o)\n            }\n            proc_macro::TokenTree::Ident(s) => {\n                TokenTree::Ident(crate::Ident::_new(Ident::Compiler(s)))\n            }\n            proc_macro::TokenTree::Literal(l) => {\n                TokenTree::Literal(crate::Literal::_new(Literal::Compiler(l)))\n            }\n        })",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        12,
        13,
        17,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 330,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        },
        {
          "cond": "tt.spacing() matches proc_macro::Spacing::Joint",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        },
        {
          "cond": "tt.spacing() matches proc_macro::Spacing::Joint",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        }
      ],
      "ret": "Some(match token {\n            proc_macro::TokenTree::Group(tt) => {\n                TokenTree::Group(crate::Group::_new(Group::Compiler(tt)))\n            }\n            proc_macro::TokenTree::Punct(tt) => {\n                let spacing = match tt.spacing() {\n                    proc_macro::Spacing::Joint => Spacing::Joint,\n                    proc_macro::Spacing::Alone => Spacing::Alone,\n                };\n                let mut o = Punct::new(tt.as_char(), spacing);\n                o.set_span(crate::Span::_new(Span::Compiler(tt.span())));\n                TokenTree::Punct(o)\n            }\n            proc_macro::TokenTree::Ident(s) => {\n                TokenTree::Ident(crate::Ident::_new(Ident::Compiler(s)))\n            }\n            proc_macro::TokenTree::Literal(l) => {\n                TokenTree::Literal(crate::Literal::_new(Literal::Compiler(l)))\n            }\n        })",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        12,
        13,
        17,
        25,
        26,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 330,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Ident(s)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Ident(s)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        }
      ],
      "ret": "Some(match token {\n            proc_macro::TokenTree::Group(tt) => {\n                TokenTree::Group(crate::Group::_new(Group::Compiler(tt)))\n            }\n            proc_macro::TokenTree::Punct(tt) => {\n                let spacing = match tt.spacing() {\n                    proc_macro::Spacing::Joint => Spacing::Joint,\n                    proc_macro::Spacing::Alone => Spacing::Alone,\n                };\n                let mut o = Punct::new(tt.as_char(), spacing);\n                o.set_span(crate::Span::_new(Span::Compiler(tt.span())));\n                TokenTree::Punct(o)\n            }\n            proc_macro::TokenTree::Ident(s) => {\n                TokenTree::Ident(crate::Ident::_new(Ident::Compiler(s)))\n            }\n            proc_macro::TokenTree::Literal(l) => {\n                TokenTree::Literal(crate::Literal::_new(Literal::Compiler(l)))\n            }\n        })",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        12,
        13,
        18,
        37,
        38,
        39,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "self matches TokenTreeIter::Compiler(iter)",
          "norm": null,
          "value": "true",
          "line": 329,
          "bound": null
        },
        {
          "cond": "iter.next()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 330,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        },
        {
          "cond": "token matches proc_macro::TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 333,
          "bound": null
        }
      ],
      "ret": "Some(match token {\n            proc_macro::TokenTree::Group(tt) => {\n                TokenTree::Group(crate::Group::_new(Group::Compiler(tt)))\n            }\n            proc_macro::TokenTree::Punct(tt) => {\n                let spacing = match tt.spacing() {\n                    proc_macro::Spacing::Joint => Spacing::Joint,\n                    proc_macro::Spacing::Alone => Spacing::Alone,\n                };\n                let mut o = Punct::new(tt.as_char(), spacing);\n                o.set_span(crate::Span::_new(Span::Compiler(tt.span())));\n                TokenTree::Punct(o)\n            }\n            proc_macro::TokenTree::Ident(s) => {\n                TokenTree::Ident(crate::Ident::_new(Ident::Compiler(s)))\n            }\n            proc_macro::TokenTree::Literal(l) => {\n                TokenTree::Literal(crate::Literal::_new(Literal::Compiler(l)))\n            }\n        })",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        12,
        13,
        16,
        20,
        21,
        22,
        23,
        24,
        42,
        43,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}