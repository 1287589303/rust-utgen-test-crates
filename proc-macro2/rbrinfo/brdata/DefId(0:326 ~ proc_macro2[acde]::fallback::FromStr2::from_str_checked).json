{
  "name": "proc_macro2::fallback::FromStr2::from_str_checked",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:1242:5:1256:6",
  "doc": "",
  "code": [
    "fn from_str_checked(src: &str) -> Result<Self, imp::LexError> {",
    "    // Validate using fallback parser, because rustc is incapable of",
    "    // returning a recoverable Err for certain invalid token streams, and",
    "    // will instead permanently poison the compilation.",
    "    if !Self::valid(src) {",
    "        return Err(imp::LexError::CompilerPanic);",
    "    }",
    "",
    "    // Catch panic to work around https://github.com/rust-lang/rust/issues/58736.",
    "    match panic::catch_unwind(|| Self::from_str(src)) {",
    "        Ok(Ok(ok)) => Ok(ok),",
    "        Ok(Err(lex)) => Err(imp::LexError::Compiler(lex)),",
    "        Err(_panic) => Err(imp::LexError::CompilerPanic),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Self::valid(src)",
          "norm": null,
          "value": "true",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Err(_panic)",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        }
      ],
      "ret": "Err(imp::LexError::CompilerPanic)",
      "path": [
        0,
        1,
        2,
        4,
        9,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Self::valid(src)",
          "norm": null,
          "value": "true",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Ok(Ok(ok)) or Ok(Err(lex))",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Err(_panic)",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Ok(Err(lex))",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        }
      ],
      "ret": "Err(imp::LexError::Compiler(lex))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        13,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "Self::valid(src)",
          "norm": null,
          "value": "true",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Ok(Ok(ok)) or Ok(Err(lex))",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Ok(Ok(ok)) or Ok(Err(lex))",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "panic::catch_unwind(|| Self::from_str(src)) matches Ok(Ok(ok))",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        }
      ],
      "ret": "Ok(ok)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        10,
        11,
        12,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "Self::valid(src)",
          "norm": null,
          "value": "false",
          "line": 1246,
          "bound": null
        }
      ],
      "ret": "Err(imp::LexError::CompilerPanic)",
      "path": [
        0,
        1,
        3,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}