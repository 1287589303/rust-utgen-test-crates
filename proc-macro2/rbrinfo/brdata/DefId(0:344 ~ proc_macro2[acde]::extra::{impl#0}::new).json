{
  "name": "proc_macro2::extra::{impl#0}::new",
  "mod_info": {
    "name": "extra",
    "loc": "src/lib.rs:153:1:153:15"
  },
  "visible": true,
  "loc": "src/extra.rs:99:5:117:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(group: &imp::Group) -> Self {",
    "    #[cfg(wrap_proc_macro)]",
    "    let inner = match group {",
    "        imp::Group::Compiler(group) => DelimSpanEnum::Compiler {",
    "            join: group.span(),",
    "            open: group.span_open(),",
    "            close: group.span_close(),",
    "        },",
    "        imp::Group::Fallback(group) => DelimSpanEnum::Fallback(group.span()),",
    "    };",
    "",
    "    #[cfg(not(wrap_proc_macro))]",
    "    let inner = DelimSpanEnum::Fallback(group.span());",
    "",
    "    DelimSpan {",
    "        inner,",
    "        _marker: MARKER,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "group matches imp::Group::Fallback(group)",
          "norm": null,
          "value": "true",
          "line": 101,
          "bound": null
        }
      ],
      "ret": "DelimSpan {\n            inner,\n            _marker: MARKER,\n        }",
      "path": [
        0,
        3,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "group matches imp::Group::Compiler(group)",
          "norm": null,
          "value": "true",
          "line": 101,
          "bound": null
        },
        {
          "cond": "group matches imp::Group::Compiler(group)",
          "norm": null,
          "value": "true",
          "line": 101,
          "bound": null
        }
      ],
      "ret": "DelimSpan {\n            inner,\n            _marker: MARKER,\n        }",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}