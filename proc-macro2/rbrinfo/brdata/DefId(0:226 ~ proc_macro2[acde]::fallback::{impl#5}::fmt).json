{
  "name": "proc_macro2::fallback::{impl#5}::fmt",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:215:5:234:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
    "    let mut joint = false;",
    "    for (i, tt) in self.inner.iter().enumerate() {",
    "        if i != 0 && !joint {",
    "            write!(f, \" \")?;",
    "        }",
    "        joint = false;",
    "        match tt {",
    "            TokenTree::Group(tt) => Display::fmt(tt, f),",
    "            TokenTree::Ident(tt) => Display::fmt(tt, f),",
    "            TokenTree::Punct(tt) => {",
    "                joint = tt.spacing() == Spacing::Joint;",
    "                Display::fmt(tt, f)",
    "            }",
    "            TokenTree::Literal(tt) => Display::fmt(tt, f),",
    "        }?;",
    "    }",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 26,
    "contra": 12,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Literal(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        28,
        37,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Literal(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        28,
        37,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        27,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        27,
        33,
        34,
        35,
        36,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        26,
        31,
        32,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        26,
        31,
        32,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        25,
        29,
        30,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        22,
        23,
        25,
        29,
        30,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Err/None",
          "line": 219,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        20,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Literal(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        28,
        37,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Literal(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        28,
        37,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        27,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        27,
        33,
        34,
        35,
        36,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        26,
        31,
        32,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        26,
        31,
        32,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        25,
        29,
        30,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "true",
          "line": 218,
          "bound": null
        },
        {
          "cond": "joint",
          "norm": null,
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "write!(f, \" \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 219,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        25,
        29,
        30,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Literal(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        28,
        37,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Literal(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        28,
        37,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        27,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Punct(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        27,
        33,
        34,
        35,
        36,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        26,
        31,
        32,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Ident(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        26,
        31,
        32,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        25,
        29,
        30,
        38,
        39,
        41,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "i != 0",
          "norm": "0 != i",
          "value": "false",
          "line": 218,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "tt matches TokenTree::Group(tt)",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "match tt {\n                TokenTree::Group(tt) => Display::fmt(tt, f),\n                TokenTree::Ident(tt) => Display::fmt(tt, f),\n                TokenTree::Punct(tt) => {\n                    joint = tt.spacing() == Spacing::Joint;\n                    Display::fmt(tt, f)\n                }\n                TokenTree::Literal(tt) => Display::fmt(tt, f),\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        },
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        21,
        22,
        23,
        25,
        29,
        30,
        38,
        39,
        42,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "(i, tt) in self.inner.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        46
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}