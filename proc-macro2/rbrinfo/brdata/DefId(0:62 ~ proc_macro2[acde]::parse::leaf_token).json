{
  "name": "proc_macro2::parse::leaf_token",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": false,
  "loc": "src/parse.rs:266:1:281:2",
  "doc": "",
  "code": [
    "fn leaf_token(input: Cursor) -> PResult<TokenTree> {",
    "    if let Ok((input, l)) = literal(input) {",
    "        // must be parsed before ident",
    "        Ok((input, TokenTree::Literal(crate::Literal::_new_fallback(l))))",
    "    } else if let Ok((input, p)) = punct(input) {",
    "        Ok((input, TokenTree::Punct(p)))",
    "    } else if let Ok((input, i)) = ident(input) {",
    "        Ok((input, TokenTree::Ident(i)))",
    "    } else if input.starts_with(ERROR) {",
    "        let rest = input.advance(ERROR.len());",
    "        let repr = crate::Literal::_new_fallback(Literal::_new(ERROR.to_owned()));",
    "        Ok((rest, TokenTree::Literal(repr)))",
    "    } else {",
    "        Err(Reject)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok((input, l)) = literal(input)",
          "norm": null,
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "let Ok((input, p)) = punct(input)",
          "norm": null,
          "value": "true",
          "line": 270,
          "bound": null
        },
        {
          "cond": "let Ok((input, i)) = ident(input)",
          "norm": null,
          "value": "true",
          "line": 272,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": "Ok((rest, TokenTree::Literal(repr)))",
      "path": [
        0,
        1,
        8,
        10,
        15,
        16,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok((input, l)) = literal(input)",
          "norm": null,
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "let Ok((input, p)) = punct(input)",
          "norm": null,
          "value": "true",
          "line": 270,
          "bound": null
        },
        {
          "cond": "let Ok((input, i)) = ident(input)",
          "norm": null,
          "value": "true",
          "line": 272,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": "Err(Reject)",
      "path": [
        0,
        1,
        8,
        10,
        15,
        16,
        22,
        24,
        35,
        36,
        37,
        38,
        39,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Ok((input, l)) = literal(input)",
          "norm": null,
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "let Ok((input, p)) = punct(input)",
          "norm": null,
          "value": "true",
          "line": 270,
          "bound": null
        },
        {
          "cond": "let Ok((input, i)) = ident(input)",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        }
      ],
      "ret": "Ok((input, TokenTree::Ident(i)))",
      "path": [
        0,
        1,
        8,
        10,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        37,
        38,
        39,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Ok((input, l)) = literal(input)",
          "norm": null,
          "value": "true",
          "line": 267,
          "bound": null
        },
        {
          "cond": "let Ok((input, p)) = punct(input)",
          "norm": null,
          "value": "false",
          "line": 270,
          "bound": null
        }
      ],
      "ret": "Ok((input, TokenTree::Punct(p)))",
      "path": [
        0,
        1,
        8,
        10,
        11,
        12,
        13,
        14,
        39,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Ok((input, l)) = literal(input)",
          "norm": null,
          "value": "false",
          "line": 267,
          "bound": null
        }
      ],
      "ret": "Ok((input, TokenTree::Literal(crate::Literal::_new_fallback(l))))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}