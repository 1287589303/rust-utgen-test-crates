{
  "name": "proc_macro2::parse::doc_comment",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": false,
  "loc": "src/parse.rs:909:1:955:2",
  "doc": "",
  "code": [
    "fn doc_comment<'a>(input: Cursor<'a>, trees: &mut TokenStreamBuilder) -> PResult<'a, ()> {",
    "    #[cfg(span_locations)]",
    "    let lo = input.off;",
    "    let (rest, (comment, inner)) = doc_comment_contents(input)?;",
    "    let fallback_span = Span {",
    "        #[cfg(span_locations)]",
    "        lo,",
    "        #[cfg(span_locations)]",
    "        hi: rest.off,",
    "    };",
    "    let span = crate::Span::_new_fallback(fallback_span);",
    "",
    "    let mut scan_for_bare_cr = comment;",
    "    while let Some(cr) = scan_for_bare_cr.find('\\r') {",
    "        let rest = &scan_for_bare_cr[cr + 1..];",
    "        if !rest.starts_with('\\n') {",
    "            return Err(Reject);",
    "        }",
    "        scan_for_bare_cr = rest;",
    "    }",
    "",
    "    let mut pound = Punct::new('#', Spacing::Alone);",
    "    pound.set_span(span);",
    "    trees.push_token_from_parser(TokenTree::Punct(pound));",
    "",
    "    if inner {",
    "        let mut bang = Punct::new('!', Spacing::Alone);",
    "        bang.set_span(span);",
    "        trees.push_token_from_parser(TokenTree::Punct(bang));",
    "    }",
    "",
    "    let doc_ident = crate::Ident::_new_fallback(Ident::new_unchecked(\"doc\", fallback_span));",
    "    let mut equal = Punct::new('=', Spacing::Alone);",
    "    equal.set_span(span);",
    "    let mut literal = crate::Literal::_new_fallback(Literal::string(comment));",
    "    literal.set_span(span);",
    "    let mut bracketed = TokenStreamBuilder::with_capacity(3);",
    "    bracketed.push_token_from_parser(TokenTree::Ident(doc_ident));",
    "    bracketed.push_token_from_parser(TokenTree::Punct(equal));",
    "    bracketed.push_token_from_parser(TokenTree::Literal(literal));",
    "    let group = Group::new(Delimiter::Bracket, bracketed.build());",
    "    let mut group = crate::Group::_new_fallback(group);",
    "    group.set_span(span);",
    "    trees.push_token_from_parser(TokenTree::Group(group));",
    "",
    "    Ok((rest, ()))",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "doc_comment_contents(input)?",
          "norm": null,
          "value": "Err/None",
          "line": 912,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "doc_comment_contents(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 912,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "inner",
          "norm": null,
          "value": "true",
          "line": 934,
          "bound": null
        }
      ],
      "ret": "Ok((rest, ()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "doc_comment_contents(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 912,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "inner",
          "norm": null,
          "value": "false",
          "line": 934,
          "bound": null
        }
      ],
      "ret": "Ok((rest, ()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "doc_comment_contents(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 912,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "rest.starts_with('\\n')",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "inner",
          "norm": null,
          "value": "true",
          "line": 934,
          "bound": null
        }
      ],
      "ret": "Ok((rest, ()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        9,
        10,
        11,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "doc_comment_contents(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 912,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "rest.starts_with('\\n')",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "inner",
          "norm": null,
          "value": "false",
          "line": 934,
          "bound": null
        }
      ],
      "ret": "Ok((rest, ()))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        9,
        10,
        11,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "doc_comment_contents(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 912,
          "bound": null
        },
        {
          "cond": "let Some(cr) = scan_for_bare_cr.find('\\r')",
          "norm": null,
          "value": "true",
          "line": 922,
          "bound": null
        },
        {
          "cond": "rest.starts_with('\\n')",
          "norm": null,
          "value": "false",
          "line": 924,
          "bound": null
        }
      ],
      "ret": "Err(Reject)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        53
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}