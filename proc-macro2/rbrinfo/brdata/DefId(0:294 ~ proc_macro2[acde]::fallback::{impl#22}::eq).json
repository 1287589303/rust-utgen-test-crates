{
  "name": "proc_macro2::fallback::{impl#22}::eq",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:898:5:905:6",
  "doc": "",
  "code": [
    "fn eq(&self, other: &T) -> bool {",
    "    let other = other.as_ref();",
    "    if self.raw {",
    "        other.starts_with(\"r#\") && *self.sym == other[2..]",
    "    } else {",
    "        *self.sym == *other",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.raw",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "other.starts_with(\"r#\")",
          "norm": null,
          "value": "true",
          "line": 901,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.raw",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "other.starts_with(\"r#\")",
          "norm": null,
          "value": "false",
          "line": 901,
          "bound": null
        }
      ],
      "ret": "other.starts_with(\"r#\") && *self.sym == other[2..]",
      "path": [
        0,
        1,
        2,
        3,
        5,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.raw",
          "norm": null,
          "value": "false",
          "line": 900,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}