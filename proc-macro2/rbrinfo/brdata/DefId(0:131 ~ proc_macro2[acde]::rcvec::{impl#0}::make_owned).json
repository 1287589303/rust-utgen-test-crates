{
  "name": "proc_macro2::rcvec::{impl#0}::make_owned",
  "mod_info": {
    "name": "rcvec",
    "loc": "src/lib.rs:143:1:143:11"
  },
  "visible": true,
  "loc": "src/rcvec.rs:51:5:61:6",
  "doc": "",
  "code": [
    "pub(crate) fn make_owned(mut self) -> RcVecBuilder<T>",
    "where",
    "    T: Clone,",
    "{",
    "    let vec = if let Some(owned) = Rc::get_mut(&mut self.inner) {",
    "        mem::take(owned)",
    "    } else {",
    "        Vec::clone(&self.inner)",
    "    };",
    "    RcVecBuilder { inner: vec }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(owned) = Rc::get_mut(&mut self.inner)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "RcVecBuilder { inner: vec }",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(owned) = Rc::get_mut(&mut self.inner)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "RcVecBuilder { inner: vec }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}