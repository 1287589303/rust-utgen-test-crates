{
  "name": "proc_macro2::parse::token_stream",
  "mod_info": {
    "name": "parse",
    "loc": "src/lib.rs:142:1:142:11"
  },
  "visible": true,
  "loc": "src/parse.rs:168:1:251:2",
  "doc": "",
  "code": [
    "pub(crate) fn token_stream(mut input: Cursor) -> Result<TokenStream, LexError> {",
    "    let mut trees = TokenStreamBuilder::new();",
    "    let mut stack = Vec::new();",
    "",
    "    loop {",
    "        input = skip_whitespace(input);",
    "",
    "        if let Ok((rest, ())) = doc_comment(input, &mut trees) {",
    "            input = rest;",
    "            continue;",
    "        }",
    "",
    "        #[cfg(span_locations)]",
    "        let lo = input.off;",
    "",
    "        let first = match input.bytes().next() {",
    "            Some(first) => first,",
    "            None => match stack.last() {",
    "                None => return Ok(trees.build()),",
    "                #[cfg(span_locations)]",
    "                Some((lo, _frame)) => {",
    "                    return Err(LexError {",
    "                        span: Span { lo: *lo, hi: *lo },",
    "                    })",
    "                }",
    "                #[cfg(not(span_locations))]",
    "                Some(_frame) => return Err(LexError { span: Span {} }),",
    "            },",
    "        };",
    "",
    "        if let Some(open_delimiter) = match first {",
    "            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),",
    "            b'[' => Some(Delimiter::Bracket),",
    "            b'{' => Some(Delimiter::Brace),",
    "            _ => None,",
    "        } {",
    "            input = input.advance(1);",
    "            let frame = (open_delimiter, trees);",
    "            #[cfg(span_locations)]",
    "            let frame = (lo, frame);",
    "            stack.push(frame);",
    "            trees = TokenStreamBuilder::new();",
    "        } else if let Some(close_delimiter) = match first {",
    "            b')' => Some(Delimiter::Parenthesis),",
    "            b']' => Some(Delimiter::Bracket),",
    "            b'}' => Some(Delimiter::Brace),",
    "            _ => None,",
    "        } {",
    "            let frame = match stack.pop() {",
    "                Some(frame) => frame,",
    "                None => return Err(lex_error(input)),",
    "            };",
    "            #[cfg(span_locations)]",
    "            let (lo, frame) = frame;",
    "            let (open_delimiter, outer) = frame;",
    "            if open_delimiter != close_delimiter {",
    "                return Err(lex_error(input));",
    "            }",
    "            input = input.advance(1);",
    "            let mut g = Group::new(open_delimiter, trees.build());",
    "            g.set_span(Span {",
    "                #[cfg(span_locations)]",
    "                lo,",
    "                #[cfg(span_locations)]",
    "                hi: input.off,",
    "            });",
    "            trees = outer;",
    "            trees.push_token_from_parser(TokenTree::Group(crate::Group::_new_fallback(g)));",
    "        } else {",
    "            let (rest, mut tt) = match leaf_token(input) {",
    "                Ok((rest, tt)) => (rest, tt),",
    "                Err(Reject) => return Err(lex_error(input)),",
    "            };",
    "            tt.set_span(crate::Span::_new_fallback(Span {",
    "                #[cfg(span_locations)]",
    "                lo,",
    "                #[cfg(span_locations)]",
    "                hi: rest.off,",
    "            }));",
    "            trees.push_token_from_parser(tt);",
    "            input = rest;",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 124,
    "contra": 62,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches None",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "stack.last() matches Some(_frame)",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        }
      ],
      "ret": "Err(LexError { span: Span {} })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        14,
        16,
        17,
        20,
        103,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches None",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "stack.last() matches None",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        },
        {
          "cond": "stack.last() matches None",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        }
      ],
      "ret": "Ok(trees.build())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        14,
        16,
        17,
        19,
        21,
        22,
        23,
        103,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        27,
        33,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        26,
        32,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        30,
        24,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        46,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches _",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        46,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        49,
        52,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "first matches b'}'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        49,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        48,
        51,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "first matches b']'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        48,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "leaf_token(input) matches Err(Reject)",
          "norm": null,
          "value": "true",
          "line": 237,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        47,
        50,
        53,
        81,
        82,
        85,
        89,
        98,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(frame)",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "open_delimiter != close_delimiter",
          "norm": "close_delimiter != open_delimiter",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        63,
        64,
        65,
        66,
        99,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches Some(first)",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "input.starts_with(ERROR)",
          "norm": null,
          "value": "false",
          "line": 199,
          "bound": null
        },
        {
          "cond": "let Some(open_delimiter) = match first {\n            b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),\n            b'[' => Some(Delimiter::Bracket),\n            b'{' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 198,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "first matches b')'",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Some(close_delimiter) = match first {\n            b')' => Some(Delimiter::Parenthesis),\n            b']' => Some(Delimiter::Bracket),\n            b'}' => Some(Delimiter::Brace),\n            _ => None,\n        }",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Err(lex_error(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        25,
        28,
        29,
        31,
        34,
        45,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches None",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "stack.last() matches Some(_frame)",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        }
      ],
      "ret": "Err(LexError { span: Span {} })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        14,
        16,
        17,
        20,
        103,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "false",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Ok((rest, ())) = doc_comment(input, &mut trees)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "input.bytes().next() matches None",
          "norm": null,
          "value": "true",
          "line": 183,
          "bound": null
        },
        {
          "cond": "stack.last() matches None",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        },
        {
          "cond": "stack.last() matches None",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        }
      ],
      "ret": "Ok(trees.build())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        14,
        16,
        17,
        19,
        21,
        22,
        23,
        103,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}