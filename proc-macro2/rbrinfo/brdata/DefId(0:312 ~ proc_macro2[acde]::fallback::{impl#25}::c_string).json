{
  "name": "proc_macro2::fallback::{impl#25}::c_string",
  "mod_info": {
    "name": "fallback",
    "loc": "src/lib.rs:151:1:151:18"
  },
  "visible": true,
  "loc": "src/fallback.rs:1119:5:1145:6",
  "doc": "",
  "code": [
    "pub(crate) fn c_string(string: &CStr) -> Literal {",
    "    let mut repr = \"c\\\"\".to_string();",
    "    let mut bytes = string.to_bytes();",
    "    while !bytes.is_empty() {",
    "        let (valid, invalid) = match str::from_utf8(bytes) {",
    "            Ok(all_valid) => {",
    "                bytes = b\"\";",
    "                (all_valid, bytes)",
    "            }",
    "            Err(utf8_error) => {",
    "                let (valid, rest) = bytes.split_at(utf8_error.valid_up_to());",
    "                let valid = str::from_utf8(valid).unwrap();",
    "                let invalid = utf8_error",
    "                    .error_len()",
    "                    .map_or(rest, |error_len| &rest[..error_len]);",
    "                bytes = &bytes[valid.len() + invalid.len()..];",
    "                (valid, invalid)",
    "            }",
    "        };",
    "        escape_utf8(valid, &mut repr);",
    "        for &byte in invalid {",
    "            let _ = write!(repr, r\"\\x{:02X}\", byte);",
    "        }",
    "    }",
    "    repr.push('\"');",
    "    Literal::_new(repr)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 4,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Err(utf8_error)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "&byte in invalid",
          "norm": null,
          "value": "true",
          "line": 1139,
          "bound": null
        },
        {
          "cond": "&byte in invalid",
          "norm": null,
          "value": "false",
          "line": 1139,
          "bound": null
        },
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        31,
        33,
        34,
        35,
        36,
        37,
        26,
        27,
        28,
        30,
        32,
        3,
        4,
        5,
        6,
        38,
        39,
        40
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Err(utf8_error)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "&byte in invalid",
          "norm": null,
          "value": "false",
          "line": 1139,
          "bound": null
        },
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        3,
        4,
        5,
        6,
        38,
        39,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Ok(all_valid)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Ok(all_valid)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "&byte in invalid",
          "norm": null,
          "value": "true",
          "line": 1139,
          "bound": null
        },
        {
          "cond": "&byte in invalid",
          "norm": null,
          "value": "false",
          "line": 1139,
          "bound": null
        },
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        10,
        12,
        23,
        24,
        25,
        26,
        27,
        28,
        31,
        33,
        34,
        35,
        36,
        37,
        26,
        27,
        28,
        30,
        32,
        3,
        4,
        5,
        6,
        38,
        39,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Ok(all_valid)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Ok(all_valid)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "&byte in invalid",
          "norm": null,
          "value": "false",
          "line": 1139,
          "bound": null
        },
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        10,
        12,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        3,
        4,
        5,
        6,
        38,
        39,
        40
      ],
      "may_contra": true,
      "min_set": false
    }
  ]
}