{
  "name": "proc_macro2::{impl#40}::f64_unsuffixed",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1384:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1195:5:1198:6",
  "doc": "/// Creates a new unsuffixed floating-point literal.\n///\n/// This constructor is similar to those like `Literal::i8_unsuffixed` where\n/// the float's value is emitted directly into the token but no suffix is\n/// used, so it may be inferred to be a `f64` later in the compiler.\n/// Literals created from negative numbers may not survive round-trips\n/// through `TokenStream` or strings and may be broken into two tokens (`-`\n/// and positive literal).\n///\n/// # Panics\n///\n/// This function requires that the specified float is finite, for example\n/// if it is infinity or NaN this function will panic.\n",
  "code": [
    "pub fn f64_unsuffixed(f: f64) -> Literal {",
    "    assert!(f.is_finite());",
    "    Literal::_new(imp::Literal::f64_unsuffixed(f))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "f.is_finite()",
          "norm": null,
          "value": "true",
          "line": 1196,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "f.is_finite()",
          "norm": null,
          "value": "false",
          "line": 1196,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}