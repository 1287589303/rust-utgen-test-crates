bb0
  0: StorageLive(_2)
    SourceInfo(src/parse.rs:126:5-128:6)
  1: StorageLive(_3)
    SourceInfo(src/parse.rs:126:9-126:32)
  2: StorageLive(_4)
    SourceInfo(src/parse.rs:126:9-126:14)
  3: _4 = &_1
    SourceInfo(src/parse.rs:126:9-126:14)
  4: StorageLive(_5)
    SourceInfo(src/parse.rs:126:27-126:31)
  5: StorageLive(_6)
    SourceInfo(src/parse.rs:126:27-126:31)
  6: _6 = const "/*"
    SourceInfo(src/parse.rs:126:27-126:31)
  7: _5 = &(*_6)
    SourceInfo(src/parse.rs:126:27-126:31)
  Terminator {
      source_info: SourceInfo(src/parse.rs:126:9-126:32)
      kind: _3 = parse::Cursor::<'_>::starts_with(move _4, move _5) -> [return: bb1, unwind: bb41]
  }
  preds []
  succs [bb1, bb41]

bb1
  Terminator {
      source_info: SourceInfo(src/parse.rs:126:9-126:32)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(src/parse.rs:126:31-126:32)
  1: StorageDead(_4)
    SourceInfo(src/parse.rs:126:31-126:32)
  2: StorageDead(_6)
    SourceInfo(src/parse.rs:126:31-126:32)
  3: _2 = const ()
    SourceInfo(src/parse.rs:128:6-128:6)
  4: StorageDead(_3)
    SourceInfo(src/parse.rs:128:5-128:6)
  5: StorageDead(_2)
    SourceInfo(src/parse.rs:128:5-128:6)
  6: StorageLive(_9)
    SourceInfo(src/parse.rs:130:9-130:18)
  7: _9 = const 0_usize
    SourceInfo(src/parse.rs:130:21-130:27)
  8: FakeRead(ForLet(None), _9)
    SourceInfo(src/parse.rs:130:9-130:18)
  9: StorageLive(_10)
    SourceInfo(src/parse.rs:131:9-131:14)
  10: StorageLive(_11)
    SourceInfo(src/parse.rs:131:17-131:22)
  11: _11 = &_1
    SourceInfo(src/parse.rs:131:17-131:22)
  Terminator {
      source_info: SourceInfo(src/parse.rs:131:17-131:33)
      kind: _10 = parse::Cursor::<'_>::as_bytes(move _11) -> [return: bb4, unwind: bb41]
  }
  preds [bb1]
  succs [bb4, bb41]

bb3
  0: StorageDead(_5)
    SourceInfo(src/parse.rs:126:31-126:32)
  1: StorageDead(_4)
    SourceInfo(src/parse.rs:126:31-126:32)
  2: StorageDead(_6)
    SourceInfo(src/parse.rs:126:31-126:32)
  3: StorageLive(_8)
    SourceInfo(src/parse.rs:127:20-127:26)
  4: _8 = parse::Reject
    SourceInfo(src/parse.rs:127:20-127:26)
  5: _0 = std::result::Result::<(parse::Cursor<'_>, &str), parse::Reject>::Err(move _8)
    SourceInfo(src/parse.rs:127:16-127:27)
  6: StorageDead(_8)
    SourceInfo(src/parse.rs:127:26-127:27)
  7: StorageDead(_3)
    SourceInfo(src/parse.rs:128:5-128:6)
  8: StorageDead(_2)
    SourceInfo(src/parse.rs:128:5-128:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb1]
  succs [bb40]

bb4
  0: StorageDead(_11)
    SourceInfo(src/parse.rs:131:32-131:33)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(src/parse.rs:131:9-131:14)
  2: StorageLive(_12)
    SourceInfo(src/parse.rs:132:9-132:14)
  3: _12 = const 0_usize
    SourceInfo(src/parse.rs:132:17-132:23)
  4: FakeRead(ForLet(None), _12)
    SourceInfo(src/parse.rs:132:9-132:14)
  5: StorageLive(_13)
    SourceInfo(src/parse.rs:133:9-133:14)
  6: StorageLive(_14)
    SourceInfo(src/parse.rs:133:17-133:28)
  7: StorageLive(_15)
    SourceInfo(src/parse.rs:133:17-133:22)
  8: _15 = &(*_10)
    SourceInfo(src/parse.rs:133:17-133:22)
  Terminator {
      source_info: SourceInfo(src/parse.rs:133:17-133:28)
      kind: _14 = core::slice::<impl [u8]>::len(move _15) -> [return: bb5, unwind: bb41]
  }
  preds [bb2]
  succs [bb5, bb41]

bb5
  0: StorageDead(_15)
    SourceInfo(src/parse.rs:133:27-133:28)
  1: _16 = SubWithOverflow(_14, const 1_usize)
    SourceInfo(src/parse.rs:133:17-133:32)
  Terminator {
      source_info: SourceInfo(src/parse.rs:133:17-133:32)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, const 1_usize) -> [success: bb6, unwind: bb41]
  }
  preds [bb4]
  succs [bb6, bb41]

bb6
  0: _13 = move (_16.0: usize)
    SourceInfo(src/parse.rs:133:17-133:32)
  1: StorageDead(_14)
    SourceInfo(src/parse.rs:133:31-133:32)
  2: FakeRead(ForLet(None), _13)
    SourceInfo(src/parse.rs:133:9-133:14)
  3: StorageLive(_17)
    SourceInfo(src/parse.rs:135:5-147:6)
  Terminator {
      source_info: SourceInfo(src/parse.rs:135:5-147:6)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(src/parse.rs:135:5-147:6)
      kind: falseUnwind -> [real: bb8, unwind: bb41]
  }
  preds [bb6, bb38]
  succs [bb8, bb41]

bb8
  0: StorageLive(_19)
    SourceInfo(src/parse.rs:135:11-135:20)
  1: StorageLive(_20)
    SourceInfo(src/parse.rs:135:11-135:12)
  2: _20 = _12
    SourceInfo(src/parse.rs:135:11-135:12)
  3: StorageLive(_21)
    SourceInfo(src/parse.rs:135:15-135:20)
  4: _21 = _13
    SourceInfo(src/parse.rs:135:15-135:20)
  5: _19 = Lt(move _20, move _21)
    SourceInfo(src/parse.rs:135:11-135:20)
  Terminator {
      source_info: SourceInfo(src/parse.rs:135:11-135:20)
      kind: switchInt(move _19) -> [0: bb39, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb39]

bb9
  0: StorageDead(_21)
    SourceInfo(src/parse.rs:135:19-135:20)
  1: StorageDead(_20)
    SourceInfo(src/parse.rs:135:19-135:20)
  2: StorageLive(_22)
    SourceInfo(src/parse.rs:136:9-145:10)
  3: StorageLive(_23)
    SourceInfo(src/parse.rs:136:12-136:28)
  4: StorageLive(_24)
    SourceInfo(src/parse.rs:136:12-136:20)
  5: StorageLive(_25)
    SourceInfo(src/parse.rs:136:18-136:19)
  6: _25 = _12
    SourceInfo(src/parse.rs:136:18-136:19)
  7: _26 = Len((*_10))
    SourceInfo(src/parse.rs:136:12-136:20)
  8: _27 = Lt(_25, _26)
    SourceInfo(src/parse.rs:136:12-136:20)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:12-136:20)
      kind: assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb10, unwind: bb41]
  }
  preds [bb8]
  succs [bb10, bb41]

bb10
  0: _24 = (*_10)[_25]
    SourceInfo(src/parse.rs:136:12-136:20)
  1: _23 = Eq(move _24, const 47_u8)
    SourceInfo(src/parse.rs:136:12-136:28)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:12-136:28)
      kind: switchInt(move _23) -> [0: bb18, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb18]

bb11
  0: StorageDead(_25)
    SourceInfo(src/parse.rs:136:27-136:28)
  1: StorageDead(_24)
    SourceInfo(src/parse.rs:136:27-136:28)
  2: StorageLive(_28)
    SourceInfo(src/parse.rs:136:32-136:52)
  3: StorageLive(_29)
    SourceInfo(src/parse.rs:136:32-136:44)
  4: StorageLive(_30)
    SourceInfo(src/parse.rs:136:38-136:43)
  5: StorageLive(_31)
    SourceInfo(src/parse.rs:136:38-136:39)
  6: _31 = _12
    SourceInfo(src/parse.rs:136:38-136:39)
  7: _32 = AddWithOverflow(_31, const 1_usize)
    SourceInfo(src/parse.rs:136:38-136:43)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:38-136:43)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _31, const 1_usize) -> [success: bb12, unwind: bb41]
  }
  preds [bb10]
  succs [bb12, bb41]

bb12
  0: _30 = move (_32.0: usize)
    SourceInfo(src/parse.rs:136:38-136:43)
  1: StorageDead(_31)
    SourceInfo(src/parse.rs:136:42-136:43)
  2: _33 = Len((*_10))
    SourceInfo(src/parse.rs:136:32-136:44)
  3: _34 = Lt(_30, _33)
    SourceInfo(src/parse.rs:136:32-136:44)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:32-136:44)
      kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _30) -> [success: bb13, unwind: bb41]
  }
  preds [bb11]
  succs [bb13, bb41]

bb13
  0: _29 = (*_10)[_30]
    SourceInfo(src/parse.rs:136:32-136:44)
  1: _28 = Eq(move _29, const 42_u8)
    SourceInfo(src/parse.rs:136:32-136:52)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:32-136:52)
      kind: switchInt(move _28) -> [0: bb17, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb17]

bb14
  0: StorageDead(_30)
    SourceInfo(src/parse.rs:136:51-136:52)
  1: StorageDead(_29)
    SourceInfo(src/parse.rs:136:51-136:52)
  2: _35 = AddWithOverflow(_9, const 1_usize)
    SourceInfo(src/parse.rs:137:13-137:23)
  Terminator {
      source_info: SourceInfo(src/parse.rs:137:13-137:23)
      kind: assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", _9, const 1_usize) -> [success: bb15, unwind: bb41]
  }
  preds [bb13]
  succs [bb15, bb41]

bb15
  0: _9 = move (_35.0: usize)
    SourceInfo(src/parse.rs:137:13-137:23)
  1: _36 = AddWithOverflow(_12, const 1_usize)
    SourceInfo(src/parse.rs:138:13-138:19)
  Terminator {
      source_info: SourceInfo(src/parse.rs:138:13-138:19)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_usize) -> [success: bb16, unwind: bb41]
  }
  preds [bb14]
  succs [bb16, bb41]

bb16
  0: _12 = move (_36.0: usize)
    SourceInfo(src/parse.rs:138:13-138:19)
  1: _22 = const ()
    SourceInfo(src/parse.rs:136:53-139:10)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:9-145:10)
      kind: goto -> bb37
  }
  preds [bb15]
  succs [bb37]

bb17
  0: StorageDead(_30)
    SourceInfo(src/parse.rs:136:51-136:52)
  1: StorageDead(_29)
    SourceInfo(src/parse.rs:136:51-136:52)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb13]
  succs [bb19]

bb18
  0: StorageDead(_25)
    SourceInfo(src/parse.rs:136:27-136:28)
  1: StorageDead(_24)
    SourceInfo(src/parse.rs:136:27-136:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb10]
  succs [bb19]

bb19
  0: StorageLive(_37)
    SourceInfo(src/parse.rs:139:19-139:35)
  1: StorageLive(_38)
    SourceInfo(src/parse.rs:139:19-139:27)
  2: StorageLive(_39)
    SourceInfo(src/parse.rs:139:25-139:26)
  3: _39 = _12
    SourceInfo(src/parse.rs:139:25-139:26)
  4: _40 = Len((*_10))
    SourceInfo(src/parse.rs:139:19-139:27)
  5: _41 = Lt(_39, _40)
    SourceInfo(src/parse.rs:139:19-139:27)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:19-139:27)
      kind: assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> [success: bb20, unwind: bb41]
  }
  preds [bb17, bb18]
  succs [bb20, bb41]

bb20
  0: _38 = (*_10)[_39]
    SourceInfo(src/parse.rs:139:19-139:27)
  1: _37 = Eq(move _38, const 42_u8)
    SourceInfo(src/parse.rs:139:19-139:35)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:19-139:35)
      kind: switchInt(move _37) -> [0: bb34, otherwise: bb21]
  }
  preds [bb19]
  succs [bb21, bb34]

bb21
  0: StorageDead(_39)
    SourceInfo(src/parse.rs:139:34-139:35)
  1: StorageDead(_38)
    SourceInfo(src/parse.rs:139:34-139:35)
  2: StorageLive(_42)
    SourceInfo(src/parse.rs:139:39-139:59)
  3: StorageLive(_43)
    SourceInfo(src/parse.rs:139:39-139:51)
  4: StorageLive(_44)
    SourceInfo(src/parse.rs:139:45-139:50)
  5: StorageLive(_45)
    SourceInfo(src/parse.rs:139:45-139:46)
  6: _45 = _12
    SourceInfo(src/parse.rs:139:45-139:46)
  7: _46 = AddWithOverflow(_45, const 1_usize)
    SourceInfo(src/parse.rs:139:45-139:50)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:45-139:50)
      kind: assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 1_usize) -> [success: bb22, unwind: bb41]
  }
  preds [bb20]
  succs [bb22, bb41]

bb22
  0: _44 = move (_46.0: usize)
    SourceInfo(src/parse.rs:139:45-139:50)
  1: StorageDead(_45)
    SourceInfo(src/parse.rs:139:49-139:50)
  2: _47 = Len((*_10))
    SourceInfo(src/parse.rs:139:39-139:51)
  3: _48 = Lt(_44, _47)
    SourceInfo(src/parse.rs:139:39-139:51)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:39-139:51)
      kind: assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _44) -> [success: bb23, unwind: bb41]
  }
  preds [bb21]
  succs [bb23, bb41]

bb23
  0: _43 = (*_10)[_44]
    SourceInfo(src/parse.rs:139:39-139:51)
  1: _42 = Eq(move _43, const 47_u8)
    SourceInfo(src/parse.rs:139:39-139:59)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:39-139:59)
      kind: switchInt(move _42) -> [0: bb33, otherwise: bb24]
  }
  preds [bb22]
  succs [bb24, bb33]

bb24
  0: StorageDead(_44)
    SourceInfo(src/parse.rs:139:58-139:59)
  1: StorageDead(_43)
    SourceInfo(src/parse.rs:139:58-139:59)
  2: _49 = SubWithOverflow(_9, const 1_usize)
    SourceInfo(src/parse.rs:140:13-140:23)
  Terminator {
      source_info: SourceInfo(src/parse.rs:140:13-140:23)
      kind: assert(!move (_49.1: bool), "attempt to compute `{} - {}`, which would overflow", _9, const 1_usize) -> [success: bb25, unwind: bb41]
  }
  preds [bb23]
  succs [bb25, bb41]

bb25
  0: _9 = move (_49.0: usize)
    SourceInfo(src/parse.rs:140:13-140:23)
  1: StorageLive(_50)
    SourceInfo(src/parse.rs:141:13-143:14)
  2: StorageLive(_51)
    SourceInfo(src/parse.rs:141:16-141:26)
  3: StorageLive(_52)
    SourceInfo(src/parse.rs:141:16-141:21)
  4: _52 = _9
    SourceInfo(src/parse.rs:141:16-141:21)
  5: _51 = Eq(move _52, const 0_usize)
    SourceInfo(src/parse.rs:141:16-141:26)
  Terminator {
      source_info: SourceInfo(src/parse.rs:141:16-141:26)
      kind: switchInt(move _51) -> [0: bb31, otherwise: bb26]
  }
  preds [bb24]
  succs [bb26, bb31]

bb26
  0: StorageDead(_52)
    SourceInfo(src/parse.rs:141:25-141:26)
  1: StorageLive(_54)
    SourceInfo(src/parse.rs:142:27-142:71)
  2: StorageLive(_55)
    SourceInfo(src/parse.rs:142:28-142:48)
  3: StorageLive(_56)
    SourceInfo(src/parse.rs:142:28-142:33)
  4: _56 = &_1
    SourceInfo(src/parse.rs:142:28-142:33)
  5: StorageLive(_57)
    SourceInfo(src/parse.rs:142:42-142:47)
  6: StorageLive(_58)
    SourceInfo(src/parse.rs:142:42-142:43)
  7: _58 = _12
    SourceInfo(src/parse.rs:142:42-142:43)
  8: _59 = AddWithOverflow(_58, const 2_usize)
    SourceInfo(src/parse.rs:142:42-142:47)
  Terminator {
      source_info: SourceInfo(src/parse.rs:142:42-142:47)
      kind: assert(!move (_59.1: bool), "attempt to compute `{} + {}`, which would overflow", move _58, const 2_usize) -> [success: bb27, unwind: bb41]
  }
  preds [bb25]
  succs [bb27, bb41]

bb27
  0: _57 = move (_59.0: usize)
    SourceInfo(src/parse.rs:142:42-142:47)
  1: StorageDead(_58)
    SourceInfo(src/parse.rs:142:46-142:47)
  Terminator {
      source_info: SourceInfo(src/parse.rs:142:28-142:48)
      kind: _55 = parse::Cursor::<'_>::advance(move _56, move _57) -> [return: bb28, unwind: bb41]
  }
  preds [bb26]
  succs [bb28, bb41]

bb28
  0: StorageDead(_57)
    SourceInfo(src/parse.rs:142:47-142:48)
  1: StorageDead(_56)
    SourceInfo(src/parse.rs:142:47-142:48)
  2: StorageLive(_60)
    SourceInfo(src/parse.rs:142:50-142:70)
  3: StorageLive(_61)
    SourceInfo(src/parse.rs:142:50-142:70)
  4: StorageLive(_62)
    SourceInfo(src/parse.rs:142:61-142:70)
  5: StorageLive(_63)
    SourceInfo(src/parse.rs:142:51-142:61)
  6: _63 = &(*(_1.0: &str))
    SourceInfo(src/parse.rs:142:51-142:61)
  7: StorageLive(_64)
    SourceInfo(src/parse.rs:142:62-142:69)
  8: StorageLive(_65)
    SourceInfo(src/parse.rs:142:64-142:69)
  9: StorageLive(_66)
    SourceInfo(src/parse.rs:142:64-142:65)
  10: _66 = _12
    SourceInfo(src/parse.rs:142:64-142:65)
  11: _67 = AddWithOverflow(_66, const 2_usize)
    SourceInfo(src/parse.rs:142:64-142:69)
  Terminator {
      source_info: SourceInfo(src/parse.rs:142:64-142:69)
      kind: assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, const 2_usize) -> [success: bb29, unwind: bb41]
  }
  preds [bb27]
  succs [bb29, bb41]

bb29
  0: _65 = move (_67.0: usize)
    SourceInfo(src/parse.rs:142:64-142:69)
  1: StorageDead(_66)
    SourceInfo(src/parse.rs:142:68-142:69)
  2: _64 = std::ops::RangeTo::<usize> { end: move _65 }
    SourceInfo(src/parse.rs:142:62-142:69)
  3: StorageDead(_65)
    SourceInfo(src/parse.rs:142:68-142:69)
  Terminator {
      source_info: SourceInfo(src/parse.rs:142:61-142:70)
      kind: _62 = <str as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _63, move _64) -> [return: bb30, unwind: bb41]
  }
  preds [bb28]
  succs [bb30, bb41]

bb30
  0: StorageDead(_64)
    SourceInfo(src/parse.rs:142:69-142:70)
  1: StorageDead(_63)
    SourceInfo(src/parse.rs:142:69-142:70)
  2: _61 = &(*_62)
    SourceInfo(src/parse.rs:142:50-142:70)
  3: _60 = &(*_61)
    SourceInfo(src/parse.rs:142:50-142:70)
  4: _54 = (move _55, move _60)
    SourceInfo(src/parse.rs:142:27-142:71)
  5: StorageDead(_60)
    SourceInfo(src/parse.rs:142:70-142:71)
  6: StorageDead(_55)
    SourceInfo(src/parse.rs:142:70-142:71)
  7: _0 = std::result::Result::<(parse::Cursor<'_>, &str), parse::Reject>::Ok(move _54)
    SourceInfo(src/parse.rs:142:24-142:72)
  8: StorageDead(_54)
    SourceInfo(src/parse.rs:142:71-142:72)
  9: StorageDead(_62)
    SourceInfo(src/parse.rs:142:72-142:73)
  10: StorageDead(_61)
    SourceInfo(src/parse.rs:142:72-142:73)
  11: StorageDead(_51)
    SourceInfo(src/parse.rs:143:13-143:14)
  12: StorageDead(_50)
    SourceInfo(src/parse.rs:143:13-143:14)
  13: StorageDead(_42)
    SourceInfo(src/parse.rs:145:9-145:10)
  14: StorageDead(_37)
    SourceInfo(src/parse.rs:145:9-145:10)
  15: StorageDead(_28)
    SourceInfo(src/parse.rs:145:9-145:10)
  16: StorageDead(_23)
    SourceInfo(src/parse.rs:145:9-145:10)
  17: StorageDead(_22)
    SourceInfo(src/parse.rs:145:9-145:10)
  18: StorageDead(_19)
    SourceInfo(src/parse.rs:147:5-147:6)
  19: StorageDead(_17)
    SourceInfo(src/parse.rs:147:5-147:6)
  20: StorageDead(_13)
    SourceInfo(src/parse.rs:150:1-150:2)
  21: StorageDead(_12)
    SourceInfo(src/parse.rs:150:1-150:2)
  22: StorageDead(_10)
    SourceInfo(src/parse.rs:150:1-150:2)
  23: StorageDead(_9)
    SourceInfo(src/parse.rs:150:1-150:2)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb29]
  succs [bb40]

bb31
  0: StorageDead(_52)
    SourceInfo(src/parse.rs:141:25-141:26)
  1: _50 = const ()
    SourceInfo(src/parse.rs:143:14-143:14)
  2: StorageDead(_51)
    SourceInfo(src/parse.rs:143:13-143:14)
  3: StorageDead(_50)
    SourceInfo(src/parse.rs:143:13-143:14)
  4: _68 = AddWithOverflow(_12, const 1_usize)
    SourceInfo(src/parse.rs:144:13-144:19)
  Terminator {
      source_info: SourceInfo(src/parse.rs:144:13-144:19)
      kind: assert(!move (_68.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_usize) -> [success: bb32, unwind: bb41]
  }
  preds [bb25]
  succs [bb32, bb41]

bb32
  0: _12 = move (_68.0: usize)
    SourceInfo(src/parse.rs:144:13-144:19)
  1: _22 = const ()
    SourceInfo(src/parse.rs:139:60-145:10)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:16-145:10)
      kind: goto -> bb36
  }
  preds [bb31]
  succs [bb36]

bb33
  0: StorageDead(_44)
    SourceInfo(src/parse.rs:139:58-139:59)
  1: StorageDead(_43)
    SourceInfo(src/parse.rs:139:58-139:59)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb35
  }
  preds [bb23]
  succs [bb35]

bb34
  0: StorageDead(_39)
    SourceInfo(src/parse.rs:139:34-139:35)
  1: StorageDead(_38)
    SourceInfo(src/parse.rs:139:34-139:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb35
  }
  preds [bb20]
  succs [bb35]

bb35
  0: _22 = const ()
    SourceInfo(src/parse.rs:145:10-145:10)
  Terminator {
      source_info: SourceInfo(src/parse.rs:139:16-145:10)
      kind: goto -> bb36
  }
  preds [bb33, bb34]
  succs [bb36]

bb36
  0: StorageDead(_42)
    SourceInfo(src/parse.rs:145:9-145:10)
  1: StorageDead(_37)
    SourceInfo(src/parse.rs:145:9-145:10)
  Terminator {
      source_info: SourceInfo(src/parse.rs:136:9-145:10)
      kind: goto -> bb37
  }
  preds [bb32, bb35]
  succs [bb37]

bb37
  0: StorageDead(_28)
    SourceInfo(src/parse.rs:145:9-145:10)
  1: StorageDead(_23)
    SourceInfo(src/parse.rs:145:9-145:10)
  2: StorageDead(_22)
    SourceInfo(src/parse.rs:145:9-145:10)
  3: _69 = AddWithOverflow(_12, const 1_usize)
    SourceInfo(src/parse.rs:146:9-146:15)
  Terminator {
      source_info: SourceInfo(src/parse.rs:146:9-146:15)
      kind: assert(!move (_69.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_usize) -> [success: bb38, unwind: bb41]
  }
  preds [bb16, bb36]
  succs [bb38, bb41]

bb38
  0: _12 = move (_69.0: usize)
    SourceInfo(src/parse.rs:146:9-146:15)
  1: _18 = const ()
    SourceInfo(src/parse.rs:135:21-147:6)
  2: StorageDead(_19)
    SourceInfo(src/parse.rs:147:5-147:6)
  Terminator {
      source_info: SourceInfo(src/parse.rs:135:5-147:6)
      kind: goto -> bb7
  }
  preds [bb37]
  succs [bb7]

bb39
  0: StorageDead(_21)
    SourceInfo(src/parse.rs:135:19-135:20)
  1: StorageDead(_20)
    SourceInfo(src/parse.rs:135:19-135:20)
  2: StorageLive(_71)
    SourceInfo(src/parse.rs:135:5-147:6)
  3: _17 = const ()
    SourceInfo(src/parse.rs:135:5-147:6)
  4: StorageDead(_71)
    SourceInfo(src/parse.rs:147:5-147:6)
  5: StorageDead(_19)
    SourceInfo(src/parse.rs:147:5-147:6)
  6: StorageDead(_17)
    SourceInfo(src/parse.rs:147:5-147:6)
  7: StorageLive(_73)
    SourceInfo(src/parse.rs:149:9-149:15)
  8: _73 = parse::Reject
    SourceInfo(src/parse.rs:149:9-149:15)
  9: _0 = std::result::Result::<(parse::Cursor<'_>, &str), parse::Reject>::Err(move _73)
    SourceInfo(src/parse.rs:149:5-149:16)
  10: StorageDead(_73)
    SourceInfo(src/parse.rs:149:15-149:16)
  11: StorageDead(_13)
    SourceInfo(src/parse.rs:150:1-150:2)
  12: StorageDead(_12)
    SourceInfo(src/parse.rs:150:1-150:2)
  13: StorageDead(_10)
    SourceInfo(src/parse.rs:150:1-150:2)
  14: StorageDead(_9)
    SourceInfo(src/parse.rs:150:1-150:2)
  Terminator {
      source_info: SourceInfo(src/parse.rs:150:2-150:2)
      kind: goto -> bb40
  }
  preds [bb8]
  succs [bb40]

bb40
  Terminator {
      source_info: SourceInfo(src/parse.rs:150:2-150:2)
      kind: return
  }
  preds [bb3, bb30, bb39]
  succs []

bb41
  Terminator {
      source_info: SourceInfo(src/parse.rs:125:1-150:2)
      kind: resume
  }
  preds [bb0, bb2, bb4, bb5, bb7, bb9, bb11, bb12, bb14, bb15, bb19, bb21, bb22, bb24, bb26, bb27, bb28, bb29, bb31, bb37]
  succs []

