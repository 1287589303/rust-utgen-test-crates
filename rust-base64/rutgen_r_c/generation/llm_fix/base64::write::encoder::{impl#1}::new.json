{
  "name": "base64::write::encoder::{impl#1}::new",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:98:5:108:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: EncoderWriter {\n            engine,\n            delegate: Some(delegate),\n            extra_input: [0u8; MIN_ENCODE_CHUNK_SIZE],\n            extra_input_occupied_len: 0,\n            output: [0u8; BUF_SIZE],\n            output_occupied_len: 0,\n            panicked: false,\n        }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEngine;",
                "",
                "    impl Engine for MockEngine {",
                "        type Config = ();",
                "       type DecodeEstimate = NaiveEstimate; // or GeneralPurposeEstimate, depending on the intended behavior.",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0",
                "        }",
                "",
                "       fn internal_decode(",
                "           &self,",
                "           _input: &[u8],",
                "           _output: &mut [u8],",
                "           _decode_estimate: Self::DecodeEstimate,",
                "       ) -> Result<()> {",
                "           Ok(())",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "    }",
                "",
                "    let mock_engine = MockEngine;",
                "    let mock_writer: Vec<u8> = Vec::new();",
                "",
                "    let encoder_writer = EncoderWriter::new(mock_writer, &mock_engine);",
                "",
                "    assert!(encoder_writer.delegate.is_some());",
                "    assert_eq!(encoder_writer.extra_input, [0u8; MIN_ENCODE_CHUNK_SIZE]);",
                "    assert_eq!(encoder_writer.extra_input_occupied_len, 0);",
                "    assert_eq!(encoder_writer.output, [0u8; BUF_SIZE]);",
                "    assert_eq!(encoder_writer.output_occupied_len, 0);",
                "    assert_eq!(encoder_writer.panicked, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}