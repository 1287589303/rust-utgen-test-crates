{
  "name": "base64::read::decoder::{impl#1}::new",
  "mod_info": {
    "name": "read::decoder",
    "loc": "src/read/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/read/decoder.rs:78:5:91:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: DecoderReader {\n            engine,\n            inner: reader,\n            b64_buffer: [0; BUF_SIZE],\n            b64_offset: 0,\n            b64_len: 0,\n            decoded_chunk_buffer: [0; DECODED_CHUNK_SIZE],\n            decoded_offset: 0,\n            decoded_len: 0,\n            input_consumed_len: 0,\n            padding_offset: None,\n        }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEngine;",
                "",
                "    impl Engine for MockEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0",
                "        }",
                "",
                "       fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<crate::engine::DecodeMetadata, DecodeSliceError> {  ",
                "          Ok(crate::engine::DecodeMetadata::new(0, None))  ",
                "       }  ",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "    }",
                "",
                "    let engine = MockEngine;",
                "    let input_data = b\"Hello, World!\";",
                "    let reader = &input_data[..];",
                "    ",
                "    let decoder_reader = DecoderReader::new(reader, &engine);",
                "",
                "   assert_eq!(std::ptr::addr_of!(decoder_reader.engine), std::ptr::addr_of!(engine));",
                "    assert_eq!(decoder_reader.inner, reader);",
                "    assert_eq!(decoder_reader.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder_reader.b64_offset, 0);",
                "    assert_eq!(decoder_reader.b64_len, 0);",
                "    assert_eq!(decoder_reader.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder_reader.decoded_offset, 0);",
                "    assert_eq!(decoder_reader.decoded_len, 0);",
                "    assert_eq!(decoder_reader.input_consumed_len, 0);",
                "    assert_eq!(decoder_reader.padding_offset, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   struct MockEngine;",
                "   ",
                "   impl Engine for MockEngine {",
                "       type Config = ();",
                "       type DecodeEstimate = usize;",
                "   ",
                "       fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "           0",
                "       }",
                "   ",
                "       fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "           0",
                "       }",
                "       ",
                "      fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<crate::engine::DecodeMetadata, DecodeSliceError> {  ",
                "          Ok(crate::engine::DecodeMetadata::new(0, None))  ",
                "      }  ",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "    }",
                "",
                "    let engine = MockEngine;",
                "    let input_data: &[u8] = &[];",
                "    let reader = &input_data[..];",
                "",
                "    let decoder_reader = DecoderReader::new(reader, &engine);",
                "",
                "    assert_eq!(decoder_reader.engine as *const _, &engine as *const _);",
                "    assert_eq!(decoder_reader.inner, reader);",
                "    assert_eq!(decoder_reader.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder_reader.b64_offset, 0);",
                "    assert_eq!(decoder_reader.b64_len, 0);",
                "    assert_eq!(decoder_reader.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder_reader.decoded_offset, 0);",
                "    assert_eq!(decoder_reader.decoded_len, 0);",
                "    assert_eq!(decoder_reader.input_consumed_len, 0);",
                "    assert_eq!(decoder_reader.padding_offset, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}