{
  "name": "base64::chunked_encoder::{impl#0}::new",
  "mod_info": {
    "name": "chunked_encoder",
    "loc": "src/lib.rs:274:1:274:21"
  },
  "visible": true,
  "loc": "src/chunked_encoder.rs:24:5:26:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ChunkedEncoder { engine }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct DummyEngine;",
                "    ",
                "    impl Config for DummyEngine {}",
                "    ",
                "    struct DummyDecodeEstimate;",
                "    ",
                "    impl DecodeEstimate for DummyDecodeEstimate {}",
                "",
                "    impl Engine for DummyEngine {",
                "        type Config = DummyEngine;",
                "        type DecodeEstimate = DummyDecodeEstimate;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            DummyDecodeEstimate",
                "        }",
                "",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _decode_estimate: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Ok(DecodeMetadata::default())",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            self",
                "        }",
                "    }",
                "",
                "    let engine = DummyEngine;",
                "    let encoder = ChunkedEncoder::new(&engine);",
                "    assert_eq!(encoder.engine as *const _, &engine as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}