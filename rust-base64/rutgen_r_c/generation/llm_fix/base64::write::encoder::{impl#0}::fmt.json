{
  "name": "base64::write::encoder::{impl#0}::fmt",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:84:5:93:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0 // Not tested here",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0 // Not tested here",
                "        }",
                "",
                "       fn internal_decode(",
                "           &self,",
                "           _input: &[u8],",
                "           _output: &mut [u8],",
                "           _decode_estimate: Self::DecodeEstimate,",
                "      ) -> Result<DecodeMetadata> {  ",
                "           Err(crate::DecodeSliceError) // Not tested here  ",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &() // Not tested here",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let writer = Vec::new();",
                "    let mut encoder_writer = EncoderWriter {",
                "        engine: &engine,",
                "        delegate: Some(writer),",
                "        extra_input: [0; MIN_ENCODE_CHUNK_SIZE],",
                "        extra_input_occupied_len: 0,",
                "        output: [0; BUF_SIZE],",
                "        output_occupied_len: 0,",
                "        panicked: false,",
                "    };",
                "",
                "    let mut output = String::new();",
                "    assert!(encoder_writer.fmt(&mut output).is_ok());",
                "    assert!(output.contains(\"extra_input:\"));",
                "    assert!(output.contains(\"extra_input_occupied_len:\"));",
                "    assert!(output.contains(\"output[..5]:\"));",
                "    assert!(output.contains(\"output_occupied_len:\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}