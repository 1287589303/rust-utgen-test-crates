{
  "name": "base64::alphabet::{impl#1}::try_from",
  "mod_info": {
    "name": "alphabet",
    "loc": "src/lib.rs:284:1:284:18"
  },
  "visible": true,
  "loc": "src/alphabet.rs:137:5:139:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
                "    let result = Alphabet::try_from(alphabet_str);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().as_str(), alphabet_str);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let alphabet_str = \"short\";",
                "   let result = Alphabet::new(alphabet_str);",
                "   assert!(result.is_err());",
                "   assert_eq!(result.err(), Some(ParseAlphabetError::InvalidLength));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\x00\";",
                "    let result = Alphabet::try_from(alphabet_str);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(ParseAlphabetError::UnprintableByte(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=/\";",
                "    let result = Alphabet::try_from(alphabet_str);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(ParseAlphabetError::ReservedByte(b'=')));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "   let alphabet_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
                "   let result = Alphabet::new(alphabet_str);",
                "   assert!(result.is_err());",
                "   assert_eq!(result.err(), Some(ParseAlphabetError::DuplicatedByte(b'A')));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}