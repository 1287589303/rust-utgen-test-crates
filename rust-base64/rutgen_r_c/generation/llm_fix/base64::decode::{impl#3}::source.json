{
  "name": "base64::decode::{impl#3}::source",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:70:5:75:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches DecodeSliceError::OutputSliceTooSmall at line 71 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    #[derive(Clone, Debug, PartialEq, Eq)]",
                "    struct DecodeSliceErrorWrapper(DecodeSliceError);",
                "",
                "    let error = DecodeSliceErrorWrapper(DecodeSliceError::OutputSliceTooSmall);",
                "    assert_eq!(error.0.source(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches DecodeSliceError::DecodeError(e) at line 71 is true\n",
        "precondition: self matches DecodeSliceError::DecodeError(e) at line 71 is true\n",
        "expected return value/type: Some(e)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestDecodeError {",
                "        offset: usize,",
                "        byte: u8,",
                "    }",
                "",
                "    impl fmt::Debug for TestDecodeError {",
                "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
                "            write!(f, \"InvalidByte({}, {})\", self.offset, self.byte)",
                "        }",
                "    }",
                "",
                "    let error = DecodeError::InvalidByte(5, b'a');",
                "    let decode_slice_error = DecodeSliceError::DecodeError(error);",
                "",
                "    match decode_slice_error {",
                "        DecodeSliceError::DecodeError(ref e) => {",
                "            assert_eq!(decode_slice_error.source(), Some(e));",
                "        },",
                "        _ => panic!(\"Expected DecodeSliceError::DecodeError variant\"),",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}