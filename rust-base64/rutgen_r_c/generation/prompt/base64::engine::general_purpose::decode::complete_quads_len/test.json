{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/decode.rs\n// crate name is base64\nuse crate::{\n    engine::{\n        general_purpose::INVALID_VALUE, DecodeEstimate, DecodeMetadata, DecodePaddingMode,\n    },\n    DecodeError, DecodeSliceError, PAD_BYTE,\n};\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\npub(crate) fn complete_quads_len(\n    input: &[u8],\n    input_len_rem: usize,\n    output_len: usize,\n    decode_table: &[u8; 256],\n) -> Result<usize, DecodeSliceError> {\n    debug_assert!(input.len() % 4 == input_len_rem);\n    if input_len_rem == 1 {\n        let last_byte = input[input.len() - 1];\n        if last_byte != PAD_BYTE && decode_table[usize::from(last_byte)] == INVALID_VALUE\n        {\n            return Err(DecodeError::InvalidByte(input.len() - 1, last_byte).into());\n        }\n    }\n    let input_complete_nonterminal_quads_len = input\n        .len()\n        .saturating_sub(input_len_rem)\n        .saturating_sub(usize::from(input_len_rem == 0) * 4);\n    debug_assert!(\n        input.is_empty() || (1..= 4).contains(& (input.len() -\n        input_complete_nonterminal_quads_len))\n    );\n    if output_len < input_complete_nonterminal_quads_len / 4 * 3 {\n        return Err(DecodeSliceError::OutputSliceTooSmall);\n    }\n    Ok(input_complete_nonterminal_quads_len)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the length of complete quads, except for the last one, even if it is complete.\n///\n/// Returns an error if the output len is not big enough for decoding those complete quads, or if\n/// the input % 4 == 1, and that last byte is an invalid value other than a pad byte.\n///\n/// - `input` is the base64 input\n/// - `input_len_rem` is input len % 4\n/// - `output_len` is the length of the output slice\n131 pub(crate) fn complete_quads_len(\n132     input: &[u8],\n133     input_len_rem: usize,\n134     output_len: usize,\n135     decode_table: &[u8; 256],\n136 ) -> Result<usize, DecodeSliceError> {\n137     debug_assert!(input.len() % 4 == input_len_rem);\n138 \n139     // detect a trailing invalid byte, like a newline, as a user convenience\n140     if input_len_rem == 1 {\n141         let last_byte = input[input.len() - 1];\n142         // exclude pad bytes; might be part of padding that extends from earlier in the input\n143         if last_byte != PAD_BYTE && decode_table[usize::from(last_byte)] == INVALID_VALUE {\n144             return Err(DecodeError::InvalidByte(input.len() - 1, last_byte).into());\n145         }\n146     };\n147 \n148     // skip last quad, even if it's complete, as it may have padding\n149     let input_complete_nonterminal_quads_len = input\n150         .len()\n151         .saturating_sub(input_len_rem)\n152         // if rem was 0, subtract 4 to avoid padding\n153         .saturating_sub(usize::from(input_len_rem == 0) * 4);\n154     debug_assert!(\n155         input.is_empty() || (1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))\n156     );\n157 \n158     // check that everything except the last quad handled by decode_suffix will fit\n159     if output_len < input_complete_nonterminal_quads_len / 4 * 3 {\n160         return Err(DecodeSliceError::OutputSliceTooSmall);\n161     };\n162     Ok(input_complete_nonterminal_quads_len)\n163 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}