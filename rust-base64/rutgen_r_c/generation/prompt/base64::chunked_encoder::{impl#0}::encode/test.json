{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/chunked_encoder.rs\n// crate name is base64\nuse crate::{encode::add_padding, engine::{Config, Engine}};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::string::String;\n#[cfg(any(feature = \"alloc\", test))]\nuse core::str;\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct ChunkedEncoder<'e, E: Engine + ?Sized> {\n    engine: &'e E,\n}\nimpl<'e, E: Engine + ?Sized> ChunkedEncoder<'e, E> {\n    pub fn new(engine: &'e E) -> ChunkedEncoder<'e, E> {}\n    pub fn encode<S: Sink>(&self, bytes: &[u8], sink: &mut S) -> Result<(), S::Error> {\n        const BUF_SIZE: usize = 1024;\n        const CHUNK_SIZE: usize = BUF_SIZE / 4 * 3;\n        let mut buf = [0; BUF_SIZE];\n        for chunk in bytes.chunks(CHUNK_SIZE) {\n            let mut len = self.engine.internal_encode(chunk, &mut buf);\n            if chunk.len() != CHUNK_SIZE && self.engine.config().encode_padding() {\n                len += add_padding(len, &mut buf[len..]);\n            }\n            sink.write_encoded_bytes(&buf[..len])?;\n        }\n        Ok(())\n    }\n}\npub(crate) fn add_padding(unpadded_output_len: usize, output: &mut [u8]) -> usize {\n    let pad_bytes = (4 - (unpadded_output_len % 4)) % 4;\n    #[allow(clippy::needless_range_loop)]\n    for i in 0..pad_bytes {\n        output[i] = PAD_BYTE;\n    }\n    pad_bytes\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n28 pub fn encode<S: Sink>(&self, bytes: &[u8], sink: &mut S) -> Result<(), S::Error> {\n29     const BUF_SIZE: usize = 1024;\n30     const CHUNK_SIZE: usize = BUF_SIZE / 4 * 3;\n31 \n32     let mut buf = [0; BUF_SIZE];\n33     for chunk in bytes.chunks(CHUNK_SIZE) {\n34         let mut len = self.engine.internal_encode(chunk, &mut buf);\n35         if chunk.len() != CHUNK_SIZE && self.engine.config().encode_padding() {\n36             // Final, potentially partial, chunk.\n37             // Only need to consider if padding is needed on a partial chunk since full chunk\n38             // is a multiple of 3, which therefore won't be padded.\n39             // Pad output to multiple of four bytes if required by config.\n40             len += add_padding(len, &mut buf[len..]);\n41         }\n42         sink.write_encoded_bytes(&buf[..len])?;\n43     }\n44 \n45     Ok(())\n46 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}