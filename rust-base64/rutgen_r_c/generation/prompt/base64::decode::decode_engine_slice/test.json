{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/decode.rs\n// crate name is base64\nuse crate::engine::{general_purpose::STANDARD, DecodeEstimate, Engine};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_slice\")]\npub fn decode_engine_slice<E: Engine, T: AsRef<[u8]>>(\n    input: T,\n    output: &mut [u8],\n    engine: &E,\n) -> Result<usize, DecodeSliceError> {\n    engine.decode_slice(input, output)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the input into the provided output slice.\n///\n/// See [`Engine::decode_slice`].\n123 pub fn decode_engine_slice<E: Engine, T: AsRef<[u8]>>(\n124     input: T,\n125     output: &mut [u8],\n126     engine: &E,\n127 ) -> Result<usize, DecodeSliceError> {\n128     engine.decode_slice(input, output)\n129 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}