{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/mod.rs\n// crate name is base64\nuse crate::{\n    alphabet, alphabet::Alphabet, engine::{Config, DecodeMetadata, DecodePaddingMode},\n    DecodeSliceError,\n};\nuse core::convert::TryInto;\npub use decode::GeneralPurposeEstimate;\npub(crate) const INVALID_VALUE: u8 = 255;\npub const STANDARD: GeneralPurpose = GeneralPurpose::new(&alphabet::STANDARD, PAD);\npub const STANDARD_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    PAD_INDIFFERENT,\n);\npub const STANDARD_NO_PAD: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    NO_PAD,\n);\npub const STANDARD_NO_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    NO_PAD_INDIFFERENT,\n);\npub const URL_SAFE: GeneralPurpose = GeneralPurpose::new(&alphabet::URL_SAFE, PAD);\npub const URL_SAFE_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    PAD_INDIFFERENT,\n);\npub const URL_SAFE_NO_PAD: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    NO_PAD,\n);\npub const URL_SAFE_NO_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    NO_PAD_INDIFFERENT,\n);\npub const PAD: GeneralPurposeConfig = GeneralPurposeConfig::new();\npub const PAD_INDIFFERENT: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(true)\n    .with_decode_padding_mode(DecodePaddingMode::Indifferent);\npub const NO_PAD: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(false)\n    .with_decode_padding_mode(DecodePaddingMode::RequireNone);\npub const NO_PAD_INDIFFERENT: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(false)\n    .with_decode_padding_mode(DecodePaddingMode::Indifferent);\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> String\n        where\n            E: Engine + ?Sized,\n        {\n            let encoded_size = encoded_len(\n                    input_bytes.len(),\n                    engine.config().encode_padding(),\n                )\n                .expect(\"integer overflow when calculating buffer size\");\n            let mut buf = vec![0; encoded_size];\n            encode_with_padding(input_bytes, &mut buf[..], engine, encoded_size);\n            String::from_utf8(buf).expect(\"Invalid UTF8\")\n        }\n        inner(self, input.as_ref())\n    }\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String) {\n        fn inner<E>(engine: &E, input_bytes: &[u8], output_buf: &mut String)\n        where\n            E: Engine + ?Sized,\n        {\n            let mut sink = chunked_encoder::StringSink::new(output_buf);\n            chunked_encoder::ChunkedEncoder::new(engine)\n                .encode(input_bytes, &mut sink)\n                .expect(\"Writing to a String shouldn't fail\");\n        }\n        inner(self, input.as_ref(), output_buf);\n    }\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError> {\n        fn inner<E>(\n            engine: &E,\n            input_bytes: &[u8],\n            output_buf: &mut [u8],\n        ) -> Result<usize, EncodeSliceError>\n        where\n            E: Engine + ?Sized,\n        {\n            let encoded_size = encoded_len(\n                    input_bytes.len(),\n                    engine.config().encode_padding(),\n                )\n                .expect(\"usize overflow when calculating buffer size\");\n            if output_buf.len() < encoded_size {\n                return Err(EncodeSliceError::OutputSliceTooSmall);\n            }\n            let b64_output = &mut output_buf[0..encoded_size];\n            encode_with_padding(input_bytes, b64_output, engine, encoded_size);\n            Ok(encoded_size)\n        }\n        inner(self, input.as_ref(), output_buf)\n    }\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)\n                .map_err(|e| match e {\n                    DecodeSliceError::DecodeError(e) => e,\n                    DecodeSliceError::OutputSliceTooSmall => {\n                        unreachable!(\"Vec is sized conservatively\")\n                    }\n                })?\n                .decoded_len;\n            buffer.truncate(bytes_written);\n            Ok(buffer)\n        }\n        inner(self, input.as_ref())\n    }\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError> {\n        fn inner<E>(\n            engine: &E,\n            input_bytes: &[u8],\n            buffer: &mut Vec<u8>,\n        ) -> Result<(), DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let starting_output_len = buffer.len();\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let total_len_estimate = estimate\n                .decoded_len_estimate()\n                .checked_add(starting_output_len)\n                .expect(\"Overflow when calculating output buffer length\");\n            buffer.resize(total_len_estimate, 0);\n            let buffer_slice = &mut buffer.as_mut_slice()[starting_output_len..];\n            let bytes_written = engine\n                .internal_decode(input_bytes, buffer_slice, estimate)\n                .map_err(|e| match e {\n                    DecodeSliceError::DecodeError(e) => e,\n                    DecodeSliceError::OutputSliceTooSmall => {\n                        unreachable!(\"Vec is sized conservatively\")\n                    }\n                })?\n                .decoded_len;\n            buffer.truncate(starting_output_len + bytes_written);\n            Ok(())\n        }\n        inner(self, input.as_ref(), buffer)\n    }\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError> {\n        fn inner<E>(\n            engine: &E,\n            input_bytes: &[u8],\n            output: &mut [u8],\n        ) -> Result<usize, DecodeSliceError>\n        where\n            E: Engine + ?Sized,\n        {\n            engine\n                .internal_decode(\n                    input_bytes,\n                    output,\n                    engine.internal_decoded_len_estimate(input_bytes.len()),\n                )\n                .map(|dm| dm.decoded_len)\n        }\n        inner(self, input.as_ref(), output)\n    }\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError> {\n        fn inner<E>(\n            engine: &E,\n            input_bytes: &[u8],\n            output: &mut [u8],\n        ) -> Result<usize, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            engine\n                .internal_decode(\n                    input_bytes,\n                    output,\n                    engine.internal_decoded_len_estimate(input_bytes.len()),\n                )\n                .map(|dm| dm.decoded_len)\n                .map_err(|e| match e {\n                    DecodeSliceError::DecodeError(e) => e,\n                    DecodeSliceError::OutputSliceTooSmall => {\n                        panic!(\"Output slice is too small\")\n                    }\n                })\n        }\n        inner(self, input.as_ref(), output)\n    }\n}\n#[derive(Debug, Clone)]\npub struct GeneralPurpose {\n    encode_table: [u8; 64],\n    decode_table: [u8; 256],\n    config: GeneralPurposeConfig,\n}\n#[derive(PartialEq, Eq, Debug)]\npub struct DecodeMetadata {\n    /// Number of decoded bytes output\n    pub(crate) decoded_len: usize,\n    /// Offset of the first padding byte in the input, if any\n    pub(crate) padding_offset: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct GeneralPurposeConfig {\n    encode_padding: bool,\n    decode_allow_trailing_bits: bool,\n    decode_padding_mode: DecodePaddingMode,\n}\npub struct GeneralPurposeEstimate {\n    /// input len % 4\n    rem: usize,\n    conservative_decoded_len: usize,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum DecodePaddingMode {\n    /// Canonical padding is allowed, but any fewer padding bytes than that is also allowed.\n    Indifferent,\n    /// Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).\n    RequireCanonical,\n    /// Padding must be absent -- for when you want predictable padding, without any wasted bytes.\n    RequireNone,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\nimpl super::Engine for GeneralPurpose {\n    type Config = GeneralPurposeConfig;\n    type DecodeEstimate = GeneralPurposeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize {}\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {\n        GeneralPurposeEstimate::new(input_len)\n    }\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError> {\n        decode::decode_helper(\n            input,\n            &estimate,\n            output,\n            &self.decode_table,\n            self.config.decode_allow_trailing_bits,\n            self.config.decode_padding_mode,\n        )\n    }\n    fn config(&self) -> &Self::Config {\n        &self.config\n    }\n}\n#[inline]\npub(crate) fn decode_helper(\n    input: &[u8],\n    estimate: &GeneralPurposeEstimate,\n    output: &mut [u8],\n    decode_table: &[u8; 256],\n    decode_allow_trailing_bits: bool,\n    padding_mode: DecodePaddingMode,\n) -> Result<DecodeMetadata, DecodeSliceError> {\n    let input_complete_nonterminal_quads_len = complete_quads_len(\n        input,\n        estimate.rem,\n        output.len(),\n        decode_table,\n    )?;\n    const UNROLLED_INPUT_CHUNK_SIZE: usize = 32;\n    const UNROLLED_OUTPUT_CHUNK_SIZE: usize = UNROLLED_INPUT_CHUNK_SIZE / 4 * 3;\n    let input_complete_quads_after_unrolled_chunks_len = input_complete_nonterminal_quads_len\n        % UNROLLED_INPUT_CHUNK_SIZE;\n    let input_unrolled_loop_len = input_complete_nonterminal_quads_len\n        - input_complete_quads_after_unrolled_chunks_len;\n    for (chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()\n    {\n        let input_index = chunk_index * UNROLLED_INPUT_CHUNK_SIZE;\n        let chunk_output = &mut output[chunk_index\n            * UNROLLED_OUTPUT_CHUNK_SIZE..(chunk_index + 1)\n            * UNROLLED_OUTPUT_CHUNK_SIZE];\n        decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?;\n        decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?;\n        decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?;\n        decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?;\n    }\n    let output_unrolled_loop_len = input_unrolled_loop_len / 4 * 3;\n    let output_complete_quad_len = input_complete_nonterminal_quads_len / 4 * 3;\n    {\n        let output_after_unroll = &mut output[output_unrolled_loop_len..output_complete_quad_len];\n        for (chunk_index, chunk) in input[input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()\n        {\n            let chunk_output = &mut output_after_unroll[chunk_index\n                * 3..chunk_index * 3 + 3];\n            decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?;\n        }\n    }\n    super::decode_suffix::decode_suffix(\n        input,\n        input_complete_nonterminal_quads_len,\n        output,\n        output_complete_quad_len,\n        decode_table,\n        decode_allow_trailing_bits,\n        padding_mode,\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n174 fn internal_decode(\n175     &self,\n176     input: &[u8],\n177     output: &mut [u8],\n178     estimate: Self::DecodeEstimate,\n179 ) -> Result<DecodeMetadata, DecodeSliceError> {\n180     decode::decode_helper(\n181         input,\n182         &estimate,\n183         output,\n184         &self.decode_table,\n185         self.config.decode_allow_trailing_bits,\n186         self.config.decode_padding_mode,\n187     )\n188 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}