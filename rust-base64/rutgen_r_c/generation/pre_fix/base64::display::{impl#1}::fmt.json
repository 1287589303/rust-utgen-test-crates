{
  "name": "base64::display::{impl#1}::fmt",
  "mod_info": {
    "name": "display",
    "loc": "src/lib.rs:275:1:275:17"
  },
  "visible": true,
  "loc": "src/display.rs:34:5:37:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _decode_estimate: Self::DecodeEstimate,",
                "        ) -> Result<(), ()> {",
                "            Ok(())",
                "        }",
                "        ",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let bytes: &[u8] = b\"Hello, World!\";",
                "    let chunked_encoder = ChunkedEncoder { engine: &engine };",
                "    let display = Base64Display {",
                "        bytes,",
                "        chunked_encoder,",
                "    };",
                "",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", display);",
                "    ",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _decode_estimate: Self::DecodeEstimate,",
                "        ) -> Result<(), ()> {",
                "            Ok(())",
                "        }",
                "        ",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let bytes: &[u8] = b\"\";",
                "    let chunked_encoder = ChunkedEncoder { engine: &engine };",
                "    let display = Base64Display {",
                "        bytes,",
                "        chunked_encoder,",
                "    };",
                "",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", display);",
                "    ",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _decode_estimate: Self::DecodeEstimate,",
                "        ) -> Result<(), ()> {",
                "            Ok(())",
                "        }",
                "        ",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let bytes: &[u8] = b\"Hello, World!\";",
                "    let chunked_encoder = ChunkedEncoder { engine: &engine };",
                "    let display = Base64Display {",
                "        bytes,",
                "        chunked_encoder,",
                "    };",
                "",
                "    let mut invalid_formatter: Formatter = unsafe { std::mem::zeroed() };",
                "    let _ = display.fmt(&mut invalid_formatter);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}