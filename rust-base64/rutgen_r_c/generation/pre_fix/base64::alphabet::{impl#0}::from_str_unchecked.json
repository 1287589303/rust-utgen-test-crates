{
  "name": "base64::alphabet::{impl#0}::from_str_unchecked",
  "mod_info": {
    "name": "alphabet",
    "loc": "src/lib.rs:284:1:284:18"
  },
  "visible": false,
  "loc": "src/alphabet.rs:62:5:74:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: index < ALPHABET_SIZE at line 68 is true\n",
        "precondition: index < ALPHABET_SIZE at line 68 is false, with bound index == ALPHABET_SIZE\n",
        "expected return value/type: Self { symbols }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
                "    let result = Alphabet::from_str_unchecked(alphabet);",
                "    let expected = Alphabet {",
                "        symbols: *alphabet.as_bytes(),",
                "    };",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet = \"short\"; // length is less than ALPHABET_SIZE",
                "    let _ = Alphabet::from_str_unchecked(alphabet);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: index < ALPHABET_SIZE at line 68 is false, with bound index == ALPHABET_SIZE\n",
        "expected return value/type: Self { symbols }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
                "    let result = Alphabet::from_str_unchecked(alphabet);",
                "    assert_eq!(&result.symbols, alphabet.as_bytes());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
                "    let result = Alphabet::from_str_unchecked(alphabet);",
                "    assert_eq!(result.symbols.len(), ALPHABET_SIZE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}