{
  "name": "base64::display::{impl#0}::new",
  "mod_info": {
    "name": "display",
    "loc": "src/lib.rs:275:1:275:17"
  },
  "visible": true,
  "loc": "src/display.rs:25:5:30:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Base64Display {\n            bytes,\n            chunked_encoder: ChunkedEncoder::new(engine),\n        }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestConfig;",
                "    struct TestDecodeEstimate;",
                "",
                "    impl Config for TestConfig {}",
                "    impl DecodeEstimate for TestDecodeEstimate {}",
                "",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = TestConfig;",
                "        type DecodeEstimate = TestDecodeEstimate;",
                "        ",
                "        fn internal_encode(&self, _: &[u8], _: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decoded_len_estimate(&self, _: usize) -> Self::DecodeEstimate {",
                "            TestDecodeEstimate {}",
                "        }",
                "        ",
                "        fn internal_decode(",
                "            &self,",
                "            _: &[u8],",
                "            _: &mut [u8],",
                "            _: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Err(DecodeSliceError::new())",
                "        }",
                "        ",
                "        fn config(&self) -> &Self::Config {",
                "            &TestConfig {}",
                "        }",
                "    }",
                "",
                "    let bytes: &[u8] = b\"test\";",
                "    let engine = TestEngine;",
                "",
                "    let display = Base64Display::new(bytes, &engine);",
                "",
                "    assert_eq!(display.bytes, bytes);",
                "    assert!(std::mem::size_of_val(&display.chunked_encoder) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestConfig;",
                "    struct TestDecodeEstimate;",
                "",
                "    impl Config for TestConfig {}",
                "    impl DecodeEstimate for TestDecodeEstimate {}",
                "",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = TestConfig;",
                "        type DecodeEstimate = TestDecodeEstimate;",
                "        ",
                "        fn internal_encode(&self, _: &[u8], _: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "        ",
                "        fn internal_decoded_len_estimate(&self, _: usize) -> Self::DecodeEstimate {",
                "            TestDecodeEstimate {}",
                "        }",
                "        ",
                "        fn internal_decode(",
                "            &self,",
                "            _: &[u8],",
                "            _: &mut [u8],",
                "            _: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Err(DecodeSliceError::new())",
                "        }",
                "        ",
                "        fn config(&self) -> &Self::Config {",
                "            &TestConfig {}",
                "        }",
                "    }",
                "",
                "    let bytes: &[u8] = &[];",
                "    let engine = TestEngine;",
                "",
                "    let display = Base64Display::new(bytes, &engine);",
                "",
                "    assert_eq!(display.bytes, bytes);",
                "    assert!(std::mem::size_of_val(&display.chunked_encoder) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}