{
  "name": "base64::engine::general_purpose::{impl#1}::internal_decoded_len_estimate",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:170:5:172:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine {",
                "        config: GeneralPurposeConfig,",
                "    }",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = GeneralPurposeConfig;",
                "        type DecodeEstimate = GeneralPurposeEstimate;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            GeneralPurposeEstimate::new(input_len)",
                "        }",
                "",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _estimate: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &self.config",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine {",
                "        config: GeneralPurposeConfig {",
                "            encode_padding: true,",
                "            decode_allow_trailing_bits: false,",
                "            decode_padding_mode: DecodePaddingMode::Indifferent,",
                "        },",
                "    };",
                "",
                "    let estimate = engine.internal_decoded_len_estimate(0);",
                "    assert_eq!(estimate.conservative_decoded_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine {",
                "        config: GeneralPurposeConfig,",
                "    }",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = GeneralPurposeConfig;",
                "        type DecodeEstimate = GeneralPurposeEstimate;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            GeneralPurposeEstimate::new(input_len)",
                "        }",
                "",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _estimate: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &self.config",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine {",
                "        config: GeneralPurposeConfig {",
                "            encode_padding: true,",
                "            decode_allow_trailing_bits: false,",
                "            decode_padding_mode: DecodePaddingMode::RequireNone,",
                "        },",
                "    };",
                "",
                "    let estimate = engine.internal_decoded_len_estimate(8);",
                "    assert_eq!(estimate.conservative_decoded_len, 6);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine {",
                "        config: GeneralPurposeConfig,",
                "    }",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = GeneralPurposeConfig;",
                "        type DecodeEstimate = GeneralPurposeEstimate;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            GeneralPurposeEstimate::new(input_len)",
                "        }",
                "",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _estimate: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &self.config",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine {",
                "        config: GeneralPurposeConfig {",
                "            encode_padding: true,",
                "            decode_allow_trailing_bits: false,",
                "            decode_padding_mode: DecodePaddingMode::Indifferent,",
                "        },",
                "    };",
                "",
                "    let estimate = engine.internal_decoded_len_estimate(3);",
                "    assert_eq!(estimate.conservative_decoded_len, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine {",
                "        config: GeneralPurposeConfig,",
                "    }",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = GeneralPurposeConfig;",
                "        type DecodeEstimate = GeneralPurposeEstimate;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            GeneralPurposeEstimate::new(input_len)",
                "        }",
                "",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _estimate: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            unimplemented!()",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &self.config",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine {",
                "        config: GeneralPurposeConfig {",
                "            encode_padding: true,",
                "            decode_allow_trailing_bits: false,",
                "            decode_padding_mode: DecodePaddingMode::RequireNone,",
                "        },",
                "    };",
                "",
                "    let estimate = engine.internal_decoded_len_estimate(1024);",
                "    assert_eq!(estimate.conservative_decoded_len, 768);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}