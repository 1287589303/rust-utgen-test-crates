{
  "name": "base64::engine::{impl#0}::new",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:472:5:477:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            decoded_len: decoded_bytes,\n            padding_offset: padding_index,\n        }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decoded_bytes = 0;",
                "    let padding_index = None;",
                "    let metadata = DecodeMetadata::new(decoded_bytes, padding_index);",
                "    assert_eq!(metadata, DecodeMetadata { decoded_len: 0, padding_offset: None });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decoded_bytes = 5;",
                "    let padding_index = None;",
                "    let metadata = DecodeMetadata::new(decoded_bytes, padding_index);",
                "    assert_eq!(metadata, DecodeMetadata { decoded_len: 5, padding_offset: None });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decoded_bytes = 0;",
                "    let padding_index = Some(3);",
                "    let metadata = DecodeMetadata::new(decoded_bytes, padding_index);",
                "    assert_eq!(metadata, DecodeMetadata { decoded_len: 0, padding_offset: Some(3) });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decoded_bytes = 10;",
                "    let padding_index = Some(2);",
                "    let metadata = DecodeMetadata::new(decoded_bytes, padding_index);",
                "    assert_eq!(metadata, DecodeMetadata { decoded_len: 10, padding_offset: Some(2) });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}