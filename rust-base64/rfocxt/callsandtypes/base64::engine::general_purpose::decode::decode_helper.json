{"mod_name":"engine::general_purpose::decode","calls":["<std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeError>>>::from_residual","core::slice::<impl [u8]>::len","<std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeSliceError>>>::from_residual","<std::iter::Enumerate<std::slice::ChunksExact<'_, u8>> as std::iter::Iterator>::next","<std::iter::Enumerate<std::slice::ChunksExact<'_, u8>> as std::iter::IntoIterator>::into_iter","core::slice::<impl [u8]>::chunks_exact","<[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut","<std::slice::ChunksExact<'_, u8> as std::iter::Iterator>::enumerate","<[u8] as std::ops::Index<std::ops::Range<usize>>>::index","engine::general_purpose::decode::complete_quads_len","engine::general_purpose::decode::decode_chunk_4","<std::result::Result<","engine::general_purpose::decode_suffix::decode_suffix","<std::result::Result<usize, decode::DecodeSliceError> as std::ops::Try>::branch","<[u8] as std::ops::Index<std::ops::RangeTo<usize>>>::index","engine::general_purpose::decode::decode_chunk_8"],"types":["std::iter::Enumerate<std::slice::ChunksExact<'_, u8>>","decode::DecodeSliceError","std::option::Option<(usize, &[u8])>","engine::DecodeMetadata","std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeSliceError>, usize>","bool","[u8]","[u8; 256]","engine::DecodePaddingMode","()","std::convert::Infallible","std::result::Result<(), decode::DecodeError>","(usize, bool)","std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeError>>","!","std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError>","(usize, &[u8])","engine::general_purpose::decode::GeneralPurposeEstimate","std::ops::RangeTo<usize>","usize","std::slice::ChunksExact<'_, u8>","isize","std::result::Result<usize, decode::DecodeSliceError>","decode::DecodeError","std::result::Result<std::convert::Infallible, decode::DecodeError>","std::result::Result<std::convert::Infallible, decode::DecodeSliceError>","u8","std::ops::Range<usize>"]}