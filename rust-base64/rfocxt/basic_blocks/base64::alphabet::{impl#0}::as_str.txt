[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: [u8; 64]),
            _5 = &(*_6),
            _4 = move _5 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:130:9: 130:44 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::str::from_utf8(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:130:9: 130:53 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::result::Result::<&str, std::str::Utf8Error>::unwrap(move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:131:6: 131:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:129:5: 131:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:129:29: 129:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:129:19: 129:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/alphabet.rs:130:9: 130:53 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:130:9: 130:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/alphabet.rs:130:9: 130:53 (#0),
                },
            ),
        ),
        ty: std::result::Result<&'{erased} str, std::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:130:9: 130:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/alphabet.rs:130:9: 130:53 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:130:30: 130:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/alphabet.rs:130:9: 130:53 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:130:30: 130:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/alphabet.rs:130:9: 130:53 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:130:30: 130:43 (#0),
            scope: scope[0],
        },
    },
]