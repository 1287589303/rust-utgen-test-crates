[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_2),
            _3 = display::FormatterSink::<'_, '_> { f: move _4 },
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            _5 = &((*_1).1: chunked_encoder::ChunkedEncoder<'_, E>),
            StorageLive(_6),
            _6 = &(*((*_1).0: &[u8])),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            _7 = &mut (*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/display.rs:36:9: 36:59 (#0),
                    scope: scope[1],
                },
                kind: _0 = chunked_encoder::ChunkedEncoder::<'_, E>::encode::<display::FormatterSink<'_, '_>>(move _5, move _6, move _7) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/display.rs:37:6: 37:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/display.rs:34:5: 37:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:34:49: 34:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} display::Base64Display<'{erased}, '{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:34:12: 34:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/display.rs:34:30: 34:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/display.rs:34:19: 34:28 (#0),
                            ),
                        ),
                        pat_span: src/display.rs:34:19: 34:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:34:19: 34:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/display.rs:35:24: 35:54 (#0),
                            ),
                        ),
                        pat_span: src/display.rs:35:13: 35:21 (#0),
                    },
                ),
            ),
        ),
        ty: display::FormatterSink<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:35:13: 35:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut std::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:35:43: 35:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/display.rs:36:9: 36:59 (#0),
                },
            ),
        ),
        ty: &'{erased} chunked_encoder::ChunkedEncoder<'{erased}, E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:36:9: 36:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/display.rs:36:9: 36:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:36:37: 36:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/display.rs:36:9: 36:59 (#0),
                },
            ),
        ),
        ty: &'{erased} mut display::FormatterSink<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:36:49: 36:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/display.rs:36:9: 36:59 (#0),
                },
            ),
        ),
        ty: &'{erased} mut display::FormatterSink<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/display.rs:36:49: 36:58 (#0),
            scope: scope[0],
        },
    },
]