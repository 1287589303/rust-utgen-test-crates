[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:71:9: 71:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:71:15: 71:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:72:13: 72:45 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = std::option::Option::<&dyn std::error::Error>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:73:54: 73:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(((*_1) as DecodeError).0: decode::DecodeError),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_3),
            _4 = move _5 as &dyn std::error::Error (PointerCoercion(Unsize)),
            StorageDead(_5),
            _0 = std::option::Option::<&dyn std::error::Error>::Some(move _4),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:72:55: 72:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:75:6: 75:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} dyn [Binder { value: Trait(std::error::Error), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:70:25: 70:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:70:15: 70:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:72:13: 72:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/decode.rs:71:15: 71:19 (#0),
                            ),
                        ),
                        pat_span: src/decode.rs:72:13: 72:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:72:43: 72:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(std::error::Error), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:72:54: 72:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:71:9: 74:10 (#0),
                },
            ),
        ),
        ty: &'{erased} decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:72:54: 72:55 (#0),
            scope: scope[0],
        },
    },
]