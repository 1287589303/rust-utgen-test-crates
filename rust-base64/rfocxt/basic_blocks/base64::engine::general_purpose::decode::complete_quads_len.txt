[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#148),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:137:19: 137:30 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::slice::<impl [u8]>::len(move _11) -> [return: bb2, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _12 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:137:19: 137:34 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _12, "attempt to calculate the remainder of `{}` with a divisor of zero", _10) -> [success: bb3, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = Rem(move _10, const 4_usize),
            StorageDead(_10),
            StorageLive(_13),
            _13 = _2,
            _8 = Eq(move _9, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:137:19: 137:51 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#147),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_9),
            StorageLive(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#149),
                    scope: scope[0],
                },
                kind: _14 = core::panicking::panic(const "assertion failed: input.len() % 4 == input_len_rem") -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#147),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _2,
            _16 = Eq(move _17, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:140:8: 140:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb22, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:141:31: 141:42 (#0),
                    scope: scope[0],
                },
                kind: _20 = core::slice::<impl [u8]>::len(move _21) -> [return: bb9, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _22 = SubWithOverflow(_20, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:141:31: 141:46 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_22.1: bool), "attempt to compute `{} - {}`, which would overflow", move _20, const 1_usize) -> [success: bb10, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = move (_22.0: usize),
            StorageDead(_20),
            _23 = Len((*_1)),
            _24 = Lt(_19, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:141:25: 141:47 (#0),
                    scope: scope[0],
                },
                kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _19) -> [success: bb11, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = (*_1)[_19],
            FakeRead(ForLet(None), _18),
            StorageDead(_19),
            StorageLive(_25),
            StorageLive(_26),
            _26 = _18,
            _25 = Ne(move _26, const PAD_BYTE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:143:12: 143:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _25) -> [0: bb20, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:143:50: 143:72 (#0),
                    scope: scope[1],
                },
                kind: _29 = <usize as std::convert::From<u8>>::from(move _30) -> [return: bb13, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _31 = Len((*_4)),
            _32 = Lt(_29, _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:143:37: 143:73 (#0),
                    scope: scope[1],
                },
                kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _29) -> [success: bb14, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = (*_4)[_29],
            _27 = Eq(move _28, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:143:37: 143:90 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _27) -> [0: bb19, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:144:49: 144:60 (#0),
                    scope: scope[1],
                },
                kind: _37 = core::slice::<impl [u8]>::len(move _38) -> [return: bb16, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _39 = SubWithOverflow(_37, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:144:49: 144:64 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_39.1: bool), "attempt to compute `{} - {}`, which would overflow", move _37, const 1_usize) -> [success: bb17, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = move (_39.0: usize),
            StorageDead(_37),
            StorageLive(_40),
            _40 = _18,
            _35 = decode::DecodeError::InvalidByte(move _36, move _40),
            StorageDead(_40),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:144:24: 144:83 (#0),
                    scope: scope[1],
                },
                kind: _34 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _35) -> [return: bb18, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            _0 = std::result::Result::<usize, decode::DecodeSliceError>::Err(move _34),
            StorageDead(_34),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = const (),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:140:5: 146:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:140:5: 146:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:149:48: 150:15 (#0),
                    scope: scope[0],
                },
                kind: _43 = core::slice::<impl [u8]>::len(move _44) -> [return: bb24, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_45),
            _45 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:149:48: 151:39 (#0),
                    scope: scope[0],
                },
                kind: _42 = core::num::<impl usize>::saturating_sub(move _43, move _45) -> [return: bb25, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_43),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _2,
            _48 = Eq(move _49, const 0_usize),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:153:25: 153:56 (#0),
                    scope: scope[0],
                },
                kind: _47 = <usize as std::convert::From<bool>>::from(move _48) -> [return: bb26, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            _50 = MulWithOverflow(_47, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:153:25: 153:60 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_50.1: bool), "attempt to compute `{} * {}`, which would overflow", move _47, const 4_usize) -> [success: bb27, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = move (_50.0: usize),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:149:48: 153:61 (#0),
                    scope: scope[0],
                },
                kind: _41 = core::num::<impl usize>::saturating_sub(move _42, move _46) -> [return: bb28, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_42),
            FakeRead(ForLet(None), _41),
            StorageLive(_51),
            StorageLive(_52),
            _52 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#152),
                    scope: scope[2],
                },
                kind: switchInt(move _52) -> [0: bb40, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:9: 155:25 (#0),
                    scope: scope[2],
                },
                kind: _54 = core::slice::<impl [u8]>::is_empty(move _55) -> [return: bb30, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:9: 155:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _54) -> [0: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#153),
                    scope: scope[2],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:29: 155:36 (#0),
                    scope: scope[2],
                },
                kind: _58 = std::ops::RangeInclusive::<usize>::new(const 1_usize, const 4_usize) -> [return: bb33, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = &_58,
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:48: 155:59 (#0),
                    scope: scope[2],
                },
                kind: _62 = core::slice::<impl [u8]>::len(move _63) -> [return: bb34, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageLive(_64),
            _64 = _41,
            _65 = SubWithOverflow(_62, _64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:47: 155:99 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_65.1: bool), "attempt to compute `{} - {}`, which would overflow", move _62, move _64) -> [success: bb35, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_65.0: usize),
            StorageDead(_64),
            StorageDead(_62),
            _60 = &_61,
            _59 = &(*_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:29: 155:100 (#0),
                    scope: scope[2],
                },
                kind: _56 = std::ops::RangeInclusive::<usize>::contains::<usize>(move _57, move _59) -> [return: bb36, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:155:29: 155:100 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _56) -> [0: bb38, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#153),
                    scope: scope[2],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#153),
                    scope: scope[2],
                },
                kind: _66 = core::panicking::panic(const "assertion failed: input.is_empty() ||\n    (1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))") -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = const (),
            StorageDead(_56),
            StorageDead(_54),
            StorageDead(_53),
            _51 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#151),
                    scope: scope[2],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#151),
                    scope: scope[2],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = _3,
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = _41,
            _73 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:159:21: 159:61 (#0),
                    scope: scope[2],
                },
                kind: assert(!move _73, "attempt to divide `{}` by zero", _72) -> [success: bb42, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = Div(move _72, const 4_usize),
            StorageDead(_72),
            _74 = MulWithOverflow(_71, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:159:21: 159:65 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_74.1: bool), "attempt to compute `{} * {}`, which would overflow", move _71, const 3_usize) -> [success: bb43, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _70 = move (_74.0: usize),
            StorageDead(_71),
            _68 = Lt(move _69, move _70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:159:8: 159:65 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _68) -> [0: bb45, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageLive(_76),
            _76 = decode::DecodeSliceError::OutputSliceTooSmall,
            _0 = std::result::Result::<usize, decode::DecodeSliceError>::Err(move _76),
            StorageDead(_76),
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            _67 = const (),
            StorageDead(_68),
            StorageDead(_67),
            StorageLive(_77),
            _77 = _41,
            _0 = std::result::Result::<usize, decode::DecodeSliceError>::Ok(move _77),
            StorageDead(_77),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:163:2: 163:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:163:2: 163:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:131:1: 163:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:136:6: 136:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:132:12: 132:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:132:5: 132:10 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:132:5: 132:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:132:5: 132:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:133:20: 133:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:133:5: 133:18 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:133:5: 133:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:133:5: 133:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:134:17: 134:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:134:5: 134:15 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:134:5: 134:15 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:134:5: 134:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:135:19: 135:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:135:5: 135:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:135:5: 135:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:135:5: 135:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#147),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#148),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:137:19: 137:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:137:19: 137:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:137:19: 137:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:137:19: 137:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:137:19: 137:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:137:38: 137:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#149),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:140:5: 146:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:140:8: 140:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:140:8: 140:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:141:25: 141:47 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:141:13: 141:22 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:13: 141:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:31: 141:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:31: 141:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:31: 141:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:31: 141:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:25: 141:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:141:25: 141:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:12: 143:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:12: 143:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:37: 143:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:37: 143:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:50: 143:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:62: 143:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:37: 143:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:37: 143:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:143:9: 145:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:143:91: 145:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:24: 144:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:24: 144:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:49: 144:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:49: 144:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:49: 144:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:49: 144:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:144:66: 144:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:149:48: 153:61 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:149:9: 149:45 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:149:9: 149:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:149:48: 151:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:149:48: 150:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:149:48: 149:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:151:25: 151:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:153:25: 153:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:153:25: 153:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:153:37: 153:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:153:37: 153:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:153:25: 153:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#151),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#153),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:9: 155:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:9: 155:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:29: 155:100 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:29: 155:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:29: 155:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:46: 155:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:46: 155:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:47: 155:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:48: 155:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:48: 155:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:62: 155:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:155:47: 155:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#153),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#153),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:5: 161:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:8: 159:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:8: 159:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:21: 159:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:21: 159:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:21: 159:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:21: 159:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:21: 159:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:159:66: 161:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:160:20: 160:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:162:8: 162:44 (#0),
            scope: scope[0],
        },
    },
]