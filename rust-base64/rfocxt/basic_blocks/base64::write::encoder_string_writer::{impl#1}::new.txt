[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:78:44: 78:57 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::string::String::new() -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:78:9: 78:66 (#0),
                    scope: scope[0],
                },
                kind: _0 = write::encoder_string_writer::EncoderStringWriter::<'_, E, std::string::String>::from_consumer(move _2, move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:78:65: 78:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:77:5: 79:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: write::encoder_string_writer::EncoderStringWriter<'{erased}, E/#1, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:77:34: 77:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/write/encoder_string_writer.rs:77:24: 77:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder_string_writer.rs:77:16: 77:22 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder_string_writer.rs:77:16: 77:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:77:16: 77:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder_string_writer.rs:78:9: 78:66 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:78:44: 78:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder_string_writer.rs:78:9: 78:66 (#0),
                },
            ),
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:78:59: 78:65 (#0),
            scope: scope[0],
        },
    },
]