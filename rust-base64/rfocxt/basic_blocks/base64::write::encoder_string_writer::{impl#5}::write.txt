[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:123:17: 123:41 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::str::from_utf8(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = const "Input must be valid UTF-8",
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:123:17: 123:77 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::result::Result::<&str, std::str::Utf8Error>::expect(move _4, move _6) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_1).0: S),
            StorageLive(_10),
            _10 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:125:9: 125:37 (#0),
                    scope: scope[1],
                },
                kind: _8 = <S as write::encoder_string_writer::StrConsumer>::consume(move _9, move _10) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:127:12: 127:21 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::slice::<impl [u8]>::len(move _12) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = std::result::Result::<usize, std::io::Error>::Ok(move _11),
            StorageDead(_11),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:128:6: 128:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:120:5: 128:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:120:40: 120:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut write::encoder_string_writer::Utf8SingleCodeUnitWriter<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:120:14: 120:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/write/encoder_string_writer.rs:120:30: 120:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder_string_writer.rs:120:25: 120:28 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder_string_writer.rs:120:25: 120:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:120:25: 120:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder_string_writer.rs:123:17: 123:77 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder_string_writer.rs:123:13: 123:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:123:13: 123:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<&'{erased} str, std::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:123:17: 123:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:123:37: 123:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:123:49: 123:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:123:49: 123:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:125:9: 125:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:125:9: 125:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:125:35: 125:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:127:12: 127:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder_string_writer.rs:127:9: 127:22 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:127:12: 127:15 (#0),
            scope: scope[0],
        },
    },
]