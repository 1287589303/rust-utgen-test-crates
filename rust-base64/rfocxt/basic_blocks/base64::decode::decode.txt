[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = const engine::general_purpose::STANDARD,
            _2 = &_3,
            StorageLive(_4),
            _4 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:90:5: 90:27 (#0),
                    scope: scope[0],
                },
                kind: _0 = <engine::general_purpose::GeneralPurpose as engine::Engine>::decode::<T>(move _2, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:91:1: 91:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:91:2: 91:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:90:26: 90:27 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:91:1: 91:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:89:1: 91:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::vec::Vec<u8, std::alloc::Global>, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:89:44: 89:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/decode.rs:89:38: 89:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/decode.rs:89:31: 89:36 (#0),
                            ),
                        ),
                        pat_span: src/decode.rs:89:31: 89:36 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:89:31: 89:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:90:5: 90:27 (#0),
                },
            ),
        ),
        ty: &'{erased} engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:90:5: 90:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:312 ~ base64[d406]::engine::general_purpose::STANDARD),
            },
        ),
        ty: engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:90:5: 90:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:90:5: 90:27 (#0),
                },
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:90:21: 90:26 (#0),
            scope: scope[0],
        },
    },
]