[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_4,
            _6 = &(*_7),
            StorageLive(_8),
            _8 = &mut (*_3),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).1: [u8; 256]),
            _9 = &(*_10),
            StorageLive(_11),
            _11 = (((*_1).2: engine::general_purpose::GeneralPurposeConfig).1: bool),
            StorageLive(_12),
            _12 = (((*_1).2: engine::general_purpose::GeneralPurposeConfig).2: engine::DecodePaddingMode),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                    scope: scope[0],
                },
                kind: _0 = engine::general_purpose::decode::decode_helper(move _5, move _6, move _8, move _9, move _11, move _12) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_10),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:188:6: 188:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:174:5: 188:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:179:10: 179:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:175:9: 175:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:176:16: 176:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:176:9: 176:14 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:176:9: 176:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:176:9: 176:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:177:17: 177:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:177:9: 177:15 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:177:9: 177:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:177:9: 177:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:178:19: 178:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:178:9: 178:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:178:9: 178:17 (#0),
                    },
                ),
            ),
        ),
        ty: engine::general_purpose::decode::GeneralPurposeEstimate,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:178:9: 178:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:181:13: 181:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: &'{erased} engine::general_purpose::decode::GeneralPurposeEstimate,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:182:13: 182:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: &'{erased} engine::general_purpose::decode::GeneralPurposeEstimate,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:182:13: 182:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:183:13: 183:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:184:13: 184:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:184:13: 184:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:185:13: 185:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:180:9: 187:10 (#0),
                },
            ),
        ),
        ty: engine::DecodePaddingMode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:186:13: 186:44 (#0),
            scope: scope[0],
        },
    },
]