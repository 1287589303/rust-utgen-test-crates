[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = [const engine::general_purpose::INVALID_VALUE; 256],
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            _3 = const 0_usize,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = _3,
            _6 = Lt(move _7, const 64_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:220:11: 220:21 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _6) -> [0: bb7, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _3,
            _12 = Len(((*_1).0: [u8; 64])),
            _13 = Lt(_11, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:223:22: 223:45 (#0),
                    scope: scope[2],
                },
                kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = ((*_1).0: [u8; 64])[_11],
            _9 = move _10 as usize (IntToInt),
            StorageDead(_10),
            _14 = Len(_2),
            _15 = Lt(_9, _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:223:9: 223:55 (#0),
                    scope: scope[2],
                },
                kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _9) -> [success: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2[_9] = move _8 as u8 (IntToInt),
            StorageDead(_8),
            StorageDead(_11),
            StorageDead(_9),
            _16 = AddWithOverflow(_3, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:224:9: 224:19 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_16.0: usize),
            _5 = const (),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_18),
            _4 = const (),
            StorageDead(_18),
            StorageDead(_6),
            StorageDead(_4),
            _0 = _2,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:228:2: 228:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:214:1: 228:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:214:58: 214:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:214:44: 214:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:214:34: 214:42 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:214:34: 214:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:214:34: 214:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:215:28: 215:48 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:215:9: 215:25 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:215:9: 215:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:219:21: 219:22 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:219:9: 219:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:219:9: 219:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:214:1: 228:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#531),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:220:11: 220:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#531),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:220:11: 220:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:58: 223:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:22: 223:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:22: 223:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:39: 223:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:22: 223:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:22: 223:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:9: 223:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:223:9: 223:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:224:9: 224:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#531),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:220:5: 225:6 (#531),
            scope: scope[0],
        },
    },
]